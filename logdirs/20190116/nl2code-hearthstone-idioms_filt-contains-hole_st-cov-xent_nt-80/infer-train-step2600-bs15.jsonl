{"index": 0, "beams": [{"score": -0.12343718938694082, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"hole0": "WeaponSelector", "_type": "Template69", "hole1": "EnemyPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -0.041281700134277344, -1.9073486328125e-06, -0.0019953250885009766, -0.0007136930944398046, -1.1920928244535389e-07, -0.0031407452188432217, -0.0005340432398952544, 0.0, -0.00299835205078125, -1.1444091796875e-05, -0.0010368824005126953, 0.0, -4.2915203266602475e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 61, 250, "Weapon", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -4.153711312166166, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -3.31689453125, -0.7472600936889648, -3.814697265625e-06, 0.0, -0.0010073184967041016, -0.0038738250732421875, -2.3841855067985307e-07, -0.00322723388671875, -0.000102996826171875, -1.9073486328125e-06, -0.0009167194366455078, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.005455136299133301, -0.00045418739318847656, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.0027086734771728516, 0.0, -5.841241545567755e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 40, 135, 19, 160, "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -4.465219852705957, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(BattleAxe()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"hole0": "Destroy", "_type": "Template59", "hole1": [{"hole0": "BattleAxe", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -3.9477052688598633, -0.0006046295166015625, -0.0007518663187511265, -0.012405037879943848, -3.814697265625e-06, -0.001399993896484375, -1.9073486328125e-06, -0.4038868844509125, -0.07386869192123413, -1.609325408935547e-05, -0.000415802001953125, -5.7220458984375e-06, -0.0022563901729881763, -1.9073486328125e-06, -4.482158328755759e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 28, 241, "Destroy", "<EOS>", 282, 68, 260, "Battle", "Axe", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -4.635556810263942, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            MinionSelector(IsType(MINION_TYPE.BEAST))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -3.31689453125, -0.6546201705932617, -1.9073486328125e-06, 0.0, -0.0011501312255859375, -0.0006694793701171875, -1.1920928244535389e-07, -0.5443229675292969, -0.0014743804931640625, -0.0036163330078125, -4.9591064453125e-05, 0.0, -0.01394498348236084, -0.00013053417205810547, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.000156402587890625, -3.933906555175781e-06, -0.0016937255859375, -3.933906555175781e-06, -0.022116661071777344, -3.814697265625e-06, -0.0029151439666748047, 0.0, -7.152548278099857e-07, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -4.766536250600375, "inferred_code": "class Acidic<UNK>Ooze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"hole0": "WeaponSelector", "_type": "Template69", "hole1": "EnemyPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Acidic<UNK>Ooze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -4.654468059539795, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -0.041281700134277344, -1.9073486328125e-06, -0.0019953250885009766, -0.0007136930944398046, -1.1920928244535389e-07, -0.0031407452188432217, -0.0005340432398952544, 0.0, -0.00299835205078125, -1.1444091796875e-05, -0.0010368824005126953, 0.0, -4.2915203266602475e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "<UNK>", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 61, 250, "Weapon", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -5.407427423242481, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            MinionSelector(IsType(MINION_TYPE.BEAST), BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -3.31689453125, -0.6546201705932617, -1.9073486328125e-06, 0.0, -0.0011501312255859375, -0.0006694793701171875, -1.1920928244535389e-07, -0.8738307952880859, -0.0012149810791015625, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.2329322099685669, -0.0007491111755371094, -1.1920928244535389e-07, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.05718994140625e-05, 0.0, -0.000125885009765625, -2.0265579223632812e-06, -0.00074005126953125, 0.0, -0.0004138946533203125, 0.0, -0.2480483055114746, -0.0004227161407470703, -0.000331878662109375, -0.00225830078125, -1.9073486328125e-06, -0.0011148451594635844, 0.0, -4.172321041551186e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 68, 260, "Both", "Player", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -5.750979114784457, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "ChangeAttack", "_type": "Template28", "hole1": 1, "hole2": "ChangeHealth", "hole3": 1}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -5.3389129638671875, -0.0010967254638671875, -0.0004188844468444586, -0.0006144046783447266, -9.5367431640625e-06, -0.09118103981018066, -7.62939453125e-06, -9.72747802734375e-05, -0.001888275146484375, -1.9073486328125e-06, -0.19672226905822754, -3.814697265625e-06, -0.05027580261230469, -7.62939453125e-06, -8.988380432128906e-05, -0.0003644227981567383, 0.0, -0.006427764892578125, -2.09808349609375e-05, -0.0027425172738730907, 0.0, -2.4795215722406283e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 50, 203, "Change", "Attack", "<EOS>", "1", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 68, 260, "Self", "Selector", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -6.149181905084724, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Ooze Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Ooze Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"hole0": "WeaponSelector", "_type": "Template69", "hole1": "EnemyPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -6.035745143890381, -2.86102294921875e-05, -0.0001509187713963911, -0.0002155303955078125, -4.184218414593488e-05, 0.0, -9.167194366455078e-05, 0.0, -0.0015279054641723633, 0.0, -0.019883155822753906, -0.016130447387695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.72747802734375e-05, -0.0076503753662109375, -1.33514404296875e-05, -0.0038282868918031454, -0.0001696314720902592, -0.03582763671875, -1.9073486328125e-06, -0.0020868778228759766, -0.0006918818689882755, -1.1920928244535389e-07, -0.0031100441701710224, -0.0004972259048372507, 0.0, -0.0029544830322265625, -9.5367431640625e-06, -0.0010254383087158203, 0.0, -4.410729161463678e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Ooze", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 61, 250, "Weapon", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -6.151489319868169, "inferred_code": "class <UNK>SwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"hole0": "WeaponSelector", "_type": "Template69", "hole1": "EnemyPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>SwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -6.030489921569824, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -0.041281700134277344, -1.9073486328125e-06, -0.0019953250885009766, -0.0007136930944398046, -1.1920928244535389e-07, -0.0031407452188432217, -0.0005340432398952544, 0.0, -0.00299835205078125, -1.1444091796875e-05, -0.0010368824005126953, 0.0, -4.2915203266602475e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 61, 250, "Weapon", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -6.354298226894059, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"hole0": "UserPicker", "_type": "Template52"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -5.755000114440918, -0.5247440338134766, -0.0009576082229614258, -0.0001316070556640625, -1.9073486328125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.001659631496295333, -3.814697265625e-06, -1.2159278412582353e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 55, 227, "User", "Picker", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -6.359558101024447, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), WeaponSelector(\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Kill", "_type": "Template77"}, {"hole0": "WeaponSelector", "_type": "Template69", "hole1": "EnemyPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -6.088648796081543, -2.9682869353564456e-05, -0.19472217559814453, -3.814697265625e-06, -0.0018044710159301758, -0.0009601108031347394, 0.0, -0.0014705169014632702, -0.00027510273503139615, 0.0, -0.003292083740234375, -7.62939453125e-06, -0.0007134675979614258, 0.0, -8.46382954478031e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Kill", "<EOS>", 61, 250, "Weapon", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -7.211127155173628, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            MinionSelector(IsType(MINION_TYPE.BEAST), PlayerSelector())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "PlayerSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -3.31689453125, -0.6546201705932617, -1.9073486328125e-06, 0.0, -0.0011501312255859375, -0.0006694793701171875, -1.1920928244535389e-07, -0.8738307952880859, -0.0012149810791015625, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.2329322099685669, -0.0007491111755371094, -1.1920928244535389e-07, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.05718994140625e-05, 0.0, -0.000125885009765625, -2.0265579223632812e-06, -0.00074005126953125, 0.0, -0.0004138946533203125, 0.0, -2.0434775352478027, -0.00024342535471078008, 0.0, -0.0075435638427734375, -2.6702880859375e-05, -0.004589676856994629, 0.0, -9.536727247905219e-07, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 68, 260, "Player", "Selector", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -7.581420536869182, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(),\n            WeaponSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 2, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"hole0": "WeaponSelector", "_type": "Template69", "hole1": "EnemyPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template23", "hole1": 2, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -0.015398025512695312, -9.5367431640625e-06, -1.9073486328125e-06, -6.878376007080078e-05, -1.9073486328125e-06, -9.5367431640625e-05, -0.007537841796875, -1.33514404296875e-05, -0.00391093734651804, -0.00018596288282424212, -0.041281700134277344, -1.9073486328125e-06, -0.0019953250885009766, -0.0007136930944398046, -1.1920928244535389e-07, -0.0031407452188432217, -0.0005340432398952544, 0.0, -6.354089736938477, -0.0006389617919921875, -0.00020861624216195196, -7.748586540401448e-06, -0.00012097033322788775, 0.0, -1.0922727584838867, 0.0, -0.013632774353027344, -9.5367431640625e-06, -0.0010474920272827148, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 61, 250, "Weapon", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", 109, 200, "3", "<EOS>", "2", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.203712187342191, "inferred_code": "class AcidicSwampOoze(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidic Swamp Ooze', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=MINION_TYPE.BEAST())\n\n    def create_minion(self, player):\n        return Minion(3, 2, enrage=[Aura(ChangeAttack(2), WeaponSelector()),\n            Aura(Destroy(), WeaponSelector(EnemyPlayer()))])\n", "model_output": {"body": [{"body": [{"hole0": "Acidic Swamp Ooze", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Call", "func": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template23", "hole1": 2, "hole2": "enrage", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "WeaponSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}, {"args": [{"hole0": "Destroy", "_type": "Template77"}, {"hole0": "WeaponSelector", "_type": "Template69", "hole1": "EnemyPlayer"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "AcidicSwampOoze"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0002422332763671875, -1.33514404296875e-05, -0.0024377910885959864, -0.01136899832636118, -0.0001904870441649109, -1.6689286894688848e-06, -1.9073486328125e-05, -1.71661376953125e-05, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.0027561187744140625, -0.000102996826171875, -4.672895011026412e-05, -7.677078247070312e-05, -0.002408742904663086, -1.71661376953125e-05, -9.500976011622697e-05, -0.0001506805419921875, -3.79082266590558e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.0017567873001098633, 0.0, -0.02264404296875, -4.307131767272949, -0.015669822692871094, -1.9073486328125e-06, -0.0073184967041015625, 0.0, -0.08425426483154297, 0.0, -0.7698755264282227, -1.537799835205078e-05, -0.036346435546875, -3.814697265625e-06, -0.00014948713942430913, -1.1920928244535389e-07, -0.0003213851305190474, 0.0, -0.7765309810638428, -1.9073486328125e-06, -0.000102996826171875, -2.47955322265625e-05, -0.5228452682495117, -1.9073486328125e-05, -0.0002460479736328125, -1.9073486328125e-06, -3.814697265625e-06, -0.10395157337188721, 0.0, -0.0001010894775390625, -0.056448936462402344, -0.0002117156982421875, -0.031132221221923828, -3.814697265625e-06, -0.2037334442138672, -1.33514404296875e-05, -0.560718297958374, -0.0011391639709472656, -9.5367431640625e-06, -0.00070953369140625, -0.0028743743896484375, -5.7220458984375e-06, -3.814697265625e-06, -0.6341044902801514, -3.814697265625e-06, -2.09808349609375e-05, -0.0004482269287109375, -3.24249267578125e-05, -0.0007955837645567954, -0.0002248267555842176, -0.02068328857421875, 0.0, -0.015453577041625977, -9.334085916634649e-05, -1.1920928244535389e-07, -0.005335722118616104, -9.893936658045277e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Acidic", "Swamp", "Ooze", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Acidic", " ", "Swamp", " ", "Ooze", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 134, 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "3", "<EOS>", "2", "<EOS>", "enrage", "<EOS>", 17, 155, 283, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 68, 260, "Weapon", "Selector", "<EOS>", 40, 136, 19, 160, "Aura", "<EOS>", 283, 68, 260, "Destroy", "<EOS>", 61, 250, "Weapon", "Selector", "<EOS>", "Enemy", "Player", "<EOS>"]}, {"score": -22.126157760620117, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -22.126150131225586], "choice_history": [80, 159, 294]}]}
{"index": 1, "beams": [{"score": -1.5390691503590617, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.9416580200195312, -3.814697265625e-06, -3.0517578125e-05, -3.4332275390625e-05, -9.1552734375e-05, -2.6702880859375e-05, 0.0, -3.62396240234375e-05, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.53131103515625e-05, -1.9073486328125e-06, -6.103515625e-05, 0.0, -2.09808349609375e-05, -5.7220458984375e-05, -2.6702880859375e-05, -6.556510470545618e-06, -0.00063323974609375, -1.9073486328125e-06, -0.0017824172973632812, -4.38690185546875e-05, -1.9073486328125e-06, -1.52587890625e-05, -8.58306884765625e-05, -1.9073486328125e-06, -0.00154876708984375, -3.814697265625e-06, -4.1961669921875e-05, -0.0001373291015625, -0.0002307891845703125, -1.9073486328125e-06, -0.00272369384765625, -3.814697265625e-06, -0.0002498626708984375, -0.0002307891845703125, -0.0014801025390625, -0.0036773681640625, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.0001392364501953125, 0.0, -0.0005730385892093182, -5.7220458984375e-06, -0.003719329833984375, -0.05560779571533203, -0.000518798828125, -7.62939453125e-05, 0.0, -0.0002536773681640625, -1.9073486328125e-06, -0.28705596923828125, 0.0, -0.000263214111328125, -0.0001850128173828125, -1.9073486328125e-05, -9.5367431640625e-06, -0.12318241596221924, -0.000453948974609375, -0.0019588470458984375, -0.005344390869140625, -0.0011092424392700195, -3.814697265625e-06, -0.0029420852661132812, -2.09808349609375e-05, -3.814697265625e-06, -7.62939453125e-05, 0.0, -0.009769439697265625, -3.24249267578125e-05, -0.001697540283203125, 0.0, -0.003701925277709961, -9.72747802734375e-05, -0.00079345703125, -5.841255187988281e-06, -0.04081261157989502, 0.0, -0.0015621185302734375, -0.0001220703125, -1.3828277587890625e-05, -2.3841830625315197e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -3.2626070717427567, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n        self.target.damage(player.effective_heal_power(self.target.card.\n            minion_type()), self)\n        self.target.taunt = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.8715505599975586, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -8.392333984375e-05, 0.0, -3.826618194580078e-05, -1.9073486328125e-06, -2.09808349609375e-05, -1.52587890625e-05, -3.814697265625e-06, -5.340576171875e-05, -1.9073486328125e-06, -8.20159912109375e-05, 0.0, -3.4332275390625e-05, -4.57763671875e-05, -2.288818359375e-05, -8.463859558105469e-06, -0.007663726806640625, -1.9073486328125e-06, -0.00061798095703125, -0.0001220703125, 0.0, -4.38690185546875e-05, -0.00016021728515625, -1.9073486328125e-06, -0.000705718994140625, -3.814697265625e-06, -4.38690185546875e-05, -8.96453857421875e-05, -0.0002899169921875, -1.9073486328125e-06, -0.0029802322387695312, -3.814697265625e-06, -0.0002346038818359375, -0.000209808349609375, -0.0011463165283203125, -0.0035152435302734375, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.00014495849609375, 0.0, -0.0005679125897586346, -5.7220458984375e-06, -0.0037670135498046875, -0.04703807830810547, -0.0005359649658203125, -8.0108642578125e-05, 0.0, -0.0002498626708984375, -1.9073486328125e-06, -0.2110891342163086, 0.0, -0.0002593994140625, -0.0001888275146484375, -1.9073486328125e-05, -1.1444091796875e-05, -0.12448322772979736, -0.000484466552734375, -0.00180816650390625, -0.005228996276855469, -0.0010987520217895508, -3.814697265625e-06, -0.017304420471191406, -2.09808349609375e-05, -1.9073486328125e-06, -0.0003261566162109375, 0.0, -0.04179096221923828, -1.33514404296875e-05, -0.000469207763671875, 0.0, -0.005088925361633301, -7.05718994140625e-05, -0.000362396240234375, -2.0265579223632812e-06, -0.0687781572341919, 0.0, -0.001415252685546875, -5.7220458984375e-05, -1.3589859008789062e-05, -9.536738616588991e-07, -0.028833389282226562, -3.814697265625e-06, -0.0001010894775390625, -0.0024280548095703125, -1.9073486328125e-06, 0.0, -0.028310775756835938, 0.0, -0.0010204315185546875, -5.7220458984375e-05, -0.030160903930664062, -1.52587890625e-05, -0.0010499954223632812, 0.0, -0.21912014484405518, -3.814697265625e-05, -0.0002536773681640625, -0.09224605560302734, -0.11285591125488281, -0.029897689819335938, -5.53131103515625e-05, -1.71661376953125e-05, 0.0, -0.0003681182861328125, 0.0, -0.0006582731730304658, -1.9073486328125e-06, -0.000438690185546875, -0.07227230072021484, -0.0003452301025390625, -7.82012939453125e-05, 0.0, -0.0002346038818359375, -3.814697265625e-06, -0.16812801361083984, -5.7220458984375e-06, -0.00263214111328125, 0.0, -0.003942608833312988, -0.0005970001220703125, -2.47955322265625e-05, -5.14984130859375e-05, -0.04311084747314453, -3.814697265625e-06, -0.4014178514480591, -4.00543212890625e-05, -0.0002994537353515625, -0.15717506408691406, -0.08683633804321289, -2.6702880859375e-05, -0.1619405746459961, -1.1444091796875e-05, -3.814697265625e-06, -0.0002040863037109375, 0.0, -0.04363059997558594, -2.86102294921875e-05, -0.00089263916015625, 0.0, -0.0016319751739501953, -6.29425048828125e-05, -0.00042724609375, -5.841255187988281e-06, -0.1021108627319336, 0.0, -0.0019626617431640625, -8.96453857421875e-05, -1.1801719665527344e-05, -1.1920922133867862e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.168864820864762, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.card.\n            minion_type()), self)\n        self.target.taunt = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.9416580200195312, -3.814697265625e-06, -3.0517578125e-05, -3.4332275390625e-05, -9.1552734375e-05, -2.6702880859375e-05, 0.0, -3.62396240234375e-05, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.53131103515625e-05, -1.9073486328125e-06, -6.103515625e-05, 0.0, -2.09808349609375e-05, -5.7220458984375e-05, -2.6702880859375e-05, -6.556510470545618e-06, -0.00063323974609375, -1.9073486328125e-06, -0.0017824172973632812, -4.38690185546875e-05, -1.9073486328125e-06, -1.52587890625e-05, -8.58306884765625e-05, -1.9073486328125e-06, -0.00154876708984375, -3.814697265625e-06, -4.1961669921875e-05, -0.0001373291015625, -0.0002307891845703125, -1.9073486328125e-06, -0.00272369384765625, -3.814697265625e-06, -0.0002498626708984375, -0.0002307891845703125, -0.0014801025390625, -0.0036773681640625, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.0001392364501953125, 0.0, -0.0005730385892093182, -5.7220458984375e-06, -0.003719329833984375, -0.05560779571533203, -0.000518798828125, -7.62939453125e-05, 0.0, -0.0002536773681640625, -1.9073486328125e-06, -1.3904752731323242, -3.814697265625e-06, -0.0004596710205078125, 0.0, -0.005647778511047363, -0.00055694580078125, -1.33514404296875e-05, -8.96453857421875e-05, -0.13256871700286865, -3.814697265625e-06, -1.0167856216430664, -4.76837158203125e-05, -0.000152587890625, -0.3472099304199219, -0.1133584976196289, -1.52587890625e-05, -0.013045310974121094, -9.5367431640625e-06, -7.62939453125e-06, -7.82012939453125e-05, 0.0, -0.009972572326660156, -4.57763671875e-05, -0.003875732421875, 0.0, -0.002043485641479492, -7.43865966796875e-05, -0.0006427764892578125, -5.841255187988281e-06, -0.07184231281280518, 0.0, -0.0018749237060546875, -0.000110626220703125, -1.3947486877441406e-05, -3.576272320060525e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.174001549155143, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.card.BEAST\n            ()), self)\n        self.target.taunt = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.9416580200195312, -3.814697265625e-06, -3.0517578125e-05, -3.4332275390625e-05, -9.1552734375e-05, -2.6702880859375e-05, 0.0, -3.62396240234375e-05, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.53131103515625e-05, -1.9073486328125e-06, -6.103515625e-05, 0.0, -2.09808349609375e-05, -5.7220458984375e-05, -2.6702880859375e-05, -6.556510470545618e-06, -0.00063323974609375, -1.9073486328125e-06, -0.0017824172973632812, -4.38690185546875e-05, -1.9073486328125e-06, -1.52587890625e-05, -8.58306884765625e-05, -1.9073486328125e-06, -0.00154876708984375, -3.814697265625e-06, -4.1961669921875e-05, -0.0001373291015625, -0.0002307891845703125, -1.9073486328125e-06, -0.00272369384765625, -3.814697265625e-06, -0.0002498626708984375, -0.0002307891845703125, -0.0014801025390625, -0.0036773681640625, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.0001392364501953125, 0.0, -0.0005730385892093182, -5.7220458984375e-06, -0.003719329833984375, -0.05560779571533203, -0.000518798828125, -7.62939453125e-05, 0.0, -0.0002536773681640625, -1.9073486328125e-06, -1.3904752731323242, -3.814697265625e-06, -0.0004596710205078125, 0.0, -0.005647778511047363, -0.00055694580078125, -1.33514404296875e-05, -8.96453857421875e-05, -0.13256871700286865, -3.814697265625e-06, -1.515787124633789, -7.2479248046875e-05, -0.0001926422119140625, -0.0018157958984375, -0.0025148391723632812, 0.0, -0.006611824035644531, -1.1444091796875e-05, -7.62939453125e-06, -9.5367431640625e-05, 0.0, -0.007457733154296875, -1.71661376953125e-05, -0.0047092437744140625, 0.0, -0.0018323659896850586, -6.67572021484375e-05, -0.0008754730224609375, -5.841255187988281e-06, -0.04231560230255127, 0.0, -0.0017795562744140625, -0.0001678466796875, -1.3828277587890625e-05, -2.3841830625315197e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "BEAST", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.268850658283434, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n        self.target.damage(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.8715505599975586, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -8.392333984375e-05, 0.0, -3.826618194580078e-05, -1.9073486328125e-06, -2.09808349609375e-05, -1.52587890625e-05, -3.814697265625e-06, -5.340576171875e-05, -1.9073486328125e-06, -8.20159912109375e-05, 0.0, -3.4332275390625e-05, -4.57763671875e-05, -2.288818359375e-05, -8.463859558105469e-06, -0.007663726806640625, -1.9073486328125e-06, -0.00061798095703125, -0.0001220703125, 0.0, -4.38690185546875e-05, -0.00016021728515625, -1.9073486328125e-06, -0.000705718994140625, -3.814697265625e-06, -4.38690185546875e-05, -8.96453857421875e-05, -0.0002899169921875, -1.9073486328125e-06, -0.0029802322387695312, -3.814697265625e-06, -0.0002346038818359375, -0.000209808349609375, -0.0011463165283203125, -0.0035152435302734375, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.00014495849609375, 0.0, -0.0005679125897586346, -5.7220458984375e-06, -0.0037670135498046875, -0.04703807830810547, -0.0005359649658203125, -8.0108642578125e-05, 0.0, -0.0002498626708984375, -1.9073486328125e-06, -0.2110891342163086, 0.0, -0.0002593994140625, -0.0001888275146484375, -1.9073486328125e-05, -1.1444091796875e-05, -0.12448322772979736, -0.000484466552734375, -0.00180816650390625, -0.005228996276855469, -0.0010987520217895508, -3.814697265625e-06, -0.017304420471191406, -2.09808349609375e-05, -1.9073486328125e-06, -0.0003261566162109375, 0.0, -0.04179096221923828, -1.33514404296875e-05, -0.000469207763671875, 0.0, -0.005088925361633301, -7.05718994140625e-05, -0.000362396240234375, -2.0265579223632812e-06, -0.0687781572341919, 0.0, -0.001415252685546875, -5.7220458984375e-05, -1.3589859008789062e-05, -9.536738616588991e-07, -0.028833389282226562, -3.814697265625e-06, -0.0001010894775390625, -0.0024280548095703125, -1.9073486328125e-06, 0.0, -0.028310775756835938, 0.0, -0.0010204315185546875, -5.7220458984375e-05, -0.030160903930664062, -1.52587890625e-05, -0.0010499954223632812, 0.0, -0.21912014484405518, -3.814697265625e-05, -0.0002536773681640625, -0.09224605560302734, -0.11285591125488281, -0.029897689819335938, -5.53131103515625e-05, -1.71661376953125e-05, 0.0, -0.0003681182861328125, 0.0, -0.0006582731730304658, -1.9073486328125e-06, -0.000438690185546875, -0.07227230072021484, -0.0003452301025390625, -7.82012939453125e-05, 0.0, -0.0002346038818359375, -3.814697265625e-06, -1.8719902038574219, 0.0, -0.0007038116455078125, -0.000102996826171875, -1.9073486328125e-05, -3.814697265625e-06, -0.13207924365997314, -0.0002040863037109375, -0.001331329345703125, -0.002288818359375, -0.0009938478469848633, -5.7220458984375e-06, -0.029745101928710938, -1.9073486328125e-05, -1.9073486328125e-06, -0.0004425048828125, 0.0, -0.055212974548339844, -1.1444091796875e-05, -0.0004711151123046875, 0.0, -0.003996133804321289, -6.4849853515625e-05, -0.0003185272216796875, -1.9073486328125e-06, -0.08200275897979736, 0.0, -0.0014667510986328125, -5.91278076171875e-05, -1.3589859008789062e-05, -7.152555099310121e-07], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.304115866096588, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.card.\n            calculate_max_health()), self)\n        self.target.taunt = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.9416580200195312, -3.814697265625e-06, -3.0517578125e-05, -3.4332275390625e-05, -9.1552734375e-05, -2.6702880859375e-05, 0.0, -3.62396240234375e-05, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.53131103515625e-05, -1.9073486328125e-06, -6.103515625e-05, 0.0, -2.09808349609375e-05, -5.7220458984375e-05, -2.6702880859375e-05, -6.556510470545618e-06, -0.00063323974609375, -1.9073486328125e-06, -0.0017824172973632812, -4.38690185546875e-05, -1.9073486328125e-06, -1.52587890625e-05, -8.58306884765625e-05, -1.9073486328125e-06, -0.00154876708984375, -3.814697265625e-06, -4.1961669921875e-05, -0.0001373291015625, -0.0002307891845703125, -1.9073486328125e-06, -0.00272369384765625, -3.814697265625e-06, -0.0002498626708984375, -0.0002307891845703125, -0.0014801025390625, -0.0036773681640625, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.0001392364501953125, 0.0, -0.0005730385892093182, -5.7220458984375e-06, -0.003719329833984375, -0.05560779571533203, -0.000518798828125, -7.62939453125e-05, 0.0, -0.0002536773681640625, -1.9073486328125e-06, -1.3904752731323242, -3.814697265625e-06, -0.0004596710205078125, 0.0, -0.005647778511047363, -0.00055694580078125, -1.33514404296875e-05, -8.96453857421875e-05, -0.13256871700286865, -3.814697265625e-06, -1.6335630416870117, -0.009675979614257812, -0.001377105712890625, -0.007671356201171875, -0.005018353462219238, -1.9073486328125e-06, -0.0031747817993164062, -2.86102294921875e-05, -5.7220458984375e-06, -7.2479248046875e-05, 0.0, -0.0076923370361328125, -2.6702880859375e-05, -0.0035381317138671875, 0.0, -0.0011650323867797852, -7.43865966796875e-05, -0.0008907318115234375, -5.841255187988281e-06, -0.04069530963897705, 0.0, -0.0016422271728515625, -0.0001316070556640625, -1.3828277587890625e-05, -1.7881377516459906e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.46882817593518, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n        self.target.taunt = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.9416580200195312, -3.814697265625e-06, -3.0517578125e-05, -3.4332275390625e-05, -9.1552734375e-05, -2.6702880859375e-05, 0.0, -3.62396240234375e-05, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.53131103515625e-05, -1.9073486328125e-06, -6.103515625e-05, 0.0, -2.09808349609375e-05, -5.7220458984375e-05, -2.6702880859375e-05, -6.556510470545618e-06, -0.00063323974609375, -1.9073486328125e-06, -0.0017824172973632812, -4.38690185546875e-05, -1.9073486328125e-06, -1.52587890625e-05, -8.58306884765625e-05, -1.9073486328125e-06, -0.00154876708984375, -3.814697265625e-06, -4.1961669921875e-05, -0.0001373291015625, -0.0002307891845703125, -1.9073486328125e-06, -0.00272369384765625, -3.814697265625e-06, -0.0002498626708984375, -0.0002307891845703125, -0.0014801025390625, -0.0036773681640625, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.0001392364501953125, 0.0, -0.0005730385892093182, -5.7220458984375e-06, -0.003719329833984375, -0.05560779571533203, -0.000518798828125, -7.62939453125e-05, 0.0, -0.0002536773681640625, -1.9073486328125e-06, -0.28705596923828125, 0.0, -0.000263214111328125, -0.0001850128173828125, -1.9073486328125e-05, -9.5367431640625e-06, -3.0268754959106445, -0.000152587890625, -0.002231597900390625, -0.001865386962890625, -0.0014848709106445312, -3.24249267578125e-05, -0.024171829223632812, -1.33514404296875e-05, -3.814697265625e-06, -0.0016384124755859375, 0.0, -0.0044727325439453125, -8.392333984375e-05, -0.002788543701171875, 0.0, -0.005942344665527344, -6.866455078125e-05, -0.0006122589111328125, -3.814697265625e-06, -0.049704670906066895, 0.0, -0.0012187957763671875, -8.392333984375e-05, -1.5497207641601562e-05, -8.344646857949556e-07], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.97860929779403, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n        self.target.damage(player.effective_heal_power(self.target.card.\n            minion_type()), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -2.079744338989258, -0.00104522705078125, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -8.392333984375e-05, 0.0, -4.971027374267578e-05, -1.9073486328125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -3.814697265625e-06, -8.392333984375e-05, -1.9073486328125e-06, -6.103515625e-05, 0.0, -3.62396240234375e-05, -5.340576171875e-05, -1.9073486328125e-05, -8.463859558105469e-06, -0.0056896209716796875, 0.0, -0.0065765380859375, -8.392333984375e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.014627456665039062, -1.9073486328125e-06, -0.000457763671875, -5.7220458984375e-06, -6.4849853515625e-05, -6.103515625e-05, -0.0009632110595703125, -1.9073486328125e-06, -0.0037908554077148438, -3.814697265625e-06, -0.0002651214599609375, -0.000217437744140625, -0.00127410888671875, -0.0038051605224609375, -1.71661376953125e-05, -1.52587890625e-05, 0.0, -0.0001430511474609375, 0.0, -0.0005762572400271893, -5.7220458984375e-06, -0.0035762786865234375, -0.05107593536376953, -0.0005435943603515625, -7.62939453125e-05, 0.0, -0.0002536773681640625, -1.9073486328125e-06, -0.22220611572265625, 0.0, -0.00025177001953125, -0.00019073486328125, -1.9073486328125e-05, -1.1444091796875e-05, -0.12297928333282471, -0.000476837158203125, -0.00186920166015625, -0.005528450012207031, -0.0011349916458129883, -3.814697265625e-06, -0.009988784790039062, -3.0517578125e-05, -5.7220458984375e-06, -0.0026378631591796875, 0.0, -0.011735916137695312, -3.814697265625e-05, -0.001560211181640625, 0.0, -0.003577589988708496, -6.29425048828125e-05, -0.000881195068359375, -5.841255187988281e-06, -0.0931321382522583, 0.0, -0.0013904571533203125, -9.72747802734375e-05, -1.1682510375976562e-05, -8.344646857949556e-07, -0.07692146301269531, -1.9073486328125e-06, -9.918212890625e-05, -0.001255035400390625, -1.9073486328125e-06, 0.0, -0.055075645446777344, 0.0, -0.0006198883056640625, -7.62939453125e-05, -0.014234542846679688, -1.1444091796875e-05, -0.0011453628540039062, 0.0, -0.7183904647827148, -2.288818359375e-05, -0.0002155303955078125, -0.056267738342285156, -0.16068649291992188, -0.021451950073242188, -5.53131103515625e-05, -1.52587890625e-05, 0.0, -0.000274658203125, 0.0, -0.0005447861040011048, -1.9073486328125e-06, -0.00060272216796875, -0.06517887115478516, -0.0003757476806640625, -8.20159912109375e-05, 0.0, -0.000217437744140625, -3.814697265625e-06, -0.29253196716308594, -5.7220458984375e-06, -0.0017566680908203125, 0.0, -0.004098057746887207, -0.00061798095703125, -2.09808349609375e-05, -5.53131103515625e-05, -0.05146646499633789, -3.814697265625e-06, -0.4770241975784302, -4.38690185546875e-05, -0.00029754638671875, -0.19994068145751953, -0.07985115051269531, -2.288818359375e-05], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.107643936140384, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n        self.target.damage(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.8715505599975586, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -8.392333984375e-05, 0.0, -3.826618194580078e-05, -1.9073486328125e-06, -2.09808349609375e-05, -1.52587890625e-05, -3.814697265625e-06, -5.340576171875e-05, -1.9073486328125e-06, -8.20159912109375e-05, 0.0, -3.4332275390625e-05, -4.57763671875e-05, -2.288818359375e-05, -8.463859558105469e-06, -0.007663726806640625, -1.9073486328125e-06, -0.00061798095703125, -0.0001220703125, 0.0, -4.38690185546875e-05, -0.00016021728515625, -1.9073486328125e-06, -0.000705718994140625, -3.814697265625e-06, -4.38690185546875e-05, -8.96453857421875e-05, -0.0002899169921875, -1.9073486328125e-06, -0.0029802322387695312, -3.814697265625e-06, -0.0002346038818359375, -0.000209808349609375, -0.0011463165283203125, -0.0035152435302734375, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.00014495849609375, 0.0, -0.0005679125897586346, -5.7220458984375e-06, -0.0037670135498046875, -0.04703807830810547, -0.0005359649658203125, -8.0108642578125e-05, 0.0, -0.0002498626708984375, -1.9073486328125e-06, -0.2110891342163086, 0.0, -0.0002593994140625, -0.0001888275146484375, -1.9073486328125e-05, -1.1444091796875e-05, -0.12448322772979736, -0.000484466552734375, -0.00180816650390625, -0.005228996276855469, -0.0010987520217895508, -3.814697265625e-06, -0.017304420471191406, -2.09808349609375e-05, -1.9073486328125e-06, -0.0003261566162109375, 0.0, -0.04179096221923828, -1.33514404296875e-05, -0.000469207763671875, 0.0, -0.005088925361633301, -7.05718994140625e-05, -0.000362396240234375, -2.0265579223632812e-06, -0.0687781572341919, 0.0, -0.001415252685546875, -5.7220458984375e-05, -1.3589859008789062e-05, -9.536738616588991e-07, -0.028833389282226562, -3.814697265625e-06, -0.0001010894775390625, -0.0024280548095703125, -1.9073486328125e-06, 0.0, -0.028310775756835938, 0.0, -0.0010204315185546875, -5.7220458984375e-05, -0.030160903930664062, -1.52587890625e-05, -0.0010499954223632812, 0.0, -0.21912014484405518, -3.814697265625e-05, -0.0002536773681640625, -2.4948816299438477, -2.09808349609375e-05, -0.2876321077346802, 0.0, -9.5367431640625e-06, -1.9073486328125e-05, -0.004849433898925781, -5.960462772236497e-07, -0.016016006469726562, -3.814697265625e-06, -0.04291248321533203, -0.000171661376953125, -1.9073486328125e-06, -2.09808349609375e-05, -7.2479248046875e-05, 0.0, -0.001476287841796875, -3.814697265625e-06, -0.0001068115234375, -4.57763671875e-05, -0.000286102294921875, 0.0, -0.0038423538208007812, -1.9073486328125e-06, -0.0002880096435546875, -0.000274658203125, -0.0008525848388671875, -0.0027599334716796875, -1.52587890625e-05, -1.71661376953125e-05, 0.0, -0.00014317035675048828, 0.0, -0.0005724426009692252, -5.7220458984375e-06, -0.0040988922119140625, -0.05098724365234375, -0.0004940032958984375, -7.43865966796875e-05, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.28754520416259766, 0.0, -0.000247955322265625, -0.000179290771484375, -1.9073486328125e-05, -9.5367431640625e-06, -0.1222754716873169, -0.0004596710205078125, -0.001796722412109375, -0.004923820495605469, -0.0011426210403442383, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.682659122938382, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.taunt = True\n        self.target.damage(player.effective_heal_power(self.target.card.\n            minion_type()), self)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -0.8715505599975586, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -8.392333984375e-05, 0.0, -3.826618194580078e-05, -1.9073486328125e-06, -2.09808349609375e-05, -1.52587890625e-05, -3.814697265625e-06, -5.340576171875e-05, -1.9073486328125e-06, -8.20159912109375e-05, 0.0, -3.4332275390625e-05, -4.57763671875e-05, -2.288818359375e-05, -8.463859558105469e-06, -0.007663726806640625, -1.9073486328125e-06, -0.00061798095703125, -0.0001220703125, 0.0, -4.38690185546875e-05, -0.00016021728515625, -1.9073486328125e-06, -0.000705718994140625, -3.814697265625e-06, -4.38690185546875e-05, -8.96453857421875e-05, -0.0002899169921875, -1.9073486328125e-06, -0.0029802322387695312, -3.814697265625e-06, -0.0002346038818359375, -0.000209808349609375, -0.0011463165283203125, -0.0035152435302734375, -1.52587890625e-05, -1.52587890625e-05, 0.0, -0.00014495849609375, 0.0, -0.0005679125897586346, -5.7220458984375e-06, -0.0037670135498046875, -0.04703807830810547, -0.0005359649658203125, -8.0108642578125e-05, 0.0, -0.0002498626708984375, -1.9073486328125e-06, -0.2110891342163086, 0.0, -0.0002593994140625, -0.0001888275146484375, -1.9073486328125e-05, -1.1444091796875e-05, -0.12448322772979736, -0.000484466552734375, -0.00180816650390625, -0.005228996276855469, -0.0010987520217895508, -3.814697265625e-06, -0.017304420471191406, -2.09808349609375e-05, -1.9073486328125e-06, -0.0003261566162109375, 0.0, -0.04179096221923828, -1.33514404296875e-05, -0.000469207763671875, 0.0, -0.005088925361633301, -7.05718994140625e-05, -0.000362396240234375, -2.0265579223632812e-06, -0.0687781572341919, 0.0, -0.001415252685546875, -5.7220458984375e-05, -1.3589859008789062e-05, -9.536738616588991e-07, -0.028833389282226562, -3.814697265625e-06, -0.0001010894775390625, -0.0024280548095703125, -1.9073486328125e-06, 0.0, -0.028310775756835938, 0.0, -0.0010204315185546875, -5.7220458984375e-05, -0.030160903930664062, -1.52587890625e-05, -0.0010499954223632812, 0.0, -0.21912014484405518, -3.814697265625e-05, -0.0002536773681640625, -0.09224605560302734, -0.11285591125488281, -0.029897689819335938, -5.53131103515625e-05, -1.71661376953125e-05, 0.0, -0.0003681182861328125, 0.0, -0.0006582731730304658, -1.9073486328125e-06, -0.000438690185546875, -0.07227230072021484, -0.0003452301025390625, -7.82012939453125e-05, 0.0, -0.0002346038818359375, -3.814697265625e-06, -0.16812801361083984, -5.7220458984375e-06, -0.00263214111328125, 0.0, -0.003942608833312988, -0.0005970001220703125, -2.47955322265625e-05, -5.14984130859375e-05, -0.04311084747314453, -3.814697265625e-06, -0.4014178514480591, -4.00543212890625e-05, -0.0002994537353515625, -0.15717506408691406, -0.08683633804321289, -2.6702880859375e-05, -1.994950294494629, -1.9073486328125e-06, -3.0517578125e-05, -0.008283615112304688, -1.9073486328125e-06, -5.7220458984375e-06, -0.09785270690917969, -1.9073486328125e-06, -0.000728607177734375, -1.33514404296875e-05, -0.0007257461547851562, -3.0517578125e-05, -0.0001373291015625, 0.0, -0.09997940063476562, -1.9073486328125e-06, -0.000568389892578125, -0.0003490447998046875, -0.0010700225830078125, -0.0039539337158203125, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -0.0004311800003051758, 0.0, -0.0005770918214693666, -3.814697265625e-06, -0.00493621826171875, -0.04125499725341797, -0.0005092620849609375, -8.58306884765625e-05, 0.0, -0.0002231597900390625, -3.814697265625e-06, -0.3402690887451172, 0.0, -0.00023651123046875, -0.0001811981201171875, -2.09808349609375e-05, -9.5367431640625e-06, -0.12854492664337158, -0.000377655029296875, -0.0012969970703125, -0.0042171478271484375, -0.0011655092239379883, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.08217093839459, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -0.010080337524414062, -1.52587890625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.0001201629638671875, -4.38690185546875e-05, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0002918243408203125, -7.62939453125e-06, -4.1723224057932384e-06, -6.029150485992432, -0.00128173828125, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -0.009481430053710938, -1.9073486328125e-06, -0.00010120868682861328, -1.9073486328125e-06, -0.000102996826171875, -9.5367431640625e-06, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -7.2479248046875e-05, 0.0, -1.9073486328125e-05, -4.00543212890625e-05, -3.4332275390625e-05, -6.556510470545618e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>"]}, {"score": -6.224844669247993, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -4.680900573730469, -0.17420196533203125, -0.0001621246337890625, -0.0003490447998046875, -4.00543212890625e-05, 0.0, -0.0001697540283203125, -3.0517578125e-05, -0.0001220703125, 0.0, -0.9790776968002319, -7.867813110351562e-06, -0.00531005859375, -0.0017032623291015625, -2.86102294921875e-05, -0.018894195556640625, -5.7220458984375e-06, -2.47955322265625e-05, 0.0, -0.00044727325439453125, 0.0, -0.001180887222290039, -1.9073486328125e-06, -0.0034008026123046875, -0.02219867706298828, -0.0010547637939453125, -0.000232696533203125, 0.0, -0.0003070831298828125, -1.9073486328125e-06, -0.1580677032470703, 0.0, -0.00045108795166015625, -0.000209808349609375, -3.0517578125e-05, -1.33514404296875e-05, -0.13612091541290283, -0.000301361083984375, -0.0044689178466796875, -0.0029726028442382812, -0.001275181770324707, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.180527662183174, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ancestral Healing"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -0.0007686614990234375, 0.0, -0.00013649463653564453, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -2.288818359375e-05, -0.0001049041748046875, -0.000926971435546875, -0.0002231597900390625, -1.1444091796875e-05, 0.0, -5.53131103515625e-05, 0.0, -3.933906555175781e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.000690460205078125, -0.0001373291015625, -5.7220458984375e-06, -3.2186455882765586e-06, -1.33514404296875e-05, -4.184243152849376e-05, -6.29425048828125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00026959233218804, -9.5367431640625e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0004329681396484375, -1.1920928244535389e-07, -0.0001506805419921875, 0.0, -6.866455078125e-05, 0.0, -5.340576171875e-05, -0.0004634857177734375, -2.300739288330078e-05, -4.0531158447265625e-06, -0.0004940032958984375, -1.33514404296875e-05, -1.9073486328125e-05, -0.000171661376953125, -1.9073486328125e-05, -0.000568389892578125, -1.9073486328125e-06, -0.0001621246337890625, -7.43865966796875e-05, -1.33514404296875e-05, -2.09808349609375e-05, -5.340576171875e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.022748231887817383, -9.167194366455078e-05, -4.680900573730469, -1.8599863052368164, -0.0004596710205078125, 0.0, -5.340576171875e-05, 0.0, -8.0108642578125e-05, -8.0108642578125e-05, -0.0001354217529296875, -3.814697265625e-06, -0.6077436208724976, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Ancestral", " ", "Healing", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 116, 224, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -8.568433165724286, "inferred_code": "class AncestralHealing(SpellCard):\n\n    def __init__(self):\n        super().__init__('Ancestral Healing', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "model_output": {"body": [{"body": [{"hole0": "Ancestral Healing", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AncestralHealing"}], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -7.62939453125e-06, -2.86102294921875e-05, -1.33514404296875e-05, -4.649161837733118e-06, -0.0006542548071593046, -4.768370445162873e-07, -0.000141143798828125, 0.0, -1.9073486328125e-06, -4.780292510986328e-05, -1.33514404296875e-05, -1.71661376953125e-05, -2.47955322265625e-05, -7.963610649108887, -0.0029993057250976562, -0.0007568257278762758, -1.71661376953125e-05, -1.239776611328125e-05, -4.00543212890625e-05, -0.17003750801086426, -7.2479248046875e-05, -0.14064884185791016, -1.9073486328125e-06, -0.025957107543945312, -0.04575538635253906, -0.012531280517578125, 0.0, -1.33514404296875e-05, 0.0, -0.000156402587890625, -4.57763671875e-05, -9.1552734375e-05, -5.7220458984375e-06, -0.20439434051513672, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Ancestral", "Healing", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Ancestral", " ", "Healing", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 224, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -22.635541915893555, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-6.29425048828125e-05, -0.0002613067626953125, -22.635217666625977], "choice_history": [80, 159, 294]}]}
{"index": 2, "beams": [{"score": -3.9525681438706215, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.\n            hunter.Misha()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -0.8714977502822876, 0.0, -0.0009021759033203125, -5.7220458984375e-05, -2.86102294921875e-05, -4.00543212890625e-05, -0.00011444091796875, -4.76837158203125e-05, -0.00218963623046875, -2.47955322265625e-05, -0.3434791564941406, -4.38690185546875e-05, -0.0026607513427734375, -1.9073486328125e-06, -0.0008172978996299207, -7.748603820800781e-06, -0.00852203369140625, 0.0, -0.007859587669372559, -9.5367431640625e-06, -0.0028611421585083008, -3.099440846199286e-06, -0.8648888468742371, -1.9073486328125e-06, -0.3097515106201172, -4.76837158203125e-05, -1.71661376953125e-05, -0.000461578369140625, -1.52587890625e-05, -0.013601422309875488, -8.0108642578125e-05, -0.004670143127441406, -0.010056495666503906, -4.00543212890625e-05, 0.0, -0.005542755126953125, 0.0, -0.013427257537841797, 0.0, -0.005624890327453613, -2.5033950805664062e-05, -0.0001983642578125, -0.00313568115234375, -1.9073486328125e-05, -0.00046646595001220703, -3.063678741455078e-05, -0.0020532608032226562, -5.7220458984375e-05, -4.76837158203125e-05, -0.004268646240234375, -1.71661376953125e-05, 0.0, -0.0012531280517578125, 0.0, -0.005212185904383659, -5.161762237548828e-05, -0.0026845932006835938, 0.0, -0.0006351470947265625, -3.62396240234375e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.00516510009765625, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.0013141632080078125, 0.0, -0.0005981922149658203, 0.0, -0.0013332366943359375, -0.0044708251953125, -2.09808349609375e-05, 0.0, -0.00017178058624267578, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0019935364834964275, 0.0, -0.005686759948730469, -0.0011491775512695312, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008825063705444336, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.0017354481387883425, 0.0, -3.814697265625e-06, -0.001476287841796875, -2.288818359375e-05, -0.0001392364501953125, -1.9073486328125e-06, -0.0020656585693359375, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -3.9674150651289892, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Leokk(), hearthbreaker.cards.minions.\n            hunter.Misha()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Leokk", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -1.2394376993179321, -0.00040149688720703125, -0.002788543701171875, -0.0002593994140625, -3.4332275390625e-05, -2.47955322265625e-05, -0.0001201629638671875, -9.5367431640625e-06, -0.002902984619140625, -1.1444091796875e-05, -0.1539325714111328, -5.14984130859375e-05, -0.0032596588134765625, -1.9073486328125e-06, -0.0007543556857854128, -7.62939453125e-06, -0.009455680847167969, 0.0, -0.010561347007751465, -1.1444091796875e-05, -0.0028744935989379883, -2.9802317840221804e-06, -0.8363664746284485, -1.9073486328125e-06, -0.16499900817871094, -3.814697265625e-05, -1.52587890625e-05, -0.0004749298095703125, -1.52587890625e-05, -0.014432311058044434, -7.82012939453125e-05, -0.004669189453125, -0.010359764099121094, -4.1961669921875e-05, 0.0, -0.0055694580078125, 0.0, -0.014455556869506836, 0.0, -0.005668759346008301, -2.5033950805664062e-05, -0.00020599365234375, -0.0032062530517578125, -1.9073486328125e-05, -0.00046837329864501953, -3.063678741455078e-05, -0.0020799636840820312, -5.7220458984375e-05, -4.76837158203125e-05, -0.0042972564697265625, -1.71661376953125e-05, 0.0, -0.00124359130859375, 0.0, -0.005236504599452019, -5.161762237548828e-05, -0.0026826858520507812, 0.0, -0.000640869140625, -3.62396240234375e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.00514984130859375, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.0013217926025390625, 0.0, -0.0006000995635986328, 0.0, -0.00133514404296875, -0.0044708251953125, -2.09808349609375e-05, 0.0, -0.00017178058624267578, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0019946093671023846, 0.0, -0.005690574645996094, -0.0011491775512695312, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008834600448608398, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.001730798976495862, 0.0, -3.814697265625e-06, -0.0014772415161132812, -2.288818359375e-05, -0.0001392364501953125, -1.9073486328125e-06, -0.00206756591796875, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.009472400214463, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.\n            hunter.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Leokk", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -0.8714977502822876, 0.0, -0.0009021759033203125, -5.7220458984375e-05, -2.86102294921875e-05, -4.00543212890625e-05, -0.00011444091796875, -4.76837158203125e-05, -0.00218963623046875, -2.47955322265625e-05, -0.3434791564941406, -4.38690185546875e-05, -0.0026607513427734375, -1.9073486328125e-06, -0.0008172978996299207, -7.748603820800781e-06, -0.00852203369140625, 0.0, -0.007859587669372559, -9.5367431640625e-06, -0.0028611421585083008, -3.099440846199286e-06, -1.2326217889785767, -0.000507354736328125, -0.000591278076171875, -2.47955322265625e-05, -3.814697265625e-06, -0.001789093017578125, -1.9073486328125e-05, -0.010026216506958008, -7.05718994140625e-05, -0.006022453308105469, -0.009103775024414062, -2.288818359375e-05, 0.0, -0.0052490234375, 0.0, -0.013693094253540039, 0.0, -0.005562901496887207, -2.1219253540039062e-05, -0.0001811981201171875, -0.002986907958984375, -1.9073486328125e-05, -0.0005027055740356445, -3.063678741455078e-05, -0.0019817352294921875, -5.53131103515625e-05, -4.76837158203125e-05, -0.0042247772216796875, -1.71661376953125e-05, 0.0, -0.0012493133544921875, 0.0, -0.005216239020228386, -5.161762237548828e-05, -0.0026903152465820312, 0.0, -0.0006427764892578125, -3.62396240234375e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0051708221435546875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.0013179779052734375, 0.0, -0.0006020069122314453, 0.0, -0.00135040283203125, -0.004497528076171875, -2.09808349609375e-05, 0.0, -0.00017368793487548828, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0019918675534427166, 0.0, -0.00569915771484375, -0.0011501312255859375, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008825063705444336, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.0017288916278630495, 0.0, -3.814697265625e-06, -0.001476287841796875, -2.288818359375e-05, -0.0001373291015625, -1.9073486328125e-06, -0.0020656585693359375, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.030599148336023, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.hunter()\n            ]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -0.8714977502822876, 0.0, -0.0009021759033203125, -5.7220458984375e-05, -2.86102294921875e-05, -4.00543212890625e-05, -0.00011444091796875, -4.76837158203125e-05, -0.00218963623046875, -2.47955322265625e-05, -1.236515998840332, 0.0, -0.00451207160949707, -1.9073486328125e-06, -0.0155181884765625, 0.0, -0.02322566509246826, -1.52587890625e-05, -0.34449124336242676, -2.1219253540039062e-05, -0.003116607666015625, -8.7738037109375e-05, -3.814697265625e-06, -0.001544952392578125, -1.1444091796875e-05, -0.010684847831726074, -2.09808349609375e-05, -0.004025459289550781, -0.004634857177734375, -2.288818359375e-05, -1.9073486328125e-06, -0.0062961578369140625, 0.0, -0.011625289916992188, 0.0, -0.0053550004959106445, -1.5497207641601562e-05, -0.00023651123046875, -0.0035305023193359375, -1.71661376953125e-05, -0.0005065202713012695, -2.872943878173828e-05, -0.0021152496337890625, -5.7220458984375e-05, -4.76837158203125e-05, -0.0045719146728515625, -1.71661376953125e-05, 0.0, -0.001171112060546875, 0.0, -0.00543653778731823, -5.352497100830078e-05, -0.0026636123657226562, 0.0, -0.0006771087646484375, -3.62396240234375e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0049953460693359375, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.001354217529296875, 0.0, -0.0006000995635986328, 0.0, -0.001316070556640625, -0.0044231414794921875, -2.09808349609375e-05, 0.0, -0.00017178058624267578, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0019991393201053143, 0.0, -0.005681037902832031, -0.0011491775512695312, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008805990219116211, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.0017325871158391237, 0.0, -3.814697265625e-06, -0.001476287841796875, -2.288818359375e-05, -0.0001392364501953125, -1.9073486328125e-06, -0.002063751220703125, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.172057301361747, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Leokk(), hearthbreaker.cards.minions.\n            hunter.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Leokk", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Leokk", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -1.2394376993179321, -0.00040149688720703125, -0.002788543701171875, -0.0002593994140625, -3.4332275390625e-05, -2.47955322265625e-05, -0.0001201629638671875, -9.5367431640625e-06, -0.002902984619140625, -1.1444091796875e-05, -0.1539325714111328, -5.14984130859375e-05, -0.0032596588134765625, -1.9073486328125e-06, -0.0007543556857854128, -7.62939453125e-06, -0.009455680847167969, 0.0, -0.010561347007751465, -1.1444091796875e-05, -0.0028744935989379883, -2.9802317840221804e-06, -1.208067774772644, -0.000431060791015625, -0.0004711151123046875, -2.47955322265625e-05, -3.814697265625e-06, -0.00215911865234375, -2.09808349609375e-05, -0.010423660278320312, -7.05718994140625e-05, -0.005089759826660156, -0.009104728698730469, -2.288818359375e-05, 0.0, -0.0053424835205078125, 0.0, -0.015159964561462402, 0.0, -0.0056563615798950195, -2.1219253540039062e-05, -0.0001850128173828125, -0.00304412841796875, -1.9073486328125e-05, -0.000504612922668457, -3.063678741455078e-05, -0.0019998550415039062, -5.53131103515625e-05, -4.76837158203125e-05, -0.0042438507080078125, -1.71661376953125e-05, 0.0, -0.0012378692626953125, 0.0, -0.005241630598902702, -5.161762237548828e-05, -0.0026874542236328125, 0.0, -0.00064849853515625, -3.62396240234375e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.005146026611328125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.0013256072998046875, 0.0, -0.0006039142608642578, 0.0, -0.001354217529296875, -0.004497528076171875, -2.09808349609375e-05, 0.0, -0.00017368793487548828, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0019929404370486736, 0.0, -0.005702972412109375, -0.0011501312255859375, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008834600448608398, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.001723169581964612, 0.0, -3.814697265625e-06, -0.0014772415161132812, -2.288818359375e-05, -0.0001373291015625, -1.9073486328125e-06, -0.00206756591796875, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.3073165118426004, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Huffer(), hearthbreaker.cards.minions.\n            hunter.Misha()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -1.498247742652893, -1.9073486328125e-06, -0.0001068115234375, -4.38690185546875e-05, -2.86102294921875e-05, -6.29425048828125e-05, -0.0001735687255859375, -5.7220458984375e-06, -0.0028514862060546875, -5.7220458984375e-06, -0.18905258178710938, -2.86102294921875e-05, -0.0025730133056640625, -3.814697265625e-06, -0.000754712731577456, -9.5367431640625e-06, -0.007701873779296875, 0.0, -0.008120059967041016, -9.5367431640625e-06, -0.0026656389236450195, -3.218649908376392e-06, -0.8727778792381287, 0.0, -0.1842823028564453, -4.57763671875e-05, -1.71661376953125e-05, -0.000499725341796875, -1.52587890625e-05, -0.014353156089782715, -7.62939453125e-05, -0.004772186279296875, -0.009512901306152344, -3.814697265625e-05, 0.0, -0.005702972412109375, 0.0, -0.01400768756866455, 0.0, -0.0055419206619262695, -2.5033950805664062e-05, -0.000202178955078125, -0.0031871795654296875, -1.9073486328125e-05, -0.0004655122756958008, -3.063678741455078e-05, -0.0020704269409179688, -5.7220458984375e-05, -4.57763671875e-05, -0.004291534423828125, -1.71661376953125e-05, 0.0, -0.0012378692626953125, 0.0, -0.005221722647547722, -5.161762237548828e-05, -0.002685546875, 0.0, -0.0006351470947265625, -3.62396240234375e-05, -9.5367431640625e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.00514984130859375, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.001312255859375, 0.0, -0.0005962848663330078, 0.0, -0.0013294219970703125, -0.0044651031494140625, -2.09808349609375e-05, 0.0, -0.00017178058624267578, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.001994370948523283, 0.0, -0.005680084228515625, -0.0011491775512695312, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008815526962280273, -1.33514404296875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.001726984279230237, 0.0, -3.814697265625e-06, -0.0014781951904296875, -2.288818359375e-05, -0.0001373291015625, -1.9073486328125e-06, -0.00206756591796875, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.307723348718355, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -1.3302850723266602, -4.9591064453125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-05, -0.0001087188720703125, 0.0, -4.9591064453125e-05, -1.1444091796875e-05, -0.0007724421448074281, -5.7220458984375e-06, -0.00018310546875, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -6.556510470545618e-06, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -3.24249267578125e-05, -1.1444091796875e-05, -0.14489269256591797, -0.00011444091796875, -0.0001811981201171875, -1.1444091796875e-05, -0.006696462631225586, -3.62396240234375e-05, -0.002727508544921875, -3.4332275390625e-05, -2.288818359375e-05, 0.0, -0.0019441843032836914, -3.24249267578125e-05, -0.0007953643798828125, -3.4332275390625e-05, -9.5367431640625e-06, -0.00041604042053222656, -1.52587890625e-05, -0.00684356689453125, 0.0, -0.04826468601822853, -1.71661376953125e-05, -1.1832704544067383, -0.014886856079101562, -5.7220458984375e-05, -8.392333984375e-05, -0.009143829345703125, -0.0001049041748046875, -3.814697265625e-06, -0.5342550277709961, -1.9073486328125e-05, -0.8058048486709595, -5.7220458984375e-06, -0.029068946838378906, 0.0, -0.0010528564453125, -0.00016021728515625, -8.392333984375e-05, -1.7642974853515625e-05, -1.9073486328125e-06, -0.0072422027587890625, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -0.000438690185546875, 0.0, -0.0005749463452957571, 0.0, -0.00267791748046875, -0.00731658935546875, -3.0517578125e-05, 0.0, -0.00016355514526367188, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -2.86102294921875e-05, 0.0, -0.002083062892779708, 0.0, -0.005415916442871094, -0.001125335693359375, -0.0003681182861328125, -0.000118255615234375, -1.9073486328125e-06, -1.9073486328125e-06, -0.0009300708770751953, -1.1444091796875e-05, -5.7220458984375e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.6702880859375e-05, -9.5367431640625e-06, -0.0001125335693359375, 0.0, -0.0019309513736516237, -1.9073486328125e-06, -3.814697265625e-06, -0.0014810562133789062, -2.09808349609375e-05, -0.0002613067626953125, -1.9073486328125e-06, -0.00186920166015625, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.359209805991441, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Misha(), hearthbreaker.cards.minions.\n            hunter.Huffer()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -0.8714977502822876, 0.0, -0.0009021759033203125, -5.7220458984375e-05, -2.86102294921875e-05, -4.00543212890625e-05, -0.00011444091796875, -4.76837158203125e-05, -0.00218963623046875, -2.47955322265625e-05, -0.3434791564941406, -4.38690185546875e-05, -0.0026607513427734375, -1.9073486328125e-06, -0.0008172978996299207, -7.748603820800781e-06, -0.00852203369140625, 0.0, -0.007859587669372559, -9.5367431640625e-06, -0.0028611421585083008, -3.099440846199286e-06, -1.512560486793518, -1.9073486328125e-06, -0.06492042541503906, -2.47955322265625e-05, -2.288818359375e-05, -0.0006580352783203125, -1.1444091796875e-05, -0.014913797378540039, -9.34600830078125e-05, -0.004309654235839844, -0.012033462524414062, -4.00543212890625e-05, 0.0, -0.0059070587158203125, 0.0, -0.013413429260253906, 0.0, -0.0059767961502075195, -2.8848648071289062e-05, -0.0001926422119140625, -0.003204345703125, -2.09808349609375e-05, -0.00046074390411376953, -3.063678741455078e-05, -0.0020055770874023438, -5.7220458984375e-05, -4.57763671875e-05, -0.0042209625244140625, -1.71661376953125e-05, 0.0, -0.001178741455078125, 0.0, -0.005270121619105339, -5.161762237548828e-05, -0.0027036666870117188, 0.0, -0.000621795654296875, -3.62396240234375e-05, -9.5367431640625e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.005153656005859375, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00130462646484375, 0.0, -0.0006039142608642578, 0.0, -0.0013446807861328125, -0.0044994354248046875, -2.09808349609375e-05, 0.0, -0.00017368793487548828, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0019918675534427166, 0.0, -0.00569915771484375, -0.0011491775512695312, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008815526962280273, -1.33514404296875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.0017203085590153933, 0.0, -3.814697265625e-06, -0.0014781951904296875, -2.288818359375e-05, -0.0001373291015625, -1.9073486328125e-06, -0.0020685195922851562, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.477377325269572, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Huffer(), hearthbreaker.cards.minions.\n            hunter.Leokk()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Leokk", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -1.498247742652893, -1.9073486328125e-06, -0.0001068115234375, -4.38690185546875e-05, -2.86102294921875e-05, -6.29425048828125e-05, -0.0001735687255859375, -5.7220458984375e-06, -0.0028514862060546875, -5.7220458984375e-06, -0.18905258178710938, -2.86102294921875e-05, -0.0025730133056640625, -3.814697265625e-06, -0.000754712731577456, -9.5367431640625e-06, -0.007701873779296875, 0.0, -0.008120059967041016, -9.5367431640625e-06, -0.0026656389236450195, -3.218649908376392e-06, -1.2273234128952026, -0.0003871917724609375, -0.000392913818359375, -2.6702880859375e-05, -3.814697265625e-06, -0.002826690673828125, -1.71661376953125e-05, -0.010702252388000488, -7.62939453125e-05, -0.0064754486083984375, -0.008543014526367188, -2.288818359375e-05, 0.0, -0.0052089691162109375, 0.0, -0.014404773712158203, 0.0, -0.005523800849914551, -1.9311904907226562e-05, -0.0001850128173828125, -0.002994537353515625, -1.9073486328125e-05, -0.0005074739456176758, -3.063678741455078e-05, -0.00197601318359375, -5.53131103515625e-05, -4.76837158203125e-05, -0.0042247772216796875, -1.71661376953125e-05, 0.0, -0.0012302398681640625, 0.0, -0.005223868414759636, -5.161762237548828e-05, -0.0026922225952148438, 0.0, -0.000640869140625, -3.62396240234375e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.005168914794921875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.001316070556640625, 0.0, -0.0006020069122314453, 0.0, -0.00135040283203125, -0.0045013427734375, -2.09808349609375e-05, 0.0, -0.00017368793487548828, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0019918675534427166, 0.0, -0.005700111389160156, -0.0011501312255859375, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008834600448608398, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.0017203085590153933, 0.0, -3.814697265625e-06, -0.0014781951904296875, -2.288818359375e-05, -0.0001373291015625, -1.9073486328125e-06, -0.0020685195922851562, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.602915317375846, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Leokk(), hearthbreaker.cards.minions.\n            hunter.Huffer()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Leokk", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -1.2394376993179321, -0.00040149688720703125, -0.002788543701171875, -0.0002593994140625, -3.4332275390625e-05, -2.47955322265625e-05, -0.0001201629638671875, -9.5367431640625e-06, -0.002902984619140625, -1.1444091796875e-05, -0.1539325714111328, -5.14984130859375e-05, -0.0032596588134765625, -1.9073486328125e-06, -0.0007543556857854128, -7.62939453125e-06, -0.009455680847167969, 0.0, -0.010561347007751465, -1.1444091796875e-05, -0.0028744935989379883, -2.9802317840221804e-06, -1.5853546857833862, -1.9073486328125e-06, -0.047919273376464844, -2.47955322265625e-05, -2.09808349609375e-05, -0.0006847381591796875, -1.1444091796875e-05, -0.01610386371612549, -9.34600830078125e-05, -0.0038900375366210938, -0.012137413024902344, -4.1961669921875e-05, 0.0, -0.0059223175048828125, 0.0, -0.014462828636169434, 0.0, -0.006042599678039551, -2.6941299438476562e-05, -0.0001964569091796875, -0.003276824951171875, -2.09808349609375e-05, -0.00046265125274658203, -3.063678741455078e-05, -0.0020294189453125, -5.7220458984375e-05, -4.57763671875e-05, -0.0042667388916015625, -1.71661376953125e-05, 0.0, -0.0011692047119140625, 0.0, -0.005297301337122917, -5.161762237548828e-05, -0.0026988983154296875, 0.0, -0.0006275177001953125, -3.62396240234375e-05, -9.5367431640625e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0051250457763671875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.001312255859375, 0.0, -0.0006039142608642578, 0.0, -0.0013484954833984375, -0.004497528076171875, -2.09808349609375e-05, 0.0, -0.00017368793487548828, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.001993774902075529, 0.0, -0.005702018737792969, -0.0011491775512695312, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008825063705444336, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.001715540187433362, 0.0, -3.814697265625e-06, -0.0014781951904296875, -2.288818359375e-05, -0.0001373291015625, -1.9073486328125e-06, -0.0020694732666015625, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Leokk", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.804036051008097, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker\n            .cards.minions.hunter.Huffer(), hearthbreaker.cards.minions.\n            hunter.Huffer()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -0.6638389825820923, -1.9073486328125e-06, -0.0004634857177734375, -4.9591064453125e-05, -2.288818359375e-05, -9.1552734375e-05, -0.0001010894775390625, -9.5367431640625e-06, -0.0021076202392578125, -1.1444091796875e-05, -0.15044593811035156, -2.86102294921875e-05, -0.00336456298828125, -1.9073486328125e-06, -0.000574468809645623, -7.62939453125e-06, -0.007925987243652344, 0.0, -0.007623791694641113, -1.1444091796875e-05, -0.0027390718460083008, -3.218649908376392e-06, -1.498247742652893, -1.9073486328125e-06, -0.0001068115234375, -4.38690185546875e-05, -2.86102294921875e-05, -6.29425048828125e-05, -0.0001735687255859375, -5.7220458984375e-06, -0.0028514862060546875, -5.7220458984375e-06, -0.18905258178710938, -2.86102294921875e-05, -0.0025730133056640625, -3.814697265625e-06, -0.000754712731577456, -9.5367431640625e-06, -0.007701873779296875, 0.0, -0.008120059967041016, -9.5367431640625e-06, -0.0026656389236450195, -3.218649908376392e-06, -1.500853419303894, -1.9073486328125e-06, -0.049605369567871094, -2.6702880859375e-05, -2.288818359375e-05, -0.0007343292236328125, -1.1444091796875e-05, -0.015650391578674316, -9.34600830078125e-05, -0.004283905029296875, -0.011364936828613281, -4.00543212890625e-05, 0.0, -0.0059604644775390625, 0.0, -0.013837695121765137, 0.0, -0.005925297737121582, -2.6941299438476562e-05, -0.00019073486328125, -0.0032291412353515625, -1.9073486328125e-05, -0.0004616975784301758, -3.063678741455078e-05, -0.0020046234130859375, -5.7220458984375e-05, -4.57763671875e-05, -0.004241943359375, -1.9073486328125e-05, 0.0, -0.0011539459228515625, 0.0, -0.005292175337672234, -5.352497100830078e-05, -0.0027027130126953125, 0.0, -0.0006198883056640625, -3.62396240234375e-05, -9.5367431640625e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0051403045654296875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00130462646484375, 0.0, -0.0006039142608642578, 0.0, -0.0013446807861328125, -0.0044994354248046875, -2.09808349609375e-05, 0.0, -0.00017368793487548828, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.001992821227759123, 0.0, -0.00569915771484375, -0.0011501312255859375, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008815526962280273, -1.33514404296875e-05, -6.67572021484375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.001711725490167737, 0.0, -3.814697265625e-06, -0.0014791488647460938, -2.288818359375e-05, -0.0001373291015625, -1.9073486328125e-06, -0.0020704269409179688, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -4.9938561030744495, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = [hearthbreaker.cards.minions.hunter.Misha(), hearthbreaker.\n            cards.minions.hunter.Misha(), hearthbreaker.cards.minions.\n            hunter.Misha()]\n        card = game.random_choice(<UNK>)\n        card.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"targets": [{"_type": "Name", "id": "card"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "<UNK>"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -0.35208606719970703, -0.017120361328125, -3.814697265625e-06, -9.5367431640625e-06, -2.288818359375e-05, -9.1552734375e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -6.580276385648176e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.0013580322265625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -0.004715919494628906, -7.62939453125e-06, -1.71661376953125e-05, -4.38690185546875e-05, -2.288818359375e-05, -0.017781734466552734, -8.2254373410251e-06, -0.0022153854370117188, -0.0021028518676757812, -0.0038061141967773438, -0.00079345703125, -3.62396240234375e-05, -4.57763671875e-05, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0001201629638671875, -7.62939453125e-06, -0.00984954833984375, -5.7220458984375e-06, -0.01085662841796875, -8.20159912109375e-05, -0.0011899470118805766, -9.5367431640625e-06, -0.008403778076171875, 0.0, -0.007730959914624691, -9.5367431640625e-06, -0.004411101341247559, -5.245203283266164e-06, -1.5007416009902954, 0.0, -0.0068721771240234375, -4.57763671875e-05, -2.288818359375e-05, -3.24249267578125e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.002048492431640625, -3.62396240234375e-05, -0.3224048614501953, -4.38690185546875e-05, -0.00322723388671875, -1.9073486328125e-06, -0.0011545417364686728, -5.841255187988281e-06, -0.008664131164550781, 0.0, -0.0068361759185791016, -9.5367431640625e-06, -0.0028783082962036133, -3.3378591979271732e-06, -0.8639398813247681, -1.9073486328125e-06, -0.000858306884765625, -5.53131103515625e-05, -2.86102294921875e-05, -3.4332275390625e-05, -0.000110626220703125, -4.9591064453125e-05, -0.002147674560546875, -2.47955322265625e-05, -0.3720359802246094, -4.1961669921875e-05, -0.002605438232421875, -1.9073486328125e-06, -0.0008136024698615074, -5.841255187988281e-06, -0.008516311645507812, 0.0, -0.0077512264251708984, -9.5367431640625e-06, -0.0028525590896606445, -3.218649908376392e-06, -0.8648988008499146, -1.9073486328125e-06, -0.31435680389404297, -4.9591064453125e-05, -1.71661376953125e-05, -0.000457763671875, -1.52587890625e-05, -0.013762235641479492, -8.0108642578125e-05, -0.004706382751464844, -0.010206222534179688, -4.00543212890625e-05, 0.0, -0.00551605224609375, 0.0, -0.013295769691467285, 0.0, -0.005645871162414551, -2.5033950805664062e-05, -0.0002002716064453125, -0.0031280517578125, -1.9073486328125e-05, -0.00046646595001220703, -3.063678741455078e-05, -0.00205230712890625, -5.7220458984375e-05, -4.76837158203125e-05, -0.0042552947998046875, -1.71661376953125e-05, 0.0, -0.001255035400390625, 0.0, -0.005218027159571648, -5.161762237548828e-05, -0.0026845932006835938, 0.0, -0.000637054443359375, -3.62396240234375e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.005157470703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.0013141632080078125, 0.0, -0.0006000995635986328, 0.0, -0.0013332366943359375, -0.0044727325439453125, -2.09808349609375e-05, 0.0, -0.00017178058624267578, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.0019935364834964275, 0.0, -0.005687713623046875, -0.0011491775512695312, -0.0003662109375, -0.000125885009765625, -1.9073486328125e-06, 0.0, -0.0008834600448608398, -1.33514404296875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.0017364018131047487, 0.0, -3.814697265625e-06, -0.001476287841796875, -2.288818359375e-05, -0.0001392364501953125, -1.9073486328125e-06, -0.0020647048950195312, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 85, 128, 282, 45, 160, "card", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -6.137331842073536, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            <UNK> = [hearthbreaker.cards.minions.hunter.Huffer(),\n                hearthbreaker.cards.minions.hunter.Misha(), hearthbreaker.\n                cards.minions.hunter.Misha()]\n            <UNK>.summon(player, player.game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template15", "hole1": 3, "hole2": "HUNTER"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "List", "elts": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "Huffer", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "Misha", "value": {"_type": "Attribute", "attr": "hunter", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}]}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "summon", "value": {"_type": "Name", "id": "<UNK>"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, "_type": "Template4", "hole1": [{"_type": "Lt"}], "hole2": [{"_type": "Num", "n": 7}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -0.14798545837402344, -0.0007114410400390625, -6.4849853515625e-05, -0.00013600854435935616, -3.659724825411104e-05, -2.777547706500627e-05, 0.0, -0.00036995718255639076, -7.62939453125e-06, -8.845329284667969e-05, -5.7220458984375e-05, -0.000400543212890625, -1.9073486328125e-06, -0.0001201629638671875, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -2.6702880859375e-05, 0.0, -2.6702880859375e-05, -2.1219253540039062e-05, -3.933906555175781e-06, -1.3302850723266602, -4.9591064453125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-05, -0.0001087188720703125, 0.0, -4.9591064453125e-05, -1.1444091796875e-05, -0.0007724421448074281, -5.7220458984375e-06, -0.00018310546875, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -6.556510470545618e-06, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -3.24249267578125e-05, -1.1444091796875e-05, -0.14489269256591797, -0.00011444091796875, -0.0001811981201171875, -1.1444091796875e-05, -0.006696462631225586, -3.62396240234375e-05, -0.002727508544921875, -3.4332275390625e-05, -2.288818359375e-05, 0.0, -0.0019441843032836914, -3.24249267578125e-05, -0.0007953643798828125, -3.4332275390625e-05, -9.5367431640625e-06, -0.00041604042053222656, -1.52587890625e-05, -0.00684356689453125, 0.0, -0.04826468601822853, -1.71661376953125e-05, -0.45988941192626953, -0.0001316070556640625, -1.9073486328125e-06, -1.9073486328125e-05, -0.0053577423095703125, -7.43865966796875e-05, -0.0017533260397613049, -8.66649133968167e-05, -0.6655740737915039, -0.06934356689453125, -0.01791858673095703, -0.0002002716064453125, -0.000255584716796875, -7.43865966796875e-05, -2.288818359375e-05, -0.0002899169921875, 0.0, -0.0005855560302734375, -7.62939453125e-06, -0.011487960815429688, -9.5367431640625e-06, -0.028367996215820312, -4.76837158203125e-05, -0.0013083216035738587, -1.71661376953125e-05, -0.009902000427246094, 0.0, -0.0160902738571167, -9.5367431640625e-06, -0.004150867462158203, -2.9802276912960224e-06, -0.5737430453300476, -1.9073486328125e-06, -0.0002613067626953125, -4.38690185546875e-05, -2.6702880859375e-05, -8.20159912109375e-05, -0.0001201629638671875, -9.5367431640625e-06, -0.0022792816162109375, -9.5367431640625e-06, -0.15577316284179688, -3.24249267578125e-05, -0.00334930419921875, -1.9073486328125e-06, -0.0005944959702901542, -9.5367431640625e-06, -0.0082550048828125, 0.0, -0.009263277053833008, -1.1444091796875e-05, -0.002663731575012207, -3.099440846199286e-06, -0.8637090921401978, 0.0, -0.0003795623779296875, -4.9591064453125e-05, -3.0517578125e-05, -2.86102294921875e-05, -0.0001201629638671875, -3.814697265625e-05, -0.0023059844970703125, -2.47955322265625e-05, -0.3619537353515625, -5.14984130859375e-05, -0.0026149749755859375, -1.9073486328125e-06, -0.000859617255628109, -7.748603820800781e-06, -0.0086212158203125, 0.0, -0.00845193862915039, -9.5367431640625e-06, -0.0028220415115356445, -2.9802317840221804e-06, -0.8560585975646973, -1.9073486328125e-06, -0.036243438720703125, 0.0, -1.9073486328125e-05, -0.0009307861328125, -9.5367431640625e-06, 0.0, -0.005333900451660156, -1.9073486328125e-06, -0.19942200183868408, -2.0265579223632812e-06, -0.0030279159545898438, 0.0, -0.000629425048828125, -3.62396240234375e-05, -9.918212890625e-05, -0.00015354156494140625, 0.0, -0.014528274536132812, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -0.002254486083984375, 0.0, -0.0003451108932495117, 0.0, -0.0015411376953125, -0.003936767578125, -2.288818359375e-05, 0.0, -0.00015997886657714844, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -2.6702880859375e-05, 0.0, -0.002096890937536955, 0.0, -0.0052471160888671875, -0.0011587142944335938, -0.0003681182861328125, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -0.0009015798568725586, -1.33514404296875e-05, -6.866455078125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.288818359375e-05, 0.0, -9.918212890625e-05, 0.0, -0.0016832344699651003, 0.0, -3.814697265625e-06, -0.00150299072265625, -2.288818359375e-05, -0.0001373291015625, -1.9073486328125e-06, -0.0021047592163085938, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Animal", " ", "Companion", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 296, 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 17, 155, 284, 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Huffer", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 40, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Misha", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "<UNK>", "<EOS>", "summon", "<EOS>", 284, 45, 160, "player", "<EOS>", 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 40, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 113, 217, 14, 136, 19, 160, "len", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 279, 8, 282, 47, 165, "7", "<EOS>"]}, {"score": -8.418305835430601, "inferred_code": "class AnimalCompanion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Animal Companion', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Animal Companion", "_type": "Template13", "hole1": "DRUID", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "AnimalCompanion"}], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -7.581423415103927e-05, -5.745722592109814e-05, -6.794906312279636e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.0001304149627685547, -3.814697265625e-06, -2.0265579223632812e-06, -1.9943208694458008, -5.909551620483398, -0.0035572052001953125, -9.023735765367746e-05, -1.6808495274744928e-05, -1.9311904907226562e-05, -7.2479248046875e-05, -0.26517757773399353, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.01697063446044922, -0.015167236328125, -0.052145957946777344, 0.0, -0.0020047426223754883, 0.0, -0.15872693061828613, 0.0], "choice_history": [80, 159, 295, 88, 138, "Animal", "Companion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Animal", " ", "Companion", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -21.631305694580078, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-0.000102996826171875, -3.62396240234375e-05, -21.631166458129883], "choice_history": [80, 159, 294]}]}
{"index": 3, "beams": [{"score": -0.19761580805766243, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -0.06639289855957031, -1.9073486328125e-06, -5.7220458984375e-05, 0.0, -1.71661376953125e-05, -2.288818359375e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, 0.0, -5.14984130859375e-05, 0.0, -1.33514404296875e-05, -1.537799835205078e-05, -4.291534423828125e-06, -0.005221366882324219, -1.33514404296875e-05, -1.1444091796875e-05, -5.53131103515625e-05, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -5.53131103515625e-05, -6.67572021484375e-05, -4.291534423828125e-06, -7.62939453125e-06, -0.0004730224609375, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -6.103515625e-05, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -4.1961669921875e-05, -3.8504600524902344e-05, -0.000995635986328125, -0.000102996826171875, -6.4849853515625e-05, -1.9073486328125e-06, -0.0006583929061889648, 0.0, -0.004305839538574219, -0.0020008087158203125, -0.0053539276123046875, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -0.00054168701171875, -9.5367431640625e-06, -0.001789093017578125, 0.0, -0.0001392364501953125, -0.000179290771484375, -3.814697265625e-06, -3.0517578125e-05, 0.0, -0.000408172607421875, 0.0, -2.491474151611328e-05, -3.933906555175781e-06, -0.001880645751953125, -5.7220458984375e-06, -0.0003147125244140625, -2.6702880859375e-05, -0.00257110595703125, -0.001922607421875, -5.7220458984375e-06, -9.5367431640625e-06, -1.1444091796875e-05, -0.0001964569091796875, 0.0, -8.7738037109375e-05, 0.0, -0.00010025501251220703, -3.814697265625e-06, -0.0010833740234375, -3.4332275390625e-05, -9.5367431640625e-06, -0.0049228668212890625, -0.0014476776123046875, -0.00041625439189374447, -2.872943878173828e-05, -8.7738037109375e-05, 0.0, -0.003137350082397461, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -3.4991251979442666, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -2.7621994018554688, -0.002643585205078125, -0.4779081344604492, 0.0, -0.03854799270629883, -3.0517578125e-05, -0.0008945465087890625, 0.0, -7.62939453125e-05, -0.015313148498535156, -7.62939453125e-06, -0.11160312592983246, -2.3841855067985307e-07], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -3.5160213125196265, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Explosion"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -3.2420005798339844, -3.814697265625e-06, -8.45193862915039e-05, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -7.62939453125e-06, -8.404254913330078e-05, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -1.52587890625e-05, -0.01615428924560547, -0.0031147003173828125, -0.0002689361572265625, 0.0, -0.0001316070556640625, -1.33514404296875e-05, -1.6450776456622407e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0001888275146484375, -0.00081634521484375, -1.9073486328125e-06, -4.970903682988137e-05, -2.002714973059483e-05, -5.1021550461882725e-05, -1.33514404296875e-05, -0.00030517578125, -1.1444091796875e-05, -4.362964682513848e-05, -2.288818359375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.0001773834228515625, 0.0, -0.0023996829986572266, -5.960462772236497e-07, -0.0084686279296875, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -2.47955322265625e-05, 0.0, -0.023927688598632812, 0.0, -0.001529693603515625, 0.0, -6.866455078125e-05, -0.012072563171386719, -0.001857757568359375, -0.031795620918273926, 0.0, -0.000225067138671875, 0.0, -0.0001068115234375, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -0.01348721981048584, -7.05718994140625e-05, -0.0003566741943359375, 0.0, -0.07596111297607422, -3.933906555175781e-06, -0.003643035888671875, -0.0002918243408203125, -0.0119171142578125, 0.0, -0.016278982162475586, -1.52587890625e-05, -0.0024566650390625, -1.9073486328125e-06, -2.86102294921875e-05, -0.0062961578369140625, -3.814697265625e-06, -0.035676781088113785, -4.0531158447265625e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Explosion", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -3.756568525040393, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template15", "hole1": 2, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -3.704235076904297, -0.000152587890625, -6.6756979322235566e-06, -6.008138007018715e-05, -3.1828880310058594e-05, -1.9073486328125e-06, -5.269025859888643e-05, 0.0, -0.000225067138671875, -1.3470649719238281e-05, -0.004416465759277344, -2.6702880859375e-05, -0.000102996826171875, 0.0, -1.1444091796875e-05, -1.52587890625e-05, -1.71661376953125e-05, -4.1961669921875e-05, 0.0, 0.0, -3.4689903259277344e-05, 0.0, -9.5367431640625e-06, -1.1563301086425781e-05, -4.410743713378906e-06, -0.00836944580078125, -1.33514404296875e-05, -1.1444091796875e-05, -4.1961669921875e-05, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -5.14984130859375e-05, -5.91278076171875e-05, -4.291534423828125e-06, -9.5367431640625e-06, -0.0004291534423828125, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.91278076171875e-05, 0.0, -3.24249267578125e-05, -2.47955322265625e-05, -4.1961669921875e-05, -3.8504600524902344e-05, -0.0009670257568359375, -9.34600830078125e-05, -6.67572021484375e-05, -1.9073486328125e-06, -0.0006822347640991211, 0.0, -0.004277229309082031, -0.0019245147705078125, -0.00542449951171875, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -0.0005512237548828125, -9.5367431640625e-06, -0.001743316650390625, 0.0, -0.0001392364501953125, -0.000179290771484375, -3.814697265625e-06, -3.0517578125e-05, 0.0, -0.0004100799560546875, 0.0, -2.491474151611328e-05, -3.933906555175781e-06, -0.0018863677978515625, -5.7220458984375e-06, -0.0003147125244140625, -2.6702880859375e-05, -0.0025634765625, -0.001918792724609375, -5.7220458984375e-06, -9.5367431640625e-06, -1.1444091796875e-05, -0.0001983642578125, 0.0, -8.7738037109375e-05, 0.0, -0.00010025501251220703, -3.814697265625e-06, -0.0010833740234375, -3.4332275390625e-05, -9.5367431640625e-06, -0.0049285888671875, -0.001445770263671875, -0.0004188759485259652, -2.872943878173828e-05, -8.96453857421875e-05, 0.0, -0.0031985044479370117, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.410562053406231, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -2.7621994018554688, -0.002643585205078125, -1.0029964447021484, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.02387821674346924, 0.0, -0.00284576416015625, -1.1920928244535389e-07, -0.1640365570783615, -2.4437606043647975e-05, -1.1444091796875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.3619602918624878, -1.943108145496808e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -5.131053049339016, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template16", "hole1": 2, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -4.670950889587402, -0.000354766845703125, -0.0001770101225702092, -5.7935692893806845e-05, -5.674241401720792e-05, -1.9073486328125e-06, -9.822841821005568e-05, 0.0, -0.0003910064697265625, -8.106231689453125e-06, -0.4040641784667969, -7.43865966796875e-05, -5.340576171875e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, 0.0, -4.017353057861328e-05, 0.0, -1.52587890625e-05, -1.3470649719238281e-05, -4.410743713378906e-06, -0.015316009521484375, -2.09808349609375e-05, -9.5367431640625e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -5.340576171875e-05, -6.67572021484375e-05, -4.291534423828125e-06, -7.62939453125e-06, -0.0005550384521484375, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-05, 0.0, -3.24249267578125e-05, -2.47955322265625e-05, -4.1961669921875e-05, -3.8504600524902344e-05, -0.0008792877197265625, -9.72747802734375e-05, -6.67572021484375e-05, -1.9073486328125e-06, -0.0006998777389526367, 0.0, -0.004634857177734375, -0.0023784637451171875, -0.0051422119140625, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.000591278076171875, -9.5367431640625e-06, -0.001773834228515625, 0.0, -0.0001316070556640625, -0.000171661376953125, -3.814697265625e-06, -3.0517578125e-05, 0.0, -0.0004138946533203125, 0.0, -2.491474151611328e-05, -3.933906555175781e-06, -0.0018558502197265625, -5.7220458984375e-06, -0.0003167390532325953, -2.6702880859375e-05, -0.0026092529296875, -0.0019435882568359375, -5.7220458984375e-06, -9.5367431640625e-06, -1.1444091796875e-05, -0.0001964569091796875, 0.0, -8.7738037109375e-05, 0.0, -0.00010025501251220703, -3.814697265625e-06, -0.001079559326171875, -3.4332275390625e-05, -9.5367431640625e-06, -0.004912376403808594, -0.001445770263671875, -0.00041565916035324335, -2.872943878173828e-05, -8.7738037109375e-05, 0.0, -0.0031239986419677734, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 102, 185, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.240427389857125, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -2.7621994018554688, -0.002643585205078125, -1.0029964447021484, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.02387821674346924, 0.0, -0.00284576416015625, -1.1920928244535389e-07, -0.1640365570783615, -2.4437606043647975e-05, -1.1444091796875e-05, -1.33514404296875e-05, -3.814697265625e-06, -1.1918373107910156, -7.748603820800781e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -5.635811657127988, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -2.7621994018554688, -0.002643585205078125, -0.4779081344604492, 0.0, -0.03854799270629883, -3.0517578125e-05, -0.0008945465087890625, 0.0, -7.62939453125e-05, -0.015313148498535156, -7.62939453125e-06, -2.2482898235321045, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -6.059356898473872, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.minions.damage(player.effective_spell_damage(2), self\n            )\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "minions", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -2.7621994018554688, -0.002643585205078125, -1.0029964447021484, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.02387821674346924, 0.0, -0.00284576416015625, -1.1920928244535389e-07, -1.9656527042388916, -4.1723224057932384e-06, -0.0021991729736328125, -4.76837158203125e-05, -2.47955322265625e-05, -0.20692598819732666, -9.655945177655667e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.345953313302509, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template16", "hole1": 2, "hole2": "MAGE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -4.670950889587402, -0.000354766845703125, -0.0001770101225702092, -5.7935692893806845e-05, -5.674241401720792e-05, -1.9073486328125e-06, -9.822841821005568e-05, 0.0, -0.0003910064697265625, -8.106231689453125e-06, -1.1737985610961914, -0.003002166748046875, -0.20482444763183594, 0.0, -0.08609414100646973, -1.71661376953125e-05, -0.001953125, -1.9073486328125e-06, -0.0001125335693359375, -0.07706737518310547, -1.1444091796875e-05, -0.12407182157039642, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 102, 185, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.477057308373105, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(targets), targets)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Name", "id": "targets"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_spell_damage", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "targets"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -0.06639289855957031, -1.9073486328125e-06, -5.7220458984375e-05, 0.0, -1.71661376953125e-05, -2.288818359375e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, 0.0, -5.14984130859375e-05, 0.0, -1.33514404296875e-05, -1.537799835205078e-05, -4.291534423828125e-06, -0.005221366882324219, -1.33514404296875e-05, -1.1444091796875e-05, -5.53131103515625e-05, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -5.53131103515625e-05, -6.67572021484375e-05, -4.291534423828125e-06, -7.62939453125e-06, -0.0004730224609375, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -6.103515625e-05, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -4.1961669921875e-05, -3.8504600524902344e-05, -0.000995635986328125, -0.000102996826171875, -6.4849853515625e-05, -1.9073486328125e-06, -0.0006583929061889648, 0.0, -0.004305839538574219, -0.0020008087158203125, -0.0053539276123046875, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -0.00054168701171875, -9.5367431640625e-06, -0.001789093017578125, 0.0, -0.0001392364501953125, -0.000179290771484375, -3.814697265625e-06, -3.0517578125e-05, 0.0, -0.000408172607421875, 0.0, -2.491474151611328e-05, -3.933906555175781e-06, -0.001880645751953125, -5.7220458984375e-06, -0.0003147125244140625, -2.6702880859375e-05, -0.00257110595703125, -0.001922607421875, -5.7220458984375e-06, -9.5367431640625e-06, -1.1444091796875e-05, -0.0001964569091796875, 0.0, -8.7738037109375e-05, 0.0, -0.00010025501251220703, -3.814697265625e-06, -0.0010833740234375, -3.4332275390625e-05, -9.5367431640625e-06, -5.65257453918457, -0.0135955810546875, -0.0001163482666015625, -3.814697265625e-06, -0.000194549560546875, 0.0, -0.0737299919128418, 0.0, -0.2059617042541504, 0.0, -1.52587890625e-05, -0.11505413055419922, -1.9073486328125e-06, -0.0007600784301757812, -3.814697265625e-06, -0.015648841857910156, -1.9073486328125e-06, -0.2118234634399414, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_spell_damage", "<EOS>", 282, 45, 160, "targets", "<EOS>", 45, 160, "targets", "<EOS>"]}, {"score": -6.511323362304438, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}, {"iter": {"_type": "Name", "id": "targets"}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -0.06639289855957031, -1.9073486328125e-06, -5.7220458984375e-05, 0.0, -1.71661376953125e-05, -2.288818359375e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, 0.0, -5.14984130859375e-05, 0.0, -1.33514404296875e-05, -1.537799835205078e-05, -4.291534423828125e-06, -5.924053192138672, -0.0005741119384765625, -1.1444091796875e-05, -3.0517578125e-05, -5.7220458984375e-06, -4.1961669921875e-05, -1.1444091796875e-05, -4.38690185546875e-05, -8.20159912109375e-05, -5.841255187988281e-06, -5.7220458984375e-06, -0.0001659393310546875, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -4.00543212890625e-05, -1.9073486328125e-05, -4.00543212890625e-05, -3.6597251892089844e-05, -0.0004558563232421875, -0.001155853271484375, -0.0001163482666015625, -2.47955322265625e-05, -1.9073486328125e-06, -0.00517117977142334, 0.0, -0.008425712585449219, -0.00014495849609375, -1.9073486328125e-05, 0.0, -0.0016117095947265625, 0.0, -0.000461578369140625, -9.5367431640625e-06, -0.0011615753173828125, 0.0, -3.62396240234375e-05, -0.0005016326904296875, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.001171112060546875, 0.0, -1.7523765563964844e-05, -2.1457672119140625e-06, -0.0011826753616333008, 0.0, -0.0007721169386059046, -5.53131103515625e-05, -0.0034627914428710938, -2.47955322265625e-05, -0.0001506805419921875, -0.000316619873046875, -3.814697265625e-05, 0.0, -0.00072479248046875, -1.9073486328125e-06, -0.002666473388671875, 0.0, -0.01136016845703125, -1.1444091796875e-05, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.00031280517578125, -3.814697265625e-06, -0.00089263916015625, 0.0, -0.0004558563232421875, -2.861022494471399e-06, -0.007282376289367676, 0.0, -0.0023345947265625, -1.9073486328125e-06, -0.033072471618652344, -1.52587890625e-05, -1.52587890625e-05, -1.9073486328125e-06, -7.843971252441406e-05, -1.9073486328125e-06, -0.000530242919921875, -1.9073486328125e-06, -0.0023775100708007812, -1.9073486328125e-06, -0.0003452301025390625, -0.32898426055908203, -3.62396240234375e-05, -0.0001621246337890625, -7.62939453125e-06, -6.4849853515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.0002626180648803711, -1.9073486328125e-06, -0.0040569305419921875, -2.47955322265625e-05, -1.9073486328125e-05, -0.0032472610473632812, -0.00046539306640625, -0.0007881531491875648, -4.9591064453125e-05, -9.72747802734375e-05, 0.0, -0.002180814743041992, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 19, 160, "targets", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.749487251457822, "inferred_code": "class ArcaneExplosion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Explosion', 2, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Explosion", "_type": "Template17", "hole1": 2, "hole2": "MAGE"}, {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template0", "hole1": "other_player", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneExplosion"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -0.000118255615234375, -3.62396240234375e-05, -7.152555099310121e-07, -2.0384652088978328e-05, -8.225420970120467e-06, -0.000133514404296875, 0.0, -5.7220458984375e-06, -7.832050323486328e-05, -8.96453857421875e-05, -6.4849853515625e-05, -5.7220458984375e-05, -0.08032894134521484, -0.00563812255859375, -0.00014995403762441128, -4.3511328840395436e-05, -0.00019488928955979645, -1.9073486328125e-06, -9.179113112622872e-05, 0.0, -0.000545501708984375, -4.0531158447265625e-06, -2.7621994018554688, -0.002643585205078125, -0.4779081344604492, 0.0, -4.216563701629639, 0.0, -0.007134437561035156, 0.0, -0.000186920166015625, -0.002349853515625, -7.62939453125e-06, -0.19059109687805176, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Explosion", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Explosion", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 95, 172, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -15.875412940979004, "inferred_code": "break\n", "model_output": {"body": [{"_type": "Break"}], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -1.71661376953125e-05, -15.873124122619629], "choice_history": [80, 159, 295, 87]}, {"score": -22.451223373413086, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-0.00055694580078125, -0.0017147064208984375, -22.448951721191406], "choice_history": [80, 159, 294]}]}
{"index": 4, "beams": [{"score": -0.206191038912948, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template17", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "target": {"_type": "Name", "id": "c"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -0.07098007202148438, -0.0002193450927734375, -4.255681051290594e-05, -0.0001161092659458518, -6.43729799776338e-06, 0.0, -5.006777428206988e-06, 0.0, -0.0004253387451171875, -3.933904736186378e-06, -0.0013942718505859375, -3.814697265625e-06, -8.594989776611328e-05, -3.814697265625e-06, -3.814697265625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.919269561767578e-05, 0.0, -3.24249267578125e-05, -6.115436553955078e-05, -4.29153169534402e-06, -0.0019168853759765625, -3.814697265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.2479248046875e-05, -3.814697265625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.814697265625e-06, -2.3841854272177443e-05, 0.0, -9.34600830078125e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -7.05718994140625e-05, -1.71661376953125e-05, -3.0517578125e-05, -3.814697265625e-06, -0.001155853271484375, -0.0001163482666015625, -6.866455078125e-05, -0.0001659393310546875, -0.0318148136138916, -2.47955322265625e-05, -0.0029458999633789062, -0.0001010894775390625, -0.0001201629638671875, -2.86102294921875e-05, -0.029504776000976562, -4.00543212890625e-05, -2.86102294921875e-05, -7.2479248046875e-05, -3.814697265625e-06, -0.006589426193386316, -5.7220458984375e-06, -0.0112457275390625, -1.9073486328125e-06, -0.002457940485328436, -2.288818359375e-05, -0.03741264343261719, -0.000881195068359375, -1.9073486328125e-06, -2.288818359375e-05, -0.00026702880859375, -0.001422882080078125, 0.0, -0.001041412353515625, 0.0, -4.9591064453125e-05, 0.0, -0.0016716718673706055, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "c", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 295, 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -3.7050544040248425, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Intellect"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "target": {"_type": "Name", "id": "c"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -2.960691452026367, 0.0, -0.00010251995990984142, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -0.0007610321044921875, -1.33514404296875e-05, -3.814697265625e-06, -2.86102294921875e-05, -0.0030841827392578125, -1.52587890625e-05, 0.0, -0.0001125335693359375, 0.0, -3.09939932776615e-05, -1.9073486328125e-06, -3.0875205993652344e-05, -1.9073486328125e-06, -0.0005931854248046875, -6.866455078125e-05, -9.5367431640625e-06, -4.577531944960356e-05, -6.616051541641355e-05, -5.9008078096667305e-05, -7.62939453125e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.3139898732770234e-05, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -6.29425048828125e-05, 0.0, -0.00014495849609375, 0.0, -0.0062389373779296875, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -0.002315521240234375, -9.775161743164062e-06, -0.00128936767578125, -2.0265579223632812e-06, -1.52587890625e-05, -0.0016326904296875, -6.866455078125e-05, -0.025905847549438477, 0.0, -4.1961669921875e-05, 0.0, -0.00460052490234375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0005692243576049805, -8.58306884765625e-05, -0.0008831024169921875, -1.0251977982989047e-05, -0.002325534587725997, -0.0007975100888870656, -0.030501365661621094, -0.0001735687255859375, -0.005926370620727539, -2.288818359375e-05, -9.5367431640625e-05, -4.76837158203125e-05, -2.86102294921875e-05, -3.0875205993652344e-05, -3.814697265625e-06, 0.0, -0.00012099742889404297, -1.1920928244535389e-07, -8.58306884765625e-05, -2.872943878173828e-05, -8.34464663057588e-06, -0.5229969024658203, -5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.52587890625e-05, -3.814697265625e-06, 0.0, -0.0001697540283203125, -5.7220458984375e-06, -2.0503957784967497e-05, 0.0, -7.05718994140625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -7.82012939453125e-05, -1.52587890625e-05, -3.0517578125e-05, -5.7220458984375e-06, -0.00272369384765625, -8.96453857421875e-05, -5.91278076171875e-05, -0.000133514404296875, -0.030434846878051758, -2.86102294921875e-05, -0.00290679931640625, -0.0001068115234375, -0.0001049041748046875, -2.47955322265625e-05, -0.030019760131835938, -4.1961669921875e-05, -2.86102294921875e-05, -7.2479248046875e-05, -3.814697265625e-06, -0.006003855261951685, -5.7220458984375e-06, -0.013177871704101562, -1.9073486328125e-06, -0.0024902885779738426, -2.288818359375e-05, -0.0366973876953125, -0.000885009765625, -1.9073486328125e-06, -2.288818359375e-05, -0.000270843505859375, -0.00142669677734375, 0.0, -0.0010528564453125, 0.0, -4.9591064453125e-05, 0.0, -0.001658320426940918, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Intellect", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "c", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 295, 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -4.349788422896381, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template17", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -0.07098007202148438, -0.0002193450927734375, -4.255681051290594e-05, -0.0001161092659458518, -6.43729799776338e-06, 0.0, -5.006777428206988e-06, 0.0, -0.0004253387451171875, -3.933904736186378e-06, -0.0013942718505859375, -3.814697265625e-06, -8.594989776611328e-05, -3.814697265625e-06, -3.814697265625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.919269561767578e-05, 0.0, -3.24249267578125e-05, -6.115436553955078e-05, -4.29153169534402e-06, -0.0019168853759765625, -3.814697265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.2479248046875e-05, -3.814697265625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.814697265625e-06, -2.3841854272177443e-05, 0.0, -9.34600830078125e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -7.05718994140625e-05, -1.71661376953125e-05, -3.0517578125e-05, -3.814697265625e-06, -0.001155853271484375, -0.0001163482666015625, -6.866455078125e-05, -0.0001659393310546875, -4.176537036895752, -0.0013895034790039062, -0.0005207061767578125, -5.91278076171875e-05, -3.62396240234375e-05, -3.4332275390625e-05, -0.02639007568359375, -4.1961669921875e-05, -2.288818359375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.008320935070514679, -3.814697265625e-06, -0.010377883911132812, -1.9073486328125e-06, -0.0028335945680737495, -2.288818359375e-05, -0.03949546813964844, -0.0006771087646484375, -1.9073486328125e-06, -2.288818359375e-05, -0.0002574920654296875, -0.0014400482177734375, 0.0, -0.0010395050048828125, 0.0, -4.9591064453125e-05, 0.0, -0.0017050504684448242, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 295, 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.1956073997680505, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n            player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template17", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "target": {"_type": "Name", "id": "c"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -0.07098007202148438, -0.0002193450927734375, -4.255681051290594e-05, -0.0001161092659458518, -6.43729799776338e-06, 0.0, -5.006777428206988e-06, 0.0, -0.0004253387451171875, -3.933904736186378e-06, -0.0013942718505859375, -3.814697265625e-06, -8.594989776611328e-05, -3.814697265625e-06, -3.814697265625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.919269561767578e-05, 0.0, -3.24249267578125e-05, -6.115436553955078e-05, -4.29153169534402e-06, -0.0019168853759765625, -3.814697265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.2479248046875e-05, -3.814697265625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.814697265625e-06, -2.3841854272177443e-05, 0.0, -9.34600830078125e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -7.05718994140625e-05, -1.71661376953125e-05, -3.0517578125e-05, -3.814697265625e-06, -0.001155853271484375, -0.0001163482666015625, -6.866455078125e-05, -0.0001659393310546875, -0.0318148136138916, -2.47955322265625e-05, -0.0029458999633789062, -0.0001010894775390625, -0.0001201629638671875, -2.86102294921875e-05, -0.029504776000976562, -4.00543212890625e-05, -2.86102294921875e-05, -7.2479248046875e-05, -3.814697265625e-06, -0.006589426193386316, -5.7220458984375e-06, -0.0112457275390625, -1.9073486328125e-06, -0.002457940485328436, -2.288818359375e-05, -3.316591262817383, -1.5900354385375977, -9.5367431640625e-06, -5.7220458984375e-06, -0.09432601928710938, -0.0001888275146484375, -1.9073486328125e-06, -0.0038127899169921875, 0.0, -0.00119781494140625, 0.0, -0.005614042282104492, 0.0, -0.013929367065429688, -1.1444091796875e-05, -1.9073486328125e-05, -0.000537872314453125, -0.0001316070556640625, 0.0, -0.0022754669189453125, 0.0, -0.0004329681396484375, 0.0, -0.003066420555114746, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "c", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 296, 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.246613024002727, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in type(player.minions):\n            player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template17", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Name", "id": "type"}}, "body": [{"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "target": {"_type": "Name", "id": "c"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -0.07098007202148438, -0.0002193450927734375, -4.255681051290594e-05, -0.0001161092659458518, -6.43729799776338e-06, 0.0, -5.006777428206988e-06, 0.0, -0.0004253387451171875, -3.933904736186378e-06, -0.0013942718505859375, -3.814697265625e-06, -8.594989776611328e-05, -3.814697265625e-06, -3.814697265625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.919269561767578e-05, 0.0, -3.24249267578125e-05, -6.115436553955078e-05, -4.29153169534402e-06, -0.0019168853759765625, -3.814697265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.2479248046875e-05, -3.814697265625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.814697265625e-06, -2.3841854272177443e-05, 0.0, -9.34600830078125e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -7.05718994140625e-05, -1.71661376953125e-05, -3.0517578125e-05, -3.814697265625e-06, -0.001155853271484375, -0.0001163482666015625, -6.866455078125e-05, -0.0001659393310546875, -0.0318148136138916, -2.47955322265625e-05, -0.0029458999633789062, -0.0001010894775390625, -0.0001201629638671875, -2.86102294921875e-05, -4.166485786437988, -2.86102294921875e-05, -0.06093025207519531, -0.23856067657470703, 0.0, -0.2829141616821289, -6.67572021484375e-05, -0.004530906677246094, 0.0, -0.035361647605895996, -0.00023651123046875, -5.53131103515625e-05, -0.00054168701171875, -3.814697265625e-06, -2.6702880859375e-05, -0.0487060546875, -0.0001468658447265625, 0.0, -0.00016021728515625, 0.0, -0.29262447357177734, 0.0, -0.0017861127853393555, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "c", "<EOS>", 14, 136, 19, 160, "type", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.524416547548519, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "target": {"_type": "Name", "id": "c"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -5.392862319946289, -8.58306884765625e-05, -2.264974000354414e-06, -9.262468665838242e-05, -1.3589859008789062e-05, 0.0, -6.556489552167477e-06, 0.0, -0.0003833770751953125, -7.867813110351562e-06, -0.000743865966796875, 0.0, -0.000316619873046875, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001087188720703125, -1.52587890625e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -2.1219253540039062e-05, -1.1920928244535389e-07, -3.814697265625e-05, -4.971027374267578e-05, -5.483620952873025e-06, -0.0021076202392578125, -3.0517578125e-05, -7.62939453125e-06, -7.62939453125e-06, -7.43865966796875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.1552734375e-05, -5.7220458984375e-06, -2.4199480321840383e-05, 0.0, -9.72747802734375e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -6.866455078125e-05, -1.52587890625e-05, -2.6702880859375e-05, -3.814697265625e-06, -0.001033782958984375, -0.000110626220703125, -7.2479248046875e-05, -0.0001621246337890625, -0.031882524490356445, -2.47955322265625e-05, -0.0030078887939453125, -9.918212890625e-05, -0.0001201629638671875, -2.86102294921875e-05, -0.02697467803955078, -4.00543212890625e-05, -2.86102294921875e-05, -7.2479248046875e-05, -3.814697265625e-06, -0.006630078889429569, -5.7220458984375e-06, -0.011074066162109375, -1.9073486328125e-06, -0.002465453464537859, -2.288818359375e-05, -0.03679466247558594, -0.0008792877197265625, -1.9073486328125e-06, -2.288818359375e-05, -0.0002689361572265625, -0.001422882080078125, 0.0, -0.0010395050048828125, 0.0, -4.9591064453125e-05, 0.0, -0.001669764518737793, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Arcane", " ", "Intellect", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "c", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 295, 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.158819163577391, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template13", "hole1": "DRUID", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -4.646859169006348, -0.006791114807128906, -0.00018320789968129247, -0.0005701627233065665, -1.7404556274414062e-05, -9.5367431640625e-06, -1.4483503103256226, 0.0, -0.0002193450927734375, -1.9073486328125e-06, -0.01930522918701172, -0.024239540100097656, -0.002162933349609375, 0.0, -0.0004329681396484375, 0.0, -0.008650538511574268, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Arcane", " ", "Intellect", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.140880845671738, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Intellect"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -2.960691452026367, 0.0, -0.00010251995990984142, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -0.0007610321044921875, -1.33514404296875e-05, -3.814697265625e-06, -2.86102294921875e-05, -0.0030841827392578125, -1.52587890625e-05, 0.0, -0.0001125335693359375, 0.0, -3.09939932776615e-05, -1.9073486328125e-06, -3.0875205993652344e-05, -1.9073486328125e-06, -0.0005931854248046875, -6.866455078125e-05, -9.5367431640625e-06, -4.577531944960356e-05, -6.616051541641355e-05, -5.9008078096667305e-05, -7.62939453125e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.3139898732770234e-05, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -6.29425048828125e-05, 0.0, -0.00014495849609375, 0.0, -0.0062389373779296875, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -0.002315521240234375, -9.775161743164062e-06, -0.00128936767578125, -2.0265579223632812e-06, -1.52587890625e-05, -0.0016326904296875, -6.866455078125e-05, -0.025905847549438477, 0.0, -4.1961669921875e-05, 0.0, -0.00460052490234375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0005692243576049805, -8.58306884765625e-05, -0.0008831024169921875, -1.0251977982989047e-05, -0.002325534587725997, -0.0007975100888870656, -0.030501365661621094, -0.0001735687255859375, -0.005926370620727539, -2.288818359375e-05, -9.5367431640625e-05, -4.76837158203125e-05, -2.86102294921875e-05, -3.0875205993652344e-05, -3.814697265625e-06, 0.0, -0.00012099742889404297, -1.1920928244535389e-07, -8.58306884765625e-05, -2.872943878173828e-05, -8.34464663057588e-06, -1.5206079483032227, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -9.72747802734375e-05, -7.62939453125e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -0.00011086463928222656, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, 0.0, -6.866455078125e-05, -1.52587890625e-05, -4.00543212890625e-05, -3.814697265625e-06, -0.9177265167236328, -2.288818359375e-05, -0.4342966079711914, -0.0001926422119140625, -1.1444091796875e-05, 0.0, -0.006443023681640625, 0.0, -0.0003223419189453125, 0.0, -0.017553329467773438, 0.0, -0.5426270961761475, -1.2159273865108844e-05, -0.15740740299224854, -6.67572021484375e-05, -0.0019626617431640625, -0.001155853271484375, -3.814697265625e-06, -0.023932483047246933, -5.7220458984375e-06, -0.4612751007080078, -1.33514404296875e-05, -1.1444091796875e-05, -0.000209808349609375, -0.0007228851318359375, 0.0, -0.0013027191162109375, 0.0, -0.0007181167602539062, 0.0, -0.0007296800031326711, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Intellect", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.222719869935645, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -4.646859169006348, -0.006791114807128906, -0.00018320789968129247, -0.0005701627233065665, -1.7404556274414062e-05, -9.5367431640625e-06, -1.2656139135360718, -9.5367431640625e-06, -0.5097255706787109, 0.0, -0.1223745346069336, -0.054965972900390625, -0.6038875579833984, 0.0, -0.00039196014404296875, 0.0, -0.010294431820511818, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Arcane", " ", "Intellect", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.248669472882284, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 0, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.target_func, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template13", "hole1": "COMMON", "hole2": "target_func"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -4.646859169006348, -0.006791114807128906, -0.00018320789968129247, -0.0005701627233065665, -1.7404556274414062e-05, -9.5367431640625e-06, -1.533647894859314, -3.814697265625e-06, -0.25601422786712646, 0.0, -0.5199556350708008, -0.19093799591064453, -0.05806922912597656, 0.0, -0.00015926361083984375, 0.0, -0.03442502021789551, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Arcane", " ", "Intellect", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.280697423392667, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template13", "hole1": "PALADIN", "hole2": "FREE"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -4.646859169006348, -0.006791114807128906, -0.00018320789968129247, -0.0005701627233065665, -1.7404556274414062e-05, -9.5367431640625e-06, -1.2656139135360718, -9.5367431640625e-06, -0.9417572021484375, 0.0, -0.039638519287109375, -0.2906017303466797, -0.05759620666503906, 0.0, -0.00017452239990234375, 0.0, -0.029849400743842125, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Arcane", " ", "Intellect", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.710874033519758, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Intellect", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -4.646859169006348, -0.006791114807128906, -0.00018320789968129247, -0.0005701627233065665, -1.7404556274414062e-05, -9.5367431640625e-06, -1.2656139135360718, -9.5367431640625e-06, -0.5097255706787109, 0.0, -0.1223745346069336, -0.054965972900390625, -0.7925310134887695, 0.0, -1.1444091796875e-05, 0.0, -0.002437591552734375, 0.0, -0.19617843627929688, 0.0, -0.11156736314296722, -2.2649765014648438e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Arcane", " ", "Intellect", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 224, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", "draw", "<EOS>"]}, {"score": -9.176261131036874, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hand.append(game)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Intellect"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "append", "value": {"_type": "Attribute", "attr": "hand", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -2.960691452026367, 0.0, -0.00010251995990984142, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -0.0007610321044921875, -1.33514404296875e-05, -3.814697265625e-06, -2.86102294921875e-05, -0.0030841827392578125, -1.52587890625e-05, 0.0, -0.0001125335693359375, 0.0, -3.09939932776615e-05, -1.9073486328125e-06, -3.0875205993652344e-05, -1.9073486328125e-06, -0.0005931854248046875, -6.866455078125e-05, -9.5367431640625e-06, -4.577531944960356e-05, -6.616051541641355e-05, -5.9008078096667305e-05, -7.62939453125e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.3139898732770234e-05, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -6.29425048828125e-05, 0.0, -0.00014495849609375, 0.0, -0.0062389373779296875, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -0.002315521240234375, -9.775161743164062e-06, -0.00128936767578125, -2.0265579223632812e-06, -1.52587890625e-05, -0.0016326904296875, -6.866455078125e-05, -0.025905847549438477, 0.0, -4.1961669921875e-05, 0.0, -0.00460052490234375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0005692243576049805, -8.58306884765625e-05, -0.0008831024169921875, -1.0251977982989047e-05, -0.002325534587725997, -0.0007975100888870656, -0.030501365661621094, -0.0001735687255859375, -0.005926370620727539, -2.288818359375e-05, -9.5367431640625e-05, -4.76837158203125e-05, -2.86102294921875e-05, -3.0875205993652344e-05, -3.814697265625e-06, 0.0, -0.00012099742889404297, -1.1920928244535389e-07, -8.58306884765625e-05, -2.872943878173828e-05, -8.34464663057588e-06, -1.5206079483032227, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -9.72747802734375e-05, -7.62939453125e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -0.00011086463928222656, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, 0.0, -6.866455078125e-05, -1.52587890625e-05, -4.00543212890625e-05, -3.814697265625e-06, -1.3502531051635742, -0.15938377380371094, -0.0010306313633918762, -0.0002981424331665039, -0.0016698837280273438, -5.7220458984375e-06, -1.33514404296875e-05, -0.012220382690429688, -1.33514404296875e-05, 0.0, -0.001079559326171875, 0.0, -0.00028228759765625, 0.0, -0.00487518310546875, 0.0, -0.35160017013549805, -1.33514404296875e-05, -0.39942288398742676, -4.3511390686035156e-05, -0.07539558410644531, -0.2623786926269531, -7.62939453125e-06, -1.984118938446045, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Intellect", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hand", "<EOS>", "append", "<EOS>", 282, 45, 160, "game", "<EOS>"]}, {"score": -10.579164355847745, "inferred_code": "class ArcaneIntellect(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Intellect', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for c in range(0, 2):\n            <UNK> = hearthbreaker.cards.minions.<UNK>()\n            player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Intellect"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "target": {"_type": "Name", "id": "c"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneIntellect"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -0.0002079010009765625, -0.000110626220703125, -1.9073486328125e-06, -1.1444026313256472e-05, -8.702266313775908e-06, -2.2649765014648438e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -4.887580871582031e-05, -2.491474151611328e-05, -0.00023150436754804105, -0.0002422332763671875, -2.960691452026367, 0.0, -0.00010251995990984142, -3.814697265625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -0.0007610321044921875, -1.33514404296875e-05, -3.814697265625e-06, -2.86102294921875e-05, -0.0030841827392578125, -1.52587890625e-05, 0.0, -0.0001125335693359375, 0.0, -3.09939932776615e-05, -1.9073486328125e-06, -3.0875205993652344e-05, -1.9073486328125e-06, -0.0005931854248046875, -6.866455078125e-05, -9.5367431640625e-06, -4.577531944960356e-05, -6.616051541641355e-05, -5.9008078096667305e-05, -7.62939453125e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.3139898732770234e-05, -1.1444091796875e-05, -9.5367431640625e-06, 0.0, -6.29425048828125e-05, 0.0, -0.00014495849609375, 0.0, -0.0062389373779296875, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -0.002315521240234375, -9.775161743164062e-06, -0.00128936767578125, -2.0265579223632812e-06, -1.52587890625e-05, -0.0016326904296875, -6.866455078125e-05, -0.025905847549438477, 0.0, -4.1961669921875e-05, 0.0, -0.00460052490234375, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0005692243576049805, -8.58306884765625e-05, -0.0008831024169921875, -1.0251977982989047e-05, -0.002325534587725997, -0.0007975100888870656, -0.030501365661621094, -0.0001735687255859375, -0.005926370620727539, -2.288818359375e-05, -9.5367431640625e-05, -4.76837158203125e-05, -2.86102294921875e-05, -3.0875205993652344e-05, -3.814697265625e-06, 0.0, -0.00012099742889404297, -1.1920928244535389e-07, -8.58306884765625e-05, -2.872943878173828e-05, -8.34464663057588e-06, -0.5229969024658203, -5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.52587890625e-05, -3.814697265625e-06, 0.0, -0.0001697540283203125, -5.7220458984375e-06, -2.0503957784967497e-05, 0.0, -7.05718994140625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -7.82012939453125e-05, -1.52587890625e-05, -3.0517578125e-05, -5.7220458984375e-06, -0.00272369384765625, -8.96453857421875e-05, -5.91278076171875e-05, -0.000133514404296875, -0.030434846878051758, -2.86102294921875e-05, -0.00290679931640625, -0.0001068115234375, -0.0001049041748046875, -2.47955322265625e-05, -0.030019760131835938, -4.1961669921875e-05, -2.86102294921875e-05, -7.2479248046875e-05, -3.814697265625e-06, -0.006003855261951685, -5.7220458984375e-06, -0.013177871704101562, -1.9073486328125e-06, -0.0024902885779738426, -2.288818359375e-05, -3.335618019104004, -0.2903919219970703, -0.000118255615234375, -1.71661376953125e-05, -0.000118255615234375, -7.62939453125e-06, -0.4268721342086792, -6.866291369078681e-05, -0.01688098907470703, -0.24892807006835938, -0.0035114288330078125, 0.0, -0.0008411407470703125, -3.814697265625e-06, -0.47202396392822266, -1.9073486328125e-06, -0.005985260009765625, 0.0, -0.042200565338134766, -6.115436553955078e-05, -0.3110957145690918, -4.720682045444846e-05, -0.3307510316371918, -0.0012903213500976562, -0.9246826171875, -4.61338713648729e-05, -0.47673606872558594, -1.9073486328125e-06, -1.33514404296875e-05, -0.019792556762695312, -0.0001850128173828125, 0.0, -0.0044078826904296875, 0.0, -0.0012025833129882812, 0.0, -0.0022727251052856445, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Intellect", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Intellect", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "c", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 296, 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -20.791807174682617, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -9.34600830078125e-05, -20.79168701171875], "choice_history": [80, 159, 294]}]}
{"index": 5, "beams": [{"score": -0.24983075606663618, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(1, self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template17", "hole1": 1, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"hole0": 3, "_type": "Template71"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "append", "value": {"_type": "Name", "id": "targets"}}}}, {"targets": [{"_type": "Name", "id": "target"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "targets"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "target"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -0.07661056518554688, -0.0012493133544921875, -5.376194530981593e-05, -5.0425398512743413e-05, -2.5391420422238298e-05, 0.0, -2.503380528651178e-06, 0.0, -0.0006561279296875, -2.2649765014648438e-06, -0.002323150634765625, -1.33514404296875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -3.0517578125e-05, -2.1696090698242188e-05, -2.7418097943154862e-06, -0.005103111267089844, -2.6702880859375e-05, -9.5367431640625e-05, -5.7220458984375e-06, -3.814697265625e-06, -2.6702880859375e-05, -3.814697265625e-06, -6.866455078125e-05, -2.86102294921875e-05, -1.5854784578550607e-05, -5.7220458984375e-06, -7.62939453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -2.682209014892578e-05, -0.0010900497436523438, -0.0001697540283203125, -0.0009441375732421875, -9.5367431640625e-06, -0.01351702120155096, -0.0002193450927734375, -0.0008792877197265625, -7.82012939453125e-05, -1.33514404296875e-05, 0.0, -0.004544973373413086, -0.00081634521484375, -0.00048065185546875, -0.0002918243408203125, -1.1444091796875e-05, -0.005152993835508823, -0.00042724609375, -0.012309074401855469, -0.0020265579223632812, -0.0005216065910644829, -0.0001596212387084961, -0.006320953369140625, -0.000194549560546875, -7.62939453125e-06, -3.814697265625e-06, -2.47955322265625e-05, -1.1444091796875e-05, -0.001869797706604004, 0.0, -0.013875961303710938, -0.00048828125, -3.24249267578125e-05, 0.0, -0.0018291473388671875, 0.0, -0.0022089481353759766, -0.0001735687255859375, -0.000347137451171875, -1.9073486328125e-06, -4.38690185546875e-05, -0.0002269744873046875, -1.9073486328125e-06, -0.0002613067626953125, -1.9073486328125e-06, -0.0002307891845703125, 0.0, -2.5391545932507142e-05, -4.0531158447265625e-06, -0.00010442732309456915, 0.0, -0.00617035711184144, -3.0517578125e-05, -6.103515625e-05, -9.918212890625e-05, -1.52587890625e-05, -7.2479248046875e-05, -6.29425048828125e-05, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.0040700435638427734, -1.9073486328125e-06, -0.0208892822265625, -1.9073486328125e-06, -9.5367431640625e-06, -0.000244140625, 0.0, -0.000244140625, 0.0, -0.0006122589111328125, 0.0, -8.082373824436218e-05, -1.1920928244535389e-07, -0.0005601640441454947, 0.0, -0.0015458156121894717, -5.364403477869928e-06, -0.0004520416259765625, -0.0001964569091796875, -3.814697265625e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0002838372893165797, -2.3841855067985307e-07, -0.0005588531494140625, -7.43865966796875e-05, -0.0001125335693359375, 0.0, -0.000240325927734375, 0.0, -0.00013673304056283087, -3.933906555175781e-06, -0.0032459497451782227, -2.0265579223632812e-06, -5.7220458984375e-06, -0.0016880035400390625, -3.814697265625e-06, -0.004029273986816406, 0.0, -0.00022125244140625, -0.0001010894775390625, -0.000576019287109375, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -0.0001068115234375, -3.814697265625e-06, -0.0028676448855549097, 0.0, -0.008244752883911133, -3.814697265625e-06, -0.0001277923583984375, -0.0020160675048828125, -4.9591064453125e-05, -0.015065290033817291, -3.814697265625e-06, -0.0003376007080078125, -6.67572021484375e-05, -0.014809489250183105, -1.537799835205078e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 63, 253, "3", "<EOS>", 298, 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "append", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 85, 128, 282, 45, 160, "target", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "targets", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "target", "<EOS>", "damage", "<EOS>", 283, 47, 165, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -3.5258412856111008, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(1, self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template15", "hole1": 1, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"hole0": 3, "_type": "Template71"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "append", "value": {"_type": "Name", "id": "targets"}}}}, {"targets": [{"_type": "Name", "id": "target"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "targets"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "target"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -3.3534975051879883, -5.91278076171875e-05, -4.529942543740617e-06, -5.722034256905317e-05, -5.817413330078125e-05, -1.9073486328125e-06, -1.0847710655070841e-05, 0.0, -0.00012969970703125, -5.841255187988281e-06, -0.003993988037109375, -1.33514404296875e-05, -9.72747802734375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-05, -1.71661376953125e-05, -5.53131103515625e-05, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -3.0517578125e-05, -2.0861623852397315e-05, -3.3378546504536644e-06, -0.0038537979125976562, -4.1961669921875e-05, -0.00011444091796875, -5.7220458984375e-06, -3.814697265625e-06, -2.6702880859375e-05, -3.814697265625e-06, -7.05718994140625e-05, -2.6702880859375e-05, -1.6212408809224144e-05, -5.7220458984375e-06, -7.62939453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -7.05718994140625e-05, -9.5367431640625e-06, -2.47955322265625e-05, -2.47955322265625e-05, -0.00102996826171875, -0.000164031982421875, -0.000957489013671875, -7.62939453125e-06, -0.013565062545239925, -0.0002155303955078125, -0.0009136199951171875, -7.2479248046875e-05, -1.33514404296875e-05, 0.0, -0.004581332206726074, -0.0008106231689453125, -0.0004749298095703125, -0.000293731689453125, -1.1444091796875e-05, -0.005154662765562534, -0.00042724609375, -0.012328147888183594, -0.0020380020141601562, -0.0005182708846405149, -0.0001615285873413086, -0.0063724517822265625, -0.0001964569091796875, -7.62939453125e-06, -3.814697265625e-06, -2.47955322265625e-05, -1.1444091796875e-05, -0.0018802881240844727, 0.0, -0.013965606689453125, -0.000499725341796875, -3.24249267578125e-05, 0.0, -0.001834869384765625, 0.0, -0.002207040786743164, -0.0001735687255859375, -0.000347137451171875, -1.9073486328125e-06, -4.38690185546875e-05, -0.000225067138671875, -1.9073486328125e-06, -0.0002613067626953125, -1.9073486328125e-06, -0.0002307891845703125, 0.0, -2.5391545932507142e-05, -4.0531158447265625e-06, -0.00010442732309456915, 0.0, -0.006167136132717133, -3.0517578125e-05, -6.103515625e-05, -9.918212890625e-05, -1.52587890625e-05, -7.2479248046875e-05, -6.29425048828125e-05, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.004072904586791992, -1.9073486328125e-06, -0.020895004272460938, -1.9073486328125e-06, -9.5367431640625e-06, -0.000244140625, 0.0, -0.000244140625, 0.0, -0.0006122589111328125, 0.0, -8.082373824436218e-05, -1.1920928244535389e-07, -0.0005601640441454947, 0.0, -0.0015458156121894717, -5.364403477869928e-06, -0.000453948974609375, -0.0001964569091796875, -3.814697265625e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0002838372893165797, -2.3841855067985307e-07, -0.00055694580078125, -7.43865966796875e-05, -0.0001125335693359375, 0.0, -0.000240325927734375, 0.0, -0.00013673304056283087, -3.933906555175781e-06, -0.00324404239654541, -2.0265579223632812e-06, -5.7220458984375e-06, -0.0016880035400390625, -3.814697265625e-06, -0.004029273986816406, 0.0, -0.00022125244140625, -0.0001010894775390625, -0.0005779266357421875, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -0.0001068115234375, -3.814697265625e-06, -0.0028702677227556705, 0.0, -0.008249521255493164, -3.814697265625e-06, -0.0001277923583984375, -0.0020160675048828125, -4.9591064453125e-05, -0.015065781772136688, -3.814697265625e-06, -0.0003376007080078125, -6.67572021484375e-05, -0.014811396598815918, -1.537799835205078e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 63, 253, "3", "<EOS>", 298, 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "append", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 85, 128, 282, 45, 160, "target", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "targets", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "target", "<EOS>", "damage", "<EOS>", 283, 47, 165, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.240457751624994, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.extend(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(1, self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template17", "hole1": 1, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"hole0": 3, "_type": "Template71"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}, {"targets": [{"_type": "Name", "id": "target"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "targets"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "target"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -0.07661056518554688, -0.0012493133544921875, -5.376194530981593e-05, -5.0425398512743413e-05, -2.5391420422238298e-05, 0.0, -2.503380528651178e-06, 0.0, -0.0006561279296875, -2.2649765014648438e-06, -0.002323150634765625, -1.33514404296875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -3.0517578125e-05, -2.1696090698242188e-05, -2.7418097943154862e-06, -0.005103111267089844, -2.6702880859375e-05, -9.5367431640625e-05, -5.7220458984375e-06, -3.814697265625e-06, -2.6702880859375e-05, -3.814697265625e-06, -6.866455078125e-05, -2.86102294921875e-05, -1.5854784578550607e-05, -5.7220458984375e-06, -7.62939453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -2.682209014892578e-05, -0.0010900497436523438, -0.0001697540283203125, -0.0009441375732421875, -9.5367431640625e-06, -0.01351702120155096, -0.0002193450927734375, -0.0008792877197265625, -7.82012939453125e-05, -1.33514404296875e-05, 0.0, -0.004544973373413086, -0.00081634521484375, -0.00048065185546875, -0.0002918243408203125, -1.1444091796875e-05, -0.005152993835508823, -0.00042724609375, -0.012309074401855469, -0.0020265579223632812, -0.0005216065910644829, -0.0001596212387084961, -0.006320953369140625, -0.000194549560546875, -7.62939453125e-06, -3.814697265625e-06, -2.47955322265625e-05, -1.1444091796875e-05, -0.001869797706604004, 0.0, -0.013875961303710938, -0.00048828125, -3.24249267578125e-05, 0.0, -0.0018291473388671875, 0.0, -0.0022089481353759766, -0.0001735687255859375, -0.000347137451171875, -1.9073486328125e-06, -4.38690185546875e-05, -0.0002269744873046875, -1.9073486328125e-06, -0.0002613067626953125, -1.9073486328125e-06, -0.0002307891845703125, 0.0, -2.5391545932507142e-05, -4.0531158447265625e-06, -0.00010442732309456915, 0.0, -0.00617035711184144, -3.0517578125e-05, -6.103515625e-05, -9.918212890625e-05, -1.52587890625e-05, -7.2479248046875e-05, -6.29425048828125e-05, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.0040700435638427734, -1.9073486328125e-06, -4.007692337036133, -3.814697265625e-06, -5.7220458984375e-06, -0.000133514404296875, 0.0, -0.0004062652587890625, -9.5367431640625e-06, -0.00049591064453125, 0.0, -6.330003816401586e-05, -1.1920928244535389e-07, -0.002709627151489258, 0.0, -0.0031008697114884853, -2.264974000354414e-06, -0.0003986358642578125, -0.000293731689453125, -3.814697265625e-06, -5.91278076171875e-05, -1.9073486328125e-06, -0.0008827447309158742, -3.576278118089249e-07, -0.0009288787841796875, -6.4849853515625e-05, -9.5367431640625e-05, 0.0, -0.0002536773681640625, 0.0, -0.00014388559793587774, -3.933906555175781e-06, -0.0029158592224121094, -2.0265579223632812e-06, -5.7220458984375e-06, -0.0016422271728515625, -1.9073486328125e-06, -0.0037698745727539062, 0.0, -0.0002269744873046875, -0.0001125335693359375, -0.000522613525390625, -5.7220458984375e-06, -3.24249267578125e-05, 0.0, -0.0001068115234375, -3.814697265625e-06, -0.0029496478382498026, 0.0, -0.008208513259887695, -3.814697265625e-06, -0.0001277923583984375, -0.00201416015625, -4.9591064453125e-05, -0.015099015086889267, -3.814697265625e-06, -0.000335693359375, -6.67572021484375e-05, -0.014635920524597168, -1.537799835205078e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 63, 253, "3", "<EOS>", 298, 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 85, 128, 282, 45, 160, "target", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "targets", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "target", "<EOS>", "damage", "<EOS>", 283, 47, 165, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.818732972139166, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Missiles"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -3.614590644836426, -5.7220458984375e-06, -4.3272972106933594e-05, -2.1457672119140625e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.780292510986328e-05, 0.0, -0.0005054473876953125, -1.1444091796875e-05, -1.52587890625e-05, -0.00159454345703125, -0.000453948974609375, -0.00087738037109375, -5.7220458984375e-06, -0.0001659393310546875, -1.9073486328125e-05, -3.4689426684053615e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.000274658203125, -0.00032806396484375, -1.1444091796875e-05, -9.059495641849935e-05, -1.5020364116935525e-05, -5.364417302189395e-05, -0.000156402587890625, -3.814697265625e-05, -9.5367431640625e-06, -7.151393219828606e-07, -2.47955322265625e-05, -0.0001068115234375, -5.7220458984375e-06, -4.9591064453125e-05, 0.0, -0.000705718994140625, -1.1920928244535389e-07, -0.0051059722900390625, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0005838871002197266, 0.0, -0.00275421142578125, 0.0, -0.000133514404296875, -0.010348320007324219, -0.013841629028320312, -0.020485997200012207, -1.9073486328125e-06, -0.000244140625, -1.9073486328125e-06, -0.0004329681396484375, 0.0, -1.52587890625e-05, -3.814697265625e-06, -0.0015865564346313477, -7.62939453125e-05, -0.000331878662109375, 0.0, -0.001377105712890625, -5.7220458984375e-06, -0.04582023620605469, -0.0008087158203125, -0.006801605224609375, 0.0, -0.5410776138305664, -3.814697265625e-06, -0.00209808349609375, 0.0, -8.20159912109375e-05, -5.14984130859375e-05, -5.340576171875e-05, -0.5438152551651001, -1.1563301086425781e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Missiles", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -4.854357323489793, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Missiles"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template0", "hole1": "other_player", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -3.614590644836426, -5.7220458984375e-06, -4.3272972106933594e-05, -2.1457672119140625e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.780292510986328e-05, 0.0, -0.0005054473876953125, -1.1444091796875e-05, -1.52587890625e-05, -0.00159454345703125, -0.000453948974609375, -0.00087738037109375, -5.7220458984375e-06, -0.0001659393310546875, -1.9073486328125e-05, -3.4689426684053615e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.000274658203125, -0.00032806396484375, -1.1444091796875e-05, -9.059495641849935e-05, -1.5020364116935525e-05, -5.364417302189395e-05, -0.000156402587890625, -3.814697265625e-05, -9.5367431640625e-06, -7.151393219828606e-07, -2.47955322265625e-05, -0.0001068115234375, -5.7220458984375e-06, -4.9591064453125e-05, 0.0, -0.000705718994140625, -1.1920928244535389e-07, -0.0051059722900390625, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0005838871002197266, 0.0, -0.00275421142578125, 0.0, -0.000133514404296875, -0.010348320007324219, -0.013841629028320312, -0.020485997200012207, -1.9073486328125e-06, -0.000244140625, -1.9073486328125e-06, -0.0004329681396484375, 0.0, -1.52587890625e-05, -3.814697265625e-06, -0.0015865564346313477, -7.62939453125e-05, -0.000331878662109375, 0.0, -0.001377105712890625, -5.7220458984375e-06, -0.04582023620605469, -0.0008087158203125, -0.006801605224609375, 0.0, -1.0513973236083984, 0.0, -0.01034080982208252, -1.1920928244535389e-07, -3.814697265625e-05, -0.0055866241455078125, -9.5367431640625e-06, -0.05542823299765587, -1.6808508007670753e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Missiles", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -4.877242199333864, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template17", "hole1": 1, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 3, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -0.07661056518554688, -0.0012493133544921875, -5.376194530981593e-05, -5.0425398512743413e-05, -2.5391420422238298e-05, 0.0, -2.503380528651178e-06, 0.0, -0.0006561279296875, -2.2649765014648438e-06, -0.002323150634765625, -1.33514404296875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -3.0517578125e-05, -2.1696090698242188e-05, -2.7418097943154862e-06, -0.005103111267089844, -2.6702880859375e-05, -9.5367431640625e-05, -5.7220458984375e-06, -3.814697265625e-06, -2.6702880859375e-05, -3.814697265625e-06, -6.866455078125e-05, -2.86102294921875e-05, -1.5854784578550607e-05, -5.7220458984375e-06, -7.62939453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -2.682209014892578e-05, -0.0010900497436523438, -0.0001697540283203125, -0.0009441375732421875, -9.5367431640625e-06, -4.580141544342041, -1.9073486328125e-06, -0.0032606124877929688, -0.00064849853515625, -0.02294921875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.006429910659790039, -0.0002593994140625, -0.001262664794921875, -1.9073486328125e-06, -8.58306884765625e-05, -0.000247955322265625, 0.0, -0.0015716552734375, -3.814697265625e-06, -0.0001277923583984375, 0.0, -2.4795524950604886e-05, -2.0265579223632812e-06, -0.00023043155670166016, 0.0, -0.002579421503469348, -1.52587890625e-05, -0.0019550323486328125, -0.0018863677978515625, -3.814697265625e-06, -1.33514404296875e-05, -9.5367431640625e-06, -0.000179290771484375, 0.0, -8.58306884765625e-05, 0.0, -0.0016875267028808594, -1.9073486328125e-06, -0.0025979280471801758, -9.5367431640625e-06, -7.05718994140625e-05, -0.152313232421875, -0.000919342041015625, -0.00021924867178313434, -1.990794771700166e-05, -0.000301361083984375, -1.33514404296875e-05, -0.005658388137817383, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "3", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.11405354338725, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, player.effective_spell_damage(3)):\n            targets = copy.copy(game.other_player.minions)\n            targets.append(game.other_player.hero)\n            target = game.random_choice(targets)\n            target.damage(2, self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template17", "hole1": 1, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"hole0": 3, "_type": "Template71"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "append", "value": {"_type": "Name", "id": "targets"}}}}, {"targets": [{"_type": "Name", "id": "target"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "targets"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "target"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -0.07661056518554688, -0.0012493133544921875, -5.376194530981593e-05, -5.0425398512743413e-05, -2.5391420422238298e-05, 0.0, -2.503380528651178e-06, 0.0, -0.0006561279296875, -2.2649765014648438e-06, -0.002323150634765625, -1.33514404296875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -3.0517578125e-05, -2.1696090698242188e-05, -2.7418097943154862e-06, -0.005103111267089844, -2.6702880859375e-05, -9.5367431640625e-05, -5.7220458984375e-06, -3.814697265625e-06, -2.6702880859375e-05, -3.814697265625e-06, -6.866455078125e-05, -2.86102294921875e-05, -1.5854784578550607e-05, -5.7220458984375e-06, -7.62939453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -2.682209014892578e-05, -0.0010900497436523438, -0.0001697540283203125, -0.0009441375732421875, -9.5367431640625e-06, -0.01351702120155096, -0.0002193450927734375, -0.0008792877197265625, -7.82012939453125e-05, -1.33514404296875e-05, 0.0, -0.004544973373413086, -0.00081634521484375, -0.00048065185546875, -0.0002918243408203125, -1.1444091796875e-05, -0.005152993835508823, -0.00042724609375, -0.012309074401855469, -0.0020265579223632812, -0.0005216065910644829, -0.0001596212387084961, -0.006320953369140625, -0.000194549560546875, -7.62939453125e-06, -3.814697265625e-06, -2.47955322265625e-05, -1.1444091796875e-05, -0.001869797706604004, 0.0, -0.013875961303710938, -0.00048828125, -3.24249267578125e-05, 0.0, -0.0018291473388671875, 0.0, -0.0022089481353759766, -0.0001735687255859375, -0.000347137451171875, -1.9073486328125e-06, -4.38690185546875e-05, -0.0002269744873046875, -1.9073486328125e-06, -0.0002613067626953125, -1.9073486328125e-06, -0.0002307891845703125, 0.0, -2.5391545932507142e-05, -4.0531158447265625e-06, -0.00010442732309456915, 0.0, -0.00617035711184144, -3.0517578125e-05, -6.103515625e-05, -9.918212890625e-05, -1.52587890625e-05, -7.2479248046875e-05, -6.29425048828125e-05, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.0040700435638427734, -1.9073486328125e-06, -0.0208892822265625, -1.9073486328125e-06, -9.5367431640625e-06, -0.000244140625, 0.0, -0.000244140625, 0.0, -0.0006122589111328125, 0.0, -8.082373824436218e-05, -1.1920928244535389e-07, -0.0005601640441454947, 0.0, -0.0015458156121894717, -5.364403477869928e-06, -0.0004520416259765625, -0.0001964569091796875, -3.814697265625e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0002838372893165797, -2.3841855067985307e-07, -0.0005588531494140625, -7.43865966796875e-05, -0.0001125335693359375, 0.0, -0.000240325927734375, 0.0, -0.00013673304056283087, -3.933906555175781e-06, -0.0032459497451782227, -2.0265579223632812e-06, -5.7220458984375e-06, -0.0016880035400390625, -3.814697265625e-06, -0.004029273986816406, 0.0, -0.00022125244140625, -0.0001010894775390625, -0.000576019287109375, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -0.0001068115234375, -3.814697265625e-06, -0.0028676448855549097, 0.0, -0.008244752883911133, -3.814697265625e-06, -0.0001277923583984375, -0.0020160675048828125, -4.9591064453125e-05, -4.880561828613281, -9.775161743164062e-06, -0.0009479522705078125, -0.000110626220703125, -0.012881278991699219, -9.655952453613281e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 63, 253, "3", "<EOS>", 298, 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "append", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 85, 128, 282, 45, 160, "target", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "targets", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "target", "<EOS>", "damage", "<EOS>", 283, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.1459593725145325, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Missiles"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -3.614590644836426, -5.7220458984375e-06, -4.3272972106933594e-05, -2.1457672119140625e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.780292510986328e-05, 0.0, -0.0005054473876953125, -1.1444091796875e-05, -1.52587890625e-05, -0.00159454345703125, -0.000453948974609375, -0.00087738037109375, -5.7220458984375e-06, -0.0001659393310546875, -1.9073486328125e-05, -3.4689426684053615e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.000274658203125, -0.00032806396484375, -1.1444091796875e-05, -9.059495641849935e-05, -1.5020364116935525e-05, -5.364417302189395e-05, -0.000156402587890625, -3.814697265625e-05, -9.5367431640625e-06, -7.151393219828606e-07, -2.47955322265625e-05, -0.0001068115234375, -5.7220458984375e-06, -4.9591064453125e-05, 0.0, -0.000705718994140625, -1.1920928244535389e-07, -0.0051059722900390625, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0005838871002197266, 0.0, -0.00275421142578125, 0.0, -0.000133514404296875, -0.010348320007324219, -0.013841629028320312, -0.020485997200012207, -1.9073486328125e-06, -0.000244140625, -1.9073486328125e-06, -0.0004329681396484375, 0.0, -1.52587890625e-05, -3.814697265625e-06, -0.0015865564346313477, -7.62939453125e-05, -0.000331878662109375, 0.0, -0.001377105712890625, -5.7220458984375e-06, -0.04582023620605469, -0.0008087158203125, -0.006801605224609375, 0.0, -0.5410776138305664, -3.814697265625e-06, -0.00209808349609375, 0.0, -8.20159912109375e-05, -5.14984130859375e-05, -5.340576171875e-05, -0.8710513114929199, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Missiles", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -6.900792954540179, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template17", "hole1": 1, "hole2": "MAGE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -0.07661056518554688, -0.0012493133544921875, -5.376194530981593e-05, -5.0425398512743413e-05, -2.5391420422238298e-05, 0.0, -2.503380528651178e-06, 0.0, -0.0006561279296875, -2.2649765014648438e-06, -6.255171775817871, -0.004009246826171875, -0.3820199966430664, 0.0, -0.035801053047180176, -1.33514404296875e-05, -0.000522613525390625, 0.0, -3.814697265625e-05, -0.000701904296875, -1.1444091796875e-05, -0.14338374137878418, -5.841255187988281e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -8.441353267662294, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(game.other_player.hero)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template13", "hole1": "PALADIN", "hole2": "FREE"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -5.5781755447387695, -0.026833534240722656, -0.00013588961155619472, -0.00045053890789858997, -0.00017380714416503906, -2.86102294921875e-05, -1.047734022140503, -1.9073486328125e-06, -0.15743350982666016, 0.0, -0.05813121795654297, -0.023347854614257812, -0.0002079010009765625, 0.0, -9.1552734375e-05, 0.0, -0.012082099914550781, -1.9073486328125e-06, -0.0001583099365234375, 0.0, -1.1506165266036987, 0.0, -7.62939453125e-06, -0.3643636703491211, -3.814697265625e-06, -0.005611419677734375, -3.814697265625e-06, -1.52587890625e-05, 0.0, -0.0018788576126098633, 0.0, -0.0032297372817993164, 0.0, -0.0101564209908247, -1.4424220353248529e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Arcane", " ", "Missiles", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>"]}, {"score": -8.502491068569377, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template17", "hole1": 1, "hole2": "MAGE"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -0.07661056518554688, -0.0012493133544921875, -5.376194530981593e-05, -5.0425398512743413e-05, -2.5391420422238298e-05, 0.0, -2.503380528651178e-06, 0.0, -0.0006561279296875, -2.2649765014648438e-06, -6.255171775817871, -0.004009246826171875, -1.2357988357543945, 0.0, -2.09808349609375e-05, 0.0, -0.1460256576538086, 0.0, -0.0011750459671020508, -1.1920928244535389e-07, -0.6065078973770142, -5.364274329622276e-05, -1.71661376953125e-05, -9.1552734375e-05, -3.814697265625e-06, -0.17448432743549347, -1.7166135876323096e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -8.591095425895787, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template13", "hole1": "DRUID", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -5.5781755447387695, -0.026833534240722656, -0.00013588961155619472, -0.00045053890789858997, -0.00017380714416503906, -2.86102294921875e-05, -0.8150394558906555, 0.0, -0.0027637481689453125, 0.0, -0.06301212310791016, -0.3038177490234375, -0.7564973831176758, 0.0, -0.0612335205078125, 0.0, -0.9824700355529785, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Arcane", " ", "Missiles", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -8.776637790775226, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template17", "hole1": 1, "hole2": "MAGE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -0.07661056518554688, -0.0012493133544921875, -5.376194530981593e-05, -5.0425398512743413e-05, -2.5391420422238298e-05, 0.0, -2.503380528651178e-06, 0.0, -0.0006561279296875, -2.2649765014648438e-06, -6.255171775817871, -0.004009246826171875, -0.3820199966430664, 0.0, -0.035801053047180176, -1.33514404296875e-05, -0.000522613525390625, 0.0, -3.814697265625e-05, -0.000701904296875, -1.1444091796875e-05, -2.0192325115203857, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Arcane", " ", "Missiles", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -8.79763052683267, "inferred_code": "class ArcaneMissiles(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Missiles', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.<UNK>()\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Missiles", "_type": "Template13", "hole1": "DRUID", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}, "_type": "Template5", "hole1": "<UNK>"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneMissiles"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.5497195136049413e-06, -1.3351394954952411e-05, -7.748586540401448e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, -6.318092346191406e-05, -0.00014495849609375, -1.52587890625e-05, -7.05718994140625e-05, -5.5781755447387695, -0.026833534240722656, -0.00013588961155619472, -0.00045053890789858997, -0.00017380714416503906, -2.86102294921875e-05, -0.8150394558906555, 0.0, -0.0027637481689453125, 0.0, -0.06301212310791016, -0.3038177490234375, -0.6474227905273438, 0.0, -9.5367431640625e-06, 0.0, -0.41870784759521484, 0.0, -0.030648112297058105, -1.1920928244535389e-07, -0.9099476337432861, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Missiles", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Arcane", " ", "Missiles", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 116, 224, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -23.21835708618164, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -2.86102294921875e-05, -23.218311309814453], "choice_history": [80, 159, 294]}]}
{"index": 6, "beams": [{"score": -0.039494612669841445, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Shot"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -0.027528762817382812, -0.0004405975341796875, -2.47955322265625e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.33514404296875e-05, -1.5497195136049413e-06, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -0.000438690185546875, -1.33514404296875e-05, -1.9073486328125e-06, -1.680836794548668e-05, -4.971005182596855e-05, -0.0001074075698852539, -5.7220458984375e-06, -4.9591064453125e-05, -1.71661376953125e-05, -8.701463229954243e-06, -1.33514404296875e-05, -2.288818359375e-05, 0.0, -7.62939453125e-05, 0.0, -9.34600830078125e-05, -4.768370445162873e-07, -0.0005915164947509766, 0.0, -1.9073486328125e-06, 0.0, -4.57763671875e-05, -4.9591064453125e-05, -7.43865966796875e-05, 0.0, -0.000904083251953125, -1.71661376953125e-05, -1.33514404296875e-05, -0.00038909912109375, -0.0001735687255859375, -0.0005340576171875, 0.0, -5.91278076171875e-05, 0.0, -0.0001678466796875, -1.9073486328125e-06, -3.814697265625e-05, -1.52587890625e-05, -0.0004895925521850586, -7.62939453125e-06, -9.34600830078125e-05, 0.0, -0.0007401704788208008, -6.651873991359025e-05, -0.001079559326171875, -0.0001373291015625, -0.000690460205078125, 0.0, -0.00019156932830810547, -5.7220458984375e-06, -0.0002079010009765625, -1.9073486328125e-06, -4.76837158203125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.0351883247494698e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Shot", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.749363345554684, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(2, self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 2}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -0.06885051727294922, -0.004324913024902344, -2.288818359375e-05, 0.0, -5.91278076171875e-05, 0.0, -0.016727447509765625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.565868616104126, 0.0, -0.041748046875, -0.2095041275024414, -1.9073486328125e-06, -0.005178356543183327, 0.0, -0.0007114410400390625, -1.9073486328125e-06, -0.005030035972595215, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.938794560259794, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.append(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "append", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -0.06885051727294922, -0.004324913024902344, -2.288818359375e-05, 0.0, -5.91278076171875e-05, 0.0, -0.016727447509765625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -1.999030351638794, 0.0, -0.0019588470458984375, -0.00011444091796875, -1.52587890625e-05, -0.0163605697453022, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "append", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.35657054883859, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -0.06885051727294922, -0.004324913024902344, -2.288818359375e-05, 0.0, -5.91278076171875e-05, 0.0, -0.016727447509765625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.565868616104126, 0.0, -0.041748046875, -1.7863121032714844, -0.0001583099365234375, -0.026872634887695312, -0.0001468658447265625, -0.0002574920654296875, -1.9073486328125e-06, -0.0023088455200195312, 0.0, -0.004251003265380859, 0.0, -7.62939453125e-06, -4.76837158203125e-05, -1.71661376953125e-05, -0.0011890418827533722, 0.0, -0.005341529846191406, -1.33514404296875e-05, -0.0006941556930541992, -1.9073486328125e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.856740553858344, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -0.06885051727294922, -0.004324913024902344, -2.288818359375e-05, 0.0, -5.91278076171875e-05, 0.0, -0.016727447509765625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -2.9212987422943115, 0.0, -0.00063323974609375, -0.009753227233886719, -9.5367431640625e-06, -0.003728808369487524, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.182270311279808, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "damage", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -0.06885051727294922, -0.004324913024902344, -2.288818359375e-05, 0.0, -5.91278076171875e-05, 0.0, -0.016727447509765625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -3.151505708694458, -3.814697265625e-06, -0.10741329193115234, -1.33514404296875e-05, -4.00543212890625e-05, -0.00197709072381258, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.288096407516605, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcane Shot"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -0.027528762817382812, -0.0004405975341796875, -2.47955322265625e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.33514404296875e-05, -1.5497195136049413e-06, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -0.000438690185546875, -1.33514404296875e-05, -1.9073486328125e-06, -1.680836794548668e-05, -4.971005182596855e-05, -0.0001074075698852539, -5.7220458984375e-06, -4.9591064453125e-05, -1.71661376953125e-05, -8.701463229954243e-06, -1.33514404296875e-05, -2.288818359375e-05, 0.0, -7.62939453125e-05, 0.0, -9.34600830078125e-05, -4.768370445162873e-07, -0.0005915164947509766, 0.0, -1.9073486328125e-06, 0.0, -4.57763671875e-05, -4.9591064453125e-05, -7.43865966796875e-05, 0.0, -7.244424819946289, -3.814697265625e-06, -0.000461578369140625, -0.000946044921875, -0.000156402587890625, -0.004613995552062988, 0.0, -0.000118255615234375, 0.0, -0.00012969970703125, 0.0, -5.53131103515625e-05, -1.1444091796875e-05, -0.0005633831024169922, -9.5367431640625e-06, -8.58306884765625e-05, 0.0, -0.0007952451705932617, -5.257127486402169e-05, -0.0009555816650390625, -0.0001430511474609375, -0.0006427764892578125, 0.0, -0.0002676248550415039, -3.814697265625e-06, -0.0001983642578125, -1.9073486328125e-06, -3.24249267578125e-05, -1.1444091796875e-05, -1.9073486328125e-06, -9.875628165900707e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Arcane", " ", "Shot", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.583355011336607, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Shot", "hole2": "target_func", "_type": "Template7", "hole1": "COMMON", "hole4": "find_minion_spell_target", "hole3": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -7.021109580993652, -0.0004482269287109375, -2.145764938177308e-06, -0.00028394017135724425, -5.1736802561208606e-05, 0.0, -0.004974484443664551, -1.9073486328125e-06, -0.0004025697708129883, 0.0, -0.0001468658447265625, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.0003319978713989258, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.5479844808578491, -2.0742414562846534e-05, -0.005944252014160156, -0.00019073486328125, -0.0002918243408203125, 0.0, -7.069110870361328e-05, -1.1444091796875e-05, -0.0002307891845703125, 0.0, -4.76837158203125e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.00021072104573249817, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Arcane", " ", "Shot", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.750316041982387, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -0.06885051727294922, -0.004324913024902344, -2.288818359375e-05, 0.0, -5.91278076171875e-05, 0.0, -0.016727447509765625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.565868616104126, 0.0, -3.243692398071289, -8.20159912109375e-05, -2.288818359375e-05, -0.019335031509399414, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.955153133249489, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -0.06885051727294922, -0.004324913024902344, -2.288818359375e-05, 0.0, -5.91278076171875e-05, 0.0, -0.016727447509765625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -3.934887170791626, -1.1920928244535389e-07, -0.003597259521484375, -3.24249267578125e-05, -6.866455078125e-05, -0.09525240212678909, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.957326309182918, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('ArcaneShot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(2, self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "ArcaneShot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 2}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -3.1018099784851074, -0.00039243686478585005, -0.24073874950408936, -5.7220458984375e-06, -0.00421142578125, 0.0, -0.08383655548095703, -0.0023193359375, -2.86102294921875e-05, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -0.01058197021484375, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -0.5924360752105713, 0.0, -0.030231475830078125, -0.19516563415527344, -1.9073486328125e-06, -0.0044717248529195786, 0.0, -0.0005092620849609375, -1.9073486328125e-06, -0.005115866661071777, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -8.039399396780937, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON, False, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Arcane Shot", "hole2": "target_func", "_type": "Template7", "hole1": "COMMON", "hole4": "find_spell_target", "hole3": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -7.021109580993652, -0.0004482269287109375, -2.145764938177308e-06, -0.00028394017135724425, -5.1736802561208606e-05, 0.0, -0.004974484443664551, -1.9073486328125e-06, -0.0004025697708129883, 0.0, -0.0001468658447265625, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.0003319978713989258, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.9942859411239624, -2.0265579223632812e-06, -0.015680313110351562, -0.0001697540283203125, -0.0001697540283203125, 0.0, -3.2782554626464844e-05, -1.52587890625e-05, -0.0002613067626953125, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000396279850974679, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Arcane", " ", "Shot", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.166388269041363, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -0.06885051727294922, -0.004324913024902344, -2.288818359375e-05, 0.0, -5.91278076171875e-05, 0.0, -0.016727447509765625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -4.227015495300293, -5.7220440794480965e-06, -8.392333984375e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.017950870096683502, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -9.908266855864404, "inferred_code": "class ArcaneShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Arcane Shot', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Arcane Shot", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ArcaneShot"}], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -3.0517578125e-05, -3.814697265625e-06, -5.602820692729438e-06, -1.811971014831215e-05, -2.5987286790041253e-05, -7.2479248046875e-05, 0.0, -3.814697265625e-06, -5.0187110900878906e-05, -0.00010132789611816406, -4.601478576660156e-05, -5.340576171875e-05, -0.0030345916748046875, 0.0, -3.707408905029297e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -7.82012939453125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -3.6521682739257812, -0.013592720031738281, -0.01593942567706108, -0.08349759131669998, -1.8596634618006647e-05, 0.0, -0.05957305431365967, -7.62939453125e-06, -0.002826690673828125, 0.0, -3.0801944732666016, -9.5367431640625e-06, -0.002227783203125, -1.9073486328125e-06, -1.9073486328125e-05, -1.71661376953125e-05, -7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -9.655952453613281e-06, -2.3841855067985307e-07, -0.014238357543945312, -2.09808349609375e-05, -1.71661376953125e-05, -0.0002994537353515625, -2.09808349609375e-05, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -9.72747802734375e-05, -6.67572021484375e-05, 0.0, -2.6702880859375e-05, -1.71661376953125e-05, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.000152587890625, -1.1444091796875e-05, -2.09808349609375e-05, -2.9206275939941406e-05, -0.000560760498046875, -4.76837158203125e-05, -0.00074005126953125, -5.7220458984375e-06, -0.0006688833236694336, 0.0, -0.31201839447021484, 0.0, -0.4327268600463867, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.0017625093460083008, -2.0265579223632812e-06, -0.0027294158935546875, -2.09808349609375e-05, -0.0068170977756381035, -3.62396240234375e-05, -0.0005130767822265625, -0.00116729736328125, -1.9073486328125e-06, -0.00020599365234375, -2.6702880859375e-05, -0.00017547607421875, 0.0, -0.000850677490234375, 0.0, -0.00013458728790283203, -3.814697265625e-06, -1.4300851821899414, -1.1920928244535389e-07, -5.7220458984375e-06, -0.3615903854370117, -6.866455078125e-05, -0.426378071308136, -2.288818359375e-05], "choice_history": [80, 159, 295, 88, 138, "Arcane", "Shot", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Arcane", " ", "Shot", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "add_buff", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -21.995956420898438, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-2.09808349609375e-05, -3.814697265625e-06, -21.99593162536621], "choice_history": [80, 159, 294]}]}
{"index": 7, "beams": [{"score": -0.08601535690104356, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -0.0004482269287109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0002002716064453125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.528594970703125e-05, 0.0, -0.00107574462890625, -0.00823974609375, -8.20159912109375e-05, -3.0517578125e-05, -0.05599403381347656, -0.00030517578125, 0.0, -0.0015114545822143555, -4.76837158203125e-05, -2.09808349609375e-05, -7.05718994140625e-05, -1.9073486328125e-06, -0.00030779800727032125, -2.5868412194540724e-05, -3.0517578125e-05, -3.814697265625e-06, -6.318091891444055e-06, -1.7881377516459906e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -4.078599301009092, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Heal(2), HeroSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"args": [{"hole0": "CharacterAttack", "_type": "Template69", "hole1": "IsHero"}, {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -0.0004482269287109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0002002716064453125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.528594970703125e-05, 0.0, -0.00107574462890625, -0.00823974609375, -8.20159912109375e-05, -3.0517578125e-05, -2.9189367294311523, -0.0002574920654296875, 0.0, -0.0019359588623046875, -1.9073486328125e-06, -0.000133514404296875, -1.9073486328125e-06, -9.5367431640625e-06, -0.00042629241943359375, -2.861022494471399e-06, -1.52587890625e-05, -3.814697265625e-06, -4.529952093434986e-06, -5.960462772236497e-07, -0.0023593902587890625, -0.0016803741455078125, -0.000591278076171875, -0.07921814918518066, 0.0, -0.0047016143798828125, -0.000362396240234375, -0.012622833251953125, -0.04931354522705078, -2.86102294921875e-05, -1.33514404296875e-05, -1.71661376953125e-05, -0.0011935234069824219, -1.537799835205078e-05, -1.71661376953125e-05, -0.0026264190673828125, -0.000164031982421875, -0.006617069244384766, -0.0018239018972963095, -1.52587890625e-05, -0.0011674165725708008, -0.002091525588184595, -4.398822784423828e-05, -0.000156402587890625, -0.0005016326904296875, -3.814697265625e-06, 0.0, -0.010736465454101562, -0.07963085174560547, -2.47955322265625e-05, -0.0003032684326171875, -0.007769584655761719, -7.82012939453125e-05, -0.0003681182861328125, -3.814697265625e-06, -0.46139729022979736, -0.0005146265029907227, -2.09808349609375e-05, -7.2479248046875e-05, 0.0, -0.005084112286567688, 0.0, -0.39478397369384766, -0.0001316070556640625, -0.0008853673934936523, -2.9683074899367057e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>", 290, 79, 271, "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 61, 250, "Character", "Attack", "<EOS>", "Is", "Hero", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "2", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>"]}, {"score": -4.571052698905049, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, True)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcanite Reaper"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -4.540477752685547, -7.62939453125e-06, -4.625317160389386e-05, -1.9073486328125e-06, -1.9073486328125e-06, -4.38690185546875e-05, -4.38690185546875e-05, -3.4332275390625e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -1.33514404296875e-05, -5.7220458984375e-06, -0.00156402587890625, -3.814697265625e-05, 0.0, -4.00543212890625e-05, 0.0, -4.29153169534402e-06, 0.0, -2.288818359375e-05, 0.0, -0.00292205810546875, -5.7220458984375e-06, -9.5367431640625e-05, -2.062299427052494e-05, -8.344645902980119e-05, -2.6344954676460475e-05, -8.58306884765625e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.001590060070157051, -9.655952453613281e-06, -2.288818359375e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -7.081031799316406e-05, -2.3841855067985307e-07, -0.00234222412109375, 0.0, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -3.266334533691406e-05, 0.0, -0.000690460205078125, 0.0, -0.000133514404296875, -0.0004749298095703125, -0.00016045570373535156, 0.0, -0.00139617919921875, -6.4849853515625e-05, -0.0003643035888671875, -2.09808349609375e-05, -7.62939453125e-06, -0.0001506805419921875, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.011636734008789062, -0.00110626220703125, -0.000156402587890625, -1.33514404296875e-05, -0.00019073486328125, -6.103515625e-05, 0.0, -0.0024765729904174805, -1.1444091796875e-05, -2.288818359375e-05, -8.0108642578125e-05, -1.9073486328125e-06, -0.0003253213071729988, -1.943111237778794e-05, -2.47955322265625e-05, -3.814697265625e-06, -6.556510470545618e-06, -1.6689286894688848e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Arcanite", " ", "Reaper", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -5.138804590153256, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, True)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Arcanite Reaper"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -0.0004482269287109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0002002716064453125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.528594970703125e-05, 0.0, -0.00107574462890625, -4.811968803405762, -2.86102294921875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.000339508056640625, 0.0, -5.6504188250983134e-05, 0.0, -0.00046539306640625, 0.0, -0.2584199905395508, -1.9073486328125e-06, -2.47955322265625e-05, -0.00014232576359063387, -9.346007573185489e-05, -4.339139923104085e-05, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.042777929455041885, -2.0265579223632812e-06, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -7.641315460205078e-05, -3.576278118089249e-07, -0.00262451171875, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -4.017353057861328e-05, 0.0, -0.0011692047119140625, 0.0, -0.0001239776611328125, -0.00074005126953125, -0.00016796588897705078, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Arcanite", " ", "Reaper", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>"]}, {"score": -5.184727356649603, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Heal(2), 2))])\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"args": [{"hole0": "CharacterAttack", "_type": "Template69", "hole1": "IsHero"}, {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -0.0004482269287109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0002002716064453125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.528594970703125e-05, 0.0, -0.00107574462890625, -0.00823974609375, -8.20159912109375e-05, -3.0517578125e-05, -2.9189367294311523, -0.0002574920654296875, 0.0, -0.0019359588623046875, -1.9073486328125e-06, -0.000133514404296875, -1.9073486328125e-06, -9.5367431640625e-06, -0.00042629241943359375, -2.861022494471399e-06, -1.52587890625e-05, -3.814697265625e-06, -4.529952093434986e-06, -5.960462772236497e-07, -0.0023593902587890625, -0.0016803741455078125, -0.000591278076171875, -0.07921814918518066, 0.0, -0.0047016143798828125, -0.000362396240234375, -0.012622833251953125, -0.04931354522705078, -2.86102294921875e-05, -1.33514404296875e-05, -1.71661376953125e-05, -0.0011935234069824219, -1.537799835205078e-05, -1.71661376953125e-05, -0.0026264190673828125, -0.000164031982421875, -0.006617069244384766, -0.0018239018972963095, -1.52587890625e-05, -0.0011674165725708008, -0.002091525588184595, -4.398822784423828e-05, -0.000156402587890625, -0.0005016326904296875, -3.814697265625e-06, 0.0, -0.010736465454101562, -0.07963085174560547, -2.47955322265625e-05, -0.0003032684326171875, -0.007769584655761719, -7.82012939453125e-05, -0.0003681182861328125, -3.814697265625e-06, -0.46139729022979736, -0.0005146265029907227, -2.09808349609375e-05, -7.2479248046875e-05, 0.0, -0.005084112286567688, 0.0, -1.5007295608520508, -9.5367431640625e-06, -0.0012195892632007599, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>", 290, 79, 271, "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 61, 250, "Character", "Attack", "<EOS>", "Is", "Hero", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "2", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -6.2693417208470805, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "keywords": [{"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -0.0004482269287109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0002002716064453125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.528594970703125e-05, 0.0, -0.00107574462890625, -0.00823974609375, -8.20159912109375e-05, -3.0517578125e-05, -2.9189367294311523, -0.0002574920654296875, 0.0, -0.0019359588623046875, -1.9073486328125e-06, -0.000133514404296875, -1.9073486328125e-06, -9.5367431640625e-06, -0.00042629241943359375, -2.861022494471399e-06, -1.52587890625e-05, -3.814697265625e-06, -4.529952093434986e-06, -5.960462772236497e-07, -0.0023593902587890625, -0.0016803741455078125, -0.000591278076171875, -3.3146841526031494, 0.0, -0.0003662109375, -0.0001163482666015625, -0.00012421607971191406, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>", 290, 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.589011027125309, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2, effects=[2])\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"_type": "Num", "n": 2}]}}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -0.0004482269287109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0002002716064453125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.528594970703125e-05, 0.0, -0.00107574462890625, -0.00823974609375, -8.20159912109375e-05, -3.0517578125e-05, -2.9189367294311523, -0.0002574920654296875, 0.0, -0.0019359588623046875, -1.9073486328125e-06, -0.000133514404296875, -1.9073486328125e-06, -9.5367431640625e-06, -0.00042629241943359375, -2.861022494471399e-06, -1.52587890625e-05, -3.814697265625e-06, -4.529952093434986e-06, -5.960462772236497e-07, -0.0023593902587890625, -0.0016803741455078125, -0.000591278076171875, -0.07921814918518066, 0.0, -0.0047016143798828125, -0.000362396240234375, -0.012622833251953125, -3.215129852294922, -7.62939453125e-06, -0.32291966676712036, 0.0], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>", 290, 79, 271, "effects", "<EOS>", 17, 155, 282, 47, 165, "2", "<EOS>"]}, {"score": -7.773542625556502, "inferred_code": "class ArcaniteReaper(MinionCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -7.691510200500488, -3.814697265625e-06, -2.09808349609375e-05, -3.24249267578125e-05, -0.0063323974609375, -7.2479248046875e-05, -4.291525328881107e-06, -2.205371856689453e-05, -5.9604644775390625e-06, -3.62396240234375e-05, -0.0001952648744918406, 0.0, -0.00014495849609375, -1.9073486328125e-06, -0.00019073486328125, -3.814697265625e-06, -0.0004520416259765625, -1.33514404296875e-05, -1.1444091796875e-05, -0.0001888275146484375, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.337860107421875e-05, 0.0, -0.0011081695556640625, -0.00937652587890625, -8.0108642578125e-05, -3.0517578125e-05, -0.060924530029296875, -0.00030517578125, -1.9073486328125e-06, -0.0015113353729248047, -4.76837158203125e-05, -1.9073486328125e-05, -6.67572021484375e-05, -1.9073486328125e-06, -0.0003024335892405361, -2.5749202904989943e-05, -3.0517578125e-05, -3.814697265625e-06, -6.318091891444055e-06, -1.7881377516459906e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -7.87331421971362, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template13", "hole1": "WARRIOR", "hole2": "COMMON"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -6.907434463500977, -0.12690067291259766, -0.00022098960471339524, -1.800060272216797e-05, -1.0132789611816406e-05, -0.0011348724365234375, -0.7699359655380249, -5.7220458984375e-06, -0.0007152557373046875, -1.9073486328125e-06, -0.009390830993652344, -1.9073486328125e-05, -0.0005359649658203125, 0.0, -1.9073486328125e-06, -0.000911712646484375, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -0.0012149810791015625, -0.0020885467529296875, -0.000240325927734375, -2.288818359375e-05, -0.049076080322265625, -0.0001621246337890625, -1.9073486328125e-06, -0.0011078119277954102, -5.7220458984375e-05, -1.9073486328125e-05, -7.62939453125e-05, -1.9073486328125e-06, -0.00022542416991200298, -2.741813295870088e-05, -3.0517578125e-05, -5.7220458984375e-06, -6.556510470545618e-06, -2.0265558760002023e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 100, 183, "Arcanite", " ", "Reaper", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -7.892344993246979, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template17", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -7.870330810546875, -0.00040435791015625, -3.766942609217949e-05, -1.728534698486328e-05, -3.933904736186378e-06, -5.7220458984375e-06, -0.0003523231716826558, 0.0, -0.0014019012451171875, 0.0, -0.0017032623291015625, -4.00543212890625e-05, -0.000392913818359375, -1.9073486328125e-06, -9.5367431640625e-05, -0.0002918243408203125, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -4.00543212890625e-05, 0.0, -0.000438690185546875, -0.0062160491943359375, -0.0002593994140625, -1.9073486328125e-05, -0.007015228271484375, -0.0001125335693359375, 0.0, -0.0010418891906738281, -6.4849853515625e-05, -1.9073486328125e-05, -5.91278076171875e-05, -1.9073486328125e-06, -0.00022590091975871474, -3.123283022432588e-05, -2.86102294921875e-05, -3.814697265625e-06, -4.8875799620873295e-06, -2.0265558760002023e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 103, 186, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -7.89882351228357, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        super().__init__(Weapon, Weapon)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "Weapon"}, {"_type": "Name", "id": "Weapon"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -0.0004482269287109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0002002716064453125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.528594970703125e-05, 0.0, -0.00107574462890625, -4.811968803405762, -2.86102294921875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.000339508056640625, 0.0, -5.6504188250983134e-05, 0.0, -0.00046539306640625, 0.0, -1.495497703552246, -0.21857643127441406, -1.33514404296875e-05, -1.2324185371398926, -0.0017085075378417969, -0.030389785766601562, -7.62939453125e-06, -0.08669281005859375, -0.0012961626052856445], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 283, 45, 160, "Weapon", "<EOS>", 45, 160, "Weapon", "<EOS>"]}, {"score": -8.035719999631965, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return minion(5, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "minion"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -0.0004482269287109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0002002716064453125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.528594970703125e-05, 0.0, -0.00107574462890625, -0.00823974609375, -8.20159912109375e-05, -3.0517578125e-05, -0.05599403381347656, -0.00030517578125, 0.0, -7.951214790344238, -1.9073486328125e-06, -0.000164031982421875, -4.9591064453125e-05, -1.9073486328125e-06, -0.00021147256484255195, -1.430511474609375e-05, -6.4849853515625e-05, -3.814697265625e-06, -5.483625500346534e-06, -1.1920922133867862e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "minion", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -8.092100816936409, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def create_weapon(self, player):\n        return Weapon(5, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -6.907434463500977, -0.12690067291259766, -0.00022098960471339524, -1.800060272216797e-05, -1.0132789611816406e-05, -0.0011348724365234375, -0.9738038778305054, -3.814697265625e-06, -0.002933502197265625, 0.0, -0.007936477661132812, -0.0001430511474609375, -0.0003070831298828125, 0.0, -1.9073486328125e-06, -0.0014858245849609375, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -0.00103759765625, -0.00240325927734375, -0.0002689361572265625, -2.47955322265625e-05, -0.0625762939453125, -0.0001735687255859375, -1.9073486328125e-06, -0.0011154413223266602, -6.866455078125e-05, -1.71661376953125e-05, -6.67572021484375e-05, -1.9073486328125e-06, -0.00022983488452155143, -2.72989236691501e-05, -3.0517578125e-05, -3.814697265625e-06, -4.529952548182337e-06, -2.0265558760002023e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 100, 183, "Arcanite", " ", "Reaper", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -8.13120557192451, "inferred_code": "class ArcaniteReaper(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Arcanite Reaper', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Weapon(5, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Arcanite Reaper", "_type": "Template15", "hole1": 5, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 5}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "ArcaniteReaper"}], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -1.9073486328125e-05, -2.09808349609375e-05, -4.1961669921875e-05, -3.2066785934148356e-05, -0.00017987063620239496, -3.814689989667386e-06, -1.71661376953125e-05, 0.0, 0.0, -0.0008056163787841797, -8.58306884765625e-05, -0.00032806396484375, -4.57763671875e-05, -0.015226364135742188, -3.24249267578125e-05, -3.2186455882765586e-06, -2.396106719970703e-05, -5.841255187988281e-06, -3.4332275390625e-05, -0.00021913700038567185, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0001850128173828125, -1.9073486328125e-06, -7.999403953552246, 0.0, -7.62939453125e-06, -0.0001163482666015625, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00023174285888671875, 0.0, -0.001194000244140625, -0.0070552825927734375, -7.2479248046875e-05, -4.00543212890625e-05, -0.10314559936523438, -0.0003719329833984375, 0.0, -0.0014477968215942383, -5.14984130859375e-05, -2.09808349609375e-05, -7.62939453125e-05, -1.9073486328125e-06, -0.0003451104275882244, -3.1590458092978224e-05, -3.0517578125e-05, -3.814697265625e-06, -6.318091891444055e-06, -1.7881377516459906e-06], "choice_history": [80, 159, 295, 88, 138, "Arcanite", "Reaper", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "Arcanite", " ", "Reaper", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "5", "<EOS>", 47, 165, "2", "<EOS>"]}, {"score": -22.453582763671875, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-4.9591064453125e-05, -3.62396240234375e-05, -22.4534969329834], "choice_history": [80, 159, 294]}]}
{"index": 8, "beams": [{"score": -0.08290964603793327, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Assassinate"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -0.007404327392578125, -0.000194549560546875, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -4.00543212890625e-05, -2.1457672119140625e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001087188720703125, -9.5367431640625e-06, -1.9073486328125e-06, -4.0531076592742465e-06, -5.340576171875e-05, -1.52587890625e-05, -3.0517578125e-05, -0.0003334919747430831, -2.491474151611328e-05, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, 0.0, -3.635883331298828e-05, 0.0, -0.0031528472900390625, 0.0, -2.288818359375e-05, -7.62939453125e-06, -3.24249267578125e-05, -2.86102294921875e-05, -0.000209808349609375, 0.0, -0.0007419586181640625, -9.5367431640625e-06, -1.52587890625e-05, -0.0001354217529296875, -2.86102294921875e-05, -0.0034847259521484375, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.0001811981201171875, -5.7220458984375e-06, -3.62396240234375e-05, -7.43865966796875e-05, -0.0011028051376342773, 0.0, -2.288818359375e-05, 0.0, -0.04150211811065674, -1.52587890625e-05, -0.0004138946533203125, -0.006825447082519531, -9.5367431640625e-06, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -0.00011444091796875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.0067141056060791016, -1.71661376953125e-05, -0.00018310546875, -0.0016326904296875, 0.0, -0.00044536590576171875, -4.38690185546875e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Assassinate", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -3.4994253540075917, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Assassinate"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -0.007404327392578125, -0.000194549560546875, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -4.00543212890625e-05, -2.1457672119140625e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001087188720703125, -9.5367431640625e-06, -1.9073486328125e-06, -4.0531076592742465e-06, -5.340576171875e-05, -1.52587890625e-05, -3.0517578125e-05, -0.0003334919747430831, -2.491474151611328e-05, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, 0.0, -3.635883331298828e-05, 0.0, -0.0031528472900390625, 0.0, -2.288818359375e-05, -7.62939453125e-06, -3.24249267578125e-05, -2.86102294921875e-05, -0.000209808349609375, 0.0, -0.0007419586181640625, -9.5367431640625e-06, -1.52587890625e-05, -0.0001354217529296875, -2.86102294921875e-05, -0.0034847259521484375, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.0001811981201171875, -5.7220458984375e-06, -3.62396240234375e-05, -7.43865966796875e-05, -0.0011028051376342773, 0.0, -2.288818359375e-05, 0.0, -3.448061943054199, -1.1920928244535389e-07, -0.0008220672607421875, -0.013522148132324219, -1.1444091796875e-05, 0.0, -0.000125885009765625, -3.814697265625e-06, -0.0001583099365234375, -1.33514404296875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.007718682289123535, -1.52587890625e-05, -0.0001277923583984375, -0.00348663330078125, 0.0, -0.00040149688720703125, -4.00543212890625e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Assassinate", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.455407924232077, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Assassinate", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -5.029323577880859, -0.003307342529296875, -0.00032026408007368445, -1.1563301086425781e-05, -0.34155452251434326, -5.7220458984375e-06, -0.041014671325683594, 0.0, -0.0037784576416015625, -0.0009212493896484375, -7.62939453125e-06, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -0.000110626220703125, -1.9073486328125e-06, -4.38690185546875e-05, -7.62939453125e-06, -0.020679593086242676, -2.09808349609375e-05, -0.00075531005859375, -0.0060787200927734375, -1.9073486328125e-06, -0.00027179718017578125, -2.86102294921875e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Assassinate", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.001655163768646, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Assassinate"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -0.007404327392578125, -0.000194549560546875, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -4.00543212890625e-05, -2.1457672119140625e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001087188720703125, -9.5367431640625e-06, -1.9073486328125e-06, -4.0531076592742465e-06, -5.340576171875e-05, -1.52587890625e-05, -3.0517578125e-05, -0.0003334919747430831, -2.491474151611328e-05, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, 0.0, -3.635883331298828e-05, 0.0, -0.0031528472900390625, 0.0, -2.288818359375e-05, -7.62939453125e-06, -3.24249267578125e-05, -2.86102294921875e-05, -0.000209808349609375, 0.0, -0.0007419586181640625, -9.5367431640625e-06, -1.52587890625e-05, -0.0001354217529296875, -2.86102294921875e-05, -0.0034847259521484375, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.0001811981201171875, -5.7220458984375e-06, -3.62396240234375e-05, -7.43865966796875e-05, -0.0011028051376342773, 0.0, -2.288818359375e-05, 0.0, -0.04150211811065674, -1.52587890625e-05, -0.0004138946533203125, -5.566638946533203, -0.001605987548828125, 0.0, -5.7220458984375e-05, -1.9073486328125e-06, -0.0001373291015625, -7.62939453125e-06, -7.62939453125e-06, -5.7220458984375e-06, -0.36635661125183105, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Assassinate", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 224, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>"]}, {"score": -6.357019298181058, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Assassinate", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "ROGUE", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 5, "hole4": "target_func", "hole3": "FREE"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -5.388237953186035, -0.0023822784423828125, -0.05086232349276543, -6.115436553955078e-05, -0.0002090764610329643, -2.2649765014648438e-06, -0.014580726623535156, -1.9073486328125e-06, -0.018245697021484375, 0.0, -0.07472038269042969, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0004596710205078125, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.05905497074127197, -1.9073486328125e-06, -0.006901860237121582, 0.0, -0.17289257049560547, -0.00238800048828125, -4.1961669921875e-05, -0.0027055740356445312, -5.7220458984375e-06, -0.005544900894165039, -0.0005363225936889648, -0.14705848693847656, -2.288818359375e-05, -0.03314208984375, -0.0033445358276367188, -0.0003070831298828125, -0.00017547607421875, -0.001506805419921875, -4.9591064453125e-05, -0.004802703857421875, -3.814697265625e-06, -0.0016150474548339844, -7.62939453125e-05, -0.07741451263427734, -0.00010502338409423828, -4.38690185546875e-05, -0.13867759704589844, -2.86102294921875e-05, -0.0006437301635742188, -0.000133514404296875, -3.814697265625e-06, -1.9073486328125e-06, -0.00030517578125, -5.7220458984375e-06, -0.006920814514160156, -3.814697265625e-06, -0.06614208221435547, -0.04156684875488281, -0.002712249755859375, -0.0002422332763671875, -0.000446319580078125, -0.000537872314453125, -4.38690185546875e-05, -1.33514404296875e-05, -0.0031996965408325195, -7.62939453125e-06, -0.00679779052734375, 0.0, -0.0006103515625, -0.006812095642089844, -0.0001621246337890625, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, -0.0002460479736328125, -0.00026702880859375, -1.71661376953125e-05, -3.62396240234375e-05, -0.008578658103942871, -4.9591064453125e-05, -0.0001354217529296875, -0.0013141632080078125, 0.0, -0.0002689361572265625, -5.53131103515625e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Assassinate", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.497114128646437, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Assassinate", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -5.029323577880859, -0.003307342529296875, -0.00032026408007368445, -1.1563301086425781e-05, -1.3870238065719604, -1.1920928244535389e-07, -0.041199684143066406, 0.0, -0.005503654479980469, -0.0013103485107421875, -5.7220458984375e-06, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -0.000118255615234375, -1.9073486328125e-06, -3.0517578125e-05, -5.7220458984375e-06, -0.017655491828918457, -2.86102294921875e-05, -0.000446319580078125, -0.0031909942626953125, 0.0, -0.00045871734619140625, -3.0517578125e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Assassinate", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.503649535182831, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Assassinate"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -0.007404327392578125, -0.000194549560546875, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -4.00543212890625e-05, -2.1457672119140625e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001087188720703125, -9.5367431640625e-06, -1.9073486328125e-06, -4.0531076592742465e-06, -5.340576171875e-05, -1.52587890625e-05, -3.0517578125e-05, -0.0003334919747430831, -2.491474151611328e-05, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, 0.0, -3.635883331298828e-05, 0.0, -6.421697616577148, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -0.0001239776611328125, -5.14984130859375e-05, -0.00049591064453125, 0.0, -0.0010166168212890625, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-05, -2.6702880859375e-05, -0.003734588623046875, 0.0, -0.00011444091796875, -3.814697265625e-06, -0.000202178955078125, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-05, -0.0009826421737670898, 0.0, -2.09808349609375e-05, 0.0, -0.04284846782684326, -1.71661376953125e-05, -0.000408172607421875, -0.006873130798339844, -9.5367431640625e-06, 0.0, -6.103515625e-05, -1.9073486328125e-06, -0.00011444091796875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.006695985794067383, -1.71661376953125e-05, -0.0001888275146484375, -0.0016384124755859375, 0.0, -0.0004482269287109375, -4.38690185546875e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Assassinate", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.641698219407317, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(5), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Assassinate"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 5}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -0.007404327392578125, -0.000194549560546875, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -4.00543212890625e-05, -2.1457672119140625e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001087188720703125, -9.5367431640625e-06, -1.9073486328125e-06, -4.0531076592742465e-06, -5.340576171875e-05, -1.52587890625e-05, -3.0517578125e-05, -0.0003334919747430831, -2.491474151611328e-05, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, 0.0, -3.635883331298828e-05, 0.0, -0.0031528472900390625, 0.0, -2.288818359375e-05, -7.62939453125e-06, -3.24249267578125e-05, -2.86102294921875e-05, -0.000209808349609375, 0.0, -0.0007419586181640625, -9.5367431640625e-06, -1.52587890625e-05, -0.0001354217529296875, -2.86102294921875e-05, -0.0034847259521484375, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.0001811981201171875, -5.7220458984375e-06, -3.62396240234375e-05, -7.43865966796875e-05, -0.0011028051376342773, 0.0, -2.288818359375e-05, 0.0, -0.04150211811065674, -1.52587890625e-05, -0.0004138946533203125, -0.006825447082519531, -9.5367431640625e-06, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -0.00011444091796875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.995880126953125, 0.0, -0.04390525817871094, -0.000179290771484375, -0.3466815948486328, -0.055362701416015625, -7.62939453125e-06, -0.0002460479736328125, 0.0, -0.0004968643188476562, 0.0, -0.023633718490600586, -1.9073486328125e-06, -4.76837158203125e-05, -0.07983589172363281, -1.9073486328125e-05, -0.013853823766112328, 0.0, -0.003765106201171875, -1.1444091796875e-05, -0.0038299560546875, -6.67572021484375e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Assassinate", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "5", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.71577340603244, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Assassinate"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -0.007404327392578125, -0.000194549560546875, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -4.00543212890625e-05, -2.1457672119140625e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001087188720703125, -9.5367431640625e-06, -1.9073486328125e-06, -4.0531076592742465e-06, -5.340576171875e-05, -1.52587890625e-05, -3.0517578125e-05, -0.0003334919747430831, -2.491474151611328e-05, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, 0.0, -3.635883331298828e-05, 0.0, -0.0031528472900390625, 0.0, -2.288818359375e-05, -7.62939453125e-06, -3.24249267578125e-05, -2.86102294921875e-05, -0.000209808349609375, 0.0, -0.0007419586181640625, -9.5367431640625e-06, -1.52587890625e-05, -0.0001354217529296875, -2.86102294921875e-05, -0.0034847259521484375, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.0001811981201171875, -5.7220458984375e-06, -3.62396240234375e-05, -7.43865966796875e-05, -0.0011028051376342773, 0.0, -2.288818359375e-05, 0.0, -6.66896915435791, -9.262561798095703e-05, -0.00038909912109375, -0.010711669921875, -1.52587890625e-05, 0.0, -0.000125885009765625, -3.814697265625e-06, -0.0002079010009765625, -1.52587890625e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.0069103240966796875, -1.71661376953125e-05, -0.0001087188720703125, -0.0028591156005859375, 0.0, -0.000392913818359375, -3.4332275390625e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Assassinate", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.766141715053436, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.EnemyPlayer)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Assassinate"}, {"_type": "Num", "n": 5}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "EnemyPlayer", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -0.007404327392578125, -0.000194549560546875, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -4.00543212890625e-05, -2.1457672119140625e-06, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001087188720703125, -9.5367431640625e-06, -1.9073486328125e-06, -4.0531076592742465e-06, -5.340576171875e-05, -1.52587890625e-05, -3.0517578125e-05, -0.0003334919747430831, -2.491474151611328e-05, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, 0.0, -3.635883331298828e-05, 0.0, -0.0031528472900390625, 0.0, -2.288818359375e-05, -7.62939453125e-06, -3.24249267578125e-05, -2.86102294921875e-05, -0.000209808349609375, 0.0, -0.0007419586181640625, -9.5367431640625e-06, -1.52587890625e-05, -0.0001354217529296875, -2.86102294921875e-05, -0.0034847259521484375, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.0001811981201171875, -5.7220458984375e-06, -3.62396240234375e-05, -7.43865966796875e-05, -0.0011028051376342773, 0.0, -2.288818359375e-05, 0.0, -5.935642242431641, -0.7700645923614502, -0.019359469413757324, -0.0013875961303710938, -0.004856109619140625, -1.1444091796875e-05, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -0.000217437744140625, -5.7220458984375e-06, -2.09808349609375e-05, -3.814697265625e-06, -0.006873130798339844, -2.6702880859375e-05, -0.000152587890625, -0.00208282470703125, 0.0, -0.000446319580078125, -4.00543212890625e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Assassinate", "<EOS>", 47, 165, "5", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "Enemy", "Player", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -7.536811821565152, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=hearthbreaker.targeting\n            )\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Assassinate", "hole8": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "hole7": "filter_func", "hole2": "ROGUE", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 5, "hole4": "target_func", "hole3": "FREE"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -5.388237953186035, -0.0023822784423828125, -0.05086232349276543, -6.115436553955078e-05, -0.0002090764610329643, -2.2649765014648438e-06, -0.014580726623535156, -1.9073486328125e-06, -0.018245697021484375, 0.0, -0.07472038269042969, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0004596710205078125, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.05905497074127197, -1.9073486328125e-06, -0.006901860237121582, 0.0, -1.8777437210083008, 0.0, -0.0003833770751953125, -5.7220458984375e-06, -0.0023212432861328125, -1.9073486328125e-06, -6.103515625e-05, 0.0, -0.001262664794921875, -0.026119232177734375, -5.7220458984375e-06, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.000164031982421875, -1.52587890625e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.008376002311706543, -2.47955322265625e-05, -0.0001049041748046875, -0.003376007080078125, 0.0, -0.00047969818115234375, -4.38690185546875e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Assassinate", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -8.455762988828155, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, FREE=hearthbreaker.targeting)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Assassinate", "hole2": "ROGUE", "_type": "Template12", "hole1": 5, "hole4": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "hole3": "FREE"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -8.000982284545898, -0.0029382705688476562, -0.00046826363541185856, 0.0, -5.471556869451888e-05, 0.0, -0.0018768310546875, -1.9073486328125e-06, -0.0412750244140625, 0.0, -0.0039081573486328125, -1.9073486328125e-06, -0.36456775665283203, -9.5367431640625e-06, -0.0055675506591796875, -1.9073486328125e-06, -0.0001068115234375, 0.0, -0.001453399658203125, -0.017114639282226562, -3.814697265625e-06, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.00016021728515625, -1.1444091796875e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.008943676948547363, -1.52587890625e-05, -5.91278076171875e-05, -0.00531768798828125, 0.0, -0.0003643035888671875, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 99, 182, "Assassinate", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -8.853079105766028, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 1, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Assassinate", "hole2": "target_func", "_type": "Template7", "hole1": "COMMON", "hole4": "find_friendly_minion_spell_target", "hole3": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -7.939947605133057, -0.19620609283447266, -0.0010668307077139616, -1.9073486328125e-06, -0.14731824398040771, 0.0, -0.010148167610168457, 0.0, -0.00023651123046875, 0.0, -0.0004215240478515625, -1.9073486328125e-06, -0.0004253387451171875, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.539283275604248, 0.0, -0.00018310546875, -0.0022134780883789062, -1.9073486328125e-06, 0.0, -5.7220458984375e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.011626720428466797, -2.09808349609375e-05, -7.43865966796875e-05, -0.002742767333984375, 0.0, -0.00047588348388671875, -5.340576171875e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Assassinate", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -8.951190776404928, "inferred_code": "class Assassinate(SpellCard):\n\n    def __init__(self):\n        super().__init__('Assassinate', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.taunt, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Assassinate", "_type": "Template25", "hole1": "PALADIN", "hole2": "taunt"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Assassinate"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -3.0517578125e-05, -7.62939453125e-06, -5.638440416078083e-05, -5.483625955093885e-06, -5.7220458984375e-05, 0.0, -1.9073486328125e-06, -7.87973403930664e-05, -3.814697265625e-06, -1.537799835205078e-05, -0.0001583099365234375, -0.0062713623046875, 0.0, -0.00011467933654785156, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00012969970703125, -7.62939453125e-06, -1.71661376953125e-05, -7.43865966796875e-05, -3.4332275390625e-05, -5.029323577880859, -0.003307342529296875, -0.00032026408007368445, -1.1563301086425781e-05, -0.34155452251434326, -5.7220458984375e-06, -3.5478668212890625, 0.0, -0.001033782958984375, -0.0010738372802734375, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -0.0001544952392578125, -3.814697265625e-06, -3.4332275390625e-05, -5.7220458984375e-06, -0.01441967487335205, -3.62396240234375e-05, -0.000698089599609375, -0.0037479400634765625, 0.0, -0.00040435791015625, -2.288818359375e-05], "choice_history": [80, 159, 295, 88, 138, "Assassinate", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Assassinate", "<EOS>", "PALADIN", "<EOS>", "taunt", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -22.10268783569336, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -22.10268211364746], "choice_history": [80, 159, 294]}]}
{"index": 9, "beams": [{"score": -0.2835440421245039, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "Eq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "ROGUE", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 0, "hole4": "target_func", "hole3": "FREE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -0.04961204528808594, -0.000133514404296875, -4.8040190449682996e-05, -4.363059997558594e-05, -8.809177234070376e-05, 0.0, -0.024853825569152832, -1.9073486328125e-06, -0.05641460418701172, -1.9073486328125e-06, -0.015558600425720215, 0.0, -0.0002536773681640625, 0.0, -1.52587890625e-05, 0.0, -0.00023472309112548828, -1.33514404296875e-05, -8.7738037109375e-05, 0.0, -0.00840461254119873, -1.9073486328125e-06, -0.008177757263183594, 0.0, -0.0062541961669921875, -0.0006103515625, -5.340576171875e-05, -0.0008068084716796875, -3.62396240234375e-05, -0.00044000145862810314, -4.398804594529793e-05, -0.004416465759277344, -2.288818359375e-05, -0.0048694610595703125, -0.0002040863037109375, -0.000850677490234375, -0.0001811981201171875, -0.002674102783203125, -0.0001068115234375, -0.001094818115234375, -8.7738037109375e-05, -0.001427286071702838, -2.09808349609375e-05, -0.006834983825683594, -0.00011456012725830078, -0.0023899078369140625, -0.02815723419189453, -2.09808349609375e-05, -0.0036058425903320312, -0.0001220703125, -9.918212890625e-05, 0.0, -3.62396240234375e-05, 0.0, -0.002749800682067871, -1.9073486328125e-06, -0.02848529815673828, -9.1552734375e-05, -0.000789642333984375, -0.000240325927734375, -3.0517578125e-05, -4.00543212890625e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.0010797976283356547, -1.9073486328125e-06, -0.01444244384765625, 0.0, -0.002227783203125, -0.000553131103515625, -4.38690185546875e-05, 0.0, -0.00015270271978806704, -3.62396240234375e-05, -8.58306884765625e-05, -5.0187110900878906e-05, -0.0002918243408203125, -0.001422882080078125, -3.24249267578125e-05, -8.344504749402404e-06, -2.1576881408691406e-05], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 2, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -3.1950968292353537, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "Eq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "ROGUE", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 0, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -0.04961204528808594, -0.000133514404296875, -4.8040190449682996e-05, -4.363059997558594e-05, -8.809177234070376e-05, 0.0, -0.024853825569152832, -1.9073486328125e-06, -2.979424476623535, 0.0, -0.0029144287109375, 0.0, -0.000244140625, 0.0, -1.71661376953125e-05, 0.0, -0.0006371736526489258, -1.1444091796875e-05, -0.000156402587890625, 0.0, -0.008890390396118164, -1.9073486328125e-06, -0.00848388671875, 0.0, -0.00627899169921875, -0.0006389617919921875, -5.14984130859375e-05, -0.0007781982421875, -3.24249267578125e-05, -0.0004484653181862086, -4.3392006773501635e-05, -0.004315376281738281, -2.288818359375e-05, -0.004902839660644531, -0.000209808349609375, -0.0008068084716796875, -0.0001811981201171875, -0.0028543472290039062, -0.0001068115234375, -0.001102447509765625, -8.7738037109375e-05, -0.0014296704903244972, -2.288818359375e-05, -0.006808280944824219, -0.00011646747589111328, -0.0023784637451171875, -0.02816009521484375, -2.09808349609375e-05, -0.0035409927368164062, -0.0001220703125, -9.918212890625e-05, 0.0, -3.62396240234375e-05, 0.0, -0.0027478933334350586, -1.9073486328125e-06, -0.028410911560058594, -9.1552734375e-05, -0.0007648468017578125, -0.0002422332763671875, -3.0517578125e-05, -4.00543212890625e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.001076936605386436, -1.9073486328125e-06, -0.01446533203125, 0.0, -0.002227783203125, -0.0005512237548828125, -4.38690185546875e-05, 0.0, -0.0001524643157608807, -3.62396240234375e-05, -8.58306884765625e-05, -5.0187110900878906e-05, -0.0002918243408203125, -0.0014247894287109375, -3.24249267578125e-05, -8.22532456368208e-06, -2.1576881408691406e-05], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 2, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.157573798953763, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "ROGUE", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 0, "hole4": "target_func", "hole3": "FREE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -0.04961204528808594, -0.000133514404296875, -4.8040190449682996e-05, -4.363059997558594e-05, -8.809177234070376e-05, 0.0, -0.024853825569152832, -1.9073486328125e-06, -0.05641460418701172, -1.9073486328125e-06, -0.015558600425720215, 0.0, -0.0002536773681640625, 0.0, -1.52587890625e-05, 0.0, -0.00023472309112548828, -1.33514404296875e-05, -8.7738037109375e-05, 0.0, -0.00840461254119873, -1.9073486328125e-06, -0.008177757263183594, 0.0, -0.0062541961669921875, -0.0006103515625, -5.340576171875e-05, -0.0008068084716796875, -3.62396240234375e-05, -0.00044000145862810314, -4.398804594529793e-05, -0.004416465759277344, -2.288818359375e-05, -0.0048694610595703125, -0.0002040863037109375, -0.000850677490234375, -0.0001811981201171875, -0.002674102783203125, -0.0001068115234375, -0.001094818115234375, -8.7738037109375e-05, -0.001427286071702838, -2.09808349609375e-05, -0.006834983825683594, -0.00011456012725830078, -0.0023899078369140625, -3.9110355377197266, -0.0005321502685546875, -0.000194549560546875, -5.340576171875e-05, -7.82012939453125e-05, 0.0, -0.0001201629638671875, 0.0, -0.0036940574645996094, -1.9073486328125e-06, -0.02127552032470703, -8.404254913330078e-05, -0.0007724761962890625, -0.0001659393310546875, -3.0517578125e-05, -2.86102294921875e-05, -0.0001773834228515625, -1.9073486328125e-06, -0.0008326767128892243, -1.9073486328125e-06, -0.014842033386230469, 0.0, -0.00240325927734375, -0.0005397796630859375, -4.38690185546875e-05, 0.0, -0.00012874288950115442, -4.38690185546875e-05, -8.7738037109375e-05, -4.6253204345703125e-05, -0.0002727508544921875, -0.0015277862548828125, -3.24249267578125e-05, -8.106144377961755e-06, -1.9669532775878906e-05], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.481356019272781, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Backstab"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -3.253016471862793, -7.62939453125e-06, -3.015960282937158e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -2.86102294921875e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.010729789733886719, -0.000133514404296875, -2.47955322265625e-05, 0.0, -4.1961669921875e-05, 0.0, -1.5497195136049413e-06, -5.960462772236497e-07, -8.344650268554688e-06, 0.0, -0.00017547607421875, -3.0517578125e-05, -1.9073486328125e-06, -2.145764938177308e-06, -7.62939453125e-05, 0.0, -7.62939453125e-06, -2.0861507437075488e-05, -8.225440979003906e-06, -8.0108642578125e-05, 0.0, -3.814697265625e-06, 0.0, -8.654594421386719e-05, -1.1920928244535389e-07, -0.0030975341796875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -0.00125885009765625, 0.0, -4.38690185546875e-05, -0.0001468658447265625, -3.0517578125e-05, -0.0015488862991333008, -2.0265579223632812e-06, -3.4332275390625e-05, -7.62939453125e-06, -9.5367431640625e-06, -4.00543212890625e-05, -6.103515625e-05, -1.1444091796875e-05, -0.000171661376953125, -9.5367431640625e-06, -4.9591064453125e-05, 0.0, -0.44204139709472656, -7.867813110351562e-06, -0.4324483871459961, -0.0007572174072265625, -0.00363922119140625, 0.0, -5.090215927339159e-05, -5.7220458984375e-06, -0.000682830810546875, -3.814697265625e-06, -0.00022125244140625, -0.3292970657348633, -1.33514404296875e-05, -9.5367431640625e-06, -2.3841855067985307e-07], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Backstab", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.865909555197959, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "Eq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARLOCK", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 0, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -0.04961204528808594, -0.000133514404296875, -4.8040190449682996e-05, -4.363059997558594e-05, -8.809177234070376e-05, 0.0, -4.65509033203125, -7.62939453125e-06, -0.020854949951171875, 0.0, -0.0017319917678833008, 0.0, -0.0002574920654296875, 0.0, -2.47955322265625e-05, 0.0, -0.0011293888092041016, -1.1444091796875e-05, -0.0002155303955078125, 0.0, -0.008338093757629395, 0.0, -0.00847625732421875, 0.0, -0.0062427520751953125, -0.0006313323974609375, -4.76837158203125e-05, -0.0007781982421875, -3.24249267578125e-05, -0.0004701614088844508, -4.4107247958891094e-05, -0.004183769226074219, -2.288818359375e-05, -0.005093574523925781, -0.000213623046875, -0.000789642333984375, -0.000179290771484375, -0.0028638839721679688, -0.0001049041748046875, -0.0011157989501953125, -8.58306884765625e-05, -0.001429789699614048, -2.09808349609375e-05, -0.0067996978759765625, -0.00011456012725830078, -0.0023746490478515625, -0.02844715118408203, -2.09808349609375e-05, -0.0035467147827148438, -0.0001220703125, -9.918212890625e-05, 0.0, -3.62396240234375e-05, 0.0, -0.0027431249618530273, -1.9073486328125e-06, -0.028395652770996094, -9.1552734375e-05, -0.0007572174072265625, -0.0002422332763671875, -3.0517578125e-05, -4.00543212890625e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.0010761021403595805, -1.9073486328125e-06, -0.014489173889160156, 0.0, -0.0022296905517578125, -0.000553131103515625, -4.38690185546875e-05, 0.0, -0.00015270271978806704, -3.62396240234375e-05, -8.58306884765625e-05, -5.0187110900878906e-05, -0.0002918243408203125, -0.001422882080078125, -3.24249267578125e-05, -8.344504749402404e-06, -2.1576881408691406e-05], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Backstab", "<EOS>", "0", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 2, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.93907892173813, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Backstab"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -3.253016471862793, -7.62939453125e-06, -3.015960282937158e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -2.86102294921875e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.010729789733886719, -0.000133514404296875, -2.47955322265625e-05, 0.0, -4.1961669921875e-05, 0.0, -1.5497195136049413e-06, -5.960462772236497e-07, -8.344650268554688e-06, 0.0, -0.00017547607421875, -3.0517578125e-05, -1.9073486328125e-06, -2.145764938177308e-06, -7.62939453125e-05, 0.0, -7.62939453125e-06, -2.0861507437075488e-05, -8.225440979003906e-06, -8.0108642578125e-05, 0.0, -3.814697265625e-06, 0.0, -8.654594421386719e-05, -1.1920928244535389e-07, -0.0030975341796875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -0.00125885009765625, 0.0, -4.38690185546875e-05, -0.0001468658447265625, -3.0517578125e-05, -0.0015488862991333008, -2.0265579223632812e-06, -3.4332275390625e-05, -7.62939453125e-06, -9.5367431640625e-06, -4.00543212890625e-05, -6.103515625e-05, -1.1444091796875e-05, -0.000171661376953125, -9.5367431640625e-06, -4.9591064453125e-05, 0.0, -1.157292366027832, -8.058547973632812e-05, -0.02150726318359375, -0.0029859542846679688, -0.0053997039794921875, 0.0, -2.4080236471490934e-05, -5.7220458984375e-06, -0.000377655029296875, -5.841255187988281e-06, -9.1552734375e-05, -0.4790945053100586, -2.86102294921875e-05, -5.7220458984375e-06, -2.1457672119140625e-06], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Backstab", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.988320567978462, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, COMMON=hearthbreaker.targeting.find_minion_spell_target,\n            filter_func=lambda target: target.health == target.\n            calculate_max_health() and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "Eq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "ROGUE", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 0, "hole4": "COMMON", "hole3": "FREE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -0.04961204528808594, -0.000133514404296875, -4.8040190449682996e-05, -4.363059997558594e-05, -8.809177234070376e-05, 0.0, -0.024853825569152832, -1.9073486328125e-06, -0.05641460418701172, -1.9073486328125e-06, -4.4818339347839355, 0.0, -0.23902034759521484, 0.0, -1.52587890625e-05, 0.0, -0.000797271728515625, -5.7220458984375e-06, -0.0001277923583984375, 0.0, -0.007773041725158691, -1.9073486328125e-06, -0.008258819580078125, 0.0, -0.00664520263671875, -0.0006780624389648438, -5.14984130859375e-05, -0.0007152557373046875, -3.62396240234375e-05, -0.0004271268844604492, -4.088862624485046e-05, -0.004519462585449219, -2.288818359375e-05, -0.004612922668457031, -0.000209808349609375, -0.000804901123046875, -0.00018310546875, -0.0029993057250976562, -0.0001068115234375, -0.0011138916015625, -8.7738037109375e-05, -0.0014277631416916847, -2.288818359375e-05, -0.00673675537109375, -0.00012218952178955078, -0.0023412704467773438, -0.02770709991455078, -2.09808349609375e-05, -0.0035343170166015625, -0.0001220703125, -9.918212890625e-05, 0.0, -3.62396240234375e-05, 0.0, -0.0027545690536499023, -1.9073486328125e-06, -0.028367042541503906, -9.1552734375e-05, -0.000759124755859375, -0.000240325927734375, -3.0517578125e-05, -4.1961669921875e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.0010750292567536235, -1.9073486328125e-06, -0.01444244384765625, 0.0, -0.002223968505859375, -0.00054931640625, -4.38690185546875e-05, 0.0, -0.00015210673154797405, -3.62396240234375e-05, -8.58306884765625e-05, -5.0187110900878906e-05, -0.0002918243408203125, -0.0014247894287109375, -3.24249267578125e-05, -8.225310011766851e-06, -2.1576881408691406e-05], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "COMMON", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 2, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -5.295528270317391, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.\n            calculate_max_health())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "Eq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "ROGUE", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 0, "hole4": "target_func", "hole3": "FREE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -0.04961204528808594, -0.000133514404296875, -4.8040190449682996e-05, -4.363059997558594e-05, -8.809177234070376e-05, 0.0, -0.024853825569152832, -1.9073486328125e-06, -0.05641460418701172, -1.9073486328125e-06, -0.015558600425720215, 0.0, -0.0002536773681640625, 0.0, -1.52587890625e-05, 0.0, -0.00023472309112548828, -1.33514404296875e-05, -8.7738037109375e-05, 0.0, -0.00840461254119873, -1.9073486328125e-06, -0.008177757263183594, 0.0, -0.0062541961669921875, -0.0006103515625, -5.340576171875e-05, -0.0008068084716796875, -3.62396240234375e-05, -0.00044000145862810314, -4.398804594529793e-05, -0.004416465759277344, -2.288818359375e-05, -0.0048694610595703125, -0.0002040863037109375, -0.000850677490234375, -0.0001811981201171875, -0.002674102783203125, -0.0001068115234375, -0.001094818115234375, -8.7738037109375e-05, -0.001427286071702838, -2.09808349609375e-05, -0.006834983825683594, -0.00011456012725830078, -0.0023899078369140625, -0.02815723419189453, -2.09808349609375e-05, -0.0036058425903320312, -0.0001220703125, -9.918212890625e-05, 0.0, -3.62396240234375e-05, 0.0, -0.002749800682067871, -1.9073486328125e-06, -0.02848529815673828, -9.1552734375e-05, -0.000789642333984375, -0.000240325927734375, -3.0517578125e-05, -4.00543212890625e-05, -0.0001163482666015625, -9.5367431640625e-06, -0.0010797976283356547, -1.9073486328125e-06, -4.465057373046875, -0.00012600421905517578, -0.5596065521240234, -0.0027151107788085938, -0.000186920166015625, 0.0, -0.0002791827719192952, -3.24249267578125e-05, -9.918212890625e-05, -1.800060272216797e-05, -9.1552734375e-05, -0.003070831298828125, -3.4332275390625e-05, -1.0013543942477554e-05, -2.5987625122070312e-05], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 2, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -5.608014816704255, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2 + player.\n            spell_damage), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Backstab"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"op": {"_type": "Add"}, "_type": "BinOp", "left": {"_type": "Num", "n": 2}, "right": {"_type": "Attribute", "attr": "spell_damage", "value": {"_type": "Name", "id": "player"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -3.253016471862793, -7.62939453125e-06, -3.015960282937158e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -2.86102294921875e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.010729789733886719, -0.000133514404296875, -2.47955322265625e-05, 0.0, -4.1961669921875e-05, 0.0, -1.5497195136049413e-06, -5.960462772236497e-07, -8.344650268554688e-06, 0.0, -0.00017547607421875, -3.0517578125e-05, -1.9073486328125e-06, -2.145764938177308e-06, -7.62939453125e-05, 0.0, -7.62939453125e-06, -2.0861507437075488e-05, -8.225440979003906e-06, -8.0108642578125e-05, 0.0, -3.814697265625e-06, 0.0, -8.654594421386719e-05, -1.1920928244535389e-07, -0.0030975341796875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -0.00125885009765625, 0.0, -4.38690185546875e-05, -0.0001468658447265625, -3.0517578125e-05, -0.0015488862991333008, -2.0265579223632812e-06, -3.4332275390625e-05, -7.62939453125e-06, -9.5367431640625e-06, -4.00543212890625e-05, -6.103515625e-05, -1.1444091796875e-05, -0.000171661376953125, -9.5367431640625e-06, -4.9591064453125e-05, 0.0, -1.157292366027832, -8.058547973632812e-05, -0.02150726318359375, -0.0029859542846679688, -0.0053997039794921875, 0.0, -2.4080236471490934e-05, -5.7220458984375e-06, -0.000377655029296875, -5.841255187988281e-06, -9.1552734375e-05, -1.0351953506469727, -0.005715370178222656, -0.00281524658203125, -5.7220458984375e-06, -0.003062129020690918, -7.62939453125e-06, -0.035907745361328125, -0.00046539306640625, 0.0, -0.0006237030029296875, 0.0, -6.103515625e-05, 0.0, -0.06420755386352539, 0.0], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Backstab", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 38, 131, 21, 165, "2", "<EOS>", 81, 11, 129, 19, 160, "player", "<EOS>", "spell_damage", "<EOS>"]}, {"score": -5.61538424168468, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2 + player.\n            spell_damage), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Backstab"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"op": {"_type": "Add"}, "_type": "BinOp", "left": {"_type": "Num", "n": 2}, "right": {"_type": "Attribute", "attr": "spell_damage", "value": {"_type": "Name", "id": "player"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -3.253016471862793, -7.62939453125e-06, -3.015960282937158e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -2.86102294921875e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.010729789733886719, -0.000133514404296875, -2.47955322265625e-05, 0.0, -4.1961669921875e-05, 0.0, -1.5497195136049413e-06, -5.960462772236497e-07, -8.344650268554688e-06, 0.0, -0.00017547607421875, -3.0517578125e-05, -1.9073486328125e-06, -2.145764938177308e-06, -7.62939453125e-05, 0.0, -7.62939453125e-06, -2.0861507437075488e-05, -8.225440979003906e-06, -8.0108642578125e-05, 0.0, -3.814697265625e-06, 0.0, -8.654594421386719e-05, -1.1920928244535389e-07, -0.0030975341796875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -0.00125885009765625, 0.0, -4.38690185546875e-05, -0.0001468658447265625, -3.0517578125e-05, -0.0015488862991333008, -2.0265579223632812e-06, -3.4332275390625e-05, -7.62939453125e-06, -9.5367431640625e-06, -4.00543212890625e-05, -6.103515625e-05, -1.1444091796875e-05, -0.000171661376953125, -9.5367431640625e-06, -4.9591064453125e-05, 0.0, -0.44204139709472656, -7.867813110351562e-06, -0.4324483871459961, -0.0007572174072265625, -0.00363922119140625, 0.0, -5.090215927339159e-05, -5.7220458984375e-06, -0.000682830810546875, -3.814697265625e-06, -0.00022125244140625, -1.3312158584594727, -0.007096290588378906, -0.003551483154296875, -7.62939453125e-06, -0.0031781457364559174, -3.814697265625e-06, -0.04030609130859375, -0.0006198883056640625, 0.0, -0.000518798828125, 0.0, -7.05718994140625e-05, 0.0, -0.07677984237670898, 0.0], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Backstab", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 38, 131, 21, 165, "2", "<EOS>", 81, 11, 129, 19, 160, "player", "<EOS>", "spell_damage", "<EOS>"]}, {"score": -5.904444093322809, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            EPIC, FREE=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole2": "ROGUE", "_type": "Template12", "hole1": 0, "hole4": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "FREE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -4.898597717285156, -0.000102996826171875, -2.622600959512056e-06, -2.0265579223632812e-06, -1.3708998267247807e-05, 0.0, -0.00121307373046875, 0.0, -0.36963653564453125, 0.0, -0.032604217529296875, -0.0002574920654296875, -0.04618644714355469, -3.814697265625e-06, -5.91278076171875e-05, -1.9073486328125e-06, -0.00019502639770507812, -1.1444091796875e-05, -8.0108642578125e-05, 0.0, -0.018985271453857422, -1.7404556274414062e-05, -0.017523765563964844, -0.0034799575805664062, -0.000820159912109375, 0.0, -4.67297577415593e-05, -5.7220458984375e-06, -0.000331878662109375, -7.748603820800781e-06, -7.82012939453125e-05, -0.5131397247314453, -1.52587890625e-05, -1.1444091796875e-05, -2.1457672119140625e-06], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 99, 182, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.2947674648962675, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole8": {"_type": "Num", "n": 1}, "hole7": "filter_func", "hole2": "ROGUE", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 0, "hole4": "target_func", "hole3": "FREE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -0.04961204528808594, -0.000133514404296875, -4.8040190449682996e-05, -4.363059997558594e-05, -8.809177234070376e-05, 0.0, -0.024853825569152832, -1.9073486328125e-06, -0.05641460418701172, -1.9073486328125e-06, -0.015558600425720215, 0.0, -0.0002536773681640625, 0.0, -1.52587890625e-05, 0.0, -0.00023472309112548828, -1.33514404296875e-05, -8.7738037109375e-05, 0.0, -0.00840461254119873, -1.9073486328125e-06, -0.008177757263183594, 0.0, -5.818107604980469, -0.006720542907714844, -0.020241117104887962, 0.0, -0.01941680908203125, -0.000560760498046875, -0.000690460205078125, 0.0, -1.1205666851310525e-05, -1.1444091796875e-05, -0.0001926422119140625, -3.814697265625e-06, -0.0004291534423828125, -0.2634086608886719, -5.7220458984375e-06, -9.894356480799615e-06, -2.0265579223632812e-06], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 21, 165, "1", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.563280584728773, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            EPIC, FREE=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2 + player.\n            spell_damage), self)\n", "model_output": {"body": [{"body": [{"hole0": "Backstab", "hole2": "ROGUE", "_type": "Template12", "hole1": 0, "hole4": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "FREE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"op": {"_type": "Add"}, "_type": "BinOp", "left": {"_type": "Num", "n": 2}, "right": {"_type": "Attribute", "attr": "spell_damage", "value": {"_type": "Name", "id": "player"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -4.898597717285156, -0.000102996826171875, -2.622600959512056e-06, -2.0265579223632812e-06, -1.3708998267247807e-05, 0.0, -0.00121307373046875, 0.0, -0.36963653564453125, 0.0, -0.032604217529296875, -0.0002574920654296875, -0.04618644714355469, -3.814697265625e-06, -5.91278076171875e-05, -1.9073486328125e-06, -0.00019502639770507812, -1.1444091796875e-05, -8.0108642578125e-05, 0.0, -0.018985271453857422, -1.7404556274414062e-05, -0.017523765563964844, -0.0034799575805664062, -0.000820159912109375, 0.0, -4.67297577415593e-05, -5.7220458984375e-06, -0.000331878662109375, -7.748603820800781e-06, -7.82012939453125e-05, -1.0562505722045898, -0.00457763671875, -0.003047943115234375, -7.62939453125e-06, -0.002520330250263214, -5.7220458984375e-06, -0.037619590759277344, -0.000583648681640625, 0.0, -0.0006313323974609375, 0.0, -5.91278076171875e-05, 0.0, -0.06670153141021729, 0.0], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 99, 182, "Backstab", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 38, 131, 21, 165, "2", "<EOS>", 81, 11, 129, 19, 160, "player", "<EOS>", "spell_damage", "<EOS>"]}, {"score": -17.82416228189461, "inferred_code": "class Backstab(SpellCard):\n\n    def __init__(self):\n        super().__init__('Backstab', 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        if player.opponent.health <= 2:\n            target = player.game.other_player[index + 1]\n        else:\n            minion = player.opponent.minions[index + 1]\n        minion.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Backstab"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ROGUE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}, {"body": [{"targets": [{"_type": "Name", "id": "target"}], "_type": "Assign", "value": {"_type": "Subscript", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}}, "slice": {"_type": "Index", "value": {"op": {"_type": "Add"}, "_type": "BinOp", "left": {"_type": "Name", "id": "index"}, "right": {"_type": "Num", "n": 1}}}}}], "orelse": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"_type": "Subscript", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "opponent", "value": {"_type": "Name", "id": "player"}}}, "slice": {"_type": "Index", "value": {"op": {"_type": "Add"}, "_type": "BinOp", "left": {"_type": "Name", "id": "index"}, "right": {"_type": "Num", "n": 1}}}}}], "_type": "If", "test": {"comparators": [{"_type": "Num", "n": 2}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "opponent", "value": {"_type": "Name", "id": "player"}}}, "ops": [{"_type": "LtE"}]}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Backstab"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -9.77468371274881e-05, -8.2254373410251e-06, -2.288818359375e-05, 0.0, -3.814697265625e-06, -5.9127800341229886e-05, -5.006789251638111e-06, -4.88758041683468e-06, -0.00079345703125, -3.253016471862793, -7.62939453125e-06, -3.015960282937158e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.543231964111328e-05, 0.0, -2.86102294921875e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.010729789733886719, -0.000133514404296875, -2.47955322265625e-05, 0.0, -4.1961669921875e-05, 0.0, -1.5497195136049413e-06, -5.960462772236497e-07, -8.344650268554688e-06, 0.0, -0.00017547607421875, -3.0517578125e-05, -1.9073486328125e-06, -2.145764938177308e-06, -7.62939453125e-05, 0.0, -7.62939453125e-06, -2.0861507437075488e-05, -8.225440979003906e-06, -8.0108642578125e-05, 0.0, -3.814697265625e-06, 0.0, -8.654594421386719e-05, -1.1920928244535389e-07, -0.0030975341796875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.775161743164062e-06, -1.9073486328125e-06, -0.00125885009765625, 0.0, -4.38690185546875e-05, -0.0001468658447265625, -3.0517578125e-05, -0.0015488862991333008, -2.0265579223632812e-06, -3.4332275390625e-05, -7.62939453125e-06, -9.5367431640625e-06, -4.00543212890625e-05, -6.103515625e-05, -1.1444091796875e-05, -0.000171661376953125, -9.5367431640625e-06, -4.9591064453125e-05, 0.0, -0.44204139709472656, -7.867813110351562e-06, -1.1570615768432617, -7.62939453125e-06, -0.00014090538024902344, -1.1920928244535389e-07, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -1.5735626220703125e-05, 0.0, 0.0, -7.152556463552173e-06, 0.0, -2.09808349609375e-05, -7.390969585685525e-06, -8.344646857949556e-07, -0.6174831390380859, -1.52587890625e-05, -3.814697265625e-06, -6.29425048828125e-05, -1.33514404296875e-05, -0.0001010894775390625, 0.0, -2.6702880859375e-05, -1.9073486328125e-05, -5.7816505432128906e-05, -3.814697265625e-06, -2.6702880859375e-05, -1.52587890625e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -2.288818359375e-05, -5.9604644775390625e-06, -0.003704071044921875, -7.62939453125e-06, -7.62939453125e-06, -0.00034332275390625, 0.0, -0.2517216205596924, 0.0, -0.0024204254150390625, -1.71661376953125e-05, -2.6702880859375e-05, 0.0, -0.0193634033203125, 0.0, -0.0011042356491088867, -1.9073486328125e-06, -0.0002498626708984375, 0.0, -1.52587890625e-05, -0.000438690185546875, 0.0, -0.00028228759765625, 0.0, -0.17743301391601562, -1.9073486328125e-05, -0.08068954944610596, -3.933898824470816e-06, -0.003936052322387695, -1.1920928244535389e-07, -0.018264049664139748, -5.7220458984375e-06, -0.0053501129150390625, -1.9073486328125e-06, -0.0001220703125, -0.0002536773681640625, -9.918212890625e-05, 0.0, -0.00046539306640625, -1.52587890625e-05, -0.0036982297897338867, 0.0, -0.647709846496582, -1.52587890625e-05, -3.62396240234375e-05, -7.05718994140625e-05, 0.0, -0.12342643737792969, -1.33514404296875e-05, -1.728534698486328e-05, 0.0, -0.0018643139628693461, 0.0, -0.07786369323730469, -0.22252368927001953, -0.01581096649169922, -3.814697265625e-06, -0.025679588317871094, 0.0, -0.6686058044433594, -1.9073486328125e-06, -0.03396034240722656, -1.9073486328125e-06, -0.0059320926666259766, 0.0, -0.6839167475700378, 0.0, -0.5261912941932678, 0.0, -0.0025043487548828125, -0.28105926513671875, -2.86102294921875e-05, -9.5367431640625e-05, -0.000423431396484375, -0.07205551117658615, -1.9073486328125e-05, -0.003994941711425781, -0.4385194778442383, -0.0009670257568359375, -8.96453857421875e-05, -3.814697265625e-06, 0.0, -0.9680456519126892, -1.1920928244535389e-07, -0.6969356536865234, -0.000148773193359375, -7.05718994140625e-05, -1.9073486328125e-06, -0.00079345703125, -1.1444091796875e-05, -0.6574773788452148, -1.9073486328125e-06, -0.0033169984817504883, 0.0, -0.23092114925384521, 0.0, -0.5123018026351929, 0.0, -0.23209190368652344, -0.000213623046875, -0.5034360885620117, -0.000423431396484375, -9.5367431640625e-06, -3.814697265625e-06, -0.1287938356399536, -3.814697265625e-06, -0.32154273986816406, -0.029912948608398438, -3.814697265625e-06, -0.00014483928680419922, -1.9073486328125e-06, -0.12766456604003906, -0.4283723831176758, -0.000202178955078125, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.5090378522872925, 0.0, -0.055504798889160156, -0.000213623046875, -9.1552734375e-05, -9.5367431640625e-06, -0.0004405975341796875, -9.5367431640625e-06, -0.17826461791992188, 0.0, -0.017755985260009766, 0.0, -0.5335831642150879, 0.0, -0.008212201297283173, 0.0, -0.5277309417724609, -0.0002899169921875, -0.13550662994384766, -0.0021533966064453125, -2.47955322265625e-05, -1.9073486328125e-06, -0.10829174518585205, -5.7220458984375e-06, -0.36133384704589844, -0.018769264221191406, -3.814697265625e-06, -0.00012683868408203125, -1.9073486328125e-06, -0.32898998260498047, -5.7220458984375e-06, -6.103515625e-05, -0.003696441650390625, -0.0002231597900390625, 0.0, -0.0001220703125, -1.1444091796875e-05, -0.08761107176542282, 0.0, -0.18541264533996582, -1.33514404296875e-05, -1.1444091796875e-05, -0.021536827087402344, -0.00011444091796875, -0.002684904495254159, -3.814697265625e-06, -1.33514404296875e-05, -4.00543212890625e-05, -0.000248310505412519, -0.00024235248565673828], "choice_history": [80, 159, 295, 88, 138, "Backstab", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Backstab", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 92, 147, 15, 139, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "opponent", "<EOS>", "health", "<EOS>", 279, 9, 282, 47, 165, "2", "<EOS>", 295, 85, 128, 282, 45, 160, "target", "<EOS>", 22, 171, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", 83, 150, 12, 131, 19, 160, "index", "<EOS>", 81, 21, 165, "1", "<EOS>", 295, 85, 128, 282, 45, 160, "minion", "<EOS>", 22, 171, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "opponent", "<EOS>", "minions", "<EOS>", 83, 150, 12, 131, 19, 160, "index", "<EOS>", 81, 21, 165, "1", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -22.488353729248047, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -22.488351821899414], "choice_history": [80, 159, 294]}]}
{"index": 10, "beams": [{"score": -0.505351095642709, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -0.24028968811035156, -3.814697265625e-06, -1.9073486328125e-06, -0.0001659393310546875, -3.62396240234375e-05, -7.62939453125e-06, -8.0108642578125e-05, -8.96453857421875e-05, -3.814697265625e-06, -1.4424319488171022e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -6.67572021484375e-05, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -0.00025177001953125, -4.410743713378906e-06, -8.7738037109375e-05, -0.00030517578125, -0.0003185272216796875, -0.03163337707519531, -0.0748317763209343, -0.0018482208251953125, -0.011183738708496094, -1.33514404296875e-05, -0.040017127990722656, -0.0002689361572265625, -5.7220458984375e-06, -7.62939453125e-06, -0.001583099365234375, 0.0, -0.001323699951171875, -3.814697265625e-06, -0.0002651214599609375, -2.288818359375e-05, -0.0004444122314453125, -7.62939453125e-06, -0.006851077079772949, -3.814697265625e-06, -0.000408172607421875, -0.00012969970703125, -5.7220458984375e-05, -0.013818270526826382, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -2.0774350875985874, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -1.7726173400878906, -0.0042819976806640625, -5.7220458984375e-06, -0.000133514404296875, -8.7738037109375e-05, -2.288818359375e-05, -6.67572021484375e-05, -4.00543212890625e-05, 0.0, -1.0967253729177173e-05, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -3.0517578125e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.000244140625, -6.318092346191406e-06, -0.0029201507568359375, -0.00037384033203125, -0.0023593902587890625, -0.0039215087890625, -0.133448988199234, -0.00016021728515625, -0.0004329681396484375, -3.814697265625e-06, -0.0003681182861328125, -0.0001354217529296875, -1.9073486328125e-06, -7.62939453125e-06, -0.000240325927734375, 0.0, -0.0001354217529296875, -3.814697265625e-06, -5.340576171875e-05, -9.34600830078125e-05, -0.0002498626708984375, -3.814697265625e-06, -0.0025359392166137695, -3.814697265625e-06, -0.000232696533203125, -7.2479248046875e-05, -5.340576171875e-05, -0.01044345460832119, -1.33514404296875e-05, -0.009828567504882812, -1.9073486328125e-06, -0.0002994537353515625, -0.00595855712890625, -5.7220458984375e-06, -6.866455078125e-05, -0.010628700256347656, -1.9073486328125e-06, -0.000255584716796875, -7.62939453125e-06, -0.009250760078430176, -1.9073486328125e-05, -0.0002288818359375, -7.62939453125e-06, -0.01405489444732666, -1.9073486328125e-06, -3.62396240234375e-05, -0.0002117156982421875, -5.91278076171875e-05, -0.011779135093092918, -2.47955322265625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -3.553781246017479, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -0.24028968811035156, -3.814697265625e-06, -1.9073486328125e-06, -0.0001659393310546875, -3.62396240234375e-05, -7.62939453125e-06, -8.0108642578125e-05, -8.96453857421875e-05, -3.814697265625e-06, -1.4424319488171022e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -6.67572021484375e-05, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -0.00025177001953125, -4.410743713378906e-06, -8.7738037109375e-05, -0.00030517578125, -0.0003185272216796875, -0.03163337707519531, -3.1619045734405518, -0.002197265625, -0.0051136016845703125, -0.0001010894775390625, -0.009021759033203125, -0.0003509521484375, -3.814697265625e-06, -5.7220458984375e-06, -0.001190185546875, 0.0, -0.0010051727294921875, -3.814697265625e-06, -0.00020599365234375, -2.6702880859375e-05, -0.0003490447998046875, -9.5367431640625e-06, -0.0070378780364990234, -1.9073486328125e-06, -0.0002727508544921875, -0.0001239776611328125, -5.53131103515625e-05, -0.012544517405331135, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "3", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -3.8155256697868936, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.change_attack(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template63"}}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template63"}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -0.24028968811035156, -3.814697265625e-06, -1.9073486328125e-06, -0.0001659393310546875, -3.62396240234375e-05, -7.62939453125e-06, -8.0108642578125e-05, -8.96453857421875e-05, -3.814697265625e-06, -1.4424319488171022e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -6.67572021484375e-05, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -0.00025177001953125, -4.410743713378906e-06, -8.7738037109375e-05, -0.00030517578125, -0.0003185272216796875, -0.03163337707519531, -0.0748317763209343, -0.0018482208251953125, -0.011183738708496094, -1.33514404296875e-05, -3.3130054473876953, -0.010415077209472656, -0.051909442991018295, -7.82012939453125e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "4", "<EOS>", 89, 141, 29, 246, "4", "<EOS>"]}, {"score": -4.287651872444712, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -0.24028968811035156, -3.814697265625e-06, -1.9073486328125e-06, -0.0001659393310546875, -3.62396240234375e-05, -7.62939453125e-06, -8.0108642578125e-05, -8.96453857421875e-05, -3.814697265625e-06, -1.4424319488171022e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -6.67572021484375e-05, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -0.00025177001953125, -4.410743713378906e-06, -8.7738037109375e-05, -0.00030517578125, -0.0003185272216796875, -0.03163337707519531, -3.863966226577759, -0.000118255615234375, -0.035363197326660156, -7.62939453125e-05, -0.01255035400390625, -0.0002269744873046875, -3.814697265625e-06, -5.7220458984375e-06, -0.0020465850830078125, 0.0, -0.001102447509765625, -1.9073486328125e-06, -0.0002460479736328125, -2.288818359375e-05, -0.000438690185546875, -7.62939453125e-06, -0.006181597709655762, -3.814697265625e-06, -0.000560760498046875, -0.000141143798828125, -5.91278076171875e-05, -0.012272721156477928, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -4.308168456144358, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(4)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -1.7726173400878906, -0.0042819976806640625, -5.7220458984375e-06, -0.000133514404296875, -8.7738037109375e-05, -2.288818359375e-05, -6.67572021484375e-05, -4.00543212890625e-05, 0.0, -1.0967253729177173e-05, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -3.0517578125e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.000244140625, -6.318092346191406e-06, -0.0029201507568359375, -0.00037384033203125, -0.0023593902587890625, -0.0039215087890625, -2.3664586544036865, -3.62396240234375e-05, -0.0003414154052734375, -7.62939453125e-06, -0.0002079010009765625, -6.67572021484375e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002536773681640625, 0.0, -0.000133514404296875, -3.814697265625e-06, -5.91278076171875e-05, -7.62939453125e-05, -0.000247955322265625, -3.814697265625e-06, -0.0025540590286254883, -3.814697265625e-06, -0.000263214111328125, -8.392333984375e-05, -5.7220458984375e-05, -0.009052759036421776, -1.33514404296875e-05, -0.00968170166015625, -1.9073486328125e-06, -0.0003070831298828125, -0.00536346435546875, -5.7220458984375e-06, -6.67572021484375e-05, -0.010632514953613281, -1.9073486328125e-06, -0.0002727508544921875, -7.62939453125e-06, -0.009235501289367676, -1.9073486328125e-05, -0.0002288818359375, -7.62939453125e-06, -0.014318108558654785, -1.9073486328125e-06, -3.62396240234375e-05, -0.000209808349609375, -5.91278076171875e-05, -0.011743256822228432, -2.47955322265625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -4.946884177807533, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(3)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -0.24028968811035156, -3.814697265625e-06, -1.9073486328125e-06, -0.0001659393310546875, -3.62396240234375e-05, -7.62939453125e-06, -8.0108642578125e-05, -8.96453857421875e-05, -3.814697265625e-06, -1.4424319488171022e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -6.67572021484375e-05, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -0.00025177001953125, -4.410743713378906e-06, -8.7738037109375e-05, -0.00030517578125, -0.0003185272216796875, -0.03163337707519531, -0.0748317763209343, -0.0018482208251953125, -0.011183738708496094, -1.33514404296875e-05, -0.040017127990722656, -0.0002689361572265625, -5.7220458984375e-06, -7.62939453125e-06, -0.001583099365234375, 0.0, -0.001323699951171875, -3.814697265625e-06, -0.0002651214599609375, -2.288818359375e-05, -0.0004444122314453125, -7.62939453125e-06, -0.006851077079772949, -3.814697265625e-06, -0.000408172607421875, -0.00012969970703125, -5.7220458984375e-05, -4.455358982086182, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -5.396394249251443, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing  of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing  of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -4.746422290802002, -0.11965838819742203, -4.398822784423828e-05, -4.732607339974493e-05, -2.09808349609375e-05, -2.872902223316487e-05, 0.0, -0.0004636049270629883, 0.0, -0.0001277923583984375, -2.47955322265625e-05, -0.000316619873046875, 0.0, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.728534698486328e-05, -1.2636104656849056e-05, -0.27971935272216797, -1.9073486328125e-06, -3.814697265625e-06, -0.000141143798828125, -2.47955322265625e-05, -7.62939453125e-06, -6.866455078125e-05, -8.58306884765625e-05, -3.814697265625e-06, -1.4185901818564162e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -2.86102294921875e-05, -9.5367431640625e-06, -0.0002574920654296875, -4.410743713378906e-06, -9.1552734375e-05, -0.0003108978271484375, -0.0003204345703125, -0.032113075256347656, -0.07291462272405624, -0.0019140243530273438, -0.010746955871582031, -1.52587890625e-05, -0.03938770294189453, -0.0002765655517578125, -5.7220458984375e-06, -7.62939453125e-06, -0.001682281494140625, 0.0, -0.001361846923828125, -3.814697265625e-06, -0.00026702880859375, -2.288818359375e-05, -0.00045013427734375, -7.62939453125e-06, -0.006853938102722168, -3.814697265625e-06, -0.0004100799560546875, -0.00012969970703125, -5.7220458984375e-05, -0.013785725459456444, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -5.689420750550653, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n        self.target.increase_health(4)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -1.7726173400878906, -0.0042819976806640625, -5.7220458984375e-06, -0.000133514404296875, -8.7738037109375e-05, -2.288818359375e-05, -6.67572021484375e-05, -4.00543212890625e-05, 0.0, -1.0967253729177173e-05, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -3.0517578125e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.000244140625, -6.318092346191406e-06, -0.0029201507568359375, -0.00037384033203125, -0.0023593902587890625, -0.0039215087890625, -3.74054217338562, -0.00016796588897705078, -0.000850677490234375, -7.62939453125e-06, -0.000598907470703125, -8.20159912109375e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00031280517578125, 0.0, -0.000102996826171875, -3.814697265625e-06, -4.38690185546875e-05, -0.000102996826171875, -0.0002079010009765625, -5.7220458984375e-06, -0.002678990364074707, -1.9073486328125e-06, -0.0001888275146484375, -7.2479248046875e-05, -5.14984130859375e-05, -0.010537033900618553, -1.33514404296875e-05, -0.008649826049804688, -1.9073486328125e-06, -0.0003223419189453125, -0.008241653442382812, -5.7220458984375e-06, -6.866455078125e-05, -0.012473106384277344, -1.9073486328125e-06, -0.000270843505859375, -7.62939453125e-06, -0.01066887378692627, -1.9073486328125e-05, -0.000232696533203125, -7.62939453125e-06, -0.013809800148010254, -1.9073486328125e-06, -3.62396240234375e-05, -0.000213623046875, -5.91278076171875e-05, -0.011712267994880676, -2.47955322265625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "3", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -5.810455724652897, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_max_health() != target.calculate_max_health() and\n            target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "PALADIN", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 4, "hole4": "target_func", "hole3": "COMMON"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -3.150179862976074, -0.000873565673828125, -0.010452880524098873, -0.0007177589577622712, -0.3631509244441986, -4.38690185546875e-05, -5.7577934057917446e-05, -7.82012939453125e-05, -0.0012505528284236789, -1.9073486328125e-06, -0.007369041442871094, -1.9073486328125e-06, -0.11684989929199219, 0.0, -0.0002881288528442383, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00106048583984375, -9.5367431640625e-06, -3.0517578125e-05, -1.1920928244535389e-07, -0.02562868595123291, -5.7220458984375e-06, -0.006472349166870117, 0.0, -0.0041408538818359375, -0.000415802001953125, -1.9073486328125e-06, -0.0001506805419921875, -1.33514404296875e-05, -0.029657483100891113, -5.7220458984375e-06, -0.0010662078857421875, -0.000164031982421875, -0.00066375732421875, -0.000865936279296875, -0.0025997161865234375, -0.0001010894775390625, -0.7761039733886719, -0.00513458251953125, -0.000484466552734375, -2.86102294921875e-05, -0.016923904418945312, 0.0, -0.00048065185546875, -3.814697265625e-06, -0.3226367235183716, -0.0004190206527709961, -1.9073486328125e-05, -0.04802989959716797, -0.000164031982421875, -0.0038404464721679688, -0.0001087188720703125, -0.000308990478515625, -5.7220458984375e-06, -0.0126953125, -9.5367431640625e-06, -0.011368155479431152, -1.9073486328125e-06, -0.05845975875854492, -4.1365623474121094e-05, -0.0010585784912109375, -0.0005092620849609375, -9.34600830078125e-05, -1.1444091796875e-05, -0.001552581787109375, 0.0, -0.0008240938186645508, -5.7220458984375e-06, -0.0033260583877563477, -7.62939453125e-06, -0.39556217193603516, -0.0002155303955078125, -0.0014820098876953125, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, 0.0, -6.67572021484375e-05, -1.1920928244535389e-07, -7.62939453125e-06, -6.58032440696843e-05, -3.8980677345534787e-05, -0.22234821319580078, -2.09808349609375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -4.38690185546875e-05, -1.1444091796875e-05, -5.7220458984375e-06, -3.0517578125e-05, -5.7220458984375e-06, -1.9788731151493266e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.000156402587890625, 0.0, -2.86102294921875e-05, -9.5367431640625e-06, -0.00025177001953125, -4.410743713378906e-06, -0.0002231597900390625, -0.00034332275390625, -0.00031280517578125, -0.026427268981933594, -0.07619836181402206, -0.002170562744140625, -0.013253211975097656, -1.52587890625e-05, -0.056487083435058594, -0.0002002716064453125, -5.7220458984375e-06, -1.1444091796875e-05, -0.0005779266357421875, 0.0, -0.000873565673828125, -3.814697265625e-06, -0.0002574920654296875, -2.47955322265625e-05, -0.00037384033203125, -7.62939453125e-06, -0.00658869743347168, -3.814697265625e-06, -0.0003070831298828125, -0.0001239776611328125, -5.7220458984375e-05, -0.013856902718544006, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 14, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -5.967783233326827, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for target in player.minions:\n            self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "target": {"_type": "Name", "id": "target"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -3.380556106567383, -3.24249267578125e-05, -5.7220458984375e-06, -0.0072650909423828125, -3.62396240234375e-05, -9.5367431640625e-06, -3.4332275390625e-05, -0.0001125335693359375, -9.5367431640625e-06, -8.463848644169047e-06, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, 0.0, -5.14984130859375e-05, -5.7220458984375e-06, -0.000274658203125, -4.291534423828125e-06, -0.20104694366455078, -0.008440017700195312, -0.000110626220703125, 0.0, -0.8218780755996704, -1.9073486328125e-06, -0.0003604888916015625, 0.0, -0.5971651077270508, -1.9073486328125e-06, -0.11412620544433594, 0.0, -0.19100475311279297, -7.62939453125e-06, -0.0008373260498046875, -0.13193607330322266, -1.71661376953125e-05, -0.0014142990112304688, -8.0108642578125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.15564632415771484, 0.0, -0.0024318695068359375, 0.0, -0.011843681335449219, -2.6702880859375e-05, -0.0001621246337890625, -3.814697265625e-06, -0.23293709754943848, 0.0, -1.1444091796875e-05, -0.0003452301025390625, -0.0001087188720703125, -0.028506210073828697, -3.4332275390625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "target", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -5.987177645898086, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "PALADIN", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 4, "hole4": "target_func", "hole3": "COMMON"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -3.150179862976074, -0.000873565673828125, -0.010452880524098873, -0.0007177589577622712, -0.3631509244441986, -4.38690185546875e-05, -5.7577934057917446e-05, -7.82012939453125e-05, -0.0012505528284236789, -1.9073486328125e-06, -0.007369041442871094, -1.9073486328125e-06, -0.11684989929199219, 0.0, -0.0002881288528442383, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00106048583984375, -9.5367431640625e-06, -3.0517578125e-05, -1.1920928244535389e-07, -0.02562868595123291, -5.7220458984375e-06, -0.006472349166870117, 0.0, -0.0041408538818359375, -0.000415802001953125, -1.9073486328125e-06, -0.0001506805419921875, -1.33514404296875e-05, -0.029657483100891113, -5.7220458984375e-06, -0.0010662078857421875, -0.000164031982421875, -0.00066375732421875, -0.000865936279296875, -0.0025997161865234375, -0.0001010894775390625, -1.289271354675293, -5.7220458984375e-06, -0.011411666870117188, -3.814697265625e-06, -0.00034689903259277344, -1.9073486328125e-05, -0.12977194786071777, -1.20401346066501e-05, -3.24249267578125e-05, -0.016692161560058594, -5.7220458984375e-05, -0.013430595397949219, -0.000156402587890625, -0.0004177093505859375, -3.814697265625e-06, -0.0055904388427734375, -3.814697265625e-06, -0.014657139778137207, -1.9073486328125e-06, -0.021555542945861816, -4.482269287109375e-05, -0.0010204315185546875, -0.0004215240478515625, -0.0001010894775390625, -1.1444091796875e-05, -0.0017328262329101562, 0.0, -0.0005332231521606445, -5.7220458984375e-06, -0.0040357112884521484, -7.62939453125e-06, -0.33878135681152344, -0.00023651123046875, -0.0013751983642578125, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, 0.0, 0.0, -7.62939453125e-05, -1.1920928244535389e-07, -7.62939453125e-06, -6.508800288429484e-05, -3.790783375734463e-05, -0.2092752456665039, -1.71661376953125e-05, -1.9073486328125e-06, -4.00543212890625e-05, -3.0517578125e-05, -9.5367431640625e-06, -7.62939453125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -1.9073479052167386e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00012969970703125, 0.0, -2.86102294921875e-05, -9.5367431640625e-06, -0.0002536773681640625, -4.410743713378906e-06, -0.000217437744140625, -0.000335693359375, -0.0003147125244140625, -0.026350021362304688, -0.07690240442752838, -0.0022029876708984375, -0.013264656066894531, -1.33514404296875e-05, -0.05573081970214844, -0.0002002716064453125, -5.7220458984375e-06, -1.1444091796875e-05, -0.0005702972412109375, 0.0, -0.0008697509765625, -3.814697265625e-06, -0.0002574920654296875, -2.47955322265625e-05, -0.0003719329833984375, -7.62939453125e-06, -0.006593465805053711, -3.814697265625e-06, -0.0003032684326171875, -0.0001239776611328125, -5.7220458984375e-05, -0.013975633308291435, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "4", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -5.989706896421467, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            self.target.increase_health(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -3.380556106567383, -3.24249267578125e-05, -5.7220458984375e-06, -0.0072650909423828125, -3.62396240234375e-05, -9.5367431640625e-06, -3.4332275390625e-05, -0.0001125335693359375, -9.5367431640625e-06, -8.463848644169047e-06, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, 0.0, -5.14984130859375e-05, -5.7220458984375e-06, -0.000274658203125, -4.291534423828125e-06, -0.20104694366455078, -0.008440017700195312, -0.000110626220703125, 0.0, -0.9234195947647095, 0.0, -0.0003185272216796875, 0.0, -0.33693695068359375, -3.814697265625e-06, -0.4683876037597656, 0.0, -0.06682967394590378, -1.71661376953125e-05, -0.000576019287109375, -0.07974815368652344, -9.5367431640625e-06, -0.0011119842529296875, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.18839550018310547, 0.0, -0.00273895263671875, 0.0, -0.00391387939453125, -2.6702880859375e-05, -0.000148773193359375, -3.814697265625e-06, -0.21084904670715332, 0.0, -1.1444091796875e-05, -0.0003299713134765625, -0.0001049041748046875, -0.02883678674697876, -3.62396240234375e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -7.208177760419396, "inferred_code": "class BlessingOfKings(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Kings', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for target in game.other_player.minions:\n            minion.change_attack(4)\n", "model_output": {"body": [{"body": [{"hole0": "Blessing of Kings", "_type": "Template3", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "target"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfKings"}], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -8.7738037109375e-05, -0.00026702880859375, -0.000118255615234375, -0.00020787939138244838, -0.0002031318290391937, -2.4080030925688334e-05, -6.43729799776338e-06, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0008420944213867188, -2.6702880859375e-05, -4.768371127283899e-06, -4.76837158203125e-05, -0.062255859375, -0.0006256103515625, -4.994744449504651e-05, -0.0005036149523220956, -0.01209274958819151, -1.3589859008789062e-05, -3.7550926208496094e-05, -5.7220458984375e-05, -5.173548197490163e-05, 0.0, -0.0004863739013671875, 0.0, -0.0001201629638671875, -2.09808349609375e-05, -0.00031280517578125, 0.0, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -1.4781842764932662e-05, -3.380556106567383, -3.24249267578125e-05, -5.7220458984375e-06, -0.0072650909423828125, -3.62396240234375e-05, -9.5367431640625e-06, -3.4332275390625e-05, -0.0001125335693359375, -9.5367431640625e-06, -8.463848644169047e-06, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -4.9591064453125e-05, 0.0, -5.14984130859375e-05, -5.7220458984375e-06, -0.000274658203125, -4.291534423828125e-06, -0.20104694366455078, -0.008440017700195312, -0.000110626220703125, 0.0, -0.8218780755996704, -1.9073486328125e-06, -0.0003604888916015625, 0.0, -0.8001585006713867, 0.0, -8.20159912109375e-05, -5.7220458984375e-06, -0.0418853759765625, -1.1920928244535389e-07, -0.0037459135055541992, 0.0, -0.23898862302303314, -0.00023651123046875, -0.0004215240478515625, -0.0025959014892578125, -3.814697265625e-06, -6.4849853515625e-05, -8.20159912109375e-05, -5.7220458984375e-06, 0.0, -0.26245880126953125, 0.0, -0.2705225944519043, 0.0, -0.7975608110427856, -7.62939453125e-06, -0.0001621246337890625, -0.0002384185791015625, -0.00179290771484375, -0.28795409202575684, -7.43865966796875e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Kings", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Blessing", " ", "of", " ", "Kings", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "target", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -18.823976516723633, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-0.0001506805419921875, -4.1961669921875e-05, -18.82378387451172], "choice_history": [80, 159, 294]}]}
{"index": 11, "beams": [{"score": -0.1433284994091082, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -0.042583465576171875, 0.0, -0.00095367431640625, -0.00139617919921875, -0.000110626220703125, -6.4849853515625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.0323413610458374, -2.288818359375e-05, -7.62939453125e-06, -0.0028753280639648438, -0.000423431396484375, -0.005219392944127321, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -4.193668307631015, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.target, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "target"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -4.089391708374023, -1.9073486328125e-06, -0.002414703369140625, -0.00086212158203125, -8.58306884765625e-05, -8.0108642578125e-05, -3.24249267578125e-05, -3.814697265625e-06, -9.5367431640625e-05, -9.72747802734375e-05, -0.0001010894775390625, -1.9073486328125e-06, -0.03655076026916504, -2.09808349609375e-05, -5.7220458984375e-06, -0.000835418701171875, -0.000278472900390625, -0.005793733522295952, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -4.225574779218732, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY., target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": ""}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -4.109787940979004, -0.003143310546875, -0.00115203857421875, -0.000804901123046875, -0.0002536773681640625, -3.4332275390625e-05, -3.814697265625e-06, -9.72747802734375e-05, -0.000354766845703125, -0.000102996826171875, -1.9073486328125e-06, -0.039490580558776855, -2.288818359375e-05, -1.1444091796875e-05, -0.0019197463989257812, -0.0002803802490234375, -0.011101632378995419, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -4.859530860452651, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -0.042583465576171875, 0.0, -0.00095367431640625, -0.00139617919921875, -0.000110626220703125, -6.4849853515625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0001087188720703125, -1.9073486328125e-06, -4.748572826385498, -4.9591064453125e-05, -1.9073486328125e-06, -0.0021457672119140625, -2.86102294921875e-05, -0.0062860604375600815, -2.09808349609375e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -5.38545968186736, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -0.042583465576171875, 0.0, -0.00095367431640625, -0.00139617919921875, -0.000110626220703125, -6.4849853515625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0001087188720703125, -1.9073486328125e-06, -5.243339538574219, -9.5367431640625e-06, -1.9073486328125e-06, -0.01744365692138672, -7.82012939453125e-05, -0.02215409465134144, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -5.416924495144485, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -0.042583465576171875, 0.0, -0.00095367431640625, -0.00139617919921875, -0.000110626220703125, -6.4849853515625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0001087188720703125, -1.9073486328125e-06, -5.295198917388916, -4.1961669921875e-05, -9.5367431640625e-06, -0.01751995086669922, -3.814697265625e-06, -0.0017118453979492188, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.9671730323570955, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -0.042583465576171875, 0.0, -0.00095367431640625, -0.00139617919921875, -0.000110626220703125, -6.4849853515625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0001087188720703125, -1.9073486328125e-06, -5.382862091064453, -1.7404556274414062e-05, -1.1444091796875e-05, -0.46526527404785156, -5.7220458984375e-06, -0.016578350216150284, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.21500577394545, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -0.042583465576171875, 0.0, -0.00095367431640625, -0.00139617919921875, -0.000110626220703125, -6.4849853515625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.0323413610458374, -2.288818359375e-05, -7.62939453125e-06, -0.0028753280639648438, -0.000423431396484375, -6.076910018920898, 0.0], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -6.459602870872914, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.drawn, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "drawn"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -6.357120037078857, -1.33514404296875e-05, -0.0014171600341796875, -0.0013408660888671875, -8.0108642578125e-05, -0.0001354217529296875, -3.814697265625e-05, -3.814697265625e-06, -9.1552734375e-05, -7.82012939453125e-05, -9.1552734375e-05, -1.9073486328125e-06, -0.0343630313873291, -1.9073486328125e-05, -5.7220458984375e-06, -0.001621246337890625, -0.0003452301025390625, -0.0058214860036969185, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "drawn", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.76638240425018, "inferred_code": "class BlessingOfMight(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -6.620565414428711, -0.00023114681243896484, -0.006732940673828125, -0.0012340545654296875, -0.001026153564453125, -3.814697265625e-06, -9.059902367880568e-05, 0.0, 0.0, -0.0001964569091796875, 0.0, -0.00031757354736328125, -3.814697265625e-06, -0.000244140625, -7.62939453125e-06, -0.000659942626953125, -0.028392791748046875, -0.014983177185058594, -0.0004140473320148885, -0.0008980972925201058, -0.0002068268513539806, -2.777576446533203e-05, -8.511480700690299e-05, -3.814697265625e-06, -0.0031958818435668945, -7.62939453125e-06, -0.04173564910888672, 0.0, -0.0010318756103515625, -0.0014553070068359375, -9.72747802734375e-05, -6.103515625e-05, -3.24249267578125e-05, -5.7220458984375e-06, -0.00011444091796875, -4.00543212890625e-05, -0.000102996826171875, -1.9073486328125e-06, -0.03263509273529053, -2.288818359375e-05, -7.62939453125e-06, -0.00262451171875, -0.000453948974609375, -0.004831627476960421, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.785203531744628, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -6.673670291900635, 0.0, -0.011030197143554688, 0.0, -0.001068115234375, -0.0015087127685546875, -0.00049591064453125, -0.0001010894775390625, -3.0517578125e-05, -3.814697265625e-06, -0.0001697540283203125, -3.814697265625e-05, -9.918212890625e-05, -1.9073486328125e-06, -0.03398263454437256, -2.288818359375e-05, -7.62939453125e-06, -0.0024890899658203125, -0.000339508056640625, -0.006249007303267717, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.805601972981094, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 4}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -0.042583465576171875, 0.0, -0.00095367431640625, -0.00139617919921875, -0.000110626220703125, -6.4849853515625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.0323413610458374, -2.288818359375e-05, -7.62939453125e-06, -0.0028753280639648438, -0.000423431396484375, -6.667498588562012, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -7.94314970438063, "inferred_code": "class BlessingOfMight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessing of Might', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - 3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Blessing of Might", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Num", "n": 3}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "BlessingOfMight"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -0.0002613067626953125, -0.000133514404296875, -9.583967766957358e-05, -0.0002609465445857495, -3.719267624546774e-05, -0.00010561384988250211, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0024404525756835938, -2.491474151611328e-05, -4.4226646423339844e-05, -0.000164031982421875, -0.0009632110595703125, -3.814697265625e-06, -5.0663868023548275e-05, 0.0, 0.0, -0.0001068115234375, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0002346038818359375, -5.7220458984375e-06, -0.0006771087646484375, -0.029892921447753906, -0.0158538818359375, -0.00034505134681239724, -0.0009722461691126227, -0.00018453365191817284, -2.777576446533203e-05, -8.273069397546351e-05, -3.814697265625e-06, -0.0031102895736694336, -7.62939453125e-06, -0.042583465576171875, 0.0, -0.00095367431640625, -0.00139617919921875, -0.000110626220703125, -6.4849853515625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.000125885009765625, -4.1961669921875e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.0323413610458374, -2.288818359375e-05, -7.62939453125e-06, -6.0695695877075195, -0.048445701599121094, -0.04100513458251953, -0.0003261566162109375, -0.43881523609161377, -1.9073486328125e-06, -0.1258249282836914, -0.9020633697509766, -0.0003681182861328125, -0.18186581134796143, -6.67572021484375e-05], "choice_history": [80, 159, 295, 88, 138, "Blessing", "Of", "Might", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Blessing", " ", "of", " ", "Might", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 38, 131, 21, 165, "1", "<EOS>", 82, 21, 165, "3", "<EOS>"]}, {"score": -14.84011173248291, "inferred_code": "break\n", "model_output": {"body": [{"_type": "Break"}], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -9.1552734375e-05, -14.83946418762207], "choice_history": [80, 159, 295, 87]}, {"score": -18.77586078643799, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-0.00048160552978515625, -7.43865966796875e-05, -18.775304794311523], "choice_history": [80, 159, 294]}]}
{"index": 12, "beams": [{"score": -0.02128536260533309, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "hole2": "FREE", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -0.00424957275390625, -0.0008487701416015625, -1.8358061424805783e-05, -4.053115480928682e-05, -1.025196434056852e-05, -2.09808349609375e-05, -0.00012217929179314524, 0.0, -0.0021114349365234375, 0.0, -3.6716410249937326e-05, -3.0517578125e-05, -1.1444091796875e-05, -0.00017547607421875, -7.62939453125e-06, 0.0, -0.0005550384521484375, -1.1444091796875e-05, -0.000125885009765625, -8.96453857421875e-05, -0.00218963623046875, -3.814697265625e-06, -0.004038156010210514, 0.0, -3.695486157084815e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -5.647710568328414, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "hole2": "FREE", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 1, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -0.00424957275390625, -0.0008487701416015625, -1.8358061424805783e-05, -4.053115480928682e-05, -1.025196434056852e-05, -2.09808349609375e-05, -0.00012217929179314524, 0.0, -0.0021114349365234375, 0.0, -3.6716410249937326e-05, -3.0517578125e-05, -1.1444091796875e-05, -0.00017547607421875, -7.62939453125e-06, 0.0, -0.0005550384521484375, -1.1444091796875e-05, -0.000125885009765625, -8.96453857421875e-05, -0.00218963623046875, -3.814697265625e-06, -5.630461692810059, 0.0, -5.364409389585489e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "1", "<EOS>", "2", "<EOS>"]}, {"score": -6.019531415140584, "inferred_code": "class <UNK>Raptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "hole2": "FREE", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Raptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -6.000726222991943, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -0.00424957275390625, -0.0008487701416015625, -1.8358061424805783e-05, -4.053115480928682e-05, -1.025196434056852e-05, -2.09808349609375e-05, -0.00012217929179314524, 0.0, -0.0021114349365234375, 0.0, -3.6716410249937326e-05, -3.0517578125e-05, -1.1444091796875e-05, -0.00017547607421875, -7.62939453125e-06, 0.0, -0.0005550384521484375, -1.1444091796875e-05, -0.000125885009765625, -8.96453857421875e-05, -0.00218963623046875, -3.814697265625e-06, -0.004038156010210514, 0.0, -3.695486157084815e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -6.74977946106582, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "hole2": "LEGENDARY", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -0.00424957275390625, -0.0008487701416015625, -1.8358061424805783e-05, -4.053115480928682e-05, -1.025196434056852e-05, -2.09808349609375e-05, -0.00012217929179314524, 0.0, -6.729789733886719, 0.0, -3.0517578125e-05, -1.9073486328125e-05, -1.52587890625e-05, -0.0003032684326171875, -1.1444091796875e-05, 0.0, -0.000423431396484375, -1.33514404296875e-05, -0.000118255615234375, -7.62939453125e-05, -0.0026454925537109375, -3.814697265625e-06, -0.004430881701409817, 0.0, -3.8146949918882456e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -7.144550101856105, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodfen Raptor", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -6.587916851043701, -0.001308441162109375, -9.059865078597795e-06, -1.4901160284352954e-05, -1.871571657829918e-05, -2.09808349609375e-05, -0.0013707876205444336, -3.814697265625e-06, -9.655952453613281e-06, -4.57763671875e-05, -1.9073486328125e-05, 0.0, -0.0002994537353515625, -7.62939453125e-06, -0.00011444091796875, -0.005705833435058594, -0.0010204315185546875, -9.5367431640625e-06, -0.5438656806945801, 0.0, -1.4543432371283416e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Bloodfen", " ", "Raptor", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -7.259778227492454, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodfen Raptor", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -7.092767715454102, -0.008282661437988281, -0.0008069596369750798, -2.2053680368117057e-05, -5.006789251638111e-06, -0.0007228851318359375, -0.00484336307272315, -0.001583099365234375, -0.09362637996673584, -7.82012939453125e-05, -0.029277801513671875, -0.0003814697265625, -0.024584678933024406, 0.0, -2.1457412003655918e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Bloodfen", " ", "Raptor", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -7.263602232240359, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2, stealth=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "hole2": "FREE", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template23", "hole1": 2, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -0.00424957275390625, -0.0008487701416015625, -1.8358061424805783e-05, -4.053115480928682e-05, -1.025196434056852e-05, -2.09808349609375e-05, -0.00012217929179314524, 0.0, -0.0021114349365234375, 0.0, -3.6716410249937326e-05, -3.0517578125e-05, -1.1444091796875e-05, -0.00017547607421875, -7.62939453125e-06, 0.0, -0.0005550384521484375, -1.1444091796875e-05, -0.000125885009765625, -8.96453857421875e-05, -6.233154296875, -5.7220458984375e-05, -0.0003100335889030248, -1.1920928244535389e-07, -3.933771949959919e-05, 0.0, -1.0117448568344116, -0.0024242401123046875, -0.000148773193359375, -0.0006275177001953125, -3.62396240234375e-05, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "3", "<EOS>", "2", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.427790229885247, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Bloodfen Raptor"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -6.958501815795898, -2.288818359375e-05, -9.5367431640625e-06, -0.24857139587402344, -4.57763671875e-05, 0.0, -0.0001659393310546875, 0.0, -2.8491003831732087e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.18112945556640625, -9.5367431640625e-06, -7.82012939453125e-05, -5.447716102935374e-05, -0.00020778179168701172, -1.4901076610840391e-05, -2.86102294921875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0004344662302173674, 0.0, -4.38690185546875e-05, 0.0, -1.1444091796875e-05, 0.0, -2.6702880859375e-05, -5.960462772236497e-07, -0.0002307891845703125, 0.0, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.029474258422851562, -1.9073486328125e-06, -8.0108642578125e-05, -0.00011444091796875, -0.00018310546875, 0.0, -0.0014171600341796875, -7.62939453125e-06, -0.00020692920952569693, 0.0, -6.4372898123110645e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Bloodfen", " ", "Raptor", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -7.472061888851378, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodfen Raptor", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -6.587916851043701, -0.001308441162109375, -9.059865078597795e-06, -1.4901160284352954e-05, -1.871571657829918e-05, -2.09808349609375e-05, -0.0013707876205444336, -3.814697265625e-06, -9.655952453613281e-06, -4.57763671875e-05, -1.9073486328125e-05, 0.0, -0.0002994537353515625, -7.62939453125e-06, -0.00011444091796875, -0.005705833435058594, -0.0010204315185546875, -9.5367431640625e-06, -0.871361255645752, -3.814697265625e-06, -2.694077920750715e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Bloodfen", " ", "Raptor", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "1", "<EOS>", "2", "<EOS>"]}, {"score": -7.808685231136671, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY._reveal, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "hole2": "_reveal", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -0.00424957275390625, -0.0008487701416015625, -1.8358061424805783e-05, -4.053115480928682e-05, -1.025196434056852e-05, -2.09808349609375e-05, -0.00012217929179314524, 0.0, -7.789791107177734, 0.0, -0.0004826784133911133, -0.0001926422119140625, -9.5367431640625e-06, -0.000194549560546875, -9.5367431640625e-06, 0.0, -0.0006198883056640625, -1.9073486328125e-05, -0.000118255615234375, -8.58306884765625e-05, -0.0012149810791015625, -3.814697265625e-06, -0.00404469296336174, 0.0, -3.8146949918882456e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "_reveal", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -7.829091555502593, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "hole2": "FREE", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -0.00424957275390625, -0.0008487701416015625, -1.8358061424805783e-05, -4.053115480928682e-05, -1.025196434056852e-05, -2.09808349609375e-05, -0.00012217929179314524, 0.0, -0.0021114349365234375, 0.0, -3.6716410249937326e-05, -3.0517578125e-05, -1.1444091796875e-05, -0.00017547607421875, -7.62939453125e-06, 0.0, -0.0005550384521484375, -1.1444091796875e-05, -0.000125885009765625, -8.96453857421875e-05, -0.00218963623046875, -3.814697265625e-06, -7.811844348907471, 0.0, -3.695486157084815e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -8.05573021259351, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "hole2": "COMMON", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -0.00424957275390625, -0.0008487701416015625, -1.8358061424805783e-05, -4.053115480928682e-05, -1.025196434056852e-05, -2.09808349609375e-05, -0.00012217929179314524, 0.0, -8.033783912658691, -3.814697265625e-06, -9.918212890625e-05, -2.86102294921875e-05, -2.288818359375e-05, -0.0004138946533203125, -7.62939453125e-06, 0.0, -0.0004730224609375, -9.5367431640625e-06, -0.000102996826171875, -0.0001430511474609375, -0.0030651092529296875, -3.814697265625e-06, -0.005673867650330067, 0.0, -4.053113116242457e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -8.658603680664314, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(3, 2, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodfen Raptor", "_type": "Template19", "hole1": 2, "hole2": "ALL", "hole3": "LEGENDARY"}, {"hole0": 3, "_type": "Template23", "hole1": 2, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -8.147895812988281, -0.0017490386962890625, -6.19869097135961e-05, -8.82148651726311e-06, -4.768367489305092e-06, -3.24249267578125e-05, -0.00010979174840031192, 0.0, -9.632110595703125e-05, -1.9073486328125e-06, -0.00975501537322998, 0.0, -0.0214691162109375, -5.7220458984375e-06, -0.000827191339340061, -1.1920928244535389e-07, -3.790778646362014e-05, 0.0, -0.4260866641998291, -0.001617431640625, -0.04570484161376953, -0.00029754638671875, -5.91278076171875e-05, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 105, 188, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", 109, 200, "3", "<EOS>", "2", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.26170778077448, "inferred_code": "class BloodfenRaptor(MinionCard):\n\n    def __init__(self):\n\n        def __init__(self):\n            super().__init__('Bloodfen Raptor', 2, CHARACTER_CLASS.ALL,\n                CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bloodfen Raptor", "_type": "Template18", "hole1": 2, "hole2": "ALL"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BloodfenRaptor"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -0.0024801704566925764, -7.843663479434326e-05, -4.7444260417250916e-05, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, -1.1444091796875e-05, -6.198883056640625e-06, -7.62939453125e-06, -0.0034427642822265625, -1.71661376953125e-05, -3.504753112792969e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -9.5367431640625e-05, -7.875290393829346, -1.2228775024414062, -0.07409363240003586, -0.0002938508987426758, -5.125998541188892e-06, -5.7220458984375e-06, -4.553759208647534e-05, 0.0, -0.03171741962432861, -1.9073486328125e-06, -0.0033111572265625, -2.288818359375e-05, -0.047446537762880325, 0.0, -1.1920868928427808e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodfen", "Raptor", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 104, 187, "Bloodfen", " ", "Raptor", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 110, 202, "3", "<EOS>", "2", "<EOS>"]}, {"score": -22.943986892700195, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.62396240234375e-05, -22.943939208984375], "choice_history": [80, 159, 294]}]}
{"index": 13, "beams": [{"score": -0.1342503656703684, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -0.03987598419189453, -0.000209808349609375, -0.0006694793701171875, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -7.283687591552734e-05, -2.622604142743512e-06, -0.029005050659179688, -5.14984130859375e-05, -0.0005893707275390625, -4.38690185546875e-05, -2.09808349609375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.91278076171875e-05, -0.00025177001953125, -1.0371197276981547e-05, -1.9073486328125e-06, -0.0003871917724609375, -7.62939453125e-06, -1.9073486328125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0008449554443359375, -1.1444091796875e-05, -4.780292510986328e-05, -7.843971252441406e-05, -0.00038909912109375, -0.00019073486328125, -0.000179290771484375, -1.9073486328125e-06, -0.0020792484283447266, -5.7220458984375e-06, -0.00018310546875, 0.0, -0.00678253173828125, -3.814697265625e-06, -0.0004558563232421875, 0.0, -0.004520416259765625, -1.9073486328125e-06, -9.5367431640625e-05, -9.5367431640625e-06, -3.24249267578125e-05, -0.00047588348388671875, -0.0001354217529296875, -0.0016155242919921875, 0.0, -0.0008106231689453125, -8.96453857421875e-05, -0.0022426843643188477, -4.38690185546875e-05, -0.024216651916503906, -1.9073486328125e-06, -3.814697265625e-05, -7.05718994140625e-05, -8.392333984375e-05, -0.011506066657602787, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -4.489300534147333, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(5, 5, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"hole0": 5, "_type": "Template23", "hole1": 5, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -3.369138717651367, -0.0001373291015625, -0.0013762819580733776, -1.33514404296875e-05, -0.013007220812141895, -1.71661376953125e-05, -0.9417810440063477, -2.09808349609375e-05, -0.15784645080566406, -4.00543212890625e-05, -0.00040459632873535156, -2.86102294921875e-05], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 109, 200, "5", "<EOS>", "5", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -4.647468901712045, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frozen"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -0.03987598419189453, -0.000209808349609375, -0.0006694793701171875, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -7.283687591552734e-05, -2.622604142743512e-06, -0.029005050659179688, -5.14984130859375e-05, -0.0005893707275390625, -4.38690185546875e-05, -2.09808349609375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.91278076171875e-05, -0.00025177001953125, -1.0371197276981547e-05, -1.9073486328125e-06, -0.0003871917724609375, -7.62939453125e-06, -1.9073486328125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0008449554443359375, -1.1444091796875e-05, -4.780292510986328e-05, -7.843971252441406e-05, -0.00038909912109375, -0.00019073486328125, -0.000179290771484375, -1.9073486328125e-06, -0.0020792484283447266, -5.7220458984375e-06, -0.00018310546875, 0.0, -0.00678253173828125, -3.814697265625e-06, -0.0004558563232421875, 0.0, -0.004520416259765625, -1.9073486328125e-06, -9.5367431640625e-05, -9.5367431640625e-06, -3.24249267578125e-05, -0.00047588348388671875, -0.0001354217529296875, -0.0016155242919921875, 0.0, -0.0008106231689453125, -8.96453857421875e-05, -0.0022426843643188477, -4.38690185546875e-05, -3.989773750305176, -3.933906555175781e-06, -5.7220458984375e-06, -0.43408966064453125, -3.24249267578125e-05, -0.000202178955078125, -0.0001239776611328125, -0.12490963935852051, -9.775161743164062e-06], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frozen", "<EOS>"]}, {"score": -4.825800634461984, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -0.03987598419189453, -0.000209808349609375, -0.0006694793701171875, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -7.283687591552734e-05, -2.622604142743512e-06, -0.029005050659179688, -5.14984130859375e-05, -0.0005893707275390625, -4.38690185546875e-05, -2.09808349609375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.91278076171875e-05, -0.00025177001953125, -1.0371197276981547e-05, -1.9073486328125e-06, -0.0003871917724609375, -7.62939453125e-06, -1.9073486328125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0008449554443359375, -1.1444091796875e-05, -4.780292510986328e-05, -7.843971252441406e-05, -0.00038909912109375, -0.00019073486328125, -0.000179290771484375, -1.9073486328125e-06, -0.0020792484283447266, -5.7220458984375e-06, -0.00018310546875, 0.0, -0.00678253173828125, -3.814697265625e-06, -0.0004558563232421875, 0.0, -0.004520416259765625, -1.9073486328125e-06, -9.5367431640625e-05, -9.5367431640625e-06, -3.24249267578125e-05, -0.00047588348388671875, -0.0001354217529296875, -0.0016155242919921875, 0.0, -0.0008106231689453125, -8.96453857421875e-05, -0.0022426843643188477, -4.38690185546875e-05, -0.024216651916503906, -1.9073486328125e-06, -3.814697265625e-05, -7.05718994140625e-05, -8.392333984375e-05, -4.703020095825195, -5.14984130859375e-05], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.901029670163325, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n        player.hero.change_temp_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"hole0": 2, "_type": "Template62"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -0.03987598419189453, -0.000209808349609375, -0.0006694793701171875, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -7.283687591552734e-05, -2.622604142743512e-06, -3.7456445693969727, -6.866455078125e-05, -0.0001239776611328125, -2.09808349609375e-05, -2.86102294921875e-05, -2.09808349609375e-05, -1.1444091796875e-05, -5.7220458984375e-05, -9.34600830078125e-05, -1.4066696166992188e-05, 0.0, -0.0001163482666015625, -3.814697265625e-06, -1.52587890625e-05, -1.1444091796875e-05, -1.33514404296875e-05, -4.00543212890625e-05, 0.0, -0.00145721435546875, -1.9073486328125e-05, -3.647804260253906e-05, -0.00015485286712646484, -0.19133853912353516, -0.0003490447998046875, -0.0004749298095703125, 0.0, -0.002136826515197754, -1.9073486328125e-06, -0.0002193450927734375, -1.9073486328125e-06, -0.027315139770507812, -7.62939453125e-06, -0.0010223388671875, 0.0, -0.0050498247146606445, -3.814697265625e-06, -0.0001316070556640625, -7.62939453125e-06, -3.814697265625e-05, -0.0005559921264648438, -0.0001239776611328125, -0.0018157958984375, 0.0, -0.0007915496826171875, -9.918212890625e-05, -0.002646923065185547, -4.38690185546875e-05, -0.024648666381835938, -1.9073486328125e-06, -3.62396240234375e-05, -7.05718994140625e-05, -8.0108642578125e-05, -0.012371288612484932, -1.33514404296875e-05, -0.012766838073730469, -0.0030879974365234375, -0.8193299770355225, -1.9073486328125e-05], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "3", "<EOS>", 119, 245, "2", "<EOS>"]}, {"score": -5.25367674185668, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.change_temp_attack(3)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -0.03987598419189453, -0.000209808349609375, -0.0006694793701171875, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -7.283687591552734e-05, -2.622604142743512e-06, -0.029005050659179688, -5.14984130859375e-05, -0.0005893707275390625, -4.38690185546875e-05, -2.09808349609375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.91278076171875e-05, -0.00025177001953125, -1.0371197276981547e-05, -1.9073486328125e-06, -0.0003871917724609375, -7.62939453125e-06, -1.9073486328125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0008449554443359375, -1.1444091796875e-05, -4.780292510986328e-05, -7.843971252441406e-05, -0.00038909912109375, -0.00019073486328125, -0.000179290771484375, -1.9073486328125e-06, -0.0020792484283447266, -5.7220458984375e-06, -0.00018310546875, 0.0, -5.040410995483398, -3.814697265625e-06, -2.09808349609375e-05, -1.52587890625e-05, -0.011859893798828125, -3.814697265625e-06, -0.05502796173095703, -5.7220458984375e-06, -0.010658384300768375, -8.0108642578125e-05, -0.00016021728515625, -9.5367431640625e-06, -3.814697265625e-05, -0.0032482147216796875, -0.0007572174072265625, -0.0024089813232421875, 0.0, -0.0022754669189453125, -5.7220458984375e-06, -0.0013811588287353516, -2.288818359375e-05, -0.032141685485839844, 0.0, -7.43865966796875e-05, -8.392333984375e-05, -7.05718994140625e-05, -0.01189600583165884, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.2979539875912565, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template17", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -6.190484046936035, -0.0058746337890625, -0.0008475763606838882, -0.00026345252990722656, -0.0014253228437155485, -2.6702880859375e-05, -0.0006085634231567383, 0.0, -0.009888648986816406, -0.000244140625, -0.0001964569091796875, -1.1444091796875e-05, -5.7220458984375e-06, -3.0517578125e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -6.890296936035156e-05, -5.960462772236497e-07, -0.027788162231445312, -6.866455078125e-05, -0.00078582763671875, -4.38690185546875e-05, -2.09808349609375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.91278076171875e-05, -0.0002880096435546875, -1.0371197276981547e-05, -1.9073486328125e-06, -0.0003604888916015625, -7.62939453125e-06, -1.71661376953125e-05, -2.09808349609375e-05, -1.1444091796875e-05, -1.3470649719238281e-05, 0.0, -0.000827789306640625, -1.33514404296875e-05, -4.780292510986328e-05, -8.034706115722656e-05, -0.00040435791015625, -0.00020599365234375, -0.0001659393310546875, -1.9073486328125e-06, -0.0020945072174072266, -5.7220458984375e-06, -0.000186920166015625, 0.0, -0.0067596435546875, -3.814697265625e-06, -0.000446319580078125, 0.0, -0.004540443420410156, -1.9073486328125e-06, -9.5367431640625e-05, -9.5367431640625e-06, -3.24249267578125e-05, -0.00048065185546875, -0.000133514404296875, -0.00164794921875, 0.0, -0.0008029937744140625, -8.7738037109375e-05, -0.002224564552307129, -4.38690185546875e-05, -0.024237632751464844, -1.9073486328125e-06, -3.814697265625e-05, -7.05718994140625e-05, -8.392333984375e-05, -0.011553392745554447, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.328879516578809, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.add_buff(BuffUntil(minions(), TurnStarted()))\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"hole0": "minions", "_type": "Template77"}, {"hole0": "TurnStarted", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -0.03987598419189453, -0.000209808349609375, -0.0006694793701171875, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -7.283687591552734e-05, -2.622604142743512e-06, -0.029005050659179688, -5.14984130859375e-05, -0.0005893707275390625, -4.38690185546875e-05, -2.09808349609375e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.91278076171875e-05, -0.00025177001953125, -1.0371197276981547e-05, -1.9073486328125e-06, -0.0003871917724609375, -7.62939453125e-06, -1.9073486328125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0008449554443359375, -1.1444091796875e-05, -4.780292510986328e-05, -7.843971252441406e-05, -0.00038909912109375, -0.00019073486328125, -0.000179290771484375, -1.9073486328125e-06, -0.0020792484283447266, -5.7220458984375e-06, -0.00018310546875, 0.0, -0.00678253173828125, -3.814697265625e-06, -0.0004558563232421875, 0.0, -0.004520416259765625, -1.9073486328125e-06, -9.5367431640625e-05, -9.5367431640625e-06, -3.24249267578125e-05, -0.00047588348388671875, -0.0001354217529296875, -0.0016155242919921875, 0.0, -0.0008106231689453125, -8.96453857421875e-05, -0.0022426843643188477, -4.38690185546875e-05, -3.989773750305176, -3.933906555175781e-06, -5.7220458984375e-06, -1.1376152038574219, -0.029294967651367188, -0.002460479736328125, 0.0, -0.0004998445510864258, -0.0063571929931640625, -3.814697265625e-06, -0.0029468536376953125, -0.25048065185546875, -0.00075531005859375, -0.001636443194001913, -0.034990906715393066, -0.6285886764526367, -1.9073486328125e-06, -0.01433516200631857, -0.1308070421218872, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "add_buff", "<EOS>", 282, 40, 136, 19, 160, "Buff", "Until", "<EOS>", 283, 68, 260, "minions", "<EOS>", 68, 260, "Turn", "Started", "<EOS>"]}, {"score": -6.756223897927839, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(3)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -0.03987598419189453, -0.000209808349609375, -0.0006694793701171875, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -7.283687591552734e-05, -2.622604142743512e-06, -3.7456445693969727, -6.866455078125e-05, -0.0001239776611328125, -2.09808349609375e-05, -2.86102294921875e-05, -2.09808349609375e-05, -1.1444091796875e-05, -5.7220458984375e-05, -9.34600830078125e-05, -1.4066696166992188e-05, 0.0, -0.0001163482666015625, -3.814697265625e-06, -1.52587890625e-05, -1.1444091796875e-05, -1.33514404296875e-05, -4.00543212890625e-05, 0.0, -0.00145721435546875, -1.9073486328125e-05, -3.647804260253906e-05, -0.00015485286712646484, -2.7327632904052734, -0.011052131652832031, -0.018856918439269066, -3.0517578125e-05, -0.0004177093505859375, -1.9073486328125e-06, -0.000270843505859375, -4.00543212890625e-05, -2.47955322265625e-05, -2.288818359375e-05, -0.004673004150390625, 0.0, -7.82012939453125e-05, -3.814697265625e-06, -0.0067138671875, -1.9073486328125e-06, -0.12325993180274963, -5.125993993715383e-06, -0.0481487512588501, -0.000255584716796875, -4.1961669921875e-05, -0.0003643035888671875, -8.392333984375e-05, -0.014667568728327751, -1.71661376953125e-05], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.895176022169608, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -6.760698318481445, -0.013593316078186035, -1.1444091796875e-05, -2.4437606043647975e-05, -1.1444091796875e-05, -0.0004367828369140625, -1.9073486328125e-06, -0.02609539031982422, -9.72747802734375e-05, -0.00043487548828125, -1.71661376953125e-05, -3.814697265625e-06, -4.1961669921875e-05, -4.76837158203125e-05, -7.62939453125e-06, -2.09808349609375e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -9.560585021972656e-05, -2.503394853192731e-06, -0.030666351318359375, -4.9591064453125e-05, -0.0006504058837890625, -4.57763671875e-05, -1.9073486328125e-05, -1.52587890625e-05, -5.7220458984375e-06, -6.103515625e-05, -0.00023651123046875, -1.0013571227318607e-05, -1.9073486328125e-06, -0.0003814697265625, -7.62939453125e-06, -1.9073486328125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0, -0.0008525848388671875, -1.1444091796875e-05, -4.780292510986328e-05, -7.843971252441406e-05, -0.0003833770751953125, -0.0001926422119140625, -0.0001850128173828125, -1.9073486328125e-06, -0.0020716190338134766, -5.7220458984375e-06, -0.00018310546875, 0.0, -0.0068912506103515625, -3.814697265625e-06, -0.0004634857177734375, 0.0, -0.004535675048828125, -1.9073486328125e-06, -9.5367431640625e-05, -9.5367431640625e-06, -3.24249267578125e-05, -0.00047588348388671875, -0.000133514404296875, -0.0016269683837890625, 0.0, -0.0008029937744140625, -8.7738037109375e-05, -0.0022350549697875977, -4.38690185546875e-05, -0.02421092987060547, -1.9073486328125e-06, -3.814697265625e-05, -7.05718994140625e-05, -8.392333984375e-05, -0.011497125960886478, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", " ", "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -7.02148791730292, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(3)\n        player.hero.change_temp_attack(3)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}, {"hole0": 3, "_type": "Template62"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -0.03987598419189453, -0.000209808349609375, -0.0006694793701171875, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -7.283687591552734e-05, -2.622604142743512e-06, -3.7456445693969727, -6.866455078125e-05, -0.0001239776611328125, -2.09808349609375e-05, -2.86102294921875e-05, -2.09808349609375e-05, -1.1444091796875e-05, -5.7220458984375e-05, -9.34600830078125e-05, -1.4066696166992188e-05, 0.0, -0.0001163482666015625, -3.814697265625e-06, -1.52587890625e-05, -1.1444091796875e-05, -1.33514404296875e-05, -4.00543212890625e-05, 0.0, -0.00145721435546875, -1.9073486328125e-05, -3.647804260253906e-05, -0.00015485286712646484, -2.297823905944824, -2.09808349609375e-05, -0.1734600067138672, -0.0001354217529296875, -1.9073486328125e-05, -1.1444091796875e-05, -0.12662315368652344, 0.0, -7.05718994140625e-05, -9.5367431640625e-06, -0.01435863971710205, -1.9073486328125e-06, -0.02900726906955242, -9.536738616588991e-07, -0.038569092750549316, -0.0034742355346679688, -2.6702880859375e-05, -0.0002288818359375, -5.340576171875e-05, -0.028208589181303978, -1.9073486328125e-05, -0.0067596435546875, -0.0007762908935546875, -0.5025281310081482, -0.0048732757568359375], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "3", "<EOS>", 119, 245, "3", "<EOS>"]}, {"score": -7.120170710566526, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -6.306110382080078, -0.7993202209472656, -0.004667396191507578, -9.536741345073096e-06, -0.0004316828562878072, -1.9073486328125e-05, -0.004123687744140625, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>"]}, {"score": -7.746246799844812, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(5, 5, auras=[Aura(ManaChange(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"hole0": 5, "_type": "Template23", "hole1": 5, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"args": [{"_type": "Num", "n": 1}], "_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -3.369138717651367, -0.0001373291015625, -0.0013762819580733776, -1.33514404296875e-05, -0.013007220812141895, -1.71661376953125e-05, -1.204336166381836, -0.0003014802932739258, -5.53131103515625e-05, -0.001140594482421875, -0.005726814270019531, -0.0003566741943359375, -2.6702880859375e-05, -0.00016021728515625, -3.4332275390625e-05, -0.005151867866516113, -3.254413604736328e-05, -0.0001220703125, -0.4679412841796875, -0.00200653076171875, -7.05718994140625e-05, -0.0001621246337890625, -0.04468715190887451, -0.38199281692504883, -4.57763671875e-05, -0.0001201629638671875, -0.2052898406982422, -3.814697265625e-06, -1.4137862920761108, -5.7220458984375e-06, -0.14673805236816406, -0.003360748291015625, -0.4711490273475647, -0.0022612810134887695, -2.0265579223632812e-06], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 109, 200, "5", "<EOS>", "5", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 40, 136, 19, 160, "Mana", "Change", "<EOS>", 282, 47, 165, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -8.508404299635004, "inferred_code": "class Bloodlust(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bloodlust', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(5, 5, change_temp_attack=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bloodlust", "_type": "Template15", "hole1": 5, "hole2": "SHAMAN"}, {"hole0": 5, "_type": "Template23", "hole1": 5, "hole2": "change_temp_attack", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Bloodlust"}], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -7.05718994140625e-05, -9.34600830078125e-05, -5.91278076171875e-05, -0.00014590153296012431, -0.0001587810111232102, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -0.0002251861587865278, -8.32080768304877e-05, -1.251697449333733e-05, -6.866455078125e-05, -0.0027980804443359375, -6.103515625e-05, -2.3841830625315197e-06, -0.0012475252151489258, -0.0001113352773245424, -9.5367431640625e-06, -0.000179290771484375, -3.814697265625e-06, -3.369138717651367, -0.0001373291015625, -0.0013762819580733776, -1.33514404296875e-05, -0.013007220812141895, -1.71661376953125e-05, -4.414057731628418, -1.33514404296875e-05, -0.7027187347412109, -0.00092315673828125, -0.0009136199951171875, -0.000598907470703125], "choice_history": [80, 159, 295, 88, 138, "Bloodlust", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Bloodlust", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", 109, 200, "5", "<EOS>", "5", "<EOS>", "change_temp_attack", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -21.599071502685547, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.340576171875e-05, -1.71661376953125e-05, -21.599000930786133], "choice_history": [80, 159, 294]}]}
{"index": 14, "beams": [{"score": -0.11035572223590151, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.09429740905761719, -0.0001163482666015625, -2.5033637939486653e-05, -1.4662729881820269e-05, -1.9073486328125e-05, -2.09808349609375e-05, -0.0005120038986206055, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.00012814998626708984, -2.09808349609375e-05, -0.000286102294921875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -0.005152702331542969, -0.0016876342706382275, -0.0011081695556640625, -0.0001316070556640625, -7.510135219490621e-06, -1.9073486328125e-06, -0.00017392616427969187, 0.0, -0.0047185420989990234, -0.00024235248565673828, -0.00104522705078125, -2.47955322265625e-05, -0.0001735687255859375, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -2.5850735639532942, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "_type": "Template6", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -2.566624641418457, -0.00035858154296875, -0.00021610308613162488, -5.471661643241532e-05, -1.9311904907226562e-05, -2.6702880859375e-05, -0.00017559458501636982, 0.0, -0.00015020370483398438, 0.0, -0.0072383880615234375, -1.9073486328125e-05, -4.6490364184137434e-05, -5.7220458984375e-06, -9.679776121629402e-05, 0.0, -0.007573366165161133, -0.00018894672393798828, -0.0015058517456054688, -3.24249267578125e-05, -0.0004024505615234375, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.109943374038714, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Bluegill Warrior", "hole2": "FREE", "_type": "Template34", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.073309898376465, -0.000186920166015625, -0.0001513957977294922, -9.5367431640625e-06, -0.000232696533203125, -5.53131103515625e-05, -5.7220458984375e-06, -0.0015624761581420898, -7.62939453125e-06, -0.0002536773681640625, -0.00348663330078125, -0.0004940032958984375, -1.0728831512096804e-05, -0.00016319373389706016, -5.9604644775390625e-06, -2.47955322265625e-05, -0.00047314015682786703, 0.0, -0.00572967529296875, 0.0, -0.0008702247287146747, -5.7220458984375e-06, -3.0517578125e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -3.62396240234375e-05, -7.748603820800781e-06, -0.01397705078125, -0.0018576314905658364, -0.000751495361328125, -9.5367431640625e-05, -7.152501439122716e-06, -1.9073486328125e-06, -0.00012671931472141296, 0.0, -0.004464626312255859, -0.00018703937530517578, -0.000759124755859375, -2.288818359375e-05, -0.000179290771484375, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.351144311131968, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.09429740905761719, -0.0001163482666015625, -2.5033637939486653e-05, -1.4662729881820269e-05, -1.9073486328125e-05, -2.09808349609375e-05, -0.0005120038986206055, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.00012814998626708984, -2.09808349609375e-05, -0.000286102294921875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -6.246424674987793, -0.00046765804290771484, -0.0013675689697265625, -0.000118255615234375, -4.482088115764782e-05, -3.814697265625e-06, -0.00023531897750217468, 0.0, -0.0051839351654052734, -0.0001220703125, -0.0008325576782226562, -1.9073486328125e-05, -0.0004367828369140625, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.519945653993993, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, minion_type\n            =MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "minion_type", "hole2": "ALL", "hole6": "MURLOC", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 2, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.404085159301758, -0.0002231597900390625, -0.0005470209871418774, -3.612041473388672e-05, -8.940695806813892e-06, -9.5367431640625e-06, -0.0003794408403337002, 0.0, -4.6133995056152344e-05, -3.814697265625e-06, -0.0095977783203125, -3.814697265625e-06, -4.029273986816406e-05, -1.9073486328125e-06, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -0.035986900329589844, 0.0, -1.0200238227844238, 0.0, -0.0010089874267578125, -9.5367431640625e-06, -7.05718994140625e-05, -5.7220458984375e-06, -0.04311656951904297, -1.71661376953125e-05, -0.003971761558204889, 0.0, -0.0002416372299194336, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -6.6405542645606985, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, BEAST=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "BEAST", "hole2": "ALL", "hole6": "MURLOC", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 2, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.404085159301758, -0.0002231597900390625, -0.0005470209871418774, -3.612041473388672e-05, -8.940695806813892e-06, -9.5367431640625e-06, -0.0003794408403337002, 0.0, -4.6133995056152344e-05, -3.814697265625e-06, -0.0095977783203125, -3.814697265625e-06, -4.029273986816406e-05, -1.9073486328125e-06, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -0.035986900329589844, 0.0, -0.6356539726257324, 0.0, -0.5375289916992188, -0.0007381439208984375, -0.0012407302856445312, -9.5367431640625e-06, -0.009227752685546875, -1.1444091796875e-05, -0.004389632493257523, 0.0, -0.0002741813659667969, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "BEAST", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -6.700027691649659, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.09429740905761719, -0.0001163482666015625, -2.5033637939486653e-05, -1.4662729881820269e-05, -1.9073486328125e-05, -2.09808349609375e-05, -0.0005120038986206055, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.00012814998626708984, -2.09808349609375e-05, -0.000286102294921875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -0.005152702331542969, -0.0016876342706382275, -0.0011081695556640625, -0.0001316070556640625, -7.510135219490621e-06, -1.9073486328125e-06, -0.00017392616427969187, 0.0, -6.593959331512451, -0.00026237964630126953, -0.0013914108276367188, -1.33514404296875e-05, -0.0002499818801879883, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.148124693304446, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.Count)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "Count", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.09429740905761719, -0.0001163482666015625, -2.5033637939486653e-05, -1.4662729881820269e-05, -1.9073486328125e-05, -2.09808349609375e-05, -0.0005120038986206055, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.00012814998626708984, -2.09808349609375e-05, -0.000286102294921875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -7.041791915893555, -0.0011094807414337993, -0.0008983612060546875, -0.0004730224609375, -1.656983295106329e-05, -3.814697265625e-06, -0.00016868070815689862, 0.0, -0.006294846534729004, -0.0003377199172973633, -0.00098419189453125, -1.71661376953125e-05, -0.000141143798828125, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "Count", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.3023152343475815, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.09429740905761719, -0.0001163482666015625, -2.5033637939486653e-05, -1.4662729881820269e-05, -1.9073486328125e-05, -2.09808349609375e-05, -0.0005120038986206055, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.00012814998626708984, -2.09808349609375e-05, -0.000286102294921875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -7.190129280090332, -0.0013773441314697266, -0.007228851318359375, -2.09808349609375e-05, -6.079635568312369e-06, -1.9073486328125e-06, -0.00013518329069484025, 0.0, -0.005625128746032715, -0.00016987323760986328, -0.0014219284057617188, -2.09808349609375e-05, -0.0002899169921875, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.592612253951295, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, spell_targetable=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "spell_targetable", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.09429740905761719, -0.0001163482666015625, -2.5033637939486653e-05, -1.4662729881820269e-05, -1.9073486328125e-05, -2.09808349609375e-05, -0.0005120038986206055, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.00012814998626708984, -2.09808349609375e-05, -0.000286102294921875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -0.005152702331542969, -0.0016876342706382275, -0.0011081695556640625, -0.0001316070556640625, -7.510135219490621e-06, -1.9073486328125e-06, -0.00017392616427969187, 0.0, -7.4336113929748535, 0.0, -0.008968353271484375, -5.7220458984375e-05, -0.0458221435546875, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "spell_targetable", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.746756894497587, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=MINION_TYPE.MURLOC)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.09429740905761719, -0.0001163482666015625, -2.5033637939486653e-05, -1.4662729881820269e-05, -1.9073486328125e-05, -2.09808349609375e-05, -0.0005120038986206055, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.00012814998626708984, -2.09808349609375e-05, -0.000286102294921875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -0.005152702331542969, -0.0016876342706382275, -0.0011081695556640625, -0.0001316070556640625, -7.510135219490621e-06, -1.9073486328125e-06, -0.00017392616427969187, 0.0, -0.0047185420989990234, -0.00024235248565673828, -7.476265907287598, -0.0874176025390625, -3.4332275390625e-05, 0.0, -0.05612015724182129, -9.5367431640625e-06, -0.014773368835449219, -0.003025765996426344], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>"]}, {"score": -7.792100170187915, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, p):\n        return Minion(2, 1, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 2, "_type": "Template65", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.09429740905761719, -0.0001163482666015625, -2.5033637939486653e-05, -1.4662729881820269e-05, -1.9073486328125e-05, -2.09808349609375e-05, -0.0005120038986206055, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.00012814998626708984, -2.09808349609375e-05, -0.000286102294921875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -0.005152702331542969, -0.0016876342706382275, -7.012115478515625, -0.0002422332763671875, -7.05718994140625e-05, -2.6226038244203664e-05, -1.52587890625e-05, -0.0006847381591796875, 0.0, -9.5367431640625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.18888187408447266, -1.4066696166992188e-05, -9.5367431640625e-05, -0.019439697265625, -0.00308990478515625, -2.396077434241306e-05, -2.3841855067985307e-07, -0.00022279388213064522, 0.0, -0.4320790767669678, -0.011134147644042969, -0.0204925537109375, -5.340576171875e-05, -0.0005855560302734375, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.891315554122222, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "_type": "Template6", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -2.566624641418457, -0.00035858154296875, -0.00021610308613162488, -5.471661643241532e-05, -1.9311904907226562e-05, -2.6702880859375e-05, -0.00017559458501636982, 0.0, -0.00015020370483398438, 0.0, -5.323050498962402, -7.62939453125e-06, -3.18284728564322e-05, 0.0, -0.00026345252990722656, 0.0], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -8.379475327040375, "inferred_code": "class BluegillWarrior(MinionCard):\n\n    def __init__(self):\n        super().__init__('Bluegill Warrior', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Bluegill Warrior", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "BluegillWarrior"}], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000102996826171875, -3.814697265625e-06, -1.8715796613832936e-05, -8.940672159951646e-06, -2.6225747205899097e-05, -3.814697265625e-06, -0.0001201629638671875, 0.0, -1.1920928244535389e-07, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -8.361950874328613, -0.0004749298095703125, -0.0002109781780745834, -6.175017915666103e-05, -6.079673767089844e-06, -4.38690185546875e-05, -9.417456021765247e-05, -1.9073486328125e-06, -3.635883331298828e-05, -2.09808349609375e-05, -0.003047943115234375, -2.47955322265625e-05, -5.8527981309453025e-05, -1.33514404296875e-05, -0.00019085340318270028, -1.9073486328125e-06, -0.00988316535949707, -0.00023663043975830078, -0.0020875930786132812, -5.14984130859375e-05, -0.0006389617919921875, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Bluegill", "Warrior", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Bluegill", " ", "Warrior", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -21.935964584350586, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, -3.814697265625e-06, -21.93596076965332], "choice_history": [80, 159, 294]}]}
{"index": 15, "beams": [{"score": -0.07186145236801167, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Boar", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -0.05750274658203125, -0.0008525848388671875, -6.19869097135961e-05, -0.001123666763305664, -0.0037881135940551758, -5.340576171875e-05, -9.5367431640625e-06, -6.103515625e-05, -7.62939453125e-06, 0.0, -0.000179290771484375, -1.71661376953125e-05, -0.0005588531494140625, -0.0001850128173828125, -0.0061969757080078125, -2.6702880859375e-05, -3.346055746078491e-05, -1.9073486328125e-06, -9.22542967600748e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Boar", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -3.420226365460394, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 1, "_type": "Template72", "hole1": 1}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -3.1218366622924805, -0.0001010894775390625, -0.0028727054595947266, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -7.82012939453125e-05, 0.0, -1.52587890625e-05, -8.7738037109375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.016763687133789062, -3.24249267578125e-05, 0.0, -8.58306884765625e-05, -3.814697265625e-06, -2.0265558760002023e-06, 0.0, -0.0001735687255859375, 0.0, -0.02072906494140625, -0.0001125335693359375, -3.24249267578125e-05, -0.030515572056174278, -5.7220458984375e-06, -3.814697265625e-05, -7.62939453125e-06, -0.010989760048687458, 0.0, -5.14984130859375e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.000217437744140625, 0.0, -0.00220489501953125, -1.9073486328125e-06, -0.001186370849609375, -3.62396240234375e-05, -5.7220458984375e-06, -0.0001392364501953125, -0.0018825531005859375, -5.7220458984375e-06, -0.000194549560546875, -0.000141143798828125, -0.001617431640625, -0.000659942626953125, -0.0040874481201171875, 0.0, -0.043745994567871094, -3.814697265625e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0019073486328125, -1.9073486328125e-06, -0.00083160400390625, -3.24249267578125e-05, -0.11067867279052734, -0.000652313232421875, -8.392333984375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -0.0009937286376953125, -5.7220458984375e-06, -0.000286102294921875, -1.9073486328125e-06, -0.00031280517578125, -0.03528273105621338, -1.9073486328125e-06, -3.24249267578125e-05, -0.0060100555419921875, -0.0007343292236328125, -1.9311675714561716e-05, -6.31808916295995e-06, -0.00040618114871904254, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Boar", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 122, 254, "1", "<EOS>", "1", "<EOS>"]}, {"score": -5.529973665328271, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 0, CHARACTER_CLASS.COMMON, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Boar", "_type": "Template13", "hole1": "COMMON", "hole2": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -4.633474349975586, -0.03864002227783203, -0.14234794676303864, -0.033314578235149384, -0.19878578186035156, -0.0022296905517578125, -0.47777724266052246, -0.001506805419921875, -0.0005931854248046875, -0.000164031982421875, -2.029724419116974e-05, -3.814697265625e-06, -4.887930117547512e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Boar", "<EOS>", "COMMON", "<EOS>", "COMMON", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.070084097420022, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Boar", "hole2": "minion_type", "_type": "Template7", "hole1": "RARE", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -0.05750274658203125, -0.0008525848388671875, -6.19869097135961e-05, -0.001123666763305664, -6.000905990600586, -0.000125885009765625, -0.0002536773681640625, -9.918212890625e-05, -9.5367431640625e-06, 0.0, -0.0002040863037109375, -1.71661376953125e-05, -0.0005397796630859375, -0.00017547607421875, -0.00696563720703125, -2.288818359375e-05, -3.446638584136963e-05, -1.9073486328125e-06, -7.831021503079683e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Boar", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.092528046708594, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Boar", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -0.05750274658203125, -0.0008525848388671875, -6.19869097135961e-05, -0.001123666763305664, -0.0037881135940551758, -5.340576171875e-05, -9.5367431640625e-06, -6.103515625e-05, -7.62939453125e-06, 0.0, -0.000179290771484375, -1.71661376953125e-05, -0.0005588531494140625, -0.0001850128173828125, -5.282981872558594, -0.01386260986328125, -0.0001002233475446701, 0.0, -8.783303201198578e-05, 0.0, -0.729191780090332, -5.841255187988281e-06, -0.00052642822265625, -0.00018310546875, -7.62939453125e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Boar", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.141069975764822, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 0, CHARACTER_CLASS.COMMON, CARD_RARITY.\n            minion_type, False)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Boar", "_type": "Template13", "hole1": "COMMON", "hole2": "minion_type"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -4.633474349975586, -0.03864002227783203, -0.14234794676303864, -0.033314578235149384, -0.19878578186035156, -0.0022296905517578125, -1.0779035091400146, -0.00032806396484375, -0.012511253356933594, -0.0004100799560546875, -1.0091811418533325e-05, -1.9073486328125e-06, -3.577566531021148e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Boar", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.204625667672644, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Boar", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -0.05750274658203125, -0.0008525848388671875, -6.19869097135961e-05, -0.001123666763305664, -0.0037881135940551758, -5.340576171875e-05, -9.5367431640625e-06, -6.103515625e-05, -7.62939453125e-06, 0.0, -0.000179290771484375, -1.71661376953125e-05, -0.0005588531494140625, -0.0001850128173828125, -5.282981872558594, -0.01386260986328125, -0.0001002233475446701, 0.0, -8.783303201198578e-05, 0.0, -0.8412685394287109, -6.29425048828125e-05, -0.000244140625, -0.0004138946533203125, -9.1552734375e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Boar", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.844979591743595, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Boar", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -4.633474349975586, -0.03864002227783203, -0.14234794676303864, -0.033314578235149384, -1.9157705307006836, -0.05663299560546875, -0.0033473968505859375, -0.019639968872070312, -0.000545501708984375, -0.0001239776611328125, -2.282857894897461e-05, -3.814697265625e-06, -4.6495115384459496e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Boar", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.284324192508613, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -3.1218366622924805, -0.0001010894775390625, -0.0028727054595947266, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -7.82012939453125e-05, 0.0, -1.52587890625e-05, -8.7738037109375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.016763687133789062, -3.24249267578125e-05, 0.0, -8.58306884765625e-05, -3.814697265625e-06, -2.0265558760002023e-06, 0.0, -0.0001735687255859375, 0.0, -3.964998245239258, -6.67572021484375e-05, -4.57763671875e-05, -0.001738585764542222, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -0.16971896588802338, 0.0, -7.43865966796875e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000152587890625, -1.1920928244535389e-07, -0.0003814697265625, -5.7220458984375e-06, -8.58306884765625e-05, -1.9073486328125e-06, -3.814697265625e-06, -6.103515625e-05, -0.00021946430206298828, -5.7220458984375e-06, -0.0001392364501953125, -6.103515625e-05, -0.000186920166015625, -0.001407623291015625, -0.000789642333984375, 0.0, -0.000858306884765625, -1.33514404296875e-05, -5.95959136262536e-07, 0.0, -5.7231736718676984e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Boar", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.3422294643200985, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__(' Boar', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": " Boar", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -4.633474349975586, -0.03864002227783203, -2.47977876663208, -0.0024082649033516645, -0.0004367828369140625, -0.11325740814208984, -0.049363136291503906, -0.008148193359375, -0.014825820922851562, -0.0006237030029296875, -0.0001277923583984375, -2.6563182473182678e-05, -3.814697265625e-06, -3.8154321373440325e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, " ", "Boar", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.664628050074953, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Boar Boar", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -0.05750274658203125, -0.0008525848388671875, -6.19869097135961e-05, -7.574124336242676, -0.012542557902634144, -1.33514404296875e-05, -0.01123809814453125, -9.5367431640625e-06, -5.7220458984375e-06, -9.72747802734375e-05, -7.62939453125e-06, 0.0, -0.00011444091796875, -1.33514404296875e-05, -0.0004215240478515625, -0.000247955322265625, -0.006077766418457031, -2.86102294921875e-05, -5.111098289489746e-05, 0.0, -0.00010834273416548967, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Boar", " ", "Boar", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -8.252612462692468, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.ALL,\n            False, COMMON=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Boar", "hole2": "COMMON", "_type": "Template7", "hole1": "ALL", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -0.05750274658203125, -0.0008525848388671875, -6.19869097135961e-05, -0.001123666763305664, -8.15031623840332, -0.00023651123046875, -0.027643203735351562, -0.0002613067626953125, -0.003981590270996094, -1.9073486328125e-06, -0.000797271728515625, -9.5367431640625e-06, -0.0015048980712890625, -0.0002536773681640625, -0.006791114807128906, -4.76837158203125e-05, -2.3730099201202393e-05, 0.0, -9.368435712531209e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Boar", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -8.698409724736393, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Increase', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Increase", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Boar"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -8.0108642578125e-05, -0.0003414154052734375, -4.768360213347478e-06, -3.802750143222511e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.00013744831085205078, -4.76837158203125e-05, -0.000102996826171875, -0.0002155303955078125, -4.633474349975586, -0.03864002227783203, -3.5069680213928223, -0.12891557812690735, -0.24766848981380463, -0.1017313003540039, -0.004613995552062988, -0.03450202941894531, -0.00060272216796875, -0.0001316070556640625, -4.0683895349502563e-05, -3.814697265625e-06, -6.0797028709203005e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Boar", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Increase", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -19.734648644924164, "inferred_code": "self.target.add_buff(Buff(()))\n", "model_output": {"body": [{"hole0": "", "_type": "Template50"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -2.288818359375e-05, -14.450517654418945, -5.129724979400635, -0.15432590246200562], "choice_history": [80, 159, 295, 117, 226, "<EOS>"]}, {"score": -21.497352600097656, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -4.76837158203125e-05, -21.497295379638672], "choice_history": [80, 159, 294]}]}
{"index": 16, "beams": [{"score": -0.224512284998319, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}, {"hole0": "<UNK>", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -0.0076045989990234375, 0.0, -0.0001010894775390625, 0.0, -0.0007381439208984375, 0.0, -0.0073375701904296875, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -0.0002079010009765625, -0.0001773834228515625, -4.6133995056152344e-05, 0.0, -0.0013027191162109375, 0.0, -1.1444091796875e-05, -0.0001678466796875, -5.7220458984375e-06, -0.0008013248443603516, 0.0, -0.000217437744140625, -3.814697265625e-06, -9.34600830078125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -4.76837158203125e-05, -0.017368555068969727, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.011169672012329102, -6.914134246471804e-06, -0.019922256469726562, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -7.867813110351562e-06, 0.0, -1.9073486328125e-06, -3.576277322281385e-06, 0.0, -3.62396240234375e-05, -0.0019387006759643555, -9.059865078597795e-06, -0.10877799987792969, -9.5367431640625e-06, -2.09808349609375e-05, -0.000133514404296875, -4.76837158203125e-05, -9.5367431640625e-06, -1.33514404296875e-05, -7.82012939453125e-05, -9.34600830078125e-05, -5.829334259033203e-05, -1.9073486328125e-06, -4.9591064453125e-05, -1.1444091796875e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -0.0009442567825317383, -8.821474693831988e-06, -0.0003261566162109375, -1.9073486328125e-06, -0.0020475387573242188, -0.0025691986083984375, -0.015387005172669888, -1.33514404296875e-05, -0.013118743896484375, -0.00547027587890625, -1.9073486328125e-05, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 117, 226, "<UNK>", "<EOS>"]}, {"score": -4.592284559648952, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(3)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template63"}}, {"hole0": "<UNK>", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -0.0076045989990234375, 0.0, -0.0001010894775390625, 0.0, -0.0007381439208984375, 0.0, -0.0073375701904296875, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -0.0002079010009765625, -0.0001773834228515625, -4.6133995056152344e-05, 0.0, -0.0013027191162109375, 0.0, -1.1444091796875e-05, -0.0001678466796875, -5.7220458984375e-06, -0.0008013248443603516, 0.0, -0.000217437744140625, -3.814697265625e-06, -9.34600830078125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -4.76837158203125e-05, -0.017368555068969727, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.011169672012329102, -6.914134246471804e-06, -0.019922256469726562, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -7.867813110351562e-06, 0.0, -1.9073486328125e-06, -3.576277322281385e-06, 0.0, -3.62396240234375e-05, -0.0019387006759643555, -9.059865078597795e-06, -0.10877799987792969, -9.5367431640625e-06, -2.09808349609375e-05, -0.000133514404296875, -4.76837158203125e-05, -9.5367431640625e-06, -1.33514404296875e-05, -7.82012939453125e-05, -9.34600830078125e-05, -5.829334259033203e-05, -1.9073486328125e-06, -4.9591064453125e-05, -1.1444091796875e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -0.0009442567825317383, -8.821474693831988e-06, -0.0003261566162109375, -1.9073486328125e-06, -0.0020475387573242188, -0.0025691986083984375, -4.360067844390869, -6.29425048828125e-05, -0.036407470703125, -0.005223274230957031, -1.537799835205078e-05, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "3", "<EOS>", 117, 226, "<UNK>", "<EOS>"]}, {"score": -4.662521410170676, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n        self.target.increase_health(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}, {"hole0": "<UNK>", "_type": "Template50"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -0.0076045989990234375, 0.0, -0.0001010894775390625, 0.0, -0.0007381439208984375, 0.0, -0.0073375701904296875, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -0.0002079010009765625, -0.0001773834228515625, -4.6133995056152344e-05, 0.0, -0.0013027191162109375, 0.0, -1.1444091796875e-05, -0.0001678466796875, -5.7220458984375e-06, -0.0008013248443603516, 0.0, -0.000217437744140625, -3.814697265625e-06, -9.34600830078125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -4.76837158203125e-05, -0.017368555068969727, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.011169672012329102, -6.914134246471804e-06, -0.019922256469726562, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -7.867813110351562e-06, 0.0, -1.9073486328125e-06, -3.576277322281385e-06, 0.0, -3.62396240234375e-05, -0.0019387006759643555, -9.059865078597795e-06, -2.516848564147949, -0.0010890960693359375, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -2.86102294921875e-05, -5.7220458984375e-06, -5.7220458984375e-05, -1.52587890625e-05, -1.8715856640483253e-05, -1.9073486328125e-06, -6.29425048828125e-05, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -0.0007020235061645508, -8.106212590064388e-06, -0.002071380615234375, -5.7220458984375e-06, -0.015676498413085938, -0.0028018951416015625, -0.008374128490686417, -5.7220458984375e-06, -1.5246925354003906, -0.0064144134521484375, -4.398822784423828e-05, -1.33514404296875e-05, -0.008116722106933594, -3.814697265625e-06, -0.0023860931396484375, -9.72747802734375e-05, -2.47955322265625e-05, -7.62939453125e-06, -0.0001220703125, -3.814697265625e-06, -0.000560760498046875, -1.33514404296875e-05, -1.9073486328125e-06, -6.103515625e-05, -4.57763671875e-05, -1.9073486328125e-06, -0.32709574699401855, -1.9073486328125e-06, -4.38690185546875e-05, -6.4849853515625e-05, -1.33514404296875e-05, -0.16948486864566803, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 117, 226, "<UNK>", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -5.061288333866024, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.add_buff(Buff(SpellDamage(1)))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"args": [{"hole0": "Buff", "_type": "Template66", "hole1": "SpellDamage", "hole2": 1}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -0.0076045989990234375, 0.0, -0.0001010894775390625, 0.0, -0.0007381439208984375, 0.0, -0.0073375701904296875, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -0.0002079010009765625, -0.0001773834228515625, -4.6133995056152344e-05, 0.0, -0.0013027191162109375, 0.0, -1.1444091796875e-05, -0.0001678466796875, -5.7220458984375e-06, -0.0008013248443603516, 0.0, -0.000217437744140625, -3.814697265625e-06, -9.34600830078125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -4.76837158203125e-05, -0.017368555068969727, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.011169672012329102, -6.914134246471804e-06, -0.019922256469726562, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -7.867813110351562e-06, 0.0, -1.9073486328125e-06, -3.576277322281385e-06, 0.0, -3.62396240234375e-05, -0.0019387006759643555, -9.059865078597795e-06, -2.516848564147949, -0.0010890960693359375, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -2.86102294921875e-05, -5.7220458984375e-06, -5.7220458984375e-05, -1.52587890625e-05, -1.8715856640483253e-05, -1.9073486328125e-06, -6.29425048828125e-05, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -0.0007020235061645508, -8.106212590064388e-06, -0.002071380615234375, -5.7220458984375e-06, -0.015676498413085938, -0.0028018951416015625, -0.008374128490686417, -5.7220458984375e-06, -0.2560300827026367, -1.1444091796875e-05, -0.0077972412109375, -0.0001621246337890625, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -0.0003509521484375, -3.0517578125e-05, -6.103515625e-05, -7.2479248046875e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.3127223253250122, -1.9073486328125e-06, -0.0001163482666015625, -7.05718994140625e-05, -1.9073486328125e-05, -0.13966049253940582, -1.9073486328125e-06, -0.1248483657836914, 0.0, -0.001682281494140625, -0.015705108642578125, -2.288818359375e-05, -5.7220458984375e-06, -0.00041961669921875, -3.814697265625e-06, -6.866455078125e-05, -9.34600830078125e-05, -0.008597493171691895, -8.7738037109375e-05, -2.288818359375e-05, 0.0, -1.274100661277771, -6.675719760096399e-06, -5.7220458984375e-05, -0.17243576049804688, -0.0026102066040039062, -0.0020598173141479492, -0.0003933906555175781, -0.10703691840171814, -0.003358125686645508, -8.58306884765625e-05, -0.007176239043474197, -2.288818359375e-05], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 59, 248, "Buff", "<EOS>", "Spell", "Damage", "<EOS>", "1", "<EOS>"]}, {"score": -5.1046519274484226, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -0.0076045989990234375, 0.0, -0.0001010894775390625, 0.0, -0.0007381439208984375, 0.0, -0.0073375701904296875, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -0.0002079010009765625, -0.0001773834228515625, -4.6133995056152344e-05, 0.0, -0.0013027191162109375, 0.0, -1.1444091796875e-05, -0.0001678466796875, -5.7220458984375e-06, -0.0008013248443603516, 0.0, -0.000217437744140625, -3.814697265625e-06, -9.34600830078125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -4.76837158203125e-05, -0.017368555068969727, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.011169672012329102, -6.914134246471804e-06, -3.954477310180664, -0.0009765625, -1.9073486328125e-06, 0.0, -0.003063201904296875, -1.9073486328125e-06, -0.0003014802932739258, -0.0001544952392578125, -1.71661376953125e-05, 0.0, -1.0853180885314941, -1.9073486328125e-06, -1.71661376953125e-05, -0.0066890716552734375, 0.0, -0.00036144256591796875, -1.71661376953125e-05], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.148495863102845, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, 3, CHARACTER_CLASS.WARRIOR,\n            target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}, {"hole0": "<UNK>", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -4.916666030883789, -7.62939453125e-06, -0.0021510939113795757, -8.285045623779297e-05, -6.4849853515625e-05, 0.0, -0.001041412353515625, 0.0, -0.0004940032958984375, 0.0, -0.008562088012695312, -1.9073486328125e-06, -0.00020599365234375, -0.000400543212890625, -1.9073486328125e-05, -0.0072021484375, 0.0, -0.0103912353515625, 0.0, -0.0001888275146484375, -3.62396240234375e-05, -1.9073486328125e-05, -9.72747802734375e-05, -0.008758902549743652, -3.814697265625e-06, -2.09808349609375e-05, -2.3841855067985307e-07, -0.01184380054473877, -6.794924956921022e-06, -0.022581100463867188, -3.814697265625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -1.52587890625e-05, -2.09808349609375e-05, -9.5367431640625e-06, -7.987022399902344e-06, 0.0, -1.9073486328125e-06, -3.576277322281385e-06, 0.0, -3.814697265625e-05, -0.0019006729125976562, -9.179073458653875e-06, -0.11017036437988281, -9.5367431640625e-06, -1.71661376953125e-05, -0.00011444091796875, -5.7220458984375e-05, -1.1444091796875e-05, -1.52587890625e-05, -8.7738037109375e-05, -8.96453857421875e-05, -5.829334259033203e-05, -1.9073486328125e-06, -4.9591064453125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -0.0009347200393676758, -8.702266313775908e-06, -0.00034332275390625, -1.9073486328125e-06, -0.0020732879638671875, -0.0025968551635742188, -0.014721382409334183, -1.33514404296875e-05, -0.012986183166503906, -0.005440711975097656, -1.9073486328125e-05, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 117, 226, "<UNK>", "<EOS>"]}, {"score": -5.255182342979616, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}, {"hole0": "<UNK>", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -0.0076045989990234375, 0.0, -0.0001010894775390625, 0.0, -0.0007381439208984375, 0.0, -5.043025016784668, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, -5.340576171875e-05, -2.7298927307128906e-05, 0.0, -0.000865936279296875, -1.9073486328125e-06, -2.86102294921875e-05, -0.000324249267578125, -5.7220458984375e-06, -0.0006964206695556641, -1.9073486328125e-06, -0.000286102294921875, -3.814697265625e-06, -9.1552734375e-05, -1.52587890625e-05, -2.47955322265625e-05, -4.57763671875e-05, -0.012842416763305664, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.011061906814575195, -7.033342626527883e-06, -0.019689559936523438, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -7.867813110351562e-06, 0.0, -1.9073486328125e-06, -3.4570680327306036e-06, 0.0, -3.62396240234375e-05, -0.0019425153732299805, -9.059865078597795e-06, -0.10954856872558594, -9.5367431640625e-06, -2.09808349609375e-05, -0.000133514404296875, -4.76837158203125e-05, -9.5367431640625e-06, -1.1444091796875e-05, -7.43865966796875e-05, -0.0001049041748046875, -6.020069122314453e-05, -1.9073486328125e-06, -4.9591064453125e-05, -1.1444091796875e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -0.0009442567825317383, -8.821474693831988e-06, -0.0003261566162109375, -1.9073486328125e-06, -0.0020503997802734375, -0.0025768280029296875, -0.0151072321459651, -1.33514404296875e-05, -0.013119697570800781, -0.005446434020996094, -1.9073486328125e-05, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 117, 226, "<UNK>", "<EOS>"]}, {"score": -5.650478887740256, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.change_temp_attack(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -0.0076045989990234375, 0.0, -0.0001010894775390625, 0.0, -0.0007381439208984375, 0.0, -0.0073375701904296875, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -0.0002079010009765625, -0.0001773834228515625, -4.6133995056152344e-05, 0.0, -0.0013027191162109375, 0.0, -1.1444091796875e-05, -0.0001678466796875, -5.7220458984375e-06, -0.0008013248443603516, 0.0, -0.000217437744140625, -3.814697265625e-06, -9.34600830078125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -4.76837158203125e-05, -0.017368555068969727, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.011169672012329102, -6.914134246471804e-06, -0.019922256469726562, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -7.867813110351562e-06, 0.0, -1.9073486328125e-06, -3.576277322281385e-06, 0.0, -3.62396240234375e-05, -0.0019387006759643555, -9.059865078597795e-06, -2.516848564147949, -0.0010890960693359375, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -2.86102294921875e-05, -5.7220458984375e-06, -5.7220458984375e-05, -1.52587890625e-05, -1.8715856640483253e-05, -1.9073486328125e-06, -6.29425048828125e-05, -7.62939453125e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -0.0007020235061645508, -8.106212590064388e-06, -0.002071380615234375, -5.7220458984375e-06, -0.015676498413085938, -0.0028018951416015625, -0.008374128490686417, -5.7220458984375e-06, -0.2560300827026367, -1.1444091796875e-05, -0.0077972412109375, -0.0001621246337890625, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -0.0003509521484375, -3.0517578125e-05, -6.103515625e-05, -7.2479248046875e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.3127223253250122, -1.9073486328125e-06, -0.0001163482666015625, -7.05718994140625e-05, -1.9073486328125e-05, -0.13966049253940582, -1.9073486328125e-06, -0.1248483657836914, 0.0, -0.001682281494140625, -0.015705108642578125, -2.288818359375e-05, -5.7220458984375e-06, -0.00041961669921875, -3.814697265625e-06, -6.866455078125e-05, -9.34600830078125e-05, -0.008597493171691895, -8.7738037109375e-05, -2.288818359375e-05, 0.0, -1.5576671361923218, 0.0, -0.00022125244140625, -0.0003414154052734375, -1.9073486328125e-05, -0.600279688835144, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 29, 246, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.842528804721688, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(BuffUntil(Charge(), Attack(3)))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Charge"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"args": [{"hole0": "Charge", "_type": "Template77"}, {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Name", "id": "Attack"}}], "_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0026836395263671875, -8.20159912109375e-05, -1.33514404296875e-05, -3.4332275390625e-05, -0.000202178955078125, -5.7220458984375e-05, -7.033334895822918e-06, -3.933906555175781e-06, -3.814697265625e-05, -1.1920928244535389e-07, -0.0003528594970703125, -5.14984130859375e-05, -1.9073486328125e-06, -1.1920913038920844e-06, -9.5367431640625e-06, -4.1961669921875e-05, 0.0, -3.290133463451639e-05, -5.7220458984375e-06, -0.0076045989990234375, 0.0, -0.0001010894775390625, 0.0, -0.0007381439208984375, 0.0, -0.0073375701904296875, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -0.0002079010009765625, -0.0001773834228515625, -4.6133995056152344e-05, 0.0, -0.0013027191162109375, 0.0, -1.1444091796875e-05, -0.0001678466796875, -5.7220458984375e-06, -0.0008013248443603516, 0.0, -0.000217437744140625, -3.814697265625e-06, -9.34600830078125e-05, -1.71661376953125e-05, -2.6702880859375e-05, -4.76837158203125e-05, -0.017368555068969727, -3.814697265625e-06, -2.288818359375e-05, -2.3841855067985307e-07, -0.011169672012329102, -6.914134246471804e-06, -3.954477310180664, -0.0009765625, -1.9073486328125e-06, 0.0, -0.003063201904296875, -1.9073486328125e-06, -0.0003014802932739258, -0.0001544952392578125, -1.71661376953125e-05, 0.0, -0.9687380790710449, -1.1801687833212782e-05, -1.33514404296875e-05, -0.1257772445678711, -0.010593414306640625, -0.0003376007080078125, -1.9073486328125e-06, -0.15977227687835693, -0.008456826210021973, -8.952617645263672e-05, -0.0002002716064453125, -0.057997703552246094, -0.000240325927734375, -0.0005186200141906738, -0.0004218668909743428, -0.18345260620117188, -0.03916358947753906, -1.9073486328125e-06, 0.0, -0.43819940090179443, -0.015435338020324707, -1.33514404296875e-05, -0.15307998657226562, -0.0003795623779296875, -0.6673813462257385, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Charge", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 40, 136, 19, 160, "Buff", "Until", "<EOS>", 283, 68, 260, "Charge", "<EOS>", 40, 136, 19, 160, "Attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -9.008091032763787, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 0, CHARACTER_CLASS.COMMON, CARD_RARITY.\n            COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "model_output": {"body": [{"body": [{"hole0": "Charge", "_type": "Template13", "hole1": "COMMON", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -8.409732818603516, -0.03658771514892578, -0.00017093152564484626, -0.0012303590774536133, -0.09327208995819092, -3.4332275390625e-05, -0.10220153629779816, -5.91278076171875e-05, -0.027879714965820312, -0.22039318084716797, -0.000171661376953125, 0.0, -0.0009593963623046875, 0.0, -0.0002803802490234375, -0.0001277923583984375, -9.5367431640625e-06, 0.0, -0.11449813842773438, -3.4570680327306036e-06], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Charge", "<EOS>", "COMMON", "<EOS>", "COMMON", "<EOS>", 116, 224, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -9.227666086781028, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Charge", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -5.992739677429199, -0.00258636474609375, -8.34461570775602e-06, -0.0011867278954014182, -1.2799345254898071, -0.0001373291015625, -0.13613510131835938, 0.0, -0.0978250503540039, -0.004950523376464844, -1.9073486328125e-06, 0.0, -0.030504226684570312, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-05, -0.0001163482666015625, 0.0, -1.548604130744934, -4.0411949157714844e-05, -9.5367431640625e-06, -0.0634012222290039, -5.7220458984375e-06, -0.06730658560991287, 0.0], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Charge", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -9.624644577135761, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "model_output": {"body": [{"body": [{"hole0": "Charge", "hole2": "target_func", "_type": "Template7", "hole1": "COMMON", "hole4": "find_friendly_minion_spell_target", "hole3": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -7.373668670654297, -0.0052394866943359375, -2.52720492426306e-05, -1.859664735093247e-05, -0.09726369380950928, -1.9073486328125e-06, -0.0021306276321411133, -1.9073486328125e-06, -0.0008220672607421875, -1.9073486328125e-05, -0.16266822814941406, 0.0, -0.00019085407257080078, -0.0001068115234375, -5.7220458984375e-05, -1.1920928244535389e-07, -0.01658952236175537, -3.814697265625e-06, -0.0028533935546875, -0.0040035247802734375, -1.9073486328125e-06, 0.0, -0.0002841949462890625, 0.0, -2.288818359375e-05, -7.62939453125e-05, -3.0517578125e-05, 0.0, -1.4205448627471924, -0.00013935565948486328, -3.814697265625e-06, -0.048084259033203125, -1.9073486328125e-06, -0.4893109202384949, 0.0], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Charge", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -9.69620787020358, "inferred_code": "class Charge(SpellCard):\n\n    def __init__(self):\n        super().__init__('Charge', 1, CHARACTER_CLASS. Charge, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Charge()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Charge", "_type": "Template25", "hole1": " Charge", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"hole0": "Buff", "_type": "Template69", "hole1": "Charge"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Charge"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -7.271740287251305e-06, -1.764295666362159e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002981424331665039, -8.70227722771233e-06, -4.0531158447265625e-06, -4.38690185546875e-05, -0.00128936767578125, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.0265573766664602e-05, 0.0, -0.0002689361572265625, -9.5367431640625e-06, -1.33514404296875e-05, -5.992739677429199, -0.00258636474609375, -8.34461570775602e-06, -0.0011867278954014182, -0.46742308139801025, -0.09244310110807419, 0.0, -0.22480237483978271, 0.0, -0.766108512878418, -0.0045604705810546875, -1.9073486328125e-06, 0.0, -0.013299942016601562, -1.9073486328125e-06, -1.9073486328125e-05, -3.62396240234375e-05, -0.0001220703125, 0.0, -1.1429816484451294, -3.075587665080093e-05, -3.24249267578125e-05, -0.3780355453491211, -7.62939453125e-05, -0.00026798248291015625, -0.00033485659514553845, -0.603626012802124, -0.0033731458242982626], "choice_history": [80, 159, 295, 88, 138, "Charge", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Charge", "<EOS>", " ", "Charge", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Charge", "<EOS>"]}, {"score": -21.971280278638005, "inferred_code": "self.target.add_buff(Buff(()))\n", "model_output": {"body": [{"hole0": "", "_type": "Template50"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -14.88627815246582, -7.075664520263672, -0.009312810376286507], "choice_history": [80, 159, 295, 117, 226, "<EOS>"]}, {"score": -22.071123123168945, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -22.071115493774414], "choice_history": [80, 159, 294]}]}
{"index": 17, "beams": [{"score": -0.13599661576151334, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "_type": "Template15", "hole1": 4, "hole2": "ALL"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -0.1126251220703125, -0.000110626220703125, -5.960446742392378e-06, -4.076957338838838e-05, -6.556510470545618e-06, -4.38690185546875e-05, -0.0006495663546957076, 0.0, -0.00020599365234375, -1.9073486328125e-05, -0.011404991149902344, -9.5367431640625e-06, -0.0020928895100951195, 0.0, -0.0009938477305695415, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -3.591611564650492, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "PIRATE", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.552614212036133, -4.76837158203125e-05, -4.6491513785440475e-06, -8.106231689453125e-06, -1.6450881958007812e-05, -0.0001010894775390625, -0.022537827491760254, 0.0, -0.0001392364501953125, -9.5367431640625e-06, -3.24249267578125e-05, -7.62939453125e-06, -0.0004444122314453125, -3.814697265625e-05, -1.9073486328125e-05, 0.0, -5.53131103515625e-05, -1.33514404296875e-05, -1.0059137344360352, -2.47955322265625e-05, -0.000202178955078125, -5.7220458984375e-06, -0.0005783549859188497, 0.0, -0.0010098216589540243, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -3.7010165296050843, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.552614212036133, -4.76837158203125e-05, -4.6491513785440475e-06, -8.106231689453125e-06, -1.6450881958007812e-05, -0.0001010894775390625, -0.022537827491760254, 0.0, -0.0001392364501953125, -9.5367431640625e-06, -3.24249267578125e-05, -7.62939453125e-06, -0.0004444122314453125, -3.814697265625e-05, -1.9073486328125e-05, 0.0, -5.53131103515625e-05, -1.33514404296875e-05, -1.1136436462402344, -0.0002899169921875, -0.00115203857421875, -5.7220458984375e-06, -0.0009541462059132755, 0.0, -0.0010941025102511048, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.386863083545876, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.552614212036133, -4.76837158203125e-05, -4.6491513785440475e-06, -8.106231689453125e-06, -1.6450881958007812e-05, -0.0001010894775390625, -0.022537827491760254, 0.0, -0.0001392364501953125, -9.5367431640625e-06, -3.24249267578125e-05, -7.62939453125e-06, -0.0004444122314453125, -3.814697265625e-05, -1.9073486328125e-05, 0.0, -5.53131103515625e-05, -1.33514404296875e-05, -1.7939443588256836, -5.53131103515625e-05, -0.0001811981201171875, -5.7220458984375e-06, -0.007545335218310356, 0.0, -0.0012541991891339421, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.762444236632263, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -2.552614212036133, -4.76837158203125e-05, -4.6491513785440475e-06, -8.106231689453125e-06, -1.6450881958007812e-05, -0.0001010894775390625, -0.022537827491760254, 0.0, -0.0001392364501953125, -9.5367431640625e-06, -3.24249267578125e-05, -7.62939453125e-06, -0.0004444122314453125, -3.814697265625e-05, -1.9073486328125e-05, 0.0, -5.53131103515625e-05, -1.33514404296875e-05, -2.1761951446533203, -4.029273986816406e-05, -0.0004138946533203125, -2.288818359375e-05, -0.000981201184913516, 0.0, -0.0009138581808656454, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.832218800398522, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "_type": "Template15", "hole1": 4, "hole2": "ALL"}, {"hole0": 4, "_type": "Template23", "hole1": 5, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -0.1126251220703125, -0.000110626220703125, -5.960446742392378e-06, -4.076957338838838e-05, -6.556510470545618e-06, -4.38690185546875e-05, -0.0006495663546957076, 0.0, -0.00020599365234375, -1.9073486328125e-05, -4.579866409301758, -0.0010700225830078125, -4.351052120910026e-05, 0.0, -0.0016822128091007471, -1.9073486328125e-06, -0.12656593322753906, -0.000732421875, -0.0002727508544921875, -0.0004673004150390625, -1.9073486328125e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 109, 200, "4", "<EOS>", "5", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.02822844569161, "inferred_code": "class <UNK>Yeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "_type": "Template15", "hole1": 4, "hole2": "ALL"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Yeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -4.8997087478637695, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -0.1126251220703125, -0.000110626220703125, -5.960446742392378e-06, -4.076957338838838e-05, -6.556510470545618e-06, -4.38690185546875e-05, -0.0006495663546957076, 0.0, -0.00020599365234375, -1.9073486328125e-05, -0.011404991149902344, -9.5367431640625e-06, -0.0020928895100951195, 0.0, -0.0009938477305695415, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -5.0518787172549935, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Chillwind Yeti"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.816056251525879, -7.62939453125e-06, -9.250640869140625e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.0001678466796875, -1.33514404296875e-05, -7.62939453125e-05, 0.0, -2.86102294921875e-05, -0.14765071868896484, -0.0002574920654296875, -7.62939453125e-06, -0.018465042114257812, -4.38690185546875e-05, 0.0, -3.62396240234375e-05, 0.0, -3.361677227076143e-05, 0.0, -3.0517578125e-05, 0.0, -0.9445323944091797, -3.4332275390625e-05, -0.0001430511474609375, -8.702239938429557e-06, -0.00018584704957902431, -2.598733590275515e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.04977194592356682, -3.814697265625e-06, -7.62939453125e-05, 0.0, -3.4332275390625e-05, 0.0, -9.655952453613281e-06, -2.1457672119140625e-06, -0.0002231597900390625, 0.0, -4.1961669921875e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -3.719329833984375e-05, -1.9073486328125e-06, -0.0076656341552734375, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-05, -7.05718994140625e-05, 0.0, -0.057646751403808594, -5.340576171875e-05, -7.962872768985108e-05, 0.0, -0.0003906486672349274, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Chillwind", " ", "Yeti", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -5.832724410414784, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -5.77509880065918, -0.0028934478759765625, -0.000528076896443963, -1.6212441551033407e-05, -7.748603820800781e-06, -0.007894515991210938, -0.015042519196867943, -0.00014495849609375, -0.009402990341186523, -1.52587890625e-05, -0.0022792816162109375, -2.09808349609375e-05, -0.010631094686686993, 0.0, -0.0009607106912881136, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Chillwind", " ", "Yeti", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -5.993431742579531, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Chillwind Yeti"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 4, "_type": "Template72", "hole1": 4}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.816056251525879, -7.62939453125e-06, -9.250640869140625e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.0001678466796875, -1.33514404296875e-05, -7.62939453125e-05, 0.0, -2.86102294921875e-05, -0.14765071868896484, -0.0002574920654296875, -7.62939453125e-06, -0.018465042114257812, -4.38690185546875e-05, 0.0, -3.62396240234375e-05, 0.0, -3.361677227076143e-05, 0.0, -3.0517578125e-05, 0.0, -0.4995908737182617, -2.86102294921875e-05, -6.4849853515625e-05, -1.7881233361549675e-05, -0.00019097326730843633, -4.7205852752085775e-05, -2.09808349609375e-05, -1.9073486328125e-06, 0.0, -0.5167255401611328, -1.9073486328125e-06, -0.000118255615234375, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -2.288818359375e-05, -2.0265579223632812e-06, -0.0005588531494140625, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.09808349609375e-05, -4.8041343688964844e-05, -1.9073486328125e-06, -0.00379180908203125, -5.7220458984375e-06, -6.103515625e-05, -4.1961669921875e-05, -0.000133514404296875, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0005705356597900391, -2.0265579223632812e-06, -0.7440977096557617, -1.33514404296875e-05, -0.015622138977050781, -3.24249267578125e-05, -5.91278076171875e-05, 0.0, -9.34600830078125e-05, -0.0001697540283203125, -3.814697265625e-06, -4.57763671875e-05, -7.62939453125e-06, -3.814697265625e-05, -0.05591011047363281, -5.7220458984375e-06, -3.814697265625e-05, -0.011737823486328125, -0.0004596710205078125, -0.0009645894169807434, -1.1682510375976562e-05, -0.15117096900939941, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Chillwind", " ", "Yeti", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 122, 254, "4", "<EOS>", "4", "<EOS>"]}, {"score": -6.324632431004801, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "_type": "Template6", "hole1": 4, "hole2": "ALL"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -6.309577941894531, -0.0035848617553710938, -7.629365427419543e-06, -1.2516970855358522e-05, -2.384185791015625e-06, -5.14984130859375e-05, -0.0004712352529168129, 0.0, -0.0014095306396484375, 0.0, -0.000659942626953125, -9.5367431640625e-06, -0.0003952142142225057, 0.0, -0.0006623256485909224, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -6.5886437738226675, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "_type": "Template15", "hole1": 4, "hole2": "ALL"}, {"hole0": 3, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -0.1126251220703125, -0.000110626220703125, -5.960446742392378e-06, -4.076957338838838e-05, -6.556510470545618e-06, -4.38690185546875e-05, -0.0006495663546957076, 0.0, -0.00020599365234375, -1.9073486328125e-05, -0.011404991149902344, -9.5367431640625e-06, -6.455097675323486, 0.0, -0.0006362199783325195, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 110, 202, "3", "<EOS>", "5", "<EOS>"]}, {"score": -7.053786432734313, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "_type": "Template15", "hole1": 4, "hole2": "ALL"}, {"hole0": 4, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -0.1126251220703125, -0.000110626220703125, -5.960446742392378e-06, -4.076957338838838e-05, -6.556510470545618e-06, -4.38690185546875e-05, -0.0006495663546957076, 0.0, -0.00020599365234375, -1.9073486328125e-05, -0.011404991149902344, -9.5367431640625e-06, -0.0020928895100951195, 0.0, -6.918783664703369, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Chillwind", " ", "Yeti", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 110, 202, "4", "<EOS>", "4", "<EOS>"]}, {"score": -7.656966470603919, "inferred_code": "class ChillwindYeti(MinionCard):\n\n    def __init__(self):\n        super().__init__('Chillwind Yeti', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Chillwind Yeti", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 4, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ChillwindYeti"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -0.0074769179336726665, -7.021180499577895e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -5.7220458984375e-06, -3.4332275390625e-05, -0.1126251220703125, -0.000110626220703125, -5.960446742392378e-06, -4.076957338838838e-05, -6.556510470545618e-06, -4.38690185546875e-05, -7.515987396240234, -1.9073486328125e-06, -8.0108642578125e-05, -7.62939453125e-06, -0.016363143920898438, -1.1444091796875e-05, -0.0030325984116643667, 0.0, -0.0008615254191681743, 0.0], "choice_history": [80, 159, 295, 88, 138, "Chillwind", "Yeti", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Chillwind", " ", "Yeti", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 110, 202, "4", "<EOS>", "5", "<EOS>"]}, {"score": -23.309518814086914, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-05, -23.309497833251953], "choice_history": [80, 159, 294]}]}
{"index": 18, "beams": [{"score": -0.30924558252854695, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template17", "hole1": 1, "hole2": "DRUID"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -0.15134620666503906, -0.003841400146484375, -0.00033718624035827816, -0.00022113323211669922, -0.0010664985748007894, -5.14984130859375e-05, -0.0002518892288208008, 0.0, -0.00142669677734375, -7.62939453125e-06, -7.2479248046875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -9.655952453613281e-06, -0.01878833770751953, -6.103515625e-05, -4.1961669921875e-05, -3.814697265625e-05, -5.14984130859375e-05, -2.47955322265625e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.00014698505401611328, 0.0, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.0517578125e-05, -0.0001049041748046875, -3.814697265625e-05, -1.9073486328125e-06, -0.0001506805419921875, -1.1444091796875e-05, -8.20159912109375e-05, -2.300739288330078e-05, -0.030687332153320312, -0.0023431777954101562, -0.000493466854095459, -7.82012939453125e-05, -0.008448600769042969, -1.9073486328125e-06, -0.0001983642578125, -0.0001049041748046875, -3.24249267578125e-05, -6.4849853515625e-05, -0.0003986358642578125, 0.0, -0.0001049041748046875, -1.9073486328125e-06, -0.000415802001953125, -7.62939453125e-06, -0.037346482276916504, -2.50339189733495e-06, -0.00676572322845459, -0.000240325927734375, -0.0021228790283203125, -0.000415802001953125, -3.814697265625e-06, -0.03927336633205414, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -3.0738573452508717, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Claw"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -2.1434898376464844, -7.62939453125e-06, -0.0005792377050966024, -2.0265579223632812e-06, -6.866455078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005664825439453125, 0.0, -0.0005645751953125, -7.62939453125e-06, -0.0001087188720703125, -0.07074451446533203, -6.4849853515625e-05, -8.392333984375e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -1.955022889887914e-05, -3.814697265625e-06, -0.00016939640045166016, -1.9073486328125e-06, -0.0016965866088867188, -1.71661376953125e-05, -1.52587890625e-05, -0.0005321278586052358, -3.814697265625e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.00013100293290335685, -9.5367431640625e-06, -0.030096054077148438, 0.0, -0.0007801055908203125, 0.0, -0.00024056434631347656, -0.00011777228792198002, -0.01753711700439453, 0.0, -0.0007572174072265625, 0.0, -0.0013532638549804688, -0.0001010894775390625, -0.007301449775695801, -1.1563301086425781e-05, -0.0011463165283203125, -1.9073486328125e-06, -3.24249267578125e-05, -0.0019216537475585938, -5.7220458984375e-06, -0.00608670711517334, -1.9073486328125e-06, -0.0002460479736328125, -7.62939453125e-06, -0.0002574920654296875, -1.9073486328125e-06, -3.4332275390625e-05, -6.866455078125e-05, -0.0014954805374145508, -0.007724761962890625, -0.00016021728515625, -1.311301275563892e-06, -0.45780980587005615, -0.00027322760433889925, -0.1573467254638672, -7.62939453125e-06, -0.00027120113372802734, -5.14984130859375e-05, -4.9591064453125e-05, -0.00017547607421875, -7.62939453125e-06, -4.9948692321777344e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.6702880859375e-05, -0.00014495849609375, -3.933906555175781e-06, -0.021637916564941406, -0.0004940032958984375, -4.00543212890625e-05, -5.14984130859375e-05, -3.0517578125e-05, -4.38690185546875e-05, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.0002593994140625, 0.0, -9.918212890625e-05, -5.7220458984375e-06, -9.5367431640625e-06, -8.96453857421875e-05, -0.0001220703125, -4.00543212890625e-05, -1.9073486328125e-06, -0.0001583099365234375, -1.33514404296875e-05, -7.82012939453125e-05, -2.300739288330078e-05, -0.032855987548828125, -0.0021381378173828125, -0.0004837512969970703, -7.62939453125e-05, -0.009579658508300781, -1.9073486328125e-06, -0.0001964569091796875, -0.0001239776611328125, -3.24249267578125e-05, -6.4849853515625e-05, -0.0004215240478515625, 0.0, -0.0001068115234375, -1.9073486328125e-06, -0.0004024505615234375, -7.62939453125e-06, -0.03682863712310791, -2.3841830625315197e-06, -0.006753444671630859, -0.0002422332763671875, -0.0021228790283203125, -0.0004444122314453125, -3.814697265625e-06, -0.04379880428314209, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Claw", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -3.5359622350410973, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(3)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template17", "hole1": 1, "hole2": "DRUID"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -0.15134620666503906, -0.003841400146484375, -0.00033718624035827816, -0.00022113323211669922, -0.0010664985748007894, -5.14984130859375e-05, -0.0002518892288208008, 0.0, -0.00142669677734375, -7.62939453125e-06, -7.2479248046875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -9.655952453613281e-06, -0.01878833770751953, -6.103515625e-05, -4.1961669921875e-05, -3.814697265625e-05, -5.14984130859375e-05, -2.47955322265625e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.00014698505401611328, 0.0, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.0517578125e-05, -0.0001049041748046875, -3.814697265625e-05, -1.9073486328125e-06, -0.0001506805419921875, -1.1444091796875e-05, -8.20159912109375e-05, -2.300739288330078e-05, -0.030687332153320312, -0.0023431777954101562, -0.000493466854095459, -7.82012939453125e-05, -0.008448600769042969, -1.9073486328125e-06, -0.0001983642578125, -0.0001049041748046875, -3.24249267578125e-05, -6.4849853515625e-05, -0.0003986358642578125, 0.0, -0.0001049041748046875, -1.9073486328125e-06, -0.000415802001953125, -7.62939453125e-06, -0.037346482276916504, -2.50339189733495e-06, -0.00676572322845459, -0.000240325927734375, -0.0021228790283203125, -0.000415802001953125, -3.814697265625e-06, -3.2659900188446045, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -4.496063980474389, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template15", "hole1": 1, "hole2": "DRUID"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -4.3416948318481445, -0.00014495849609375, -3.576278118089249e-07, -0.0014569716295227408, -2.6821238861884922e-05, -0.00011456012725830078, -0.00017368793487548828, 0.0, -0.0004596710205078125, -7.62939453125e-06, -8.416175842285156e-05, -2.6702880859375e-05, -1.71661376953125e-05, -7.2479248046875e-05, -3.814697265625e-06, -5.340576171875e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -7.62939453125e-06, -3.62396240234375e-05, -1.1682510375976562e-05, -0.02178478240966797, -0.00023651123046875, -2.47955322265625e-05, -3.814697265625e-05, -4.57763671875e-05, -2.47955322265625e-05, -3.814697265625e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.00011456012725830078, 0.0, -0.0001068115234375, -1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001010894775390625, -3.62396240234375e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -7.82012939453125e-05, -2.300739288330078e-05, -0.025884628295898438, -0.0024776458740234375, -0.0004252791404724121, -7.43865966796875e-05, -0.011518478393554688, -1.9073486328125e-06, -0.0001926422119140625, -0.0001163482666015625, -3.0517578125e-05, -6.4849853515625e-05, -0.0003948211669921875, 0.0, -0.000110626220703125, -1.9073486328125e-06, -0.0004062652587890625, -7.62939453125e-06, -0.03710329532623291, -2.50339189733495e-06, -0.006804943084716797, -0.00023651123046875, -0.0020847320556640625, -0.0004024505615234375, -3.814697265625e-06, -0.039340756833553314, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.583555721397715, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Claw"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -2.1434898376464844, -7.62939453125e-06, -0.0005792377050966024, -2.0265579223632812e-06, -6.866455078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005664825439453125, 0.0, -0.0005645751953125, -7.62939453125e-06, -0.0001087188720703125, -0.07074451446533203, -6.4849853515625e-05, -8.392333984375e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -1.955022889887914e-05, -3.814697265625e-06, -0.00016939640045166016, -1.9073486328125e-06, -0.0016965866088867188, -1.71661376953125e-05, -1.52587890625e-05, -0.0005321278586052358, -3.814697265625e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.00013100293290335685, -9.5367431640625e-06, -0.030096054077148438, 0.0, -0.0007801055908203125, 0.0, -0.00024056434631347656, -0.00011777228792198002, -0.01753711700439453, 0.0, -0.0007572174072265625, 0.0, -0.0013532638549804688, -0.0001010894775390625, -0.007301449775695801, -1.1563301086425781e-05, -0.0011463165283203125, -1.9073486328125e-06, -3.24249267578125e-05, -0.0019216537475585938, -5.7220458984375e-06, -0.00608670711517334, -1.9073486328125e-06, -0.0002460479736328125, -7.62939453125e-06, -0.0002574920654296875, -1.9073486328125e-06, -3.4332275390625e-05, -6.866455078125e-05, -0.0014954805374145508, -0.007724761962890625, -0.00016021728515625, -1.311301275563892e-06, -2.112647294998169, -1.7642974853515625e-05, -0.018843650817871094, -5.7220458984375e-06, -0.00025022029876708984, -0.000110626220703125, -9.918212890625e-05, -0.000255584716796875, -1.1444091796875e-05, -5.5670738220214844e-05, -3.814697265625e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -3.62396240234375e-05, -0.000217437744140625, -2.0265579223632812e-06, -0.015448570251464844, -0.000583648681640625, -3.62396240234375e-05, -5.53131103515625e-05, -3.24249267578125e-05, -4.1961669921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.0002613067626953125, 0.0, -9.72747802734375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -8.96453857421875e-05, -0.0001220703125, -4.00543212890625e-05, -1.9073486328125e-06, -0.0001583099365234375, -1.33514404296875e-05, -7.82012939453125e-05, -2.300739288330078e-05, -0.03379249572753906, -0.0021257400512695312, -0.0004813671112060547, -7.43865966796875e-05, -0.008181571960449219, -1.9073486328125e-06, -0.0002002716064453125, -0.0001220703125, -3.24249267578125e-05, -6.67572021484375e-05, -0.0004177093505859375, 0.0, -0.0001068115234375, -1.9073486328125e-06, -0.000408172607421875, -7.62939453125e-06, -0.03666079044342041, -2.3841830625315197e-06, -0.006724834442138672, -0.000244140625, -0.0020771026611328125, -0.000446319580078125, -3.814697265625e-06, -0.043969616293907166, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Claw", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.605367938605923, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Claw"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -2.1434898376464844, -7.62939453125e-06, -0.0005792377050966024, -2.0265579223632812e-06, -6.866455078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005664825439453125, 0.0, -0.0005645751953125, -7.62939453125e-06, -0.0001087188720703125, -0.07074451446533203, -6.4849853515625e-05, -8.392333984375e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -1.955022889887914e-05, -3.814697265625e-06, -0.00016939640045166016, -1.9073486328125e-06, -0.0016965866088867188, -1.71661376953125e-05, -1.52587890625e-05, -0.0005321278586052358, -3.814697265625e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.00013100293290335685, -9.5367431640625e-06, -0.030096054077148438, 0.0, -0.0007801055908203125, 0.0, -0.00024056434631347656, -0.00011777228792198002, -0.01753711700439453, 0.0, -0.0007572174072265625, 0.0, -0.0013532638549804688, -0.0001010894775390625, -0.007301449775695801, -1.1563301086425781e-05, -0.0011463165283203125, -1.9073486328125e-06, -3.24249267578125e-05, -0.0019216537475585938, -5.7220458984375e-06, -0.00608670711517334, -1.9073486328125e-06, -0.0002460479736328125, -7.62939453125e-06, -0.0002574920654296875, -1.9073486328125e-06, -3.4332275390625e-05, -6.866455078125e-05, -0.0014954805374145508, -0.007724761962890625, -0.00016021728515625, -1.311301275563892e-06, -1.9775508642196655, -0.00011240867024753243, -0.16453075408935547, -1.9073486328125e-06, -0.00030171871185302734, -4.00543212890625e-05, -9.918212890625e-05, -0.0001316070556640625, -5.7220458984375e-06, -8.988380432128906e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -0.0001678466796875, -3.933906555175781e-06, -0.02604389190673828, -0.000354766845703125, -3.62396240234375e-05, -6.103515625e-05, -3.0517578125e-05, -4.38690185546875e-05, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.000247955322265625, 0.0, -0.0001049041748046875, -5.7220458984375e-06, -9.5367431640625e-06, -8.7738037109375e-05, -0.0001201629638671875, -4.00543212890625e-05, -1.9073486328125e-06, -0.0001583099365234375, -1.33514404296875e-05, -8.0108642578125e-05, -2.300739288330078e-05, -0.03226661682128906, -0.0020656585693359375, -0.0004718899726867676, -7.62939453125e-05, -0.011173248291015625, -1.9073486328125e-06, -0.0002040863037109375, -0.0001220703125, -3.4332275390625e-05, -6.67572021484375e-05, -0.0004119873046875, 0.0, -0.0001068115234375, -1.9073486328125e-06, -0.000396728515625, -7.62939453125e-06, -0.037584662437438965, -2.3841830625315197e-06, -0.006776332855224609, -0.000240325927734375, -0.0021381378173828125, -0.0004405975341796875, -3.814697265625e-06, -0.0424996092915535, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Claw", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.909109305452148, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hand.increase_armor(2)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template17", "hole1": 1, "hole2": "DRUID"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hand", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -0.15134620666503906, -0.003841400146484375, -0.00033718624035827816, -0.00022113323211669922, -0.0010664985748007894, -5.14984130859375e-05, -0.0002518892288208008, 0.0, -0.00142669677734375, -7.62939453125e-06, -7.2479248046875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -9.655952453613281e-06, -0.01878833770751953, -6.103515625e-05, -4.1961669921875e-05, -3.814697265625e-05, -5.14984130859375e-05, -2.47955322265625e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.00014698505401611328, 0.0, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.0517578125e-05, -0.0001049041748046875, -3.814697265625e-05, -1.9073486328125e-06, -0.0001506805419921875, -1.1444091796875e-05, -8.20159912109375e-05, -2.300739288330078e-05, -0.030687332153320312, -0.0023431777954101562, -0.000493466854095459, -7.82012939453125e-05, -0.008448600769042969, -1.9073486328125e-06, -0.0001983642578125, -0.0001049041748046875, -3.24249267578125e-05, -6.4849853515625e-05, -0.0003986358642578125, 0.0, -0.0001049041748046875, -1.9073486328125e-06, -0.000415802001953125, -7.62939453125e-06, -3.8606362342834473, -3.4332275390625e-05, -0.5906649827957153, -0.0001926422119140625, -0.0065860748291015625, -0.0004673004150390625, -1.9073486328125e-06, -0.2274492383003235, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hand", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -5.198022212694923, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template17", "hole1": 1, "hole2": "DRUID"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"hole0": 2, "_type": "Template62"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -0.15134620666503906, -0.003841400146484375, -0.00033718624035827816, -0.00022113323211669922, -0.0010664985748007894, -5.14984130859375e-05, -0.0002518892288208008, 0.0, -0.00142669677734375, -7.62939453125e-06, -7.2479248046875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -9.655952453613281e-06, -0.01878833770751953, -6.103515625e-05, -4.1961669921875e-05, -3.814697265625e-05, -5.14984130859375e-05, -2.47955322265625e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.00014698505401611328, 0.0, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.0517578125e-05, -0.0001049041748046875, -3.814697265625e-05, -1.9073486328125e-06, -0.0001506805419921875, -1.1444091796875e-05, -8.20159912109375e-05, -2.300739288330078e-05, -0.030687332153320312, -0.0023431777954101562, -0.000493466854095459, -7.82012939453125e-05, -4.9671831130981445, -0.0028448104858398438, -0.014670923352241516, -3.4332275390625e-05], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 119, 245, "2", "<EOS>"]}, {"score": -5.23971068091214, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template16", "hole1": 1, "hole2": "DRUID"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -5.078608512878418, -4.38690185546875e-05, -1.5735502529423684e-05, -9.846685134107247e-05, -0.0004868499527219683, -6.103515625e-05, -0.0007723569869995117, 0.0, -0.031907081604003906, -0.0003528594970703125, -0.0001621246337890625, -6.29425048828125e-05, -1.9073486328125e-06, -6.103515625e-05, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -1.9073486328125e-05, -0.000324249267578125, -5.841255187988281e-06, -0.0057086944580078125, -7.62939453125e-05, -2.09808349609375e-05, -3.24249267578125e-05, -5.7220458984375e-05, -2.09808349609375e-05, -1.9073486328125e-06, -4.38690185546875e-05, 0.0, -0.00012981891632080078, 0.0, -0.0001049041748046875, -1.9073486328125e-06, -9.5367431640625e-06, -3.24249267578125e-05, -0.0001068115234375, -3.814697265625e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -7.2479248046875e-05, -2.300739288330078e-05, -0.023329734802246094, -0.0023441314697265625, -0.00045478343963623047, -8.0108642578125e-05, -0.0096282958984375, -1.9073486328125e-06, -0.0002155303955078125, -9.1552734375e-05, -3.0517578125e-05, -7.2479248046875e-05, -0.0003871917724609375, 0.0, -0.0001049041748046875, -1.9073486328125e-06, -0.0003871917724609375, -7.62939453125e-06, -0.038942694664001465, -2.3841830625315197e-06, -0.006653189659118652, -0.000263214111328125, -0.0019016265869140625, -0.00041961669921875, -1.9073486328125e-06, -0.03365055471658707, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 102, 185, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -5.288743551682273, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.spell_damage.increase_armor(2)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template17", "hole1": 1, "hole2": "DRUID"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"hole0": 2, "_type": "Template62"}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "spell_damage", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -0.15134620666503906, -0.003841400146484375, -0.00033718624035827816, -0.00022113323211669922, -0.0010664985748007894, -5.14984130859375e-05, -0.0002518892288208008, 0.0, -0.00142669677734375, -7.62939453125e-06, -7.2479248046875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -9.655952453613281e-06, -0.01878833770751953, -6.103515625e-05, -4.1961669921875e-05, -3.814697265625e-05, -5.14984130859375e-05, -2.47955322265625e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.00014698505401611328, 0.0, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.0517578125e-05, -0.0001049041748046875, -3.814697265625e-05, -1.9073486328125e-06, -0.0001506805419921875, -1.1444091796875e-05, -8.20159912109375e-05, -2.300739288330078e-05, -0.030687332153320312, -0.0023431777954101562, -0.000493466854095459, -7.82012939453125e-05, -0.008448600769042969, -1.9073486328125e-06, -0.0001983642578125, -0.0001049041748046875, -3.24249267578125e-05, -6.4849853515625e-05, -0.0003986358642578125, 0.0, -0.0001049041748046875, -1.9073486328125e-06, -0.000415802001953125, -7.62939453125e-06, -4.8780517578125, -0.0001811981201171875, -0.14101815223693848, -0.000232696533203125, -0.001758575439453125, -0.00087738037109375, -1.9073486328125e-06, -0.04354719817638397, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 119, 245, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "spell_damage", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -5.376149277994841, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n        player.hero.change_temp_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template17", "hole1": 1, "hole2": "DRUID"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}, {"hole0": 2, "_type": "Template62"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -0.15134620666503906, -0.003841400146484375, -0.00033718624035827816, -0.00022113323211669922, -0.0010664985748007894, -5.14984130859375e-05, -0.0002518892288208008, 0.0, -0.00142669677734375, -7.62939453125e-06, -7.2479248046875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -9.655952453613281e-06, -0.01878833770751953, -6.103515625e-05, -4.1961669921875e-05, -3.814697265625e-05, -5.14984130859375e-05, -2.47955322265625e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -0.00014698505401611328, 0.0, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.0517578125e-05, -0.0001049041748046875, -3.814697265625e-05, -1.9073486328125e-06, -0.0001506805419921875, -1.1444091796875e-05, -8.20159912109375e-05, -2.300739288330078e-05, -4.43064022064209, -2.86102294921875e-05, -0.005030632019042969, -0.0001087188720703125, -1.71661376953125e-05, -6.103515625e-05, -0.0044384002685546875, 0.0, -0.00011444091796875, -1.9073486328125e-06, -0.004080772399902344, -7.62939453125e-06, -0.016123414039611816, -1.4305104514278355e-06, -0.016269207000732422, -0.0038928985595703125, -0.0004138946533203125, -0.0001049041748046875, -3.814697265625e-06, -0.1823619306087494, -9.5367431640625e-06, -0.0028696060180664062, -0.000308990478515625, -0.5294798016548157, -9.34600830078125e-05], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>", 119, 245, "2", "<EOS>"]}, {"score": -6.053493139376769, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Claw"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}, "_type": "Template5", "hole1": "increase_armor", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -2.1434898376464844, -7.62939453125e-06, -0.0005792377050966024, -2.0265579223632812e-06, -6.866455078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005664825439453125, 0.0, -0.0005645751953125, -7.62939453125e-06, -0.0001087188720703125, -0.07074451446533203, -6.4849853515625e-05, -8.392333984375e-05, -5.7220458984375e-06, -0.00011444091796875, -1.9073486328125e-05, -1.955022889887914e-05, -3.814697265625e-06, -0.00016939640045166016, -1.9073486328125e-06, -0.0016965866088867188, -1.71661376953125e-05, -1.52587890625e-05, -0.0005321278586052358, -3.814697265625e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.00013100293290335685, -9.5367431640625e-06, -0.030096054077148438, 0.0, -0.0007801055908203125, 0.0, -0.00024056434631347656, -0.00011777228792198002, -0.01753711700439453, 0.0, -0.0007572174072265625, 0.0, -0.0013532638549804688, -0.0001010894775390625, -0.007301449775695801, -1.1563301086425781e-05, -0.0011463165283203125, -1.9073486328125e-06, -3.24249267578125e-05, -0.0019216537475585938, -5.7220458984375e-06, -0.00608670711517334, -1.9073486328125e-06, -0.0002460479736328125, -7.62939453125e-06, -0.0002574920654296875, -1.9073486328125e-06, -3.4332275390625e-05, -6.866455078125e-05, -0.0014954805374145508, -0.007724761962890625, -0.00016021728515625, -1.311301275563892e-06, -0.45780980587005615, -0.00027322760433889925, -2.2504148483276367, -0.006531715393066406, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.6362495422363281, 0.0, -0.08817803859710693, 0.0, -0.30910611152648926, -0.00015866756439208984, -1.52587890625e-05, -0.0068721771240234375, -1.9073486328125e-06, -0.00017340894555673003, 0.0], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Claw", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.01182289069402, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Claw", "_type": "Template25", "hole1": "PALADIN", "hole2": "RARE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -2.1434898376464844, -7.62939453125e-06, -0.0005792377050966024, -2.0265579223632812e-06, -6.866455078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0005664825439453125, 0.0, -0.0005645751953125, -7.62939453125e-06, -0.0001087188720703125, -2.8468008041381836, -0.008538246154785156, -9.953651897376403e-05, -0.00029241963056847453, -0.7183500528335571, -2.86102294921875e-05, -0.613383412361145, -3.814697265625e-06, -0.5752964019775391, -0.0007648468017578125, -0.07350635528564453, -1.1444091796875e-05, -0.01940631866455078, -0.000400543212890625, -0.0024261474609375, -9.5367431640625e-06, -0.0006542205810546875, -0.0001239776611328125, 0.0, -0.0052613019943237305, 0.0], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Claw", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.289029858868162, "inferred_code": "class Claw(SpellCard):\n\n    def __init__(self):\n        super().__init__('Claw', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Claw", "_type": "Template17", "hole1": 1, "hole2": "DRUID"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Claw"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -1.9073486328125e-05, -5.53131103515625e-05, -9.5367431640625e-06, -0.0002774807217065245, -0.00010930955613730475, -0.0001621246337890625, 0.0, -3.62396240234375e-05, -0.00010943399684038013, -1.7642974853515625e-05, -7.176399230957031e-05, -3.0517578125e-05, -0.15134620666503906, -0.003841400146484375, -0.00033718624035827816, -0.00022113323211669922, -0.0010664985748007894, -5.14984130859375e-05, -0.0002518892288208008, 0.0, -7.4097747802734375, -0.011065483093261719, -0.02880382537841797, -1.9073486328125e-06, -0.03703463077545166, 0.0, -0.640268087387085, 0.0, -0.0002040863037109375, -0.001117706298828125, 0.0, -0.002582978457212448, 0.0], "choice_history": [80, 159, 295, 88, 138, "Claw", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Claw", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 95, 172, 19, 160, "player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -23.137361526489258, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-3.814697265625e-06, -0.0001583099365234375, -23.13719940185547], "choice_history": [80, 159, 294]}]}
{"index": 19, "beams": [{"score": -0.3669831883384944, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "GtE"}], "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010621070861816406, -5.7220458984375e-06, -0.00479888916015625, -0.0001850128173828125, -0.020845413208007812, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.03651276230812073, -0.0009157495223917067, -0.01110386848449707, 0.0, -0.0023193359375, -0.0001850128173828125, -5.7220458984375e-06, -0.003002643585205078, -3.814697265625e-06, -0.004889488220214844, -1.52587890625e-05, -0.011591911315917969, -0.0002899169921875, -7.62939453125e-06, -3.814697265625e-06, -0.0047245025634765625, -1.52587890625e-05, -0.01820175163447857, -5.483625955093885e-06, -0.0017539262771606445, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.0014480173122137785, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005909200408495963, -7.43865966796875e-05, -0.05335807800292969, -0.0025005340576171875, -0.0014104843139648438, -0.0008754730224609375, -0.0008411407470703125, 0.0, -7.629378160345368e-06, -2.1219253540039062e-05, -0.0005571842193603516, 0.0, -0.000370025634765625, -0.010379791259765625, -6.866455078125e-05, -9.5367431640625e-06, -1.71661376953125e-05, -0.0014336705207824707, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 4, 282, 47, 165, "2", "<EOS>"]}, {"score": -4.1389033290843, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for minions in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minions"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "GtE"}], "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -3.749321699142456, -0.00013685226440429688, -0.05302619934082031, -1.9073486328125e-05, -7.2479248046875e-05, -1.52587890625e-05, -0.0013254880905151367, -0.00010883808135986328, -0.0002117156982421875, -0.0009822845458984375, -0.000141143798828125, -0.00040161609649658203, -8.96453857421875e-05, -0.0004749298095703125, -3.62396240234375e-05, -0.0016192197799682617, -1.5497207641601562e-05, -0.0060405731201171875, -5.14984130859375e-05, -7.62939453125e-06, -0.0002460479736328125, -3.814697265625e-06, -8.96453857421875e-05, -0.0026358363684266806, -1.9073486328125e-06, -0.00069427490234375, -0.0002574920654296875, -1.71661376953125e-05, 0.0, -0.0003204345703125, 0.0, -0.0006926059722900391, -6.4373016357421875e-06, -0.0012847185134887695, -1.1920928244535389e-07, -0.0001049041748046875, -0.0003147125244140625, -5.7220458984375e-05, -0.010217666625976562, -5.7220458984375e-06, -0.0048351287841796875, -0.0001850128173828125, -0.019774436950683594, -1.9073486328125e-05, -0.0001316070556640625, -3.814697265625e-06, -0.0001964569091796875, -0.0001926422119140625, -0.036110490560531616, -0.0009187276591546834, -0.011023759841918945, 0.0, -0.00232696533203125, -0.0001850128173828125, -5.7220458984375e-06, -0.0029892921447753906, -3.814697265625e-06, -0.004891395568847656, -1.52587890625e-05, -0.011698722839355469, -0.000293731689453125, -7.62939453125e-06, -3.814697265625e-06, -0.0048046112060546875, -1.52587890625e-05, -0.01832716166973114, -5.483625955093885e-06, -0.001763463020324707, -0.0001964569091796875, -1.9073486328125e-05, -0.0010433197021484375, -0.0001773834228515625, -0.0014512307243421674, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.000588893482927233, -7.43865966796875e-05, -0.05397224426269531, -0.00247955322265625, -0.0014085769653320312, -0.0008697509765625, -0.000843048095703125, 0.0, -7.629378160345368e-06, -2.1219253540039062e-05, -0.0005571842193603516, 0.0, -0.0003719329833984375, -0.010399818420410156, -6.866455078125e-05, -9.5367431640625e-06, -1.71661376953125e-05, -0.0014445185661315918, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "minions", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 4, 282, 47, 165, "2", "<EOS>"]}, {"score": -4.4960447732582836, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minions.remove(minion)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "GtE"}], "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010621070861816406, -5.7220458984375e-06, -0.00479888916015625, -0.0001850128173828125, -0.020845413208007812, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.03651276230812073, -0.0009157495223917067, -0.01110386848449707, 0.0, -0.0023193359375, -0.0001850128173828125, -5.7220458984375e-06, -0.003002643585205078, -3.814697265625e-06, -0.004889488220214844, -1.52587890625e-05, -0.011591911315917969, -0.0002899169921875, -7.62939453125e-06, -3.814697265625e-06, -0.0047245025634765625, -1.52587890625e-05, -4.051564693450928, -3.4928223612951115e-05, -0.057712674140930176, 0.0, -0.015366554260253906, -0.0005893707275390625, -1.1444091796875e-05, -0.004624605178833008, -1.52587890625e-05, -0.043557167053222656, -0.01598072052001953, -0.0003681182861328125, -0.002773284912109375, -0.0019969940185546875, 0.0, -8.82148651726311e-06, -2.110004425048828e-05, -0.0009630918502807617, 0.0, -0.00060272216796875, -0.0146484375, -0.000476837158203125, -1.52587890625e-05, -4.00543212890625e-05, -0.013230770826339722, 0.0], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 4, 282, 47, 165, "2", "<EOS>"]}, {"score": -4.813455535136633, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n    minion = game.random_choice(minions)\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010621070861816406, -5.7220458984375e-06, -0.00479888916015625, -0.0001850128173828125, -0.020845413208007812, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.03651276230812073, -0.0009157495223917067, -0.01110386848449707, 0.0, -0.0023193359375, -0.0001850128173828125, -5.7220458984375e-06, -0.003002643585205078, -3.814697265625e-06, -0.004889488220214844, -1.52587890625e-05, -0.011591911315917969, -0.0002899169921875, -7.62939453125e-06, -3.814697265625e-06, -0.0047245025634765625, -1.52587890625e-05, -0.01820175163447857, -5.483625955093885e-06, -0.0017539262771606445, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.0014480173122137785, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005909200408495963, -7.43865966796875e-05, -4.041029930114746, -0.0021924972534179688, -0.00020599365234375, -0.14863967895507812, -9.5367431640625e-06, -0.13221454620361328, -1.1920928244535389e-07, -0.028848648071289062, -0.08296680450439453, -1.9073486328125e-05, 0.0, -0.0003490447998046875, 0.0, -0.05850040912628174, -9.059905096364673e-06, -0.0032646656036376953, -1.1920928244535389e-07, -0.0014095306396484375, -0.0008697509765625, -3.62396240234375e-05, -0.0177459716796875, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>"]}, {"score": -4.993544246826325, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            self.target.damage(player.effective_spell_damage(0), self)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"hole0": 0, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "GtE"}], "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010621070861816406, -5.7220458984375e-06, -0.00479888916015625, -0.0001850128173828125, -4.121264457702637, -0.011201858520507812, -0.04235506057739258, -0.29802003502845764, -0.0012051472440361977, -0.0027608871459960938, -0.00011444091796875, -5.340576171875e-05, -0.03568267822265625, -3.4332275390625e-05, -4.38690185546875e-05, -0.02150440216064453, -1.71661376953125e-05, -0.1686570793390274, -2.0980687622795813e-05, -0.04334878921508789, -0.00040912628173828125, -8.58306884765625e-05, -0.001583099365234375, -0.0001430511474609375, -0.0012396033853292465, -0.00010704994201660156, -9.5367431640625e-06, -0.0010366439819335938, -0.0003476141137070954, -6.103515625e-05, -0.048995018005371094, -0.0036773681640625, -0.00138092041015625, -0.0007610321044921875, -0.0008754730224609375, 0.0, -6.318082796497038e-06, -1.9311904907226562e-05, -0.0005838871002197266, 0.0, -0.0003299713134765625, -0.00965118408203125, -6.29425048828125e-05, -7.62939453125e-06, -1.52587890625e-05, -0.0014141201972961426, 0.0], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 25, 223, "minions", "2", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 4, 282, 47, 165, "2", "<EOS>"]}, {"score": -5.00050097943398, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "can_use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010621070861816406, -5.7220458984375e-06, -0.00479888916015625, -0.0001850128173828125, -0.020845413208007812, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.03651276230812073, -0.0009157495223917067, -0.01110386848449707, 0.0, -0.0023193359375, -0.0001850128173828125, -5.7220458984375e-06, -0.003002643585205078, -3.814697265625e-06, -0.004889488220214844, -1.52587890625e-05, -0.011591911315917969, -0.0002899169921875, -7.62939453125e-06, -3.814697265625e-06, -0.0047245025634765625, -1.52587890625e-05, -0.01820175163447857, -5.483625955093885e-06, -0.0017539262771606445, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.0014480173122137785, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005909200408495963, -7.43865966796875e-05, -3.880878448486328, -0.0004673004150390625, -0.39238548278808594, -1.1920928244535389e-07, -4.38690185546875e-05, -0.008748054504394531, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.035819172859191895, -2.3841855067985307e-07, -1.9073486328125e-05, -3.0755993066122755e-05, -0.00013816346472594887, -0.1479806900024414, -0.0033283233642578125, -0.000568389892578125, -0.0001316070556640625, -2.288818359375e-05, -3.24249267578125e-05, 0.0, -4.1961669921875e-05, -7.43865966796875e-05, -0.00013864038919564337, -1.1920928244535389e-07, -0.001033782958984375, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -8.58306884765625e-05, -4.124638871871866e-05, 0.0, -2.09808349609375e-05, -9.5367431640625e-06, -9.655952453613281e-06, -8.022785186767578e-05, -0.0008831024169921875, -5.53131103515625e-05, -0.012128829956054688, -3.814697265625e-06, -0.0001010894775390625, -0.013525606133043766, -7.748603820800781e-06, -0.010416984558105469, -1.52587890625e-05, -4.76837158203125e-05, 0.0, -0.0003948211669921875, 0.0, -0.0003409385390114039, -5.14984130859375e-05, -0.0010815858840942383, -5.340576171875e-05, -5.14984130859375e-05, -0.0009174346923828125, -1.9073486328125e-06, -0.006656646728515625, -1.52587890625e-05, -0.0021209716796875, 0.0, -0.00019252300262451172, -2.2649765014648438e-06, -0.00031185150146484375, -1.9073486328125e-06, -0.0019016754813492298, -2.09808349609375e-05, -0.001220703125, -0.0001220703125, -7.82012939453125e-05, -6.103515625e-05, -0.023190798237919807, -0.00042748451232910156, -0.0012292861938476562, -1.71661376953125e-05, -5.14984130859375e-05, -1.33514404296875e-05, -0.0002821683883666992, -0.00016224384307861328, -0.0001354217529296875, -0.0010242462158203125, -0.000179290771484375, -0.0003787278837990016, -0.00012969970703125, -0.0004367828369140625, -5.340576171875e-05, -0.0014903545379638672, -1.9311904907226562e-05, -0.006117820739746094, -5.53131103515625e-05, -7.62939453125e-06, -0.00029754638671875, -1.9073486328125e-06, -9.5367431640625e-05, -0.004701495170593262, -1.9073486328125e-06, -0.0005359649658203125, -0.0001697540283203125, -1.71661376953125e-05, 0.0, -0.000293731689453125, 0.0, -0.0007462501525878906, -6.4373016357421875e-06, -0.0012581348419189453, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -4.9591064453125e-05, -0.010628700256347656, -5.7220458984375e-06, -0.004786491394042969, -0.000186920166015625, -0.02113056182861328, -1.71661376953125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.036493755877017975, -0.0009147965465672314, -0.011101007461547852, 0.0, -0.0023212432861328125, -0.0001850128173828125, -5.7220458984375e-06, -0.0030121803283691406, -3.814697265625e-06, -0.004900932312011719, -1.52587890625e-05, -0.011503219604492188, -0.0002841949462890625, -7.62939453125e-06, -3.814697265625e-06, -0.0047359466552734375, -1.52587890625e-05, -0.018162662163376808, -5.483625955093885e-06, -0.0017529726028442383, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.001446348032914102, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005908008315600455, -7.43865966796875e-05], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 91, 143, "can_use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.210967965892884, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -4.687646865844727, -0.2621927261352539, -0.0002040863037109375, -1.1920928244535389e-07, -6.4373016357421875e-06, -5.602812962024473e-06, 0.0, -0.0003223419189453125, -1.9073486328125e-06, -0.000408172607421875, 0.0, -0.00189971923828125, -1.9073486328125e-06, -2.86102294921875e-05, -0.0002269744873046875, -4.1961669921875e-05, -2.1457672119140625e-06, 0.0, -1.9073486328125e-06, -5.435942148324102e-05, -1.1920928244535389e-07, -1.33514404296875e-05, -5.245207830739673e-06, -3.850459688692354e-05, -0.01875782012939453, -0.0003204345703125, -0.0003719329833984375, -6.67572021484375e-05, -2.47955322265625e-05, -4.1961669921875e-05, 0.0, -4.00543212890625e-05, -8.96453857421875e-05, -0.00018024443124886602, 0.0, -0.000865936279296875, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -8.392333984375e-05, -2.4080263756331988e-05, 0.0, -2.09808349609375e-05, -9.5367431640625e-06, -1.1563301086425781e-05, -7.832050323486328e-05, -0.00022125244140625, -5.91278076171875e-05, -0.010526657104492188, -3.814697265625e-06, -7.62939453125e-05, -0.013347269035875797, -7.748603820800781e-06, -0.009159088134765625, -1.52587890625e-05, -5.14984130859375e-05, 0.0, -0.0004100799560546875, 0.0, -0.0003536939329933375, -4.76837158203125e-05, -0.0010873079299926758, -4.57763671875e-05, -5.14984130859375e-05, -0.00090789794921875, -1.9073486328125e-06, -0.0063152313232421875, -1.52587890625e-05, -0.0022029876708984375, 0.0, -0.0001926422119140625, -2.384185791015625e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001885345671325922, -2.09808349609375e-05, -0.001010894775390625, -0.000125885009765625, -6.29425048828125e-05, -5.7220458984375e-05, -0.027006223797798157, -0.00048673152923583984, -0.0011959075927734375, -1.52587890625e-05, -5.340576171875e-05, -1.33514404296875e-05, -0.00028777122497558594, -0.00013744831085205078, -0.000125885009765625, -0.0009059906005859375, -0.0001811981201171875, -0.00038647648761980236, -0.0001163482666015625, -0.000446319580078125, -5.14984130859375e-05, -0.0014553070068359375, -1.7404556274414062e-05, -0.006130218505859375, -5.91278076171875e-05, -9.5367431640625e-06, -0.00029754638671875, -1.9073486328125e-06, -8.96453857421875e-05, -0.0045087337493896484, -1.9073486328125e-06, -0.0005474090576171875, -0.0001773834228515625, -1.71661376953125e-05, 0.0, -0.0002956390380859375, 0.0, -0.0007233619689941406, -6.4373016357421875e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.0106353759765625, -5.7220458984375e-06, -0.004807472229003906, -0.0001850128173828125, -0.02096080780029297, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001964569091796875, -0.03652757406234741, -0.0009162260103039443, -0.011117219924926758, 0.0, -0.0023193359375, -0.0001850128173828125, -5.7220458984375e-06, -0.0030074119567871094, -3.814697265625e-06, -0.004902839660644531, -1.52587890625e-05, -0.011580467224121094, -0.0002880096435546875, -7.62939453125e-06, -3.814697265625e-06, -0.0047359466552734375, -1.52587890625e-05, -0.018202705308794975, -5.483625955093885e-06, -0.001755833625793457, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.0014476601500064135, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005909200408495963, -7.43865966796875e-05], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.344202386703266, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) > 2\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "Gt"}], "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010621070861816406, -5.7220458984375e-06, -0.00479888916015625, -0.0001850128173828125, -0.020845413208007812, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.03651276230812073, -0.0009157495223917067, -0.01110386848449707, 0.0, -0.0023193359375, -0.0001850128173828125, -5.7220458984375e-06, -0.003002643585205078, -3.814697265625e-06, -0.004889488220214844, -1.52587890625e-05, -0.011591911315917969, -0.0002899169921875, -7.62939453125e-06, -3.814697265625e-06, -0.0047245025634765625, -1.52587890625e-05, -0.01820175163447857, -5.483625955093885e-06, -0.0017539262771606445, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.0014480173122137785, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005909200408495963, -7.43865966796875e-05, -0.05335807800292969, -0.0025005340576171875, -0.0014104843139648438, -0.0008754730224609375, -0.0008411407470703125, 0.0, -7.629378160345368e-06, -2.1219253540039062e-05, -0.0005571842193603516, 0.0, -0.000370025634765625, -4.981220245361328, -3.0517578125e-05, -2.288818359375e-05, -4.38690185546875e-05, -0.007806811947375536, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 3, 282, 47, 165, "2", "<EOS>"]}, {"score": -5.430007167209155, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            self.target.damage(player.effective_spell_damage(2), self)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010621070861816406, -5.7220458984375e-06, -0.00479888916015625, -0.0001850128173828125, -0.020845413208007812, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.03651276230812073, -0.0009157495223917067, -0.01110386848449707, 0.0, -0.0023193359375, -0.0001850128173828125, -5.7220458984375e-06, -0.003002643585205078, -3.814697265625e-06, -0.004889488220214844, -1.52587890625e-05, -4.574207305908203, -0.0034379959106445312, -0.0004129774169996381, -0.00028716612723656, -0.02373027801513672, -0.0017852783203125, -0.2623472213745117, -9.918212890625e-05, -0.0011959075927734375, -8.58306884765625e-05, -9.1552734375e-05, -2.1457672119140625e-06, 0.0, -1.9073486328125e-06, -5.8770168834598735e-05, 0.0, -3.0517578125e-05, -3.3378591979271732e-06, -5.006788342143409e-05, -0.06437492370605469, -0.000354766845703125, -0.0003204345703125, -6.29425048828125e-05, -1.71661376953125e-05, -6.866455078125e-05, 0.0, -3.62396240234375e-05, -9.1552734375e-05, -0.00017285344074480236, -2.0265579223632812e-06, -0.0007476806640625, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -0.000125885009765625, -2.6941281248582527e-05, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -1.1563301086425781e-05, -7.450580596923828e-05, -0.0003490447998046875, -7.05718994140625e-05, -0.018125534057617188, -5.7220458984375e-06, -0.000110626220703125, -0.01407003402709961, -7.748603820800781e-06, -0.009080886840820312, -1.52587890625e-05, -5.14984130859375e-05, 0.0, -0.00040435791015625, 0.0, -0.0003682374663185328, -5.14984130859375e-05, -0.0011197328567504883, -5.14984130859375e-05, -5.14984130859375e-05, -0.0008831024169921875, -1.9073486328125e-06, -0.006655693054199219, -1.52587890625e-05, -0.0021305084228515625, 0.0, -0.0001926422119140625, -2.384185791015625e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.0018902318552136421, -2.09808349609375e-05, -0.0013256072998046875, -0.0001220703125, -7.82012939453125e-05, -6.4849853515625e-05, -0.02610952965915203, -0.00044846534729003906, -0.0011930465698242188, -1.71661376953125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.0002936124801635742, -0.00015652179718017578, -0.0001316070556640625, -0.000988006591796875, -0.00017547607421875, -0.0003901719755958766, -0.000125885009765625, -0.0004482269287109375, -5.340576171875e-05, -0.001493215560913086, -1.9311904907226562e-05, -0.0061168670654296875, -5.91278076171875e-05, -7.62939453125e-06, -0.000293731689453125, -1.9073486328125e-06, -9.34600830078125e-05, -0.004640340805053711, -1.9073486328125e-06, -0.0005397796630859375, -0.0001697540283203125, -1.71661376953125e-05, 0.0, -0.000293731689453125, 0.0, -0.0007348060607910156, -6.4373016357421875e-06, -0.0012580156326293945, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010644912719726562, -5.7220458984375e-06, -0.0047931671142578125, -0.000186920166015625, -0.021047592163085938, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.0365237258374691, -0.0009146773954853415, -0.011091470718383789, 0.0, -0.002315521240234375, -0.00018310546875, -5.7220458984375e-06, -0.003013134002685547, -3.814697265625e-06, -0.0048923492431640625, -1.52587890625e-05, -0.011548042297363281, -0.000286102294921875, -7.62939453125e-06, -3.814697265625e-06, -0.004711151123046875, -1.52587890625e-05, -0.018146630376577377, -5.483625955093885e-06, -0.001752018928527832, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.0014457526849582791, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005909200408495963, -7.43865966796875e-05], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.601144809938418, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "targets"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "GtE"}], "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -5.1041693687438965, -1.9073486328125e-06, -0.0643606185913086, -0.000644683837890625, -0.059370994567871094, -5.7220458984375e-06, -0.0001125335693359375, -3.814697265625e-06, -0.000110626220703125, -4.1961669921875e-05, -0.058939117938280106, -0.0007628332823514938, -0.020394325256347656, 0.0, -0.0070056915283203125, -0.000537872314453125, -3.814697265625e-06, -0.002726435661315918, -3.814697265625e-06, -0.007943153381347656, -1.33514404296875e-05, -0.01771831512451172, -0.00034332275390625, -7.62939453125e-06, -3.814697265625e-06, -0.004673004150390625, -1.52587890625e-05, -0.0160868801176548, -5.364416665543104e-06, -0.0017099380493164062, -0.0001888275146484375, -2.09808349609375e-05, -0.0010662078857421875, -0.000179290771484375, -0.0015007052570581436, -6.532669067382812e-05, -1.52587890625e-05, -8.96453857421875e-05, -0.000568151066545397, -7.05718994140625e-05, -0.05234241485595703, -0.0025768280029296875, -0.0014019012451171875, -0.00087738037109375, -0.0008392333984375, 0.0, -7.629378160345368e-06, -2.1219253540039062e-05, -0.0005571842193603516, 0.0, -0.0003662109375, -0.010334014892578125, -6.866455078125e-05, -9.5367431640625e-06, -1.52587890625e-05, -0.0014001429080963135, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "targets", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 4, 282, 47, 165, "2", "<EOS>"]}, {"score": -5.728902142708634, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "GtE"}], "hole2": [{"_type": "Num", "n": 2}]}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -5.024762153625488, -0.010921478271484375, -0.30657100677490234, -0.00545501708984375, -0.0006694793701171875, 0.0, -9.298318218498025e-06, -2.7060508728027344e-05, -0.00029206275939941406, -1.1920928244535389e-07, -0.002254486083984375, -0.022368431091308594, -0.0019369125366210938, -0.0014257431030273438, -1.9073486328125e-05, -0.031151533126831055, -2.0265579223632812e-06, -0.0030946731567382812, -0.0005550384521484375, -0.031061172485351562, -7.62939453125e-06, -0.000308990478515625, -8.20159912109375e-05, -3.814697265625e-06, -2.741813204920618e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00086212158203125, 0.0, -1.1444091796875e-05, -6.556510470545618e-06, -0.0002756118483375758, -0.02513885498046875, -0.000640869140625, -0.0013141632080078125, -4.57763671875e-05, -1.9073486328125e-05, -8.392333984375e-05, 0.0, -4.9591064453125e-05, -0.000102996826171875, -0.00018239011114928871, -2.1457672119140625e-06, -0.00099945068359375, -5.7220458984375e-06, -3.814697265625e-06, -1.1444091796875e-05, -0.0002079010009765625, -2.4676306566107087e-05, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -1.3470649719238281e-05, -6.687641143798828e-05, -0.00034332275390625, -0.0001583099365234375, -0.011686325073242188, -3.814697265625e-06, -8.58306884765625e-05, -0.013253927230834961, -7.748603820800781e-06, -0.00916290283203125, -1.52587890625e-05, -4.38690185546875e-05, 0.0, -0.000396728515625, 0.0, -0.00033998486469499767, -4.9591064453125e-05, -0.0010262727737426758, -4.76837158203125e-05, -4.9591064453125e-05, -0.0009555816650390625, -1.9073486328125e-06, -0.005909919738769531, -1.52587890625e-05, -0.002277374267578125, 0.0, -0.00019240379333496094, -2.2649765014648438e-06, -0.00031185150146484375, -1.9073486328125e-06, -0.0018617399036884308, -2.09808349609375e-05, -0.0015411376953125, -0.0001392364501953125, -7.62939453125e-05, -7.2479248046875e-05, -0.024849606677889824, -0.00037980079650878906, -0.0009069442749023438, -1.52587890625e-05, -5.91278076171875e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00015461444854736328, -0.0001354217529296875, -0.0008792877197265625, -0.0001811981201171875, -0.00037837025593034923, -0.0001316070556640625, -0.0004425048828125, -4.76837158203125e-05, -0.0015309453010559082, -1.9311904907226562e-05, -0.0061244964599609375, -5.7220458984375e-05, -9.5367431640625e-06, -0.0002899169921875, -1.9073486328125e-06, -9.1552734375e-05, -0.00467681884765625, -1.9073486328125e-06, -0.0005435943603515625, -0.000164031982421875, -1.71661376953125e-05, 0.0, -0.000293731689453125, 0.0, -0.0007348060607910156, -6.4373016357421875e-06, -0.001256108283996582, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.01060473918914795, -5.7220458984375e-06, -0.004772186279296875, -0.0001888275146484375, -0.020795822143554688, -1.71661376953125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001964569091796875, -0.03630848601460457, -0.0009164642542600632, -0.011089563369750977, 0.0, -0.0023174285888671875, -0.0001850128173828125, -5.7220458984375e-06, -0.0030045509338378906, -3.814697265625e-06, -0.004918098449707031, -1.52587890625e-05, -0.011450767517089844, -0.0002841949462890625, -7.62939453125e-06, -3.814697265625e-06, -0.0046901702880859375, -1.52587890625e-05, -0.018162796273827553, -5.483625955093885e-06, -0.0017491579055786133, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.0014457531506195664, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.00058996636653319, -7.43865966796875e-05], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 4, 282, 47, 165, "2", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.829699218615573, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        characters = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "characters"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "GtE"}], "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -5.4369707107543945, -0.00020444393157958984, -0.003933906555175781, -4.1961669921875e-05, -3.0517578125e-05, 0.0, -0.0002346038818359375, 0.0, -0.012257695198059082, -5.14984130859375e-05, -0.001653909683227539, -4.57763671875e-05, -8.96453857421875e-05, -0.012545585632324219, -3.814697265625e-06, -0.03361701965332031, -1.52587890625e-05, -0.0010986328125, 0.0, -0.00016307830810546875, -2.2649765014648438e-06, -0.00027561187744140625, -1.9073486328125e-06, -0.0021485313773155212, -1.9073486328125e-05, -0.0010395050048828125, -0.0001201629638671875, -8.20159912109375e-05, -6.67572021484375e-05, -0.02179061248898506, -0.00035309791564941406, -0.0012083053588867188, -1.52587890625e-05, -7.05718994140625e-05, -1.71661376953125e-05, -0.0002722740173339844, -0.00011456012725830078, -0.0001163482666015625, -0.0008182525634765625, -0.0001850128173828125, -0.0003830194182228297, -8.96453857421875e-05, -0.0004405975341796875, -5.340576171875e-05, -0.0014815330505371094, -1.5497207641601562e-05, -0.0061969757080078125, -5.7220458984375e-05, -7.62939453125e-06, -0.0002841949462890625, -1.9073486328125e-06, -8.96453857421875e-05, -0.004011988639831543, -1.9073486328125e-06, -0.0005779266357421875, -0.000202178955078125, -1.71661376953125e-05, 0.0, -0.000301361083984375, 0.0, -0.0007042884826660156, -6.556510470545618e-06, -0.001267552375793457, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010584712028503418, -5.7220458984375e-06, -0.004791259765625, -0.00018310546875, -0.020879745483398438, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0002002716064453125, -0.0002002716064453125, -0.036695696413517, -0.0009163437644019723, -0.011154413223266602, 0.0, -0.002323150634765625, -0.0001850128173828125, -5.7220458984375e-06, -0.003001689910888672, -3.814697265625e-06, -0.004876136779785156, -1.52587890625e-05, -0.011721611022949219, -0.0002880096435546875, -7.62939453125e-06, -3.814697265625e-06, -0.004833221435546875, -1.52587890625e-05, -0.018287574872374535, -5.483625955093885e-06, -0.0017586946487426758, -0.0001983642578125, -1.9073486328125e-05, -0.0010433197021484375, -0.0001773834228515625, -0.0014498019590973854, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005909200408495963, -7.43865966796875e-05, -0.05311393737792969, -0.0025081634521484375, -0.00141143798828125, -0.0008792877197265625, -0.000843048095703125, 0.0, -7.629378160345368e-06, -2.1219253540039062e-05, -0.0005571842193603516, 0.0, -0.0003681182861328125, -0.010375022888183594, -6.866455078125e-05, -9.5367431640625e-06, -1.71661376953125e-05, -0.0014300048351287842, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "characters", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 4, 282, 47, 165, "2", "<EOS>"]}, {"score": -5.860620022255475, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"hole0": {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template67", "hole1": "other_player"}, "_type": "Template4", "hole1": [{"_type": "GtE"}], "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -5.471631050109863, -0.0003948211669921875, -7.05718994140625e-05, -2.86102294921875e-05, -1.33514404296875e-05, -5.53131103515625e-05, 0.0, -0.0001049041748046875, -0.0001983642578125, -9.739234519656748e-05, -7.152555099310121e-07, -0.0025386810302734375, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, -0.0001201629638671875, -1.1324875231366605e-05, 0.0, -1.52587890625e-05, -1.1444091796875e-05, -1.1563301086425781e-05, -7.641315460205078e-05, -0.06377410888671875, -0.0002288818359375, -0.0001850128173828125, -1.9073486328125e-05, -0.018755793571472168, -0.0018182992935180664, -0.0002040863037109375, -1.33514404296875e-05, -0.0002593994140625, -1.9073486328125e-06, -0.0013264416484162211, -0.0001678466796875, -0.0001964569091796875, -0.00058746337890625, -0.00035858154296875, -0.0028837916906923056, -0.00029754638671875, -0.0007419586181640625, -9.5367431640625e-06, -0.00028105080127716064, -3.2663341698935255e-05, -0.01648712158203125, -0.0001659393310546875, -1.33514404296875e-05, -0.0002994537353515625, -1.9073486328125e-06, -3.24249267578125e-05, -0.020079612731933594, -3.814697265625e-06, -0.0010128021240234375, -0.0001621246337890625, -2.09808349609375e-05, 0.0, -0.000324249267578125, 0.0, -0.0007393360137939453, -4.291534423828125e-06, -0.001381993293762207, -1.1920928244535389e-07, -0.0001068115234375, -0.0003604888916015625, -6.29425048828125e-05, -0.00932300090789795, -5.7220458984375e-06, -0.0067119598388671875, -0.000240325927734375, -0.025272369384765625, -1.71661376953125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0002307891845703125, -0.000164031982421875, -0.03584155812859535, -0.0008778515621088445, -0.011654019355773926, 0.0, -0.002410888671875, -0.000186920166015625, -5.7220458984375e-06, -0.0030074119567871094, -3.814697265625e-06, -0.009324073791503906, -1.9073486328125e-05, -0.01415252685546875, -0.000240325927734375, -9.5367431640625e-06, -3.814697265625e-06, -0.0054378509521484375, -1.1444091796875e-05, -0.019464900717139244, -5.7220440794480965e-06, -0.001818537712097168, -0.0001888275146484375, -2.09808349609375e-05, -0.00103759765625, -0.00017547607421875, -0.0014835725305601954, -6.73532485961914e-05, -1.33514404296875e-05, -9.918212890625e-05, -0.0006078477599658072, -7.62939453125e-05, -0.04946613311767578, -0.0026702880859375, -0.001434326171875, -0.0009288787841796875, -0.000850677490234375, 0.0, -7.510169325541938e-06, -2.1219253540039062e-05, -0.0005590915679931641, 0.0, -0.0003490447998046875, -0.010321617126464844, -6.866455078125e-05, -9.5367431640625e-06, -1.52587890625e-05, -0.001356273889541626, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 113, 217, 30, 249, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 279, 4, 282, 47, 165, "2", "<EOS>"]}, {"score": -7.2651736159245885, "inferred_code": "class Cleave(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cleave', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n    minion.player = player\n", "model_output": {"body": [{"body": [{"hole0": "Cleave", "_type": "Template15", "hole1": 2, "hole2": "WARRIOR"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "minions"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "remove", "value": {"_type": "Name", "id": "minions"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "i"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}, {"targets": [{"_type": "Attribute", "attr": "player", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "player"}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Cleave"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -3.981510963058099e-05, -1.3589857189799659e-05, -2.09808349609375e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00412177387624979, -5.59091531613376e-05, -1.1563301086425781e-05, -0.010934829711914062, -0.0075511932373046875, -0.00165557861328125, -5.960446742392378e-06, -3.767012822208926e-05, -9.691077866591513e-05, 0.0, -0.00022125244140625, -1.9073486328125e-06, -0.008111000061035156, -9.5367431640625e-06, -0.0001373291015625, -1.9073486328125e-06, -4.00543212890625e-05, -0.0001468658447265625, -5.7220458984375e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -5.662440889864229e-05, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -3.2663341698935255e-05, -0.024733543395996094, -0.000247955322265625, -0.00066375732421875, -5.340576171875e-05, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -4.76837158203125e-05, -8.7738037109375e-05, -0.00017011164163704962, 0.0, -0.0009479522705078125, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -9.72747802734375e-05, -2.2888167222845368e-05, 0.0, -2.288818359375e-05, -1.1444091796875e-05, -9.655952453613281e-06, -8.213520050048828e-05, -0.000179290771484375, -7.62939453125e-05, -0.01190948486328125, -3.814697265625e-06, -7.43865966796875e-05, -0.01339113712310791, -7.748603820800781e-06, -0.009572982788085938, -1.52587890625e-05, -4.9591064453125e-05, 0.0, -0.0004062652587890625, 0.0, -0.0003472566313575953, -4.76837158203125e-05, -0.0010472536087036133, -4.57763671875e-05, -5.14984130859375e-05, -0.0009365081787109375, -1.9073486328125e-06, -0.005985260009765625, -1.52587890625e-05, -0.0022640228271484375, 0.0, -0.00019443035125732422, -2.2649765014648438e-06, -0.00031375885009765625, -1.9073486328125e-06, -0.001874854788184166, -2.09808349609375e-05, -0.0011472702026367188, -0.0001277923583984375, -6.4849853515625e-05, -5.91278076171875e-05, -0.027708468958735466, -0.0004781484603881836, -0.0011339187622070312, -1.52587890625e-05, -5.7220458984375e-05, -1.33514404296875e-05, -0.00028586387634277344, -0.00013172626495361328, -0.0001220703125, -0.0008563995361328125, -0.00018310546875, -0.00038647648761980236, -0.0001125335693359375, -0.000446319580078125, -5.14984130859375e-05, -0.0014635920524597168, -1.7404556274414062e-05, -0.0061492919921875, -5.91278076171875e-05, -7.62939453125e-06, -0.0002918243408203125, -1.9073486328125e-06, -8.96453857421875e-05, -0.004361748695373535, -1.9073486328125e-06, -0.0005550384521484375, -0.0001811981201171875, -1.71661376953125e-05, 0.0, -0.00029754638671875, 0.0, -0.0007176399230957031, -6.556510470545618e-06, -0.001259922981262207, -1.1920928244535389e-07, -0.000110626220703125, -0.000293731689453125, -5.14984130859375e-05, -0.010621070861816406, -5.7220458984375e-06, -0.00479888916015625, -0.0001850128173828125, -0.020845413208007812, -1.9073486328125e-05, -0.000133514404296875, -3.814697265625e-06, -0.0001983642578125, -0.0001983642578125, -0.03651276230812073, -0.0009157495223917067, -0.01110386848449707, 0.0, -0.0023193359375, -0.0001850128173828125, -5.7220458984375e-06, -0.003002643585205078, -3.814697265625e-06, -0.004889488220214844, -1.52587890625e-05, -0.011591911315917969, -0.0002899169921875, -7.62939453125e-06, -3.814697265625e-06, -0.0047245025634765625, -1.52587890625e-05, -0.01820175163447857, -5.483625955093885e-06, -0.0017539262771606445, -0.0001983642578125, -1.9073486328125e-05, -0.00104522705078125, -0.0001773834228515625, -0.0014480173122137785, -6.92605972290039e-05, -1.33514404296875e-05, -9.34600830078125e-05, -0.0005909200408495963, -7.43865966796875e-05, -4.041029930114746, -0.0021924972534179688, -0.00020599365234375, -2.0145387649536133, -3.814697265625e-06, -0.14385604858398438, -1.9073486328125e-06, -0.0013053305447101593, -3.933904736186378e-06, -0.4150826930999756, 0.0, -0.01723480224609375, -1.9073486328125e-06, -0.3345835208892822, 0.0], "choice_history": [80, 159, 295, 88, 138, "Cleave", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 297, 101, 184, "Cleave", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "minions", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "i", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 47, 165, "2", "<EOS>", 297, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minions", "<EOS>", "remove", "<EOS>", 282, 45, 160, "minion", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "player", "<EOS>", 19, 160, "player", "<EOS>"]}, {"score": -20.14065170288086, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -1.1444091796875e-05, -20.140628814697266], "choice_history": [80, 159, 294]}]}
{"index": 20, "beams": [{"score": -0.3438813934242262, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -0.008585929870605469, -4.1961669921875e-05, -0.0013523101806640625, -0.0001964569091796875, -0.000911712646484375, -5.7220458984375e-06, -0.0013866424560546875, -2.86102294921875e-05, -0.0006961822509765625, 0.0, -6.67572021484375e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00030517578125, -6.103515625e-05, -0.000667572021484375, -1.9073486328125e-06, -7.82012939453125e-05, -9.655952453613281e-06, -0.0011883974075317383, -3.814697265625e-06, -0.0003859986027237028, -0.0001010894775390625, -0.002384185791015625, -0.001461029052734375, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -0.0001430511474609375, 0.0, -4.57763671875e-05, 0.0, -7.736682891845703e-05, -1.9073486328125e-06, -0.0014821290969848633, -4.76837158203125e-05, -7.62939453125e-06, -0.0006084442138671875, -0.0001220703125, -8.940599946072325e-05, -3.576272865757346e-05, -0.0001087188720703125, -1.1444091796875e-05, -6.687560380669311e-05, -1.71661376953125e-05, -0.10625743865966797, -1.71661376953125e-05, -0.009739875793457031, -0.0008907318115234375, -5.7220458984375e-06, -1.9073486328125e-06, -0.0004024505615234375, -7.62939453125e-06, -0.00040435791015625, -2.6702880859375e-05, -0.11618995666503906, -3.24249267578125e-05, -8.463858830509707e-05, -1.1563301086425781e-05, -0.0036940574645996094, 0.0, -0.0017444441327825189, -1.549708758830093e-05, -0.012159347534179688, -3.0517578125e-05, -5.7220458984375e-05, -0.0028285980224609375, -0.0001010894775390625, -0.00019560717919375747, -4.0531158447265625e-06, -0.00019073486328125, -4.76837158203125e-05, -7.033336441963911e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -2.5163224593413815, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -0.008585929870605469, -4.1961669921875e-05, -0.0013523101806640625, -0.0001964569091796875, -0.000911712646484375, -5.7220458984375e-06, -0.0013866424560546875, -2.86102294921875e-05, -0.0006961822509765625, 0.0, -6.67572021484375e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00030517578125, -6.103515625e-05, -0.000667572021484375, -1.9073486328125e-06, -7.82012939453125e-05, -9.655952453613281e-06, -0.0011883974075317383, -3.814697265625e-06, -0.0003859986027237028, -0.0001010894775390625, -0.002384185791015625, -0.001461029052734375, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -0.0001430511474609375, 0.0, -4.57763671875e-05, 0.0, -7.736682891845703e-05, -1.9073486328125e-06, -0.0014821290969848633, -4.76837158203125e-05, -7.62939453125e-06, -0.0006084442138671875, -0.0001220703125, -8.940599946072325e-05, -3.576272865757346e-05, -0.0001087188720703125, -1.1444091796875e-05, -6.687560380669311e-05, -1.71661376953125e-05, -2.3392934799194336, -0.0010585784912109375, -0.000438690185546875, 0.0, -2.3007391064311378e-05, 0.0, -0.00286102294921875, 0.0, -0.01804351806640625, -3.814697265625e-06, -0.000240325927734375, -1.9073486328125e-06, -7.62939453125e-05, -1.9073486328125e-06, -0.0021076202392578125, 0.0, -0.004499905742704868, -2.300739288330078e-05, -6.103515625e-05, -0.00063323974609375, -7.62939453125e-06, -1.33514404296875e-05, -3.4332275390625e-05, -9.5367431640625e-06, 0.0, -0.00061798095703125, 0.0, -0.00013637542724609375, -1.9073486328125e-06, -0.05600929260253906, -4.57763671875e-05, -7.62939453125e-06, -0.0008182525634765625, -0.00017547607421875, -0.0001877436152426526, -3.910062514478341e-05, -4.38690185546875e-05, -9.5367431640625e-06, -0.00011813405581051484, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -2.527252392568471, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage.damage(player.effective_spell_damage(\n            2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -0.008585929870605469, -4.1961669921875e-05, -0.0013523101806640625, -0.0001964569091796875, -0.000911712646484375, -5.7220458984375e-06, -0.0013866424560546875, -2.86102294921875e-05, -0.0006961822509765625, 0.0, -6.67572021484375e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00030517578125, -6.103515625e-05, -0.000667572021484375, -1.9073486328125e-06, -7.82012939453125e-05, -9.655952453613281e-06, -0.0011883974075317383, -3.814697265625e-06, -0.0003859986027237028, -0.0001010894775390625, -0.002384185791015625, -0.001461029052734375, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -0.0001430511474609375, 0.0, -4.57763671875e-05, 0.0, -7.736682891845703e-05, -1.9073486328125e-06, -0.0014821290969848633, -4.76837158203125e-05, -7.62939453125e-06, -0.0006084442138671875, -0.0001220703125, -8.940599946072325e-05, -3.576272865757346e-05, -0.0001087188720703125, -1.1444091796875e-05, -6.687560380669311e-05, -1.71661376953125e-05, -0.10625743865966797, -1.71661376953125e-05, -0.009739875793457031, -0.0008907318115234375, -5.7220458984375e-06, -1.9073486328125e-06, -0.0004024505615234375, -7.62939453125e-06, -0.00040435791015625, -2.6702880859375e-05, -2.220808982849121, -7.62939453125e-05, -0.0008182525634765625, -2.288818359375e-05, -0.00010395046410849318, -4.0411949157714844e-05, -0.002150297164916992, -2.0265579223632812e-06, -0.014549126848578453, -8.987976616481319e-05, -0.07065378874540329, -3.933906555175781e-06, -0.008485555648803711, -6.496906280517578e-05, -2.86102294921875e-05, -0.00222015380859375, -0.000209808349609375, -0.00014959978580009192, -2.1457672119140625e-06, -0.000240325927734375, -5.14984130859375e-05, -5.626668280456215e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.416419229478606, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}, {"iter": {"_type": "Name", "id": "targets"}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -3.36814022064209, -0.0031948089599609375, -7.43865966796875e-05, -3.814697265625e-06, -1.9073486328125e-05, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -8.20159912109375e-05, -1.1444091796875e-05, 0.0, -0.0001373291015625, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.288818359375e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0028104782104492188, -0.0002536773681640625, -5.7220458984375e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.03294849395751953, 0.0, -0.0031499862670898438, -1.71661376953125e-05, -2.09808349609375e-05, 0.0, -0.000904083251953125, 0.0, -0.00037384033203125, -5.91278076171875e-05, -0.0004138946533203125, -1.9073486328125e-06, -4.9591064453125e-05, -0.0005397796630859375, -3.814697265625e-06, -5.91278076171875e-05, -1.1444091796875e-05, -0.0018291473388671875, -3.814697265625e-06, -8.594989776611328e-05, -1.7523765563964844e-05, -0.0006051063537597656, -1.9073486328125e-06, -0.0009842927101999521, -7.82012939453125e-05, -0.0004825592041015625, -8.0108642578125e-05, -0.0002346038818359375, -9.918212890625e-05, -1.52587890625e-05, 0.0, -0.0002593994140625, 0.0, -0.12412095069885254, -2.0265579223632812e-06, -0.024924278259277344, -0.00017750263214111328, -2.09808349609375e-05, -3.24249267578125e-05, 0.0, -0.001728057861328125, -4.00543212890625e-05, -0.000385284423828125, 0.0, -0.0008107423782348633, -2.741813204920618e-06, -0.4387190341949463, 0.0, -0.041708946228027344, -5.7220458984375e-06, -0.0048999786376953125, -9.34600830078125e-05, -1.33514404296875e-05, 0.0, -0.0001875162124633789, 0.0, -0.08369636535644531, -0.0001316070556640625, -0.06414031982421875, -1.9073486328125e-06, -0.0001392364501953125, -0.043750762939453125, -1.71661376953125e-05, -0.000171661376953125, -9.5367431640625e-06, -5.53131103515625e-05, 0.0, -7.62939453125e-05, 0.0, -4.982948303222656e-05, -3.814697265625e-06, -0.159842848777771, -7.62939453125e-05, -7.62939453125e-06, -0.000850677490234375, -0.00012969970703125, -0.00020086001313757151, -3.063678013859317e-05, -8.20159912109375e-05, -9.5367431640625e-06, -6.71140878694132e-05, -1.71661376953125e-05], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 19, 160, "targets", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.991168603819233, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -4.947324275970459, -6.29425048828125e-05, -5.7220458984375e-06, -7.62939453125e-06, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -2.6702880859375e-05, -5.340576171875e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.000164031982421875, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.0001583099365234375, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.000202178955078125, -0.0001659393310546875, -0.000362396240234375, 0.0, -0.0004235506057739258, 0.0, -0.0207366943359375, -8.20159912109375e-05, -0.001132965087890625, -0.00045013427734375, -0.0005435943603515625, -5.7220458984375e-06, -0.0009212493896484375, -3.24249267578125e-05, -0.0004329681396484375, 0.0, -6.866455078125e-05, -0.0001354217529296875, -1.9073486328125e-06, -0.0002593994140625, -6.29425048828125e-05, -0.0006656646728515625, -1.9073486328125e-06, -9.1552734375e-05, -9.775161743164062e-06, -0.0011922121047973633, -5.7220458984375e-06, -0.000491379585582763, -0.000102996826171875, -0.0027675628662109375, -0.0023555755615234375, -7.62939453125e-06, -1.9073486328125e-05, -7.62939453125e-06, -0.000152587890625, 0.0, -4.00543212890625e-05, 0.0, -7.927417755126953e-05, -3.814697265625e-06, -0.0015546083450317383, -4.9591064453125e-05, -7.62939453125e-06, -0.0006389617919921875, -0.0001163482666015625, -9.32206166908145e-05, -3.314013156341389e-05, -0.0001220703125, -1.1444091796875e-05, -6.639878847636282e-05, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.257803044101593, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.hero.damage(player.effective_spell_damage(2),\n            self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -0.008585929870605469, -4.1961669921875e-05, -0.0013523101806640625, -0.0001964569091796875, -0.000911712646484375, -5.7220458984375e-06, -0.0013866424560546875, -2.86102294921875e-05, -0.0006961822509765625, 0.0, -6.67572021484375e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00030517578125, -6.103515625e-05, -0.000667572021484375, -1.9073486328125e-06, -7.82012939453125e-05, -9.655952453613281e-06, -0.0011883974075317383, -3.814697265625e-06, -0.0003859986027237028, -0.0001010894775390625, -0.002384185791015625, -0.001461029052734375, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -0.0001430511474609375, 0.0, -4.57763671875e-05, 0.0, -7.736682891845703e-05, -1.9073486328125e-06, -0.0014821290969848633, -4.76837158203125e-05, -7.62939453125e-06, -0.0006084442138671875, -0.0001220703125, -8.940599946072325e-05, -3.576272865757346e-05, -0.0001087188720703125, -1.1444091796875e-05, -6.687560380669311e-05, -1.71661376953125e-05, -0.10625743865966797, -1.71661376953125e-05, -0.009739875793457031, -0.0008907318115234375, -5.7220458984375e-06, -1.9073486328125e-06, -0.0004024505615234375, -7.62939453125e-06, -0.00040435791015625, -2.6702880859375e-05, -2.220808982849121, -7.62939453125e-05, -0.0008182525634765625, -2.288818359375e-05, -0.00010395046410849318, -4.0411949157714844e-05, -0.002150297164916992, -2.0265579223632812e-06, -0.014549126848578453, -8.987976616481319e-05, -2.8017473220825195, -3.814689989667386e-06, -0.007878661155700684, -4.76837158203125e-05, -6.29425048828125e-05, -0.0022411346435546875, -0.00023651123046875, -0.0001679552806308493, -2.1457672119140625e-06, -0.000225067138671875, -4.38690185546875e-05, -6.020063301548362e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.347175003871371, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.heal(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -0.008585929870605469, -4.1961669921875e-05, -0.0013523101806640625, -0.0001964569091796875, -0.000911712646484375, -5.7220458984375e-06, -0.0013866424560546875, -2.86102294921875e-05, -0.0006961822509765625, 0.0, -6.67572021484375e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00030517578125, -6.103515625e-05, -0.000667572021484375, -1.9073486328125e-06, -7.82012939453125e-05, -9.655952453613281e-06, -0.0011883974075317383, -3.814697265625e-06, -0.0003859986027237028, -0.0001010894775390625, -0.002384185791015625, -0.001461029052734375, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -0.0001430511474609375, 0.0, -4.57763671875e-05, 0.0, -7.736682891845703e-05, -1.9073486328125e-06, -0.0014821290969848633, -4.76837158203125e-05, -7.62939453125e-06, -0.0006084442138671875, -0.0001220703125, -8.940599946072325e-05, -3.576272865757346e-05, -0.0001087188720703125, -1.1444091796875e-05, -6.687560380669311e-05, -1.71661376953125e-05, -0.10625743865966797, -1.71661376953125e-05, -0.009739875793457031, -0.0008907318115234375, -5.7220458984375e-06, -1.9073486328125e-06, -0.0004024505615234375, -7.62939453125e-06, -0.00040435791015625, -2.6702880859375e-05, -0.11618995666503906, -3.24249267578125e-05, -8.463858830509707e-05, -1.1563301086425781e-05, -0.0036940574645996094, 0.0, -0.0017444441327825189, -1.549708758830093e-05, -4.958489418029785, 0.0, -5.91278076171875e-05, -0.05954170227050781, -0.0001163482666015625, -0.0005803916719742119, -3.933906555175781e-06, -0.0001068115234375, -1.71661376953125e-05, -6.198879418661818e-05, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.545146152946245, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"hole0": 4, "_type": "Template47"}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -0.008585929870605469, -4.1961669921875e-05, -0.0013523101806640625, -0.0001964569091796875, -0.000911712646484375, -5.7220458984375e-06, -0.0013866424560546875, -2.86102294921875e-05, -0.0006961822509765625, 0.0, -6.67572021484375e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00030517578125, -6.103515625e-05, -0.000667572021484375, -1.9073486328125e-06, -7.82012939453125e-05, -9.655952453613281e-06, -0.0011883974075317383, -3.814697265625e-06, -0.0003859986027237028, -0.0001010894775390625, -0.002384185791015625, -0.001461029052734375, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -0.0001430511474609375, 0.0, -4.57763671875e-05, 0.0, -7.736682891845703e-05, -1.9073486328125e-06, -0.0014821290969848633, -4.76837158203125e-05, -7.62939453125e-06, -0.0006084442138671875, -0.0001220703125, -8.940599946072325e-05, -3.576272865757346e-05, -0.0001087188720703125, -1.1444091796875e-05, -6.687560380669311e-05, -1.71661376953125e-05, -0.10625743865966797, -1.71661376953125e-05, -4.811363220214844, -0.000331878662109375, -0.538275420665741, -0.00023710724781267345], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 25, 223, "4", "<EOS>"]}, {"score": -5.754139035955632, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -3.36814022064209, -0.0031948089599609375, -7.43865966796875e-05, -3.814697265625e-06, -1.9073486328125e-05, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -8.20159912109375e-05, -1.1444091796875e-05, 0.0, -0.0001373291015625, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.288818359375e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0028104782104492188, -0.0002536773681640625, -5.7220458984375e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.03294849395751953, 0.0, -0.0031499862670898438, -1.71661376953125e-05, -2.09808349609375e-05, 0.0, -0.000904083251953125, 0.0, -0.00037384033203125, -5.91278076171875e-05, -0.0004138946533203125, -1.9073486328125e-06, -4.9591064453125e-05, -0.0005397796630859375, -3.814697265625e-06, -5.91278076171875e-05, -1.1444091796875e-05, -0.0018291473388671875, -3.814697265625e-06, -8.594989776611328e-05, -1.7523765563964844e-05, -0.0006051063537597656, -1.9073486328125e-06, -0.0009842927101999521, -7.82012939453125e-05, -0.0004825592041015625, -8.0108642578125e-05, -0.0002346038818359375, -9.918212890625e-05, -1.52587890625e-05, 0.0, -0.0002593994140625, 0.0, -0.12412095069885254, -2.0265579223632812e-06, -0.024924278259277344, -0.00017750263214111328, -2.09808349609375e-05, -3.24249267578125e-05, 0.0, -0.001728057861328125, -4.00543212890625e-05, -0.000385284423828125, 0.0, -0.0008107423782348633, -2.741813204920618e-06, -1.0714447498321533, 0.0, -0.24580121040344238, -1.52587890625e-05, -0.05917072296142578, -0.000164031982421875, -9.72747802734375e-05, -1.33514404296875e-05, -1.71661376953125e-05, 0.0, -0.0001430511474609375, 0.0, -0.21775448322296143, -1.9073486328125e-06, -0.04298973083496094, -0.00016605854034423828, -2.6702880859375e-05, -3.0517578125e-05, 0.0, -0.00307464599609375, -9.918212890625e-05, -0.000377655029296875, 0.0, -0.0007954835891723633, -2.503394853192731e-06, -0.4775172472000122, -1.9073486328125e-06, -0.0571974515914917, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>"]}, {"score": -5.8590447118983775, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player:\n            minion.damage(player.effective_spell_damage(2), self)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -5.229985237121582, 0.0, -0.0401611328125, -5.7220458984375e-06, -0.013127326965332031, -1.9073486328125e-06, -0.08285760879516602, 0.0, -0.1680307388305664, -0.0004634857177734375, -1.1444091796875e-05, -5.53131103515625e-05, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.0005359649658203125, -3.814697265625e-06, -0.00022709369659423828, -1.9073486328125e-06, -0.01573765277862549, -5.53131103515625e-05, -5.7220458984375e-06, -0.0013523101806640625, -0.000118255615234375, -0.00017940191901288927, -4.2796113120857626e-05, -0.000118255615234375, -9.5367431640625e-06, -7.307421765290201e-05, -1.71661376953125e-05, -0.11942195892333984, -9.5367431640625e-06, -0.009058952331542969, -0.000690460205078125, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002460479736328125, -4.1961669921875e-05, -0.000225067138671875, -3.24249267578125e-05, -0.08644390106201172, -2.6702880859375e-05, -0.00021898746490478516, -2.0265579223632812e-06, -0.003096342086791992, 0.0, -0.0017920341342687607, -2.062299427052494e-05, -0.015276312828063965, -3.24249267578125e-05, -4.57763671875e-05, -0.0028209686279296875, -0.0001049041748046875, -0.000212412589462474, -3.933906555175781e-06, -0.0001811981201171875, -5.14984130859375e-05, -7.116782217053697e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.884020969462426, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -0.008585929870605469, -4.1961669921875e-05, -0.0013523101806640625, -0.0001964569091796875, -0.000911712646484375, -5.7220458984375e-06, -0.0013866424560546875, -2.86102294921875e-05, -0.0006961822509765625, 0.0, -6.67572021484375e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00030517578125, -6.103515625e-05, -0.000667572021484375, -1.9073486328125e-06, -7.82012939453125e-05, -9.655952453613281e-06, -0.0011883974075317383, -3.814697265625e-06, -0.0003859986027237028, -0.0001010894775390625, -0.002384185791015625, -0.001461029052734375, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -0.0001430511474609375, 0.0, -4.57763671875e-05, 0.0, -7.736682891845703e-05, -1.9073486328125e-06, -0.0014821290969848633, -4.76837158203125e-05, -7.62939453125e-06, -0.0006084442138671875, -0.0001220703125, -8.940599946072325e-05, -3.576272865757346e-05, -0.0001087188720703125, -1.1444091796875e-05, -6.687560380669311e-05, -1.71661376953125e-05, -0.10625743865966797, -1.71661376953125e-05, -4.811363220214844, -0.000331878662109375, -0.8766956925392151, -0.0006916518905200064], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 25, 223, "2", "<EOS>"]}, {"score": -6.029424273068571, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        player.hero.change_temp_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "_type": "Template15", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"hole0": 2, "_type": "Template62"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -0.000591278076171875, -9.34600830078125e-05, -1.7881377516459906e-06, -0.00016605854034423828, -0.00014494816423393786, -5.7220458984375e-06, -0.00144195556640625, -5.7220458984375e-06, -0.000217437744140625, -1.71661376953125e-05, -0.0017242431640625, 0.0, -1.9073486328125e-05, -7.82012939453125e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.3484230041503906e-05, 0.0, -3.814697265625e-06, -5.602834789897315e-06, -2.2649765014648438e-06, -0.053442955017089844, -6.866455078125e-05, -9.5367431640625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.0001068115234375, -1.52587890625e-05, 0.0, -0.0001239776611328125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0036716461181640625, -0.0003414154052734375, -0.0002727508544921875, 0.0, -0.0007269382476806641, 0.0, -0.008585929870605469, -4.1961669921875e-05, -0.0013523101806640625, -0.0001964569091796875, -0.000911712646484375, -5.7220458984375e-06, -0.0013866424560546875, -2.86102294921875e-05, -0.0006961822509765625, 0.0, -6.67572021484375e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.00030517578125, -6.103515625e-05, -0.000667572021484375, -1.9073486328125e-06, -7.82012939453125e-05, -9.655952453613281e-06, -0.0011883974075317383, -3.814697265625e-06, -0.0003859986027237028, -0.0001010894775390625, -0.002384185791015625, -0.001461029052734375, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -0.0001430511474609375, 0.0, -4.57763671875e-05, 0.0, -7.736682891845703e-05, -1.9073486328125e-06, -0.0014821290969848633, -4.76837158203125e-05, -7.62939453125e-06, -0.0006084442138671875, -0.0001220703125, -8.940599946072325e-05, -3.576272865757346e-05, -0.0001087188720703125, -1.1444091796875e-05, -6.687560380669311e-05, -1.71661376953125e-05, -5.9213056564331055, -0.0035619735717773438, -0.015848733484745026, -4.398822056828067e-05], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 119, 245, "2", "<EOS>"]}, {"score": -8.25465414499854, "inferred_code": "class Consecration(SpellCard):\n\n    def __init__(self):\n        super().__init__('Consecration', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Consecration", "hole2": "PALADIN", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Consecration"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -3.814697265625e-05, -4.00543212890625e-05, -4.410734163684538e-06, -6.115331780165434e-05, -0.0002155303955078125, 0.0, -3.0517578125e-05, -4.8995018005371094e-05, -9.34600830078125e-05, -7.62939453125e-06, -7.62939453125e-05, -8.098551750183105, -0.0006122589111328125, -3.3378546504536644e-06, -4.017353057861328e-05, -0.00021395765361376107, 0.0, -0.012456893920898438, 0.0, -0.0005779266357421875, 0.0, -0.0002841949462890625, -5.7220458984375e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.0002040863037109375, 0.0, -0.052768707275390625, -0.000316619873046875, -0.0007171630859375, 0.0, -0.007431745529174805, -4.172325134277344e-06, -0.014432907104492188, -0.000881195068359375, -0.0019588470458984375, 0.0, -0.05816209316253662, -1.9073486328125e-05, -0.0020542144775390625, 0.0, -0.0001201629638671875, -0.000415802001953125, -1.33514404296875e-05, -0.0003795623779296875, -2.503394853192731e-06], "choice_history": [80, 159, 295, 88, 138, "Consecration", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Consecration", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -19.117761611938477, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -19.11697769165039], "choice_history": [80, 159, 294]}, {"score": -20.675582036376, "inferred_code": "self.target.add_buff(Buff(()))\n", "model_output": {"body": [{"hole0": "", "_type": "Template50"}], "_type": "Module"}, "score_history": [-0.000156402587890625, -0.0006275177001953125, -0.00060272216796875, -13.66991138458252, -6.979948043823242, -0.024335965514183044], "choice_history": [80, 159, 295, 117, 226, "<EOS>"]}]}
{"index": 21, "beams": [{"score": -0.05682245589377999, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "hole2": "ALL", "_type": "Template11", "hole1": 7, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -0.051491737365722656, -5.7220458984375e-05, -4.6491513785440475e-06, -9.775159924174659e-06, -1.5497207641601562e-05, -0.0001220703125, -0.00019490717386361212, 0.0, -0.00014495849609375, 0.0, -2.47955322265625e-05, -2.86102294921875e-05, -0.000125885009765625, -2.47955322265625e-05, -1.1444091796875e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -0.00029754638671875, -0.000213623046875, -0.00089263916015625, -5.7220458984375e-06, -0.0015664278762415051, 0.0, -0.00018453580560162663, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -3.1833874415042374, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Core Hound", "hole2": "FREE", "_type": "Template34", "hole1": 7, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.0935916900634766, -3.814697265625e-05, -0.00011742115020751953, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.58306884765625e-05, -0.0704488754272461, -0.000606536865234375, -2.7179348762729205e-05, -2.9802309654769488e-05, -1.0132769602932967e-05, -0.0001697540283203125, -0.004312152974307537, 0.0, -0.0064983367919921875, -5.7220458984375e-06, -4.017321771243587e-05, -4.76837158203125e-05, -8.20159912109375e-05, -0.0033817291259765625, -9.5367431640625e-06, 0.0, -0.0001201629638671875, -1.52587890625e-05, -0.0002536773681640625, -2.86102294921875e-05, -0.0015354156494140625, -1.9073486328125e-06, -0.00044539503869600594, 0.0, -0.00012063970643794164, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -6.259081990499453, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "_type": "Template6", "hole1": 7, "hole2": "ALL"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -6.246743679046631, -0.0013332366943359375, -2.610649426060263e-05, -5.507373862201348e-05, -4.649161837733118e-06, -8.58306884765625e-05, -0.0005208253278397024, 0.0, -0.0069255828857421875, 0.0, -0.000507354736328125, -1.9073486328125e-06, -0.001479758182540536, 0.0, -0.0001258847478311509, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -6.552387018220543, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "hole2": "ALL", "_type": "Template11", "hole1": 7, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 3, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -0.051491737365722656, -5.7220458984375e-05, -4.6491513785440475e-06, -9.775159924174659e-06, -1.5497207641601562e-05, -0.0001220703125, -0.00019490717386361212, 0.0, -0.00014495849609375, 0.0, -2.47955322265625e-05, -2.86102294921875e-05, -0.000125885009765625, -2.47955322265625e-05, -1.1444091796875e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -0.00029754638671875, -0.000213623046875, -0.00089263916015625, -5.7220458984375e-06, -6.497138500213623, 0.0, -0.00017702579498291016, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "3", "<EOS>", "5", "<EOS>"]}, {"score": -6.766229092032518, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(9, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Core Hound"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 9, "_type": "Template72", "hole1": 4}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.0935916900634766, -3.814697265625e-05, -0.00011742115020751953, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.58306884765625e-05, -2.7430124282836914, -0.000133514404296875, -1.71661376953125e-05, -0.059131622314453125, -5.14984130859375e-05, 0.0, -3.24249267578125e-05, 0.0, -2.586812843219377e-05, 0.0, -1.9073486328125e-05, 0.0, -0.03787422180175781, -2.09808349609375e-05, -4.9591064453125e-05, -2.0503786799963564e-05, -0.00028455257415771484, -2.670266076165717e-05, -3.0517578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.06077339127659798, -1.9073486328125e-06, -0.00620269775390625, 0.0, -1.1444091796875e-05, 0.0, -2.86102294921875e-05, -2.1457672119140625e-06, -0.0008678436279296875, -5.7220458984375e-06, -7.05718994140625e-05, 0.0, -7.62939453125e-06, -2.86102294921875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0004024505615234375, -1.9073486328125e-06, -0.00031280517578125, -6.103515625e-05, -9.918212890625e-05, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.003437042236328125, 0.0, -0.0003376007080078125, -1.9073486328125e-05, -0.32944393157958984, -5.7220458984375e-06, -0.0002803802490234375, 0.0, -5.7220458984375e-05, -0.0005893707275390625, -1.9073486328125e-06, -5.91278076171875e-05, -2.47955322265625e-05, -2.09808349609375e-05, -0.04004383087158203, -1.9073486328125e-06, -0.000102996826171875, -0.020114898681640625, -0.0006103515625, -0.07857900112867355, -0.0009506932692602277, -0.28662845492362976, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Core", " ", "Hound", "<EOS>", 47, 165, "7", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 122, 254, "9", "<EOS>", "4", "<EOS>"]}, {"score": -6.893366746118318, "inferred_code": "class <UNK>Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "hole2": "ALL", "_type": "Template11", "hole1": 7, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Hound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -6.839301109313965, -1.955016705323942e-05, -3.814689989667386e-06, -3.814697265625e-06, -2.09808349609375e-05, 0.0, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.04980278015136719, -5.340576171875e-05, -5.125986263010418e-06, -1.025199526338838e-05, -1.7523765563964844e-05, -0.000202178955078125, -0.00020277498697396368, 0.0, -0.0001354217529296875, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -0.000118255615234375, -2.288818359375e-05, -1.1444091796875e-05, 0.0, -0.0001277923583984375, -3.814697265625e-06, -0.00029754638671875, -0.0002117156982421875, -0.0009136199951171875, -5.7220458984375e-06, -0.0015458388952538371, 0.0, -0.00018441659631207585, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -7.29251280630524, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Core Hound"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.0935916900634766, -3.814697265625e-05, -0.00011742115020751953, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.58306884765625e-05, -2.7430124282836914, -0.000133514404296875, -1.71661376953125e-05, -0.059131622314453125, -5.14984130859375e-05, 0.0, -3.24249267578125e-05, 0.0, -2.586812843219377e-05, 0.0, -1.9073486328125e-05, 0.0, -0.03787422180175781, -2.09808349609375e-05, -4.9591064453125e-05, -2.0503786799963564e-05, -0.00028455257415771484, -2.670266076165717e-05, -3.0517578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.06077339127659798, -1.9073486328125e-06, -0.00620269775390625, 0.0, -1.1444091796875e-05, 0.0, -2.86102294921875e-05, -2.1457672119140625e-06, -0.0008678436279296875, -5.7220458984375e-06, -7.05718994140625e-05, 0.0, -7.62939453125e-06, -2.86102294921875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0004024505615234375, -1.9073486328125e-06, -0.00031280517578125, -6.103515625e-05, -9.918212890625e-05, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.003437042236328125, 0.0, -0.0003376007080078125, -1.9073486328125e-05, -1.2834997177124023, -1.33514404296875e-05, -0.00011693913984345272, 0.0, -0.00017309187387581915, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Core", " ", "Hound", "<EOS>", 47, 165, "7", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -7.332158782679471, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -7.2476019859313965, -0.0025310516357421875, -0.0008257793379016221, -1.9907929527107626e-05, -8.583065209677443e-06, -0.05249786376953125, -0.0035926566924899817, -0.0007114410400390625, -0.013504266738891602, -0.000148773193359375, -0.000858306884765625, -6.29425048828125e-05, -0.008429070003330708, -1.9073486328125e-06, -9.023780876304954e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Core", " ", "Hound", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -7.363821490009286, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "_type": "Template15", "hole1": 7, "hole2": "ALL"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -7.346889972686768, -0.000484466552734375, -3.4927710657939315e-05, -4.38690185546875e-05, -1.0013580322265625e-05, -3.4332275390625e-05, -0.0009599922923371196, 0.0, -0.0001049041748046875, -3.4332275390625e-05, -0.012686729431152344, -3.814697265625e-06, -0.0011756072053685784, 0.0, -8.642666216474026e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -7.434897863337028, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "hole2": "ALL", "_type": "Template11", "hole1": 7, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 9, "_type": "Template23", "hole1": 5, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -0.051491737365722656, -5.7220458984375e-05, -4.6491513785440475e-06, -9.775159924174659e-06, -1.5497207641601562e-05, -0.0001220703125, -0.00019490717386361212, 0.0, -0.00014495849609375, 0.0, -2.47955322265625e-05, -2.86102294921875e-05, -0.000125885009765625, -2.47955322265625e-05, -1.1444091796875e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -0.00029754638671875, -0.000213623046875, -7.269848823547363, -0.0002117156982421875, -3.3258958865189925e-05, 0.0, -0.0017928527668118477, -1.9073486328125e-06, -0.1074972152709961, -0.0011157989501953125, -0.0001392364501953125, -7.05718994140625e-05, -1.1444091796875e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "9", "<EOS>", "5", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.56576646575013, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Core Hound", "hole2": "COMMON", "_type": "Template34", "hole1": 7, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.0935916900634766, -3.814697265625e-05, -0.00011742115020751953, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.58306884765625e-05, -0.0704488754272461, -0.000606536865234375, -2.7179348762729205e-05, -2.9802309654769488e-05, -1.0132769602932967e-05, -0.0001697540283203125, -0.004312152974307537, 0.0, -5.38926887512207, 0.0, -1.3589859008789062e-05, -4.57763671875e-05, -9.34600830078125e-05, -0.0031833648681640625, -1.1444091796875e-05, 0.0, -0.00011444091796875, -9.5367431640625e-06, -0.0002689361572265625, -4.57763671875e-05, -0.001255035400390625, -1.9073486328125e-06, -0.000520942616276443, 0.0, -0.00013220302935224026, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -8.624549823782218, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 9, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "hole2": "ALL", "_type": "Template11", "hole1": 9, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -0.051491737365722656, -5.7220458984375e-05, -4.6491513785440475e-06, -9.775159924174659e-06, -1.5497207641601562e-05, -0.0001220703125, -8.568008422851562, -5.7220458984375e-06, -5.91278076171875e-05, 0.0, -2.6702880859375e-05, -2.86102294921875e-05, -0.0001392364501953125, -1.71661376953125e-05, -1.1444091796875e-05, 0.0, -0.0001220703125, -3.814697265625e-06, -0.0002689361572265625, -0.000209808349609375, -0.000942230224609375, -5.7220458984375e-06, -0.0015416728565469384, 0.0, -0.00018608554091770202, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Core", " ", "Hound", "<EOS>", "9", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -8.656812715185879, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 9, CHARACTER_CLASS.ALL, CARD_RARITY.\n            FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Core Hound", "hole2": "FREE", "_type": "Template34", "hole1": 9, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.0935916900634766, -3.814697265625e-05, -0.00011742115020751953, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.58306884765625e-05, -0.0704488754272461, -0.000606536865234375, -2.7179348762729205e-05, -2.9802309654769488e-05, -1.0132769602932967e-05, -0.0001697540283203125, -5.470785617828369, 0.0, -0.015146255493164062, -7.62939453125e-06, -4.816007276531309e-05, -4.38690185546875e-05, -0.0001373291015625, -0.00135040283203125, -9.5367431640625e-06, 0.0, -0.0001544952392578125, -1.71661376953125e-05, -0.00020599365234375, -1.52587890625e-05, -0.001834869384765625, -1.9073486328125e-06, -0.00044706405606120825, 0.0, -0.00011813628952950239, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Core", " ", "Hound", "<EOS>", "9", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -8.905245356869273, "inferred_code": "class CoreHound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Core Hound', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST, minion_type=MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(9, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Core Hound", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "minion_type", "hole2": "ALL", "hole6": "BEAST", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 7, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 9, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "CoreHound"}], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0010714748641476035, -7.426476804539561e-05, -8.106198947643861e-06, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -7.825116157531738, -0.0005741119384765625, -0.0005389191792346537, -2.3484230041503906e-05, -0.00012349433382041752, -7.62939453125e-06, -0.00048160224105231464, 0.0, -0.00012791156768798828, -1.9073486328125e-06, -0.014842987060546875, 0.0, -2.0265579223632812e-06, -1.9073486328125e-06, -5.91278076171875e-05, 0.0, -8.0108642578125e-05, -1.33514404296875e-05, -0.0010623931884765625, 0.0, -0.8579187393188477, 0.0, -0.0022449493408203125, -1.33514404296875e-05, -0.00011444091796875, -2.86102294921875e-05, -0.0014476776123046875, -2.288818359375e-05, -0.19873559474945068, -1.9073486328125e-06, -0.00038797646993771195, 0.0], "choice_history": [80, 159, 295, 88, 138, "Core", "Hound", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Core", " ", "Hound", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "9", "<EOS>", "5", "<EOS>"]}, {"score": -23.201744079589844, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, -5.7220458984375e-06, -23.201738357543945], "choice_history": [80, 159, 294]}]}
{"index": 22, "beams": [{"score": -1.5469406785516, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.3299306631088257, -1.9073486328125e-05, -2.6702880859375e-05, -0.0016689300537109375, 0.0, -0.00010776519775390625, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -1.7318523207751966, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.4645427465438843, 0.0, -1.9073486328125e-06, -0.0044574737548828125, -5.7220458984375e-06, -0.04765883460640907, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -2.8498917164135307, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_effect", "hole2": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "TurnStarted"}}, {"args": [{"hole0": "Kill", "_type": "Template77"}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.2174056768417358, -1.9073486328125e-06, -1.1444091796875e-05, -0.01165771484375, -0.04177665710449219, -0.0002994537353515625, 0.0, -0.22502470016479492, -0.0003337860107421875, -0.0004062652587890625, -0.0002422332763671875, -0.0107574462890625, -3.814697265625e-05, 0.0, -0.4739241600036621, -0.24076569080352783, 0.0, -3.62396240234375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0005180835723876953, 0.0, -0.0015411376953125, 0.0, -0.000542759895324707, -5.841255187988281e-06, 0.0, -0.0018596649169921875, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.00042724609375, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-05, -0.005078315734863281, -1.1444091796875e-05, -0.39842504262924194, -1.2397744285408407e-05, -0.00019073486328125, 0.0, -0.00325930118560791, -2.86102294921875e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Turn", "Started", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 68, 260, "Kill", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -2.877762393846915, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.player(1)\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "player", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -2.5659115314483643, 0.0, -0.0001392364501953125, -0.001285552978515625, -5.7220458984375e-06, -0.095234714448452, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "player", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -3.553732478772126, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(Character<UNK>(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_effect", "hole2": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}}, {"args": [{"hole0": "Kill", "_type": "Template77"}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.2174056768417358, -1.9073486328125e-06, -1.1444091796875e-05, -0.01165771484375, -0.04177665710449219, -0.0002994537353515625, 0.0, -0.22502470016479492, -0.0003337860107421875, -0.0004062652587890625, -0.0002422332763671875, -0.0107574462890625, -3.814697265625e-05, 0.0, -1.1512770652770996, -0.14239799976348877, -0.005056977272033691, -0.03763294219970703, -0.0001087188720703125, 0.0, -0.1032416820526123, 0.0, -0.0008907318115234375, 0.0, -0.0008357763290405273, -5.9604644775390625e-06, 0.0, -0.00128936767578125, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0008640289306640625, -1.52587890625e-05, -1.9073486328125e-06, -3.814697265625e-05, -0.004183769226074219, -1.1444091796875e-05, -0.37912020087242126, -1.4662702596979216e-05, -0.000171661376953125, 0.0, -0.0033566951751708984, -3.063678741455078e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "<UNK>", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 68, 260, "Kill", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -4.168687069590469, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnEnded(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_effect", "hole2": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "TurnEnded"}}, {"args": [{"hole0": "Kill", "_type": "Template77"}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.2174056768417358, -1.9073486328125e-06, -1.1444091796875e-05, -0.01165771484375, -0.04177665710449219, -0.0002994537353515625, 0.0, -0.22502470016479492, -0.0003337860107421875, -0.0004062652587890625, -0.0002422332763671875, -0.0107574462890625, -3.814697265625e-05, 0.0, -0.4739241600036621, -1.5554896593093872, 0.0, -2.6702880859375e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.0007759332656860352, 0.0, -0.0025768280029296875, 0.0, -0.0006717443466186523, -5.841255187988281e-06, 0.0, -0.001842498779296875, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -0.000408172607421875, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-05, -0.0049724578857421875, -1.33514404296875e-05, -0.40112587809562683, -1.1920909855689388e-05, -0.0002040863037109375, 0.0, -0.003315567970275879, -2.86102294921875e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Turn", "Ended", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 68, 260, "Kill", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -4.806732946827815, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -4.184310436248779, 0.0, -1.71661376953125e-05, -0.00439453125, -3.814697265625e-05, -0.4027870297431946, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -5.0340539159325814, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "die", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -2.442925453186035, -1.9073486328125e-06, -0.0006084442138671875, 0.0, -0.0005646944046020508, -4.00543212890625e-05, -0.0003108978271484375, -3.814697265625e-06, -0.9342454671859741, -3.814697265625e-06, -1.5280001163482666, -3.24249267578125e-05, -0.001678466796875, -0.0018787384033203125, 0.0, -0.0001201629638671875, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.034645044973438, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Kill(), SelfSelector())))\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "TurnStarted"}}, {"args": [{"hole0": "Kill", "_type": "Template77"}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -2.8494269847869873, -3.576278118089249e-07, -2.6702880859375e-05, -0.15283966064453125, -0.0019664764404296875, -3.24249267578125e-05, 0.0, -0.5847965478897095, -0.00337982177734375, -0.000396728515625, -0.000209808349609375, -0.008150100708007812, -2.6702880859375e-05, 0.0, -0.5731453895568848, -0.23199379444122314, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0003973245620727539, 0.0, -0.0014476776123046875, 0.0, -0.0005044937133789062, -5.841255187988281e-06, 0.0, -0.0015087127685546875, -3.62396240234375e-05, -1.9073486328125e-06, 0.0, -0.0003871917724609375, -1.71661376953125e-05, -1.9073486328125e-06, -5.91278076171875e-05, -0.005070686340332031, -1.33514404296875e-05, -0.40000495314598083, -1.2516951755969785e-05, -0.0001888275146484375, 0.0, -0.003331780433654785, -2.86102294921875e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Turn", "Started", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 68, 260, "Kill", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -5.083896988823817, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(3)\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.4645427465438843, 0.0, -1.9073486328125e-06, -0.0044574737548828125, -5.7220458984375e-06, -3.3997035026550293, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -5.276173883855499, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Resurrect<UNK>(), HeroSelector())))\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_effect", "hole2": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "TurnStarted"}}, {"args": [{"hole0": "Resurrect<UNK>", "_type": "Template77"}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.2174056768417358, -1.9073486328125e-06, -1.1444091796875e-05, -0.01165771484375, -0.04177665710449219, -0.0002994537353515625, 0.0, -0.22502470016479492, -0.0003337860107421875, -0.0004062652587890625, -0.0002422332763671875, -0.0107574462890625, -3.814697265625e-05, 0.0, -0.4739241600036621, -0.24076569080352783, 0.0, -3.62396240234375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0005180835723876953, 0.0, -0.0015411376953125, 0.0, -0.000542759895324707, -5.841255187988281e-06, 0.0, -0.0018596649169921875, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.00042724609375, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-05, -0.005078315734863281, -1.1444091796875e-05, -2.47920560836792, -0.036292850971221924, -0.00329744815826416, -0.0022182464599609375, 0.0, -0.30703485012054443, -0.0001492500159656629, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Turn", "Started", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 68, 260, "Resurrect", "<UNK>", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>"]}, {"score": -5.576662892289441, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(Draw(), SelfSelector())))\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_effect", "hole2": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "TurnStarted"}}, {"args": [{"hole0": "Draw", "_type": "Template77"}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.2174056768417358, -1.9073486328125e-06, -1.1444091796875e-05, -0.01165771484375, -0.04177665710449219, -0.0002994537353515625, 0.0, -0.22502470016479492, -0.0003337860107421875, -0.0004062652587890625, -0.0002422332763671875, -0.0107574462890625, -3.814697265625e-05, 0.0, -0.4739241600036621, -0.24076569080352783, 0.0, -3.62396240234375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0005180835723876953, 0.0, -0.0015411376953125, 0.0, -0.000542759895324707, -5.841255187988281e-06, 0.0, -0.0018596649169921875, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.00042724609375, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-05, -0.005078315734863281, -1.1444091796875e-05, -2.743565559387207, -7.820128666935489e-05, -0.002471923828125, 0.0, -0.382554292678833, -1.728534698486328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Turn", "Started", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 68, 260, "Draw", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -5.621398114820458, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()),\n            ActionTag(IncreaseCorruption(), HeroSelector())))\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_effect", "hole2": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "TurnStarted"}}, {"args": [{"hole0": "IncreaseCorruption", "_type": "Template77"}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -1.2174056768417358, -1.9073486328125e-06, -1.1444091796875e-05, -0.01165771484375, -0.04177665710449219, -0.0002994537353515625, 0.0, -0.22502470016479492, -0.0003337860107421875, -0.0004062652587890625, -0.0002422332763671875, -0.0107574462890625, -3.814697265625e-05, 0.0, -0.4739241600036621, -0.24076569080352783, 0.0, -3.62396240234375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0005180835723876953, 0.0, -0.0015411376953125, 0.0, -0.000542759895324707, -5.841255187988281e-06, 0.0, -0.0018596649169921875, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.00042724609375, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-05, -0.005078315734863281, -1.1444091796875e-05, -2.45613956451416, -0.43415847420692444, -0.004407643806189299, -0.0021610260009765625, 0.0, -0.27650606632232666, -4.9710208259057254e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Turn", "Started", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 68, 260, "Increase", "Corruption", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>"]}, {"score": -5.980068679137837, "inferred_code": "class Corruption(SpellCard):\n\n    def __init__(self):\n        super().__init__('Corruption', 1, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(BuffUntil(enemyAttack(), HeroSelector()))\n", "model_output": {"body": [{"body": [{"hole0": "Corruption", "hole2": "WARLOCK", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"args": [{"hole0": "enemyAttack", "_type": "Template77"}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Corruption"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -7.62939453125e-06, -6.103329360485077e-05, -2.837163265212439e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007641315460205078, -2.0265579223632812e-06, -8.344646857949556e-07, -0.00363922119140625, -0.0904397964477539, -4.1961669921875e-05, -5.960462772236497e-07, -1.71661376953125e-05, -7.152555099310121e-07, 0.0, -0.00013566017150878906, 0.0, -0.00164031982421875, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00052642822265625, -1.9073486328125e-06, -6.866455078125e-05, -1.1920928244535389e-07, -0.021050091832876205, -0.000301361083984375, -0.000667572021484375, -0.00390625, -1.9073486328125e-06, 0.0, -0.09145641326904297, 0.0, -2.300739288330078e-05, -4.38690185546875e-05, -2.47955322265625e-05, 0.0, -2.8494269847869873, -3.576278118089249e-07, -2.6702880859375e-05, -0.15283966064453125, -0.0019664764404296875, -3.24249267578125e-05, 0.0, -1.1233268976211548, -0.003570556640625, -6.4849853515625e-05, -0.00055694580078125, -0.0056858062744140625, -5.7220458984375e-06, -0.8111905455589294, -0.006062692496925592, -2.86102294921875e-05, -0.000118255615234375, 0.0, -0.8095555305480957, -0.000424022669903934, 0.0], "choice_history": [80, 159, 295, 88, 138, "Corruption", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Corruption", "<EOS>", "1", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 40, 136, 19, 160, "Buff", "Until", "<EOS>", 283, 68, 260, "enemy", "Attack", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>"]}, {"score": -22.943538665771484, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -22.94352912902832], "choice_history": [80, 159, 294]}]}
{"index": 23, "beams": [{"score": -0.01651573103993087, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -0.007117271423339844, -4.38690185546875e-05, -4.768370445162873e-07, -1.072883515007561e-05, -2.09808349609375e-05, 0.0, -8.344629350176547e-06, -5.9604644775390625e-06, -3.445148468017578e-05, -3.063678741455078e-05, -0.000545501708984375, -3.0517578125e-05, -1.3112712622387335e-06, 0.0, -1.9430992324487306e-05, -5.7220458984375e-06, -0.006823539733886719, -0.00067901611328125, -0.0007801055908203125, -3.814697265625e-05, -4.708765845862217e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -6.057518600656863, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -0.007117271423339844, -4.38690185546875e-05, -4.768370445162873e-07, -1.072883515007561e-05, -2.09808349609375e-05, 0.0, -8.344629350176547e-06, -5.9604644775390625e-06, -3.445148468017578e-05, -3.063678741455078e-05, -0.000545501708984375, -3.0517578125e-05, -1.3112712622387335e-06, 0.0, -1.9430992324487306e-05, -5.7220458984375e-06, -5.791868209838867, -0.0004825592041015625, -0.2494211196899414, -0.007549285888671875, -4.57763671875e-05, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.105399415303282, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -6.025535583496094, -0.038956642150878906, -0.0003474347176961601, -7.152556463552173e-06, -3.445148468017578e-05, -5.7220458984375e-06, -0.003668146440759301, -2.7179718017578125e-05, -0.01339268684387207, -1.9073486328125e-06, -0.012675285339355469, -2.09808349609375e-05, -3.695065970532596e-06, 0.0, -0.00042632236727513373, 0.0, -0.009028434753417969, -0.00019073486328125, -0.000591278076171875, -0.000156402587890625, -6.055824997019954e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Dalaran", " ", "Mage", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -6.893146394955465, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template17", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -6.849828720092773, -0.00029754638671875, -7.152531907195225e-06, -1.1801719665527344e-05, -9.655952453613281e-06, 0.0, -5.006777428206988e-06, 0.0, -3.504753112792969e-05, -7.62939453125e-06, -0.000125885009765625, -0.000263214111328125, -1.192074705613777e-07, 0.0, -1.5973946574376896e-05, -5.7220458984375e-06, -0.039610862731933594, -0.0014992952346801758, -0.0010700225830078125, -1.9073486328125e-05, -6.103515261202119e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 103, 186, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -7.124837039674944, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -6.869647026062012, -0.00023651123046875, -1.1920928244535389e-07, -7.987022399902344e-06, -4.00543212890625e-05, 0.0, -9.536714060232043e-06, -1.1920928244535389e-07, -5.340576171875e-05, -5.7220458984375e-06, -4.1961669921875e-05, -5.7220458984375e-06, -0.002307891845703125, -7.62939453125e-06, -1.52587890625e-05, 0.0, -0.002635955810546875, -1.9073486328125e-06, -0.21981239318847656, -4.9471709644421935e-05, -0.0001373291015625, -0.0007457733154296875, -7.152157195378095e-07, 0.0, -2.384169420110993e-05, 0.0, -0.026782989501953125, -0.00010693073272705078, -0.001667022705078125, -9.34600830078125e-05, -0.0001314875844400376, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -7.341599463655825, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=1)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "stealth", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -0.007117271423339844, -4.38690185546875e-05, -4.768370445162873e-07, -1.072883515007561e-05, -2.09808349609375e-05, 0.0, -8.344629350176547e-06, -5.9604644775390625e-06, -3.445148468017578e-05, -3.063678741455078e-05, -0.000545501708984375, -3.0517578125e-05, -1.3112712622387335e-06, 0.0, -1.9430992324487306e-05, -5.7220458984375e-06, -5.791868209838867, -0.0004825592041015625, -1.5409107208251953, -8.7738037109375e-05, -0.0001004934310913086, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -7.70418417377698, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=True)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damage", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -0.007117271423339844, -4.38690185546875e-05, -4.768370445162873e-07, -1.072883515007561e-05, -2.09808349609375e-05, 0.0, -8.344629350176547e-06, -5.9604644775390625e-06, -3.445148468017578e-05, -3.063678741455078e-05, -0.000545501708984375, -3.0517578125e-05, -1.3112712622387335e-06, 0.0, -1.9430992324487306e-05, -5.7220458984375e-06, -0.006823539733886719, -0.00067901611328125, -7.55168342590332, -0.1367473602294922, -0.0001010894775390625, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.705851077272769, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damagegame=1)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damagegame", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -0.007117271423339844, -4.38690185546875e-05, -4.768370445162873e-07, -1.072883515007561e-05, -2.09808349609375e-05, 0.0, -8.344629350176547e-06, -5.9604644775390625e-06, -3.445148468017578e-05, -3.063678741455078e-05, -0.000545501708984375, -3.0517578125e-05, -1.3112712622387335e-06, 0.0, -1.9430992324487306e-05, -5.7220458984375e-06, -0.006823539733886719, -7.65861701965332, -2.491474151611328e-05, -0.03176403045654297, -0.0003299713134765625, -0.0001399517059326172, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "game", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -7.908097981638662, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, Started=1)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "Started", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -0.007117271423339844, -4.38690185546875e-05, -4.768370445162873e-07, -1.072883515007561e-05, -2.09808349609375e-05, 0.0, -8.344629350176547e-06, -5.9604644775390625e-06, -3.445148468017578e-05, -3.063678741455078e-05, -0.000545501708984375, -3.0517578125e-05, -1.3112712622387335e-06, 0.0, -1.9430992324487306e-05, -5.7220458984375e-06, -7.534849643707275, -7.62939453125e-06, -0.3648052215576172, -0.0001659393310546875, -0.00012171267735539004, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "Started", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -8.170957683756228, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, Change=True)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "Change", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -0.007117271423339844, -4.38690185546875e-05, -4.768370445162873e-07, -1.072883515007561e-05, -2.09808349609375e-05, 0.0, -8.344629350176547e-06, -5.9604644775390625e-06, -3.445148468017578e-05, -3.063678741455078e-05, -0.000545501708984375, -3.0517578125e-05, -1.3112712622387335e-06, 0.0, -1.9430992324487306e-05, -5.7220458984375e-06, -7.644474506378174, -0.0001773834228515625, -0.496673583984375, -0.020534515380859375, -0.00093841552734375, -1.71661376953125e-05], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "Change", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.024558021521955, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, True, MINION_TYPE.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Dalaran Mage"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -6.2079877853393555, -2.47955322265625e-05, -2.7060508728027344e-05, 0.0, -1.1444091796875e-05, -0.0001697540283203125, -3.0517578125e-05, -8.416175842285156e-05, 0.0, -6.67572021484375e-05, -0.0071277618408203125, -0.00025177001953125, -4.1961669921875e-05, -0.6206340789794922, -2.86102294921875e-05, 0.0, -5.91278076171875e-05, 0.0, -0.001128751551732421, 0.0, -0.0003503561019897461, 0.0, -0.2026538848876953, -0.0002040863037109375, -5.7220458984375e-06, -0.00030989613151177764, -0.00021362303232308477, -1.382827485940652e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.15406052768230438, -1.9073486328125e-06, -0.004698753356933594, -4.76837158203125e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.4849853515625e-05, -5.960462772236497e-07, -0.0005893707275390625, 0.0, -0.0002880096435546875, -1.33514404296875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00262451171875, -3.814697265625e-06, -0.5196218490600586, -3.814697265625e-06, -0.005896568298339844, -9.34600830078125e-05, -0.0002803802490234375, -3.814697265625e-06, -0.0001373291015625, -3.814697265625e-06, -5.7220458984375e-06, -6.103515625e-05, -0.06691277027130127, -1.9073486328125e-06, -1.2092676162719727, -1.9073486328125e-06, -0.009835243225097656, -0.0001068115234375, -3.5762514016823843e-07, 0.0, -1.4662718058389146e-05, -1.9073486328125e-06, -0.007134437561035156, -0.0002307891845703125, -0.00061798095703125, -0.0001010894775390625, -0.00011002953397110105, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Dalaran", " ", "Mage", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "COMMON", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -9.486481888876142, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=CARD_SOURCE.<UNK>)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Dalaran Mage"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "CARD_SOURCE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -6.2079877853393555, -2.47955322265625e-05, -2.7060508728027344e-05, 0.0, -1.1444091796875e-05, -0.0001697540283203125, -3.0517578125e-05, -8.416175842285156e-05, 0.0, -6.67572021484375e-05, -0.0071277618408203125, -0.00025177001953125, -4.1961669921875e-05, -0.7741689682006836, -0.00045013427734375, -1.9073486328125e-06, -6.103515625e-05, 0.0, -1.4305038348538801e-05, 0.0, -3.635882603703067e-05, -1.9073486328125e-06, -0.15910816192626953, -3.814697265625e-06, -3.0517578125e-05, -2.539125671319198e-05, -0.00016295908426400274, -1.621246337890625e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0006924097542650998, -2.0265579223632812e-06, -0.00023651123046875, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -9.65590606938349e-06, -0.0002956390380859375, 0.0, -3.0517578125e-05, -7.82012939453125e-05, 0.0, -5.7220458984375e-06, -0.0016387701034545898, -2.0265579223632812e-06, -0.3886756896972656, -1.9073486328125e-06, -0.0005121231079101562, -0.0003681182861328125, -0.0003235340118408203, -1.9073486328125e-06, -0.284271240234375, -0.00084686279296875, -2.47955322265625e-05, -0.0009233951568603516, -1.9073486328125e-06, -0.0016651153564453125, -2.6702880859375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.8132715225219727, -1.9073486328125e-06, -0.70337975025177, -5.006789251638111e-06, -0.06794261932373047, -0.05361175537109375, -2.979992132168263e-06, 0.0, -0.0003431465302128345, -1.9073486328125e-06, -0.015332221984863281, -0.000202178955078125, -0.0012989044189453125, -4.38690185546875e-05, -0.00017786026000976562, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Dalaran", " ", "Mage", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -9.509224930456867, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Dalaran Mage"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 1, "_type": "Template23", "hole1": 4, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -6.2079877853393555, -2.47955322265625e-05, -2.7060508728027344e-05, 0.0, -1.1444091796875e-05, -0.0001697540283203125, -3.0517578125e-05, -8.416175842285156e-05, 0.0, -6.67572021484375e-05, -0.0071277618408203125, -0.00025177001953125, -4.1961669921875e-05, -0.7741689682006836, -0.00045013427734375, -1.9073486328125e-06, -6.103515625e-05, 0.0, -1.4305038348538801e-05, 0.0, -3.635882603703067e-05, -1.9073486328125e-06, -0.15910816192626953, -3.814697265625e-06, -3.0517578125e-05, -2.539125671319198e-05, -0.00016295908426400274, -1.621246337890625e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0006924097542650998, -2.0265579223632812e-06, -0.00023651123046875, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -9.65590606938349e-06, -0.0002956390380859375, 0.0, -3.0517578125e-05, -7.82012939453125e-05, 0.0, -5.7220458984375e-06, -0.0016387701034545898, -2.0265579223632812e-06, -0.3886756896972656, -1.9073486328125e-06, -0.0005121231079101562, -0.0003681182861328125, -0.0003235340118408203, -1.9073486328125e-06, -0.284271240234375, -0.00084686279296875, -2.47955322265625e-05, -0.0009233951568603516, -1.9073486328125e-06, -0.0016651153564453125, -2.6702880859375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.6754970550537109, -7.62939453125e-06, -0.9613246917724609, -3.3020874980138615e-05, -0.0025177001953125, -0.006404876708984375, -5.960246198810637e-07, 0.0, -7.211941556306556e-05, 0.0, -0.03111553192138672, -0.00015079975128173828, -0.0010471343994140625, -4.76837158203125e-05, -0.00013983246753923595, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Dalaran", " ", "Mage", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -10.20243728094249, "inferred_code": "class DalaranMage(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dalaran Mage', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dalaran Mage", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 1, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DalaranMage"}], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.015949550899677e-05, -1.8119681044481695e-05, -7.152555099310121e-07, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, 0.0, -1.1444091796875e-05, -1.1920928955078125e-05, -1.52587890625e-05, -0.007117271423339844, -4.38690185546875e-05, -4.768370445162873e-07, -1.072883515007561e-05, -2.09808349609375e-05, 0.0, -8.344629350176547e-06, -5.9604644775390625e-06, -3.445148468017578e-05, -3.063678741455078e-05, -10.194751739501953, -5.7220458984375e-05, -2.026550646405667e-06, -3.814697265625e-06, -7.140631350921467e-05, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Dalaran", "Mage", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Dalaran", " ", "Mage", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 110, 202, "1", "<EOS>", "4", "<EOS>"]}, {"score": -23.314407348632812, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-7.43865966796875e-05, -6.4849853515625e-05, -23.314268112182617], "choice_history": [80, 159, 294]}]}
{"index": 24, "beams": [{"score": -0.7561419405237757, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -0.6581029891967773, -2.47955322265625e-05, -1.71661376953125e-05, -0.0057277679443359375, -1.9073486328125e-06, -5.7220458984375e-05, -0.0006122589111328125, -0.0001010894775390625, 0.0, -0.00019085407257080078, -3.4332275390625e-05, -4.38690185546875e-05, -9.5367431640625e-06, -0.07632923126220703, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -1.6429212488428675, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -1.4013094902038574, -2.6702880859375e-05, -1.9073486328125e-05, -0.04553985595703125, -1.9073486328125e-06, -0.0001087188720703125, -0.0003814697265625, -0.0001239776611328125, 0.0, -8.785724639892578e-05, -4.1961669921875e-05, -3.4332275390625e-05, -1.33514404296875e-05, -0.1803436279296875, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -2.6044710077540003, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -2.3920178413391113, -0.0001068115234375, -3.24249267578125e-05, -0.100830078125, 0.0, -7.62939453125e-05, -0.000904083251953125, -6.67572021484375e-05, 0.0, -0.00013744831085205078, -3.62396240234375e-05, -3.24249267578125e-05, -2.288818359375e-05, -0.09531879425048828, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -3.74886433260599, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -3.5829391479492188, -5.7220458984375e-06, -0.000217437744140625, -0.0452117919921875, -3.814697265625e-06, -0.0002651214599609375, -6.4849853515625e-05, -0.00016021728515625, 0.0, -0.05588531494140625, -7.82012939453125e-05, -3.24249267578125e-05, -1.33514404296875e-05, -0.04909992218017578, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -4.253381411005648, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.find_minion_spell_target(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "find_minion_spell_target", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -4.1528801918029785, -3.62396240234375e-05, -7.82012939453125e-05, -0.023511886596679688, -1.9073486328125e-06, -0.0001850128173828125, -5.53131103515625e-05, -0.0003299713134765625, 0.0, -0.008073806762695312, -3.4332275390625e-05, -2.86102294921875e-05, -1.1444091796875e-05, -0.053267478942871094, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "find_minion_spell_target", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -4.270419041086825, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_effect", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -3.8101515769958496, -1.9073486328125e-06, -0.0001926422119140625, -0.3388214111328125, 0.0, -0.0001201629638671875, -0.000507354736328125, -7.82012939453125e-05, 0.0, -0.00010132789611816406, -4.1961669921875e-05, -3.24249267578125e-05, -2.288818359375e-05, -0.10545825958251953, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -4.561119715143832, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.player(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "player", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -4.4825825691223145, 0.0, -5.14984130859375e-05, -0.00717926025390625, 0.0, -0.0003566741943359375, -0.0005245208740234375, -0.0003147125244140625, 0.0, -0.0009307861328125, -1.9073486328125e-05, -3.4332275390625e-05, -9.5367431640625e-06, -0.054229736328125, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "player", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -4.816857139040621, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self.target.taunt)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -1.4013094902038574, -2.6702880859375e-05, -1.9073486328125e-05, -0.04553985595703125, -1.9073486328125e-06, -0.0001087188720703125, -0.0003814697265625, -0.0001239776611328125, 0.0, -8.785724639892578e-05, -4.1961669921875e-05, -3.4332275390625e-05, -1.33514404296875e-05, -3.354281425476074, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>"]}, {"score": -4.989200631548556, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -4.234829425811768, -2.1457672119140625e-06, -2.6702880859375e-05, -0.660099983215332, 0.0, -0.0008544921875, -0.00017547607421875, -6.29425048828125e-05, 0.0, -0.0004597902297973633, -4.9591064453125e-05, -2.86102294921875e-05, -1.71661376953125e-05, -0.07770729064941406, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -5.081064025332125, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.immune)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Attribute", "attr": "immune", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -0.6581029891967773, -2.47955322265625e-05, -1.71661376953125e-05, -0.0057277679443359375, -1.9073486328125e-06, -5.7220458984375e-05, -0.0006122589111328125, -0.0001010894775390625, 0.0, -0.00019085407257080078, -3.4332275390625e-05, -4.38690185546875e-05, -9.5367431640625e-06, -4.3957839012146, -0.005471229553222656], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "immune", "<EOS>"]}, {"score": -5.133923808504733, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.taunt)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Attribute", "attr": "taunt", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -0.6581029891967773, -2.47955322265625e-05, -1.71661376953125e-05, -0.0057277679443359375, -1.9073486328125e-06, -5.7220458984375e-05, -0.0006122589111328125, -0.0001010894775390625, 0.0, -0.00019085407257080078, -3.4332275390625e-05, -4.38690185546875e-05, -9.5367431640625e-06, -4.454113006591797, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "taunt", "<EOS>"]}, {"score": -5.3740467451707445, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(2)\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -2.3920178413391113, -0.0001068115234375, -3.24249267578125e-05, -2.94895076751709, -9.5367431640625e-06, -0.018044255673885345, 0.0], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -5.505247595180663, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"body": [{"body": [{"hole0": "Divine Spirit", "_type": "Template3", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"hole0": "Buff", "_type": "Template69", "hole1": "<UNK>"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -0.009136199951171875, -0.000858306884765625, -3.9696395106147975e-05, -5.9723781305365264e-05, -0.00010776249837363139, -3.814697265625e-06, -0.0008874366176314652, 0.0, -0.0002040863037109375, -3.814697265625e-06, -0.0007228851318359375, -0.0011081695556640625, -1.9073486328125e-06, 0.0, -0.0001811981201171875, 0.0, -2.86102294921875e-05, -0.00014495849609375, -0.000713348388671875, -3.814697265625e-06, -4.234829425811768, -2.1457672119140625e-06, -2.6702880859375e-05, -1.1649036407470703, -3.4332275390625e-05, -0.0035638809204101562, -0.0001226663589477539, -0.041182518005371094, -0.0456971749663353], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Divine", " ", "Spirit", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -7.901775154991803, "inferred_code": "class DivineSpirit(SpellCard):\n\n    def __init__(self):\n        super().__init__('Divine Spirit', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self.target.health)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Divine Spirit"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DivineSpirit"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.82012939453125e-05, -5.7220458984375e-06, -3.1352021323982626e-05, -3.0040715500945225e-05, -9.059865078597795e-06, -8.96453857421875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00013947486877441406, -5.14984130859375e-05, -3.266334533691406e-05, -0.000186920166015625, -4.871944427490234, -2.47955322265625e-05, -0.00032806396484375, -9.5367431640625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.09808349609375e-05, -6.67572021484375e-05, -0.0001964569091796875, -0.00487518310546875, -0.0011577606201171875, -3.814697265625e-06, -1.9073486328125e-06, -0.000823974609375, -0.0006351470947265625, -5.841255187988281e-06, -1.9073486328125e-06, -0.005299568176269531, 0.0, -0.02376556396484375, -0.0015773773193359375, -7.62939453125e-06, -1.2516897186287679e-05, -0.0005979877314530313, -0.002978918608278036, -0.014355659484863281, -1.71661376953125e-05, -1.9073486328125e-05, -0.013583065941929817, -1.33514404296875e-05, -0.002964019775390625, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.00023663043975830078, -1.1920928244535389e-07, -0.005736351013183594, -1.1444091796875e-05, -0.0006103515625, 0.0, -0.027650833129882812, -7.05718994140625e-05, -0.007229804992675781, -1.9073486328125e-06, -0.3836936950683594, -2.09808349609375e-05, -2.6702880859375e-05, -0.0001049041748046875, -0.0002460479736328125, -0.0040721893310546875, -1.9073486328125e-06, -0.0001201629638671875, -4.76837158203125e-05, -1.52587890625e-05, -8.20159912109375e-05, -9.918212890625e-05, -3.814697265625e-06, -0.035968780517578125, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.7380226850509644, -0.00024068355560302734, -0.6440935134887695, -0.0026092529296875, -1.33514404296875e-05, -0.0004367828369140625, -0.0008563995361328125, -1.9073486328125e-06, -5.7220458984375e-05, -0.0001583099365234375, -0.00022125244140625, -1.9073486328125e-06, -0.9385800361633301, -6.878376007080078e-05, -1.33514404296875e-05, -0.05125713348388672, 0.0, -0.000141143798828125, -0.0003337860107421875, -0.000148773193359375, 0.0, -0.00013017654418945312, -3.4332275390625e-05, -2.86102294921875e-05, -1.9073486328125e-05, -0.11220359802246094, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Divine", "Spirit", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Divine", " ", "Spirit", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -23.259756088256836, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-7.62939453125e-06, -9.5367431640625e-06, -23.25973892211914], "choice_history": [80, 159, 294]}]}
{"index": 25, "beams": [{"score": -0.07196101875308614, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(\n            MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "MechanicalDragonling", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -0.05414867401123047, -0.0001316070556640625, -1.0728830375228426e-06, -1.6093232261482626e-05, -1.3470649719238281e-05, -1.9073486328125e-06, -9.155301086138934e-05, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -0.007744550704956055, -3.814697265625e-06, -0.0028057098388671875, -0.0003662109375, -0.0006297107320278883, -2.1457668481161818e-05, -2.47955322265625e-05, -0.00025177001953125, -0.00055694580078125, -0.001131018390879035, -0.0017013169126585126, -0.0008016718784347177, -0.0004730224609375, -4.38690185546875e-05, -0.0008573672384954989, 0.0, -1.430471456842497e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "Dragonling", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -4.008010548285938, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole8": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "MechanicalDragonling", "_type": "Template77"}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -3.0582637786865234, -0.000232696533203125, -0.0004979324294254184, -0.00013053417205810547, -1.394745322613744e-05, -1.9073486328125e-06, -0.018733153119683266, 0.0, -0.00019657611846923828, -1.9073486328125e-06, -0.0015392303466796875, -1.9073486328125e-06, -0.0006237030029296875, -3.814697265625e-06, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -0.8872900009155273, -7.748603820800781e-06, -0.0021287202835083008, 0.0, -0.00922393798828125, -0.02007007598876953, -0.000361976504791528, -0.00010514144378248602, -0.00058746337890625, -0.000919342041015625, -0.0009822845458984375, -0.001189803471788764, -0.0013623432023450732, -0.0022072994615882635, -0.000362396240234375, -2.47955322265625e-05, -0.0007700580172240734, 0.0, -1.6688754840288311e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "Dragonling", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -4.5674578356276925, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole8": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "MechanicalDragonling", "_type": "Template77"}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "PIRATE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -3.0582637786865234, -0.000232696533203125, -0.0004979324294254184, -0.00013053417205810547, -1.394745322613744e-05, -1.9073486328125e-06, -0.018733153119683266, 0.0, -0.00019657611846923828, -1.9073486328125e-06, -0.0015392303466796875, -1.9073486328125e-06, -0.0006237030029296875, -3.814697265625e-06, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.4463281631469727, 0.0, -0.0017875432968139648, 0.0, -0.010000228881835938, -0.020186424255371094, -0.00025495808222331107, -0.00012254661123733968, -0.000499725341796875, -0.0007848739624023438, -0.001171112060546875, -0.0012455340474843979, -0.0012565754586830735, -0.0022402582690119743, -0.0003643035888671875, -2.6702880859375e-05, -0.0007716058753430843, 0.0, -1.7880774976219982e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "Dragonling", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -4.754795176898597, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole8": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "MechanicalDragonling", "_type": "Template77"}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "BEAST", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -3.0582637786865234, -0.000232696533203125, -0.0004979324294254184, -0.00013053417205810547, -1.394745322613744e-05, -1.9073486328125e-06, -0.018733153119683266, 0.0, -0.00019657611846923828, -1.9073486328125e-06, -0.0015392303466796875, -1.9073486328125e-06, -0.0006237030029296875, -3.814697265625e-06, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -1.6326828002929688, -9.5367431640625e-06, -0.0003528594970703125, 0.0, -0.011502265930175781, -0.020827293395996094, -0.0004350225499365479, -9.167147800326347e-05, -0.0005054473876953125, -0.0008382797241210938, -0.0010585784912109375, -0.00136783835478127, -0.0013230344047769904, -0.002257000654935837, -0.0003528594970703125, -2.47955322265625e-05, -0.0007487323018722236, 0.0, -1.668871846050024e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "Dragonling", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -5.269781371183171, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole8": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "MechanicalDragonling", "_type": "Template77"}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "MECH", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -3.0582637786865234, -0.000232696533203125, -0.0004979324294254184, -0.00013053417205810547, -1.394745322613744e-05, -1.9073486328125e-06, -0.018733153119683266, 0.0, -0.00019657611846923828, -1.9073486328125e-06, -0.0015392303466796875, -1.9073486328125e-06, -0.0006237030029296875, -3.814697265625e-06, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -2.14328670501709, 0.0, -0.0008869171142578125, 0.0, -0.013096809387207031, -0.02286815643310547, -0.00043013624963350594, -0.00011730084952432662, -0.000553131103515625, -0.0008563995361328125, -0.001071929931640625, -0.0013586521381512284, -0.0014071956975385547, -0.0023069847375154495, -0.0003681182861328125, -2.47955322265625e-05, -0.0007310977089218795, 0.0, -1.549669832456857e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "Dragonling", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -6.531355468677816, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, deathrattle=Deathrattle(Heal(4),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "deathrattle", "hole3": {"args": [{"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"keywords": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -0.05414867401123047, -0.0001316070556640625, -1.0728830375228426e-06, -1.6093232261482626e-05, -1.3470649719238281e-05, -1.9073486328125e-06, -9.155301086138934e-05, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -4.9164042472839355, -2.47955322265625e-05, -0.008570671081542969, -0.0002155303955078125, -1.71661376953125e-05, 0.0, -0.000194549560546875, -1.9073486328125e-06, -0.1778879165649414, -9.5367431640625e-06, -0.0018444061279296875, -8.392333984375e-05, -0.00014315443695522845, 0.0, -2.8132653824286535e-05, 0.0, -0.28269970417022705, -1.71661376953125e-05, -0.02561187744140625, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -0.0006542205810546875, 0.0, -0.0001277923583984375, -0.43715763092041016, -0.00045013427734375, -0.000152587890625, -0.0007953643798828125, -0.5880405306816101, -0.001745422137901187, -3.814697265625e-06, -0.00118255615234375, -1.9073486328125e-06, -0.0034547699615359306, -3.814697265625e-06, -0.0009746551513671875, -0.0002079010009765625, -2.47955322265625e-05, 0.0, -0.006462216377258301, -9.965896606445312e-05, 0.0, -0.0018157958984375, -9.5367431640625e-06, -3.814697265625e-06, -0.0026051998138427734, 0.0, -0.0001468658447265625, -0.000148773193359375, -0.0065735578536987305, -7.748603820800781e-06, -9.5367431640625e-06, -0.003437042236328125, -3.24249267578125e-05, -0.00044345855712890625, 0.0, -0.00032806396484375, -0.0002269744873046875, -0.0014133453369140625, -0.0042476654052734375, 0.0], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "deathrattle", "<EOS>", 14, 136, 19, 160, "Deathrattle", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "4", "<EOS>", 40, 135, 19, 160, "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>"]}, {"score": -6.7150534014911045, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 4, deathrattle=Deathrattle(Heal(4),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "_type": "Template6", "hole1": 4, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "deathrattle", "hole3": {"args": [{"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"keywords": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -5.443881988525391, -0.0003147125244140625, -2.5629868105170317e-05, -0.00015687260020058602, -2.2649765014648438e-06, -5.7220458984375e-06, -0.014000926166772842, 0.0, -8.797645568847656e-05, 0.0, -0.006404876708984375, -2.09808349609375e-05, -6.83041726006195e-05, 0.0, -0.0003067383076995611, 0.0, -0.22059345245361328, -6.103515625e-05, -0.0022640228271484375, -3.62396240234375e-05, -0.000110626220703125, -5.7220458984375e-06, -0.0007191896438598633, -1.9073486328125e-06, -0.00011444091796875, -0.36048126220703125, -0.0001430511474609375, -0.0001506805419921875, -0.0008563995361328125, -0.6324083805084229, -0.0016104464884847403, -3.814697265625e-06, -0.0012531280517578125, -3.814697265625e-06, -0.0037233796902000904, -3.814697265625e-06, -0.0021533966064453125, -0.000240325927734375, -2.6702880859375e-05, -1.9073486328125e-06, -0.0023480653762817383, -0.00010907649993896484, 0.0, -0.0017070770263671875, -9.5367431640625e-06, -3.814697265625e-06, -0.0023363828659057617, 0.0, -0.0001468658447265625, -0.0001430511474609375, -0.005484223365783691, -7.748603820800781e-06, -1.1444091796875e-05, -0.00380706787109375, -3.0517578125e-05, -0.0004532337188720703, 0.0, -0.0003185272216796875, -0.0002193450927734375, -0.0013942718505859375, -0.004192352294921875, 0.0], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "deathrattle", "<EOS>", 14, 136, 19, 160, "Deathrattle", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "4", "<EOS>", 40, 135, 19, 160, "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>"]}, {"score": -6.740664082719036, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Mechanical()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "Mechanical", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -0.05414867401123047, -0.0001316070556640625, -1.0728830375228426e-06, -1.6093232261482626e-05, -1.3470649719238281e-05, -1.9073486328125e-06, -9.155301086138934e-05, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -0.007744550704956055, -3.814697265625e-06, -0.0028057098388671875, -0.0003662109375, -0.0006297107320278883, -2.1457668481161818e-05, -2.47955322265625e-05, -0.00025177001953125, -0.00055694580078125, -0.001131018390879035, -6.67052698135376, -0.0006313323974609375, -6.67572021484375e-05, -0.0013546445406973362, 0.0, -2.0264524209778756e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.394832499006611, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, deathrattle=Deathrattle(Summon(Dragonling()),\n            PlayerSelector()))\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "deathrattle", "hole3": {"args": [{"hole0": "Summon", "_type": "Template69", "hole1": "Dragonling"}, {"hole0": "PlayerSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -0.05414867401123047, -0.0001316070556640625, -1.0728830375228426e-06, -1.6093232261482626e-05, -1.3470649719238281e-05, -1.9073486328125e-06, -9.155301086138934e-05, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -4.9164042472839355, -2.47955322265625e-05, -0.008570671081542969, -0.0002155303955078125, -1.71661376953125e-05, 0.0, -0.000194549560546875, -1.9073486328125e-06, -0.1778879165649414, -9.5367431640625e-06, -0.0018444061279296875, -8.392333984375e-05, -0.00014315443695522845, 0.0, -2.8132653824286535e-05, 0.0, -0.28269970417022705, -1.71661376953125e-05, -0.02561187744140625, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -0.0006542205810546875, 0.0, -0.0001277923583984375, -1.2513322830200195, -8.0108642578125e-05, -0.012859344482421875, -4.8040277761174366e-05, -0.11528025567531586, -0.5394511818885803, -7.2479248046875e-05, -3.814697265625e-06, -0.006501177791506052, -5.5909084039740264e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "deathrattle", "<EOS>", 14, 136, 19, 160, "Deathrattle", "<EOS>", 283, 61, 250, "Summon", "<EOS>", "Dragonling", "<EOS>", 68, 260, "Player", "Selector", "<EOS>"]}, {"score": -7.41298765365832, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole8": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "MechanicalDragonling", "_type": "Template77"}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "DRAGON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -3.0582637786865234, -0.000232696533203125, -0.0004979324294254184, -0.00013053417205810547, -1.394745322613744e-05, -1.9073486328125e-06, -0.018733153119683266, 0.0, -0.00019657611846923828, -1.9073486328125e-06, -0.0015392303466796875, -1.9073486328125e-06, -0.0006237030029296875, -3.814697265625e-06, -6.29425048828125e-05, 0.0, -2.288818359375e-05, 0.0, -4.288479804992676, 0.0, -0.00144195556640625, 0.0, -0.006707191467285156, -0.025854110717773438, -0.00038163960562087595, -0.0001921643561217934, -0.0004024505615234375, -0.00141143798828125, -0.00128173828125, -0.0014708787202835083, -0.0015284658875316381, -0.0022747511975467205, -0.0003643035888671875, -2.6702880859375e-05, -0.0007530163857154548, 0.0, -1.549669832456857e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "Dragonling", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.46776481377276, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(\n            MechanicalDragonling()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "MechanicalDragonling", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -0.05414867401123047, -0.0001316070556640625, -1.0728830375228426e-06, -1.6093232261482626e-05, -1.3470649719238281e-05, -1.9073486328125e-06, -9.155301086138934e-05, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -0.007744550704956055, -3.814697265625e-06, -0.0028057098388671875, -0.0003662109375, -0.0006297107320278883, -2.1457668481161818e-05, -2.47955322265625e-05, -0.00025177001953125, -0.00055694580078125, -0.001131018390879035, -0.0017013169126585126, -0.0008016718784347177, -0.0004730224609375, -4.38690185546875e-05, -7.396651744842529, -3.814697265625e-06, -5.125841198605485e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "Dragonling", "<EOS>", 110, 202, "3", "<EOS>", "4", "<EOS>"]}, {"score": -7.5692495304489285, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Summon(\n            MechanicalDragonling1()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"hole0": "Summon", "_type": "Template59", "hole1": [{"hole0": "MechanicalDragonling1", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -0.05414867401123047, -0.0001316070556640625, -1.0728830375228426e-06, -1.6093232261482626e-05, -1.3470649719238281e-05, -1.9073486328125e-06, -9.155301086138934e-05, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -0.007744550704956055, -3.814697265625e-06, -0.0028057098388671875, -0.0003662109375, -0.0006297107320278883, -2.1457668481161818e-05, -2.47955322265625e-05, -0.00025177001953125, -0.00055694580078125, -0.001131018390879035, -0.0017013169126585126, -7.498253345489502, -9.5367431640625e-06, -0.0007457733154296875, -9.5367431640625e-06, -0.00044529628939926624, 0.0, -4.768344297190197e-07, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 28, 241, "Summon", "<EOS>", 282, 68, 260, "Mechanical", "Dragonling", "1", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.834797478852352, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 4, deathrattle=Deathrattle(Summon(Dragonling()),\n            PlayerSelector()))\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "_type": "Template6", "hole1": 4, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "deathrattle", "hole3": {"args": [{"hole0": "Summon", "_type": "Template69", "hole1": "Dragonling"}, {"hole0": "PlayerSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -5.443881988525391, -0.0003147125244140625, -2.5629868105170317e-05, -0.00015687260020058602, -2.2649765014648438e-06, -5.7220458984375e-06, -0.014000926166772842, 0.0, -8.797645568847656e-05, 0.0, -0.006404876708984375, -2.09808349609375e-05, -6.83041726006195e-05, 0.0, -0.0003067383076995611, 0.0, -0.22059345245361328, -6.103515625e-05, -0.0022640228271484375, -3.62396240234375e-05, -0.000110626220703125, -5.7220458984375e-06, -0.0007191896438598633, -1.9073486328125e-06, -0.00011444091796875, -1.4200801849365234, -3.0517578125e-05, -0.007907867431640625, -6.460947042796761e-05, -0.18146391212940216, -0.5292702913284302, -5.91278076171875e-05, -3.814697265625e-06, -0.0065874927677214146, -5.936613160884008e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "deathrattle", "<EOS>", 14, 136, 19, 160, "Deathrattle", "<EOS>", 283, 61, 250, "Summon", "<EOS>", "Dragonling", "<EOS>", 68, 260, "Player", "Selector", "<EOS>"]}, {"score": -12.589326741979328, "inferred_code": "class DragonlingMechanic(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dragonling Mechanic', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, deathrattle=Deathrattle(Draw(CharacterSelector(\n            players=BothPlayer(), picker=UserPicker())), ActionTag(Draw(\n            OneIn(2)), CharacterSelector(players=BothPlayer(), picker=\n            UserPicker()))))\n", "model_output": {"body": [{"body": [{"hole0": "Dragonling Mechanic", "hole2": "ALL", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "deathrattle", "hole3": {"args": [{"args": [{"keywords": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Draw"}}, {"args": [{"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "OneIn"}}], "_type": "Call", "func": {"_type": "Name", "id": "Draw"}}, {"keywords": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DragonlingMechanic"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -3.218649908376392e-06, -8.82148651726311e-06, -4.29153169534402e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -9.536738616588991e-07, -1.537799835205078e-05, -2.503394853192731e-06, -9.5367431640625e-06, -0.05414867401123047, -0.0001316070556640625, -1.0728830375228426e-06, -1.6093232261482626e-05, -1.3470649719238281e-05, -1.9073486328125e-06, -9.155301086138934e-05, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -4.9164042472839355, -2.47955322265625e-05, -0.008570671081542969, -0.0002155303955078125, -1.71661376953125e-05, 0.0, -0.000194549560546875, -1.9073486328125e-06, -0.1778879165649414, -9.5367431640625e-06, -0.0018444061279296875, -8.392333984375e-05, -0.00014315443695522845, 0.0, -2.8132653824286535e-05, 0.0, -0.28269970417022705, -1.71661376953125e-05, -0.02561187744140625, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -0.0006542205810546875, 0.0, -0.0001277923583984375, -0.43715763092041016, -0.00045013427734375, -0.000152587890625, -0.0007953643798828125, -1.3673956394195557, -0.0006594104925170541, -0.0003452301025390625, -0.005587577819824219, -0.6807174682617188, -6.103515625e-05, 0.0, -0.8808834552764893, -0.00212252140045166, 0.0, -0.5104579925537109, -2.288818359375e-05, -1.9073486328125e-05, -0.014761090278625488, 0.0, -7.43865966796875e-05, -7.62939453125e-06, -0.005132317543029785, -7.867813110351562e-06, -1.9073486328125e-06, -0.0007762908935546875, -4.76837158203125e-05, -0.0014088153839111328, 0.0, -0.0004291534423828125, -7.43865966796875e-05, -0.0025482177734375, -0.00818634033203125, 0.0, -0.6766023635864258, -0.0022449493408203125, -1.9073486328125e-06, 0.0, -0.027678489685058594, -0.0003566741943359375, 0.0, -2.86102294921875e-05, -0.15064144134521484, -0.000423431396484375, -9.1552734375e-05, -1.33514404296875e-05, -0.03534383699297905, -3.159035986755043e-05, -0.000118255615234375, -0.016042709350585938, -0.3648691177368164, -0.0001277923583984375, 0.0, -0.9615081548690796, -0.008854981511831284, -4.0531158447265625e-06, -0.0001049041748046875, -0.000530242919921875, -1.9073486328125e-06, -0.03537333756685257, -1.9073486328125e-06, -0.34990692138671875, -0.03960704803466797, -5.7220458984375e-06, 0.0, -0.4747467041015625, -1.537799835205078e-05, 0.0, -0.036704063415527344, -1.52587890625e-05, -3.814697265625e-06, -0.0019794702529907227, -1.1920928244535389e-07, -0.0002193450927734375, -0.0001125335693359375, -0.0059223175048828125, -3.814697265625e-06, -9.5367431640625e-06, -0.0030078887939453125, -3.0517578125e-05, -0.000488042802317068, 0.0, -0.0004825592041015625, -0.0001277923583984375, -0.001110076904296875, -0.0044002532958984375, 0.0], "choice_history": [80, 159, 295, 88, 138, "Dragonling", "Mechanic", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Dragonling", " ", "Mechanic", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "deathrattle", "<EOS>", 14, 136, 19, 160, "Deathrattle", "<EOS>", 283, 40, 136, 19, 160, "Draw", "<EOS>", 282, 40, 135, 19, 160, "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "Draw", "<EOS>", 282, 40, 136, 19, 160, "One", "In", "<EOS>", 282, 47, 165, "2", "<EOS>", 40, 135, 19, 160, "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>"]}, {"score": -22.174596786499023, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-3.814697265625e-06, -3.814697265625e-06, -22.174589157104492], "choice_history": [80, 159, 294]}]}
{"index": 26, "beams": [{"score": -0.22346293051667487, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Drain Life"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.058040618896484375, -0.00048065185546875, -9.5367431640625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -0.0002651214599609375, -4.00543212890625e-05, -9.5367431640625e-06, -2.264974000354414e-06, -5.304811929818243e-05, -1.895418972708285e-05, -3.4332275390625e-05, -0.0002593994140625, -2.47955322265625e-05, -0.00013482352369464934, -9.655952453613281e-06, -7.43865966796875e-05, 0.0, -3.0517578125e-05, 0.0, -4.00543212890625e-05, 0.0, -0.001220703125, 0.0, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -7.62939453125e-06, -0.0001316070556640625, 0.0, -0.0005092620849609375, -1.9073486328125e-06, -2.09808349609375e-05, -0.00016021728515625, -6.866455078125e-05, -0.00015270709991455078, 0.0, -2.47955322265625e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -1.52587890625e-05, -5.7220458984375e-06, -0.00013363361358642578, -7.05718994140625e-05, -3.4332275390625e-05, 0.0, -0.03222227096557617, -0.0001285076141357422, -0.0045032501220703125, -1.9073486328125e-05, -4.06503640988376e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -6.4849853515625e-05, -3.814697265625e-06, -1.33514404296875e-05, 0.0, 0.0, -2.622604142743512e-06, 0.0, -9.1552734375e-05, -5.9604644775390625e-06, -2.503394853192731e-06, -0.025331497192382812, 0.0, -7.62939453125e-06, -0.00014495849609375, -1.52587890625e-05, -1.9073486328125e-05, 0.0, -3.814697265625e-05, -1.71661376953125e-05, -7.05718994140625e-05, -3.814697265625e-06, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -7.82012939453125e-05, -4.00543212890625e-05, -9.5367431640625e-06, -4.2319297790527344e-05, -0.0005435943603515625, -1.9073486328125e-06, -0.0013980865478515625, -0.00045013427734375, -0.0001320818846579641, -2.7298927307128906e-05, -0.030806541442871094, -1.9073486328125e-06, -0.000453948974609375, -0.0042896270751953125, -1.9073486328125e-06, -1.9073486328125e-05, -5.14984130859375e-05, 0.0, -0.000316619873046875, -1.9073486328125e-06, -0.0019550323486328125, 0.0, -0.04964160919189453, -4.6491513785440475e-06, -0.001942753791809082, 0.0, -6.866455078125e-05, -0.0002498626708984375, -0.00102996826171875, -0.0001373291015625, -4.00543212890625e-05, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -1.1920928244535389e-07, -0.0010533332824707031, -7.62939453125e-06, -4.38690185546875e-05, -0.0003604888916015625, -1.52587890625e-05, -8.357892511412501e-07, -1.1920928244535389e-07, -0.0007476806640625, -4.1961669921875e-05, -0.0001697540283203125, -2.491474151611328e-05], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Drain", " ", "Life", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -3.486706649250422, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Drain", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -2.9210739135742188, -0.0023441314697265625, -0.0002089732588501647, -0.00011682510375976562, -0.013288196176290512, 0.0, -0.4033689498901367, 0.0, -0.04130840301513672, -1.9073486328125e-05, -0.0009024143218994141, -1.9073486328125e-06, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -3.933906555175781e-06, 0.0, -3.0517578125e-05, -9.5367431640625e-06, -2.384185791015625e-06, -0.009774208068847656, -1.9073486328125e-06, -2.288818359375e-05, -5.340576171875e-05, -2.09808349609375e-05, -2.47955322265625e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-05, -5.91278076171875e-05, -3.814697265625e-06, -5.340576171875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -8.58306884765625e-05, -4.00543212890625e-05, -9.5367431640625e-06, -4.2319297790527344e-05, -0.00064849853515625, -1.9073486328125e-06, -0.0015211105346679688, -0.000446319580078125, -0.00012133896234445274, -3.1113624572753906e-05, -0.02559185028076172, -1.9073486328125e-06, -0.0004425048828125, -0.003566741943359375, -1.9073486328125e-06, -1.9073486328125e-05, -4.9591064453125e-05, 0.0, -0.0003833770751953125, -1.9073486328125e-06, -0.002254486083984375, 0.0, -0.05061137676239014, -4.768360213347478e-06, -0.001881718635559082, 0.0, -6.866455078125e-05, -0.000255584716796875, -0.000988006591796875, -0.0001430511474609375, -3.814697265625e-05, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -1.1920928244535389e-07, -0.0010533332824707031, -7.62939453125e-06, -4.1961669921875e-05, -0.000362396240234375, -1.52587890625e-05, -2.623972250148654e-06, -1.1920928244535389e-07, -0.000820159912109375, -4.00543212890625e-05, -0.00017547607421875, -2.491474151611328e-05], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Drain", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -3.8357662859664075, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Drain Life"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.058040618896484375, -0.00048065185546875, -9.5367431640625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -0.0002651214599609375, -4.00543212890625e-05, -9.5367431640625e-06, -2.264974000354414e-06, -5.304811929818243e-05, -1.895418972708285e-05, -3.4332275390625e-05, -0.0002593994140625, -2.47955322265625e-05, -0.00013482352369464934, -9.655952453613281e-06, -7.43865966796875e-05, 0.0, -3.0517578125e-05, 0.0, -4.00543212890625e-05, 0.0, -0.001220703125, 0.0, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -7.62939453125e-06, -0.0001316070556640625, 0.0, -0.0005092620849609375, -1.9073486328125e-06, -2.09808349609375e-05, -0.00016021728515625, -6.866455078125e-05, -0.00015270709991455078, 0.0, -2.47955322265625e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -1.52587890625e-05, -5.7220458984375e-06, -0.00013363361358642578, -7.05718994140625e-05, -3.4332275390625e-05, 0.0, -3.576303005218506, -6.723403930664062e-05, -0.0705118179321289, -1.9073486328125e-05, -3.516674041748047e-05, -3.814697265625e-06, -7.62939453125e-06, -6.4849853515625e-05, -3.814697265625e-06, -1.33514404296875e-05, 0.0, 0.0, -3.3378591979271732e-06, -1.1920928244535389e-07, -9.918212890625e-05, -6.079673767089844e-06, -2.503394853192731e-06, -0.023050308227539062, 0.0, -7.62939453125e-06, -0.0001392364501953125, -1.33514404296875e-05, -2.09808349609375e-05, 0.0, -3.814697265625e-05, -1.71661376953125e-05, -7.05718994140625e-05, -3.814697265625e-06, -6.103515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -7.82012939453125e-05, -4.00543212890625e-05, -9.5367431640625e-06, -4.2319297790527344e-05, -0.0005970001220703125, -1.9073486328125e-06, -0.0014200210571289062, -0.000446319580078125, -0.00012502778554335237, -2.9206275939941406e-05, -0.03540229797363281, -1.9073486328125e-06, -0.00045013427734375, -0.0041065216064453125, -1.9073486328125e-06, -1.9073486328125e-05, -4.76837158203125e-05, 0.0, -0.0003070831298828125, -1.9073486328125e-06, -0.002010345458984375, 0.0, -0.04969024658203125, -4.6491513785440475e-06, -0.0019246339797973633, 0.0, -6.866455078125e-05, -0.000247955322265625, -0.0010471343994140625, -0.0001392364501953125, -4.00543212890625e-05, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -1.1920928244535389e-07, -0.0010514259338378906, -7.62939453125e-06, -4.38690185546875e-05, -0.0003604888916015625, -1.52587890625e-05, -9.549985406920314e-07, -1.1920928244535389e-07, -0.00074005126953125, -4.1961669921875e-05, -0.0001697540283203125, -2.491474151611328e-05], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Drain", " ", "Life", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -3.9978594679378148, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Drain Life"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.058040618896484375, -0.00048065185546875, -9.5367431640625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -0.0002651214599609375, -4.00543212890625e-05, -9.5367431640625e-06, -2.264974000354414e-06, -5.304811929818243e-05, -1.895418972708285e-05, -3.4332275390625e-05, -0.0002593994140625, -2.47955322265625e-05, -0.00013482352369464934, -9.655952453613281e-06, -7.43865966796875e-05, 0.0, -3.0517578125e-05, 0.0, -4.00543212890625e-05, 0.0, -0.001220703125, 0.0, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -7.62939453125e-06, -0.0001316070556640625, 0.0, -0.0005092620849609375, -1.9073486328125e-06, -2.09808349609375e-05, -0.00016021728515625, -6.866455078125e-05, -0.00015270709991455078, 0.0, -2.47955322265625e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -1.52587890625e-05, -5.7220458984375e-06, -0.00013363361358642578, -7.05718994140625e-05, -3.4332275390625e-05, 0.0, -0.03222227096557617, -0.0001285076141357422, -0.0045032501220703125, -1.9073486328125e-05, -4.06503640988376e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -6.4849853515625e-05, -3.814697265625e-06, -1.33514404296875e-05, 0.0, 0.0, -2.622604142743512e-06, 0.0, -9.1552734375e-05, -5.9604644775390625e-06, -2.503394853192731e-06, -0.025331497192382812, 0.0, -7.62939453125e-06, -0.00014495849609375, -1.52587890625e-05, -1.9073486328125e-05, 0.0, -3.814697265625e-05, -1.71661376953125e-05, -7.05718994140625e-05, -3.814697265625e-06, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -7.82012939453125e-05, -4.00543212890625e-05, -9.5367431640625e-06, -4.2319297790527344e-05, -0.0005435943603515625, -1.9073486328125e-06, -0.0013980865478515625, -0.00045013427734375, -0.0001320818846579641, -2.7298927307128906e-05, -3.5328588485717773, -0.006705284118652344, -0.3283628225326538, 0.0], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Drain", " ", "Life", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -4.59651580115154, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.hero.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Drain", "_type": "Template25", "hole1": "DRUID", "hole2": "COMMON"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -2.9210739135742188, -0.0023441314697265625, -0.0002089732588501647, -0.00011682510375976562, -0.013288196176290512, 0.0, -1.32366943359375, 0.0, -0.22284793853759766, -5.7220458984375e-06, -0.0016834735870361328, -1.9073486328125e-06, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, 0.0, -3.933906555175781e-06, 0.0, -4.1961669921875e-05, -7.62939453125e-06, -4.410743713378906e-06, -0.0167694091796875, -1.9073486328125e-06, -2.47955322265625e-05, -5.53131103515625e-05, -2.09808349609375e-05, -2.47955322265625e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.71661376953125e-05, -5.7220458984375e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -8.392333984375e-05, -4.00543212890625e-05, -9.5367431640625e-06, -4.2319297790527344e-05, -0.0006160736083984375, -1.9073486328125e-06, -0.0014791488647460938, -0.000453948974609375, -0.0001200193291879259, -3.1113624572753906e-05, -0.02660369873046875, -1.9073486328125e-06, -0.0004482269287109375, -0.00363922119140625, -1.9073486328125e-06, -1.9073486328125e-05, -4.76837158203125e-05, 0.0, -0.000396728515625, -1.9073486328125e-06, -0.0022602081298828125, 0.0, -0.049765586853027344, -4.887569048150908e-06, -0.001904606819152832, 0.0, -6.67572021484375e-05, -0.0002536773681640625, -0.00096893310546875, -0.0001430511474609375, -3.814697265625e-05, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -1.1920928244535389e-07, -0.0010552406311035156, -7.62939453125e-06, -4.1961669921875e-05, -0.0003604888916015625, -1.52587890625e-05, -9.550421964377165e-07, -1.1920928244535389e-07, -0.00081634521484375, -4.00543212890625e-05, -0.00017452239990234375, -2.491474151611328e-05], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Drain", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.010227670147287, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Drain Life"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}, {"hole0": "<UNK>", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.058040618896484375, -0.00048065185546875, -9.5367431640625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -0.0002651214599609375, -4.00543212890625e-05, -9.5367431640625e-06, -2.264974000354414e-06, -5.304811929818243e-05, -1.895418972708285e-05, -3.4332275390625e-05, -0.0002593994140625, -2.47955322265625e-05, -0.00013482352369464934, -9.655952453613281e-06, -7.43865966796875e-05, 0.0, -3.0517578125e-05, 0.0, -4.00543212890625e-05, 0.0, -0.001220703125, 0.0, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -7.62939453125e-06, -0.0001316070556640625, 0.0, -0.0005092620849609375, -1.9073486328125e-06, -2.09808349609375e-05, -0.00016021728515625, -6.866455078125e-05, -0.00015270709991455078, 0.0, -2.47955322265625e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -1.52587890625e-05, -5.7220458984375e-06, -0.00013363361358642578, -7.05718994140625e-05, -3.4332275390625e-05, 0.0, -0.03222227096557617, -0.0001285076141357422, -0.0045032501220703125, -1.9073486328125e-05, -4.06503640988376e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -6.4849853515625e-05, -3.814697265625e-06, -1.33514404296875e-05, 0.0, 0.0, -2.622604142743512e-06, 0.0, -9.1552734375e-05, -5.9604644775390625e-06, -2.503394853192731e-06, -0.025331497192382812, 0.0, -7.62939453125e-06, -0.00014495849609375, -1.52587890625e-05, -1.9073486328125e-05, 0.0, -3.814697265625e-05, -1.71661376953125e-05, -7.05718994140625e-05, -3.814697265625e-06, -6.4849853515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -7.82012939453125e-05, -4.00543212890625e-05, -9.5367431640625e-06, -4.2319297790527344e-05, -0.0005435943603515625, -1.9073486328125e-06, -0.0013980865478515625, -0.00045013427734375, -0.0001320818846579641, -2.7298927307128906e-05, -3.5328588485717773, -0.006705284118652344, -1.3407291173934937, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Drain", " ", "Life", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 117, 226, "<UNK>", "<EOS>"]}, {"score": -6.072565128243923, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Drain", "_type": "Template25", "hole1": "DRUID", "hole2": "RARE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -2.9210739135742188, -0.0023441314697265625, -0.0002089732588501647, -0.00011682510375976562, -0.013288196176290512, 0.0, -3.039865493774414, 0.0, -0.005939483642578125, -0.0008068084716796875, -0.05530834197998047, 0.0, -0.008623242378234863, -7.62939453125e-05, -0.0001354217529296875, -2.86102294921875e-05, -0.0005016326904296875, -0.022210121154785156, -1.9073486328125e-06, -7.152702892199159e-07, 0.0], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Drain", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.481445304461403, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Drain Life"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.058040618896484375, -0.00048065185546875, -9.5367431640625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -0.0002651214599609375, -4.00543212890625e-05, -9.5367431640625e-06, -2.264974000354414e-06, -5.304811929818243e-05, -1.895418972708285e-05, -3.4332275390625e-05, -0.0002593994140625, -2.47955322265625e-05, -0.00013482352369464934, -9.655952453613281e-06, -7.43865966796875e-05, 0.0, -3.0517578125e-05, 0.0, -4.00543212890625e-05, 0.0, -0.001220703125, 0.0, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -7.62939453125e-06, -0.0001316070556640625, 0.0, -0.0005092620849609375, -1.9073486328125e-06, -2.09808349609375e-05, -0.00016021728515625, -6.866455078125e-05, -0.00015270709991455078, 0.0, -2.47955322265625e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -1.52587890625e-05, -5.7220458984375e-06, -0.00013363361358642578, -7.05718994140625e-05, -3.4332275390625e-05, 0.0, -3.576303005218506, -6.723403930664062e-05, -2.7881059646606445, -0.00072479248046875, -0.0067882537841796875, 0.0, -0.0012074708938598633, -2.86102294921875e-05, -0.0006427764892578125, -3.24249267578125e-05, -0.000659942626953125, -0.04250812530517578, -1.9073486328125e-06, 3.576196832000278e-07, -2.3841855067985307e-07], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Drain", " ", "Life", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.829179398130229, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain Life', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Drain Life"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "WARLOCK", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.058040618896484375, -0.00048065185546875, -9.5367431640625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -2.384185791015625e-06, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, -0.0002651214599609375, -4.00543212890625e-05, -9.5367431640625e-06, -2.264974000354414e-06, -5.304811929818243e-05, -1.895418972708285e-05, -3.4332275390625e-05, -0.0002593994140625, -2.47955322265625e-05, -0.00013482352369464934, -9.655952453613281e-06, -7.43865966796875e-05, 0.0, -3.0517578125e-05, 0.0, -4.00543212890625e-05, 0.0, -0.001220703125, 0.0, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -7.62939453125e-06, -0.0001316070556640625, 0.0, -0.0005092620849609375, -1.9073486328125e-06, -2.09808349609375e-05, -0.00016021728515625, -6.866455078125e-05, -0.00015270709991455078, 0.0, -2.47955322265625e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -1.52587890625e-05, -5.7220458984375e-06, -0.00013363361358642578, -7.05718994140625e-05, -3.4332275390625e-05, 0.0, -0.03222227096557617, -0.0001285076141357422, -6.684696197509766, -0.0009441375732421875, -0.00978851318359375, 0.0, -0.0005570650100708008, -7.43865966796875e-05, -0.0004978179931640625, -3.814697265625e-05, -0.000652313232421875, -0.0352020263671875, -1.9073486328125e-06, -1.0728945198934525e-06, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Drain", " ", "Life", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.833774588204022, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Drain", "_type": "Template25", "hole1": "DRUID", "hole2": "COMMON"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -2.9210739135742188, -0.0023441314697265625, -0.0002089732588501647, -0.00011682510375976562, -0.013288196176290512, 0.0, -1.32366943359375, 0.0, -1.7370176315307617, -0.0009555816650390625, -0.15303897857666016, -3.814697265625e-05, -3.4332275390625e-05, 0.0, -0.6494485139846802, -2.3841855067985307e-07, -0.01690089702606201, -1.1920922133867862e-06, -0.013280630111694336, -0.00023326536756940186, -2.86102294921875e-05, -4.38690185546875e-05, -1.9073486328125e-06, -1.4304387150332332e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Drain", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.14328818502986, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Drain", "_type": "Template25", "hole1": "DRUID", "hole2": "COMMON"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -2.9210739135742188, -0.0023441314697265625, -0.0002089732588501647, -0.00011682510375976562, -0.013288196176290512, 0.0, -1.32366943359375, 0.0, -1.7370176315307617, -0.0009555816650390625, -2.1120004653930664, 0.0, -0.005942344665527344, -6.67572021484375e-05, -0.0001430511474609375, -3.4332275390625e-05, -0.000614166259765625, -0.023774147033691406, -1.9073486328125e-06, -1.311309461016208e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Drain", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.153613258759599, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Drain", "_type": "Template25", "hole1": "DRUID", "hole2": "COMMON"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -2.9210739135742188, -0.0023441314697265625, -0.0002089732588501647, -0.00011682510375976562, -0.013288196176290512, 0.0, -1.32366943359375, 0.0, -1.7370176315307617, -0.0009555816650390625, -0.15303897857666016, -3.814697265625e-05, -3.4332275390625e-05, 0.0, -0.8106471300125122, -1.1920928244535389e-07, -0.009333610534667969, -1.311301275563892e-06, -1.1796663999557495, -3.6954811548639555e-06, -8.58306884765625e-05, -4.76837158203125e-05, 0.0, -6.317641236819327e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Drain", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 95, 172, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "hero", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.289391567136818, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Drain", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -2.9210739135742188, -0.0023441314697265625, -0.0002089732588501647, -0.00011682510375976562, -0.013288196176290512, 0.0, -0.4033689498901367, 0.0, -4.5972700119018555, -0.0022296905517578125, -0.3212242126464844, 0.0, -0.0011044740676879883, -0.000110626220703125, -0.000186920166015625, -2.86102294921875e-05, -0.0004863739013671875, -0.024313926696777344, 0.0, -7.152593752834946e-07, 0.0], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Drain", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.38537292758263, "inferred_code": "class DrainLife(SpellCard):\n\n    def __init__(self):\n        super().__init__('Drain', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Drain", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "DrainLife"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -1.8715683836489916e-05, -0.00010752119851531461, -3.099440846199286e-06, -0.0003108978271484375, 0.0, 0.0, -3.743171691894531e-05, -2.5033950805664062e-05, -3.838539123535156e-05, -3.4332275390625e-05, -0.0011663436889648438, 0.0, -5.662440889864229e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -2.9210739135742188, -0.0023441314697265625, -0.0002089732588501647, -0.00011682510375976562, -0.013288196176290512, 0.0, -0.4033689498901367, 0.0, -3.6465978622436523, -0.08785724639892578, -4.57763671875e-05, 0.0, -7.43865966796875e-05, 0.0, -1.0411186218261719, 0.0, -0.030406951904296875, -3.576278118089249e-07, -0.22840332984924316, 0.0, -0.00331878662109375, -0.000102996826171875, -0.0001392364501953125, -0.001293182373046875, -2.6702880859375e-05, -9.1552734375e-05, 0.0, -2.47955322265625e-05, -1.1920928244535389e-07, -0.0014001131057739258, -3.814697265625e-06, -5.7220458984375e-05, -0.000335693359375, -1.71661376953125e-05, -9.546420187689364e-07, 0.0, -0.001064300537109375, -7.43865966796875e-05, -0.0004012584686279297, -8.0108642578125e-05], "choice_history": [80, 159, 295, 88, 138, "Drain", "Life", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Drain", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -22.484508514404297, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -5.14984130859375e-05, -22.484439849853516], "choice_history": [80, 159, 294]}]}
{"index": 27, "beams": [{"score": -0.07284525945032527, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -0.012318611145019531, -0.0009409189224243164, -5.7220458984375e-06, -0.02587127685546875, -5.7220458984375e-06, 0.0, -0.002933502197265625, -0.0002346038818359375, -7.62939453125e-06, -0.0005588531494140625, -1.9073486328125e-06, -0.0002765655517578125, -7.62939453125e-06, -0.00034797191619873047, -0.0003243684477638453, -1.9073486328125e-06, -0.000583648681640625, -0.000148773193359375, -7.581437967019156e-05, -1.3232229321147315e-05, -1.8856037058867514e-05, -3.933906555175781e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.505900543759701, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), SelfSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "SelfSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -0.012318611145019531, -0.0009409189224243164, -5.7220458984375e-06, -4.4510908126831055, -0.0001068115234375, 0.0, -0.000835418701171875, -0.0006103515625, -1.1444091796875e-05, -0.006740570068359375, -3.814697265625e-06, -0.003345489501953125, -5.7220458984375e-06, -0.0005137920379638672, -0.00012695784971583635, -1.9073486328125e-06, -0.0008544921875, -0.0001163482666015625, -7.116554479580373e-05, -1.3351438610698096e-05, -1.9096813048236072e-05, -3.933906555175781e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Self", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -5.082184713955932, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, minion_type=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "minion_type", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -5.01326847076416, -1.9073486328125e-06, -0.000331878662109375, 0.0, -0.011006355285644531, -3.814697265625e-06, -0.04168128967285156, -0.00025177001953125, -0.009408239275217056, -1.0132789611816406e-05, -1.920989598147571e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -5.190553824325427, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "MinionSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -0.012318611145019531, -0.0009409189224243164, -5.7220458984375e-06, -5.146279335021973, -2.6702880859375e-05, 0.0, -0.000118255615234375, -0.000232696533203125, -7.62939453125e-06, -0.000911712646484375, -1.9073486328125e-06, -0.0002288818359375, -5.7220458984375e-06, -0.00037097930908203125, -0.00020098684763070196, -1.9073486328125e-06, -0.0004940032958984375, -0.0001316070556640625, -7.629118044860661e-05, -1.2874602361989673e-05, -1.9333965610712767e-05, -3.933906555175781e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -5.2429393940492375, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), HeroSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "HeroSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -0.012318611145019531, -0.0009409189224243164, -5.7220458984375e-06, -5.191275596618652, -4.76837158203125e-05, 0.0, -0.0001659393310546875, -0.0003604888916015625, -1.33514404296875e-05, -0.005702018737792969, -1.9073486328125e-06, -0.00241851806640625, -3.814697265625e-06, -0.0003951787657570094, -0.00020539757679216564, -1.9073486328125e-06, -0.0006847381591796875, -0.0001201629638671875, -7.700637797825038e-05, -1.3351438610698096e-05, -1.933517341967672e-05, -3.933906555175781e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Hero", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -5.490534223481511, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 6, "_type": "Template56", "hole1": "HeroSelector"}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -4.978818893432617, -0.4366297721862793, -0.007167816162109375, -0.030831336975097656, -0.006309628486633301, -3.814697265625e-06, -0.0020856857299804688, -1.1444091796875e-05, -0.00037419606815092266, -5.543231964111328e-05, -6.713316543027759e-05, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 231, "6", "<EOS>", "Hero", "Selector", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -6.224323100551366, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -5.966459274291992, 0.0, -0.21544742584228516, -3.814697265625e-06, -0.02118682861328125, -9.5367431640625e-05, -0.0014543874422088265, -1.4781950994802173e-05, -1.0859526810236275e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -6.33307693202368, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=1)\n\n    def create_minion(self, player):\n        return Minion(6, 6, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"_type": "Num", "n": 1}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template23", "hole1": 6, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -5.47127628326416, -0.00029754638671875, -0.03638468310236931, -3.814697265625e-06, -0.22285842895507812, -9.34600830078125e-05, -4.887570321443491e-05, -4.684919258579612e-05, -0.00010416517034173012, -2.384185791015625e-06, -0.5799932479858398, 0.0, -0.001720428466796875, -3.62396240234375e-05, -0.0005353689193725586, -2.86102294921875e-05], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 21, 165, "1", "<EOS>", 109, 200, "6", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.366091527309429, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -0.012318611145019531, -0.0009409189224243164, -5.7220458984375e-06, -0.02587127685546875, -5.7220458984375e-06, 0.0, -5.842977523803711, -0.000705718994140625, -2.288818359375e-05, -0.0006411075592041016, -3.814697265625e-06, -0.0001068115234375, -1.71661376953125e-05, -0.0006293058395385742, -0.0002969503402709961, -1.9073486328125e-06, -0.0007791519165039062, -0.0001277923583984375, -0.004944324493408203, 0.0, -0.44091320037841797, -0.0001926422119140625, -0.0018349885940551758, -9.179115295410156e-05, 0.0, -0.004290580749511719, -7.43865966796875e-05, -0.00010549485887167975, -9.059905096364673e-06, -1.4923367416486144e-05, -3.933906555175781e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -6.637138772795872, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "HeroSelector"}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -4.978818893432617, -1.0407735109329224, -8.988380432128906e-05, -0.5865039825439453, -0.00022339820861816406, -3.814697265625e-06, -0.0020189285278320312, -1.33514404296875e-05, -0.0004174680507276207, -4.982948303222656e-05, -4.8548856284469366e-05, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 231, "1", "<EOS>", "Hero", "Selector", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -7.116616148716268, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "MinionSelector"}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -4.978818893432617, -1.0407735109329224, -8.988380432128906e-05, -1.065077781677246, -0.0001659393310546875, -1.9073486328125e-06, -0.00196075439453125, -3.24249267578125e-05, -0.001410007243975997, -4.839897155761719e-05, -4.601318505592644e-05, -2.682209014892578e-05], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 231, "1", "<EOS>", "Minion", "Selector", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -7.131112689819922, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=RandomPicker(1))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"args": [{"_type": "Num", "n": 1}], "_type": "Call", "func": {"_type": "Name", "id": "RandomPicker"}}}]}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -0.012318611145019531, -0.0009409189224243164, -5.7220458984375e-06, -0.02587127685546875, -5.7220458984375e-06, 0.0, -5.842977523803711, -0.000705718994140625, -2.288818359375e-05, -0.0006411075592041016, -3.814697265625e-06, -0.0001068115234375, -1.71661376953125e-05, -0.0006293058395385742, -0.0002969503402709961, -1.9073486328125e-06, -0.0007791519165039062, -0.0001277923583984375, -0.004944324493408203, 0.0, -1.0574684143066406, -0.0001125335693359375, -6.866455078125e-05, 0.0, -0.029091835021972656, -0.003644108772277832, 0.0, -0.000255584716796875, -0.0002574920654296875, -3.62396240234375e-05, -0.1174740269780159, 0.0, -0.0039806365966796875, -9.72747802734375e-05, -2.4914430468925275e-05, -2.2411237296182662e-05, -1.3974466128274798e-05, -4.0531158447265625e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 14, 136, 19, 160, "Random", "Picker", "<EOS>", 282, 47, 165, "1", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -7.643621327534667, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"_type": "Num", "n": 1}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 6}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -5.47127628326416, -0.00029754638671875, -0.03638468310236931, -3.814697265625e-06, -2.0267457962036133, -0.056819915771484375, -0.0002574920654296875, 0.0, -0.004104733467102051, -2.09808349609375e-05, -0.005352020263671875, -3.814697265625e-06, -8.20159912109375e-05, -0.006817817687988281, -2.09808349609375e-05, -0.015771865844726562, -1.5020364116935525e-05], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 21, 165, "1", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "6", "<EOS>"]}, {"score": -7.7004381480601225, "inferred_code": "class DreadInfernal(MinionCard):\n\n    def __init__(self):\n        super().__init__('Dread Infernal', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Dread Infernal", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "WARLOCK", "hole6": "DEMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 6, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 6, "_type": "Template23", "hole1": 6, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DreadInfernal"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -3.814697265625e-06, -0.000196556793525815, -1.835809598560445e-05, -1.6331649021594785e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -7.62939453125e-06, -1.1920928244535389e-07, -0.0001239776611328125, -0.002330780029296875, -6.866455078125e-05, -1.6927575416048057e-05, -8.046627044677734e-05, -0.00012122917542001233, -3.814697265625e-06, -1.9954924937337637e-05, -1.9073486328125e-06, -0.0011730194091796875, -1.9073486328125e-06, -0.0003147125244140625, -1.9073486328125e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.0011005401611328125, 0.0, -0.013448715209960938, 0.0, -0.008517265319824219, -0.012318611145019531, -0.0009409189224243164, -5.7220458984375e-06, -0.02587127685546875, -5.7220458984375e-06, 0.0, -0.002933502197265625, -0.0002346038818359375, -7.62939453125e-06, -0.0005588531494140625, -1.9073486328125e-06, -0.0002765655517578125, -7.62939453125e-06, -0.00034797191619873047, -0.0003243684477638453, -1.9073486328125e-06, -7.613224983215332, -0.0009250640869140625, -0.00028336048126220703, -2.9802116841892712e-05, -0.0001768923830240965, -2.384185791015625e-06, -0.012715578079223633, 0.0, -0.0006160736083984375, -0.0003204345703125, -0.00013875961303710938, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Dread", "Infernal", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Dread", " ", "Infernal", "<EOS>", "6", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 109, 200, "6", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -21.87668228149414, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.1444091796875e-05, -21.876665115356445], "choice_history": [80, 159, 294]}]}
{"index": 28, "beams": [{"score": -0.09800577802104726, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -0.00302886962890625, -3.62396240234375e-05, 0.0, -0.0003032684326171875, -0.0007648468017578125, -0.00031280517578125, -0.0039010047912597656, -3.814697265625e-06, -3.62396240234375e-05, -9.5367431640625e-06, -0.0009403228759765625, -0.0006409883499145508, -1.71661376953125e-05, -0.002166748046875, -5.340576171875e-05, -0.0012559890747070312, 0.0, -0.00147247314453125, -0.0003070831298828125, -0.000827789306640625, -0.00012409687042236328, -1.9073486328125e-06, -0.0033416748046875, -2.47955322265625e-05, -3.4568874980323017e-06, -3.814697265625e-06, -7.391963663394563e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -3.1191722181282557, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole2": "ALL", "_type": "Template11", "hole1": 1, "hole4": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole3": "battlecry"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -3.0917911529541016, -0.00012969970703125, -3.6954811548639555e-06, -1.001357759378152e-05, -4.410743713378906e-06, -3.814697265625e-06, -8.226287718571257e-06, 0.0, -4.601478576660156e-05, -1.9073486328125e-06, -0.0021865367889404297, 0.0, -0.0019273757934570312, -0.001129150390625, -0.00412106653675437, -1.9073486328125e-05, -0.001712799072265625, -0.00024235248565673828, -1.9073486328125e-06, -0.0002002716064453125, -0.0006771087646484375, -2.288818359375e-05, -0.002081155776977539, -1.9073486328125e-06, -3.62396240234375e-05, -1.33514404296875e-05, -0.0009250640869140625, -0.0006983280181884766, -3.4332275390625e-05, -0.0022020339965820312, -0.0001220703125, -0.0010247230529785156, 0.0, -0.0014324188232421875, -0.000232696533203125, -0.0007457733154296875, -8.594989776611328e-05, -1.9073486328125e-06, -0.0051174163818359375, -2.6702880859375e-05, -2.7417154342401773e-06, -3.814697265625e-06, -8.10727578937076e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -5.88642924917383, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "PIRATE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -5.799224853515625, 0.0, -0.0010416507720947266, 0.0, -0.0020380020141601562, -0.0045757293701171875, -0.0002888515591621399, -1.9073486328125e-05, -0.0028400421142578125, -3.62396240234375e-05, 0.0, -0.000293731689453125, -0.0007314682006835938, -0.00030517578125, -0.003734111785888672, -3.814697265625e-06, -3.4332275390625e-05, -9.5367431640625e-06, -0.0009212493896484375, -0.0006390810012817383, -1.71661376953125e-05, -0.00197601318359375, -5.14984130859375e-05, -0.0012636184692382812, 0.0, -0.0015106201171875, -0.0003204345703125, -0.0008068084716796875, -0.00011265277862548828, -1.9073486328125e-06, -0.00337982177734375, -2.47955322265625e-05, -3.4568874980323017e-06, -3.814697265625e-06, -7.391963663394563e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.4328048230939885, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "MinionSelector"}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -6.193693161010742, -0.01810210943222046, -4.971027374267578e-05, -0.14456510543823242, -0.0012874603271484375, -2.0265579223632812e-06, -0.0018329620361328125, -5.91278076171875e-05, 4.76837158203125e-07, -3.814697265625e-06, -4.658657417166978e-06, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 231, "1", "<EOS>", "Minion", "Selector", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.454390174812374, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), HeroSelector(players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "HeroSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -6.21307373046875, -0.0006638765335083008, -1.1563301086425781e-05, -0.0014371871948242188, -0.0018310546875, -0.0003376007080078125, -0.13464796543121338, -5.7220458984375e-06, -0.0001049041748046875, -5.7220458984375e-06, -0.0021783113479614258, -0.0006009340286254883, -9.5367431640625e-06, -0.0023241043090820312, -6.866455078125e-05, -0.0025309324264526367, 0.0, -0.0042819976806640625, -0.0002956390380859375, -0.0007381439208984375, -6.508827209472656e-05, -1.9073486328125e-06, -0.010706901550292969, -3.62396240234375e-05, -1.9072995200986043e-06, -3.814697265625e-06, -6.676813427475281e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Hero", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.84586840256577, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, Damage=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "Damage", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -5.941649436950684, 0.0, -0.057209014892578125, 0.0, -0.01927471160888672, -9.5367431640625e-06, -0.7613363265991211, -0.00093841552734375, -4.768007784150541e-07, -1.1444091796875e-05, -1.552965841256082e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "Damage", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.875440873895343, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -0.00302886962890625, -3.62396240234375e-05, 0.0, -0.0003032684326171875, -0.0007648468017578125, -0.00031280517578125, -0.0039010047912597656, -3.814697265625e-06, -3.62396240234375e-05, -9.5367431640625e-06, -0.0009403228759765625, -0.0006409883499145508, -1.71661376953125e-05, -0.002166748046875, -5.340576171875e-05, -0.0012559890747070312, 0.0, -0.00147247314453125, -0.0003070831298828125, -0.000827789306640625, -0.00012409687042236328, -1.9073486328125e-06, -5.932314872741699, -0.2559394836425781, -7.152566467993893e-07, 0.0, -0.0001780118327587843, 0.0, -0.5742675065994263, -3.576278118089249e-07, -0.017350196838378906, -3.24249267578125e-05, -0.0007364749908447266, 0.0], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.212937401598083, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=RandomPicker(1))))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"args": [{"_type": "Num", "n": 1}], "_type": "Call", "func": {"_type": "Name", "id": "RandomPicker"}}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -0.00302886962890625, -3.62396240234375e-05, 0.0, -0.0003032684326171875, -0.0007648468017578125, -0.00031280517578125, -0.0039010047912597656, -3.814697265625e-06, -3.62396240234375e-05, -9.5367431640625e-06, -0.0009403228759765625, -0.0006409883499145508, -1.71661376953125e-05, -0.002166748046875, -5.340576171875e-05, -0.0012559890747070312, 0.0, -7.099063873291016, -5.340576171875e-05, -0.0002593994140625, -9.5367431640625e-06, -0.0055828094482421875, -0.008001446723937988, -2.288818359375e-05, -0.001132965087890625, -2.09808349609375e-05, -5.14984130859375e-05, -0.002826254116371274, 0.0, -0.003978729248046875, -2.86102294921875e-05, -2.7418097943154862e-06, -3.814697265625e-06, -1.4312139455796569e-06, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 14, 136, 19, 160, "Random", "Picker", "<EOS>", 282, 47, 165, "1", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.3376901213977135, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=EnemyPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -0.00302886962890625, -3.62396240234375e-05, 0.0, -0.0003032684326171875, -0.0007648468017578125, -0.00031280517578125, -0.0039010047912597656, -3.814697265625e-06, -3.62396240234375e-05, -9.5367431640625e-06, -7.239813804626465, -2.753734588623047e-05, -1.9073486328125e-06, -0.002498626708984375, -7.05718994140625e-05, -0.0013130903244018555, 0.0, -0.001750946044921875, -0.00026702880859375, -0.0007953643798828125, -9.930133819580078e-05, -1.9073486328125e-06, -0.0041942596435546875, -2.47955322265625e-05, -3.099299647146836e-06, -3.814697265625e-06, -7.39196229915251e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.492238538303013, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1, deathrattle=Deathrattle(Damage(1),\n            CharacterSelector(picker=UserPicker(), players=BothPlayer())))\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "_type": "Template6", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "deathrattle", "hole3": {"args": [{"hole0": 1, "_type": "Template75"}, {"keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}, {"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -5.791513442993164, -0.000385284423828125, -1.0251946150674485e-05, -4.279551649233326e-05, -2.1457672119140625e-06, -1.9073486328125e-06, -5.795157630927861e-05, 0.0, -0.00011944770812988281, 0.0, -0.008388519287109375, -0.0001163482666015625, -5.960519047221169e-07, -1.311301275563892e-06, -2.1524695057451027e-06, 0.0, -0.6401574611663818, -4.0531158447265625e-06, -0.05088996887207031, -7.43865966796875e-05, -4.76837158203125e-05, -3.814697265625e-06, -0.00789642333984375, -3.814697265625e-06, -0.0001277923583984375, -0.09977245330810547, -0.000583648681640625, -7.105991244316101e-07, -0.000998377799987793, -0.12666893005371094, -0.002292633056640625, -1.33514404296875e-05, -3.814697265625e-06, -0.1807408332824707, -0.0011121034622192383, 0.0, -0.04465293884277344, -0.0011663436889648438, -4.9591064453125e-05, -0.27635979652404785, 0.0, -0.0002689361572265625, -4.00543212890625e-05, -0.013746261596679688, -7.641315460205078e-05, -1.9073486328125e-06, -0.0002498626708984375, -0.0004673004150390625, -0.20569133758544922, -1.9073486328125e-06, -0.00249481201171875, -3.24249267578125e-05, -0.03467667102813721, -8.7738037109375e-05, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "deathrattle", "<EOS>", 14, 136, 19, 160, "Deathrattle", "<EOS>", 283, 66, 257, "1", "<EOS>", 40, 135, 19, 160, "Character", "Selector", "<EOS>", 291, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>"]}, {"score": -7.555654651286545, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "MinionSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -7.441798210144043, -1.9073486328125e-05, -7.748603820800781e-06, -0.017751693725585938, -0.00048065185546875, -0.000148773193359375, -0.0049550533294677734, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -0.0013790130615234375, -0.0007344484329223633, -1.1444091796875e-05, -0.0025424957275390625, -0.0001049041748046875, -0.0013114213943481445, 0.0, -0.0016193389892578125, -0.00026702880859375, -0.000827789306640625, -0.00013363361358642578, -1.9073486328125e-06, -0.0030517578125, -2.09808349609375e-05, -4.05289392801933e-06, -3.814697265625e-06, -7.868777174735442e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Minion", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.556213146939058, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(minion_type=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "minion_type", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -0.00302886962890625, -3.62396240234375e-05, 0.0, -0.0003032684326171875, -0.0007648468017578125, -0.00031280517578125, -7.299936771392822, -5.340576171875e-05, -0.10222911834716797, -4.1961669921875e-05, -0.061026573181152344, -1.1444091796875e-05, -1.52587890625e-05, -0.0008802413940429688, -7.2479248046875e-05, -0.002712845802307129, 0.0, -0.00200653076171875, -0.0005283355712890625, -0.0005474090576171875, -6.67572021484375e-05, -1.9073486328125e-06, -0.0031833648681640625, -2.09808349609375e-05, -3.09930692310445e-06, -1.9073486328125e-06, -6.676727934973314e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "minion_type", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.582109100024695, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothBothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothBothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -0.00302886962890625, -3.62396240234375e-05, 0.0, -0.0003032684326171875, -0.0007648468017578125, -0.00031280517578125, -0.0039010047912597656, -3.814697265625e-06, -3.62396240234375e-05, -9.5367431640625e-06, -0.0009403228759765625, -7.417325019836426, -0.0644083023071289, -7.05718994140625e-05, -0.0032262802124023438, -9.918212890625e-05, -0.002516508102416992, 0.0, -0.0023708343505859375, -0.0003204345703125, -0.00074005126953125, -0.00015842914581298828, -1.9073486328125e-06, -0.0030765533447265625, -2.288818359375e-05, -3.814493538811803e-06, -3.814697265625e-06, -7.511169314966537e-06, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.732512361590466, "inferred_code": "class ElvenArcher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Elven Archer', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(picker=UserPicker(),\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Elven Archer", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}, {"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ElvenArcher"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.597391747054644e-05, -2.7417760065873154e-05, -5.245203283266164e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -3.635883331298828e-05, -2.861018856492592e-06, -1.71661376953125e-05, -0.05244922637939453, -0.0001811981201171875, -0.00016735584358684719, -2.0742354536196217e-05, -2.288796349603217e-05, -1.9073486328125e-06, -0.00013727496843785048, 0.0, -6.139278411865234e-05, -1.9073486328125e-06, -0.004642486572265625, 0.0, -0.001491546630859375, -1.9073486328125e-06, -0.000640869140625, 0.0, -0.00025177001953125, -3.814697265625e-06, -0.005225181579589844, 0.0, -0.0055103302001953125, 0.0, -0.0022535324096679688, -0.00490570068359375, -0.00029774010181427, -1.52587890625e-05, -0.00302886962890625, -3.62396240234375e-05, 0.0, -0.0003032684326171875, -0.0007648468017578125, -0.00031280517578125, -7.159560203552246, -1.9073486328125e-06, -0.0002079010009765625, -2.47955322265625e-05, -0.1376934051513672, -9.953975677490234e-05, -2.0265579223632812e-06, -0.000377655029296875, -0.0001354217529296875, -0.3088322877883911, -1.9073486328125e-06, -0.00299835205078125, -4.38690185546875e-05, -0.03744828701019287, -0.00016033649444580078, -5.7220458984375e-06, -0.0019397735595703125, -8.58306884765625e-05, -8.225262718042359e-06, -5.7220458984375e-06, -9.299664270656649e-06, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Elven", "Archer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Elven", " ", "Archer", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -21.09931755065918, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -21.099315643310547], "choice_history": [80, 159, 294]}]}
{"index": 29, "beams": [{"score": -0.11802818793876213, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "_type": "Template13", "hole1": "DRUID", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.06611919403076172, -0.00437164306640625, -3.159017433063127e-05, -0.00030144810443744063, -6.4373016357421875e-06, -5.14984130859375e-05, -0.03609180450439453, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.001773834228515625, -0.0030794143676757812, -0.00165557861328125, 0.0, -0.000347137451171875, 0.0, -0.0031235218048095703, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Excess", " ", "Mana", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -4.8554193021736864, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.target_func, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "_type": "Template13", "hole1": "COMMON", "hole2": "target_func"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.06611919403076172, -0.00437164306640625, -3.159017433063127e-05, -0.00030144810443744063, -6.4373016357421875e-06, -5.14984130859375e-05, -4.1937055587768555, 0.0, -0.539141058921814, -1.9073486328125e-06, -0.012725830078125, -0.019197463989257812, -0.012805938720703125, 0.0, -0.00021266937255859375, 0.0, -0.005691051483154297, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Excess", " ", "Mana", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.32642664928062, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "_type": "Template13", "hole1": "COMMON", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.06611919403076172, -0.00437164306640625, -3.159017433063127e-05, -0.00030144810443744063, -6.4373016357421875e-06, -5.14984130859375e-05, -4.1937055587768555, 0.0, -1.0346301794052124, 0.0, -0.008693695068359375, -0.004451751708984375, -0.009714126586914062, 0.0, -0.0001983642578125, 0.0, -0.0030951499938964844, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Excess", " ", "Mana", "<EOS>", "COMMON", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.4690022708855395, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.06611919403076172, -0.00437164306640625, -3.159017433063127e-05, -0.00030144810443744063, -6.4373016357421875e-06, -5.14984130859375e-05, -5.383411407470703, 0.0, -0.0017032623291015625, 0.0, -0.0021343231201171875, -0.003139495849609375, -0.003025054931640625, 0.0, -0.00025081634521484375, 0.0, -0.003400087356567383, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Excess", " ", "Mana", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.5079251768074755, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.Change,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "_type": "Template13", "hole1": "Change", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.06611919403076172, -0.00437164306640625, -3.159017433063127e-05, -0.00030144810443744063, -6.4373016357421875e-06, -5.14984130859375e-05, -5.2747907638549805, -0.00093841552734375, -0.14456868171691895, -1.9073486328125e-06, -0.0054645538330078125, -0.003933906555175781, -0.00237274169921875, 0.0, -0.0005130767822265625, 0.0, -0.003403306007385254, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Excess", " ", "Mana", "<EOS>", "Change", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.890481972881389, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.2, CARD_RARITY.\n            COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "_type": "Template13", "hole1": "2", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.06611919403076172, -0.00437164306640625, -3.159017433063127e-05, -0.00030144810443744063, -6.4373016357421875e-06, -5.14984130859375e-05, -5.766796112060547, 0.0, -0.03264439105987549, 0.0, -0.003253936767578125, -0.0050029754638671875, -0.0070667266845703125, 0.0, -0.000247955322265625, 0.0, -0.0035320520401000977, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Excess", " ", "Mana", "<EOS>", "2", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.476169040718105, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 1, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON, False, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "hole2": "target_func", "_type": "Template7", "hole1": "COMMON", "hole4": "find_spell_target", "hole3": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -4.29524564743042, -0.0004520416259765625, -6.079665126890177e-06, -0.0010240019764751196, -1.740446350595448e-05, -1.9073486328125e-05, -0.00051116943359375, -3.814697265625e-06, -0.0032444000244140625, 0.0, -0.0031795501708984375, 0.0, -2.47955322265625e-05, 0.0, -0.003391265869140625, -1.9073486328125e-06, -0.0006771087646484375, 0.0, -0.20046091079711914, -1.9073486328125e-05, -0.032286643981933594, -0.08622264862060547, -0.0001049041748046875, 0.0, -2.09808349609375e-05, 0.0, -0.9386405944824219, -1.9073486328125e-06, -0.04297161102294922, 0.0, -0.833702802658081, -4.9591064453125e-05, -0.000415802001953125, -0.02238750457763672, 0.0, -0.010027885437011719, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Excess", " ", "Mana", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.576565885730815, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "_type": "Template13", "hole1": "ROGUE", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.06611919403076172, -0.00437164306640625, -3.159017433063127e-05, -0.00030144810443744063, -6.4373016357421875e-06, -5.14984130859375e-05, -6.48915958404541, 0.0, -0.0001735687255859375, -1.9073486328125e-06, -0.0035114288330078125, -0.005391120910644531, -0.0032501220703125, 0.0, -0.0003948211669921875, 0.0, -0.002745509147644043, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Excess", " ", "Mana", "<EOS>", "ROGUE", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.822621011921001, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Excess Mana", "_type": "Template13", "hole1": "DRUID", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.06611919403076172, -0.00437164306640625, -3.159017433063127e-05, -0.00030144810443744063, -6.4373016357421875e-06, -5.14984130859375e-05, -0.03609180450439453, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.001773834228515625, -0.0030794143676757812, -6.430668830871582, 0.0, -7.62939453125e-06, 0.0, -0.0020542144775390625, 0.0, -0.22509419918060303, 0.0, -0.051894187927246094, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Excess", " ", "Mana", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 116, 224, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", "draw", "<EOS>"]}, {"score": -8.683714920688459, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Excess Mana"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"args": {"args": [{"_type": "arg", "arg": "card"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": "ManaChange", "_type": "Template70", "hole1": [{"hole0": 3, "_type": "Template79"}]}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Name", "id": "card"}}}}], "_type": "FunctionDef", "name": "reduce_cost"}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "card_drawn"}, {"_type": "Name", "id": "reduce_cost"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -4.697824001312256, -9.5367431640625e-06, -0.0002931347116827965, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.000263214111328125, -1.33514404296875e-05, -3.814697265625e-06, -0.0001678466796875, -0.0050106048583984375, -1.9073486328125e-05, 0.0, -0.0001850128173828125, 0.0, -1.2516951755969785e-05, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.0001316070556640625, -1.33514404296875e-05, -1.1444091796875e-05, -1.764281842042692e-05, -0.0002828568685799837, -1.6927657270571217e-05, -2.288818359375e-05, -3.0517578125e-05, -7.62939453125e-06, -3.325883881188929e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.43865966796875e-05, -2.3841855067985307e-07, -0.0011749267578125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.5904102325439453, 0.0, -0.0006866455078125, -0.6771211624145508, -3.0517578125e-05, -0.019632816314697266, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -0.0006122589111328125, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.006845712661743164, -3.814697265625e-06, -0.0015354156494140625, 0.0, -0.005170106887817383, -2.9087066650390625e-05, -0.00037384033203125, -3.814697265625e-06, -5.543231964111328e-05, -1.9073486328125e-05, -1.1444091796875e-05, -5.7220458984375e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, 0.0, -5.7220458984375e-06, 0.0, -0.0001277923583984375, -0.00014472007751464844, -8.344629350176547e-06, -1.706559181213379, -0.049053192138671875, -0.008313179016113281, -0.04371154308319092, -3.576278118089249e-07, -2.6702880859375e-05, -0.001293182373046875, -1.9073486328125e-06, -0.024107933044433594, -9.72747802734375e-05, -0.0004024505615234375, -0.12289810180664062, -3.814697265625e-06, -7.62939453125e-06, -0.0002384185791015625, -6.67572021484375e-05, 0.0, -0.025360107421875, -6.103515625e-05, -0.028778076171875, -3.814697265625e-06, -0.12209796905517578, -1.0728812412708066e-05, -0.0024394989013671875, -0.022106170654296875, -0.000301361083984375, -0.004776120185852051, -0.00020730489632114768, 0.0, -2.47955322265625e-05, -0.01855754852294922, -5.91278076171875e-05, -0.15486565232276917, -5.7220458984375e-05, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0008602142333984375, -9.918212890625e-05, -5.7220458984375e-06, -0.000789642333984375, -6.4849853515625e-05, -0.00013100595970172435, -5.7220458984375e-06, -0.0007762908935546875, 0.0, -0.0001850128173828125, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0065975189208984375, 0.0, -0.000133514404296875, -0.000274658203125, -3.814697265625e-06, 0.0, -0.12486648559570312, 0.0, -0.0037206411361694336, 0.0, -0.05685830116271973, 0.0, -0.00238800048828125, -0.000835418701171875, -6.4849853515625e-05, -0.011948492377996445, -3.814697265625e-06, -0.004530906677246094, -3.814697265625e-06, -0.11463689804077148, 0.0, -0.0011615753173828125, 0.0, -2.09808349609375e-05, -0.0016956329345703125, -0.0006771087646484375, 0.0, -0.0003833770751953125, 0.0, -0.0025072097778320312, 0.0, -0.0010001412592828274, 0.0], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Excess", " ", "Mana", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 91, 143, "reduce_cost", "<EOS>", 269, 275, 268, "card", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "card", "<EOS>", "add_buff", "<EOS>", 282, 62, 252, "Mana", "Change", "<EOS>", 282, 69, 262, "3", "<EOS>", 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>", 283, 48, 169, "card_drawn", "<EOS>", 45, 160, "reduce_cost", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -9.37474333172733, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(0)\n        player.draw()\n        player.draw()\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Excess Mana"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 0}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -4.697824001312256, -9.5367431640625e-06, -0.0002931347116827965, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.000263214111328125, -1.33514404296875e-05, -3.814697265625e-06, -0.0001678466796875, -0.0050106048583984375, -1.9073486328125e-05, 0.0, -0.0001850128173828125, 0.0, -1.2516951755969785e-05, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.0001316070556640625, -1.33514404296875e-05, -1.1444091796875e-05, -1.764281842042692e-05, -0.0002828568685799837, -1.6927657270571217e-05, -2.288818359375e-05, -3.0517578125e-05, -7.62939453125e-06, -3.325883881188929e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.43865966796875e-05, -2.3841855067985307e-07, -0.0011749267578125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.5904102325439453, 0.0, -0.0006866455078125, -0.6771211624145508, -3.0517578125e-05, -0.019632816314697266, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -0.0006122589111328125, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.006845712661743164, -3.814697265625e-06, -0.0015354156494140625, 0.0, -0.005170106887817383, -2.9087066650390625e-05, -0.00037384033203125, -3.814697265625e-06, -5.543231964111328e-05, -1.9073486328125e-05, -1.1444091796875e-05, -5.7220458984375e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, 0.0, -5.7220458984375e-06, 0.0, -0.0001277923583984375, -0.00014472007751464844, -8.344629350176547e-06, -0.8567600250244141, -0.000186920166015625, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -7.450580596923828e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -9.34600830078125e-05, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.814697265625e-06, -0.030768394470214844, -1.9073486328125e-06, -0.00077056884765625, -0.0055484771728515625, -9.5367431640625e-06, 0.0, -0.04341697692871094, 0.0, -6.103515625e-05, 0.0, -0.009427070617675781, 0.0, -0.6322684288024902, -3.099436753473128e-06, -0.0648655891418457, -3.814697265625e-06, -0.000308990478515625, -0.0020704269409179688, -3.814697265625e-06, -0.5049402713775635, -1.1444091796875e-05, -0.06562995910644531, -1.9073486328125e-06, -3.814697265625e-06, -0.000339508056640625, -0.000270843505859375, 0.0, -0.00054931640625, 0.0, -0.002506256103515625, 0.0, -0.0025755027309060097, 0.0, -0.015011787414550781, -5.7220458984375e-06, -3.814697265625e-06, -0.0009784698486328125, -0.00017547607421875, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -0.4211397171020508, 0.0, -0.002380124758929014, -7.62939453125e-06, -0.0058135986328125, -9.5367431640625e-06, -7.62939453125e-06, -0.0029964447021484375, -0.0001373291015625, 0.0, -0.00020599365234375, 0.0, -0.6890926361083984, 0.0, -0.0031627248972654343, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Excess", " ", "Mana", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "0", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -9.699482447040019, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(0)\n        player.draw()\n        player.draw()\n        game.check_delayed()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Excess Mana"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 0}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "check_delayed", "value": {"_type": "Name", "id": "game"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -4.697824001312256, -9.5367431640625e-06, -0.0002931347116827965, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.000263214111328125, -1.33514404296875e-05, -3.814697265625e-06, -0.0001678466796875, -0.0050106048583984375, -1.9073486328125e-05, 0.0, -0.0001850128173828125, 0.0, -1.2516951755969785e-05, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.0001316070556640625, -1.33514404296875e-05, -1.1444091796875e-05, -1.764281842042692e-05, -0.0002828568685799837, -1.6927657270571217e-05, -2.288818359375e-05, -3.0517578125e-05, -7.62939453125e-06, -3.325883881188929e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.43865966796875e-05, -2.3841855067985307e-07, -0.0011749267578125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.5904102325439453, 0.0, -0.0006866455078125, -0.6771211624145508, -3.0517578125e-05, -0.019632816314697266, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -0.0006122589111328125, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.006845712661743164, -3.814697265625e-06, -0.0015354156494140625, 0.0, -0.005170106887817383, -2.9087066650390625e-05, -0.00037384033203125, -3.814697265625e-06, -5.543231964111328e-05, -1.9073486328125e-05, -1.1444091796875e-05, -5.7220458984375e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, 0.0, -5.7220458984375e-06, 0.0, -0.0001277923583984375, -0.00014472007751464844, -8.344629350176547e-06, -0.8567600250244141, -0.000186920166015625, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -7.450580596923828e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -9.34600830078125e-05, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.814697265625e-06, -0.030768394470214844, -1.9073486328125e-06, -0.00077056884765625, -0.0055484771728515625, -9.5367431640625e-06, 0.0, -0.04341697692871094, 0.0, -6.103515625e-05, 0.0, -0.009427070617675781, 0.0, -0.6322684288024902, -3.099436753473128e-06, -0.0648655891418457, -3.814697265625e-06, -0.000308990478515625, -0.0020704269409179688, -3.814697265625e-06, -0.5049402713775635, -1.1444091796875e-05, -0.06562995910644531, -1.9073486328125e-06, -3.814697265625e-06, -0.000339508056640625, -0.000270843505859375, 0.0, -0.00054931640625, 0.0, -0.002506256103515625, 0.0, -0.0025755027309060097, 0.0, -0.015011787414550781, -5.7220458984375e-06, -3.814697265625e-06, -0.0009784698486328125, -0.00017547607421875, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -0.4211397171020508, 0.0, -0.002380124758929014, -7.62939453125e-06, -0.0058135986328125, -9.5367431640625e-06, -7.62939453125e-06, -0.0029964447021484375, -0.0001373291015625, 0.0, -0.00020599365234375, 0.0, -0.7400121688842773, 0.0, -0.2769879102706909, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Excess", " ", "Mana", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "0", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "game", "<EOS>", "check_delayed", "<EOS>"]}, {"score": -10.078711148156543, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(0)\n        player.draw()\n        player.draw()\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Excess Mana"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 0}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -4.697824001312256, -9.5367431640625e-06, -0.0002931347116827965, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.000263214111328125, -1.33514404296875e-05, -3.814697265625e-06, -0.0001678466796875, -0.0050106048583984375, -1.9073486328125e-05, 0.0, -0.0001850128173828125, 0.0, -1.2516951755969785e-05, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.0001316070556640625, -1.33514404296875e-05, -1.1444091796875e-05, -1.764281842042692e-05, -0.0002828568685799837, -1.6927657270571217e-05, -2.288818359375e-05, -3.0517578125e-05, -7.62939453125e-06, -3.325883881188929e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.43865966796875e-05, -2.3841855067985307e-07, -0.0011749267578125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.5904102325439453, 0.0, -0.0006866455078125, -0.6771211624145508, -3.0517578125e-05, -0.019632816314697266, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -0.0006122589111328125, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.006845712661743164, -3.814697265625e-06, -0.0015354156494140625, 0.0, -0.005170106887817383, -2.9087066650390625e-05, -0.00037384033203125, -3.814697265625e-06, -5.543231964111328e-05, -1.9073486328125e-05, -1.1444091796875e-05, -5.7220458984375e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, 0.0, -5.7220458984375e-06, 0.0, -0.0001277923583984375, -0.00014472007751464844, -8.344629350176547e-06, -0.8567600250244141, -0.000186920166015625, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -7.450580596923828e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -9.34600830078125e-05, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.814697265625e-06, -0.030768394470214844, -1.9073486328125e-06, -0.00077056884765625, -0.0055484771728515625, -9.5367431640625e-06, 0.0, -0.04341697692871094, 0.0, -6.103515625e-05, 0.0, -0.009427070617675781, 0.0, -0.6322684288024902, -3.099436753473128e-06, -0.0648655891418457, -3.814697265625e-06, -0.000308990478515625, -0.0020704269409179688, -3.814697265625e-06, -1.0802664756774902, -0.12307178974151611, -0.09419822692871094, 0.0, -5.7220458984375e-06, -0.001712799072265625, -9.72747802734375e-05, 0.0, -0.0007228851318359375, 0.0, -0.0036096572875976562, 0.0, -0.0026872060261666775, 0.0, -0.016992568969726562, -5.7220458984375e-06, -3.814697265625e-06, -0.00102996826171875, -0.000148773193359375, 0.0, -5.7220458984375e-05, -1.9073486328125e-06, -0.4684019088745117, 0.0, -0.002419822383671999, -5.7220458984375e-06, -0.00576019287109375, -9.5367431640625e-06, -7.62939453125e-06, -0.003047943115234375, -0.0001316070556640625, 0.0, -0.0002498626708984375, 0.0, -0.6141767501831055, 0.0, -0.0031595078762620687, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Excess", " ", "Mana", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "Mana", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -10.210178497285334, "inferred_code": "class ExcessMana(SpellCard):\n\n    def __init__(self):\n        super().__init__('Excess Mana', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.increase_armor(0)\n        player.draw()\n        game.check_delayed()\n        super().use(player, game)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Excess Mana"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 0}], "_type": "Call", "func": {"_type": "Attribute", "attr": "increase_armor", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "check_delayed", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "ExcessMana"}], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -9.5367431640625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -6.532570841955021e-05, -0.00010013097926275805, -0.000341120088705793, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -0.0002040863037109375, -5.7220458984375e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -4.697824001312256, -9.5367431640625e-06, -0.0002931347116827965, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.000263214111328125, -1.33514404296875e-05, -3.814697265625e-06, -0.0001678466796875, -0.0050106048583984375, -1.9073486328125e-05, 0.0, -0.0001850128173828125, 0.0, -1.2516951755969785e-05, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.0001316070556640625, -1.33514404296875e-05, -1.1444091796875e-05, -1.764281842042692e-05, -0.0002828568685799837, -1.6927657270571217e-05, -2.288818359375e-05, -3.0517578125e-05, -7.62939453125e-06, -3.325883881188929e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.43865966796875e-05, -2.3841855067985307e-07, -0.0011749267578125, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.5904102325439453, 0.0, -0.0006866455078125, -0.6771211624145508, -3.0517578125e-05, -0.019632816314697266, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -0.0006122589111328125, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.006845712661743164, -3.814697265625e-06, -0.0015354156494140625, 0.0, -0.005170106887817383, -2.9087066650390625e-05, -0.00037384033203125, -3.814697265625e-06, -5.543231964111328e-05, -1.9073486328125e-05, -1.1444091796875e-05, -5.7220458984375e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, 0.0, -5.7220458984375e-06, 0.0, -0.0001277923583984375, -0.00014472007751464844, -8.344629350176547e-06, -0.8567600250244141, -0.000186920166015625, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -7.450580596923828e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -9.34600830078125e-05, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.814697265625e-06, -0.030768394470214844, -1.9073486328125e-06, -0.00077056884765625, -0.0055484771728515625, -9.5367431640625e-06, 0.0, -0.04341697692871094, 0.0, -6.103515625e-05, 0.0, -0.009427070617675781, 0.0, -0.6322684288024902, -3.099436753473128e-06, -0.0648655891418457, -3.814697265625e-06, -0.000308990478515625, -0.0020704269409179688, -3.814697265625e-06, -0.5049402713775635, -1.1444091796875e-05, -0.06562995910644531, -1.9073486328125e-06, -3.814697265625e-06, -0.000339508056640625, -0.000270843505859375, 0.0, -0.00054931640625, 0.0, -0.002506256103515625, 0.0, -0.0025755027309060097, 0.0, -0.015011787414550781, -5.7220458984375e-06, -3.814697265625e-06, -0.0009784698486328125, -0.00017547607421875, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -1.1290454864501953, 0.0, -0.19463157653808594, -1.1920928244535389e-07, -0.08716964721679688, 0.0, -5.7220458984375e-06, -0.2505464553833008, -7.62939453125e-06, 0.0, -0.14889240264892578, -3.814697265625e-06, -0.0299217589199543, -3.814697265625e-06, -0.11939048767089844, 0.0, -0.00043487548828125, -1.9073486328125e-05, -3.814697265625e-06, -8.487701416015625e-05, 0.0, -0.0001983642578125, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Excess", "Mana", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Excess", " ", "Mana", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 282, 47, 165, "0", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "game", "<EOS>", "check_delayed", "<EOS>", 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>"]}, {"score": -22.648046493530273, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.91278076171875e-05, -5.91278076171875e-05, -22.64792823791504], "choice_history": [80, 159, 294]}]}
{"index": 30, "beams": [{"score": -0.43104219086353623, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -0.006075024604797363, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010852813720703125, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.07669484615325928, -1.9073486328125e-06, -0.007576704025268555, 0.0, -0.006983757019042969, -0.0005435943603515625, -1.71661376953125e-05, -0.0008029937744140625, -3.814697265625e-06, -0.002716064453125, -0.0008971691131591797, -0.003612518310546875, -1.52587890625e-05, -0.0028276443481445312, -0.001430511474609375, -0.000392913818359375, -0.000858306884765625, -0.0016794204711914062, -3.0517578125e-05, -0.0025129318237304688, -3.814697265625e-06, -0.0018645524978637695, -0.0001316070556640625, -0.011819839477539062, -9.393692016601562e-05, -9.1552734375e-05, -0.02163219451904297, -2.47955322265625e-05, -0.000148773193359375, -0.0002040863037109375, -9.5367431640625e-06, -9.5367431640625e-06, -0.0002651214599609375, -1.9073486328125e-06, -0.005779385566711426, -5.7220458984375e-06, -0.00975799560546875, -0.00046539306640625, -0.0002956390380859375, -8.20159912109375e-05, -6.103515625e-05, -0.0032787322998046875, -4.00543212890625e-05, -3.814697265625e-06, -0.0012427568435668945, -1.9073486328125e-06, -0.0018520355224609375, 0.0, -0.00159454345703125, -0.005963325500488281, -0.000202178955078125, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023663043975830078, -0.0002593994140625, -1.52587890625e-05, -1.9073486328125e-06, -0.005842924118041992, -9.357929229736328e-05, -2.09808349609375e-05, -0.000514984130859375, 0.0, -8.96453857421875e-05, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -1.84810769207661, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "FREE"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -1.6540088653564453, 0.0, -0.0032924413681030273, 0.0, -3.0517578125e-05, -7.62939453125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005512237548828125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.06065809726715088, -1.9073486328125e-06, -0.008509516716003418, 0.0, -0.008646011352539062, -0.000545501708984375, -1.52587890625e-05, -0.000766754150390625, -3.814697265625e-06, -0.0027971267700195312, -0.0008704662322998047, -0.0035104751586914062, -1.52587890625e-05, -0.0028133392333984375, -0.0014514923095703125, -0.00038909912109375, -0.000823974609375, -0.0016574859619140625, -2.86102294921875e-05, -0.0024499893188476562, -3.814697265625e-06, -0.0017970800399780273, -0.0001316070556640625, -0.011857032775878906, -9.393692016601562e-05, -9.1552734375e-05, -0.02165508270263672, -2.47955322265625e-05, -0.000148773193359375, -0.0002040863037109375, -9.5367431640625e-06, -9.5367431640625e-06, -0.00026702880859375, -1.9073486328125e-06, -0.005628705024719238, -5.7220458984375e-06, -0.009778976440429688, -0.00046539306640625, -0.0002956390380859375, -8.20159912109375e-05, -5.91278076171875e-05, -0.0033092498779296875, -4.00543212890625e-05, -3.814697265625e-06, -0.0012427568435668945, -1.9073486328125e-06, -0.0018520355224609375, 0.0, -0.0015888214111328125, -0.0059680938720703125, -0.000202178955078125, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023663043975830078, -0.0002593994140625, -1.52587890625e-05, -1.9073486328125e-06, -0.00584101676940918, -9.357929229736328e-05, -2.09808349609375e-05, -0.000514984130859375, 0.0, -8.96453857421875e-05, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -3.7744277680653795, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -0.006075024604797363, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010852813720703125, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -3.40718674659729, -1.1444091796875e-05, -0.023665428161621094, 0.0, -0.0031452178955078125, -0.0005311965942382812, -9.5367431640625e-06, -0.000919342041015625, -5.7220458984375e-06, -0.0032883882522583008, -0.0008323192596435547, -0.0033750534057617188, -1.52587890625e-05, -0.002864837646484375, -0.0014009475708007812, -0.0004100799560546875, -0.0008373260498046875, -0.0016202926635742188, -3.0517578125e-05, -0.0024976730346679688, -3.814697265625e-06, -0.0018355846405029297, -0.000125885009765625, -0.012564659118652344, -9.393692016601562e-05, -8.96453857421875e-05, -0.02140331268310547, -2.288818359375e-05, -0.0001583099365234375, -0.0001983642578125, -9.5367431640625e-06, -1.1444091796875e-05, -0.0002613067626953125, -1.9073486328125e-06, -0.005803227424621582, -5.7220458984375e-06, -0.009736061096191406, -0.0004787445068359375, -0.000301361083984375, -8.20159912109375e-05, -5.91278076171875e-05, -0.003177642822265625, -3.814697265625e-05, -3.814697265625e-06, -0.0012313127517700195, -1.9073486328125e-06, -0.0018558502197265625, 0.0, -0.0015850067138671875, -0.005915641784667969, -0.0002002716064453125, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023663043975830078, -0.0002593994140625, -1.52587890625e-05, -1.9073486328125e-06, -0.00584864616394043, -9.357929229736328e-05, -2.09808349609375e-05, -0.0005168914794921875, 0.0, -8.96453857421875e-05, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -4.575086950313775, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Execute"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_enemy_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -4.319933891296387, -9.5367431640625e-06, -1.3828277587890625e-05, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-05, -2.09808349609375e-05, -1.1444091796875e-05, -0.07141494750976562, -0.000179290771484375, -1.1444091796875e-05, 0.0, -3.0517578125e-05, -2.09808349609375e-05, -8.940691259340383e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.000152587890625, -3.814697265625e-06, -2.288818359375e-05, -2.0265558760002023e-06, -0.000278472900390625, -1.33514404296875e-05, -4.9591064453125e-05, -1.5496327250730246e-05, -1.9073486328125e-05, -0.001079559326171875, 0.0, -9.5367431640625e-06, 0.0, -0.000240325927734375, -1.1920928244535389e-07, -0.00894927978515625, -1.9073486328125e-06, -5.91278076171875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.00010693073272705078, 0.0, -0.0017757415771484375, -1.9073486328125e-06, -4.9591064453125e-05, -0.0008220672607421875, 0.0, -0.006927490234375, -5.7220458984375e-06, -0.0004730224609375, -5.7220458984375e-06, -9.918212890625e-05, -5.7220458984375e-06, -3.4332275390625e-05, -1.9073486328125e-05, -0.0005838871002197266, 0.0, -1.33514404296875e-05, -1.1920928244535389e-07, -0.1389988660812378, -5.91278076171875e-05, -0.0015621185302734375, -0.009433746337890625, -1.9073486328125e-05, 0.0, -7.62939453125e-05, 0.0, -2.86102294921875e-05, -1.71661376953125e-05, -2.288818359375e-05, 0.0, -0.009589076042175293, -3.62396240234375e-05, -8.58306884765625e-05, -0.000629425048828125, 0.0, -0.000152587890625, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Execute", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -4.6326208079594835, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_friendly_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -0.006075024604797363, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010852813720703125, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -4.2840704917907715, 0.0, -0.005912899971008301, 0.0, -0.001628875732421875, -0.000453948974609375, -9.5367431640625e-06, -0.0009212493896484375, -7.62939453125e-06, -0.0029772520065307617, -0.0008227825164794922, -0.0038433074951171875, -1.52587890625e-05, -0.002941131591796875, -0.0014066696166992188, -0.000408172607421875, -0.000865936279296875, -0.0016994476318359375, -3.4332275390625e-05, -0.002651214599609375, -3.814697265625e-06, -0.0019142627716064453, -0.00012969970703125, -0.012497901916503906, -9.584426879882812e-05, -8.7738037109375e-05, -0.0214385986328125, -2.288818359375e-05, -0.0001583099365234375, -0.000202178955078125, -9.5367431640625e-06, -9.5367431640625e-06, -0.0002593994140625, -1.9073486328125e-06, -0.005968213081359863, -5.7220458984375e-06, -0.009667396545410156, -0.0004749298095703125, -0.000286102294921875, -8.20159912109375e-05, -5.91278076171875e-05, -0.0031862258911132812, -3.814697265625e-05, -3.814697265625e-06, -0.0012427568435668945, -1.9073486328125e-06, -0.0018520355224609375, 0.0, -0.001590728759765625, -0.005946159362792969, -0.000202178955078125, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023472309112548828, -0.0002593994140625, -1.52587890625e-05, -1.9073486328125e-06, -0.0058400630950927734, -9.357929229736328e-05, -2.09808349609375e-05, -0.000514984130859375, 0.0, -8.96453857421875e-05, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.372190829588817, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.filter_func,\n            filter_func=lambda target: target.health != target.\n            calculate_max_health() and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "filter_func", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -0.006075024604797363, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010852813720703125, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -5.012014865875244, 0.0, -0.016783833503723145, 0.0, -0.002166748046875, -0.00048828125, -1.1444091796875e-05, -0.0008335113525390625, -9.5367431640625e-06, -0.0029642581939697266, -0.000826716423034668, -0.0037364959716796875, -1.52587890625e-05, -0.0029773712158203125, -0.0015125274658203125, -0.000400543212890625, -0.000904083251953125, -0.0016832351684570312, -3.24249267578125e-05, -0.0026330947875976562, -3.814697265625e-06, -0.0018988847732543945, -0.000125885009765625, -0.013197898864746094, -9.965896606445312e-05, -8.7738037109375e-05, -0.021303176879882812, -2.09808349609375e-05, -0.000164031982421875, -0.0001964569091796875, -9.5367431640625e-06, -1.1444091796875e-05, -0.0002593994140625, -1.9073486328125e-06, -0.005878567695617676, -5.7220458984375e-06, -0.009663581848144531, -0.0004940032958984375, -0.00029754638671875, -8.20159912109375e-05, -5.91278076171875e-05, -0.0030107498168945312, -3.814697265625e-05, -3.814697265625e-06, -0.0012274980545043945, -1.9073486328125e-06, -0.001865386962890625, 0.0, -0.0015773773193359375, -0.00588226318359375, -0.0002002716064453125, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023663043975830078, -0.0002593994140625, -1.52587890625e-05, -1.9073486328125e-06, -0.005850553512573242, -9.357929229736328e-05, -2.09808349609375e-05, -0.000518798828125, 0.0, -8.96453857421875e-05, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "filter_func", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.465279694868968, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "FREE"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -1.6540088653564453, 0.0, -0.0032924413681030273, 0.0, -3.0517578125e-05, -7.62939453125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.0005512237548828125, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -3.6653876304626465, -1.33514404296875e-05, -0.025132179260253906, 0.0, -0.0037250518798828125, -0.000518798828125, -9.5367431640625e-06, -0.0009174346923828125, -5.7220458984375e-06, -0.0033589601516723633, -0.0008189678192138672, -0.0032987594604492188, -1.52587890625e-05, -0.00286865234375, -0.0014238357543945312, -0.000408172607421875, -0.0008087158203125, -0.0016031265258789062, -3.0517578125e-05, -0.0024423599243164062, -3.814697265625e-06, -0.0017614364624023438, -0.000125885009765625, -0.012624740600585938, -9.393692016601562e-05, -8.96453857421875e-05, -0.021467208862304688, -2.288818359375e-05, -0.000156402587890625, -0.0001983642578125, -9.5367431640625e-06, -9.5367431640625e-06, -0.000263214111328125, -1.9073486328125e-06, -0.0056182146072387695, -5.7220458984375e-06, -0.009749412536621094, -0.0004787445068359375, -0.00030517578125, -8.20159912109375e-05, -5.91278076171875e-05, -0.0031986236572265625, -3.814697265625e-05, -3.814697265625e-06, -0.0012303590774536133, -1.9073486328125e-06, -0.0018558502197265625, 0.0, -0.0015773773193359375, -0.005917549133300781, -0.0002002716064453125, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023663043975830078, -0.0002593994140625, -1.52587890625e-05, -1.9073486328125e-06, -0.0058476924896240234, -9.357929229736328e-05, -2.09808349609375e-05, -0.0005168914794921875, 0.0, -8.96453857421875e-05, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.691992279364513, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.spell_targetable() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -0.006075024604797363, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010852813720703125, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.07669484615325928, -1.9073486328125e-06, -0.007576704025268555, 0.0, -0.006983757019042969, -0.0005435943603515625, -1.71661376953125e-05, -0.0008029937744140625, -3.814697265625e-06, -0.002716064453125, -0.0008971691131591797, -0.003612518310546875, -1.52587890625e-05, -0.0028276443481445312, -0.001430511474609375, -0.000392913818359375, -0.000858306884765625, -0.0016794204711914062, -3.0517578125e-05, -0.0025129318237304688, -3.814697265625e-06, -0.0018645524978637695, -0.0001316070556640625, -0.011819839477539062, -9.393692016601562e-05, -9.1552734375e-05, -0.02163219451904297, -2.47955322265625e-05, -0.000148773193359375, -0.0002040863037109375, -9.5367431640625e-06, -9.5367431640625e-06, -0.0002651214599609375, -1.9073486328125e-06, -0.005779385566711426, -5.7220458984375e-06, -5.240119934082031, 0.0, -0.030689239501953125, -0.000354766845703125, -2.47955322265625e-05, -0.00121307373046875, -1.9073486328125e-05, -3.814697265625e-06, -0.0016471147537231445, -1.9073486328125e-06, -0.002452850341796875, 0.0, -0.0018215179443359375, -0.0071620941162109375, -0.0001678466796875, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00022518634796142578, -0.0002613067626953125, -1.52587890625e-05, -1.9073486328125e-06, -0.006005048751831055, -9.930133819580078e-05, -2.09808349609375e-05, -0.0004825592041015625, 0.0, -8.869171142578125e-05, -2.09808349609375e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.7913241351384315, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=hearthbreaker.targeting\n            )\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -0.006075024604797363, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010852813720703125, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.07669484615325928, -1.9073486328125e-06, -0.007576704025268555, 0.0, -5.424975395202637, 0.0, -5.7220458984375e-05, -1.9073486328125e-06, -0.003887176513671875, 0.0, -0.0001125335693359375, -1.1920928244535389e-07, -0.0042819976806640625, -0.014133453369140625, -7.62939453125e-06, 0.0, -6.103515625e-05, 0.0, -4.1961669921875e-05, -1.52587890625e-05, -1.9073486328125e-05, 0.0, -0.01091623306274414, -5.53131103515625e-05, -2.09808349609375e-05, -0.000911712646484375, 0.0, -0.000152587890625, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.927563425375865, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "Eq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -0.006075024604797363, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010852813720703125, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.07669484615325928, -1.9073486328125e-06, -0.007576704025268555, 0.0, -0.006983757019042969, -0.0005435943603515625, -1.71661376953125e-05, -0.0008029937744140625, -3.814697265625e-06, -0.002716064453125, -0.0008971691131591797, -0.003612518310546875, -1.52587890625e-05, -0.0028276443481445312, -0.001430511474609375, -0.000392913818359375, -0.000858306884765625, -0.0016794204711914062, -3.0517578125e-05, -0.0025129318237304688, -3.814697265625e-06, -0.0018645524978637695, -0.0001316070556640625, -0.011819839477539062, -9.393692016601562e-05, -9.1552734375e-05, -5.464327335357666, -1.9073486328125e-05, -0.054152488708496094, -0.00026702880859375, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001888275146484375, -1.9073486328125e-06, -0.005892753601074219, -3.814697265625e-06, -0.010477066040039062, -0.00098419189453125, -0.0005054473876953125, -0.0001010894775390625, -5.14984130859375e-05, -0.0018014907836914062, -3.0517578125e-05, -1.9073486328125e-06, -0.0012683868408203125, -1.9073486328125e-06, -0.0018711090087890625, 0.0, -0.00157928466796875, -0.005705833435058594, -0.00019073486328125, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023472309112548828, -0.0002613067626953125, -1.52587890625e-05, -1.9073486328125e-06, -0.00584101676940918, -9.548664093017578e-05, -2.09808349609375e-05, -0.0005207061767578125, 0.0, -8.869171142578125e-05, -3.0517578125e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 2, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.961939092947887, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, minion_type=MINION_TYPE.targeting, filter_func=lambda\n            target: target.health != target.calculate_max_health() and\n            target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "targeting", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -5.24232292175293, 0.0, -0.0030727386474609375, -1.9073486328125e-06, -0.009593963623046875, 0.0, -0.1085977554321289, 0.0, -0.24794304370880127, 0.0, -0.015598297119140625, -0.0004425048828125, -3.24249267578125e-05, -0.0008869171142578125, -9.5367431640625e-06, -0.0028797388076782227, -0.0006704330444335938, -0.0032444000244140625, -1.52587890625e-05, -0.0023174285888671875, -0.0016107559204101562, -0.0004329681396484375, -0.00106048583984375, -0.0021390914916992188, -2.6702880859375e-05, -0.002643585205078125, -3.814697265625e-06, -0.002921462059020996, -0.00011444091796875, -0.011609077453613281, -9.584426879882812e-05, -7.2479248046875e-05, -0.020560264587402344, -2.09808349609375e-05, -0.000141143798828125, -0.0006656646728515625, -9.5367431640625e-06, -1.52587890625e-05, -0.000244140625, -1.9073486328125e-06, -0.00882720947265625, -5.7220458984375e-06, -0.009419441223144531, -0.0004520416259765625, -0.0002651214599609375, -8.20159912109375e-05, -6.29425048828125e-05, -0.0027141571044921875, -3.62396240234375e-05, -3.814697265625e-06, -0.001270294189453125, -1.9073486328125e-06, -0.00194549560546875, 0.0, -0.001617431640625, -0.00579071044921875, -0.0001964569091796875, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023472309112548828, -0.0002613067626953125, -1.52587890625e-05, -1.9073486328125e-06, -0.005823850631713867, -9.357929229736328e-05, -2.09808349609375e-05, -0.000518798828125, 0.0, -8.869171142578125e-05, -3.4332275390625e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "targeting", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.028533216788219, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .EPIC, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "EPIC"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -5.823780059814453, -7.05718994140625e-05, -0.007986068725585938, 0.0, -3.24249267578125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -0.0006427764892578125, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -0.06741440296173096, -1.9073486328125e-06, -0.008307218551635742, 0.0, -0.00766754150390625, -0.000568389892578125, -1.71661376953125e-05, -0.0007877349853515625, -3.814697265625e-06, -0.0027828216552734375, -0.0008952617645263672, -0.0035524368286132812, -1.52587890625e-05, -0.0028104782104492188, -0.0014410018920898438, -0.0003948211669921875, -0.0008449554443359375, -0.0016841888427734375, -3.0517578125e-05, -0.002490997314453125, -3.814697265625e-06, -0.0018303394317626953, -0.0001316070556640625, -0.011832237243652344, -9.393692016601562e-05, -9.1552734375e-05, -0.021648406982421875, -2.47955322265625e-05, -0.000148773193359375, -0.0002040863037109375, -9.5367431640625e-06, -9.5367431640625e-06, -0.00026702880859375, -1.9073486328125e-06, -0.005668759346008301, -5.7220458984375e-06, -0.009762763977050781, -0.0004673004150390625, -0.00029754638671875, -8.20159912109375e-05, -6.103515625e-05, -0.0032901763916015625, -4.00543212890625e-05, -3.814697265625e-06, -0.001244664192199707, -1.9073486328125e-06, -0.0018520355224609375, 0.0, -0.001590728759765625, -0.0059642791748046875, -0.000202178955078125, 0.0, -7.62939453125e-06, -7.62939453125e-06, -0.00023663043975830078, -0.0002593994140625, -1.52587890625e-05, -1.9073486328125e-06, -0.005841970443725586, -9.357929229736328e-05, -2.09808349609375e-05, -0.000514984130859375, 0.0, -8.96453857421875e-05, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.342881199194835, "inferred_code": "class Execute(SpellCard):\n\n    def __init__(self):\n        super().__init__('Execute', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target, filter_func=lambda target: \n            target.health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "model_output": {"body": [{"body": [{"hole0": "Execute", "hole8": {"args": {"args": [{"_type": "arg", "arg": "target"}], "_type": "arguments"}, "body": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"comparators": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_max_health", "value": {"_type": "Name", "id": "target"}}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"_type": "Attribute", "attr": "spell_targetable", "value": {"_type": "Name", "id": "target"}}}]}, "_type": "Lambda"}, "hole7": "filter_func", "hole2": "WARRIOR", "hole6": "find_enemy_minion_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 1, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Execute"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -3.6954811548639555e-06, -4.982943573850207e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -9.191036224365234e-05, -3.814697265625e-06, -2.1457672119140625e-06, -0.0006008148193359375, -0.017126083374023438, -0.0005016326904296875, -0.0010701649589464068, -5.173683166503906e-05, -0.00017473420302849263, -3.933906555175781e-06, -0.0005379915237426758, -1.9073486328125e-06, -0.2198467254638672, -1.9073486328125e-06, -0.006075024604797363, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0010852813720703125, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.07669484615325928, -1.9073486328125e-06, -0.007576704025268555, 0.0, -0.006983757019042969, -0.0005435943603515625, -1.71661376953125e-05, -0.0008029937744140625, -3.814697265625e-06, -0.002716064453125, -0.0008971691131591797, -0.003612518310546875, -1.52587890625e-05, -0.0028276443481445312, -0.001430511474609375, -0.000392913818359375, -0.000858306884765625, -0.0016794204711914062, -3.0517578125e-05, -0.0025129318237304688, -3.814697265625e-06, -0.0018645524978637695, -0.0001316070556640625, -0.011819839477539062, -9.393692016601562e-05, -9.1552734375e-05, -0.02163219451904297, -2.47955322265625e-05, -0.000148773193359375, -0.0002040863037109375, -9.5367431640625e-06, -9.5367431640625e-06, -0.0002651214599609375, -1.9073486328125e-06, -0.005779385566711426, -5.7220458984375e-06, -0.00975799560546875, -0.00046539306640625, -0.0002956390380859375, -8.20159912109375e-05, -6.103515625e-05, -0.0032787322998046875, -4.00543212890625e-05, -3.814697265625e-06, -0.0012427568435668945, -1.9073486328125e-06, -0.0018520355224609375, 0.0, -0.00159454345703125, -5.427173614501953, -0.07193756103515625, 0.0, -3.814697265625e-06, -7.62939453125e-06, -0.0012404918670654297, -0.0003643035888671875, -9.5367431640625e-06, -5.7220458984375e-06, -0.4243825674057007, -2.2649765014648438e-06], "choice_history": [80, 159, 295, 88, 138, "Execute", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Execute", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 16, 153, 269, 275, 268, "target", "<EOS>", 13, 132, 0, 283, 41, 139, 11, 129, 19, 160, "target", "<EOS>", "health", "<EOS>", 279, 10, 282, 40, 134, 11, 129, 19, 160, "target", "<EOS>", "calculate_max_health", "<EOS>", 40, 134, 11, 129, 19, 160, "target", "<EOS>", "spell_targetable", "<EOS>", 116, 224, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -22.75677490234375, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, 0.0, -22.75677490234375], "choice_history": [80, 159, 294]}, {"score": -23.85884416103363, "inferred_code": "self.target.add_buff(Buff(()))\n", "model_output": {"body": [{"hole0": "", "_type": "Template50"}], "_type": "Module"}, "score_history": [0.0, 0.0, -3.814697265625e-06, -15.118288040161133, -8.727538108825684, -0.01301419734954834], "choice_history": [80, 159, 295, 117, 226, "<EOS>"]}]}
{"index": 31, "beams": [{"score": -0.22560041961650512, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -0.058341026306152344, -0.0004119873046875, -0.0020751953125, 0.0, -0.0001544952392578125, 0.0, -0.0010089874267578125, -3.0517578125e-05, -0.000514984130859375, -1.71661376953125e-05, -2.86102294921875e-05, -6.67572021484375e-05, 0.0, -0.010485649108886719, -9.5367431640625e-06, -0.0001659393310546875, 0.0, -0.00011837482452392578, -2.0265579223632812e-06, -0.00023472309112548828, 0.0, -0.0008184839971363544, -0.000141143798828125, -0.00011444091796875, -0.0001621246337890625, 0.0, -4.00543212890625e-05, -8.0108642578125e-05, -0.0005626678466796875, 0.0, -0.000110626220703125, 0.0, -0.002750396728515625, -1.9073486328125e-06, -0.010123252868652344, -4.57763671875e-05, -3.814697265625e-06, -0.022477149963378906, -0.000102996826171875, -0.0002949016634374857, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.01120007038116455, 0.0, -0.008124351501464844, -3.814697265625e-06, -0.023474693298339844, -0.0012722015380859375, -0.0002307891845703125, -1.9073486328125e-06, -0.000553131103515625, 0.0, -9.918212890625e-05, 0.0, -0.004109382629394531, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -3.4912814547346684, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -2.9730119705200195, 0.0, -0.31426048278808594, 0.0, -0.000209808349609375, -1.9073486328125e-06, -0.00046539306640625, -1.1920928244535389e-07, -0.0004159212112426758, -1.1920928244535389e-07, -0.0023842230439186096, -1.52587890625e-05, -0.000148773193359375, -3.0517578125e-05, -1.9073486328125e-06, -3.814697265625e-05, -0.000331878662109375, -7.43865966796875e-05, 0.0, -0.0003414154052734375, 0.0, -0.00255584716796875, -1.9073486328125e-06, -0.04768943786621094, -4.57763671875e-05, -5.7220458984375e-06, -0.03967475891113281, -0.0002002716064453125, -0.0013753771781921387, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.003220677375793457, -1.9073486328125e-06, -0.006865501403808594, -5.7220458984375e-06, -0.026590347290039062, -0.0014019012451171875, -0.00019073486328125, -1.9073486328125e-06, -0.00054168701171875, 0.0, -0.0001087188720703125, 0.0, -0.004032135009765625, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -4.079141872257871, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -3.4828414916992188, -2.86102294921875e-05, -1.33514404296875e-05, -0.000125885009765625, -1.33514404296875e-05, -6.29425048828125e-05, -3.814697265625e-06, -6.4849853515625e-05, -9.918212890625e-05, -2.1576848666882142e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.71661376953125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.1552734375e-05, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -0.000698089599609375, -4.9591064453125e-05, -1.52587890625e-05, 0.0, -0.006006717681884766, 0.0, -0.3631868362426758, 0.0, -0.10251045227050781, 0.0, -0.000446319580078125, -1.9073486328125e-06, -0.000255584716796875, 0.0, -0.0003833770751953125, -1.9073486328125e-06, -0.002159073017537594, -2.288818359375e-05, -0.000102996826171875, -5.91278076171875e-05, 0.0, -3.62396240234375e-05, -0.0001430511474609375, -7.2479248046875e-05, 0.0, -0.000316619873046875, 0.0, -0.0027513504028320312, -1.9073486328125e-06, -0.055703163146972656, -4.9591064453125e-05, -5.7220458984375e-06, -0.04328441619873047, -0.00020599365234375, -0.001534080132842064, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0028878450393676758, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.514343140697285, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"hole0": 1, "_type": "Template47"}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -0.058341026306152344, -0.0004119873046875, -0.0020751953125, 0.0, -0.0001544952392578125, 0.0, -0.0010089874267578125, -3.0517578125e-05, -0.000514984130859375, -1.71661376953125e-05, -2.86102294921875e-05, -6.67572021484375e-05, 0.0, -0.010485649108886719, -9.5367431640625e-06, -0.0001659393310546875, 0.0, -0.00011837482452392578, -2.0265579223632812e-06, -0.00023472309112548828, 0.0, -0.0008184839971363544, -0.000141143798828125, -0.00011444091796875, -0.0001621246337890625, 0.0, -4.00543212890625e-05, -8.0108642578125e-05, -0.0005626678466796875, 0.0, -0.000110626220703125, 0.0, -0.002750396728515625, -1.9073486328125e-06, -0.010123252868652344, -4.57763671875e-05, -3.814697265625e-06, -0.022477149963378906, -0.000102996826171875, -0.0002949016634374857, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.01120007038116455, 0.0, -0.008124351501464844, -3.814697265625e-06, -3.8773326873779297, -0.006916999816894531, -0.4342018961906433, -3.24249267578125e-05], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 25, 223, "1", "<EOS>"]}, {"score": -4.629693829737782, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -2.9730119705200195, 0.0, -1.3118057250976562, -1.9073486328125e-06, -0.07256698608398438, 0.0, -0.0295332670211792, -3.814697265625e-06, -0.0001125335693359375, -0.0001049041748046875, -1.9073486328125e-06, -9.34600830078125e-05, -0.016239166259765625, -0.000148773193359375, 0.0, -0.000255584716796875, 0.0, -0.0035009384155273438, -1.9073486328125e-06, -0.06889152526855469, -4.00543212890625e-05, -7.62939453125e-06, -0.04221153259277344, -0.0002231597900390625, -0.001532193273305893, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0030852556228637695, -1.9073486328125e-06, -0.0069637298583984375, -5.7220458984375e-06, -0.027756690979003906, -0.0014133453369140625, -0.0001888275146484375, -1.9073486328125e-06, -0.00060272216796875, 0.0, -0.0001087188720703125, 0.0, -0.004237174987792969, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -4.8240256337662615, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -3.4828414916992188, -2.86102294921875e-05, -1.33514404296875e-05, -0.000125885009765625, -1.33514404296875e-05, -6.29425048828125e-05, -3.814697265625e-06, -6.4849853515625e-05, -9.918212890625e-05, -2.1576848666882142e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.71661376953125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.1552734375e-05, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -0.000698089599609375, -4.9591064453125e-05, -1.52587890625e-05, 0.0, -0.006006717681884766, 0.0, -1.263967514038086, -0.0012645721435546875, -0.0040302276611328125, 0.0, -8.0108642578125e-05, 0.0, -0.0005817413330078125, -5.53131103515625e-05, -0.000438690185546875, -1.71661376953125e-05, -4.76837158203125e-05, -6.29425048828125e-05, 0.0, -0.007913589477539062, -9.5367431640625e-06, -0.0001583099365234375, 0.0, -0.00012218952178955078, -2.0265579223632812e-06, -0.00023853778839111328, 0.0, -0.0008488823659718037, -0.00012969970703125, -8.96453857421875e-05, -0.0004596710205078125, 0.0, -4.00543212890625e-05, -6.4849853515625e-05, -0.00060272216796875, 0.0, -9.918212890625e-05, 0.0, -0.0027484893798828125, -1.9073486328125e-06, -0.009326934814453125, -4.76837158203125e-05, -3.814697265625e-06, -0.019437789916992188, -8.20159912109375e-05, -0.0002348844427615404, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0078002214431762695, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.950430897114977, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_heal_power(1), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 1}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -0.058341026306152344, -0.0004119873046875, -0.0020751953125, 0.0, -0.0001544952392578125, 0.0, -0.0010089874267578125, -3.0517578125e-05, -0.000514984130859375, -1.71661376953125e-05, -2.86102294921875e-05, -6.67572021484375e-05, 0.0, -0.010485649108886719, -9.5367431640625e-06, -0.0001659393310546875, 0.0, -0.00011837482452392578, -2.0265579223632812e-06, -0.00023472309112548828, 0.0, -0.0008184839971363544, -0.000141143798828125, -0.00011444091796875, -0.0001621246337890625, 0.0, -4.00543212890625e-05, -8.0108642578125e-05, -0.0005626678466796875, 0.0, -0.000110626220703125, 0.0, -0.002750396728515625, -1.9073486328125e-06, -0.010123252868652344, -4.57763671875e-05, -3.814697265625e-06, -3.9761877059936523, -0.04098320007324219, -0.0001811981201171875, -4.57763671875e-05, -3.62396240234375e-05, 0.0, -0.0007406473159790039, 0.0, -0.185349702835083, 0.0, -0.0001983642578125, -0.013454437255859375, -3.62396240234375e-05, -0.0025644965935498476, -2.0265579223632812e-06, -0.008148193359375, -1.9073486328125e-05, -0.0008279085159301758, -1.9073486328125e-06, -0.510777473449707, -2.288818359375e-05, -0.05434703826904297, -0.000244140625, -0.000377655029296875, 0.0, -4.00543212890625e-05, 0.0, -0.000946044921875, 0.0, -0.0012655258178710938, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "1", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.151059446906849, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), reduce_cost)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "reduce_cost"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -0.058341026306152344, -0.0004119873046875, -0.0020751953125, 0.0, -0.0001544952392578125, 0.0, -0.0010089874267578125, -3.0517578125e-05, -0.000514984130859375, -1.71661376953125e-05, -2.86102294921875e-05, -6.67572021484375e-05, 0.0, -0.010485649108886719, -9.5367431640625e-06, -0.0001659393310546875, 0.0, -0.00011837482452392578, -2.0265579223632812e-06, -0.00023472309112548828, 0.0, -0.0008184839971363544, -0.000141143798828125, -0.00011444091796875, -0.0001621246337890625, 0.0, -4.00543212890625e-05, -8.0108642578125e-05, -0.0005626678466796875, 0.0, -0.000110626220703125, 0.0, -0.002750396728515625, -1.9073486328125e-06, -0.010123252868652344, -4.57763671875e-05, -3.814697265625e-06, -0.022477149963378906, -0.000102996826171875, -0.0002949016634374857, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -4.954891681671143, 0.0, -0.0012483596801757812, -3.814697265625e-06, -0.012324333190917969, -0.000690460205078125, -0.0001697540283203125, 0.0, -7.2479248046875e-05, 0.0, -0.0005578994750976562, 0.0, -0.0045697689056396484, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "reduce_cost", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.185405592950239, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -0.058341026306152344, -0.0004119873046875, -0.0020751953125, 0.0, -0.0001544952392578125, 0.0, -0.0010089874267578125, -3.0517578125e-05, -0.000514984130859375, -1.71661376953125e-05, -2.86102294921875e-05, -6.67572021484375e-05, 0.0, -4.609992980957031, -7.62939453125e-06, -0.010456085205078125, 0.0, -0.0024509429931640625, -0.0002040863037109375, -6.67572021484375e-05, -0.0019865036010742188, -3.814697265625e-06, -8.7738037109375e-05, -0.3318061828613281, -0.0013904571533203125, 0.0, -0.00011444091796875, 0.0, -0.008553624153137207, -1.9073486328125e-06, -0.028324127197265625, -4.00543212890625e-05, -5.7220458984375e-06, -0.01920318603515625, -0.00011444091796875, -0.00031496421433985233, -5.7220458984375e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.008260846138000488, 0.0, -0.006572723388671875, -3.814697265625e-06, -0.021201133728027344, -0.001323699951171875, -0.0002231597900390625, -1.9073486328125e-06, -0.000576019287109375, 0.0, -0.0001087188720703125, 0.0, -0.004326939582824707, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.48414222330711, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 1, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -5.374078750610352, -5.7220458984375e-06, -0.0010881423950195312, -0.000362396240234375, -0.0008445499697700143, -2.0265579223632812e-06, -0.04569244384765625, -5.7220458984375e-06, -7.43865966796875e-05, -0.001811981201171875, -4.00543212890625e-05, 0.0, -0.00023651123046875, 0.0, -0.0002613067626953125, 0.0, -0.003953218460083008, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "1", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.517636119671224, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.add_buff(Buff(Frozen()))\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frozen"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -0.058341026306152344, -0.0004119873046875, -0.0020751953125, 0.0, -0.0001544952392578125, 0.0, -0.0010089874267578125, -3.0517578125e-05, -0.000514984130859375, -1.71661376953125e-05, -2.86102294921875e-05, -6.67572021484375e-05, 0.0, -0.010485649108886719, -9.5367431640625e-06, -0.0001659393310546875, 0.0, -0.00011837482452392578, -2.0265579223632812e-06, -0.00023472309112548828, 0.0, -0.0008184839971363544, -0.000141143798828125, -0.00011444091796875, -0.0001621246337890625, 0.0, -4.00543212890625e-05, -8.0108642578125e-05, -0.0005626678466796875, 0.0, -0.000110626220703125, 0.0, -0.002750396728515625, -1.9073486328125e-06, -4.794578552246094, -1.1920928244535389e-07, -4.1961669921875e-05, -0.5656461715698242, -9.72747802734375e-05, -8.96453857421875e-05, -0.0006734132766723633, -0.004888275172561407, -4.768370445162873e-07, -0.0009603500366210938, -5.7220458984375e-06, -0.000171661376953125, -0.004543304443359375, -2.6702880859375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.00147247314453125, 0.0, -0.0009741783142089844, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frozen", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.723820383710951, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(1), self)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -0.058341026306152344, -0.0004119873046875, -0.0020751953125, 0.0, -0.0001544952392578125, 0.0, -0.0010089874267578125, -3.0517578125e-05, -0.000514984130859375, -1.71661376953125e-05, -2.86102294921875e-05, -6.67572021484375e-05, 0.0, -0.010485649108886719, -9.5367431640625e-06, -0.0001659393310546875, 0.0, -0.00011837482452392578, -2.0265579223632812e-06, -0.00023472309112548828, 0.0, -0.0008184839971363544, -0.000141143798828125, -0.00011444091796875, -0.0001621246337890625, 0.0, -4.00543212890625e-05, -8.0108642578125e-05, -0.0005626678466796875, 0.0, -0.000110626220703125, 0.0, -0.002750396728515625, -1.9073486328125e-06, -0.010123252868652344, -4.57763671875e-05, -3.814697265625e-06, -0.022477149963378906, -0.000102996826171875, -0.0002949016634374857, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.01120007038116455, 0.0, -5.194493293762207, -0.006134033203125, -3.0517578125e-05, 0.0, -0.0017499923706054688, 0.0, -0.000152587890625, 0.0, -0.20485687255859375, 0.0, -0.0003032684326171875, 0.0, -0.0016231536865234375, -1.1920928244535389e-07, -0.0005208253860473633, -1.1920928244535389e-07, -0.0018826685845851898, -3.24249267578125e-05, -0.00017547607421875, -8.392333984375e-05, 0.0, -2.09808349609375e-05, -0.0012989044189453125, -5.91278076171875e-05, 0.0, -0.000339508056640625, 0.0, -0.0021600723266601562, -1.9073486328125e-06, -0.03799152374267578, -4.9591064453125e-05, -3.814697265625e-06, -0.07202720642089844, -0.00018310546875, -0.0006970176473259926, -5.7220458984375e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.00919640064239502, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.966343395695269, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(1), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Name", "id": "targets"}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -0.042456626892089844, -5.7220458984375e-06, -1.1444091796875e-05, -2.6702880859375e-05, -3.62396240234375e-05, -9.5367431640625e-05, 0.0, -3.814697265625e-05, -7.2479248046875e-05, -2.5272365746786818e-05, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001049041748046875, 0.0, -1.1444091796875e-05, -2.491474151611328e-05, -0.0077800750732421875, -1.9073486328125e-05, -4.57763671875e-05, 0.0, -0.001482248306274414, 0.0, -5.635475158691406, -3.24249267578125e-05, -0.07426166534423828, 0.0, -0.02889251708984375, -5.7220458984375e-06, 0.0, -0.0030765533447265625, -1.71661376953125e-05, -4.00543212890625e-05, 0.0, -0.0004444122314453125, 0.0, -0.027254462242126465, 0.0, -0.04712116718292236, -0.0001811981201171875, -9.5367431640625e-06, -0.024625778198242188, -0.0002651214599609375, -0.0008865846320986748, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.003850102424621582, -1.9073486328125e-06, -0.008275032043457031, -7.62939453125e-06, -0.040083885192871094, -0.0013637542724609375, -0.0002155303955078125, -1.9073486328125e-06, -0.00061798095703125, 0.0, -8.96453857421875e-05, 0.0, -0.004207611083984375, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 19, 160, "targets", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.724771888249499, "inferred_code": "class FanOfKnives(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fan of Knives', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player:\n            minion.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"hole0": "Fan of Knives", "_type": "Template15", "hole1": 3, "hole2": "ROGUE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FanOfKnives"}], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.0006961822509765625, -0.000820159912109375, -1.33514404296875e-05, -6.318072337307967e-06, -0.001836384297348559, -0.0021846338640898466, -1.943101960932836e-05, -0.00018310546875, -1.9073486328125e-06, -1.52587890625e-05, -4.601478576660156e-05, -1.1563301086425781e-05, -2.1457672119140625e-06, -0.000148773193359375, -0.0007171630859375, -0.000141143798828125, -5.6980417866725475e-05, -4.1961669921875e-05, -0.00023293495178222656, -1.1444091796875e-05, -4.5895547373220325e-05, -7.62939453125e-06, -1.7762025890988298e-05, -1.1920928244535389e-07, -0.0052051544189453125, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.6716461181640625e-05, -9.536738616588991e-07, -3.4828414916992188, -2.86102294921875e-05, -1.33514404296875e-05, -0.000125885009765625, -1.33514404296875e-05, -6.29425048828125e-05, -3.814697265625e-06, -6.4849853515625e-05, -9.918212890625e-05, -2.1576848666882142e-05, -9.5367431640625e-06, -5.7220458984375e-05, -1.71661376953125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.1552734375e-05, 0.0, -1.1444091796875e-05, -1.919269561767578e-05, -0.000698089599609375, -4.9591064453125e-05, -1.52587890625e-05, 0.0, -0.006006717681884766, 0.0, -0.3631868362426758, 0.0, -2.331205368041992, -3.814697265625e-06, -0.12354850769042969, -1.9073486328125e-06, -0.045485615730285645, 0.0, -0.27968788146972656, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001354217529296875, -1.9073486328125e-05, -4.00543212890625e-05, 0.0, -0.000762939453125, 0.0, -0.009731292724609375, 0.0, -0.032970428466796875, -3.62396240234375e-05, -3.814697265625e-06, -0.03108692169189453, -0.0002346038818359375, -0.0010810531675815582, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0025159120559692383, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Fan", "Of", "Knives", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Fan", " ", "of", " ", "Knives", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -18.511619567871094, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -18.51156997680664], "choice_history": [80, 159, 294]}]}
{"index": 32, "beams": [{"score": -0.1411182645292257, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 4, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Fireball"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 6}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -0.12598896026611328, -0.0005474090576171875, -2.47955322265625e-05, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -1.1920922133867862e-06, -2.3841855067985307e-07, -3.0517578125e-05, -1.9073486328125e-06, -0.0006961822509765625, -1.9073486328125e-05, 0.0, -2.264974000354414e-06, -1.52587890625e-05, -1.52587890625e-05, -2.288818359375e-05, -9.596037125447765e-05, -7.2479248046875e-05, -0.000156402587890625, 0.0, -4.38690185546875e-05, 0.0, -0.000331878662109375, 0.0, -0.001811981201171875, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002079010009765625, 0.0, -0.001880645751953125, -7.62939453125e-06, -7.62939453125e-06, -0.0001773834228515625, -0.0001068115234375, -0.0002728700637817383, -1.1920928244535389e-07, -4.9591064453125e-05, 0.0, -9.5367431640625e-05, -3.814697265625e-06, -7.62939453125e-05, -2.09808349609375e-05, -0.00029790401458740234, -9.5367431640625e-06, -0.0002880096435546875, -1.1920928244535389e-07, -0.0007491111755371094, -4.804131094715558e-05, -0.001247406005859375, -0.000171661376953125, -0.00140380859375, 0.0, -0.00015163421630859375, -2.491474151611328e-05, -0.0006694793701171875, -1.9073486328125e-06, -8.58306884765625e-05, -9.5367431640625e-06, -3.24249267578125e-05, -0.000541548477485776, -2.2649765014648438e-06], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Fireball", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "6", "<EOS>"]}, {"score": -3.7143198320145245, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(6, self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 6}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -0.18470001220703125, -0.004123687744140625, -6.103515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.002863168716430664, -5.7220458984375e-06, -0.00014495849609375, -1.9073486328125e-06, -0.5217087268829346, 0.0, -0.0010890960693359375, -0.21463966369628906, -3.814697265625e-06, -0.007177241146564484, -3.314018249511719e-05, -0.0006618499755859375, -2.09808349609375e-05, -0.3393540382385254, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.818837478148424, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(6, self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "damage", "hole2": [{"_type": "Num", "n": 6}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -0.18470001220703125, -0.004123687744140625, -6.103515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.002863168716430664, -5.7220458984375e-06, -0.00014495849609375, -1.9073486328125e-06, -1.8584015369415283, -9.5367431640625e-06, -0.2202463150024414, -0.0037746429443359375, -1.1444091796875e-05, -0.01019318401813507, -2.3126602172851562e-05, -0.000213623046875, -1.9073486328125e-05, -0.09631943702697754, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 283, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.94946030745902, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -0.18470001220703125, -0.004123687744140625, -6.103515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.002863168716430664, -5.7220458984375e-06, -0.00014495849609375, -1.9073486328125e-06, -0.5217087268829346, 0.0, -0.0010890960693359375, -1.6681060791015625, -0.011074066162109375, -0.019390106201171875, -0.000102996826171875, -0.0015926361083984375, 0.0, -0.0015337467193603516, 0.0, -0.04568791389465332, 0.0, -1.1444091796875e-05, -3.62396240234375e-05, -3.0517578125e-05, -0.008121649734675884, 0.0, -0.003841400146484375, -1.9073486328125e-06, -0.03738594055175781, -0.00012791156768798828], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.28207856818139, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 6, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -2.113142967224121, -0.000110626220703125, -0.0018025636672973633, -1.9073486328125e-06, -3.814697265625e-06, -2.6702880859375e-05, -3.814697265625e-06, -5.841255187988281e-06, -3.24249267578125e-05, 0.0, -2.3484230041503906e-05, 0.0, -5.7220458984375e-06, -7.987019671418238e-06, -4.768370445162873e-07, -0.00524139404296875, -1.1444091796875e-05, -2.47955322265625e-05, -0.0004749298095703125, -1.71661376953125e-05, -1.9073486328125e-05, 0.0, -2.09808349609375e-05, -0.0002613067626953125, -6.115436553955078e-05, 0.0, -2.86102294921875e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -0.000148773193359375, -9.5367431640625e-06, -2.288818359375e-05, -3.921985626220703e-05, -0.003970146179199219, -0.000568389892578125, -0.00286102294921875, -1.71661376953125e-05, -0.0052613019943237305, -5.7220458984375e-06, -0.35791969299316406, -9.34600830078125e-05, -0.0001964569091796875, 0.0, -0.014713287353515625, -3.814697265625e-06, -0.008701443672180176, -1.1444091796875e-05, -0.0016880035400390625, -7.62939453125e-06, -3.0517578125e-05, -3.814697265625e-05, 0.0, -0.0064868927001953125, 0.0, -0.00102996826171875, -3.814697265625e-06, -0.000267863244516775, -3.8146954466355965e-06, -0.0034487247467041016, -3.933906555175781e-06, -0.004530713893473148, -3.6835670471191406e-05, -0.0009002685546875, -0.0049953460693359375, -1.9073486328125e-06, -0.0002956390380859375, -3.4332275390625e-05, -0.023685455322265625, 0.0, -0.0001850128173828125, 0.0, -0.0007361173629760742, -1.1444091796875e-05, -0.23278343677520752, -1.33514404296875e-05, -5.7220458984375e-06, -0.010625839233398438, -0.00035858154296875, -0.03382529690861702, -0.0005952119827270508, -0.000240325927734375, -0.0001049041748046875, -0.0015053749084472656, -1.728534698486328e-05], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.3408149155756846, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.append(6)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "append", "hole2": [{"_type": "Num", "n": 6}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -0.18470001220703125, -0.004123687744140625, -6.103515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.002863168716430664, -5.7220458984375e-06, -0.00014495849609375, -1.9073486328125e-06, -2.6664249897003174, -1.1920928244535389e-07, -0.04126930236816406, -0.0002288818359375, -1.71661376953125e-05, -0.0032565274741500616, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "append", "<EOS>", 282, 47, 165, "6", "<EOS>"]}, {"score": -5.463172007209316, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(6, self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 6}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -2.0966155529022217, -1.1920928244535389e-07, -0.022709965705871582, 0.0, -0.4503469467163086, -0.016572952270507812, -6.103515625e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0020028352737426758, -5.7220458984375e-06, -0.000110626220703125, -1.9073486328125e-06, -0.35015714168548584, 0.0, -0.0016651153564453125, -0.16190147399902344, -5.7220458984375e-06, -0.007112522143870592, -2.7060508728027344e-05, -0.0007953643798828125, -1.33514404296875e-05, -0.1663658618927002, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.630414611982786, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(6, targets)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 6}, {"_type": "Name", "id": "targets"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -0.18470001220703125, -0.004123687744140625, -6.103515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.002863168716430664, -5.7220458984375e-06, -0.00014495849609375, -1.9073486328125e-06, -0.5217087268829346, 0.0, -0.0010890960693359375, -0.21463966369628906, -3.814697265625e-06, -0.007177241146564484, -3.314018249511719e-05, -0.0006618499755859375, -2.09808349609375e-05, -2.255462169647217, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 47, 165, "6", "<EOS>", 45, 160, "targets", "<EOS>"]}, {"score": -5.672624237226927, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(6, player)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 6}, {"_type": "Name", "id": "player"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -0.18470001220703125, -0.004123687744140625, -6.103515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.002863168716430664, -5.7220458984375e-06, -0.00014495849609375, -1.9073486328125e-06, -0.5217087268829346, 0.0, -0.0010890960693359375, -0.21463966369628906, -3.814697265625e-06, -0.007177241146564484, -3.314018249511719e-05, -0.0006618499755859375, -2.09808349609375e-05, -2.2976717948913574, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 47, 165, "6", "<EOS>", 45, 160, "player", "<EOS>"]}, {"score": -6.155672730618761, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(6)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "damage", "hole2": [{"_type": "Num", "n": 6}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -0.18470001220703125, -0.004123687744140625, -6.103515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.002863168716430664, -5.7220458984375e-06, -0.00014495849609375, -1.9073486328125e-06, -1.8584015369415283, -9.5367431640625e-06, -1.6663036346435547, -5.7220458984375e-06, -8.7738037109375e-05, -0.0012447260087355971, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 282, 47, 165, "6", "<EOS>"]}, {"score": -6.28972839503237, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(6)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 6}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -0.18470001220703125, -0.004123687744140625, -6.103515625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.002863168716430664, -5.7220458984375e-06, -0.00014495849609375, -1.9073486328125e-06, -3.4623606204986572, 0.0, -0.1652393341064453, -1.71661376953125e-05, -7.82012939453125e-05, -0.03241514414548874, 0.0], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "6", "<EOS>"]}, {"score": -6.351994465428078, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 6}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -3.8771352767944336, -0.000728607177734375, -0.025110244750976562, 0.0, -5.5909156799316406e-05, -4.76837158203125e-05, -0.00064849853515625, 0.0, -0.0001621246337890625, -1.9073486328125e-06, -3.0517578125e-05, -0.010394405573606491, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "6", "<EOS>"]}, {"score": -7.79274201300629, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def create_minion(self, player):\n        return Minion(6, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 6, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -4.678469657897949, -0.0047512054443359375, -0.0005939006805419922, -3.087488948949613e-05, -0.6712170839309692, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 110, 202, "6", "<EOS>", "4", "<EOS>"]}, {"score": -7.837108968763431, "inferred_code": "class Fireball(SpellCard):\n\n    def __init__(self):\n        super().__init__('Fireball', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Fireball", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Fireball"}], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -4.362964682513848e-05, -4.29153169534402e-06, -5.340576171875e-05, 0.0, 0.0, -6.92605972290039e-05, -6.330013275146484e-05, -6.330013275146484e-05, -5.7220458984375e-05, -0.001750946044921875, -5.7220458984375e-06, -6.449213833548129e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.4226646423339844e-05, -1.9073486328125e-06, -7.62939453125e-05, -1.1444091796875e-05, -4.00543212890625e-05, -2.161919593811035, -0.02178668975830078, -0.0004408661916386336, -5.602834789897315e-06, -0.23778221011161804, -1.728534698486328e-05, -0.013211250305175781, -2.3841855067985307e-07, -4.678469657897949, -0.0047512054443359375, -0.0005939006805419922, -3.087488948949613e-05, -0.7155839204788208, -3.933906555175781e-06], "choice_history": [80, 159, 295, 88, 138, "Fireball", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Fireball", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -20.86035919189453, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -20.860347747802734], "choice_history": [80, 159, 294]}]}
{"index": 33, "beams": [{"score": -0.02891313773942983, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -0.0084991455078125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -4.57763671875e-05, -1.71661376953125e-05, -1.3709068298339844e-05, -1.9073486328125e-06, -0.0003719329833984375, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, 0.0, -4.780292510986328e-05, 0.0, -9.5367431640625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.00045013427734375, -0.0001010894775390625, -7.05718994140625e-05, -1.9073486328125e-06, -0.0002757310576271266, 0.0, -0.00157928466796875, -0.000148773193359375, -0.0019855499267578125, -1.33514404296875e-05, -0.0013408660888671875, -3.814697265625e-06, -0.000331878662109375, -7.2479248046875e-05, -0.0004711151123046875, 0.0, -5.340576171875e-05, -0.00020599365234375, -1.9073486328125e-06, -0.0001678466796875, -1.52587890625e-05, -0.0001773834228515625, 0.0, -1.3470649719238281e-05, -5.9604644775390625e-06, -0.0008679628372192383, -1.9073486328125e-06, -0.0004271269717719406, -6.103515625e-05, -0.0014514923095703125, -0.001323699951171875, -3.814697265625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.000102996826171875, 0.0, -0.0002727508544921875, 0.0, -5.3763389587402344e-05, -1.33514404296875e-05, -0.0005435943603515625, -6.4849853515625e-05, -3.814697265625e-06, -0.0009059906005859375, -0.00022125244140625, -0.0003266324638389051, -1.1086463018727954e-05, -6.29425048828125e-05, -9.5367431640625e-06, -5.829290239489637e-05, -1.9073486328125e-05], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.835014807580585, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n        game.other_player.hero.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -5.284265518188477, -1.33514404296875e-05, -0.000125885009765625, -9.5367431640625e-06, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -3.0517578125e-05, -4.00543212890625e-05, -1.7404556274414062e-05, 0.0, -0.0001220703125, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -6.878376007080078e-05, 0.0, -0.0001125335693359375, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, -0.03497600555419922, -7.05718994140625e-05, -0.000110626220703125, 0.0, -0.0004779099836014211, 0.0, -0.0009021759033203125, -7.43865966796875e-05, -0.001003265380859375, -1.71661376953125e-05, -0.0028228759765625, -3.814697265625e-06, -0.0006542205810546875, -5.53131103515625e-05, -0.000957489013671875, -1.9073486328125e-06, -5.91278076171875e-05, -0.000202178955078125, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -0.0001773834228515625, -1.9073486328125e-06, -1.3470649719238281e-05, -4.0531158447265625e-06, -0.0008488893508911133, -1.9073486328125e-06, -0.0004023314395453781, -6.103515625e-05, -0.00179290771484375, -0.0011272430419921875, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-05, 0.0, -0.00035858154296875, 0.0, -5.5670738220214844e-05, -1.1444091796875e-05, -0.0005664825439453125, -6.67572021484375e-05, -3.814697265625e-06, -0.0009098052978515625, -0.0002231597900390625, -0.000326394074363634, -1.1086463018727954e-05, -5.91278076171875e-05, -9.5367431640625e-06, -5.900813630432822e-05, -1.71661376953125e-05, -0.15653419494628906, -7.62939453125e-06, -0.03063678741455078, -0.22367286682128906, -4.9591064453125e-05, 0.0, -0.0045070648193359375, 0.0, -0.0028476715087890625, -1.52587890625e-05, -0.017294883728027344, -9.5367431640625e-06, -0.00016641616821289062, -5.841255187988281e-06, -0.001589655876159668, 0.0, -0.0028118544723838568, -1.2040065485052764e-05, -0.005059718154370785, -1.1444091796875e-05, -0.0004978179931640625, -0.04755210876464844, -0.0001277923583984375, -0.0010020064655691385, -3.814697265625e-06, -0.000118255615234375, -0.0001506805419921875, -0.00022756346152164042, -1.537799835205078e-05], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.227994915670017, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}, {"iter": {"_type": "Name", "id": "targets"}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -6.544565200805664, -0.0004730224609375, -3.62396240234375e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -1.71661376953125e-05, -2.491474151611328e-05, -1.9073486328125e-06, -0.0001239776611328125, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -8.404254913330078e-05, 0.0, -0.000133514404296875, -1.9073486328125e-06, -2.6702880859375e-05, -7.62939453125e-06, -0.002559661865234375, -0.0005340576171875, -3.814697265625e-05, -1.33514404296875e-05, -5.7220458984375e-06, -0.01580369472503662, 0.0, -0.004197120666503906, -1.52587890625e-05, -3.4332275390625e-05, 0.0, -0.002532958984375, 0.0, -0.000438690185546875, -4.76837158203125e-05, -0.0004024505615234375, 0.0, -2.288818359375e-05, -0.0001850128173828125, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, -0.0005817413330078125, -1.9073486328125e-06, -2.1576881408691406e-05, -6.079673767089844e-06, -0.0006394386291503906, 0.0, -0.0012006927281618118, -8.96453857421875e-05, -0.000858306884765625, -9.5367431640625e-06, -6.67572021484375e-05, -0.0002307891845703125, -0.0001010894775390625, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -0.012990355491638184, 0.0, -0.012889862060546875, -1.9073486328125e-05, -8.58306884765625e-05, -5.7220458984375e-06, 0.0, -0.0050411224365234375, -5.7220458984375e-06, -0.0001811981201171875, 0.0, -0.0002709627151489258, -4.172325134277344e-06, -0.20290005207061768, 0.0, -0.012783050537109375, -7.62939453125e-06, -0.011189460754394531, -6.67572021484375e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.00014698505401611328, -3.814697265625e-06, -0.2953004837036133, -7.62939453125e-06, -0.02061939239501953, -1.9073486328125e-06, -0.00014495849609375, -0.035172462463378906, -7.62939453125e-06, -3.62396240234375e-05, -1.71661376953125e-05, -2.6702880859375e-05, 0.0, -0.0006427764892578125, 0.0, -5.102157228975557e-05, -1.33514404296875e-05, -0.033225297927856445, -6.4849853515625e-05, -5.7220458984375e-06, -0.0009632110595703125, -0.0002899169921875, -0.0007948690326884389, -1.3828277587890625e-05, -8.20159912109375e-05, -5.7220458984375e-06, -4.7683497541584074e-05, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 19, 160, "targets", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.347755548758862, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -5.284265518188477, -1.33514404296875e-05, -0.000125885009765625, -9.5367431640625e-06, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -3.0517578125e-05, -4.00543212890625e-05, -1.7404556274414062e-05, 0.0, -0.0001220703125, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -6.878376007080078e-05, 0.0, -0.0001125335693359375, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, -0.03497600555419922, -7.05718994140625e-05, -0.000110626220703125, 0.0, -0.0004779099836014211, 0.0, -0.0009021759033203125, -7.43865966796875e-05, -0.001003265380859375, -1.71661376953125e-05, -0.0028228759765625, -3.814697265625e-06, -0.0006542205810546875, -5.53131103515625e-05, -0.000957489013671875, -1.9073486328125e-06, -5.91278076171875e-05, -0.000202178955078125, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -0.0001773834228515625, -1.9073486328125e-06, -1.3470649719238281e-05, -4.0531158447265625e-06, -0.0008488893508911133, -1.9073486328125e-06, -0.0004023314395453781, -6.103515625e-05, -0.00179290771484375, -0.0011272430419921875, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-05, 0.0, -0.00035858154296875, 0.0, -5.5670738220214844e-05, -1.1444091796875e-05, -0.0005664825439453125, -6.67572021484375e-05, -3.814697265625e-06, -0.0009098052978515625, -0.0002231597900390625, -0.000326394074363634, -1.1086463018727954e-05, -5.91278076171875e-05, -9.5367431640625e-06, -5.900813630432822e-05, -1.71661376953125e-05, -0.15653419494628906, -7.62939453125e-06, -0.03063678741455078, -1.6358137130737305, -7.62939453125e-05, 0.0, -0.1187753677368164, 0.0, -0.0018434524536132812, 0.0, -0.06398117542266846, 0.0], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.599932649304712, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player:\n            minion.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -0.0084991455078125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -4.57763671875e-05, -1.71661376953125e-05, -1.3709068298339844e-05, -1.9073486328125e-06, -0.0003719329833984375, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, 0.0, -4.780292510986328e-05, 0.0, -9.5367431640625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.00045013427734375, -0.0001010894775390625, -7.05718994140625e-05, -1.9073486328125e-06, -0.0002757310576271266, 0.0, -6.849617004394531, 0.0, -0.4997730255126953, -3.814697265625e-06, -0.009786844253540039, 0.0, -0.1175910234451294, 0.0, -0.06521224975585938, -0.0005092620849609375, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -0.02008819580078125, 0.0, -8.368492126464844e-05, -7.62939453125e-06, -0.0196305513381958, -5.7220458984375e-05, -1.9073486328125e-06, -0.0008563995361328125, -0.0002689361572265625, -0.0007215540390461683, -1.7762184143066406e-05, -8.7738037109375e-05, -3.814697265625e-06, -4.4703199819196016e-05, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.7188298785222145, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -5.284265518188477, -1.33514404296875e-05, -0.000125885009765625, -9.5367431640625e-06, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -3.0517578125e-05, -4.00543212890625e-05, -1.7404556274414062e-05, 0.0, -0.0001220703125, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -6.878376007080078e-05, 0.0, -0.0001125335693359375, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, -0.03497600555419922, -7.05718994140625e-05, -0.000110626220703125, 0.0, -0.0004779099836014211, 0.0, -0.0009021759033203125, -7.43865966796875e-05, -0.001003265380859375, -1.71661376953125e-05, -0.0028228759765625, -3.814697265625e-06, -0.0006542205810546875, -5.53131103515625e-05, -0.000957489013671875, -1.9073486328125e-06, -5.91278076171875e-05, -0.000202178955078125, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -0.0001773834228515625, -1.9073486328125e-06, -1.3470649719238281e-05, -4.0531158447265625e-06, -0.0008488893508911133, -1.9073486328125e-06, -0.0004023314395453781, -6.103515625e-05, -0.00179290771484375, -0.0011272430419921875, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-05, 0.0, -0.00035858154296875, 0.0, -5.5670738220214844e-05, -1.1444091796875e-05, -0.0005664825439453125, -6.67572021484375e-05, -3.814697265625e-06, -0.0009098052978515625, -0.0002231597900390625, -0.000326394074363634, -1.1086463018727954e-05, -5.91278076171875e-05, -9.5367431640625e-06, -5.900813630432822e-05, -1.71661376953125e-05, -2.0344038009643555, -0.0027103424072265625, -0.0001239776611328125, 0.0, -0.00015723705291748047, 0.0, -0.2666950225830078, 0.0, -0.0065059661865234375, 0.0, -0.00018310546875, 0.0, -4.017353057861328e-05, -1.1920928244535389e-07, -0.0006389617919921875, 0.0, -0.005291387904435396, -2.09808349609375e-05, -0.00012969970703125, -0.000293731689453125, -3.814697265625e-06, -9.5367431640625e-06, -2.86102294921875e-05, -1.1444091796875e-05, 0.0, -0.018968582153320312, 0.0, -9.739398956298828e-05, -9.5367431640625e-06, -0.03968524932861328, -7.82012939453125e-05, -1.9073486328125e-06, -0.0014209747314453125, -0.000370025634765625, -0.0007433550781570375, -1.9788742065429688e-05, -2.86102294921875e-05, -3.814697265625e-06, -5.61473352718167e-05, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.982409350442133, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(4), self)\n            for minion in copy.copy(game.other_player.minions):\n                minion.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -0.0084991455078125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -4.57763671875e-05, -1.71661376953125e-05, -1.3709068298339844e-05, -1.9073486328125e-06, -0.0003719329833984375, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, 0.0, -4.780292510986328e-05, 0.0, -9.5367431640625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.00045013427734375, -0.0001010894775390625, -7.05718994140625e-05, -1.9073486328125e-06, -0.0002757310576271266, 0.0, -0.00157928466796875, -0.000148773193359375, -0.0019855499267578125, -1.33514404296875e-05, -0.0013408660888671875, -3.814697265625e-06, -0.000331878662109375, -7.2479248046875e-05, -0.0004711151123046875, 0.0, -5.340576171875e-05, -0.00020599365234375, -1.9073486328125e-06, -0.0001678466796875, -1.52587890625e-05, -0.0001773834228515625, 0.0, -1.3470649719238281e-05, -5.9604644775390625e-06, -0.0008679628372192383, -1.9073486328125e-06, -0.0004271269717719406, -6.103515625e-05, -6.994964599609375, -0.11117935180664062, -1.71661376953125e-05, -2.288818359375e-05, -2.6702880859375e-05, -2.47955322265625e-05, 0.0, -0.014392852783203125, 0.0, -0.0002703666687011719, -2.6702880859375e-05, -0.000263214111328125, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006885528564453125, -0.000392913818359375, -0.00038850100827403367, -8.70227722771233e-06, -0.0001678466796875, -3.814697265625e-06, -5.996143590891734e-05, -3.24249267578125e-05, -0.6914072036743164, -5.91278076171875e-05, -4.00543212890625e-05, 0.0, -0.00014579074922949076, 0.0, -0.13214397430419922, -0.00072479248046875, -0.000225067138671875, -1.9073486328125e-06, -0.001865386962890625, -1.9073486328125e-06, -0.0005133152008056641, -4.57763671875e-05, -0.0004749298095703125, 0.0, -3.4332275390625e-05, -0.0005321502685546875, -1.9073486328125e-06, -9.72747802734375e-05, -5.7220458984375e-06, -0.000244140625, 0.0, -2.1219253540039062e-05, -5.9604644775390625e-06, -0.0005513429641723633, 0.0, -0.000906825065612793, -5.340576171875e-05, -0.0015888214111328125, -0.0008487701416015625, -3.814697265625e-06, -1.33514404296875e-05, -1.52587890625e-05, -8.0108642578125e-05, 0.0, -0.0005512237548828125, 0.0, -5.6743621826171875e-05, -1.52587890625e-05, -0.00081634521484375, -7.62939453125e-05, -3.814697265625e-06, -0.001068115234375, -0.0002956390380859375, -0.0003319969982840121, -1.1086463018727954e-05, -3.4332275390625e-05, -7.62939453125e-06, -6.878329440951347e-05, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -8.222220181233745, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -8.21552848815918, -0.0003032684326171875, -7.62939453125e-06, -2.09808349609375e-05, -9.5367431640625e-06, -1.1444091796875e-05, 0.0, -3.62396240234375e-05, -3.4332275390625e-05, -4.291534423828125e-06, -1.9073486328125e-06, -0.0006847381591796875, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.8848648071289062e-05, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>"]}, {"score": -8.446309565266318, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "hole2": "MAGE", "_type": "Template11", "hole1": 7, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 4}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -8.24862289428711, -0.000972747802734375, -1.1801649634435307e-05, -1.33514404296875e-05, -3.671578815556131e-05, 0.0, -0.00054168701171875, 0.0, -4.971027374267578e-05, 0.0, -0.000274658203125, -5.7220458984375e-06, -4.76837158203125e-05, 0.0, -9.918212890625e-05, 0.0, -0.02956414222717285, -0.0005130767822265625, -0.00037384033203125, 0.0, -0.09907734394073486, -2.3841855067985307e-07, -0.0346832275390625, -0.0016384124755859375, -0.007534980773925781, 0.0, -0.016388654708862305, -1.33514404296875e-05, -0.0030975341796875, 0.0, -9.5367431640625e-05, -0.0004329681396484375, -1.71661376953125e-05, -5.5312892072834074e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -8.710888095448347, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in range(0, player.effective_spell_damage(4)):\n            targets = copy.copy(game.other_player.minions)\n            targets.extend(game.current_player.minions)\n            for minion in targets:\n                minion.damage(player.effective_spell_damage(4), self)\n            game.other_player.hero.damage(player.effective_spell_damage(4),\n                self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Num", "n": 0}, {"hole0": 4, "_type": "Template71"}], "_type": "Call", "func": {"_type": "Name", "id": "range"}}, "body": [{"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}, {"iter": {"_type": "Name", "id": "targets"}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"_type": "Expr", "value": {"args": [{"hole0": 4, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -0.0020437240600585938, -3.4332275390625e-05, -0.0002498626708984375, 0.0, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -9.775153557711747e-06, -8.34461570775602e-06, -0.0084991455078125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -4.57763671875e-05, -1.71661376953125e-05, -1.3709068298339844e-05, -1.9073486328125e-06, -0.0003719329833984375, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, 0.0, -4.780292510986328e-05, 0.0, -9.5367431640625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -7.62939453125e-06, -0.00045013427734375, -0.0001010894775390625, -7.05718994140625e-05, -1.9073486328125e-06, -0.0002757310576271266, 0.0, -0.00157928466796875, -0.000148773193359375, -6.2515411376953125, -1.9073486328125e-05, -0.3624889850616455, -0.0001697540283203125, -0.0001392364501953125, -0.0012683868408203125, -2.86102294921875e-05, -0.007757588289678097, -6.4849853515625e-05, -0.41141223907470703, -0.007770538330078125, -0.0010743190068751574, -1.919269561767578e-05, -0.12120628356933594, -0.0004711151123046875, -3.814697265625e-06, -3.814697265625e-06, -1.33514404296875e-05, -0.0001583099365234375, -0.029143333435058594, 0.0, -0.002918243408203125, -3.24249267578125e-05, -3.62396240234375e-05, 0.0, -0.0029010772705078125, 0.0, -0.0003261566162109375, -6.4849853515625e-05, -0.0005855560302734375, 0.0, -2.47955322265625e-05, -0.000247955322265625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -0.0005130767822265625, -1.9073486328125e-06, -2.1457672119140625e-05, -6.079673767089844e-06, -0.0006222724914550781, 0.0, -0.0010776566341519356, -5.7220458984375e-05, -3.814697265625e-05, -1.52587890625e-05, -2.47955322265625e-05, -2.6702880859375e-05, -9.5367431640625e-05, 0.0, -0.0001430511474609375, -1.9073486328125e-06, -0.02218186855316162, -1.9073486328125e-06, -0.021170616149902344, -1.1444091796875e-05, -0.0001239776611328125, -9.5367431640625e-06, 0.0, -0.0039119720458984375, -1.9073486328125e-06, -0.00041961669921875, 0.0, -0.00041413307189941406, -2.1457672119140625e-06, -0.3313056230545044, 0.0, -0.019165992736816406, -5.7220458984375e-06, -0.052865028381347656, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -8.606909977970645e-05, -1.9073486328125e-06, -0.6593685150146484, -1.1444091796875e-05, -0.021375656127929688, -1.9073486328125e-06, -9.1552734375e-05, -0.038875579833984375, -5.7220458984375e-06, -3.62396240234375e-05, -1.52587890625e-05, -2.47955322265625e-05, 0.0, -0.0021915435791015625, 0.0, -8.51154254633002e-05, -1.71661376953125e-05, -0.03461480140686035, -5.340576171875e-05, -5.7220458984375e-06, -0.0009174346923828125, -0.0003108978271484375, -0.0008364696986973286, -1.3828277587890625e-05, -8.20159912109375e-05, -5.7220458984375e-06, -4.625297151505947e-05, -1.33514404296875e-05, -0.012960433959960938, -1.9073486328125e-06, -0.0010280609130859375, -0.07674407958984375, -9.5367431640625e-06, 0.0, -0.007472038269042969, 0.0, -0.02651691436767578, -7.62939453125e-06, -0.0029163360595703125, -5.7220458984375e-06, -0.00016057489847298712, -3.933906555175781e-06, -0.0017760992050170898, 0.0, -0.002862319815903902, -1.4781842764932662e-05, -0.003949165344238281, -9.5367431640625e-06, -9.918212890625e-05, -0.1403045654296875, -7.82012939453125e-05, -0.0010165551211684942, -3.814697265625e-06, -8.96453857421875e-05, -0.0001049041748046875, -0.0001909676648210734, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 19, 160, "range", "<EOS>", 283, 47, 165, "0", "<EOS>", 63, 253, "4", "<EOS>", 298, 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 19, 160, "targets", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "4", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -9.167899845189815, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -8.869068145751953, -0.20475101470947266, -0.08131911605596542, -1.7642974853515625e-05, -0.0010596283245831728, 0.0, -0.008670806884765625, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>"]}, {"score": -9.176134392906526, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 4}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -8.798242568969727, -0.0026798248291015625, -0.3270092010498047, -0.000843048095703125, -3.4332275390625e-05, 0.0, -0.008144259452819824, 0.0, -0.00205230712890625, 0.0, -0.03339831903576851, -5.304672595229931e-05, -0.0005741119384765625, -5.7220458984375e-06, -9.5367431640625e-06, -7.069022103678435e-05, -1.1563301086425781e-05], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -10.11667597088671, "inferred_code": "class Flamestrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flamestrike', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "model_output": {"body": [{"body": [{"hole0": "Flamestrike", "_type": "Template15", "hole1": 7, "hole2": "MAGE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 4}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Flamestrike"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -8.20159912109375e-05, -8.96453857421875e-05, -2.9802276912960224e-06, -3.4451219107722864e-05, -0.0001506805419921875, 0.0, -5.7220458984375e-06, -9.238719940185547e-05, -9.1552734375e-05, -9.5367431640625e-06, -6.29425048828125e-05, -0.00052642822265625, -9.34600830078125e-05, -1.0013530300057027e-05, -5.841255187988281e-06, -4.219927723170258e-05, -1.1920928244535389e-07, -0.000141143798828125, -4.2676914745243266e-05, -8.798242568969727, -0.0026798248291015625, -1.306356430053711, 0.0, -0.0022802352905273438, -4.38690185546875e-05, -0.001338958740234375, 0.0, -6.103515625e-05, -0.0025730133056640625, -1.9073486328125e-05, -6.937889702385291e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Flamestrike", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Flamestrike", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -19.758419036865234, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -19.757570266723633], "choice_history": [80, 159, 294]}, {"score": -20.735601011663675, "inferred_code": "self.target.add_buff(Buff(()))\n", "model_output": {"body": [{"hole0": "", "_type": "Template50"}], "_type": "Module"}, "score_history": [-9.5367431640625e-05, -0.0007534027099609375, -0.0006732940673828125, -14.119379997253418, -6.581915378570557, -0.032783571630716324], "choice_history": [80, 159, 295, 117, 226, "<EOS>"]}]}
{"index": 34, "beams": [{"score": -0.09446595551958126, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "Adjacent"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -0.0074443817138671875, -0.004505515098571777, -0.0012359619140625, -7.62939453125e-06, -3.3378546504536644e-06, -1.1920896213268861e-05, -4.911416181130335e-05, -2.503394853192731e-06, -0.0023541427217423916, -3.576278118089249e-07, -3.24249267578125e-05, -2.288818359375e-05, -0.000240325927734375, -0.00018310546875, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.0017049312591552734, -1.537799835205078e-05, -7.43865966796875e-05, -0.0018873214721679688, -0.0002803802490234375, -0.014221892692148685, -2.0265579223632812e-06, -0.010224342346191406, -3.814697265625e-06, -0.0046654934994876385, -6.425351602956653e-05, -0.0019357566488906741, -0.002765944227576256, -0.003310834290459752], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"]}, {"score": -4.261947523683148, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "_type": "Template6", "hole1": 2, "hole2": "SHAMAN"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "Adjacent"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -4.184754371643066, -0.0005035400390625, -2.50339189733495e-06, -3.099434252362698e-05, -6.532669067382812e-05, -2.0265579223632812e-06, -0.000240683279116638, 0.0, -0.0009114742279052734, 0.0, -0.007160186767578125, -9.5367431640625e-05, -5.245195097813848e-06, -8.821463779895566e-06, -4.315317710279487e-05, -2.1457672119140625e-06, -0.00195825076662004, -2.384185791015625e-06, -2.47955322265625e-05, -2.288818359375e-05, -0.0001583099365234375, -0.000133514404296875, -1.71661376953125e-05, -1.71661376953125e-05, 0.0, -0.0009601116180419922, -7.867813110351562e-06, -9.5367431640625e-05, -0.003162384033203125, -0.0004405975341796875, -0.02189691737294197, -2.1457672119140625e-06, -0.02553558349609375, -3.814697265625e-06, -0.00449395040050149, -5.805459659313783e-05, -0.002170478692278266, -0.0024060942232608795, -0.004311965312808752], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"]}, {"score": -4.800558835032689, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM, minion_type=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(0, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "minion_type", "hole2": "SHAMAN", "hole6": "TOTEM", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 2, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 0, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -4.074942588806152, -0.0004940032958984375, -3.480850500636734e-05, -1.9907896785298362e-05, -0.0001836900773923844, -5.7220458984375e-06, -0.003988734446465969, -3.814697265625e-06, -0.0006110668182373047, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.003057718276977539, -5.7220458984375e-06, -5.14984130859375e-05, -1.1444091796875e-05, -0.0001392364501953125, -3.814697265625e-06, -0.10337352752685547, 0.0, -0.3126899003982544, 0.0, -0.000396728515625, -1.52587890625e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.2985200881958008, -0.000324249267578125, -0.0005993238883093, -1.0013580322265625e-05, -0.0003954086860176176, 0.0], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "0", "<EOS>", "3", "<EOS>"]}, {"score": -4.92570983123619, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(0), MinionSelector(\n            Adjacent()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 0, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "Adjacent"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -0.0074443817138671875, -0.004505515098571777, -0.0012359619140625, -7.62939453125e-06, -3.3378546504536644e-06, -1.1920896213268861e-05, -4.911416181130335e-05, -2.503394853192731e-06, -0.0023541427217423916, -3.576278118089249e-07, -3.24249267578125e-05, -2.288818359375e-05, -0.000240325927734375, -0.00018310546875, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.0017049312591552734, -1.537799835205078e-05, -7.43865966796875e-05, -0.0018873214721679688, -0.0002803802490234375, -4.8523454666137695, -4.291534423828125e-05, -0.0036907196044921875, -3.814697265625e-06, -0.003412604331970215, -5.9723843151004985e-05, -0.001623269054107368, -0.003924298100173473, -0.0033354226034134626], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "0", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"]}, {"score": -4.942403418865638, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -0.0074443817138671875, -0.004505515098571777, -0.0012359619140625, -7.62939453125e-06, -3.3378546504536644e-06, -1.1920896213268861e-05, -4.911416181130335e-05, -2.503394853192731e-06, -0.0023541427217423916, -3.576278118089249e-07, -3.24249267578125e-05, -2.288818359375e-05, -0.000240325927734375, -0.00018310546875, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.0017049312591552734, -1.537799835205078e-05, -7.43865966796875e-05, -0.0018873214721679688, -0.0002803802490234375, -0.014221892692148685, -2.0265579223632812e-06, -4.6186323165893555, -0.016936302185058594, -1.33514404296875e-05, -1.9073486328125e-06, -0.00039780125371180475, -0.00067138671875, -4.768370445162873e-07, -0.01215362548828125, -0.00275421142578125, -5.340576171875e-05, -0.0008640289306640625, -5.7220458984375e-06, -0.017052054405212402, -0.0001569986343383789, -9.930133819580078e-05, -0.0001659393310546875, -0.0001125335693359375, -1.71661376953125e-05, -0.0001964569091796875, 0.0, -9.34600830078125e-05, -2.110004425048828e-05, -0.20046615600585938, -4.220008850097656e-05], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"]}, {"score": -5.828578004378215, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "Adjacent"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -5.306438446044922, -0.00032448768615722656, -0.43822765350341797, -9.5367431640625e-06, -4.172316494077677e-06, -9.298297300119884e-06, -6.997576565481722e-05, -7.152555099310121e-07, -0.0026620584540069103, -2.3841855067985307e-07, -3.0517578125e-05, -2.86102294921875e-05, -0.0002269744873046875, -0.000194549560546875, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -0.0015177726745605469, -1.3470649719238281e-05, -7.62939453125e-05, -0.0020170211791992188, -0.0003070831298828125, -0.015169904567301273, -2.0265579223632812e-06, -0.010968208312988281, -3.814697265625e-06, -0.004898309241980314, -6.186933751450852e-05, -0.0019282610155642033, -0.002722142729908228, -0.003450909163802862], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"]}, {"score": -5.895248783878515, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            AdjacentTotem()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "AdjacentTotem"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -0.0074443817138671875, -0.004505515098571777, -0.0012359619140625, -7.62939453125e-06, -3.3378546504536644e-06, -1.1920896213268861e-05, -4.911416181130335e-05, -2.503394853192731e-06, -0.0023541427217423916, -3.576278118089249e-07, -3.24249267578125e-05, -2.288818359375e-05, -0.000240325927734375, -0.00018310546875, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.0017049312591552734, -1.537799835205078e-05, -7.43865966796875e-05, -0.0018873214721679688, -0.0002803802490234375, -0.014221892692148685, -2.0265579223632812e-06, -0.010224342346191406, -3.814697265625e-06, -0.0046654934994876385, -6.425351602956653e-05, -0.0019357566488906741, -0.002765944227576256, -5.766879081726074, -0.03721458092331886], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Adjacent", "Totem", "<EOS>"]}, {"score": -5.918763188700034, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM, minion_type=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "minion_type", "hole2": "SHAMAN", "hole6": "TOTEM", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 2, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "Adjacent"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -4.074942588806152, -0.0004940032958984375, -3.480850500636734e-05, -1.9907896785298362e-05, -0.0001836900773923844, -5.7220458984375e-06, -0.003988734446465969, -3.814697265625e-06, -0.0006110668182373047, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.003057718276977539, -5.7220458984375e-06, -5.14984130859375e-05, -1.1444091796875e-05, -0.0001392364501953125, -3.814697265625e-06, -0.10337352752685547, 0.0, -0.3126899003982544, 0.0, -0.000396728515625, -1.52587890625e-05, -7.43865966796875e-05, -5.7220458984375e-06, -1.3728160858154297, -3.814697265625e-05, -7.414542778860778e-05, -5.245207830739673e-06, -0.0001115784834837541, -1.1920928244535389e-07, -0.001417040592059493, 0.0, -2.6702880859375e-05, -4.1961669921875e-05, -0.000507354736328125, -0.0001888275146484375, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -0.0017871856689453125, -1.3470649719238281e-05, -6.866455078125e-05, -0.0016613006591796875, -0.0002651214599609375, -0.016794566065073013, -3.933906555175781e-06, -0.010189056396484375, -5.7220458984375e-06, -0.004422544967383146, -5.519378464668989e-05, -0.0015221001813188195, -0.0031430183444172144, -0.0028752766083925962], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"]}, {"score": -6.154256244723683, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), TurnEnded(Adjacent\n            ()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "TurnEnded", "_type": "Template69", "hole1": "Adjacent"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -0.0074443817138671875, -0.004505515098571777, -0.0012359619140625, -7.62939453125e-06, -3.3378546504536644e-06, -1.1920896213268861e-05, -4.911416181130335e-05, -2.503394853192731e-06, -0.0023541427217423916, -3.576278118089249e-07, -3.24249267578125e-05, -2.288818359375e-05, -0.000240325927734375, -0.00018310546875, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.0017049312591552734, -1.537799835205078e-05, -7.43865966796875e-05, -0.0018873214721679688, -0.0002803802490234375, -0.014221892692148685, -2.0265579223632812e-06, -0.010224342346191406, -3.814697265625e-06, -6.028059959411621, -0.03338167443871498, -0.009834801778197289, -0.0008412534953095019, -0.0004148822627030313], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 61, 250, "Turn", "Ended", "<EOS>", "Adjacent", "<EOS>"]}, {"score": -6.429496800106222, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEMDamage)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "TOTEMDamage", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "Adjacent"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -0.0074443817138671875, -6.3356804847717285, -0.00034427232458256185, -0.0005550384521484375, -2.6702880859375e-05, -2.3841830625315197e-06, -1.990787495742552e-05, -4.9471735110273585e-05, -2.741813204920618e-06, -0.0028212033212184906, -5.960462772236497e-07, -2.09808349609375e-05, -3.4332275390625e-05, -0.000240325927734375, -0.0002155303955078125, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -0.001139998435974121, -1.3470649719238281e-05, -7.43865966796875e-05, -0.00203704833984375, -0.0003719329833984375, -0.016015583649277687, -2.0265579223632812e-06, -0.011235237121582031, -3.814697265625e-06, -0.0055619473569095135, -6.413435039576143e-05, -0.0019779971335083246, -0.0028634387999773026, -0.0034637460485100746], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "Damage", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"]}, {"score": -6.513896567105462, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            IsType(MINION_TYPE.TOTEM)))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -0.0074443817138671875, -0.004505515098571777, -0.0012359619140625, -7.62939453125e-06, -3.3378546504536644e-06, -1.1920896213268861e-05, -4.911416181130335e-05, -2.503394853192731e-06, -0.0023541427217423916, -3.576278118089249e-07, -3.24249267578125e-05, -2.288818359375e-05, -0.000240325927734375, -0.00018310546875, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.0017049312591552734, -1.537799835205078e-05, -7.43865966796875e-05, -0.0018873214721679688, -0.0002803802490234375, -0.014221892692148685, -2.0265579223632812e-06, -4.6186323165893555, -0.016936302185058594, -1.33514404296875e-05, -1.9073486328125e-06, -0.00039780125371180475, -0.00067138671875, -4.768370445162873e-07, -0.01215362548828125, -0.00275421142578125, -5.340576171875e-05, -0.0008640289306640625, -5.7220458984375e-06, -0.017052054405212402, -0.0001569986343383789, -9.930133819580078e-05, -0.0001659393310546875, -0.0001125335693359375, -1.71661376953125e-05, -0.0001964569091796875, 0.0, -9.34600830078125e-05, -2.110004425048828e-05, -1.771946907043457, -5.459729072754271e-05], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>"]}, {"score": -7.538980846552704, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, minion_type=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(0, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "minion_type", "hole2": "SHAMAN", "hole6": "BEAST", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 2, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 0, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -4.074942588806152, -0.0004940032958984375, -3.480850500636734e-05, -1.9907896785298362e-05, -0.0001836900773923844, -5.7220458984375e-06, -0.003988734446465969, -3.814697265625e-06, -0.0006110668182373047, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.003057718276977539, -5.7220458984375e-06, -5.14984130859375e-05, -1.1444091796875e-05, -0.0001392364501953125, -3.814697265625e-06, -2.922490119934082, 0.0, -0.16443157196044922, 0.0, -0.0004367828369140625, -1.1444091796875e-05, -4.1961669921875e-05, -5.7220458984375e-06, -0.36591529846191406, -0.0004329681396484375, -0.0006360175902955234, -1.0013580322265625e-05, -0.00041471869917586446, 0.0], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "0", "<EOS>", "3", "<EOS>"]}, {"score": -7.590152212566181, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "_type": "Template15", "hole1": 2, "hole2": "SHAMAN"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "Adjacent"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -7.522140979766846, -0.000644683837890625, -1.2636104656849056e-05, -6.246560951694846e-05, -8.141993748722598e-05, -5.841255187988281e-06, -0.0007111966260708869, -1.9073486328125e-06, -0.0009405612945556641, -1.9073486328125e-06, -0.00147247314453125, -0.0001678466796875, -3.0874729418428615e-05, -5.125993993715383e-06, -4.959087527822703e-05, -2.384185791015625e-06, -0.0016353130340576172, -1.2874602361989673e-05, -1.9073486328125e-05, -1.9073486328125e-05, -0.000278472900390625, -0.00022125244140625, -1.33514404296875e-05, -1.33514404296875e-05, 0.0, -0.0010172128677368164, -7.867813110351562e-06, -0.000110626220703125, -0.0029468536376953125, -0.0004062652587890625, -0.021597422659397125, -2.1457672119140625e-06, -0.020874977111816406, -3.814697265625e-06, -0.004699466284364462, -6.258436769712716e-05, -0.0023972932249307632, -0.002208252204582095, -0.005030897445976734], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Adjacent", "<EOS>"]}, {"score": -7.701222061713281, "inferred_code": "class FlametongueTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flametongue Totem', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Flametongue Totem", "hole2": "SHAMAN", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FlametongueTotem"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -2.0503786799963564e-05, -3.8146954466355965e-06, -1.1920922133867862e-06, -2.288818359375e-05, -3.4332275390625e-05, 0.0, 0.0, -6.103515625e-05, -3.898143768310547e-05, -3.4332275390625e-05, -0.034638404846191406, -5.7220458984375e-05, -5.960462772236497e-07, -2.6345227524871007e-05, -0.00020611286163330078, -1.9073486328125e-06, -4.0650342270964757e-05, 0.0, -0.00017023086547851562, 0.0, -0.0003901719755958766, -3.814697265625e-06, -0.0006809234619140625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0007039308547973633, -5.7220458984375e-06, -0.0074443817138671875, -0.004505515098571777, -0.0012359619140625, -7.62939453125e-06, -3.3378546504536644e-06, -1.1920896213268861e-05, -4.911416181130335e-05, -2.503394853192731e-06, -7.621561527252197, -4.172325134277344e-06, -0.024453163146972656, -3.4332275390625e-05, -0.004677414894104004, -3.457069396972656e-05], "choice_history": [80, 159, 295, 88, 138, "Flametongue", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Flametongue", " ", "Totem", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "0", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -22.357040405273438, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-06, 0.0, -22.35703468322754], "choice_history": [80, 159, 294]}]}
{"index": 35, "beams": [{"score": -0.1126454995981021, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frog"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 0, "_type": "Template65", "hole1": 1, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -0.00473785400390625, -7.62939453125e-06, -1.6570085790590383e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.00014495849609375, -2.47955322265625e-05, -4.38690185546875e-05, -0.0003223419189453125, -2.09808349609375e-05, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -4.649161837733118e-06, 0.0, -1.3470649719238281e-05, 0.0, -0.004502296447753906, -1.1444091796875e-05, -2.47955322265625e-05, -9.536738616588991e-07, -0.000244140625, 0.0, -3.62396240234375e-05, -0.00041043738019652665, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -4.9591064453125e-05, -2.503394853192731e-06, -0.0001773834228515625, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.000152587890625, -1.9073486328125e-06, -8.0108642578125e-05, -5.7220458984375e-06, -6.115436553955078e-05, 0.0, -0.001102447509765625, -0.00012969970703125, -3.814697265625e-06, -2.8848648071289062e-05, -1.1444091796875e-05, -0.000247955322265625, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -3.62396240234375e-05, -2.491474151611328e-05, -0.000171661376953125, -1.1563301086425781e-05, -0.05458641052246094, -4.9591064453125e-05, -0.00013744831085205078, -2.0265579223632812e-06, -1.71661376953125e-05, -0.0003681182861328125, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.022057652473449707, -3.814697265625e-06, -3.0517578125e-05, -0.012400627136230469, -0.0025129318237304688, -2.2172682292875834e-05, -9.42901024245657e-05, -7.0331254391931e-05, 0.0, -0.005885720252990723, -4.76837158203125e-05, -0.0008649826049804688, -1.33514404296875e-05, -0.000152587890625, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Frog", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -3.1923935357756363, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, taunt=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frog"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "_type": "Template23", "hole1": 1, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -0.00473785400390625, -7.62939453125e-06, -1.6570085790590383e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.00014495849609375, -2.47955322265625e-05, -4.38690185546875e-05, -0.0003223419189453125, -2.09808349609375e-05, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -4.649161837733118e-06, 0.0, -1.3470649719238281e-05, 0.0, -0.004502296447753906, -1.1444091796875e-05, -2.47955322265625e-05, -9.536738616588991e-07, -0.000244140625, 0.0, -3.62396240234375e-05, -0.00041043738019652665, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -4.9591064453125e-05, -2.503394853192731e-06, -0.0001773834228515625, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.000152587890625, -1.9073486328125e-06, -8.0108642578125e-05, -5.7220458984375e-06, -6.115436553955078e-05, 0.0, -0.001102447509765625, -0.00012969970703125, -3.814697265625e-06, -2.8848648071289062e-05, -1.1444091796875e-05, -0.000247955322265625, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -3.62396240234375e-05, -2.491474151611328e-05, -0.000171661376953125, -1.1563301086425781e-05, -2.9425344467163086, -9.5367431640625e-06, -6.6756979322235566e-06, 0.0, -0.00010311084042768925, 0.0, -0.23635053634643555, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -2.110004425048828e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Frog", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.248910178167762, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, _):\n        return Minion(0, 1, taunt=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frog"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "_"}], "_type": "arguments"}, "body": [{"hole0": 0, "_type": "Template65", "hole1": 1, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -0.00473785400390625, -7.62939453125e-06, -1.6570085790590383e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.00014495849609375, -2.47955322265625e-05, -4.38690185546875e-05, -0.0003223419189453125, -2.09808349609375e-05, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -4.649161837733118e-06, 0.0, -1.3470649719238281e-05, 0.0, -0.004502296447753906, -1.1444091796875e-05, -2.47955322265625e-05, -9.536738616588991e-07, -0.000244140625, 0.0, -3.62396240234375e-05, -0.00041043738019652665, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -4.9591064453125e-05, -2.503394853192731e-06, -0.0001773834228515625, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.000152587890625, -1.9073486328125e-06, -8.0108642578125e-05, -5.7220458984375e-06, -6.115436553955078e-05, 0.0, -0.001102447509765625, -0.00012969970703125, -3.814697265625e-06, -2.8848648071289062e-05, -1.1444091796875e-05, -0.000247955322265625, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -3.62396240234375e-05, -2.491474151611328e-05, -0.000171661376953125, -1.1563301086425781e-05, -0.05458641052246094, -4.9591064453125e-05, -0.00013744831085205078, -2.0265579223632812e-06, -1.71661376953125e-05, -0.0003681182861328125, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.934488296508789, -2.2649765014648438e-06, -0.0004558563232421875, -0.23623085021972656, -0.002536773681640625, -6.556489552167477e-06, -0.00012396997772157192, -6.949655653443187e-05, 0.0, -0.005273103713989258, -3.0517578125e-05, -0.0009593963623046875, -1.33514404296875e-05, -0.00022900104522705078, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Frog", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "_", "<EOS>", 295, 120, 247, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.09188079277925, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, windfury=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frog"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "_type": "Template23", "hole1": 1, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -0.00473785400390625, -7.62939453125e-06, -1.6570085790590383e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.00014495849609375, -2.47955322265625e-05, -4.38690185546875e-05, -0.0003223419189453125, -2.09808349609375e-05, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -4.649161837733118e-06, 0.0, -1.3470649719238281e-05, 0.0, -0.004502296447753906, -1.1444091796875e-05, -2.47955322265625e-05, -9.536738616588991e-07, -0.000244140625, 0.0, -3.62396240234375e-05, -0.00041043738019652665, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -4.9591064453125e-05, -2.503394853192731e-06, -0.0001773834228515625, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.000152587890625, -1.9073486328125e-06, -8.0108642578125e-05, -5.7220458984375e-06, -6.115436553955078e-05, 0.0, -0.001102447509765625, -0.00012969970703125, -3.814697265625e-06, -2.8848648071289062e-05, -1.1444091796875e-05, -0.000247955322265625, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -3.62396240234375e-05, -2.491474151611328e-05, -0.000171661376953125, -1.1563301086425781e-05, -2.9425344467163086, -9.5367431640625e-06, -6.6756979322235566e-06, 0.0, -0.00010311084042768925, 0.0, -2.1340479850769043, -5.960462772236497e-07, -0.0018329620361328125, -1.9073486328125e-06, -1.9311904907226562e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Frog", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "0", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.49169563691089, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frog"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "_type": "Template23", "hole1": 1, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -0.00473785400390625, -7.62939453125e-06, -1.6570085790590383e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -2.09808349609375e-05, -0.00014495849609375, -2.47955322265625e-05, -4.38690185546875e-05, -0.0003223419189453125, -2.09808349609375e-05, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -4.649161837733118e-06, 0.0, -1.3470649719238281e-05, 0.0, -0.004502296447753906, -1.1444091796875e-05, -2.47955322265625e-05, -9.536738616588991e-07, -0.000244140625, 0.0, -3.62396240234375e-05, -0.00041043738019652665, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -4.9591064453125e-05, -2.503394853192731e-06, -0.0001773834228515625, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.000152587890625, -1.9073486328125e-06, -8.0108642578125e-05, -5.7220458984375e-06, -6.115436553955078e-05, 0.0, -0.001102447509765625, -0.00012969970703125, -3.814697265625e-06, -2.8848648071289062e-05, -1.1444091796875e-05, -0.000247955322265625, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -3.62396240234375e-05, -2.491474151611328e-05, -0.000171661376953125, -1.1563301086425781e-05, -2.9425344467163086, -9.5367431640625e-06, -6.6756979322235566e-06, 0.0, -0.00010311084042768925, 0.0, -2.5355515480041504, -1.9073486328125e-06, -0.00014495849609375, -5.7220458984375e-06, -1.537799835205078e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Frog", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "0", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.009799532457123, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Frog", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 0, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -6.882619380950928, -0.0004444122314453125, -1.0728830375228426e-06, -0.0006351470947265625, -0.012144804000854492, -3.814697265625e-06, -0.003975033760070801, -2.288818359375e-05, -1.9073486328125e-05, 0.0, -3.0517578125e-05, -1.71661376953125e-05, -0.0003871917724609375, -0.000148773193359375, -0.0933685302734375, -9.5367431640625e-06, -0.01576869934797287, 0.0, -3.695486157084815e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Frog", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "0", "<EOS>", "1", "<EOS>"]}, {"score": -7.04737404394848, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(0, 1, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frog", "hole2": "ALL", "_type": "Template11", "hole1": 0, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 0, "_type": "Template23", "hole1": 1, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -6.402917861938477, -0.0028743743896484375, -4.768370445162873e-07, -0.05608391761779785, -0.0022715674713253975, 0.0, -0.00016605854034423828, -5.7220458984375e-05, -1.1801719665527344e-05, -0.0001354217529296875, -0.000141143798828125, -0.000247955322265625, -2.288818359375e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -8.96453857421875e-05, -5.7220458984375e-06, -0.3543376922607422, -5.7220458984375e-06, -3.2186455882765586e-06, 0.0, -2.980186400236562e-05, 0.0, -0.22766482830047607, 0.0, -6.4849853515625e-05, -3.814697265625e-06, -1.728534698486328e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Frog", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.921486766946941, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(0, 1, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frog", "hole2": "ALL", "_type": "Template11", "hole1": 0, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 0, "_type": "Template65", "hole1": 1, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -6.402917861938477, -0.0028743743896484375, -4.768370445162873e-07, -0.05608391761779785, -0.0022715674713253975, 0.0, -0.00016605854034423828, -5.7220458984375e-05, -1.1801719665527344e-05, -0.0001354217529296875, -0.000141143798828125, -0.000247955322265625, -2.288818359375e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -8.96453857421875e-05, -5.7220458984375e-06, -1.2116422653198242, -2.288818359375e-05, -6.115436553955078e-05, -2.0265579223632812e-06, -1.71661376953125e-05, -0.0006580352783203125, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.22284328937530518, -3.814697265625e-06, -1.9073486328125e-05, -0.010443687438964844, -0.003101348876953125, -2.2172682292875834e-05, -4.970903682988137e-05, -5.352373045752756e-05, 0.0, -0.005998849868774414, -6.4849853515625e-05, -0.001071929931640625, -1.1444091796875e-05, -0.00014698505401611328, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Frog", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.145955909604709, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Frog Frog", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 0, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -7.439732074737549, -0.007149696350097656, -0.001467106631025672, -0.12555789947509766, -0.023434877395629883, -0.001979827880859375, -0.1875981092453003, -0.2625083923339844, -0.0016502141952514648, -0.0007495880126953125, -0.08557987213134766, -4.00543212890625e-05, -0.008303872309625149, 0.0, -2.6225998226436786e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Frog", " ", "Frog", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "0", "<EOS>", "1", "<EOS>"]}, {"score": -8.910837696053477, "inferred_code": "class Frog(MinionCard):\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n", "model_output": {"body": [{"body": [{"hole0": 0, "_type": "Template27", "hole1": 1}, {"hole0": 0, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -8.08419418334961, -0.11265754699707031, -0.0007998942746780813, -2.7537016649148427e-05, -0.0028426647186279297, 0.0, -0.7094898223876953, -1.9073486328125e-06, -0.0006214843015186489, 0.0, -2.861022494471399e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 110, 202, "0", "<EOS>", "1", "<EOS>", 110, 202, "0", "<EOS>", "1", "<EOS>"]}, {"score": -9.354992267504713, "inferred_code": "class Frog(MinionCard):\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n\n    def create_minion(self, player):\n        return Minion(0, 1, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": 0, "_type": "Template27", "hole1": 1}, {"hole0": 0, "_type": "Template23", "hole1": 1, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -8.08419418334961, -0.11265754699707031, -0.0007998942746780813, -2.7537016649148427e-05, -0.0028426647186279297, 0.0, -0.8616390228271484, -0.0004940032958984375, -0.00012755379430018365, -2.5033950805664062e-05, -6.68741122353822e-05, 0.0, -0.2917520999908447, -5.7220458984375e-06, -0.000125885009765625, -7.62939453125e-06, -2.110004425048828e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 110, 202, "0", "<EOS>", "1", "<EOS>", 109, 200, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.483936884837014, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(0, 1, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frog", "_type": "Template6", "hole1": 0, "hole2": "ALL"}, {"hole0": 0, "_type": "Template23", "hole1": 1, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -8.666145324707031, -0.0080718994140625, -0.00020883404067717493, -0.0071936845779418945, -0.00041246472392231226, 0.0, -0.00038242340087890625, -1.9073486328125e-06, -0.6441421508789062, -1.71661376953125e-05, -9.894361937767826e-06, -1.1920928244535389e-07, -4.005349182989448e-05, 0.0, -0.15701556205749512, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -1.5497207641601562e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Frog", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", 109, 200, "0", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.605487416103642, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Frog", "_type": "Template6", "hole1": 0, "hole2": "ALL"}, {"hole0": 0, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -8.666145324707031, -0.0080718994140625, -0.00020883404067717493, -0.0071936845779418945, -0.00041246472392231226, 0.0, -0.00038242340087890625, -1.9073486328125e-06, -0.9223604202270508, -1.9073486328125e-06, -0.0005064907018095255, 0.0, -2.2649765014648438e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Frog", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", 110, 202, "0", "<EOS>", "1", "<EOS>"]}, {"score": -10.082352919135246, "inferred_code": "class Frog(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frog', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Frog", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 0, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Frog"}], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -1.6331539882230572e-05, -2.5153160095214844e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -7.05718994140625e-05, -7.439732074737549, -0.007149696350097656, -0.001467106631025672, -2.14675235748291, -0.09883124381303787, -0.2859354019165039, -0.0008605718612670898, -0.0002899169921875, -0.0906991958618164, -6.866455078125e-05, -0.010364748537540436, 0.0, -2.1457640286826063e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frog", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Frog", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "0", "<EOS>", "1", "<EOS>"]}, {"score": -22.600284576416016, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-3.814697265625e-06, -7.62939453125e-06, -22.60027313232422], "choice_history": [80, 159, 294]}]}
{"index": 36, "beams": [{"score": -0.4428455745596622, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frozen"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -0.33240795135498047, 0.0, -1.33514404296875e-05, -0.002658843994140625, -0.0001087188720703125, -0.0017862319946289062, -5.7220458984375e-06, -0.016545889899134636, -4.172325134277344e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frozen", "<EOS>"]}, {"score": -3.085999363081548, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.change_attack(3)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -2.684788703918457, -0.0001926422119140625, -0.0002574920654296875, -0.00037384033203125, -0.000209808349609375, -0.3108164072036743, -4.57763671875e-05], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -3.5988761121202444, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.change_temp_attack(3)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -2.4097251892089844, -1.9073486328125e-06, -0.04109382629394531, -0.005917549133300781, -2.47955322265625e-05, -1.052763819694519, -3.4332275390625e-05], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -3.673034780638311, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.change_temp_attack(4)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -2.4097251892089844, -1.9073486328125e-06, -0.04109382629394531, -0.005917549133300781, -2.47955322265625e-05, -1.1269091367721558, -4.76837158203125e-05], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -3.6820222073961233, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.change_temp_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_temp_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -2.4097251892089844, -1.9073486328125e-06, -0.04109382629394531, -0.005917549133300781, -2.47955322265625e-05, -1.135919451713562, -2.47955322265625e-05], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_temp_attack", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.132502549307439, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -3.2277822494506836, -0.0010442733764648438, -2.86102294921875e-05, -0.21149826049804688, -0.000156402587890625, -0.0001392364501953125, 0.0, -0.0003871917724609375, 0.0, -3.266334533691406e-05, 0.0, -0.024113774299621582, 0.0, -0.0001068115234375, -0.013817787170410156, -3.814697265625e-06, -0.5556033849716187, 0.0, -0.0015087127685546875, -7.62939453125e-06, -0.006957054138183594, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.455461137907598, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.change_attack(4)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "change_attack", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -2.684788703918457, -0.0001926422119140625, -0.0002574920654296875, -0.00037384033203125, -0.000209808349609375, -1.6802877187728882, -3.62396240234375e-05], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "4", "<EOS>"]}, {"score": -4.552169078009221, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.set_health_to(3)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "set_health_to", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -4.066614627838135, -6.866455078125e-05, -3.0517578125e-05, -0.026899337768554688, -5.14984130859375e-05, -0.3691115379333496, -7.82012939453125e-05], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "set_health_to", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -4.966548197882268, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.use(player, game)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -0.01192474365234375, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0005340576171875, -1.1920928244535389e-07, -0.00043714046478271484, -2.384185791015625e-06, -0.0075004734098911285, -0.0023975372314453125, -0.0018157958984375, -0.0001125335693359375, 0.0, -0.00035762786865234375, -2.86102294921875e-05, -7.62939453125e-05, 0.0, -0.0037384033203125, 0.0, -0.00247955322265625, -1.52587890625e-05, -4.695121765136719, -1.9073486328125e-06, -4.00543212890625e-05, -0.18181133270263672, 0.0, -0.00016117095947265625, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -3.0517578125e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>"]}, {"score": -5.432600306326535, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player:\n            minion.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frozen"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -0.004810333251953125, -1.9073486328125e-06, -0.000324249267578125, 0.0, -2.288818359375e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.060962586052483e-05, -1.5616295058862306e-05, -0.0022640228271484375, -2.47955322265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -3.62396240234375e-05, -7.2479248046875e-05, -1.4781950994802173e-05, 0.0, -0.000148773193359375, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -3.814697265625e-06, -9.655952453613281e-06, -7.748603820800781e-06, -0.0003070831298828125, -0.0004100799560546875, -0.03524971008300781, -3.814697265625e-05, -0.009155869483947754, -4.57763671875e-05, -0.00012969970703125, 0.0, -4.443245887756348, -1.9073486328125e-05, -0.23994827270507812, -1.1920928244535389e-07, -0.14728569984436035, 0.0, -0.1195974349975586, -1.9073486328125e-05, -1.9073486328125e-06, -0.0029535293579101562, -2.09808349609375e-05, -3.0517578125e-05, 0.0, -0.01985645294189453, 0.0, -0.0017043352127075195, -0.0001125335693359375, -0.3821650743484497, -1.1920928244535389e-07, -1.1444091796875e-05, -0.0031270980834960938, -7.43865966796875e-05, -0.0022554397583007812, -3.814697265625e-06, -0.012324091978371143, -4.172325134277344e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frozen", "<EOS>"]}, {"score": -8.212955919197611, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "_type": "Template15", "hole1": 3, "hole2": "MAGE"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -0.00138092041015625, -3.0517578125e-05, -9.536738616588991e-07, -9.751313336892053e-05, -3.8981153920758516e-05, -7.43865966796875e-05, -0.000359351426595822, -5.841255187988281e-06, -0.0002613067626953125, -1.9311904907226562e-05, -7.962067604064941, -0.0007495880126953125, -0.15571212768554688, 0.0, -0.0001430511474609375, -3.814697265625e-06, -0.00348663330078125, 0.0, -0.000156402587890625, -4.1961669921875e-05, 0.0, -0.08606234937906265, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -8.239781653503968, "inferred_code": "class FrostNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Nova', 3, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Nova", "hole2": "MAGE", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -0.0005397796630859375, -4.9591064453125e-05, -3.3378546504536644e-06, -7.998667570063844e-05, -6.401333666872233e-05, -0.000652313232421875, -3.814697265625e-06, 0.0, -0.00014901161193847656, -0.0005515813827514648, -2.0265579223632812e-06, -0.0001201629638671875, -7.4729461669921875, -0.0003032684326171875, -1.2159273865108844e-05, -5.948540274403058e-05, -1.8477434423402883e-05, -1.9073486328125e-06, -9.357490489492193e-05, -1.9073486328125e-06, -0.0005588531494140625, -3.814697265625e-06, -0.00010311603546142578, 0.0, -2.86102294921875e-05, -3.814697265625e-06, -3.0517578125e-05, 0.0, -2.47955322265625e-05, 0.0, -0.00034749507904052734, -5.7220458984375e-06, -9.34600830078125e-05, -2.3841855067985307e-07, -0.015253663063049316, -1.20401346066501e-05, -0.6511363983154297, -0.0011653900146484375, -0.0001964569091796875, 0.0, -0.00022208690643310547, -7.62939453125e-06, -0.0025081634521484375, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.09231047332286835, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frost", " ", "Nova", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -15.44664192199707, "inferred_code": "break\n", "model_output": {"body": [{"_type": "Break"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -15.446596145629883], "choice_history": [80, 159, 295, 87]}, {"score": -17.162963278591633, "inferred_code": "self.target.add_buff(Buff(Nova()))\n", "model_output": {"body": [{"hole0": "Nova", "_type": "Template50"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -1.33514404296875e-05, -11.751354217529297, -4.889036655426025, -0.030189819633960724, -0.49233680963516235], "choice_history": [80, 159, 295, 117, 226, "Nova", "<EOS>"]}, {"score": -22.896793365478516, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -2.6702880859375e-05, -22.896760940551758], "choice_history": [80, 159, 294]}]}
{"index": 37, "beams": [{"score": -0.1460660346813185, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frost Shock"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 1, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -0.01990985870361328, -9.5367431640625e-05, -1.9073486328125e-05, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -7.152555099310121e-07, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0002498626708984375, -2.288818359375e-05, -1.9073486328125e-06, -6.794906312279636e-06, -0.00010979037324432284, -6.079673767089844e-06, -0.0001239776611328125, -2.86102294921875e-05, 0.0, -2.0263760234229267e-06, -1.1444091796875e-05, -2.6702880859375e-05, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.0020122528076171875, -1.1920928244535389e-07, -0.0001850128173828125, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00021564960479736328, -2.0265579223632812e-06, -0.0005397796630859375, -1.9073486328125e-06, -2.47955322265625e-05, -0.000324249267578125, -2.47955322265625e-05, -0.0026208162307739258, -1.9073486328125e-06, -0.00016021728515625, 0.0, -3.0517578125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.9073486328125e-06, -7.843971252441406e-05, -5.7220458984375e-06, -3.24249267578125e-05, 0.0, -0.015275239944458008, -2.467606282152701e-05, -0.05964183807373047, -5.7220458984375e-06, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -2.0265579223632812e-06, -4.768371127283899e-06, -0.006946563720703125, -3.814697265625e-06, -7.62939453125e-06, -0.0003566741943359375, -1.9073486328125e-05, -2.86102294921875e-05, 0.0, -2.47955322265625e-05, -1.1444091796875e-05, -0.00014317035675048828, -3.814697265625e-06, -3.4332275390625e-05, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, 0.0, -0.00014495849609375, -5.7220458984375e-06, -4.9591064453125e-05, -1.3470649719238281e-05, -0.0001735687255859375, -1.9073486328125e-06, -0.004399299621582031, -4.9591064453125e-05, -0.003187748836353421, -9.5367431640625e-06, -0.015936851501464844, -0.00121307373046875, -0.0067293643951416016, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Frost", " ", "Shock", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "1", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -3.14069288154473, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frost Shock"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -0.01990985870361328, -9.5367431640625e-05, -1.9073486328125e-05, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -7.152555099310121e-07, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0002498626708984375, -2.288818359375e-05, -1.9073486328125e-06, -6.794906312279636e-06, -0.00010979037324432284, -6.079673767089844e-06, -0.0001239776611328125, -2.86102294921875e-05, 0.0, -2.0263760234229267e-06, -1.1444091796875e-05, -2.6702880859375e-05, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.0020122528076171875, -1.1920928244535389e-07, -0.0001850128173828125, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00021564960479736328, -2.0265579223632812e-06, -0.0005397796630859375, -1.9073486328125e-06, -2.47955322265625e-05, -0.000324249267578125, -2.47955322265625e-05, -0.0026208162307739258, -1.9073486328125e-06, -0.00016021728515625, 0.0, -3.0517578125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.9073486328125e-06, -7.843971252441406e-05, -5.7220458984375e-06, -3.24249267578125e-05, 0.0, -0.015275239944458008, -2.467606282152701e-05, -3.027261734008789, -0.0002498626708984375, -0.0035877227783203125, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -0.0001621246337890625, -3.814697265625e-06, -8.7738037109375e-05, -0.040192604064941406, 0.0, -0.0223274827003479, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Frost", " ", "Shock", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -4.810381195538177, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frost Shock"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 1, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -0.01990985870361328, -9.5367431640625e-05, -1.9073486328125e-05, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -7.152555099310121e-07, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0002498626708984375, -2.288818359375e-05, -1.9073486328125e-06, -6.794906312279636e-06, -0.00010979037324432284, -6.079673767089844e-06, -0.0001239776611328125, -2.86102294921875e-05, 0.0, -2.0263760234229267e-06, -1.1444091796875e-05, -2.6702880859375e-05, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.0020122528076171875, -1.1920928244535389e-07, -0.0001850128173828125, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00021564960479736328, -2.0265579223632812e-06, -0.0005397796630859375, -1.9073486328125e-06, -2.47955322265625e-05, -0.000324249267578125, -2.47955322265625e-05, -0.0026208162307739258, -1.9073486328125e-06, -0.00016021728515625, 0.0, -3.0517578125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.9073486328125e-06, -7.843971252441406e-05, -5.7220458984375e-06, -3.24249267578125e-05, 0.0, -4.71121883392334, -2.0265579223632812e-06, -0.029361724853515625, 0.0, -1.3589859008789062e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.24249267578125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -2.0265579223632812e-06, -4.768371127283899e-06, -0.004604339599609375, -3.814697265625e-06, -7.62939453125e-06, -0.000396728515625, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -2.6702880859375e-05, -1.33514404296875e-05, -0.00015079975128173828, -3.814697265625e-06, -3.4332275390625e-05, -7.62939453125e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, 0.0, -0.00014495849609375, -5.7220458984375e-06, -4.9591064453125e-05, -1.3470649719238281e-05, -0.0001773834228515625, -1.9073486328125e-06, -0.004375457763671875, -4.9591064453125e-05, -0.003050952684134245, -9.5367431640625e-06, -0.017019271850585938, -0.001209259033203125, -0.006799101829528809, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Frost", " ", "Shock", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "1", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -5.690332826693258, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        game.other_player.hero.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frost Shock"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 1, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"hole0": 1, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -0.01990985870361328, -9.5367431640625e-05, -1.9073486328125e-05, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -7.152555099310121e-07, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0002498626708984375, -2.288818359375e-05, -1.9073486328125e-06, -6.794906312279636e-06, -0.00010979037324432284, -6.079673767089844e-06, -0.0001239776611328125, -2.86102294921875e-05, 0.0, -2.0263760234229267e-06, -1.1444091796875e-05, -2.6702880859375e-05, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.0020122528076171875, -1.1920928244535389e-07, -0.0001850128173828125, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00021564960479736328, -2.0265579223632812e-06, -0.0005397796630859375, -1.9073486328125e-06, -2.47955322265625e-05, -0.000324249267578125, -2.47955322265625e-05, -0.0026208162307739258, -1.9073486328125e-06, -0.00016021728515625, 0.0, -3.0517578125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.9073486328125e-06, -7.843971252441406e-05, -5.7220458984375e-06, -3.24249267578125e-05, 0.0, -0.015275239944458008, -2.467606282152701e-05, -0.05964183807373047, -5.7220458984375e-06, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -2.0265579223632812e-06, -4.768371127283899e-06, -0.006946563720703125, -3.814697265625e-06, -7.62939453125e-06, -0.0003566741943359375, -1.9073486328125e-05, -2.86102294921875e-05, 0.0, -2.47955322265625e-05, -1.1444091796875e-05, -0.00014317035675048828, -3.814697265625e-06, -3.4332275390625e-05, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, 0.0, -0.00014495849609375, -5.7220458984375e-06, -4.9591064453125e-05, -1.3470649719238281e-05, -0.0001735687255859375, -1.9073486328125e-06, -0.004399299621582031, -4.9591064453125e-05, -0.003187748836353421, -9.5367431640625e-06, -4.4698991775512695, -9.918212890625e-05, -0.012508392333984375, -0.05048084259033203, -1.33514404296875e-05, -5.7220458984375e-06, -0.000499725341796875, 0.0, -0.2609844207763672, 0.0, -0.0002803802490234375, 0.0, -0.5783529281616211, -2.1457672119140625e-06, -0.007669687271118164, -2.3841855067985307e-07, -0.06923313438892365, -2.145764938177308e-06, -0.09127986431121826, -0.0004711151123046875, -7.62939453125e-06, -0.010403633117675781, -0.0001735687255859375, -0.014441268518567085, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0013203620910644531, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Frost", " ", "Shock", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "1", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.899774733131835, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Frost Shock", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 1, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -3.9834184646606445, -0.0038166046142578125, -5.352465814212337e-05, -0.0037837005220353603, -1.1920919860131107e-05, -3.814697265625e-06, -1.1741329431533813, 0.0, -0.03954601287841797, 0.0, -0.6207647323608398, -5.7220458984375e-06, -0.016205787658691406, 0.0, -3.814697265625e-06, -2.6702880859375e-05, 0.0, -1.9073486328125e-06, 0.0, 0.0, 0.0, 0.0, -3.814697265625e-06, -3.933906555175781e-06, -2.1457672119140625e-06, -0.022125244140625, -3.814697265625e-06, -1.1444091796875e-05, -0.000171661376953125, -4.1961669921875e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -3.24249267578125e-05, -0.000133514404296875, -1.9073486328125e-06, -3.0517578125e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.0001468658447265625, -5.7220458984375e-06, -5.14984130859375e-05, -1.3470649719238281e-05, -0.00025177001953125, -1.9073486328125e-06, -0.005005836486816406, -5.14984130859375e-05, -0.0027000426780432463, -9.5367431640625e-06, -0.014315605163574219, -0.0012187957763671875, -0.007122993469238281, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Frost", " ", "Shock", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "1", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -5.982614773225123, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Frost Shock", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 1, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -3.9834184646606445, -0.0038166046142578125, -5.352465814212337e-05, -0.0037837005220353603, -1.1920919860131107e-05, -3.814697265625e-06, -0.7352386713027954, 0.0, -0.009661674499511719, 0.0, -1.1718387603759766, -3.814697265625e-06, -0.02095317840576172, 0.0, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -1.9073486328125e-06, 0.0, 0.0, 0.0, 0.0, -3.814697265625e-06, -3.933906555175781e-06, -2.1457672119140625e-06, -0.018157958984375, -3.814697265625e-06, -1.1444091796875e-05, -0.000171661376953125, -4.38690185546875e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -3.24249267578125e-05, -0.000133514404296875, -1.9073486328125e-06, -3.0517578125e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.000148773193359375, -5.7220458984375e-06, -5.14984130859375e-05, -1.3470649719238281e-05, -0.0002536773681640625, -1.9073486328125e-06, -0.005107879638671875, -5.340576171875e-05, -0.002693441230803728, -9.5367431640625e-06, -0.013978004455566406, -0.001224517822265625, -0.0071201324462890625, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Frost", " ", "Shock", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "1", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -6.40527107416483, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Frost Shock", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frozen"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -3.9834184646606445, -0.0038166046142578125, -5.352465814212337e-05, -0.0037837005220353603, -1.1920919860131107e-05, -3.814697265625e-06, -0.7352386713027954, 0.0, -0.009661674499511719, 0.0, -0.4526662826538086, -0.014158248901367188, -5.7220458984375e-06, 0.0, -5.91278076171875e-05, 0.0, -0.0012359619140625, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.9437074661254883, -4.52994936495088e-06, -3.4332275390625e-05, -0.23544979095458984, -3.814697265625e-06, -0.000164031982421875, -0.0009080171585083008, -0.016323953866958618, -3.933906555175781e-05], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Frost", " ", "Shock", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frozen", "<EOS>"]}, {"score": -6.45433650016048, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Frost Shock", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -3.9834184646606445, -0.0038166046142578125, -5.352465814212337e-05, -0.0037837005220353603, -1.1920919860131107e-05, -3.814697265625e-06, -0.7352386713027954, 0.0, -0.009661674499511719, 0.0, -0.4526662826538086, -0.014158248901367188, -5.7220458984375e-06, 0.0, -5.91278076171875e-05, 0.0, -0.0012359619140625, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -1.1774101257324219, -5.7220458984375e-06, -1.33514404296875e-05, -0.016071319580078125, -5.7220458984375e-06, -0.05219446122646332, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Frost", " ", "Shock", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -7.281807825331271, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Frost Shock", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frozen"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -3.9834184646606445, -0.0038166046142578125, -5.352465814212337e-05, -0.0037837005220353603, -1.1920919860131107e-05, -3.814697265625e-06, -1.1741329431533813, 0.0, -0.03954601287841797, 0.0, -1.020594596862793, -0.028510093688964844, -1.33514404296875e-05, 0.0, -3.62396240234375e-05, 0.0, -0.00263214111328125, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.8063764572143555, -4.41074053014745e-06, -1.33514404296875e-05, -0.1961050033569336, -3.814697265625e-06, -0.000171661376953125, -0.0004769563674926758, -0.0175433699041605, -3.731250762939453e-05], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Frost", " ", "Shock", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frozen", "<EOS>"]}, {"score": -7.497096027733733, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "model_output": {"body": [{"body": [{"hole0": "Frost Shock", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -6.394815444946289, -0.016808509826660156, -9.631682769395411e-05, -0.00024235143791884184, -5.245207830739673e-06, -0.0008068084716796875, -0.1068258062005043, -1.71661376953125e-05, -0.1663532257080078, 0.0, -0.00823974609375, -0.6435842514038086, -0.003917694091796875, 0.0, -2.47955322265625e-05, 0.0, -0.042702674865722656, -4.00543212890625e-05, -4.00543212890625e-05, 0.0, -0.11121201515197754, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Frost", " ", "Shock", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 224, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -7.773757664851928, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Frost Shock", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -3.9834184646606445, -0.0038166046142578125, -5.352465814212337e-05, -0.0037837005220353603, -1.1920919860131107e-05, -3.814697265625e-06, -1.1741329431533813, 0.0, -0.03954601287841797, 0.0, -1.020594596862793, -0.028510093688964844, -1.33514404296875e-05, 0.0, -3.62396240234375e-05, 0.0, -0.00263214111328125, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -1.4537959098815918, -5.7220458984375e-06, -9.5367431640625e-06, -0.013437271118164062, -5.7220458984375e-06, -0.045428015291690826, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Frost", " ", "Shock", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -7.972198075048709, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Frost Shock", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -3.9834184646606445, -0.0038166046142578125, -5.352465814212337e-05, -0.0037837005220353603, -1.1920919860131107e-05, -3.814697265625e-06, -0.7352386713027954, 0.0, -0.009661674499511719, 0.0, -0.4526662826538086, -0.014158248901367188, -5.7220458984375e-06, 0.0, -5.91278076171875e-05, 0.0, -0.0012359619140625, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -2.642610549926758, -0.0001589059829711914, -1.71661376953125e-05, -0.0027074813842773438, -1.9073486328125e-06, -0.11806626617908478, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Frost", " ", "Shock", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -8.209629808219233, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Frost Shock", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -0.0028753280639648438, -1.9073486328125e-06, -4.804134005098604e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -4.0531158447265625e-06, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.9073486328125e-06, -3.9834184646606445, -0.0038166046142578125, -5.352465814212337e-05, -0.0037837005220353603, -1.1920919860131107e-05, -3.814697265625e-06, -1.1741329431533813, 0.0, -0.03954601287841797, 0.0, -2.979990005493164, -0.0006084442138671875, -0.006397247314453125, 0.0, -1.9073486328125e-05, -1.1444091796875e-05, -0.0004673004150390625, -1.9073486328125e-06, -0.0001316070556640625, -0.009909629821777344, 0.0, -0.00287847057916224, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Frost", " ", "Shock", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -8.937064553132132, "inferred_code": "class FrostShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frost Shock', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(1)\n", "model_output": {"body": [{"body": [{"hole0": "Frost Shock", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "FrostShock"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -7.152555099310121e-07, -0.00011979904229519889, -7.152555099310121e-07, -0.0009441375732421875, -1.9073486328125e-06, -1.9073486328125e-06, -8.654594421386719e-05, -2.491474151611328e-05, -1.1563301086425781e-05, -5.91278076171875e-05, -6.394815444946289, -0.016808509826660156, -9.631682769395411e-05, -0.00024235143791884184, -5.245207830739673e-06, -0.0008068084716796875, -0.1068258062005043, -1.71661376953125e-05, -0.1663532257080078, 0.0, -0.00823974609375, -0.7838888168334961, -3.814697265625e-05, 0.0, -5.340576171875e-05, 0.0, -0.05825614929199219, -1.71661376953125e-05, -6.67572021484375e-05, 0.0, -0.7485495805740356, -8.22540732769994e-06, -5.7220458984375e-06, -0.6426563262939453, -1.9073486328125e-06, -0.007947861216962337, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frost", "Shock", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Frost", " ", "Shock", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -22.652652740478516, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -4.76837158203125e-05, -22.652603149414062], "choice_history": [80, 159, 294]}]}
{"index": 38, "beams": [{"score": -0.09257278445176098, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -0.0017948150634765625, -1.9073486328125e-06, -6.139278411865234e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0005741119384765625, -8.7738037109375e-05, -7.62939453125e-05, 0.0, -0.002446293830871582, -4.291534423828125e-06, -0.017999649047851562, -1.71661376953125e-05, -0.00011372566223144531, 0.0, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, 0.0, -9.655952453613281e-06, 0.0, -0.0001373291015625, -2.2649765014648438e-06, -5.960462772236497e-07, -0.003864288330078125, -1.9073486328125e-06, -2.09808349609375e-05, -0.000553131103515625, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.9591064453125e-05, 0.0, -0.00019073486328125, -3.814697265625e-06, -4.00543212890625e-05, -1.9431114196777344e-05, -0.0001678466796875, -1.52587890625e-05, -0.0012111663818359375, -0.00037384033203125, -0.00041268044151365757, -5.4596839618170634e-05, -0.039112091064453125, -0.0005474090576171875, -0.005090236663818359, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -3.5725806284962687, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"hole0": 3, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -0.0017948150634765625, -1.9073486328125e-06, -6.139278411865234e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0005741119384765625, -8.7738037109375e-05, -7.62939453125e-05, 0.0, -0.002446293830871582, -4.291534423828125e-06, -0.017999649047851562, -1.71661376953125e-05, -0.00011372566223144531, 0.0, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, 0.0, -9.655952453613281e-06, 0.0, -0.0001373291015625, -2.2649765014648438e-06, -5.960462772236497e-07, -0.003864288330078125, -1.9073486328125e-06, -2.09808349609375e-05, -0.000553131103515625, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.9591064453125e-05, 0.0, -0.00019073486328125, -3.814697265625e-06, -4.00543212890625e-05, -1.9431114196777344e-05, -0.0001678466796875, -1.52587890625e-05, -0.0012111663818359375, -0.00037384033203125, -0.00041268044151365757, -5.4596839618170634e-05, -3.398848533630371, -3.24249267578125e-05, -0.009923934936523438, -0.039966583251953125, -1.71661376953125e-05, -1.52587890625e-05, -0.0008831024169921875, -3.814697265625e-06, -0.010679244995117188, 0.0, -0.0003223419189453125, 0.0, -0.016307950019836426, -5.7220458984375e-06, -0.0036220550537109375, 0.0, -0.0017155124805867672, -1.5497195136049413e-06, -0.020339488983154297, -3.4332275390625e-05, -5.7220458984375e-06, -0.005591392517089844, -6.103515625e-05, -0.0012521599419414997, 0.0, -9.1552734375e-05, -1.9073486328125e-06, -0.015029072761535645, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "3", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.074837564647623, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -0.0017948150634765625, -1.9073486328125e-06, -6.139278411865234e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0005741119384765625, -8.7738037109375e-05, -7.62939453125e-05, 0.0, -0.002446293830871582, -4.291534423828125e-06, -4.038120269775391, -0.0033359527587890625, -0.004256248474121094, 0.0, -0.003777146339416504, -3.814697265625e-06, -0.0022335052490234375, 0.0, -3.24249267578125e-05, -0.000652313232421875, -1.9073486328125e-06, -7.438650209223852e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -5.164274779695745, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "_type": "Template15", "hole1": 2, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -5.084815979003906, -0.000164031982421875, -2.4318398573086597e-05, -5.7220458984375e-06, -5.733820216846652e-05, 0.0, -0.0002727508544921875, -4.696846008300781e-05, -0.0004558563232421875, -5.7220458984375e-06, -8.96453857421875e-05, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -1.52587890625e-05, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -4.0531158447265625e-06, -5.960462772236497e-07, -0.035101890563964844, -3.814697265625e-06, -2.09808349609375e-05, -0.0007829666137695312, -1.33514404296875e-05, -5.91278076171875e-05, 0.0, -3.814697265625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -3.814697265625e-06, -3.0517578125e-05, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -3.4332275390625e-05, 0.0, -0.0001773834228515625, -3.814697265625e-06, -4.1961669921875e-05, -2.1338462829589844e-05, -0.0004520416259765625, -1.1444091796875e-05, -0.0012359619140625, -0.000423431396484375, -0.00045713840518146753, -5.531206261366606e-05, -0.032395362854003906, -0.000598907470703125, -0.005057573318481445, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -5.81684265139512, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(<UNK>()))\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"hole0": "<UNK>", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -0.0017948150634765625, -1.9073486328125e-06, -6.139278411865234e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0005741119384765625, -8.7738037109375e-05, -7.62939453125e-05, 0.0, -0.002446293830871582, -4.291534423828125e-06, -0.017999649047851562, -1.71661376953125e-05, -0.00011372566223144531, 0.0, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, 0.0, -9.655952453613281e-06, 0.0, -0.0001373291015625, -2.2649765014648438e-06, -5.960462772236497e-07, -0.003864288330078125, -1.9073486328125e-06, -2.09808349609375e-05, -0.000553131103515625, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.9591064453125e-05, 0.0, -0.00019073486328125, -3.814697265625e-06, -4.00543212890625e-05, -1.9431114196777344e-05, -0.0001678466796875, -1.52587890625e-05, -0.0012111663818359375, -0.00037384033203125, -0.00041268044151365757, -5.4596839618170634e-05, -0.039112091064453125, -0.0005474090576171875, -5.729325771331787, -3.62396240234375e-05], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 117, 226, "<UNK>", "<EOS>"]}, {"score": -6.274578640015363, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "_type": "Template3", "hole1": 2, "hole2": "MAGE"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -6.068382263183594, -0.1457834243774414, -6.5205356804654e-05, -1.9073486328125e-06, -0.00044510484440252185, 0.0, -0.0011348724365234375, -3.814697265625e-06, -0.0008745193481445312, -1.1444091796875e-05, -0.0001049041748046875, 0.0, -7.62939453125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, -4.172325134277344e-06, -5.960462772236497e-07, -0.0103759765625, -1.9073486328125e-06, -1.71661376953125e-05, -0.0010442733764648438, -1.33514404296875e-05, -8.0108642578125e-05, -1.9073486328125e-06, -4.38690185546875e-05, -3.24249267578125e-05, -2.6702880859375e-05, -3.814697265625e-06, -4.38690185546875e-05, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.000194549560546875, -3.814697265625e-06, -4.00543212890625e-05, -1.9431114196777344e-05, -0.00026702880859375, -1.33514404296875e-05, -0.0011739730834960938, -0.0004215240478515625, -0.0004229297919664532, -5.340480129234493e-05, -0.03618621826171875, -0.0006103515625, -0.005388021469116211, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -6.345374362928794, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            target_func=hearthbreaker.targeting)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole8": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "hole7": "target_func", "hole2": "MAGE", "hole6": "find_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 2, "hole4": "target_func", "hole3": "COMMON"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -5.159833908081055, -0.011241912841796875, -0.005732761695981026, -4.982948303222656e-05, -0.0006056377897039056, 0.0, -0.001934051513671875, -1.71661376953125e-05, -0.09066402912139893, 0.0, -8.594989776611328e-05, 0.0, -0.000392913818359375, -3.814697265625e-06, -0.14001750946044922, 0.0, -0.0005245208740234375, -5.91278076171875e-05, -9.34600830078125e-05, 0.0, -0.09180295467376709, 0.0, -0.5991594791412354, 0.0, -0.016353607177734375, -1.9073486328125e-06, -0.03185272216796875, 0.0, -0.0005303621292114258, -7.2479248046875e-05, -8.392333984375e-05, 0.0, -0.1369190216064453, -2.09808349609375e-05, -3.647804260253906e-05, 0.0, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.62939453125e-06, 0.0, -7.43865966796875e-05, -4.291534423828125e-06, -3.576278118089249e-07, -0.0024976730346679688, -1.9073486328125e-06, -1.71661376953125e-05, -0.000484466552734375, -1.33514404296875e-05, -2.47955322265625e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -1.9073486328125e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -4.57763671875e-05, 0.0, -0.0001926422119140625, -3.814697265625e-06, -4.1961669921875e-05, -1.9431114196777344e-05, -0.000156402587890625, -1.52587890625e-05, -0.0012187957763671875, -0.0003719329833984375, -0.00041947400313802063, -5.209355367696844e-05, -0.04465007781982422, -0.00054931640625, -0.005054354667663574, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -6.604060635687631, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 3, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -0.0017948150634765625, -1.9073486328125e-06, -6.139278411865234e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0005741119384765625, -8.7738037109375e-05, -7.62939453125e-05, 0.0, -0.002446293830871582, -4.291534423828125e-06, -0.017999649047851562, -1.71661376953125e-05, -0.00011372566223144531, 0.0, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, 0.0, -9.655952453613281e-06, 0.0, -0.0001373291015625, -2.2649765014648438e-06, -5.960462772236497e-07, -6.3011369705200195, -1.52587890625e-05, -5.7220458984375e-06, -0.0030765533447265625, -5.7220458984375e-06, -3.24249267578125e-05, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.38690185546875e-05, 0.0, -0.0001621246337890625, -3.814697265625e-06, -4.38690185546875e-05, -2.3126602172851562e-05, -0.008993148803710938, -0.000102996826171875, -0.0001354217529296875, 0.0, -0.0008554458618164062, 0.0, -0.1786174774169922, -0.0006866455078125, -0.0008792877197265625, -3.62396240234375e-05, -0.0073032379150390625, -1.1444091796875e-05, -0.00032806396484375, -9.5367431640625e-06, -0.0032196044921875, 0.0, -2.09808349609375e-05, -8.0108642578125e-05, -1.1444091796875e-05, -0.0007343292236328125, -1.9073486328125e-06, -0.0011386871337890625, -3.814697265625e-06, -0.00023865699768066406, -4.291534423828125e-06, -0.00048065185546875, 0.0, -0.0024792873300611973, -1.52587890625e-05, -0.0002040863037109375, -0.0056438446044921875, 0.0, -0.0014448165893554688, -3.814697265625e-06, -0.0003757476806640625, 0.0, -8.58306884765625e-05, 0.0, -0.0014249086380004883, 0.0, -0.0024585723876953125, -1.33514404296875e-05, -3.814697265625e-06, -0.017113685607910156, -6.866455078125e-05, -0.002368583343923092, -2.1457672119140625e-06, -6.103515625e-05, 0.0, -0.021042823791503906, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "3", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.0437036514561555, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(damage()))\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"hole0": "damage", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -0.0017948150634765625, -1.9073486328125e-06, -6.139278411865234e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0005741119384765625, -8.7738037109375e-05, -7.62939453125e-05, 0.0, -0.002446293830871582, -4.291534423828125e-06, -0.017999649047851562, -1.71661376953125e-05, -0.00011372566223144531, 0.0, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, 0.0, -9.655952453613281e-06, 0.0, -0.0001373291015625, -2.2649765014648438e-06, -5.960462772236497e-07, -0.003864288330078125, -1.9073486328125e-06, -2.09808349609375e-05, -0.000553131103515625, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.9591064453125e-05, 0.0, -0.00019073486328125, -3.814697265625e-06, -4.00543212890625e-05, -1.9431114196777344e-05, -0.0001678466796875, -1.52587890625e-05, -0.0012111663818359375, -0.00037384033203125, -0.00041268044151365757, -5.4596839618170634e-05, -0.039112091064453125, -0.0005474090576171875, -6.9536519050598145, -0.00257110595703125], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 117, 226, "damage", "<EOS>"]}, {"score": -7.181594586393032, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "WARLOCK", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -7.091241836547852, 0.0, -9.548664093017578e-05, 0.0, -2.47955322265625e-05, -2.6702880859375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.000583648681640625, -7.2479248046875e-05, -8.58306884765625e-05, 0.0, -0.002705812454223633, -4.291534423828125e-06, -0.017446517944335938, -1.52587890625e-05, -0.0001024007797241211, 0.0, 0.0, -3.0517578125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, 0.0, -9.655952453613281e-06, 0.0, -0.000141143798828125, -2.2649765014648438e-06, -5.960462772236497e-07, -0.00385284423828125, -1.9073486328125e-06, -2.09808349609375e-05, -0.000553131103515625, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -6.29425048828125e-05, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.9591064453125e-05, 0.0, -0.00019073486328125, -3.814697265625e-06, -4.00543212890625e-05, -1.9431114196777344e-05, -0.0001678466796875, -1.52587890625e-05, -0.0012102127075195312, -0.0003757476806640625, -0.00041077309288084507, -5.47160416317638e-05, -0.03896141052246094, -0.0005474090576171875, -0.005089282989501953, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -7.299270010616247, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frostbolt"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "MAGE", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -6.969269752502441, -0.0005626678466796875, -2.8014177587465383e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.000728607177734375, -1.9073486328125e-06, -1.1444091796875e-05, -0.09349536895751953, -0.00098419189453125, -0.0001277923583984375, 0.0, -4.1961669921875e-05, 0.0, -2.50339189733495e-06, 0.0, -2.86102294921875e-05, 0.0, -0.000888824462890625, -3.0517578125e-05, -5.7220458984375e-06, -2.3841855067985307e-07, -0.00022709369659423828, -5.14984130859375e-05, -7.62939453125e-06, -3.7431374948937446e-05, -7.867813110351562e-06, -0.0001277923583984375, 0.0, -0.0004215240478515625, 0.0, -0.00013172626495361328, -1.0728830375228426e-06, -0.00234222412109375, 0.0, -0.0001926422119140625, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.000423431396484375, -1.1920928244535389e-07, -0.08937835693359375, 0.0, -0.0001316070556640625, -0.0007381439208984375, -7.62939453125e-06, -0.00021576881408691406, 0.0, -4.38690185546875e-05, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.00023293495178222656, -1.1444091796875e-05, -6.4849853515625e-05, 0.0, -0.012882351875305176, -3.933906555175781e-06, -0.07291030883789062, -7.62939453125e-06, -2.944469451904297e-05, 0.0, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -1.1563301086425781e-05, 0.0, -0.0001659393310546875, -2.384185791015625e-06, -1.0728830375228426e-06, -0.004076957702636719, -1.9073486328125e-06, -1.71661376953125e-05, -0.0005598068237304688, -9.5367431640625e-06, -5.14984130859375e-05, 0.0, -9.72747802734375e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -5.7220458984375e-05, 0.0, -0.0002079010009765625, -3.814697265625e-06, -4.00543212890625e-05, -1.7523765563964844e-05, -0.0001735687255859375, -1.71661376953125e-05, -0.0012140274047851562, -0.0003814697265625, -0.0004073163727298379, -5.602728560916148e-05, -0.03787994384765625, -0.0005626678466796875, -0.004950165748596191, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Frostbolt", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -7.456239259270937, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        game.other_player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -0.0017948150634765625, -1.9073486328125e-06, -6.139278411865234e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0005741119384765625, -8.7738037109375e-05, -7.62939453125e-05, 0.0, -0.002446293830871582, -4.291534423828125e-06, -0.017999649047851562, -1.71661376953125e-05, -0.00011372566223144531, 0.0, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, 0.0, -9.655952453613281e-06, 0.0, -0.0001373291015625, -2.2649765014648438e-06, -5.960462772236497e-07, -0.003864288330078125, -1.9073486328125e-06, -2.09808349609375e-05, -0.000553131103515625, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.9591064453125e-05, 0.0, -0.00019073486328125, -3.814697265625e-06, -4.00543212890625e-05, -1.9431114196777344e-05, -0.0001678466796875, -1.52587890625e-05, -0.0012111663818359375, -0.00037384033203125, -0.00041268044151365757, -5.4596839618170634e-05, -3.398848533630371, -3.24249267578125e-05, -0.009923934936523438, -3.2489500045776367, -1.33514404296875e-05, -3.814697265625e-06, -0.05775260925292969, 0.0, -2.47955322265625e-05, 0.0, -0.34661293029785156, 0.0, -0.004459381103515625, -1.1920928244535389e-07, -0.34179621934890747, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "draw", "<EOS>"]}, {"score": -8.056272678476432, "inferred_code": "class Frostbolt(SpellCard):\n\n    def __init__(self):\n        super().__init__('Frostbolt', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        game.other_player.hero.damage(player.effective_spell_damage(3), wrath)\n", "model_output": {"body": [{"body": [{"hole0": "Frostbolt", "hole2": "MAGE", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"hole0": 3, "_type": "Template71"}, {"_type": "Name", "id": "wrath"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Frostbolt"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -2.47955322265625e-05, -0.00014495849609375, -3.814689989667386e-06, -6.556507287314162e-06, -0.00012969970703125, -1.9073486328125e-06, -1.9073486328125e-06, -8.559226262150332e-05, -1.537799835205078e-05, -9.655952453613281e-06, -4.1961669921875e-05, -0.015960693359375, -3.24249267578125e-05, -4.529942543740617e-06, -1.1444091796875e-05, -3.0159299058141187e-05, 0.0, -0.0017948150634765625, -1.9073486328125e-06, -6.139278411865234e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, 0.0, -0.0005741119384765625, -8.7738037109375e-05, -7.62939453125e-05, 0.0, -0.002446293830871582, -4.291534423828125e-06, -0.017999649047851562, -1.71661376953125e-05, -0.00011372566223144531, 0.0, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -2.0265579223632812e-06, 0.0, 0.0, -9.655952453613281e-06, 0.0, -0.0001373291015625, -2.2649765014648438e-06, -5.960462772236497e-07, -0.003864288330078125, -1.9073486328125e-06, -2.09808349609375e-05, -0.000553131103515625, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.9591064453125e-05, 0.0, -0.00019073486328125, -3.814697265625e-06, -4.00543212890625e-05, -1.9431114196777344e-05, -0.0001678466796875, -1.52587890625e-05, -0.0012111663818359375, -0.00037384033203125, -0.00041268044151365757, -5.4596839618170634e-05, -3.398848533630371, -3.24249267578125e-05, -0.009923934936523438, -0.039966583251953125, -1.71661376953125e-05, -1.52587890625e-05, -0.0008831024169921875, -3.814697265625e-06, -0.010679244995117188, 0.0, -0.0003223419189453125, 0.0, -0.016307950019836426, -5.7220458984375e-06, -0.0036220550537109375, 0.0, -0.0017155124805867672, -1.5497195136049413e-06, -0.020339488983154297, -3.4332275390625e-05, -5.7220458984375e-06, -0.005591392517089844, -6.103515625e-05, -0.0012521599419414997, 0.0, -9.1552734375e-05, -1.9073486328125e-06, -4.498721122741699, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostbolt", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Frostbolt", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "3", "<EOS>", 45, 160, "wrath", "<EOS>"]}, {"score": -18.91600227355957, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -18.915910720825195], "choice_history": [80, 159, 294]}, {"score": -19.979254104197025, "inferred_code": "self.target.add_buff(Buff(()))\n", "model_output": {"body": [{"hole0": "", "_type": "Template50"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -8.0108642578125e-05, -0.0006313323974609375, -15.053125381469727, -4.891384601593018, -0.03402123600244522], "choice_history": [80, 159, 295, 117, 226, "<EOS>"]}]}
{"index": 39, "beams": [{"score": -0.007341034449723338, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -0.0014286041259765625, -6.67572021484375e-05, -6.318072337307967e-06, -2.0384788513183594e-05, -4.88758041683468e-06, -1.9073486328125e-06, -9.65605431701988e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.001434326171875, -0.00046539306640625, -8.940590305428486e-06, 0.0, -2.0992887584725395e-05, 0.0, -0.0025157928466796875, 0.0, -0.0001583099365234375, -5.53131103515625e-05, -1.1444091796875e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.532798416651872, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -0.0014286041259765625, -6.67572021484375e-05, -6.318072337307967e-06, -2.0384788513183594e-05, -4.88758041683468e-06, -1.9073486328125e-06, -9.65605431701988e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.001434326171875, -0.00046539306640625, -8.940590305428486e-06, 0.0, -2.0992887584725395e-05, 0.0, -6.527698516845703, 0.0, -0.0003032684326171875, -0.00019073486328125, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.540726658702738, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -7.073239326477051, -4.76837158203125e-05, -1.1920922133867862e-06, -1.1324880688334815e-05, -8.225440979003906e-06, 0.0, -2.503408722986933e-06, 0.0, -4.57763671875e-05, 0.0, -0.0008107423782348633, -3.814697265625e-06, -0.00055694580078125, -1.52587890625e-05, -7.62939453125e-06, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -0.40415382385253906, -2.2649765014648438e-06, -0.05688285827636719, -1.9073486328125e-05, -2.133807174686808e-05, 0.0, -1.4327497410704382e-06, 0.0, -0.0036889314651489258, 0.0, -0.0001468658447265625, -1.9073486328125e-06, -5.841255187988281e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.8769406152142665, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -0.0014286041259765625, -6.67572021484375e-05, -6.318072337307967e-06, -2.0384788513183594e-05, -4.88758041683468e-06, -1.9073486328125e-06, -9.65605431701988e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.001434326171875, -0.00046539306640625, -8.940590305428486e-06, 0.0, -2.0992887584725395e-05, 0.0, -7.870556354522705, -7.152555099310121e-07, -0.001758575439453125, -1.71661376953125e-05, -7.62939453125e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.216683748555965, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n\n    def create_minion(self, p):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 2, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -7.360293388366699, -0.0054302215576171875, -0.0049266815185546875, -0.00010918975021922961, -1.8715856640483253e-05, -7.390974587906385e-06, -1.9073486328125e-06, -1.3828333976562135e-05, 0.0, -8.0108642578125e-05, -7.62939453125e-06, -0.2451190948486328, -1.71661376953125e-05, -1.847709972935263e-05, 0.0, -2.0981366105843335e-05, 0.0, -0.001137852668762207, 0.0, -0.0001506805419921875, -1.71661376953125e-05, -7.748603820800781e-06, 0.0, -0.2928285598754883, -0.0031795501708984375, -0.000217437744140625, -8.809565770206973e-05, -7.62939453125e-06, -0.0026254653930664062, -3.0517578125e-05, -0.001201629638671875, -7.62939453125e-06, -0.0001621246337890625, -0.2773609161376953, -1.239776611328125e-05, -3.24249267578125e-05, -0.011606216430664062, -0.0020608901977539062, -1.800043901312165e-05, -5.125993993715383e-06, -1.801892722141929e-05, 0.0, -0.0033651546109467745, -2.110004425048828e-05, -0.00409698486328125, -7.43865966796875e-05, -2.491474151611328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 297, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.465045448948217, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template6", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -8.455687522888184, -0.0002727508544921875, -1.5139465176616795e-05, -1.2278545909794047e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.7285396097577177e-05, 0.0, -0.00018167495727539062, 0.0, -0.00371551513671875, -1.9073486328125e-05, -5.602802048088051e-06, 0.0, -3.051935709663667e-05, 0.0, -0.00388336181640625, 0.0, -0.000152587890625, -9.5367431640625e-06, -7.748603820800781e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.60698581460872, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -0.0014286041259765625, -6.67572021484375e-05, -6.318072337307967e-06, -2.0384788513183594e-05, -4.88758041683468e-06, -1.9073486328125e-06, -9.65605431701988e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -0.001434326171875, -0.00046539306640625, -8.940590305428486e-06, 0.0, -2.0992887584725395e-05, 0.0, -8.601725578308105, -3.814697265625e-06, -0.0006084442138671875, -3.814697265625e-05, -9.655952453613281e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.653465265181808, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -7.073239326477051, -4.76837158203125e-05, -1.1920922133867862e-06, -1.1324880688334815e-05, -8.225440979003906e-06, 0.0, -2.503408722986933e-06, 0.0, -4.57763671875e-05, 0.0, -0.0008107423782348633, -3.814697265625e-06, -0.00055694580078125, -1.52587890625e-05, -7.62939453125e-06, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -1.5648183822631836, 0.0, -0.0046329498291015625, -2.6702880859375e-05, -6.94955961080268e-05, -1.9073486328125e-06, -6.0821057559223846e-06, 0.0, -0.007947087287902832, 0.0, -0.0001506805419921875, -3.814697265625e-06, -5.841255187988281e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.813652669421906, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(MinionDied(), ActionTag(Draw(),\n            PlayerSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "hole2": "MinionDied", "hole5": "PlayerSelector", "_type": "Template1", "hole1": 2, "hole3": "Draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -0.0014286041259765625, -6.67572021484375e-05, -6.318072337307967e-06, -2.0384788513183594e-05, -4.88758041683468e-06, -1.9073486328125e-06, -9.65605431701988e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -7.161142349243164, -1.2220940589904785, -0.0006133816787041724, -1.0728812412708066e-05, -8.29919008538127e-06, -1.9073486328125e-06, -0.09404993057250977, -0.016686439514160156, -0.001008400460705161, -0.25873860716819763, -0.00046539306640625, -0.053080376237630844, -0.0030821561813354492, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 96, 173, "2", "<EOS>", "2", "<EOS>", "Minion", "Died", "<EOS>", "Draw", "<EOS>", "Player", "Selector", "<EOS>"]}, {"score": -8.929120610855875, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, _):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "_"}], "_type": "arguments"}, "body": [{"hole0": 2, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -0.0014286041259765625, -6.67572021484375e-05, -6.318072337307967e-06, -2.0384788513183594e-05, -4.88758041683468e-06, -1.9073486328125e-06, -9.65605431701988e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -8.00521469116211, -2.09808349609375e-05, -2.47955322265625e-05, -9.775159924174659e-06, -7.62939453125e-06, -0.0010242462158203125, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, -0.4206094741821289, -8.10622896096902e-06, -0.00011444091796875, -0.48737335205078125, -0.0022954940795898438, -1.0251939784211572e-05, -8.702254490344785e-06, -5.4911353799980134e-05, 0.0, -0.005329012870788574, -1.728534698486328e-05, -0.004179954528808594, -4.1961669921875e-05, -2.491474151611328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "_", "<EOS>", 295, 120, 247, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.04912012580968, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def create_minion(self, p):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Frostwolf Grunt"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 2, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -8.686691284179688, -9.5367431640625e-06, -0.00017058849334716797, 0.0, -3.814697265625e-06, -0.00014495849609375, -6.866455078125e-05, -3.0517578125e-05, 0.0, -4.1961669921875e-05, -0.0699930191040039, -7.2479248046875e-05, -2.09808349609375e-05, -0.1607341766357422, -0.0001010894775390625, 0.0, -5.340576171875e-05, 0.0, -0.00015674822498112917, -4.768370445162873e-07, -2.09808349609375e-05, 0.0, -0.043717384338378906, -4.00543212890625e-05, -5.14984130859375e-05, -3.1470757676288486e-05, -0.00015437600086443126, -1.9430992324487306e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0008910357137210667, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.960462772236497e-07, -0.00017547607421875, 0.0, -2.86102294921875e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.409385681152344e-05, -2.861022494471399e-06, -0.0011196136474609375, 0.0, -0.0001583099365234375, -1.33514404296875e-05, -8.45193862915039e-05, 0.0, -0.01838207244873047, -0.0017719268798828125, -1.33514404296875e-05, -1.1563301086425781e-05, -1.71661376953125e-05, -0.0001621246337890625, -7.62939453125e-06, -0.0004215240478515625, -5.7220458984375e-06, -1.9073486328125e-05, -0.0458526611328125, -7.867813110351562e-06, -9.5367431640625e-05, -0.008502006530761719, -0.00315093994140625, -6.675697022728855e-06, -3.576272320060525e-06, -4.4951415475225076e-05, 0.0, -0.0024113652762025595, -7.748603820800781e-06, -0.0021677017211914062, -0.0001010894775390625, -2.6702880859375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Frostwolf", " ", "Grunt", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.194004735207955, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(Attack(), 1)])\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template10", "hole1": 2, "hole2": "Attack", "hole4": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -0.0014286041259765625, -6.67572021484375e-05, -6.318072337307967e-06, -2.0384788513183594e-05, -4.88758041683468e-06, -1.9073486328125e-06, -9.65605431701988e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -8.667862892150879, -0.07595252990722656, -0.0004954163450747728, -5.626530764857307e-05, -2.5510500563541427e-05, -7.152555099310121e-07, -0.11016356945037842, -1.5497195136049413e-06, -7.62939453125e-06, -0.10270023345947266, -2.09808349609375e-05, -0.23404501378536224, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 97, 179, "2", "<EOS>", "2", "<EOS>", "Attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -9.27572346237173, "inferred_code": "class FrostwolfGrunt(MinionCard):\n\n    def __init__(self):\n        super().__init__('Frostwolf Grunt', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Frostwolf Grunt", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 2, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "FrostwolfGrunt"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.407998726994265e-05, -1.4424220353248529e-05, -9.595905430614948e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.152536454668734e-06, -1.9073486328125e-06, -4.768370445162873e-07, -0.00077056884765625, -0.0014286041259765625, -6.67572021484375e-05, -6.318072337307967e-06, -2.0384788513183594e-05, -4.88758041683468e-06, -1.9073486328125e-06, -9.65605431701988e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -8.00521469116211, -2.09808349609375e-05, -2.47955322265625e-05, -9.775159924174659e-06, -7.62939453125e-06, -0.0010242462158203125, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, -1.2387304306030273, -5.841255187988281e-06, -4.00543212890625e-05, -0.019614219665527344, -0.0015783309936523438, -1.609312130312901e-05, -5.006777428206988e-06, -3.13622149406001e-05, 0.0, -0.0031578538473695517, -1.1444091796875e-05, -0.0033559799194335938, -9.34600830078125e-05, -3.063678741455078e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Frostwolf", "Grunt", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Frostwolf", " ", "Grunt", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -21.427604138851166, "inferred_code": "self.target.add_buff(Buff(Frostwolf()))\n", "model_output": {"body": [{"hole0": "Frostwolf", "_type": "Template50"}], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -3.814697265625e-06, -13.27678108215332, -7.725254058837891, -0.3439036011695862, -0.08165013790130615], "choice_history": [80, 159, 295, 117, 226, "Frostwolf", "<EOS>"]}, {"score": -22.691387176513672, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, -1.1444091796875e-05, -22.691375732421875], "choice_history": [80, 159, 294]}]}
{"index": 40, "beams": [{"score": -0.007220265717251095, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -0.0015106201171875, -4.57763671875e-05, -6.556489552167477e-06, -2.3007385607343167e-05, -7.152556463552173e-06, -1.9073486328125e-06, -7.426738739013672e-05, 0.0, -0.00010323524475097656, -1.9073486328125e-06, -0.0023193359375, -0.000335693359375, -4.7683579396107234e-07, 0.0, -2.932511233666446e-05, 0.0, -0.001903533935546875, -1.9073486328125e-06, -0.000141143798828125, -4.76837158203125e-05, -1.33514404296875e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.149077412934048, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -0.0015106201171875, -4.57763671875e-05, -6.556489552167477e-06, -2.3007385607343167e-05, -7.152556463552173e-06, -1.9073486328125e-06, -7.426738739013672e-05, 0.0, -0.00010323524475097656, -1.9073486328125e-06, -0.0023193359375, -0.000335693359375, -4.7683579396107234e-07, 0.0, -2.932511233666446e-05, 0.0, -7.143705368041992, -1.9073486328125e-06, -0.00019073486328125, -6.103515625e-05, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.435202596039062, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -0.0015106201171875, -4.57763671875e-05, -6.556489552167477e-06, -2.3007385607343167e-05, -7.152556463552173e-06, -1.9073486328125e-06, -7.426738739013672e-05, 0.0, -0.00010323524475097656, -1.9073486328125e-06, -0.0023193359375, -0.000335693359375, -4.7683579396107234e-07, 0.0, -2.932511233666446e-05, 0.0, -7.429474830627441, -2.861022494471399e-06, -0.00058746337890625, -1.52587890625e-05, -9.5367431640625e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.571671364467079, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "hole2": "ALL", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -7.069454193115234, -3.4332275390625e-05, -1.4305104514278355e-06, -1.2755388524965383e-05, -1.621246337890625e-05, -1.9073486328125e-06, -0.000392913818359375, 0.0, -6.496906280517578e-05, 0.0, -0.0007859468460083008, -1.9073486328125e-06, -0.0008182525634765625, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -0.39883995056152344, -2.1457672119140625e-06, -0.0979156494140625, -9.5367431640625e-06, -3.576255949155893e-07, 0.0, -2.849093289114535e-05, 0.0, -0.0024558305740356445, 0.0, -0.0001354217529296875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.395520683409472, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, p):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 1, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -0.0015106201171875, -4.57763671875e-05, -6.556489552167477e-06, -2.3007385607343167e-05, -7.152556463552173e-06, -1.9073486328125e-06, -7.426738739013672e-05, 0.0, -0.00010323524475097656, -1.9073486328125e-06, -7.435549736022949, -4.9591064453125e-05, -2.288818359375e-05, -1.3113007298670709e-05, -3.814697265625e-06, -0.0004024505615234375, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -3.4332275390625e-05, -0.9342012405395508, -3.814697265625e-06, -4.38690185546875e-05, -0.014392852783203125, -0.0027799606323242188, -4.410736892168643e-06, -1.4305104514278355e-06, -0.0004115096526220441, 0.0, -0.0030167095828801394, -1.9073486328125e-06, -0.0020503997802734375, -5.7220458984375e-05, -4.017353057861328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.440878924689706, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def create_minion(self, p):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Goldshire Footman"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 1, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -8.281209945678711, -7.62939453125e-06, -0.0002620220184326172, 0.0, -1.9073486328125e-06, -8.58306884765625e-05, -5.53131103515625e-05, -3.24249267578125e-05, 0.0, -2.6702880859375e-05, -0.014321327209472656, -9.1552734375e-05, -2.288818359375e-05, -0.028387069702148438, -7.62939453125e-05, 0.0, -2.47955322265625e-05, 0.0, -2.634490556374658e-05, -2.3841855067985307e-07, -2.09808349609375e-05, 0.0, -0.040966033935546875, -3.62396240234375e-05, -5.7220458984375e-05, -1.168244216387393e-05, -0.0001356600841972977, -1.215931297338102e-05, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0029193770606070757, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.1920928244535389e-07, -0.000270843505859375, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.826618194580078e-05, -2.384185791015625e-06, -0.0003986358642578125, -1.9073486328125e-06, -0.00045013427734375, -9.5367431640625e-06, -0.00013375282287597656, 0.0, -0.017597198486328125, -0.002262115478515625, -2.09808349609375e-05, -2.0265579223632812e-06, -7.62939453125e-06, -0.000133514404296875, -5.7220458984375e-06, -3.814697265625e-05, -9.5367431640625e-06, -1.33514404296875e-05, -0.03380870819091797, -1.9073486328125e-06, -8.20159912109375e-05, -0.007903099060058594, -0.0048503875732421875, -2.86102044810832e-06, -7.152555099310121e-07, -0.00033891142811626196, 0.0, -0.0015035858377814293, -1.9073486328125e-06, -0.0013113021850585938, -5.340576171875e-05, -4.00543212890625e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Goldshire", " ", "Footman", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.684130286228594, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n\n    def create_minion(self, p):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 1, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -7.850348472595215, -0.004704475402832031, -0.001865386962890625, -0.00018857131362892687, -1.943111237778794e-05, -1.2397762475302443e-05, -5.7220458984375e-06, -7.82012939453125e-05, 0.0, -0.0001010894775390625, -5.7220458984375e-06, -0.31842517852783203, -1.9073486328125e-05, -1.3112912711221725e-06, 0.0, -4.6848806960042566e-05, 0.0, -0.0006906986236572266, 0.0, -0.0001583099365234375, -1.9073486328125e-05, -7.748603820800781e-06, 0.0, -0.17188072204589844, -0.009291648864746094, -0.00012218952178955078, -3.1232797482516617e-05, -1.9073486328125e-06, -0.0029392242431640625, -1.71661376953125e-05, -0.0001621246337890625, -5.7220458984375e-06, -5.7220458984375e-05, -0.3021259307861328, -3.933906555175781e-06, -3.24249267578125e-05, -0.009818077087402344, -0.005069732666015625, -4.649151833291398e-06, -5.960462772236497e-07, -0.0005329845589585602, 0.0, -0.002249594312161207, -5.841255187988281e-06, -0.0027904510498046875, -7.43865966796875e-05, -3.063678741455078e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 297, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.706544158118618, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "hole2": "ALL", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -7.069454193115234, -3.4332275390625e-05, -1.4305104514278355e-06, -1.2755388524965383e-05, -1.621246337890625e-05, -1.9073486328125e-06, -0.000392913818359375, 0.0, -6.496906280517578e-05, 0.0, -0.0007859468460083008, -1.9073486328125e-06, -0.0008182525634765625, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -1.6258220672607422, 0.0, -0.0058383941650390625, -1.9073486328125e-05, -4.768298822455108e-07, 0.0, -4.053057637065649e-05, 0.0, -0.0024213790893554688, 0.0, -0.00011444091796875, -3.814697265625e-06, -7.62939453125e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.958530173472582, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, charge=True, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 2}], "keywords": [{"_type": "keyword", "arg": "charge", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "_type": "Call", "func": {"_type": "Name", "id": "Minion"}}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -0.0015106201171875, -4.57763671875e-05, -6.556489552167477e-06, -2.3007385607343167e-05, -7.152556463552173e-06, -1.9073486328125e-06, -7.426738739013672e-05, 0.0, -0.00010323524475097656, -1.9073486328125e-06, -7.435549736022949, -4.9591064453125e-05, -2.288818359375e-05, -1.3113007298670709e-05, -3.814697265625e-06, -0.0004024505615234375, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -3.4332275390625e-05, -1.2766332626342773, 0.0, -0.0006313323974609375, -0.0014438629150390625, -0.0001373291015625, -0.0003490447998046875, -6.103515625e-05, -5.53131103515625e-05, 0.0, -4.38690185546875e-05, -9.5367431640625e-06, -3.62396240234375e-05, 0.0, -1.9073486328125e-06, -7.914302113931626e-05, 0.0, 0.0, -7.62939453125e-06, -5.2809700719080865e-05, 0.0, -0.005120277404785156, -5.91278076171875e-05, -0.000934600830078125, -0.17866814136505127, -5.7220458984375e-06, -0.0006313323974609375, -4.00543212890625e-05, -3.814697265625e-06, 0.0, -0.038002967834472656, -0.0002193450927734375, -0.01594221591949463, -1.9073486328125e-06, -0.00081634521484375, -9.5367431640625e-06, -1.728534698486328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "2", "<EOS>", 291, 79, 271, "charge", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.041290638112514, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template6", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -9.034183502197266, -0.00048065185546875, -1.0490362910786644e-05, -3.159017433063127e-05, -4.768371127283899e-06, -3.814697265625e-06, -0.0001246929168701172, 0.0, -6.127357482910156e-05, 0.0, -0.0021228790283203125, -5.340576171875e-05, -2.026557694989606e-06, 0.0, -2.7656307793222368e-05, 0.0, -0.003353118896484375, 0.0, -0.0001544952392578125, -1.33514404296875e-05, -9.5367431640625e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.041773553829955, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, _):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "_"}], "_type": "arguments"}, "body": [{"hole0": 1, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -0.0015106201171875, -4.57763671875e-05, -6.556489552167477e-06, -2.3007385607343167e-05, -7.152556463552173e-06, -1.9073486328125e-06, -7.426738739013672e-05, 0.0, -0.00010323524475097656, -1.9073486328125e-06, -7.435549736022949, -4.9591064453125e-05, -2.288818359375e-05, -1.3113007298670709e-05, -3.814697265625e-06, -0.0004024505615234375, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -3.4332275390625e-05, -1.2254257202148438, -2.1457672119140625e-06, -0.0001049041748046875, -0.36643218994140625, -0.0032110214233398438, -2.3841840857130592e-07, -1.6689286894688848e-06, -0.00018632246064953506, 0.0, -0.005412578582763672, -3.814697265625e-06, -0.0024051666259765625, -3.814697265625e-05, -3.445148468017578e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "_", "<EOS>", 295, 120, 247, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.214044362493723, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(1, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -9.125404357910156, -0.004666328430175781, -0.00027616979787126184, -1.9431065084063448e-05, -8.344650268554688e-06, -5.53131103515625e-05, -0.05070244148373604, -1.1444091796875e-05, -0.0006059407605789602, 0.0, -0.028455734252929688, -1.9073486328125e-06, -5.960246198810637e-07, 0.0, -0.00024744082475081086, 0.0, -0.002567291259765625, 0.0, -0.000335693359375, -2.09808349609375e-05, -1.1563301086425781e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Goldshire", " ", "Footman", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.216287729592068, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 2, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -0.0015106201171875, -4.57763671875e-05, -6.556489552167477e-06, -2.3007385607343167e-05, -7.152556463552173e-06, -1.9073486328125e-06, -7.426738739013672e-05, 0.0, -0.00010323524475097656, -1.9073486328125e-06, -0.0023193359375, -0.000335693359375, -4.7683579396107234e-07, 0.0, -2.932511233666446e-05, 0.0, -9.210797309875488, -5.7220458984375e-06, -0.0003299713134765625, -2.86102294921875e-05, -1.3470649719238281e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "2", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.493653772092557, "inferred_code": "class GoldshireFootman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goldshire Footman', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Goldshire Footman", "_type": "Template15", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoldshireFootman"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.5549986427649856e-05, -3.2305197237292305e-05, -1.3351374946068972e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.960462772236497e-07, -3.814697265625e-06, -3.576278118089249e-07, -0.000469207763671875, -0.0015106201171875, -4.57763671875e-05, -6.556489552167477e-06, -2.3007385607343167e-05, -7.152556463552173e-06, -1.9073486328125e-06, -7.426738739013672e-05, 0.0, -0.00010323524475097656, -1.9073486328125e-06, -9.491085052490234, -3.814697265625e-06, -3.2901753002079204e-05, 0.0, -0.00010418891906738281, 0.0], "choice_history": [80, 159, 295, 88, 138, "Goldshire", "Footman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Goldshire", " ", "Footman", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 110, 202, "1", "<EOS>", "2", "<EOS>"]}, {"score": -22.57307243347168, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -22.57305908203125], "choice_history": [80, 159, 294]}]}
{"index": 41, "beams": [{"score": -0.2622400447763127, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole2": "ALL", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -0.20341968536376953, -0.0001087188720703125, -5.960462772236497e-07, -2.396105628577061e-05, -1.71661376953125e-05, 0.0, -7.272676157299429e-06, 0.0, -6.54458999633789e-05, -1.1444091796875e-05, -0.00012540817260742188, -7.62939453125e-06, -0.000141143798828125, -0.0001239776611328125, -3.814697265625e-06, 0.0, -0.0005799531936645508, -9.5367431640625e-06, -0.004421234130859375, -8.547247853130102e-05, -0.00025177001953125, -1.1444091796875e-05, -7.510187060688622e-06, -1.1920928244535389e-07, 4.761645868711639e-07, 0.0, -0.00410008430480957, -2.7418097943154862e-06, -8.392333984375e-05, -0.0001125335693359375, -0.00079345703125, -8.58306884765625e-05, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -0.0003892183303833008, -0.00018894672393798828, -0.0004978179931640625, -0.0013103485107421875, -0.00055694580078125, -0.0073578450828790665, -5.7220458984375e-06, -0.004611015319824219, -0.001312255859375, -3.814697265625e-06, 0.0, -0.010535240173339844, -6.866455078125e-05, 0.0, -0.001811981201171875, -0.0002269744873046875, -2.288818359375e-05, -0.0001583099365234375, 0.0, -0.0005303621292114258, -0.0008109807968139648, -2.0265579223632812e-06, -0.0001583099365234375, -3.62396240234375e-05, -0.0013408660888671875, -0.0001354217529296875, 0.0, -0.0012302398681640625, -1.1563301086425781e-05, -0.0034332275390625, -9.417517503607087e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.003149616066366434, -0.007442112546414137, -3.2782554626464844e-05], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 68, 260, "Both", "Player", "<EOS>"]}, {"score": -1.9413727573623873, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "_type": "Template6", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -1.8195171356201172, -0.0007648468017578125, -1.5735502529423684e-05, -4.31537046097219e-05, -3.814697265625e-06, 0.0, -0.00011290224210824817, 0.0, -5.3644176659872755e-05, -9.5367431640625e-06, -0.0010128021240234375, -3.24249267578125e-05, 0.0, -7.510183422709815e-06, -1.196704943140503e-06, -1.9073486328125e-06, -0.011381864547729492, -9.536738616588991e-07, -0.0001068115234375, -0.0001430511474609375, -0.013528823852539062, -0.0007467269897460938, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -0.0005714893341064453, -2.682209014892578e-05, -0.0001544952392578125, -0.0014743804931640625, -0.0003528594970703125, -0.0053292568773031235, -5.7220458984375e-06, -0.05663108825683594, -0.001033782958984375, -3.814697265625e-06, 0.0, -0.007281303405761719, -7.2479248046875e-05, 0.0, -0.001766204833984375, -0.00026702880859375, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0005092620849609375, -0.0007081031799316406, -2.0265579223632812e-06, -0.000225067138671875, -3.0517578125e-05, -0.0013332366943359375, -0.0001392364501953125, 0.0, -0.001171112060546875, -1.1682510375976562e-05, -0.0034475326538085938, -9.536726793157868e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0031264908611774445, -0.007703300565481186, -3.2782554626464844e-05], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 68, 260, "Both", "Player", "<EOS>"]}, {"score": -4.983052437726194, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "_type": "Template6", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -1.8195171356201172, -0.0007648468017578125, -1.5735502529423684e-05, -4.31537046097219e-05, -3.814697265625e-06, 0.0, -0.00011290224210824817, 0.0, -5.3644176659872755e-05, -9.5367431640625e-06, -0.0010128021240234375, -3.24249267578125e-05, 0.0, -7.510183422709815e-06, -1.196704943140503e-06, -1.9073486328125e-06, -0.011381864547729492, -9.536738616588991e-07, -0.0001068115234375, -0.0001430511474609375, -0.013528823852539062, -0.0007467269897460938, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -0.0005714893341064453, -2.682209014892578e-05, -0.0001544952392578125, -0.0014743804931640625, -0.0003528594970703125, -0.0053292568773031235, -5.7220458984375e-06, -3.0828170776367188, -0.000179290771484375, -0.04425160586833954, -0.00012028217315673828, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -5.055970084795263, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, minion_type\n            =MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "minion_type", "hole2": "ALL", "hole6": "MURLOC", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -3.9425182342529297, -0.0020122528076171875, -7.10462118149735e-05, -4.720687138615176e-05, -4.410743713378906e-06, 0.0, -0.0001492636074544862, -1.9073486328125e-06, -5.2094459533691406e-05, -5.7220458984375e-06, -0.001468658447265625, -1.33514404296875e-05, -1.52587890625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.0003108978271484375, -7.62939453125e-06, -0.026986122131347656, 0.0, -0.9165773391723633, 0.0, -9.72747802734375e-05, 0.0, -0.0001354217529296875, -7.62939453125e-06, -0.16495800018310547, -0.000244140625, 0.0, -2.09808349609375e-05, -2.028528797382023e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -5.616959069622723, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(2), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole2": "ALL", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 2, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -0.20341968536376953, -0.0001087188720703125, -5.960462772236497e-07, -2.396105628577061e-05, -1.71661376953125e-05, 0.0, -7.272676157299429e-06, 0.0, -6.54458999633789e-05, -1.1444091796875e-05, -0.00012540817260742188, -7.62939453125e-06, -0.000141143798828125, -0.0001239776611328125, -3.814697265625e-06, 0.0, -0.0005799531936645508, -9.5367431640625e-06, -0.004421234130859375, -8.547247853130102e-05, -0.00025177001953125, -1.1444091796875e-05, -7.510187060688622e-06, -1.1920928244535389e-07, 4.761645868711639e-07, 0.0, -0.00410008430480957, -2.7418097943154862e-06, -8.392333984375e-05, -0.0001125335693359375, -0.00079345703125, -8.58306884765625e-05, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -0.0003892183303833008, -0.00018894672393798828, -0.0004978179931640625, -0.0013103485107421875, -0.00055694580078125, -5.356306552886963, -3.254413604736328e-05, -0.0045318603515625, -0.0053863525390625, -1.9073486328125e-06, 0.0, -0.012063026428222656, -7.43865966796875e-05, -1.9073486328125e-06, -0.002025604248046875, -0.0002880096435546875, -2.09808349609375e-05, -7.2479248046875e-05, 0.0, -0.0006275177001953125, -0.0009443759918212891, -1.1920928244535389e-07, -0.0001583099365234375, -2.6702880859375e-05, -0.0013866424560546875, -0.000133514404296875, 0.0, -0.0012378692626953125, -1.1563301086425781e-05, -0.0033359527587890625, -1.0132769602932967e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0033633511047810316, -0.007078642025589943, -3.6597251892089844e-05], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "2", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 68, 260, "Both", "Player", "<EOS>"]}, {"score": -5.8070294614718065, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), Aura(ChangeAttack(\n            1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())))])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole2": "ALL", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -0.20341968536376953, -0.0001087188720703125, -5.960462772236497e-07, -2.396105628577061e-05, -1.71661376953125e-05, 0.0, -7.272676157299429e-06, 0.0, -6.54458999633789e-05, -1.1444091796875e-05, -0.00012540817260742188, -7.62939453125e-06, -0.000141143798828125, -0.0001239776611328125, -3.814697265625e-06, 0.0, -0.0005799531936645508, -9.5367431640625e-06, -0.004421234130859375, -8.547247853130102e-05, -0.00025177001953125, -1.1444091796875e-05, -7.510187060688622e-06, -1.1920928244535389e-07, 4.761645868711639e-07, 0.0, -0.00410008430480957, -2.7418097943154862e-06, -8.392333984375e-05, -0.0001125335693359375, -0.00079345703125, -8.58306884765625e-05, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -0.0003892183303833008, -0.00018894672393798828, -0.0004978179931640625, -0.0013103485107421875, -0.00055694580078125, -0.0073578450828790665, -5.7220458984375e-06, -0.004611015319824219, -0.001312255859375, -3.814697265625e-06, 0.0, -5.256522178649902, -0.0011882781982421875, -0.0006580352783203125, -0.2657918930053711, -0.0061588287353515625, -0.004446856677532196, -1.33514404296875e-05, -0.008265495300292969, -7.82012939453125e-05, -5.7220458984375e-06, 0.0, -0.004055976867675781, -4.57763671875e-05, -1.9073486328125e-06, -0.007171630859375, -0.0006427764892578125, -1.71661376953125e-05, -0.0001583099365234375, 0.0, -0.0006427764892578125, -0.0008414983749389648, -2.0265579223632812e-06, -9.34600830078125e-05, -3.24249267578125e-05, -0.0015201568603515625, -0.0001125335693359375, 0.0, -0.0015411376953125, -1.3589859008789062e-05, -0.0035266876220703125, -1.4305078366305679e-05, -9.5367431640625e-06, 0.0, -0.003697255626320839, -0.008649224415421486, -2.7179718017578125e-05], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 68, 260, "Both", "Player", "<EOS>"]}, {"score": -5.971181404088384, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, BEAST=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "BEAST", "hole2": "ALL", "hole6": "MURLOC", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -3.9425182342529297, -0.0020122528076171875, -7.10462118149735e-05, -4.720687138615176e-05, -4.410743713378906e-06, 0.0, -0.0001492636074544862, -1.9073486328125e-06, -5.2094459533691406e-05, -5.7220458984375e-06, -0.001468658447265625, -1.33514404296875e-05, -1.52587890625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.0003108978271484375, -7.62939453125e-06, -0.026986122131347656, 0.0, -1.5770130157470703, 0.0, -0.20455455780029297, 0.0, -0.0025081634521484375, -5.7220458984375e-06, -0.21290969848632812, -0.0002422332763671875, 0.0, -1.9073486328125e-05, -1.6702706489013508e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "BEAST", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.193163868509195, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothBothPlayer()))])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole2": "ALL", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothBothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -0.20341968536376953, -0.0001087188720703125, -5.960462772236497e-07, -2.396105628577061e-05, -1.71661376953125e-05, 0.0, -7.272676157299429e-06, 0.0, -6.54458999633789e-05, -1.1444091796875e-05, -0.00012540817260742188, -7.62939453125e-06, -0.000141143798828125, -0.0001239776611328125, -3.814697265625e-06, 0.0, -0.0005799531936645508, -9.5367431640625e-06, -0.004421234130859375, -8.547247853130102e-05, -0.00025177001953125, -1.1444091796875e-05, -7.510187060688622e-06, -1.1920928244535389e-07, 4.761645868711639e-07, 0.0, -0.00410008430480957, -2.7418097943154862e-06, -8.392333984375e-05, -0.0001125335693359375, -0.00079345703125, -8.58306884765625e-05, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -0.0003892183303833008, -0.00018894672393798828, -0.0004978179931640625, -0.0013103485107421875, -0.00055694580078125, -0.0073578450828790665, -5.7220458984375e-06, -0.004611015319824219, -0.001312255859375, -3.814697265625e-06, 0.0, -0.010535240173339844, -6.866455078125e-05, 0.0, -0.001811981201171875, -0.0002269744873046875, -2.288818359375e-05, -0.0001583099365234375, 0.0, -0.0005303621292114258, -0.0008109807968139648, -2.0265579223632812e-06, -0.0001583099365234375, -3.62396240234375e-05, -0.0013408660888671875, -0.0001354217529296875, 0.0, -0.0012302398681640625, -1.1563301086425781e-05, -0.0034332275390625, -9.417517503607087e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.003149616066366434, -5.620666027069092, -0.317604660987854, -0.00012803077697753906], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 68, 260, "Both", "Both", "Player", "<EOS>"]}, {"score": -6.427758402439849, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer())), Aura(ChangeHealth(1\n            ), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "_type": "Template6", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}, {"args": [{"hole0": 1, "_type": "Template74"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -1.8195171356201172, -0.0007648468017578125, -1.5735502529423684e-05, -4.31537046097219e-05, -3.814697265625e-06, 0.0, -0.00011290224210824817, 0.0, -5.3644176659872755e-05, -9.5367431640625e-06, -0.0010128021240234375, -3.24249267578125e-05, 0.0, -7.510183422709815e-06, -1.196704943140503e-06, -1.9073486328125e-06, -0.011381864547729492, -9.536738616588991e-07, -0.0001068115234375, -0.0001430511474609375, -4.3186540603637695, -0.0010166168212890625, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.0006870031356811523, -2.09808349609375e-05, -7.82012939453125e-05, -0.0026378631591796875, -0.0006389617919921875, -0.002484917640686035, -9.5367431640625e-06, -0.17689895629882812, -0.0001163482666015625, -5.7220458984375e-06, 0.0, -0.002574920654296875, -8.20159912109375e-05, -1.9073486328125e-06, -0.0044155120849609375, -0.0002651214599609375, -1.33514404296875e-05, -0.0001735687255859375, 0.0, -0.0004520416259765625, -0.0008071660995483398, -2.0265579223632812e-06, -0.0001373291015625, -3.0517578125e-05, -0.001373291015625, -0.00012969970703125, 0.0, -0.0011157989501953125, -1.3589859008789062e-05, -0.003376007080078125, -1.0251977982989047e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.003116356674581766, -0.008415576070547104, -3.0875205993652344e-05, -0.0026721954345703125, -5.7220458984375e-06, 0.0, 0.0, -0.0059195756912231445, -5.7220458984375e-06, -9.918212890625e-05, -0.016594886779785156, -0.0037975311279296875, -0.00019439496099948883, -0.0003108978271484375, -0.005298614501953125, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -0.0020829439163208008, -7.62939453125e-05, -1.9073486328125e-06, -0.008089065551757812, -0.0003871917724609375, -1.33514404296875e-05, -0.00012969970703125, -1.9073486328125e-06, -0.0007171630859375, -0.0009348392486572266, -2.0265579223632812e-06, -0.0001125335693359375, -2.86102294921875e-05, -0.0010662078857421875, -0.000110626220703125, 0.0, -0.0014781951904296875, -1.3470649719238281e-05, -0.0034227371215820312, -1.3470619705913123e-05, -9.5367431640625e-06, 0.0, -0.003137933788821101, -0.007709976751357317, -3.0875205993652344e-05], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 283, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 68, 260, "Both", "Player", "<EOS>", 40, 136, 19, 160, "Aura", "<EOS>", 283, 65, 256, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 68, 260, "Both", "Player", "<EOS>"]}, {"score": -6.431615960166255, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, MURLOC=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "MURLOC", "hole2": "ALL", "hole6": "MURLOC", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -3.9425182342529297, -0.0020122528076171875, -7.10462118149735e-05, -4.720687138615176e-05, -4.410743713378906e-06, 0.0, -0.0001492636074544862, -1.9073486328125e-06, -5.2094459533691406e-05, -5.7220458984375e-06, -0.001468658447265625, -1.33514404296875e-05, -1.52587890625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.0003108978271484375, -7.62939453125e-06, -0.026986122131347656, 0.0, -2.327831268310547, 0.0, -0.039936065673828125, -1.9073486328125e-06, -0.001277923583984375, -7.62939453125e-06, -0.0883951187133789, -0.0002193450927734375, 0.0, -1.9073486328125e-05, -3.5903894968214445e-07, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "MURLOC", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.817904600884553, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC)))])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole2": "ALL", "_type": "Template11", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -0.20341968536376953, -0.0001087188720703125, -5.960462772236497e-07, -2.396105628577061e-05, -1.71661376953125e-05, 0.0, -7.272676157299429e-06, 0.0, -6.54458999633789e-05, -1.1444091796875e-05, -0.00012540817260742188, -7.62939453125e-06, -0.000141143798828125, -0.0001239776611328125, -3.814697265625e-06, 0.0, -0.0005799531936645508, -9.5367431640625e-06, -0.004421234130859375, -8.547247853130102e-05, -0.00025177001953125, -1.1444091796875e-05, -7.510187060688622e-06, -1.1920928244535389e-07, 4.761645868711639e-07, 0.0, -0.00410008430480957, -2.7418097943154862e-06, -8.392333984375e-05, -0.0001125335693359375, -0.00079345703125, -8.58306884765625e-05, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -0.0003892183303833008, -0.00018894672393798828, -0.0004978179931640625, -0.0013103485107421875, -0.00055694580078125, -0.0073578450828790665, -5.7220458984375e-06, -0.004611015319824219, -0.001312255859375, -3.814697265625e-06, 0.0, -0.010535240173339844, -6.866455078125e-05, 0.0, -6.566880226135254, -0.00011444091796875, -1.9073486328125e-05, -0.0005855560302734375, -1.1444091796875e-05, -0.0008869171142578125, -0.0007655620574951172, -2.1457672119140625e-06, -0.0012912750244140625, -2.6702880859375e-05, -0.001232147216796875, -0.000148773193359375, 0.0, -0.0007915496826171875, -1.3589859008789062e-05, -0.0034399032592773438, -8.106222594506107e-06], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>"]}, {"score": -7.354620111197164, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC,\n            create_minion=MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "create_minion", "hole2": "ALL", "hole6": "MURLOC", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 1, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -3.9425182342529297, -0.0020122528076171875, -7.10462118149735e-05, -4.720687138615176e-05, -4.410743713378906e-06, 0.0, -0.0001492636074544862, -1.9073486328125e-06, -5.2094459533691406e-05, -5.7220458984375e-06, -0.001468658447265625, -1.33514404296875e-05, -1.52587890625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.0003108978271484375, -7.62939453125e-06, -0.026986122131347656, 0.0, -3.2572426795959473, 0.0, -0.014166831970214844, 0.0, -0.0023193359375, -5.7220458984375e-06, -0.10670948028564453, -0.000225067138671875, 0.0, -2.288818359375e-05, -8.365163921553176e-07, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "create_minion", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.866389502491529, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsDamaged()))])\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "_type": "Template6", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template23", "hole1": 1, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template69", "hole1": "IsDamaged"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -1.8195171356201172, -0.0007648468017578125, -1.5735502529423684e-05, -4.31537046097219e-05, -3.814697265625e-06, 0.0, -0.00011290224210824817, 0.0, -5.3644176659872755e-05, -9.5367431640625e-06, -0.0010128021240234375, -3.24249267578125e-05, 0.0, -7.510183422709815e-06, -1.196704943140503e-06, -1.9073486328125e-06, -0.011381864547729492, -9.536738616588991e-07, -0.0001068115234375, -0.0001430511474609375, -0.013528823852539062, -0.0007467269897460938, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -0.0005714893341064453, -2.682209014892578e-05, -0.0001544952392578125, -0.0014743804931640625, -0.0003528594970703125, -0.0053292568773031235, -5.7220458984375e-06, -5.193848133087158, -1.9073486328125e-06, -0.003574371337890625, -3.24249267578125e-05, -4.887569048150908e-06, -0.5083816647529602, -0.30482199788093567, -4.005352093372494e-05], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 109, 200, "1", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 61, 250, "Minion", "Selector", "<EOS>", "Is", "Damaged", "<EOS>"]}, {"score": -9.420357356661953, "inferred_code": "class GrimscaleOracle(MinionCard):\n\n    def __init__(self):\n        super().__init__('Grimscale Oracle', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Grimscale Oracle", "_type": "Template6", "hole1": 1, "hole2": "ALL"}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GrimscaleOracle"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.2278481335670222e-05, -2.8132995794294402e-05, -3.1470757676288486e-05, -9.5367431640625e-06, -6.4849853515625e-05, 0.0, -2.1457672119140625e-06, -1.71661376953125e-05, -6.079673767089844e-06, -2.47955322265625e-05, -1.8195171356201172, -0.0007648468017578125, -1.5735502529423684e-05, -4.31537046097219e-05, -3.814697265625e-06, 0.0, -0.00011290224210824817, 0.0, -5.3644176659872755e-05, -9.5367431640625e-06, -7.5989789962768555, -0.000629425048828125, 0.0, -5.7220458984375e-06, -1.19232754514087e-06, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Grimscale", "Oracle", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Grimscale", " ", "Oracle", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -22.37019920349121, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -22.370195388793945], "choice_history": [80, 159, 294]}]}
{"index": 42, "beams": [{"score": -0.0631585025496122, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"args": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -0.033972740173339844, -0.001434326171875, -9.5367431640625e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.340576171875e-05, -0.0001316070556640625, -0.004128456115722656, -1.9073486328125e-05, -5.7220458984375e-06, -0.0068558454513549805, -0.00034606456756591797, -1.9073486328125e-06, -5.340576171875e-05, -5.7220458984375e-06, -0.00026675828848965466, -1.9073486328125e-06, -0.00034332275390625, -7.62939453125e-06, -0.00023508071899414062, -7.64130090828985e-05, 0.0, -0.000457763671875, -1.71661376953125e-05, -0.004620223306119442, -1.9073486328125e-06, -7.987019671418238e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "6", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -5.552519307888588, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 6, "hole4": {"args": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -5.499619483947754, 0.0, -0.0004903078079223633, 0.0, -0.0015087127685546875, 0.0, -0.028036117553710938, -0.0010585784912109375, -1.33514404296875e-05, -1.1444091796875e-05, -4.00543212890625e-05, -3.814697265625e-06, -4.57763671875e-05, -0.000152587890625, -0.004322052001953125, -1.71661376953125e-05, -5.7220458984375e-06, -0.006505250930786133, -0.0003287792205810547, -1.9073486328125e-06, -4.38690185546875e-05, -7.62939453125e-06, -0.0002677117008715868, -1.9073486328125e-06, -0.0003662109375, -7.62939453125e-06, -0.00023508071899414062, -7.617459050379694e-05, 0.0, -0.0004596710205078125, -1.71661376953125e-05, -0.004604007117450237, -1.9073486328125e-06, -7.987019671418238e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "6", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "6", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -5.761079511340739, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"args": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 6, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -0.033972740173339844, -0.001434326171875, -9.5367431640625e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.340576171875e-05, -0.0001316070556640625, -0.004128456115722656, -1.9073486328125e-05, -5.7220458984375e-06, -0.0068558454513549805, -0.00034606456756591797, -1.9073486328125e-06, -5.340576171875e-05, -5.7220458984375e-06, -0.00026675828848965466, -1.9073486328125e-06, -0.00034332275390625, -7.62939453125e-06, -0.00023508071899414062, -7.64130090828985e-05, 0.0, -0.000457763671875, -1.71661376953125e-05, -5.702500343322754, 0.0, -5.0783142796717584e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "6", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>", 110, 202, "6", "<EOS>", "6", "<EOS>"]}, {"score": -5.842906444612453, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(hero(BattleAxe()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"hole0": "hero", "_type": "Template59", "hole1": [{"hole0": "BattleAxe", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -3.463348388671875, -0.000881195068359375, -1.2914413213729858, -0.48351988196372986, -1.71661376953125e-05, -0.07470893859863281, -7.62939453125e-06, -0.4671952724456787, -0.04559177905321121, -5.364412118069595e-06, -0.000247955322265625, -7.62939453125e-06, -0.005832968279719353, -2.0265579223632812e-06, -5.352492371457629e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 28, 241, "hero", "<EOS>", 282, 68, 260, "Battle", "Axe", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -6.681672094636468, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(6Died(BattleAxe()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"hole0": "6Died", "_type": "Template59", "hole1": [{"hole0": "BattleAxe", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -3.463348388671875, -0.000881195068359375, -0.38110315799713135, -1.613057255744934, -0.0001474618911743164, -5.7220458984375e-06, -0.08528900146484375, -3.4332275390625e-05, -1.040016531944275, -0.080781951546669, -5.125993993715383e-06, -0.0002384185791015625, -7.62939453125e-06, -0.0066254036501049995, -2.0265579223632812e-06, -8.308879478136078e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 28, 241, "6", "Died", "<EOS>", 282, 68, 260, "Battle", "Axe", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -6.731369457343327, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(6Died(Frozen()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"hole0": "6Died", "_type": "Template59", "hole1": [{"hole0": "Frozen", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -3.463348388671875, -0.000881195068359375, -0.38110315799713135, -1.613057255744934, -0.0001474618911743164, -5.7220458984375e-06, -0.08528900146484375, -3.4332275390625e-05, -1.0636457204818726, -0.10238635540008545, -0.0019321441650390625, -1.9073486328125e-06, -0.009450523182749748, -1.1920928244535389e-07, -4.0769380575511605e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 28, 241, "6", "Died", "<EOS>", 282, 68, 260, "Frozen", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -6.73689027756447, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"args": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 3, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -0.033972740173339844, -0.001434326171875, -9.5367431640625e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.340576171875e-05, -0.0001316070556640625, -0.004128456115722656, -1.9073486328125e-05, -5.7220458984375e-06, -0.0068558454513549805, -0.00034606456756591797, -1.9073486328125e-06, -5.340576171875e-05, -5.7220458984375e-06, -0.00026675828848965466, -1.9073486328125e-06, -0.00034332275390625, -7.62939453125e-06, -0.00023508071899414062, -7.64130090828985e-05, 0.0, -0.000457763671875, -1.71661376953125e-05, -6.678339958190918, -1.9073486328125e-06, -2.002714973059483e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "6", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>", 110, 202, "3", "<EOS>", "6", "<EOS>"]}, {"score": -6.766929657133943, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(heroAttack(6),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"hole0": "heroAttack", "_type": "Template59", "hole1": [{"_type": "Num", "n": 6}]}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -3.463348388671875, -0.000881195068359375, -1.2914413213729858, -1.6206659078598022, -3.814697265625e-06, -1.9073486328125e-06, -0.000255584716796875, -3.0517578125e-05, -0.3267468810081482, -3.814697265625e-06, -0.0004253387451171875, -0.00014495849609375, -0.05289826542139053, -5.960462772236497e-07, -3.57623903255444e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 28, 241, "hero", "Attack", "<EOS>", 282, 47, 165, "6", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -6.7813363589568425, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Heal(player=EnemyPlayer\n            ()), MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "UserPicker", "_type": "Template52"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -0.033972740173339844, -0.001434326171875, -9.5367431640625e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.340576171875e-05, -0.0001316070556640625, -6.079449653625488, -0.0045452117919921875, 0.0, -0.2718505859375, -0.000263214111328125, -0.008321762084960938, -0.010219573974609375, -1.9073486328125e-06, -0.042995572090148926, 0.0, -0.043094635009765625, -1.9073486328125e-06, -0.21393465995788574, -9.298322765971534e-06, -1.9073486328125e-06, -0.055194854736328125, -0.0026226043701171875, -0.0007839202880859375, -7.82012939453125e-05, 0.0, -5.53131103515625e-05, -3.814697265625e-06, -0.0021725278347730637, -1.1920928244535389e-07, -2.8967735488549806e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 135, 19, 160, "Heal", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 55, 227, "User", "Picker", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -6.875347543314518, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(6(BattleAxe()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"hole0": "6", "_type": "Template59", "hole1": [{"hole0": "BattleAxe", "_type": "Template77"}]}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -3.463348388671875, -0.000881195068359375, -0.38110315799713135, -2.135655403137207, -1.33514404296875e-05, -0.03557777404785156, -1.52587890625e-05, -0.785069465637207, -0.058582037687301636, -3.6954863844584906e-06, -0.0002727508544921875, -7.62939453125e-06, -0.0047113546170294285, -2.0265579223632812e-06, -5.865091225132346e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 28, 241, "6", "<EOS>", 282, 68, 260, "Battle", "Axe", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -6.905818575377651, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(player(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"args": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Name", "id": "player"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -0.033972740173339844, -0.001434326171875, -9.5367431640625e-06, -9.5367431640625e-06, -4.76837158203125e-05, -1.9073486328125e-06, -5.340576171875e-05, -0.0001316070556640625, -0.004128456115722656, -1.9073486328125e-05, -5.7220458984375e-06, -6.0920305252075195, 0.0, -7.62939453125e-05, -0.7571344375610352, -5.7220458984375e-06, -0.0016010493272915483, 0.0, -9.72747802734375e-05, -1.9073486328125e-06, -0.00031685829162597656, -7.927404658403248e-05, 0.0, -0.00054168701171875, -1.33514404296875e-05, -0.004051020834594965, -1.9073486328125e-06, -7.867811291362159e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "player", "<EOS>", 282, 47, 165, "6", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -7.011313018692817, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Heal(6), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole8": {"args": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "PALADIN", "hole6": "MECH", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 7, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -6.510096549987793, -0.000148773193359375, -0.0009152276325039566, -1.7046926586772315e-05, -0.0030757698696106672, -2.86102294921875e-05, -0.00012671588046941906, -2.288818359375e-05, -0.005315081216394901, -1.9073486328125e-06, -0.0033550262451171875, -1.9073486328125e-06, -0.000858306884765625, 0.0, -0.0007268190383911133, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -0.42748069763183594, 0.0, -0.010494351387023926, 0.0, -0.02922821044921875, -0.0001735687255859375, -3.814697265625e-06, -1.9073486328125e-06, -0.0011272430419921875, 0.0, -9.5367431640625e-06, -0.0001354217529296875, -0.0001850128173828125, -7.05718994140625e-05, -5.7220458984375e-06, -0.00845944881439209, -0.00036847591400146484, -1.9073486328125e-06, -0.000415802001953125, -5.7220458984375e-06, -0.00013708323240280151, -7.748603820800781e-06, -0.00069427490234375, -3.814697265625e-06, -0.00014340877532958984, -3.6239478504285216e-05, 0.0, -0.000576019287109375, -9.5367431640625e-06, -0.0058736298233270645, -1.9073486328125e-06, -5.960462203802308e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "6", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -7.245119833165944, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(6Axe(6), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 6)\n", "model_output": {"body": [{"body": [{"hole0": "Guardian of Kings", "hole2": "PALADIN", "_type": "Template11", "hole1": 7, "hole4": {"hole0": "6Axe", "_type": "Template59", "hole1": [{"_type": "Num", "n": 6}]}, "hole3": "battlecry"}, {"hole0": 5, "_type": "Template27", "hole1": 6}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -0.0025310516357421875, -0.000675201416015625, -7.152555099310121e-07, -1.251697449333733e-05, -1.7046884750016034e-05, -5.7220458984375e-06, -4.6014782128622755e-05, -8.58306884765625e-05, -0.004099726676940918, -2.3841855067985307e-07, -0.0002002716064453125, 0.0, -0.001483917236328125, 0.0, -3.463348388671875, -0.000881195068359375, -0.38110315799713135, -3.0229430198669434, -0.0037401914596557617, -2.86102294921875e-05, -0.06979179382324219, -2.6702880859375e-05, -0.22587625682353973, -7.62939453125e-06, -0.00106048583984375, -0.0001201629638671875, -0.06610094010829926, -3.099440846199286e-06, -4.279558197595179e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Guardian", " ", "of", " ", "Kings", "<EOS>", "7", "<EOS>", "PALADIN", "<EOS>", "battlecry", "<EOS>", 28, 241, "6", "Axe", "<EOS>", 282, 47, 165, "6", "<EOS>", 110, 202, "5", "<EOS>", "6", "<EOS>"]}, {"score": -13.521978859499754, "inferred_code": "class GuardianOfKings(MinionCard):\n\n    def __init__(self):\n        super().__init__('Guardian of Kings', 7, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        game.other_player.hero.3(player, game)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Guardian of Kings"}, {"_type": "Num", "n": 7}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "die", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "3", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GuardianOfKings"}], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -2.6702880859375e-05, -4.9591064453125e-05, -4.57763671875e-05, -6.222543015610427e-05, -0.0006054597906768322, -1.931181213876698e-05, -1.41858699862496e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -4.768371127283899e-06, -2.288818359375e-05, -7.16446590423584, -1.33514404296875e-05, -4.0769504266791046e-05, 0.0, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-05, -1.33514404296875e-05, -9.72747802734375e-05, -0.0002880096435546875, -2.86102294921875e-05, 0.0, -5.91278076171875e-05, 0.0, -4.410743713378906e-06, 0.0, -1.52587890625e-05, 0.0, -0.004756927490234375, -3.814697265625e-06, -0.0001201629638671875, -5.388134377426468e-05, -2.9921531677246094e-05, -2.8133377782069147e-05, -5.14984130859375e-05, -0.00075637421105057, -5.340576171875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.00664698937907815, -5.9604644775390625e-06, -4.57763671875e-05, 0.0, -6.29425048828125e-05, 0.0, -1.537799835205078e-05, -1.0728830375228426e-06, -0.000576019287109375, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.057033538818359375, -1.9073486328125e-06, -0.050881385803222656, -0.09638023376464844, -2.09808349609375e-05, -1.1365910768508911, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -7.82012939453125e-05, -1.1444091796875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0014362335205078125, -0.0003604888916015625, -8.96453857421875e-05, 0.0, -0.24310386180877686, -5.9604644775390625e-06, -0.001491546630859375, -1.9073486328125e-06, -0.1359415054321289, 0.0, 0.0, -0.00023651123046875, -1.33514404296875e-05, -2.86102294921875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -0.0004134178161621094, -8.702254490344785e-06, -0.3143777847290039, -3.4332275390625e-05, -2.09808349609375e-05, -1.33514404296875e-05, -2.47955322265625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -3.445148468017578e-05, 0.0, -0.000217437744140625, 0.0, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -1.1920928244535389e-07, -4.38690185546875e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.060962586052483e-05, -0.0011806488037109375, 0.0, -0.05912017822265625, -0.000370025634765625, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001850128173828125, 0.0, -0.004627227783203125, -1.9073486328125e-06, -0.00341796875, -8.58306884765625e-05, -0.0002193450927734375, -4.768370445162873e-07, -0.06759703159332275, -1.9073486328125e-06, -0.003337860107421875, -0.004616737365722656, -3.814697265625e-06, -0.005710601806640625, -7.62939453125e-06, -0.00042724609375, -3.814697265625e-06, -0.0032682418823242188, -0.2476348876953125, -9.5367431640625e-06, -1.1444091796875e-05, -0.003856658935546875, 0.0, -0.496368408203125, 0.0, -0.0002231597900390625, 0.0, -0.012439846992492676, -1.6689286894688848e-06, -0.0322643518447876, -2.1457672119140625e-06, -0.006709843873977661, -0.00012492353562265635, -1.6564793586730957, -7.62939453125e-06, -0.0074462890625, -0.8650407791137695, 0.0, -0.8177618980407715, 0.0, -0.001842498779296875, 0.0, -0.0011892318725585938, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Guardian", "Of", "Kings", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Guardian", " ", "of", " ", "Kings", "<EOS>", 47, 165, "7", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "3", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>"]}, {"score": -20.111146926879883, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, -1.71661376953125e-05, -20.111129760742188], "choice_history": [80, 159, 294]}]}
{"index": 43, "beams": [{"score": -0.36770846570027516, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsTarget", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeAttack", "hole2": 3}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -0.022393226623535156, -0.0009021759033203125, -0.0001773834228515625, -0.16321945190429688, -4.768371127283899e-06, -0.003200531005859375, -8.392333984375e-05, -0.00040662288665771484, -0.005375862121582031, -0.0780535563826561, 0.0, -8.20159912109375e-05, -8.392333984375e-05, 0.0, 0.0, -0.000247955322265625, -7.62939453125e-05, -1.1444091796875e-05, -0.00012969970703125, -0.013360023498535156, -0.00049591064453125, -0.0013390779495239258, 0.0, -4.76837158203125e-05, -0.001926422119140625, -2.09808349609375e-05, -0.031436678022146225, -5.7220458984375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.000942230224609375, -7.62939453125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 290, 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Target", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -2.11536472724913, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(player=\n            BothPlayer()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "BothPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeAttack", "hole2": 3}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -0.022393226623535156, -0.0009021759033203125, -0.0001773834228515625, -1.9842185974121094, 0.0, -4.9591064453125e-05, -7.62939453125e-06, -0.0018520355224609375, -3.814697265625e-06, -3.814697265625e-06, -0.0001163482666015625, -2.47955322265625e-05, 0.0, 0.0, -0.0001583099365234375, -0.000156402587890625, -1.9073486328125e-06, -7.2479248046875e-05, -0.03335285186767578, -0.0005054473876953125, -0.0013866424560546875, 0.0, -5.91278076171875e-05, -0.0016307830810546875, -2.86102294921875e-05, -0.023868316784501076, -5.340576171875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.000698089599609375, -8.58306884765625e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 290, 79, 271, "player", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -3.237743197624809, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsMinion()), ActionTag(Give(ChangeAttack(3)),\n            SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsMinion", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeAttack", "hole2": 3}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -0.022393226623535156, -0.0009021759033203125, -0.0001773834228515625, -0.16321945190429688, -4.768371127283899e-06, -0.003200531005859375, -8.392333984375e-05, -0.00040662288665771484, -0.005375862121582031, -2.9064159393310547, -0.001270294189453125, -0.0021724700927734375, -0.0001316070556640625, -1.9073486328125e-06, 0.0, -0.00026702880859375, -9.918212890625e-05, -2.09808349609375e-05, -0.000469207763671875, -0.04894733428955078, -0.0013713836669921875, -0.0015239715576171875, 0.0, -5.53131103515625e-05, -0.002925872802734375, -2.09808349609375e-05, -0.03150033578276634, -5.14984130859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0011005401611328125, -7.62939453125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 290, 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Minion", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -4.264150405918485, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(2)),\n            SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsTarget", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeAttack", "hole2": 2}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -0.022393226623535156, -0.0009021759033203125, -0.0001773834228515625, -0.16321945190429688, -4.768371127283899e-06, -0.003200531005859375, -8.392333984375e-05, -0.00040662288665771484, -0.005375862121582031, -0.0780535563826561, 0.0, -8.20159912109375e-05, -8.392333984375e-05, 0.0, 0.0, -0.000247955322265625, -7.62939453125e-05, -1.1444091796875e-05, -0.00012969970703125, -0.013360023498535156, -0.00049591064453125, -0.0013390779495239258, 0.0, -4.76837158203125e-05, -0.001926422119140625, -2.09808349609375e-05, -3.9278900623321533, -2.47955322265625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.00096893310546875, -7.05718994140625e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 290, 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Target", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -5.361214901005155, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(\n            ChangeHealth(1))]), SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsTarget", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "ChangeAttack", "_type": "Template28", "hole1": 1, "hole2": "ChangeHealth", "hole3": 1}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -0.022393226623535156, -0.0009021759033203125, -0.0001773834228515625, -0.16321945190429688, -4.768371127283899e-06, -0.003200531005859375, -8.392333984375e-05, -0.00040662288665771484, -0.005375862121582031, -0.0780535563826561, 0.0, -8.20159912109375e-05, -8.392333984375e-05, 0.0, 0.0, -0.000247955322265625, -7.62939453125e-05, -1.1444091796875e-05, -0.00012969970703125, -5.010120391845703, -0.0024700164794921875, -0.00010883808135986328, -0.0001277923583984375, -1.1444091796875e-05, -0.0024857521057128906, -0.0003204345703125, -0.0008335113525390625, -0.0077877044677734375, -9.5367431640625e-06, -0.017495274543762207, -7.259845733642578e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.0012149810791015625, -0.0001125335693359375, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 290, 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Target", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 50, 203, "Change", "Attack", "<EOS>", "1", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -5.686930714790947, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsSpell()), ActionTag(Give(ChangeAttack(3)), SelfSelector\n            ()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsSpell", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeAttack", "hole2": 3}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -0.022393226623535156, -0.0009021759033203125, -0.0001773834228515625, -0.16321945190429688, -4.768371127283899e-06, -0.003200531005859375, -8.392333984375e-05, -0.00040662288665771484, -0.005375862121582031, -5.377716541290283, -4.76837158203125e-05, -0.0039844512939453125, -0.000324249267578125, -1.9073486328125e-06, 0.0, -0.00032806396484375, -7.43865966796875e-05, -1.9073486328125e-05, -0.000225067138671875, -0.026856422424316406, -0.0005779266357421875, -0.0013505220413208008, 0.0, -5.14984130859375e-05, -0.0020656585693359375, -1.9073486328125e-05, -0.03286087140440941, -5.340576171875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0009765625, -7.62939453125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 290, 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Spell", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -5.774286302421729, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget(), condition=Null), PlayerSelector())])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsTarget", "_type": "Template77"}}, {"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"hole0": "PlayerSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -3.851132392883301, -0.0005435943603515625, -0.0001239776611328125, -1.0218029022216797, -6.556510470545618e-06, -0.048178672790527344, -1.33514404296875e-05, -0.0035535097122192383, -0.00232696533203125, -0.15754815936088562, 0.0, -0.000278472900390625, -5.340576171875e-05, -0.0225372314453125, -3.099440846199286e-06, -0.11294364929199219, -0.0005645751953125, -2.6702880859375e-05, -3.814697265625e-06, -0.00331878662109375, 0.0, -0.5057001113891602, -7.68899917602539e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 291, 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Target", "<EOS>", 79, 271, "condition", "<EOS>", 20, 162, "Null", "<EOS>", 68, 260, "Player", "Selector", "<EOS>"]}, {"score": -5.835118437801725, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget()), ActionTag(Give(ChangeAttack(1)),\n            SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsTarget", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeAttack", "hole2": 1}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -0.022393226623535156, -0.0009021759033203125, -0.0001773834228515625, -0.16321945190429688, -4.768371127283899e-06, -0.003200531005859375, -8.392333984375e-05, -0.00040662288665771484, -0.005375862121582031, -0.0780535563826561, 0.0, -8.20159912109375e-05, -8.392333984375e-05, 0.0, 0.0, -0.000247955322265625, -7.62939453125e-05, -1.1444091796875e-05, -0.00012969970703125, -0.013360023498535156, -0.00049591064453125, -0.0013390779495239258, 0.0, -4.76837158203125e-05, -0.001926422119140625, -2.09808349609375e-05, -5.499023914337158, -1.33514404296875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0008220672607421875, -6.306171417236328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 290, 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Target", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -5.876963319872743, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(player=\n            BothPlayer(), condition=Null), PlayerSelector())])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"hole0": "PlayerSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -3.851132392883301, -0.0005435943603515625, -0.0001239776611328125, -0.46178627014160156, 0.0, -0.0001583099365234375, -3.814697265625e-06, -0.001529693603515625, -1.9073486328125e-06, -3.814697265625e-06, -0.000217437744140625, -5.53131103515625e-05, -0.36913394927978516, -2.861022494471399e-06, -0.4862041473388672, -0.00060272216796875, -5.340576171875e-05, -3.814697265625e-06, -0.005992889404296875, 0.0, -0.6557884216308594, -7.510185241699219e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 291, 79, 271, "player", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "condition", "<EOS>", 20, 162, "Null", "<EOS>", 68, 260, "Player", "Selector", "<EOS>"]}, {"score": -6.072682101895339, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(player=\n            BothPlayer(), condition=MinionIsTarget()), ActionTag(Give(\n            ChangeAttack(3)), SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsTarget", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeAttack", "hole2": 3}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -3.851132392883301, -0.0005435943603515625, -0.0001239776611328125, -0.46178627014160156, 0.0, -0.0001583099365234375, -3.814697265625e-06, -0.001529693603515625, -1.9073486328125e-06, -3.814697265625e-06, -0.000217437744140625, -5.53131103515625e-05, -0.36913394927978516, -2.861022494471399e-06, -0.9722366333007812, -1.33514404296875e-05, -0.15731525421142578, -0.008156776428222656, -0.05491115525364876, -1.9073486328125e-06, -4.9591064453125e-05, -0.0001125335693359375, 0.0, 0.0, -0.0012407302856445312, -0.0001392364501953125, -3.814697265625e-06, -0.0001201629638671875, -0.11459732055664062, -0.0007305145263671875, -0.0031919479370117188, 0.0, -5.14984130859375e-05, -0.0019283294677734375, -1.71661376953125e-05, -0.02864670567214489, -4.57763671875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0008544921875, -6.866455078125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 291, 79, 271, "player", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Target", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -6.575545700823909, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(condition=\n            MinionIsTarget(), condition=Null), HeroSelector())])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "condition", "value": {"hole0": "MinionIsTarget", "_type": "Template77"}}, {"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -3.851132392883301, -0.0005435943603515625, -0.0001239776611328125, -1.0218029022216797, -6.556510470545618e-06, -0.048178672790527344, -1.33514404296875e-05, -0.0035535097122192383, -0.00232696533203125, -0.15754815936088562, 0.0, -0.000278472900390625, -5.340576171875e-05, -0.0225372314453125, -3.099440846199286e-06, -0.11294364929199219, -0.0005645751953125, -2.6702880859375e-05, -3.814697265625e-06, -0.00331878662109375, 0.0, -1.306340217590332, -0.0006961821927689016, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 291, 79, 271, "condition", "<EOS>", 33, 260, "Minion", "Is", "Target", "<EOS>", 79, 271, "condition", "<EOS>", 20, 162, "Null", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>"]}, {"score": -6.745407401269063, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(CharacterDamaged(player=\n            BothPlayer(), picker=BothPlayer()), ActionTag(Give(ChangeAttack\n            (3)), SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "effects", "hole3": {"_type": "List", "elts": [{"args": [{"keywords": [{"_type": "keyword", "arg": "player", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "BothPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterDamaged"}}, {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeAttack", "hole2": 3}, {"hole0": "SelfSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -0.012241363525390625, -0.0003458261489868164, -1.33514404296875e-05, -8.20159912109375e-05, -0.000614166259765625, -0.00194549560546875, -0.000324249267578125, -4.57763671875e-05, 0.0, -0.009899497032165527, -1.9073486328125e-06, -0.000640869140625, -6.4849853515625e-05, -0.0005779266357421875, -0.000316619873046875, -1.9073486328125e-06, -0.0012432336807250977, -0.002887129783630371, -0.00168609619140625, -3.851132392883301, -0.0005435943603515625, -0.0001239776611328125, -0.46178627014160156, 0.0, -0.0001583099365234375, -3.814697265625e-06, -0.001529693603515625, -1.9073486328125e-06, -3.814697265625e-06, -0.000217437744140625, -5.53131103515625e-05, -1.2418813705444336, 0.0, -5.14984130859375e-05, -2.288818359375e-05, -0.4484586715698242, -3.814697265625e-06, -1.9073486328125e-06, -0.0005664825439453125, -2.288818359375e-05, 0.0, 0.0, -0.006314277648925781, -0.000118255615234375, -1.9073486328125e-06, -3.4332275390625e-05, -0.6589727401733398, -0.0004444122314453125, -0.0025615692138671875, 0.0, -4.9591064453125e-05, -0.001720428466796875, -1.9073486328125e-05, -0.024429675191640854, -4.38690185546875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.00048828125, -8.7738037109375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 40, 135, 19, 160, "Character", "Damaged", "<EOS>", 291, 79, 271, "player", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 68, 260, "Self", "Selector", "<EOS>"]}, {"score": -7.316899719331445, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, Damaged=True)\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 7, "hole2": "Damaged", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -0.00717926025390625, -3.0517578125e-05, -1.1324843399052043e-05, 0.0, -0.0005412666359916329, -8.463859558105469e-06, -7.0709123611450195, -3.6954863844584906e-06, -0.23154258728027344, -0.0004329681396484375, -0.00021982192993164062, -0.003171086311340332], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "7", "<EOS>", "Damaged", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.898702266575697, "inferred_code": "class GurubashiBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gurubashi Berserker', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 7, effects=[Effect(Damaged(), ActionTag(Give(\n            Frozen()), SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Gurubashi Berserker", "_type": "Template15", "hole1": 5, "hole2": "ALL"}, {"hole0": 2, "hole2": "Damaged", "hole5": "SelfSelector", "_type": "Template1", "hole1": 7, "hole4": [{"hole0": "Frozen", "_type": "Template77"}], "hole3": "Give"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GurubashiBerserker"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008361419313587248, -6.615908932872117e-05, -1.5497195136049413e-06, -1.71661376953125e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -6.29425048828125e-05, -0.0011615753173828125, -0.00022125244140625, -4.6491513785440475e-06, -3.528594606905244e-05, -9.894371032714844e-06, -9.5367431640625e-06, -2.7179487005923875e-05, -2.0265579223632812e-06, -0.0002040863037109375, -7.05718994140625e-05, -5.193572998046875, -1.5284996032714844, -4.6967830712674186e-05, -1.0013547580456361e-05, -0.0013146396959200501, -8.106231689453125e-06, -0.0019260644912719727, -0.00018227096006739885, -0.029624221846461296, -0.003344416618347168, -1.9073486328125e-06, -0.6396913528442383, -0.002422332763671875, -0.16548490524291992, -0.0055800676345825195, -0.3241403102874756, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Gurubashi", "Berserker", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Gurubashi", " ", "Berserker", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 96, 176, "2", "<EOS>", "7", "<EOS>", "Damaged", "<EOS>", "Give", "<EOS>", 282, 68, 260, "Frozen", "<EOS>", "Self", "Selector", "<EOS>"]}, {"score": -23.846019744873047, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -23.84601593017578], "choice_history": [80, 159, 294]}]}
{"index": 44, "beams": [{"score": -0.07559055520394509, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hammer of Wrath"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -0.023606300354003906, -6.67572021484375e-05, -0.0002579663705546409, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -3.814697265625e-06, -5.7220458984375e-06, -0.015582084655761719, -0.0012722015380859375, -0.00012969970703125, 0.0, -0.000125885009765625, -1.9073486328125e-06, -3.886161357513629e-05, 0.0, -1.728534698486328e-05, 0.0, -0.0008487701416015625, -3.814697265625e-05, -3.62396240234375e-05, -4.029192859889008e-05, -8.45193862915039e-05, -2.5510591513011605e-05, -9.5367431640625e-06, -0.00023496006906498224, -0.0001239776611328125, -1.52587890625e-05, -2.09808349609375e-05, -0.001699819345958531, -5.91278076171875e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001010894775390625, -5.960462772236497e-07, -0.0014705657958984375, 0.0, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -7.43865966796875e-05, -1.52587890625e-05, -5.841255187988281e-06, -0.0008087158203125, -1.9073486328125e-06, -9.34600830078125e-05, -0.0016050338745117188, -0.0005359649658203125, -0.00372922420501709, 0.0, -0.00016021728515625, -1.9073486328125e-06, -0.0001201629638671875, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.0002484321594238281, -1.1444091796875e-05, -0.0006656646728515625, -2.3841855067985307e-07, -0.00032687163911759853, -3.2305710192304105e-05, -0.0020160675048828125, -2.09808349609375e-05, -3.8623809814453125e-05, -3.814697265625e-06, -3.814697265625e-06, -8.0108642578125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0011272430419921875, -2.1219253540039062e-05, -1.311301275563892e-06, -0.0020198822021484375, -5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -0.0003108978271484375, -6.67572021484375e-05, -3.814697265625e-06, -8.7738037109375e-05, -1.33514404296875e-05, -4.9233436584472656e-05, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.000335693359375, -1.9073486328125e-06, -1.1444091796875e-05, -1.7881393432617188e-05, -9.34600830078125e-05, -5.7220458984375e-06, -0.0011138916015625, -0.0001392364501953125, -0.001161856227554381, -0.00038564199348911643, -0.0003490447998046875, -1.9073486328125e-06, -7.2479248046875e-05, -0.0006618499755859375, -0.0002002716064453125, 0.0, -0.0001163482666015625, 0.0, -6.008148193359375e-05, 0.0, -0.0016831159591674805, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -4.120803889401913, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Hammer of Wrath", "_type": "Template17", "hole1": 4, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -4.091626167297363, -0.005474090576171875, -7.796283171046525e-05, -8.666514622746035e-05, -0.0008723735809326172, -1.9073486328125e-05, -4.279613131075166e-05, -2.86102294921875e-05, -3.325890065752901e-05, -1.9073486328125e-06, -0.0015544891357421875, 0.0, -0.000293731689453125, -1.71661376953125e-05, -7.82012939453125e-05, -3.814697265625e-06, 0.0, -4.76837158203125e-05, -2.86102294921875e-05, -1.9073486328125e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -0.0001468658447265625, -3.62396240234375e-05, -2.3841855067985307e-07, -0.0048809051513671875, -7.62939453125e-06, -3.814697265625e-06, -3.24249267578125e-05, -0.000213623046875, -8.58306884765625e-05, -3.814697265625e-06, -6.4849853515625e-05, -2.288818359375e-05, -5.841255187988281e-05, -5.7220458984375e-06, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -0.000278472900390625, -1.9073486328125e-06, -1.1444091796875e-05, -1.9788742065429688e-05, -0.0001087188720703125, -5.7220458984375e-06, -0.0011606216430664062, -0.0001316070556640625, -0.0011609038338065147, -0.00036573404213413596, -0.0004787445068359375, -1.9073486328125e-06, -6.29425048828125e-05, -0.000858306884765625, -0.0001926422119140625, 0.0, -0.000102996826171875, 0.0, -6.198883056640625e-05, 0.0, -0.0017021894454956055, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Hammer", " ", "of", " ", "Wrath", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -4.65988776068658, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hammer of Wrath", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -0.023606300354003906, -6.67572021484375e-05, -0.0002579663705546409, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -3.814697265625e-06, -5.7220458984375e-06, -4.219904899597168, -0.010234832763671875, -0.0006461881566792727, -0.00016331671213265508, -0.2965935468673706, -5.555152893066406e-05, -7.712749356869608e-05, -8.392333984375e-05, -0.04439590126276016, -7.62939453125e-06, -0.017887115478515625, -1.1920928244535389e-07, -0.008395195007324219, -9.34600830078125e-05, -0.012509346008300781, 0.0, 0.0, -7.43865966796875e-05, -8.392333984375e-05, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -0.000579833984375, -3.0517578125e-05, -2.3841855067985307e-07, -0.00806427001953125, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -0.000209808349609375, -0.000102996826171875, -3.814697265625e-06, -6.866455078125e-05, -1.9073486328125e-05, -5.435943603515625e-05, -5.7220458984375e-06, -1.33514404296875e-05, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -0.00029754638671875, -1.9073486328125e-06, -1.33514404296875e-05, -1.7881393432617188e-05, -0.000125885009765625, -5.7220458984375e-06, -0.001163482666015625, -0.0001239776611328125, -0.0012718719663098454, -0.0003528594388626516, -0.0004863739013671875, -1.9073486328125e-06, -7.2479248046875e-05, -0.0009021759033203125, -0.0001583099365234375, 0.0, -0.0001068115234375, 0.0, -6.29425048828125e-05, 0.0, -0.0016391277313232422, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hammer", " ", "of", " ", "Wrath", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.688200215745184, "inferred_code": "class HammerOfTheWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hammer of Wrath"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfTheWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -5.615082740783691, -0.00281445006839931, -0.00015902517770882696, -0.0005435943603515625, -3.814697265625e-06, -5.7220458984375e-06, -0.00019085407257080078, -1.2040138244628906e-05, -9.298318218498025e-06, -5.53131103515625e-05, -0.02054119110107422, -6.67572021484375e-05, -0.0002890774921979755, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -1.3470649719238281e-05, 0.0, -0.000492095947265625, -3.814697265625e-06, -5.7220458984375e-06, -0.017993927001953125, -0.0010242462158203125, -0.0001316070556640625, 0.0, -0.000125885009765625, -1.9073486328125e-06, -4.219934999127872e-05, 0.0, -1.537799835205078e-05, 0.0, -0.000820159912109375, -4.00543212890625e-05, -3.4332275390625e-05, -3.9457496313843876e-05, -8.45193862915039e-05, -2.5510591513011605e-05, -9.5367431640625e-06, -0.0002369866124354303, -0.000125885009765625, -1.52587890625e-05, -2.09808349609375e-05, -0.0016900605987757444, -5.91278076171875e-05, -5.340576171875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -9.5367431640625e-05, -5.960462772236497e-07, -0.0014629364013671875, 0.0, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -7.2479248046875e-05, -1.52587890625e-05, -5.841255187988281e-06, -0.0008087158203125, -1.9073486328125e-06, -9.1552734375e-05, -0.00157928466796875, -0.0005283355712890625, -0.0037626028060913086, 0.0, -0.00016021728515625, -1.9073486328125e-06, -0.0001201629638671875, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.0002484321594238281, -1.1444091796875e-05, -0.000667572021484375, -2.3841855067985307e-07, -0.00032687163911759853, -3.2305710192304105e-05, -0.0018939971923828125, -2.09808349609375e-05, -3.8623809814453125e-05, -3.814697265625e-06, -3.814697265625e-06, -8.0108642578125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0011234283447265625, -2.1219253540039062e-05, -1.311301275563892e-06, -0.0020341873168945312, -5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -0.00031280517578125, -6.67572021484375e-05, -3.814697265625e-06, -8.7738037109375e-05, -1.33514404296875e-05, -4.9233436584472656e-05, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.000335693359375, -1.9073486328125e-06, -1.1444091796875e-05, -1.7881393432617188e-05, -9.34600830078125e-05, -5.7220458984375e-06, -0.0011138916015625, -0.0001392364501953125, -0.0011620944133028388, -0.00038564199348911643, -0.0003490447998046875, -1.9073486328125e-06, -7.2479248046875e-05, -0.000659942626953125, -0.0002002716064453125, 0.0, -0.0001163482666015625, 0.0, -6.008148193359375e-05, 0.0, -0.0016831159591674805, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "The", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.477759765401601, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hammer of Wrath"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -0.023606300354003906, -6.67572021484375e-05, -0.0002579663705546409, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -3.814697265625e-06, -5.7220458984375e-06, -0.015582084655761719, -0.0012722015380859375, -0.00012969970703125, 0.0, -0.000125885009765625, -1.9073486328125e-06, -3.886161357513629e-05, 0.0, -1.728534698486328e-05, 0.0, -0.0008487701416015625, -3.814697265625e-05, -3.62396240234375e-05, -4.029192859889008e-05, -8.45193862915039e-05, -2.5510591513011605e-05, -9.5367431640625e-06, -0.00023496006906498224, -0.0001239776611328125, -1.52587890625e-05, -2.09808349609375e-05, -6.403101444244385, -1.9073486328125e-05, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -8.20159912109375e-05, -8.344646857949556e-07, -0.0015468597412109375, 0.0, -7.62939453125e-06, -3.814697265625e-05, -7.62939453125e-06, -0.000152587890625, -2.288818359375e-05, -3.933906555175781e-06, -0.0008296966552734375, -1.9073486328125e-06, -8.7738037109375e-05, -0.0014772415161132812, -0.0006237030029296875, -0.004274606704711914, 0.0, -0.000152587890625, -3.814697265625e-06, -0.0001068115234375, -3.814697265625e-06, -2.86102294921875e-05, -3.814697265625e-06, -0.0002636909484863281, -1.1444091796875e-05, -0.000690460205078125, -2.3841855067985307e-07, -0.0003259180230088532, -3.0040735509828664e-05, -0.0020771026611328125, -2.09808349609375e-05, -3.8623809814453125e-05, -3.814697265625e-06, -3.814697265625e-06, -8.20159912109375e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.001110076904296875, -2.1219253540039062e-05, -1.311301275563892e-06, -0.002025604248046875, -5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -0.0003185272216796875, -6.67572021484375e-05, -3.814697265625e-06, -8.20159912109375e-05, -1.33514404296875e-05, -4.9233436584472656e-05, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.0003376007080078125, -1.9073486328125e-06, -1.1444091796875e-05, -1.7881393432617188e-05, -9.5367431640625e-05, -5.7220458984375e-06, -0.0011148452758789062, -0.0001392364501953125, -0.0011648330837488174, -0.00038564199348911643, -0.0003509521484375, -1.9073486328125e-06, -7.2479248046875e-05, -0.000659942626953125, -0.0001983642578125, 0.0, -0.0001163482666015625, 0.0, -6.008148193359375e-05, 0.0, -0.0016831159591674805, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.5490500321884255, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer Wrath', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hammer Wrath", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -0.023606300354003906, -6.67572021484375e-05, -0.0002579663705546409, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -3.814697265625e-06, -5.7220458984375e-06, -4.219904899597168, -0.010234832763671875, -0.0006461881566792727, -0.00016331671213265508, -1.3652046918869019, -0.4058570861816406, -0.4489764869213104, -7.62939453125e-06, -0.02515888214111328, -1.1920928244535389e-07, -0.009253501892089844, -9.72747802734375e-05, -0.015089035034179688, -1.9073486328125e-06, 0.0, -8.20159912109375e-05, -8.20159912109375e-05, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -0.000583648681640625, -3.0517578125e-05, -2.3841855067985307e-07, -0.007597923278808594, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -0.00020599365234375, -0.000102996826171875, -3.814697265625e-06, -6.866455078125e-05, -2.09808349609375e-05, -5.435943603515625e-05, -5.7220458984375e-06, -1.33514404296875e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -0.000301361083984375, -1.9073486328125e-06, -1.33514404296875e-05, -1.7881393432617188e-05, -0.000125885009765625, -5.7220458984375e-06, -0.0011625289916992188, -0.0001220703125, -0.0012905638432130218, -0.00035107129951938987, -0.0004940032958984375, -1.9073486328125e-06, -7.2479248046875e-05, -0.000926971435546875, -0.0001659393310546875, 0.0, -0.0001068115234375, 0.0, -6.29425048828125e-05, 0.0, -0.0016525983810424805, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hammer", " ", "Wrath", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.590447012914211, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.<UNK>()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hammer of Wrath"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -0.023606300354003906, -6.67572021484375e-05, -0.0002579663705546409, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -3.814697265625e-06, -5.7220458984375e-06, -0.015582084655761719, -0.0012722015380859375, -0.00012969970703125, 0.0, -0.000125885009765625, -1.9073486328125e-06, -3.886161357513629e-05, 0.0, -1.728534698486328e-05, 0.0, -0.0008487701416015625, -3.814697265625e-05, -3.62396240234375e-05, -4.029192859889008e-05, -8.45193862915039e-05, -2.5510591513011605e-05, -9.5367431640625e-06, -0.00023496006906498224, -0.0001239776611328125, -1.52587890625e-05, -2.09808349609375e-05, -0.001699819345958531, -5.91278076171875e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001010894775390625, -5.960462772236497e-07, -0.0014705657958984375, 0.0, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -7.43865966796875e-05, -1.52587890625e-05, -5.841255187988281e-06, -0.0008087158203125, -1.9073486328125e-06, -9.34600830078125e-05, -0.0016050338745117188, -0.0005359649658203125, -0.00372922420501709, 0.0, -0.00016021728515625, -1.9073486328125e-06, -0.0001201629638671875, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.0002484321594238281, -1.1444091796875e-05, -0.0006656646728515625, -2.3841855067985307e-07, -0.00032687163911759853, -3.2305710192304105e-05, -0.0020160675048828125, -2.09808349609375e-05, -3.8623809814453125e-05, -3.814697265625e-06, -3.814697265625e-06, -8.0108642578125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0011272430419921875, -2.1219253540039062e-05, -1.311301275563892e-06, -0.0020198822021484375, -5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -0.0003108978271484375, -6.67572021484375e-05, -3.814697265625e-06, -8.7738037109375e-05, -1.33514404296875e-05, -4.9233436584472656e-05, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.000335693359375, -1.9073486328125e-06, -1.1444091796875e-05, -1.7881393432617188e-05, -9.34600830078125e-05, -5.7220458984375e-06, -0.0011138916015625, -0.0001392364501953125, -0.001161856227554381, -0.00038564199348911643, -0.0003490447998046875, -1.9073486328125e-06, -7.2479248046875e-05, -0.0006618499755859375, -0.0002002716064453125, 0.0, -0.0001163482666015625, 0.0, -6.008148193359375e-05, 0.0, -6.516537666320801, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -6.708650482822122, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Hammer of Wrath", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -5.187140464782715, -0.1114187240600586, -1.9073338989983313e-05, -0.0004562139220070094, -0.0064220428466796875, -1.9311904907226562e-05, -5.292891728458926e-05, -0.003276824951171875, -0.42595160007476807, -1.52587890625e-05, -0.02640056610107422, -1.9073486328125e-06, -0.27161598205566406, -0.04419994354248047, -0.40517234802246094, 0.0, -0.00042724609375, 0.0, -0.21785461902618408, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Hammer", " ", "of", " ", "Wrath", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.836466572302726, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hammer of Wrath"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 2, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -0.023606300354003906, -6.67572021484375e-05, -0.0002579663705546409, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -3.814697265625e-06, -5.7220458984375e-06, -0.015582084655761719, -0.0012722015380859375, -0.00012969970703125, 0.0, -0.000125885009765625, -1.9073486328125e-06, -3.886161357513629e-05, 0.0, -1.728534698486328e-05, 0.0, -0.0008487701416015625, -3.814697265625e-05, -3.62396240234375e-05, -4.029192859889008e-05, -8.45193862915039e-05, -2.5510591513011605e-05, -9.5367431640625e-06, -0.00023496006906498224, -0.0001239776611328125, -1.52587890625e-05, -2.09808349609375e-05, -0.001699819345958531, -5.91278076171875e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001010894775390625, -5.960462772236497e-07, -0.0014705657958984375, 0.0, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -7.43865966796875e-05, -1.52587890625e-05, -5.841255187988281e-06, -0.0008087158203125, -1.9073486328125e-06, -9.34600830078125e-05, -0.0016050338745117188, -0.0005359649658203125, -0.00372922420501709, 0.0, -0.00016021728515625, -1.9073486328125e-06, -0.0001201629638671875, -1.9073486328125e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.0002484321594238281, -1.1444091796875e-05, -0.0006656646728515625, -2.3841855067985307e-07, -0.00032687163911759853, -3.2305710192304105e-05, -0.0020160675048828125, -2.09808349609375e-05, -3.8623809814453125e-05, -3.814697265625e-06, -3.814697265625e-06, -8.0108642578125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0011272430419921875, -2.1219253540039062e-05, -1.311301275563892e-06, -0.0020198822021484375, -5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, -0.0003108978271484375, -6.67572021484375e-05, -3.814697265625e-06, -8.7738037109375e-05, -1.33514404296875e-05, -4.9233436584472656e-05, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.000335693359375, -1.9073486328125e-06, -1.1444091796875e-05, -1.7881393432617188e-05, -9.34600830078125e-05, -5.7220458984375e-06, -0.0011138916015625, -0.0001392364501953125, -6.762671947479248, -8.094310760498047e-05, -0.000171661376953125, -7.62939453125e-06, -6.29425048828125e-05, -0.0005435943603515625, -0.0001068115234375, 0.0, -9.1552734375e-05, 0.0, -6.961822509765625e-05, 0.0, -0.0017619132995605469, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "2", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -6.87522742982943, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer Wrath Wrath', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hammer Wrath Wrath", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -0.023606300354003906, -6.67572021484375e-05, -0.0002579663705546409, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -3.814697265625e-06, -5.7220458984375e-06, -4.219904899597168, -0.010234832763671875, -0.0006461881566792727, -0.00016331671213265508, -1.3652046918869019, -1.1093988418579102, -0.0002115790412062779, -7.2479248046875e-05, -0.0813215970993042, -5.7220458984375e-06, -0.013933181762695312, -1.1920928244535389e-07, -0.010599136352539062, -8.0108642578125e-05, -0.013637542724609375, -1.9073486328125e-06, 0.0, -7.43865966796875e-05, -8.58306884765625e-05, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -0.0005016326904296875, -3.0517578125e-05, -2.3841855067985307e-07, -0.009098052978515625, -5.7220458984375e-06, -5.7220458984375e-06, -3.0517578125e-05, -0.00020599365234375, -0.0001010894775390625, -3.814697265625e-06, -6.866455078125e-05, -1.9073486328125e-05, -5.435943603515625e-05, -5.7220458984375e-06, -1.33514404296875e-05, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -0.00029754638671875, -1.9073486328125e-06, -1.33514404296875e-05, -1.7881393432617188e-05, -0.0001277923583984375, -5.7220458984375e-06, -0.0011663436889648438, -0.0001220703125, -0.0012697288766503334, -0.0003528594388626516, -0.00049591064453125, -1.9073486328125e-06, -7.2479248046875e-05, -0.00090789794921875, -0.00016021728515625, 0.0, -0.0001068115234375, 0.0, -6.29425048828125e-05, 0.0, -0.0016411542892456055, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hammer", " ", "Wrath", " ", "Wrath", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.190473774082136, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, overload=3)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hammer of Wrath"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"hole0": 3, "_type": "Template78"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -0.023606300354003906, -6.67572021484375e-05, -0.0002579663705546409, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -3.814697265625e-06, -5.7220458984375e-06, -0.015582084655761719, -0.0012722015380859375, -0.00012969970703125, 0.0, -0.000125885009765625, -1.9073486328125e-06, -3.886161357513629e-05, 0.0, -1.728534698486328e-05, 0.0, -0.0008487701416015625, -3.814697265625e-05, -3.62396240234375e-05, -4.029192859889008e-05, -8.45193862915039e-05, -2.5510591513011605e-05, -9.5367431640625e-06, -0.00023496006906498224, -0.0001239776611328125, -1.52587890625e-05, -2.09808349609375e-05, -0.001699819345958531, -5.91278076171875e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001010894775390625, -5.960462772236497e-07, -0.0014705657958984375, 0.0, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -7.43865966796875e-05, -1.52587890625e-05, -5.841255187988281e-06, -0.0008087158203125, -1.9073486328125e-06, -9.34600830078125e-05, -6.962976455688477, -0.017969131469726562, -0.00035248848143965006, -3.540513716870919e-05, -0.0035581588745117188, -1.71661376953125e-05, -0.0001506805419921875, -3.814697265625e-06, 0.0, -4.1961669921875e-05, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0002574920654296875, -1.728534698486328e-05, -4.768370445162873e-07, -0.1413736343383789, -7.62939453125e-06, -7.62939453125e-06, -3.4332275390625e-05, -0.000301361083984375, -0.000102996826171875, -1.9073486328125e-06, -6.29425048828125e-05, -1.33514404296875e-05, -5.233287811279297e-05, -3.814697265625e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.000301361083984375, -1.9073486328125e-06, -1.52587890625e-05, -1.800060272216797e-05, -0.000255584716796875, -3.814697265625e-06, -0.0011777877807617188, -0.0001163482666015625, -0.0014857954811304808, -0.00042116636177524924, -0.0005130767822265625, -1.9073486328125e-06, -7.05718994140625e-05, -0.0008640289306640625, -0.00022125244140625, 0.0, -0.0001163482666015625, 0.0, -6.389617919921875e-05, 0.0, -0.001681208610534668, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hammer", " ", "of", " ", "Wrath", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 78, 261, "3", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.2392149243423205, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Hammer of Wrath", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -5.187140464782715, -0.1114187240600586, -1.9073338989983313e-05, -0.0004562139220070094, -0.0064220428466796875, -1.9311904907226562e-05, -5.292891728458926e-05, -0.003276824951171875, -0.42595160007476807, -1.52587890625e-05, -0.02640056610107422, -1.9073486328125e-06, -1.4496526718139648, -0.000232696533203125, -3.62396240234375e-05, -1.9073486328125e-06, 0.0, -3.0517578125e-05, -0.0001373291015625, -5.7220458984375e-06, 0.0, 0.0, 0.0, 0.0, -0.0001354217529296875, -3.635883331298828e-05, -3.576278118089249e-07, -0.011698722839355469, -7.62939453125e-06, -5.7220458984375e-06, -2.09808349609375e-05, -0.0002422332763671875, -8.7738037109375e-05, -1.9073486328125e-06, -5.340576171875e-05, -2.288818359375e-05, -6.0439109802246094e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -0.0002841949462890625, -1.9073486328125e-06, -1.1444091796875e-05, -1.7762184143066406e-05, -0.0001678466796875, -5.7220458984375e-06, -0.0011959075927734375, -0.000125885009765625, -0.001372709171846509, -0.0003560780896805227, -0.000598907470703125, -1.9073486328125e-06, -6.866455078125e-05, -0.000957489013671875, -0.0002574920654296875, 0.0, -0.0001068115234375, 0.0, -6.580352783203125e-05, 0.0, -0.0017118453979492188, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Hammer", " ", "of", " ", "Wrath", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "3", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.504530204463663, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Hammer of Wrath", "_type": "Template13", "hole1": "DRUID", "hole2": "COMMON"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -5.187140464782715, -0.1114187240600586, -1.9073338989983313e-05, -0.0004562139220070094, -0.0064220428466796875, -1.9311904907226562e-05, -5.292891728458926e-05, -0.003276824951171875, -1.6174274682998657, -2.0265579223632812e-06, -0.0001888275146484375, -1.9073486328125e-06, -0.140289306640625, -0.013703346252441406, -0.049042701721191406, 0.0, -0.009634971618652344, 0.0, -0.3572286367416382, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Hammer", " ", "of", " ", "Wrath", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 116, 224, 19, 160, "player", "<EOS>", "draw", "<EOS>"]}, {"score": -7.7946643959766035, "inferred_code": "class HammerOfWrath(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hammer of Wrath', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Hammer of Wrath", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HammerOfWrath"}], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -0.0004520416259765625, -0.00092315673828125, -4.38690185546875e-05, -2.7060237698606215e-05, -0.0013872361741960049, -0.004420415498316288, -3.4570690331747755e-05, -0.000537872314453125, -1.9073486328125e-06, -5.7220458984375e-06, -0.00017178058624267578, -1.7762184143066406e-05, -8.463855920126662e-06, -5.91278076171875e-05, -5.187140464782715, -0.1114187240600586, -1.9073338989983313e-05, -0.0004562139220070094, -0.0064220428466796875, -1.9311904907226562e-05, -5.292891728458926e-05, -0.003276824951171875, -0.42595160007476807, -1.52587890625e-05, -0.02640056610107422, -1.9073486328125e-06, -0.27161598205566406, -0.04419994354248047, -1.1111516952514648, 0.0, -9.5367431640625e-06, 0.0, -0.006938934326171875, 0.0, -0.05161607265472412, -4.768370445162873e-07, -0.5397512912750244, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Hammer", "Of", "Wrath", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Hammer", " ", "of", " ", "Wrath", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 224, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "draw", "<EOS>"]}, {"score": -18.446483612060547, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-9.72747802734375e-05, -1.71661376953125e-05, -18.446369171142578], "choice_history": [80, 159, 294]}]}
{"index": 45, "beams": [{"score": -0.3277873654341761, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.divine_shield = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Attribute", "attr": "divine_shield", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -0.11045265197753906, -1.9073486328125e-06, -0.00055694580078125, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, -9.894371032714844e-06, -3.9934315282152966e-05, -0.005069732666015625, -4.00543212890625e-05, -9.5367431640625e-06, -0.0004291534423828125, -2.288818359375e-05, -1.1444091796875e-05, -2.288818359375e-05, -9.34600830078125e-05, -1.71661376953125e-05, -6.520748138427734e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -1.9073486328125e-06, -0.00440216064453125, -1.835809598560445e-05, -0.0065746307373046875, -0.0003070831298828125, -0.001743316650390625, -0.014788627624511719, -2.6702880859375e-05, -0.006024360656738281, -0.000125885009765625, -0.0015411376953125, 0.0, -0.0002117156982421875, -3.814697265625e-06, -0.00080108642578125, -2.8729431505780667e-05, -0.01854199543595314, -7.748603820800781e-06, -0.011651039123535156, -0.00081634521484375, -0.0003067239886149764, -2.384185791015625e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -3.824046839886222, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.divine_shield = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Attribute", "attr": "divine_shield", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -3.4219958782196045, 0.0, -0.23724329471588135, -2.3841855067985307e-07, -0.014003753662109375, 0.0, -0.00034737586975097656, -3.814697265625e-06, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -1.52587890625e-05, -3.24249267578125e-05, 0.0, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, -7.987022399902344e-06, -5.4238757002167404e-05, -0.0057506561279296875, -4.00543212890625e-05, -9.5367431640625e-06, -0.000484466552734375, -2.288818359375e-05, -1.1444091796875e-05, -2.09808349609375e-05, -8.7738037109375e-05, -1.9073486328125e-05, -6.711483001708984e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.0042877197265625, -1.8477303456165828e-05, -0.006440162658691406, -0.00032806396484375, -0.0017757415771484375, -0.01523590087890625, -2.6702880859375e-05, -0.006359100341796875, -0.0001277923583984375, -0.001598358154296875, 0.0, -0.000213623046875, -3.814697265625e-06, -0.0008106231689453125, -2.884864079533145e-05, -0.018421588465571404, -7.748603820800781e-06, -0.011670112609863281, -0.0008182525634765625, -0.0003087505465373397, -2.384185791015625e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.165072116328645, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(0), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 0}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -2.286431312561035, -0.0014743804931640625, -8.7738037109375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -0.7830140590667725, 0.0, -0.05150127410888672, -0.011180877685546875, -0.000141143798828125, -0.13695144653320312, -1.9073486328125e-06, -0.0008602142333984375, 0.0, -1.1444091796875e-05, 0.0, -0.0030496427789330482, 0.0, -1.9073486328125e-05, -4.38690185546875e-05, -3.0517578125e-05, -0.6251118779182434, -0.10921350866556168, -1.9073486328125e-06, -0.012773513793945312, -2.09808349609375e-05, -0.00020039081573486328, -1.049041748046875e-05], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "Divine", "1", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.408910535384166, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.\n             Protection, CARD_RARITY.PALADIN, target_func=hearthbreaker.\n            targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.divine_shield = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": " Protection", "hole2": "PALADIN"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Attribute", "attr": "divine_shield", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -4.135682106018066, -0.005563706159591675, -5.7220458984375e-06, -0.09027213603258133, -1.33514404296875e-05, -0.023340225219726562, 0.0, -0.0007802248001098633, -3.814697265625e-06, 0.0, -1.9073486328125e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, 0.0, -1.9073486328125e-06, 0.0, -2.288818359375e-05, -7.748603820800781e-06, -2.7656173188006505e-05, -0.00829315185546875, -3.814697265625e-05, -9.5367431640625e-06, -0.000377655029296875, -2.288818359375e-05, -1.1444091796875e-05, -2.09808349609375e-05, -9.34600830078125e-05, -1.9073486328125e-05, -6.711483001708984e-05, 0.0, -2.86102294921875e-05, -2.6702880859375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -7.43865966796875e-05, 0.0, -0.0043468475341796875, -1.8596509107737802e-05, -0.006947517395019531, -0.0002918243408203125, -0.001819610595703125, -0.014665603637695312, -2.6702880859375e-05, -0.0063533782958984375, -0.0001239776611328125, -0.0015430450439453125, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.0007839202880859375, -2.8729431505780667e-05, -0.018912844359874725, -7.748603820800781e-06, -0.011691093444824219, -0.0008087158203125, -0.0003122076450381428, -2.384185791015625e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.440694566143918, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(3), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -2.286431312561035, -0.0014743804931640625, -8.7738037109375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -0.7830140590667725, 0.0, -0.05150127410888672, -0.011180877685546875, -0.000141143798828125, -0.13695144653320312, -1.9073486328125e-06, -0.0008602142333984375, 0.0, -1.1444091796875e-05, 0.0, -0.0030496427789330482, 0.0, -1.9073486328125e-05, -4.38690185546875e-05, -3.0517578125e-05, -0.9786428809165955, -6.878376007080078e-05, -0.04393577575683594, -1.1444091796875e-05, -0.0002899169921875, -6.318092346191406e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "3", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.812983587643373, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(0)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 0}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -2.286431312561035, -0.0014743804931640625, -8.7738037109375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -2.1778781414031982, -2.5033950805664062e-05, -3.62396240234375e-05, -0.014001846313476562, -0.0002117156982421875, -0.1643708497285843, -0.025523876771330833, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "Divine", "3", "<EOS>"]}, {"score": -5.124756956732142, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self.target.divine_shield)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Attribute", "attr": "divine_shield", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -2.286431312561035, -0.0014743804931640625, -8.7738037109375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -1.895216703414917, -1.9073486328125e-06, -0.000431060791015625, -0.08632659912109375, 0.0, -0.000377655029296875, -0.0019016265869140625, -0.000202178955078125, -1.9073486328125e-06, -0.0008220672607421875, -2.6702880859375e-05, -0.00045013427734375, -0.0002976655960083008, -0.7077609300613403, -5.841255187988281e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>"]}, {"score": -5.542018289005625, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(0)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Num", "n": 0}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -2.286431312561035, -0.0014743804931640625, -8.7738037109375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -2.2777860164642334, -3.814697265625e-06, -2.6702880859375e-05, -0.04287147521972656, -2.288818359375e-05, -0.3594264090061188, -0.43094509840011597, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "Divine", "3", "<EOS>"]}, {"score": -5.737499336689325, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.PALADIN, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.divine_shield = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "DRUID", "hole2": "PALADIN"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Attribute", "attr": "divine_shield", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -3.4219958782196045, 0.0, -2.139256000518799, -7.43865966796875e-05, -0.016782760620117188, 0.0, -0.0007935762405395508, -3.814697265625e-06, 0.0, -1.71661376953125e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, 0.0, -2.09808349609375e-05, -5.9604644775390625e-06, -5.376194530981593e-05, -0.014036178588867188, -3.62396240234375e-05, -9.5367431640625e-06, -0.000514984130859375, -2.09808349609375e-05, -1.1444091796875e-05, -2.09808349609375e-05, -8.58306884765625e-05, -2.09808349609375e-05, -7.092952728271484e-05, 0.0, -2.86102294921875e-05, -2.47955322265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -7.43865966796875e-05, 0.0, -0.004207611083984375, -1.8596509107737802e-05, -0.006588935852050781, -0.00029754638671875, -0.00183868408203125, -0.014635086059570312, -2.6702880859375e-05, -0.006573677062988281, -0.0001239776611328125, -0.001552581787109375, 0.0, -0.000217437744140625, -3.814697265625e-06, -0.0008087158203125, -2.884864079533145e-05, -0.018696356564760208, -7.748603820800781e-06, -0.011599540710449219, -0.0008106231689453125, -0.00031185001716949046, -2.384185791015625e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "DRUID", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.778864267941515, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.charge = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Attribute", "attr": "charge", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -0.11045265197753906, -1.9073486328125e-06, -0.00055694580078125, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -2.47955322265625e-05, -3.0517578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, -9.894371032714844e-06, -3.9934315282152966e-05, -0.005069732666015625, -4.00543212890625e-05, -9.5367431640625e-06, -0.0004291534423828125, -2.288818359375e-05, -1.1444091796875e-05, -2.288818359375e-05, -9.34600830078125e-05, -1.71661376953125e-05, -6.520748138427734e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -1.9073486328125e-06, -0.00440216064453125, -1.835809598560445e-05, -0.0065746307373046875, -0.0003070831298828125, -0.001743316650390625, -0.014788627624511719, -2.6702880859375e-05, -0.006024360656738281, -0.000125885009765625, -0.0015411376953125, 0.0, -0.0002117156982421875, -3.814697265625e-06, -0.00080108642578125, -2.8729431505780667e-05, -5.4649882316589355, -1.728534698486328e-05, -0.015960693359375, -0.0008678436279296875, -0.0005646743229590356, -4.410743713378906e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.89266367809887, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.PALADIN, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.divine_shield = True\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "PALADIN"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Attribute", "attr": "divine_shield", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -5.651210308074951, -5.91278076171875e-05, -0.026185989379882812, 0.0, -0.0005990266799926758, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, 0.0, -2.288818359375e-05, -7.748603820800781e-06, -3.2305197237292305e-05, -0.015195846557617188, -3.4332275390625e-05, -9.5367431640625e-06, -0.000392913818359375, -2.288818359375e-05, -1.1444091796875e-05, -2.09808349609375e-05, -9.34600830078125e-05, -1.9073486328125e-05, -6.902217864990234e-05, 0.0, -2.86102294921875e-05, -2.47955322265625e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -7.43865966796875e-05, 0.0, -0.0042858123779296875, -1.8477303456165828e-05, -0.006766319274902344, -0.0002918243408203125, -0.001800537109375, -0.014142990112304688, -2.47955322265625e-05, -0.0061931610107421875, -0.0001239776611328125, -0.001529693603515625, 0.0, -0.0002155303955078125, -3.814697265625e-06, -0.000804901123046875, -2.884864079533145e-05, -0.018769560381770134, -7.748603820800781e-06, -0.011548042297363281, -0.000812530517578125, -0.0003104194765910506, -2.384185791015625e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "PALADIN", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.964897671973574, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(0)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Num", "n": 0}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -2.286431312561035, -0.0014743804931640625, -8.7738037109375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -3.1569526195526123, -6.365776062011719e-05, -1.1444091796875e-05, -0.03191089630126953, -3.814697265625e-06, -0.10549123585224152, -0.2395281195640564, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 47, 165, "Divine", "3", "<EOS>"]}, {"score": -6.099708581602442, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Num", "n": 3}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -2.286431312561035, -0.0014743804931640625, -8.7738037109375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -2.2777860164642334, -3.814697265625e-06, -2.6702880859375e-05, -0.04287147521972656, -2.288818359375e-05, -1.3480522632598877, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -6.561721825209986, "inferred_code": "class HandOfProtection(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hand of Protection', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hand of Protection", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frozen"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HandOfProtection"}], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -5.53131103515625e-05, -0.0005741119384765625, -0.000286102294921875, -7.152301259338856e-05, -0.0006035225233063102, -6.54440009384416e-05, -1.5258699932019226e-05, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000637054443359375, -1.072883515007561e-05, -7.498260674765334e-05, -0.000186920166015625, -0.001129150390625, -1.9073486328125e-06, -0.00024223275249823928, 0.0, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00016999244689941406, -1.9073486328125e-06, -0.00083160400390625, -1.1444091796875e-05, -0.0002899169921875, -0.03066539764404297, -0.035892486572265625, -0.00011729506513802335, -0.0025080761406570673, -0.00034661006066016853, -1.4185905456542969e-05, -0.00010108929564012215, -5.7220458984375e-05, -0.055635303258895874, -1.71661376953125e-05, -0.011965751647949219, -3.576278118089249e-07, -2.286431312561035, -0.0014743804931640625, -8.7738037109375e-05, -9.5367431640625e-06, -2.288818359375e-05, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -3.1180126667022705, -6.914137884450611e-06, -4.38690185546875e-05, -0.18736839294433594, -1.52587890625e-05, -0.000359892554115504, -0.00025963710504584014, -0.8247153759002686, -5.841253368998878e-06], "choice_history": [80, 159, 295, 88, 138, "Hand", "Of", "Protection", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hand", " ", "of", " ", "Protection", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frozen", "<EOS>"]}, {"score": -19.577058792114258, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-05, -5.53131103515625e-05, -19.576946258544922], "choice_history": [80, 159, 294]}]}
{"index": 46, "beams": [{"score": -0.09570168249342004, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole2": "TurnEnded", "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -0.020275115966796875, -2.133839370799251e-05, 0.0, -0.0001776063145371154, 0.0, -0.0014060735702514648, -6.29425048828125e-05, -1.1444091796875e-05, -0.004317522048950195, -6.4849853515625e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000326611683703959, -1.71661376953125e-05, -0.0050029754638671875, -0.00023651123046875, 0.0, -3.24249267578125e-05, -4.9591064453125e-05, 0.0, -0.02906930446624756, -2.503394853192731e-06, -0.000194549560546875, -0.0001506805419921875, -0.001308441162109375, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "condition", "<EOS>", 20, 162, "Null", "<EOS>"]}, {"score": -4.489222276136836, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=Null)))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "picker", "value": {"_type": "NameConstant", "value": "Null"}}], "hole2": "TurnEnded", "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -0.020275115966796875, -2.133839370799251e-05, 0.0, -0.0001776063145371154, 0.0, -0.0014060735702514648, -6.29425048828125e-05, -1.1444091796875e-05, -0.004317522048950195, -6.4849853515625e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000326611683703959, -1.71661376953125e-05, -0.0050029754638671875, -0.00023651123046875, 0.0, -3.24249267578125e-05, -4.9591064453125e-05, 0.0, -3.669771432876587, 0.0, -0.7504596710205078, -0.0022449493408203125, -0.0017108917236328125, -7.2479248046875e-05], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 20, 162, "Null", "<EOS>"]}, {"score": -5.634304273054504, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            CharacterSelector(condition=Null)))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole2": "TurnEnded", "hole5": "CharacterSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -0.020275115966796875, -2.133839370799251e-05, 0.0, -0.0001776063145371154, 0.0, -0.0014060735702514648, -6.29425048828125e-05, -1.1444091796875e-05, -0.004317522048950195, -6.4849853515625e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000326611683703959, -1.71661376953125e-05, -5.434051513671875, -3.814697265625e-06, 0.0, -0.001277923583984375, -0.0001239776611328125, -3.814697265625e-06, -0.13777482509613037, -3.576278118089249e-07, -0.00034332275390625, -0.0001583099365234375, -0.00090789794921875, -1.71661376953125e-05], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Character", "Selector", "<EOS>", 290, 79, 271, "condition", "<EOS>", 20, 162, "Null", "<EOS>"]}, {"score": -5.735012757704219, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=RandomPicker())))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "RandomPicker", "_type": "Template77"}}], "hole2": "TurnEnded", "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -0.020275115966796875, -2.133839370799251e-05, 0.0, -0.0001776063145371154, 0.0, -0.0014060735702514648, -6.29425048828125e-05, -1.1444091796875e-05, -0.004317522048950195, -6.4849853515625e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000326611683703959, -1.71661376953125e-05, -0.0050029754638671875, -0.00023651123046875, 0.0, -3.24249267578125e-05, -4.9591064453125e-05, 0.0, -3.669771432876587, 0.0, -0.7004098892211914, -2.6702880859375e-05, -1.0270618200302124, -0.27277815341949463, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "Random", "Picker", "<EOS>"]}, {"score": -5.905687915884748, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=BothPlayer())))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "BothPlayer", "_type": "Template77"}}], "hole2": "TurnEnded", "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -0.020275115966796875, -2.133839370799251e-05, 0.0, -0.0001776063145371154, 0.0, -0.0014060735702514648, -6.29425048828125e-05, -1.1444091796875e-05, -0.004317522048950195, -6.4849853515625e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000326611683703959, -1.71661376953125e-05, -0.0050029754638671875, -0.00023651123046875, 0.0, -3.24249267578125e-05, -4.9591064453125e-05, 0.0, -3.669771432876587, 0.0, -0.7004098892211914, -2.6702880859375e-05, -1.4704574346542358, -5.38822787348181e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "Both", "Player", "<EOS>"]}, {"score": -6.209393012449702, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=UserPicker())))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "hole2": "TurnEnded", "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -0.020275115966796875, -2.133839370799251e-05, 0.0, -0.0001776063145371154, 0.0, -0.0014060735702514648, -6.29425048828125e-05, -1.1444091796875e-05, -0.004317522048950195, -6.4849853515625e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000326611683703959, -1.71661376953125e-05, -0.0050029754638671875, -0.00023651123046875, 0.0, -3.24249267578125e-05, -4.9591064453125e-05, 0.0, -3.669771432876587, 0.0, -0.7004098892211914, -2.6702880859375e-05, -1.7323602437973022, -0.041861891746520996, 0.0], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>"]}, {"score": -6.3596489308251805, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(players=BothPlayer())))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}], "hole2": "TurnEnded", "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -0.020275115966796875, -2.133839370799251e-05, 0.0, -0.0001776063145371154, 0.0, -0.0014060735702514648, -6.29425048828125e-05, -1.1444091796875e-05, -0.004317522048950195, -6.4849853515625e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.000326611683703959, -1.71661376953125e-05, -0.0050029754638671875, -0.00023651123046875, 0.0, -3.24249267578125e-05, -4.9591064453125e-05, 0.0, -6.087621212005615, 0.0, -0.205596923828125, -1.9073486328125e-06, -0.0014309883117675781, -2.741800926742144e-05, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>"]}, {"score": -6.681604242697624, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True)\n\n    def create_minion(self, player):\n        return Minion(0, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -5.154624938964844, -5.7220458984375e-06, -0.049704622477293015, -5.7220458984375e-06, -0.0003986358642578125, 0.0, -1.9073486328125e-05, -3.814697265625e-06, -0.000476837158203125, -1.1920928244535389e-07, -0.00018310546875, 0.0, -0.0002384185791015625, 0.0, -7.62939453125e-06, 0.0, -8.7738037109375e-05, -1.33514404296875e-05, -0.0007915496826171875, -2.288818359375e-05, -0.007901191711425781, -0.0007381439208984375, -0.0004177093505859375, 0.0, -1.4599580764770508, -0.0004730224609375, -3.76697389583569e-05, 0.0, -5.364403477869928e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 110, 202, "0", "<EOS>", "2", "<EOS>"]}, {"score": -6.805400982261965, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Damage(1\n            ), MinionSelector(condition=Null)))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole2": "TurnEnded", "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Damage"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -0.020275115966796875, -2.133839370799251e-05, 0.0, -0.0001776063145371154, 0.0, -0.0014060735702514648, -6.29425048828125e-05, -1.1444091796875e-05, -6.707477569580078, -6.103515625e-05, -0.0001125335693359375, -3.814697265625e-06, -1.9073486328125e-06, -0.0010397483129054308, -3.814697265625e-06, -0.0067577362060546875, -0.0002307891845703125, 0.0, -4.1961669921875e-05, -4.9591064453125e-05, 0.0, -0.03302621841430664, -2.503394853192731e-06, -0.0001926422119140625, -0.00016021728515625, -0.0013427734375, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Damage", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "condition", "<EOS>", 20, 162, "Null", "<EOS>"]}, {"score": -7.2579838511569434, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(BothPlayer())))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole2": "TurnEnded", "hole6": [{"hole0": "BothPlayer", "_type": "Template77"}], "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -5.1418023109436035, -2.121920624631457e-05, 0.0, -2.503368341422174e-05, 0.0, -0.007935762405395508, -0.0009937286376953125, -1.9073486328125e-06, -0.5585322380065918, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0032879337668418884, 0.0, -0.019284367561340332, -0.0007076263427734375, 0.0, -0.01567840576171875, -0.3357400894165039, -3.814697265625e-06, -1.1397478580474854, -0.0012742280960083008, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 178, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 282, 68, 260, "Both", "Player", "<EOS>"]}, {"score": -7.680768574494763, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(0),\n            SelfSelector()))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "hole2": "TurnEnded", "hole5": "SelfSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 0}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -0.009307861328125, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0004062652587890625, -1.1920928244535389e-07, -0.000156402587890625, 0.0, -0.0003643035888671875, 0.0, -1.1444091796875e-05, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -0.00075531005859375, -2.09808349609375e-05, -0.007861137390136719, -0.00078582763671875, -0.0004119873046875, 0.0, -1.9073486328125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0017108917236328125, 0.0, -0.0016803741455078125, -3.933906555175781e-06, -0.0038003921508789062, -6.976411819458008, -2.0623205273295753e-05, -1.1920928244535389e-07, -3.087488948949613e-05, -3.814697265625e-06, -0.012329578399658203, -0.0012569427490234375, -2.288818359375e-05, -0.0016353130340576172, -3.814697265625e-06, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -0.5243144631385803, -8.96453857421875e-05, -0.1316899061203003, -3.814697265625e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 96, 176, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "<UNK>", "<EOS>", "Self", "Selector", "<EOS>"]}, {"score": -7.856919698522226, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, True)\n\n    def create_minion(self, player):\n        return Minion(0, 2, spell_damage=1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Totem"}, {"_type": "Num", "n": 1}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 0, "_type": "Template23", "hole1": 2, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.000949859619140625, -5.7220458984375e-06, -4.410743713378906e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -1.52587890625e-05, -2.09808349609375e-05, -2.288818359375e-05, -3.24249267578125e-05, -0.0008411407470703125, -3.0517578125e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -3.8980677345534787e-05, -1.9073486328125e-06, -0.000278472900390625, 0.0, -0.0010900497436523438, -1.9073486328125e-05, -1.9073486328125e-05, -0.00010823617776622996, -2.002716064453125e-05, -5.829324072692543e-05, 0.0, -3.4332275390625e-05, -1.33514404296875e-05, -0.0010229824110865593, -7.62939453125e-06, -5.154624938964844, -5.7220458984375e-06, -0.049704622477293015, -5.7220458984375e-06, -0.0003986358642578125, 0.0, -1.9073486328125e-05, -3.814697265625e-06, -0.000476837158203125, -1.1920928244535389e-07, -0.00018310546875, 0.0, -0.0002384185791015625, 0.0, -7.62939453125e-06, 0.0, -8.7738037109375e-05, -1.33514404296875e-05, -0.0007915496826171875, -2.288818359375e-05, -0.007901191711425781, -0.0007381439208984375, -0.0004177093505859375, 0.0, -2.1486997604370117, -0.000354766845703125, -1.4305111108114943e-05, 0.0, -0.0007804193301126361, 0.0, -0.4533759355545044, -1.9073486328125e-05, -0.028202056884765625, -1.9073486328125e-06, -0.004335641860961914, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Healing", " ", "Totem", "<EOS>", 47, 165, "1", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 109, 200, "0", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -8.42810993005287, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(condition=Null)))])\n", "model_output": {"body": [{"body": [{"hole0": "Healing Totem", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 0, "hole7": [{"_type": "keyword", "arg": "condition", "value": {"_type": "NameConstant", "value": "Null"}}], "hole2": "TurnEnded", "hole5": "MinionSelector", "_type": "Template1", "hole1": 2, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -7.818510055541992, -0.0014495849609375, -0.00024482590379193425, -2.9921451641712338e-05, -0.00011432170867919922, -0.0010968446731567383, -0.13350653648376465, -0.000278472900390625, -0.000118255615234375, -1.9073486328125e-06, -0.21045684814453125, -0.18834972381591797, -8.34460515761748e-05, 0.0, -0.0002748602710198611, 0.0, -0.0017834901809692383, -8.0108642578125e-05, -1.9073486328125e-06, -0.0037866830825805664, -0.0001659393310546875, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0014803498052060604, -1.71661376953125e-05, -0.0024433135986328125, -0.00040435791015625, 0.0, -0.000255584716796875, -3.0517578125e-05, 0.0, -0.06084156036376953, -2.0265579223632812e-06, -0.0006542205810546875, -7.43865966796875e-05, -0.000881195068359375, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Healing", " ", "Totem", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 96, 177, "0", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 282, 47, 165, "1", "<EOS>", "Minion", "Selector", "<EOS>", 290, 79, 271, "condition", "<EOS>", 20, 162, "Null", "<EOS>"]}, {"score": -10.736511033879651, "inferred_code": "class HealingTotem(MinionCard):\n\n    def __init__(self):\n        super().__init__('Healing Totem', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(0, 2, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Healing Totem", "_type": "Template17", "hole1": 1, "hole2": "SHAMAN"}, {"hole0": 0, "_type": "Template23", "hole1": 2, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "HealingTotem"}], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -7.62939453125e-06, -0.00017547607421875, 0.0, -3.135155202471651e-05, -0.00020705162023659796, -9.536738616588991e-07, -7.62939453125e-05, 0.0, 0.0, -2.872943878173828e-05, -3.814697265625e-06, -1.9073486328125e-06, -4.57763671875e-05, -8.491620063781738, -0.0019931793212890625, -0.0001299296854995191, -3.600120544433594e-05, -4.38690185546875e-05, 0.0, -1.5019924830994569e-05, 0.0, -0.0054552555084228516, 0.0, -1.9923105239868164, -2.6702880859375e-05, -3.4570680327306036e-06, 0.0, -0.0011463826522231102, 0.0, -0.23082256317138672, -4.00543212890625e-05, -0.011220932006835938, -5.7220458984375e-06, -0.0009593963623046875, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Healing", "Totem", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 103, 186, "Healing", " ", "Totem", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", 109, 200, "0", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -22.849525451660156, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, -9.34600830078125e-05, -22.84943199157715], "choice_history": [80, 159, 294]}]}
{"index": 47, "beams": [{"score": -0.054593731718561855, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -0.004279254004359245, -0.0010097010526806116, -0.0024890899658203125, -0.0013256072998046875, -3.62396240234375e-05, -0.000102996826171875, -4.76837158203125e-05, 0.0, -0.0008373260498046875, -3.814697265625e-06, -0.0001354217529296875, -4.1961669921875e-05, -0.01054680161178112, -9.262561070499942e-05, -0.005153656005859375, -0.0002536773681640625, -1.33514404296875e-05, -0.010646820068359375, -1.9073486328125e-06, -9.1552734375e-05, 0.0, -2.682209014892578e-05, 0.0, -0.000947117805480957, -1.33514404296875e-05, -0.000194549560546875, 0.0, -3.4332275390625e-05, -0.0005410422454588115, -0.00020396432955749333, -0.0004901885986328125, -8.96453857421875e-05, -0.0018428564071655273, -0.0011725425720214844], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.053256375355197, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(8)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Num", "n": 8}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -0.004279254004359245, -0.0010097010526806116, -0.0024890899658203125, -0.0013256072998046875, -3.62396240234375e-05, -0.000102996826171875, -4.76837158203125e-05, 0.0, -0.0008373260498046875, -3.814697265625e-06, -0.0001354217529296875, -4.1961669921875e-05, -4.9531354904174805, -0.000293731689453125, -0.000461578369140625, -0.07683181762695312, -8.20159912109375e-05, -7.736672705505043e-05, -0.00013744771422352642], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 47, 165, "8", "<EOS>"]}, {"score": -5.333962322544025, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player(8), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Name", "id": "player"}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -0.004279254004359245, -0.0010097010526806116, -0.0024890899658203125, -0.0013256072998046875, -3.62396240234375e-05, -0.000102996826171875, -4.76837158203125e-05, 0.0, -0.0008373260498046875, -3.814697265625e-06, -0.0001354217529296875, -4.1961669921875e-05, -0.01054680161178112, -9.262561070499942e-05, -0.005153656005859375, -0.0002536773681640625, -1.33514404296875e-05, -4.556138038635254, 0.0, -0.6143752336502075, -1.1920928244535389e-07, -0.050140380859375, -0.005057334899902344, -3.814697265625e-06, -0.009101529605686665, -8.463859558105469e-06, -0.0052776336669921875, -5.7220458984375e-06, -0.05537152290344238, -0.00018548965454101562], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 19, 160, "player", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.531477511260384, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(len(8), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -0.004279254004359245, -0.0010097010526806116, -0.0024890899658203125, -0.0013256072998046875, -3.62396240234375e-05, -0.000102996826171875, -4.76837158203125e-05, 0.0, -0.0008373260498046875, -3.814697265625e-06, -0.0001354217529296875, -4.1961669921875e-05, -0.01054680161178112, -9.262561070499942e-05, -0.005153656005859375, -0.0002536773681640625, -1.33514404296875e-05, -4.556138038635254, 0.0, -0.8962365388870239, -0.00012433528900146484, -1.71661376953125e-05, -0.0003528594970703125, -9.5367431640625e-06, -0.016246158629655838, -2.7418136596679688e-05, -0.0076618194580078125, -7.62939453125e-06, -0.006029486656188965, -0.010329484939575195], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 19, 160, "len", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.209202336536912, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -6.047706604003906, -0.004963156767189503, -0.11049461364746094, -0.0026760101318359375, -3.62396240234375e-05, -1.9073486328125e-05, -4.1961669921875e-05, 0.0, -0.0001983642578125, -5.7220458984375e-06, -0.0001430511474609375, -7.2479248046875e-05, -0.009505508467555046, -0.0001194477008539252, -0.005626678466796875, -0.000293731689453125, -1.1444091796875e-05, -0.009706497192382812, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -3.254413604736328e-05, 0.0, -0.0008652210235595703, -1.33514404296875e-05, -0.0001850128173828125, 0.0, -3.24249267578125e-05, -0.0005706028314307332, -0.0001964542898349464, -0.0004978179931640625, -8.7738037109375e-05, -0.0018934011459350586, -0.0011973381042480469], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.21065232275236, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(8)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 8}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -0.004279254004359245, -0.0010097010526806116, -0.0024890899658203125, -0.0013256072998046875, -3.62396240234375e-05, -0.000102996826171875, -4.76837158203125e-05, 0.0, -0.0008373260498046875, -3.814697265625e-06, -0.0001354217529296875, -4.1961669921875e-05, -0.01054680161178112, -9.262561070499942e-05, -5.433453559875488, -0.7436456680297852, -6.67572021484375e-05, -0.00042116353870369494, -0.00018882006406784058], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 282, 47, 165, "8", "<EOS>"]}, {"score": -6.840089072665478, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Healing Touch", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -5.779607772827148, -0.003387451171875, -0.00012063297617714852, -0.000237344327615574, -6.794924956921022e-06, -5.7220458984375e-06, -0.1993883103132248, -1.9073486328125e-06, -0.010701179504394531, -1.311301275563892e-06, -0.7949295043945312, -0.0024318695068359375, -4.1961669921875e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.0001316070556640625, -3.814697265625e-05, -0.020290732383728027, -9.357929229736328e-05, -0.006809234619140625, -0.00029754638671875, -1.33514404296875e-05, -0.008478164672851562, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -3.24249267578125e-05, 0.0, -0.0006582736968994141, -1.9073486328125e-05, -8.0108642578125e-05, 0.0, -5.340576171875e-05, -0.0006775462534278631, -0.0001649855257710442, -0.00113677978515625, -2.09808349609375e-05, -0.005306363105773926, -0.0023157596588134766], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Healing", " ", "Touch", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.845437814550891, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), selfSelector)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "selfSelector"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -0.004279254004359245, -0.0010097010526806116, -0.0024890899658203125, -0.0013256072998046875, -3.62396240234375e-05, -0.000102996826171875, -4.76837158203125e-05, 0.0, -0.0008373260498046875, -3.814697265625e-06, -0.0001354217529296875, -4.1961669921875e-05, -0.01054680161178112, -9.262561070499942e-05, -0.005153656005859375, -0.0002536773681640625, -1.33514404296875e-05, -0.010646820068359375, -1.9073486328125e-06, -9.1552734375e-05, 0.0, -2.682209014892578e-05, 0.0, -0.000947117805480957, -1.33514404296875e-05, -0.000194549560546875, 0.0, -3.4332275390625e-05, -0.0005410422454588115, -0.00020396432955749333, -0.0004901885986328125, -8.96453857421875e-05, -0.0018428564071655273, -6.792016506195068, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "Selector", "<EOS>"]}, {"score": -7.150488445204012, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -7.052404403686523, -2.47955322265625e-05, -0.03286933898925781, -9.5367431640625e-06, -0.0013523101806640625, -4.88758041683468e-06, -0.009686470031738281, -0.0005092620849609375, -2.09808349609375e-05, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -0.0003566741943359375, -3.814697265625e-06, -0.00012969970703125, -4.00543212890625e-05, -0.00666117575019598, -0.00010097026824951172, -0.01198577880859375, -0.000293731689453125, -1.33514404296875e-05, -0.017641067504882812, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -3.826618194580078e-05, 0.0, -0.0008652210235595703, -1.71661376953125e-05, -0.000118255615234375, 0.0, -2.47955322265625e-05, -0.0004555838240776211, -0.00018763274420052767, -0.00075531005859375, -8.7738037109375e-05, -0.0020754337310791016, -0.001114964485168457], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.212857577569594, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(8), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Healing Touch", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -5.779607772827148, -0.003387451171875, -0.00012063297617714852, -0.000237344327615574, -6.794924956921022e-06, -5.7220458984375e-06, -0.1993883103132248, -1.9073486328125e-06, -0.010701179504394531, -1.311301275563892e-06, -0.7252597808837891, -0.0006561279296875, -0.0044269561767578125, -2.09808349609375e-05, -1.9073486328125e-06, -3.62396240234375e-05, -5.7220458984375e-06, -1.9073486328125e-05, -3.814697265625e-05, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -5.841255187988281e-06, -3.099436753473128e-06, -0.13785266876220703, -1.9073486328125e-05, -5.340576171875e-05, -3.0517578125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -1.9073486328125e-06, -9.1552734375e-05, -5.53131103515625e-05, -4.208087921142578e-05, 0.0, -3.24249267578125e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -3.814697265625e-06, -8.392333984375e-05, -5.984278686810285e-05, -0.01766490936279297, -0.00016021728515625, -4.1961669921875e-05, -1.1444091796875e-05, -0.0599818229675293, -1.9073486328125e-06, -0.0003643035888671875, 0.0, -0.0022144317626953125, -5.7220458984375e-06, -0.009241104125976562, 0.0, -0.11756932735443115, -1.71661376953125e-05, -3.814697265625e-05, -0.048137664794921875, -1.9073486328125e-06, -2.47955322265625e-05, -4.57763671875e-05, -2.288818359375e-05, 0.0, -0.022857666015625, -1.9073486328125e-06, -0.0061206817626953125, -1.9073486328125e-06, -0.04160797595977783, -9.5367431640625e-06, -0.0011501312255859375, -0.0054187774658203125, -2.288818359375e-05, -0.0002574920654296875, 0.0, -4.57763671875e-05, 0.0, -2.7060508728027344e-05, 0.0, -0.0010709762573242188, -5.7220458984375e-05, -0.000370025634765625, -1.9073486328125e-06, -3.814697265625e-05, -0.0017139356350526214, -0.0001071690785465762, -0.0007343292236328125, -3.24249267578125e-05, -0.009641766548156738, -0.0014594793319702148], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Healing", " ", "Touch", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -8.398474654514956, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n", "model_output": {"body": [{"body": [{"hole0": "Healing Touch", "hole2": "target_func", "_type": "Template7", "hole1": "COMMON", "hole4": "find_spell_target", "hole3": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -7.9839935302734375, -0.0009098052978515625, -3.0874729418428615e-05, -0.0001310109655605629, -2.384185791015625e-06, -1.9073486328125e-06, -0.005943894386291504, -1.9073486328125e-06, -0.00042748451232910156, -3.814697265625e-06, -0.00093841552734375, -3.814697265625e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0004864931106567383, -1.1444091796875e-05, -1.33514404296875e-05, -2.3841855067985307e-07, -0.3505765199661255, -3.6597251892089844e-05, -0.007837295532226562, -0.0005702972412109375, -0.000213623046875, 0.0, -1.9073486328125e-05, 0.0, -0.0001773834228515625, -3.814697265625e-06, -0.0001049041748046875, -2.86102294921875e-05, -0.01221525575965643, -9.78708267211914e-05, -0.008333206176757812, -0.0001468658447265625, -9.5367431640625e-06, -0.018751144409179688, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -2.09808349609375e-05, 0.0, -0.0007953643798828125, -1.1444091796875e-05, -0.000141143798828125, 0.0, -3.814697265625e-05, -0.00045535253593698144, -0.00022434857964981347, -0.0007724761962890625, -6.103515625e-05, -0.0021736621856689453, -0.0011702775955200195], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Healing", " ", "Touch", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -8.401557047517827, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 0, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n", "model_output": {"body": [{"body": [{"hole0": "Healing Touch", "_type": "Template13", "hole1": "DRUID", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -7.798928260803223, -0.007431983947753906, -0.0004774473491124809, -9.763240086613223e-05, -2.1457672119140625e-06, -9.918212890625e-05, -0.4329361319541931, -3.814697265625e-06, -0.0001926422119140625, -3.814697265625e-06, -0.0015621185302734375, -0.09706783294677734, -0.0036468505859375, 0.0, -2.09808349609375e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -5.14984130859375e-05, -1.71661376953125e-05, -0.01785445213317871, -5.3882598876953125e-05, -0.009771347045898438, -8.392333984375e-05, -7.62939453125e-06, -0.02130889892578125, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -2.6702880859375e-05, 0.0, -0.0008232593536376953, -1.33514404296875e-05, -0.000152587890625, 0.0, -4.76837158203125e-05, -0.0008152847294695675, -0.00018203235231339931, -0.000995635986328125, -2.47955322265625e-05, -0.0037671327590942383, -0.0021594762802124023], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Healing", " ", "Touch", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -9.044643890948684, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n        player.draw()\n        player.draw()\n        self.target.heal(player.effective_heal_power(8), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "draw", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -0.004279254004359245, -0.0010097010526806116, -6.164499282836914, -0.0029048919677734375, -9.572505950927734e-05, -3.0517578125e-05, -1.71661376953125e-05, -4.1961669921875e-05, -5.7220458984375e-06, -1.9788742065429688e-05, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, 0.0, -3.62396240234375e-05, -7.033347174001392e-06, -1.0490362910786644e-05, -0.8991260528564453, -1.33514404296875e-05, -7.62939453125e-06, -5.14984130859375e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -5.7220458984375e-05, -1.1444091796875e-05, -4.38690185546875e-05, -1.9073486328125e-06, -2.47955322265625e-05, -1.52587890625e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.38690185546875e-05, -5.7220458984375e-06, -7.62939453125e-05, -6.973693962208927e-05, -0.0056095123291015625, -8.0108642578125e-05, -0.0024881362915039062, -1.9073486328125e-05, -3.814697265625e-06, -1.71661376953125e-05, -0.001003265380859375, 0.0, -9.72747802734375e-05, -3.814697265625e-06, -0.0036221742630004883, -5.7220458984375e-06, -6.29425048828125e-05, -5.91278076171875e-05, -0.0013225078582763672, -3.814697265625e-06, -0.0005130767822265625, -0.008042335510253906, -8.392333984375e-05, -0.0007190704345703125, -3.814697265625e-06, -8.58306884765625e-05, 0.0, -0.00018024444580078125, 0.0, -0.0006002187728881836, -7.271766662597656e-05, -7.05718994140625e-05, 0.0, -5.14984130859375e-05, -0.0004859738110098988, -0.00021779059898108244, -0.0005130767822265625, -3.0517578125e-05, -0.008178949356079102, -0.0006840229034423828, -0.3338136672973633, -1.9073486328125e-06, -0.0020427703857421875, -0.26284027099609375, -2.47955322265625e-05, 0.0, -0.009033203125, 0.0, -5.53131103515625e-05, 0.0, -0.014881134033203125, -3.814697265625e-06, -0.0028896331787109375, -7.62939453125e-06, -7.62939453125e-05, -0.27099609375, -4.38690185546875e-05, 0.0, -0.22955608367919922, 0.0, -0.0002574920654296875, 0.0, -0.023242473602294922, -5.7220458984375e-06, -0.0016689300537109375, -9.5367431640625e-06, -6.4849853515625e-05, -0.45163726806640625, -1.1444091796875e-05, -3.814697265625e-06, -0.07915687561035156, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.21203136444091797, -5.7220458984375e-06, -6.4849853515625e-05, -2.682209014892578e-05, -0.002101421356201172, -3.814697265625e-06, -0.0012645721435546875, -0.01664257049560547, -0.0001773834228515625, -0.000423431396484375, -3.814697265625e-06, -9.72747802734375e-05, 0.0, -8.83340835571289e-05, 0.0, -0.0006928443326614797, -5.173683166503906e-05, -7.62939453125e-05, -1.9073486328125e-06, -4.9591064453125e-05, -0.0005538052646443248, -0.00018441493739373982, -0.0004520416259765625, -3.4332275390625e-05, -0.0067789554595947266, -0.0010251998901367188], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 134, 11, 129, 19, 160, "player", "<EOS>", "draw", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -10.118538274471788, "inferred_code": "class HealingTouch(SpellCard):\n\n    def __init__(self):\n        super().__init__('Healing Touch', 3, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(8), self)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Healing Touch"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "DRUID", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 8}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HealingTouch"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -1.1920922133867862e-06, -0.00011574551899684593, -2.7417760065873154e-05, -2.288818359375e-05, 0.0, 0.0, -3.2782554626464844e-05, -1.5735626220703125e-05, -9.000301361083984e-05, -5.53131103515625e-05, -0.0014410018920898438, 0.0, -7.843971252441406e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.971027374267578e-05, -5.7220458984375e-06, -6.4849853515625e-05, -9.5367431640625e-06, -3.814697265625e-05, -0.00337982177734375, -0.0002040863037109375, -2.288818359375e-05, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -4.88758041683468e-06, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0008563995361328125, -2.47955322265625e-05, -1.9073486328125e-06, -4.6491513785440475e-06, -6.270408630371094e-05, -2.9802317840221804e-06, -9.34600830078125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -0.00010775935515994206, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00057220458984375, -3.814697265625e-06, -6.520748138427734e-05, -1.1920928244535389e-07, -0.001140594482421875, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-05, -0.0001678466796875, -3.4332275390625e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-05, -1.52587890625e-05, -7.2479248046875e-05, -3.814697265625e-05, -0.00021386146545410156, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -0.00102996826171875, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, -0.00029969215393066406, -3.814697265625e-06, -2.288818359375e-05, -2.2649765014648438e-06, -0.004279254004359245, -0.0010097010526806116, -6.164499282836914, -0.0029048919677734375, -9.572505950927734e-05, -3.0517578125e-05, -1.71661376953125e-05, -4.1961669921875e-05, -5.7220458984375e-06, -1.9788742065429688e-05, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, 0.0, -3.62396240234375e-05, -7.033347174001392e-06, -1.0490362910786644e-05, -1.022078514099121, -0.00383758544921875, -7.62939453125e-06, -1.1444091796875e-05, -3.814697265625e-06, -2.288818359375e-05, -5.7220458984375e-06, -2.6702880859375e-05, -1.9073486328125e-06, -2.491474151611328e-05, -1.9073486328125e-06, -3.0517578125e-05, -1.33514404296875e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.57763671875e-05, -5.7220458984375e-06, -7.62939453125e-05, -6.461103475885466e-05, -0.0851144790649414, -0.0001316070556640625, -0.009614944458007812, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0066585540771484375, 0.0, -8.392333984375e-05, -3.814697265625e-06, -0.0041086673736572266, -7.62939453125e-06, -9.918212890625e-05, -9.739398956298828e-05, -0.0016057491302490234, -5.7220458984375e-06, -0.0005054473876953125, -0.005305290222167969, -0.0001239776611328125, -0.0006847381591796875, -5.7220458984375e-06, -8.96453857421875e-05, 0.0, -0.00017178058624267578, 0.0, -0.000653386116027832, -7.843971252441406e-05, -6.67572021484375e-05, 0.0, -5.340576171875e-05, -0.0005356789333745837, -0.0002876413054764271, -0.00067901611328125, -2.86102294921875e-05, -0.010769128799438477, -0.0007146596908569336, -0.06352043151855469, -2.288818359375e-05, -3.814697265625e-06, -0.004528045654296875, 0.0, -0.8713151216506958, -1.1920928244535389e-07, -0.008340835571289062, -0.0004673004150390625, -5.7220458984375e-06, 0.0, -0.39673423767089844, -5.7220458984375e-06, -0.032395362854003906, -3.814697265625e-06, -0.11649632453918457, -0.000698089599609375, -1.33514404296875e-05, -0.0090484619140625, 0.0, -2.09808349609375e-05, -5.7220458984375e-06, -0.004486083984375, -5.7220458984375e-06, -0.005002379417419434, -1.823885577323381e-05, -0.15047705173492432, -8.940672159951646e-06, -0.3957659900188446, -0.0003032684326171875, -0.004584312438964844, -0.00016021728515625, -9.34600830078125e-05, -0.00017547607421875, -0.0001811981201171875, 0.0, -0.026510238647460938, -1.9073486328125e-05, -0.00109100341796875, -1.9073486328125e-06, -0.5141878128051758, -0.0003643035888671875, -1.1444091796875e-05, -0.005260467529296875, 0.0, -0.15019607543945312, 0.0, -2.86102294921875e-05, 0.0, -0.016459107398986816, -2.288818359375e-05], "choice_history": [80, 159, 295, 88, 138, "Healing", "Touch", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Healing", " ", "Touch", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "8", "<EOS>", 45, 160, "self", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>"]}, {"score": -22.463830947875977, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -22.46379852294922], "choice_history": [80, 159, 294]}]}
{"index": 48, "beams": [{"score": -2.504148533209232, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "frog"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -0.4489065408706665, -1.1920928244535389e-07, -0.016757965087890625, -0.000823974609375, -4.1961669921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -7.62939453125e-06, -8.96453857421875e-05, 0.0, -0.00128936767578125, -1.9073486328125e-06, -0.2784290313720703, 0.0, -0.010328292846679688, -0.0002841949462890625, -0.0029308428056538105, -3.3378546504536644e-06, -0.0042266845703125, -5.960462772236497e-07, -0.0025932644493877888, -7.581710087833926e-05, -0.0052115111611783504, -0.0015530440723523498, -0.027014313265681267, -0.00012385842273943126, -0.3667241632938385, -5.0067901611328125e-05, -0.00078582763671875, -0.0001506805419921875, -1.9073486328125e-05, -0.003406524658203125, -1.9073486328125e-05, -0.31407999992370605, -4.5299530029296875e-06, -0.0008554458618164062, -0.034523963928222656, -3.4332275390625e-05, -6.4849853515625e-05, -0.00858306884765625, 0.0, -0.2840225398540497, -1.9073486328125e-06, -0.0055828094482421875, -2.682209014892578e-05, -0.000293731689453125, -0.00661468505859375, -0.00026702880859375, -0.00016438942111562937, -5.7220458984375e-06, -0.0006961822509765625, -0.0009613037109375, -7.62939453125e-06, -0.0005931854248046875, -0.00049591064453125, -4.00543212890625e-05, -2.6702880859375e-05, -0.06268966197967529, -9.930133819580078e-05, -0.028644442558288574, -0.0001163482666015625, -0.0016412734985351562, -9.5367431640625e-06, -0.33869755268096924, 0.0, -0.008937835693359375, 0.0, -0.0059814453125, -0.019193649291992188, -1.33514404296875e-05, -1.9073486328125e-06, -0.004364013671875, -5.7220458984375e-06, -0.016180038452148438, -1.1444091796875e-05, -0.0028920171316713095, -0.0001316070556640625, -0.0007266998291015625, -3.814697265625e-06, -0.0015213489532470703, -3.218649908376392e-06, -0.00032806396484375, -0.0034160614013671875, -1.9073486328125e-06, -0.0649186372756958, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "frog", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "frog", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -3.268199637092451, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "frog"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -0.4489065408706665, -1.1920928244535389e-07, -0.016757965087890625, -0.000823974609375, -4.1961669921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -7.62939453125e-06, -8.96453857421875e-05, 0.0, -0.00128936767578125, -1.9073486328125e-06, -1.4170770645141602, -1.1444091796875e-05, -0.005277787335216999, -5.006777428206988e-06, -0.005787968635559082, -1.6689286894688848e-06, -0.007807735353708267, -0.00011003016697941348, -0.004082364961504936, -0.0024366562720388174, -0.04131327569484711, -0.00020575523376464844, -0.000286102294921875, -9.72747802734375e-05, -1.1444091796875e-05, -0.00383758544921875, -1.71661376953125e-05, -0.2941948175430298, -4.410743713378906e-06, -0.0010480880737304688, -0.034583091735839844, -3.4332275390625e-05, -8.0108642578125e-05, -0.00894927978515625, 0.0, -0.2829354703426361, -1.9073486328125e-06, -0.0056438446044921875, -2.872943878173828e-05, -0.000263214111328125, -0.0064334869384765625, -0.0002593994140625, -0.00015962106408551335, -5.7220458984375e-06, -0.0006923675537109375, -0.0009613037109375, -7.62939453125e-06, -0.0005779266357421875, -0.00049591064453125, -3.814697265625e-05, -2.6702880859375e-05, -0.06255698204040527, -9.739398956298828e-05, -0.02840876579284668, -0.0001163482666015625, -0.0016336441040039062, -9.5367431640625e-06, -0.3389664888381958, 0.0, -0.00894927978515625, 0.0, -0.006030082702636719, -0.019353866577148438, -1.33514404296875e-05, -1.9073486328125e-06, -0.004408836364746094, -5.7220458984375e-06, -0.016252517700195312, -1.1444091796875e-05, -0.0029101369436830282, -0.0001316070556640625, -0.000728607177734375, -3.814697265625e-06, -0.0015281438827514648, -3.218649908376392e-06, -0.00032806396484375, -0.0034170150756835938, -1.9073486328125e-06, -0.06479847431182861, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "frog", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "frog", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -4.0723894708551285, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog.<UNK>()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "frog"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -0.4489065408706665, -1.1920928244535389e-07, -0.016757965087890625, -0.000823974609375, -4.1961669921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -7.62939453125e-06, -8.96453857421875e-05, 0.0, -0.00128936767578125, -1.9073486328125e-06, -0.2784290313720703, 0.0, -0.010328292846679688, -0.0002841949462890625, -0.0029308428056538105, -3.3378546504536644e-06, -0.0042266845703125, -5.960462772236497e-07, -0.0025932644493877888, -7.581710087833926e-05, -0.0052115111611783504, -0.0015530440723523498, -0.027014313265681267, -0.00012385842273943126, -1.6174204349517822, -0.00025602878304198384, -0.00363922119140625, -1.71661376953125e-05, -5.7220458984375e-06, -0.00121307373046875, -9.5367431640625e-06, -0.6234790086746216, -4.172325134277344e-06, -0.000797271728515625, -0.04264640808105469, -3.4332275390625e-05, -6.67572021484375e-05, -0.008840560913085938, 0.0, -0.28346487879753113, -1.9073486328125e-06, -0.0055999755859375, -3.063678741455078e-05, -0.0002422332763671875, -0.006988525390625, -0.0002536773681640625, -0.00015866741887293756, -5.7220458984375e-06, -0.000591278076171875, -0.0009613037109375, -7.62939453125e-06, -0.000545501708984375, -0.0004634857177734375, -3.814697265625e-05, -2.86102294921875e-05, -0.062264204025268555, -9.739398956298828e-05, -0.028337955474853516, -0.0001163482666015625, -0.0016536712646484375, -9.5367431640625e-06, -0.33891594409942627, 0.0, -0.008863449096679688, 0.0, -0.0061054229736328125, -0.019346237182617188, -1.33514404296875e-05, -1.9073486328125e-06, -0.004527091979980469, -5.7220458984375e-06, -0.016080856323242188, -1.1444091796875e-05, -0.0028958318289369345, -0.0001316070556640625, -0.0007266998291015625, -3.814697265625e-06, -0.0015223026275634766, -3.218649908376392e-06, -0.0003299713134765625, -0.0034084320068359375, -1.9073486328125e-06, -0.06468784809112549, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "frog", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", "<UNK>", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "frog", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -4.246507822306022, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        amount = hearthbreaker.cards.minions.<UNK>.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "amount"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "frog"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -2.7120327949523926, -1.7404556274414062e-05, -0.0006237030029296875, -0.08019256591796875, -0.0002155303955078125, -1.9073486328125e-06, -7.2479248046875e-05, 0.0, -0.0018177032470703125, 0.0, -0.010498046875, 0.0, -0.047504425048828125, -3.4332275390625e-05, -0.005534580443054438, -1.1086422091466375e-05, -0.003953337669372559, -2.264974000354414e-06, -0.008600182831287384, -0.00016307830810546875, -0.0025438168086111546, -0.0019017281010746956, -0.028123218566179276, -0.00017833709716796875, -0.000293731689453125, -7.43865966796875e-05, -1.1444091796875e-05, -0.0044384002685546875, -2.6702880859375e-05, -0.3200424909591675, -4.410743713378906e-06, -0.0008859634399414062, -0.03530693054199219, -3.62396240234375e-05, -8.392333984375e-05, -0.008680343627929688, 0.0, -0.2828211486339569, -1.9073486328125e-06, -0.005608558654785156, -2.682209014892578e-05, -0.000270843505859375, -0.006443977355957031, -0.0002593994140625, -0.00015962106408551335, -5.7220458984375e-06, -0.000690460205078125, -0.0009613037109375, -7.62939453125e-06, -0.000579833984375, -0.00049591064453125, -3.814697265625e-05, -2.6702880859375e-05, -0.06256461143493652, -9.930133819580078e-05, -0.02834475040435791, -0.0001163482666015625, -0.0016326904296875, -9.5367431640625e-06, -0.33887970447540283, 0.0, -0.00894927978515625, 0.0, -0.006023406982421875, -0.019321441650390625, -1.33514404296875e-05, -1.9073486328125e-06, -0.004458427429199219, -5.7220458984375e-06, -0.016269683837890625, -1.1444091796875e-05, -0.0029110906179994345, -0.0001316070556640625, -0.000728607177734375, -3.814697265625e-06, -0.0015270709991455078, -3.218649908376392e-06, -0.00032806396484375, -0.0034093856811523438, -1.9073486328125e-06, -0.06466877460479736, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "amount", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "frog", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -5.115128448099554, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = justice\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "justice"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -0.4489065408706665, -1.1920928244535389e-07, -0.016757965087890625, -0.000823974609375, -4.1961669921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -7.62939453125e-06, -8.96453857421875e-05, 0.0, -0.00128936767578125, -1.9073486328125e-06, -0.2784290313720703, 0.0, -0.010328292846679688, -0.0002841949462890625, -0.0029308428056538105, -3.3378546504536644e-06, -0.0042266845703125, -5.960462772236497e-07, -0.0025932644493877888, -7.581710087833926e-05, -0.0052115111611783504, -0.0015530440723523498, -0.027014313265681267, -0.00012385842273943126, -0.3667241632938385, -5.0067901611328125e-05, -0.00078582763671875, -0.0001506805419921875, -1.9073486328125e-05, -0.003406524658203125, -1.9073486328125e-05, -0.31407999992370605, -4.5299530029296875e-06, -0.0008554458618164062, -0.034523963928222656, -3.4332275390625e-05, -6.4849853515625e-05, -0.00858306884765625, 0.0, -0.2840225398540497, -1.9073486328125e-06, -0.0055828094482421875, -2.682209014892578e-05, -0.000293731689453125, -0.00661468505859375, -0.00026702880859375, -0.00016438942111562937, -5.7220458984375e-06, -0.0006961822509765625, -0.0009613037109375, -7.62939453125e-06, -0.0005931854248046875, -0.00049591064453125, -4.00543212890625e-05, -2.6702880859375e-05, -0.06268966197967529, -9.930133819580078e-05, -0.028644442558288574, -0.0001163482666015625, -0.0016412734985351562, -9.5367431640625e-06, -2.932234287261963, 0.0, -0.0006084442138671875, 0.0, -0.0014171600341796875, -0.03662681579589844, -1.1444091796875e-05, 0.0, -0.029628753662109375, -1.9073486328125e-06, -0.0034465789794921875, -1.1444091796875e-05, -0.0030150413513183594, -0.000118255615234375, -0.00043487548828125, -3.814697265625e-06, -0.001226186752319336, -6.079665126890177e-06, -0.0002841949462890625, -0.0034847259521484375, -1.9073486328125e-06, -0.06575024127960205, -1.728534698486328e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "frog", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "justice", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -5.341762753457793, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        justice = hearthbreaker.cards.minions.<UNK>.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "justice"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "frog"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -3.6120126247406006, -2.622600959512056e-06, -0.01025390625, -0.0028228759765625, -2.47955322265625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.001556396484375, 0.0, -0.029207229614257812, 0.0, -0.26958274841308594, -1.33514404296875e-05, -0.004958463367074728, -6.556489552167477e-06, -0.005209207534790039, -1.4305104514278355e-06, -0.011768193915486336, -0.00014579296112060547, -0.004809717647731304, -0.001363544724881649, -0.055419016629457474, -0.0001571178436279297, -0.0002307891845703125, -9.34600830078125e-05, -1.1444091796875e-05, -0.0055522918701171875, -2.288818359375e-05, -0.30944371223449707, -4.410743713378906e-06, -0.0009336471557617188, -0.0341033935546875, -3.4332275390625e-05, -8.20159912109375e-05, -0.009065628051757812, 0.0, -0.28234848380088806, -1.9073486328125e-06, -0.0056362152099609375, -2.682209014892578e-05, -0.0002689361572265625, -0.006499290466308594, -0.0002574920654296875, -0.00015962106408551335, -5.7220458984375e-06, -0.000690460205078125, -0.0009613037109375, -7.62939453125e-06, -0.0005779266357421875, -0.0004940032958984375, -3.814697265625e-05, -2.6702880859375e-05, -0.06267333030700684, -9.930133819580078e-05, -0.028493523597717285, -0.000118255615234375, -0.0016336441040039062, -9.5367431640625e-06, -0.33930742740631104, 0.0, -0.008974075317382812, 0.0, -0.006018638610839844, -0.019266128540039062, -1.33514404296875e-05, -1.9073486328125e-06, -0.004445075988769531, -5.7220458984375e-06, -0.016225814819335938, -1.1444091796875e-05, -0.0029177663382142782, -0.0001316070556640625, -0.000728607177734375, -3.814697265625e-06, -0.0015251636505126953, -3.218649908376392e-06, -0.00032806396484375, -0.00341033935546875, -1.9073486328125e-06, -0.06470882892608643, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "justice", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "frog", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -5.416389409020859, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player = hearthbreaker.cards.minions.<UNK>.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "player"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "frog"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -3.4943594932556152, -1.9073486328125e-06, -0.4129219055175781, -0.009260177612304688, -4.76837158203125e-05, 0.0, -2.86102294921875e-05, 0.0, -0.013797760009765625, 0.0, -0.06468963623046875, 0.0, -0.01685333251953125, -5.7220458984375e-05, -0.005061780568212271, -3.3378546504536644e-06, -0.0038377046585083008, -1.1920922133867862e-06, -0.004573467653244734, -0.00011980532872257754, -0.0037574260495603085, -0.0014197307173162699, -0.04532434418797493, -0.0002046823501586914, -0.0002593994140625, -9.34600830078125e-05, -1.1444091796875e-05, -0.003940582275390625, -2.47955322265625e-05, -0.31968748569488525, -4.410743713378906e-06, -0.0009355545043945312, -0.03286170959472656, -3.4332275390625e-05, -8.0108642578125e-05, -0.00920867919921875, 0.0, -0.2823500335216522, -1.9073486328125e-06, -0.0056247711181640625, -2.682209014892578e-05, -0.000274658203125, -0.0065593719482421875, -0.0002574920654296875, -0.00015962106408551335, -5.7220458984375e-06, -0.000690460205078125, -0.0009613037109375, -7.62939453125e-06, -0.000576019287109375, -0.0004940032958984375, -3.814697265625e-05, -2.6702880859375e-05, -0.06279265880584717, -9.930133819580078e-05, -0.02851271629333496, -0.0001163482666015625, -0.0016374588012695312, -9.5367431640625e-06, -0.3392225503921509, 0.0, -0.008958816528320312, 0.0, -0.006012916564941406, -0.019229888916015625, -1.33514404296875e-05, -1.9073486328125e-06, -0.00444793701171875, -5.7220458984375e-06, -0.016223907470703125, -1.1444091796875e-05, -0.0029158589895814657, -0.0001316070556640625, -0.000728607177734375, -3.814697265625e-06, -0.001524209976196289, -3.218649908376392e-06, -0.00032806396484375, -0.0034093856811523438, -1.9073486328125e-06, -0.06474125385284424, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "player", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "frog", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -5.594526579244999, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(player)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "frog"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -0.4489065408706665, -1.1920928244535389e-07, -0.016757965087890625, -0.000823974609375, -4.1961669921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -7.62939453125e-06, -8.96453857421875e-05, 0.0, -0.00128936767578125, -1.9073486328125e-06, -0.2784290313720703, 0.0, -0.010328292846679688, -0.0002841949462890625, -0.0029308428056538105, -3.3378546504536644e-06, -0.0042266845703125, -5.960462772236497e-07, -0.0025932644493877888, -7.581710087833926e-05, -0.0052115111611783504, -0.0015530440723523498, -0.027014313265681267, -0.00012385842273943126, -0.3667241632938385, -5.0067901611328125e-05, -0.00078582763671875, -0.0001506805419921875, -1.9073486328125e-05, -0.003406524658203125, -1.9073486328125e-05, -0.31407999992370605, -4.5299530029296875e-06, -0.0008554458618164062, -0.034523963928222656, -3.4332275390625e-05, -6.4849853515625e-05, -0.00858306884765625, 0.0, -0.2840225398540497, -1.9073486328125e-06, -0.0055828094482421875, -2.682209014892578e-05, -0.000293731689453125, -0.00661468505859375, -0.00026702880859375, -0.00016438942111562937, -5.7220458984375e-06, -0.0006961822509765625, -0.0009613037109375, -7.62939453125e-06, -0.0005931854248046875, -0.00049591064453125, -4.00543212890625e-05, -2.6702880859375e-05, -0.06268966197967529, -9.930133819580078e-05, -0.028644442558288574, -0.0001163482666015625, -0.0016412734985351562, -9.5367431640625e-06, -0.33869755268096924, 0.0, -0.008937835693359375, 0.0, -0.0059814453125, -0.019193649291992188, -1.33514404296875e-05, -1.9073486328125e-06, -0.004364013671875, -5.7220458984375e-06, -0.016180038452148438, -1.1444091796875e-05, -0.0028920171316713095, -0.0001316070556640625, -0.0007266998291015625, -3.814697265625e-06, -0.0015213489532470703, -3.218649908376392e-06, -0.00032806396484375, -0.0034160614013671875, -1.9073486328125e-06, -3.15531587600708, 0.0], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "frog", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "frog", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "player", "<EOS>"]}, {"score": -5.666854103479423, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog.Frog()\n        minion = self.create_minion(Null)\n        minion.card = frog\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "self"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "frog"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -0.4489065408706665, -1.1920928244535389e-07, -0.016757965087890625, -0.000823974609375, -4.1961669921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -7.62939453125e-06, -8.96453857421875e-05, 0.0, -0.00128936767578125, -1.9073486328125e-06, -0.2784290313720703, 0.0, -0.010328292846679688, -0.0002841949462890625, -0.0029308428056538105, -3.3378546504536644e-06, -0.0042266845703125, -5.960462772236497e-07, -0.0025932644493877888, -7.581710087833926e-05, -0.0052115111611783504, -0.0015530440723523498, -0.027014313265681267, -0.00012385842273943126, -0.3667241632938385, -5.0067901611328125e-05, -0.00078582763671875, -0.0001506805419921875, -1.9073486328125e-05, -0.003406524658203125, -1.9073486328125e-05, -0.31407999992370605, -4.5299530029296875e-06, -0.0008554458618164062, -0.034523963928222656, -3.4332275390625e-05, -6.4849853515625e-05, -0.00858306884765625, 0.0, -3.209716320037842, -2.288818359375e-05, -0.15471649169921875, -7.62939453125e-06, -0.0003814697265625, -0.10103607177734375, -0.000171661376953125, -0.0001803632767405361, -3.814697265625e-06, -0.0004940032958984375, -0.000827789306640625, -7.62939453125e-06, -0.0005435943603515625, -0.0006275177001953125, -3.24249267578125e-05, -2.86102294921875e-05, -0.056076645851135254, -9.167194366455078e-05, -0.024005770683288574, -0.0001201629638671875, -0.0015916824340820312, -9.5367431640625e-06, -0.34183037281036377, 0.0, -0.008779525756835938, 0.0, -0.0062580108642578125, -0.021203994750976562, -1.33514404296875e-05, -1.9073486328125e-06, -0.00438690185546875, -5.7220458984375e-06, -0.016292572021484375, -1.1444091796875e-05, -0.002843737369403243, -0.000133514404296875, -0.0007143020629882812, -3.814697265625e-06, -0.001555800437927246, -3.218649908376392e-06, -0.000331878662109375, -0.0034589767456054688, -1.9073486328125e-06, -0.06451237201690674, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "frog", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "self", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "frog", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -5.874143078708542, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.<UNK>.Frog()\n        minion = frog.create_minion(Null)\n        minion.card = justice\n        self.target.<UNK>(minion)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "frog"}], "_type": "Assign", "value": {"_type": "Call", "func": {"_type": "Attribute", "attr": "Frog", "value": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "cards", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}}}, {"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "NameConstant", "value": "Null"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "create_minion", "value": {"_type": "Name", "id": "frog"}}}}, {"targets": [{"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "minion"}}], "_type": "Assign", "value": {"_type": "Name", "id": "justice"}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "minion"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -0.0032339096069335938, -1.52587890625e-05, -5.352497100830078e-05, -3.24249267578125e-05, -3.0517578125e-05, -2.47955322265625e-05, 0.0, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -0.004996180534362793, -3.933898824470816e-06, -0.056369781494140625, -1.1444091796875e-05, -3.814697265625e-06, -8.0108642578125e-05, -1.71661376953125e-05, -0.0002269744873046875, -3.814697265625e-06, -6.67572021484375e-05, -5.14984130859375e-05, -9.286397835239768e-05, -1.3470649719238281e-05, -5.14984130859375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -7.867813110351562e-06, 0.0, -9.5367431640625e-06, -1.52587890625e-05, -0.0001811981201171875, -7.033347174001392e-06, -0.0034589767456054688, -7.62939453125e-06, -1.9073486328125e-05, -0.021079063415527344, -3.814697265625e-05, -0.4489065408706665, -1.1920928244535389e-07, -0.016757965087890625, -0.000823974609375, -4.1961669921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, -7.62939453125e-06, -8.96453857421875e-05, 0.0, -0.00128936767578125, -1.9073486328125e-06, -1.4170770645141602, -1.1444091796875e-05, -0.005277787335216999, -5.006777428206988e-06, -0.005787968635559082, -1.6689286894688848e-06, -0.007807735353708267, -0.00011003016697941348, -0.004082364961504936, -0.0024366562720388174, -0.04131327569484711, -0.00020575523376464844, -0.000286102294921875, -9.72747802734375e-05, -1.1444091796875e-05, -0.00383758544921875, -1.71661376953125e-05, -0.2941948175430298, -4.410743713378906e-06, -0.0010480880737304688, -0.034583091735839844, -3.4332275390625e-05, -8.0108642578125e-05, -0.00894927978515625, 0.0, -0.2829354703426361, -1.9073486328125e-06, -0.0056438446044921875, -2.872943878173828e-05, -0.000263214111328125, -0.0064334869384765625, -0.0002593994140625, -0.00015962106408551335, -5.7220458984375e-06, -0.0006923675537109375, -0.0009613037109375, -7.62939453125e-06, -0.0005779266357421875, -0.00049591064453125, -3.814697265625e-05, -2.6702880859375e-05, -0.06255698204040527, -9.739398956298828e-05, -0.02840876579284668, -0.0001163482666015625, -0.0016336441040039062, -9.5367431640625e-06, -2.9271388053894043, 0.0, -0.0006084442138671875, 0.0, -0.0014247894287109375, -0.037113189697265625, -1.1444091796875e-05, 0.0, -0.029737472534179688, -1.9073486328125e-06, -0.003459930419921875, -1.1444091796875e-05, -0.003036022186279297, -0.000118255615234375, -0.00043487548828125, -3.814697265625e-06, -0.0012328624725341797, -6.079665126890177e-06, -0.0002841949462890625, -0.00348663330078125, -1.9073486328125e-06, -0.06567585468292236, -1.919269561767578e-05], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 299, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "frog", "<EOS>", 14, 134, 11, 129, 11, 129, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>", "Frog", "<EOS>", 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "frog", "<EOS>", "create_minion", "<EOS>", 282, 46, 162, "Null", "<EOS>", 85, 128, 282, 37, 129, 19, 160, "minion", "<EOS>", "card", "<EOS>", 19, 160, "justice", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 45, 160, "minion", "<EOS>"]}, {"score": -7.081043373122576, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            overload=0)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frog()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"hole0": 0, "_type": "Template78"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frog"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -5.581343650817871, -0.008214950561523438, -0.0049921078607439995, -0.06418812274932861, -0.511479377746582, -0.013482093811035156, -3.814697265625e-06, 0.0, -0.012052536010742188, -1.9073486328125e-06, -0.02482736110687256, -0.000152587890625, -0.0002384185791015625, 0.0, -0.42622673511505127, -3.993499558418989e-05, -1.71661376953125e-05, -0.272613525390625, -7.62939453125e-06, -0.0008227408397942781, -0.0010564944241195917, -0.125956192612648, -0.022670360282063484], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 78, 261, "Taunt", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frog", "<EOS>"]}, {"score": -7.987376948165057, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(self.target.<UNK>),\n            self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Hex"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "SHAMAN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -0.0007381439208984375, -0.000225067138671875, -8.7738037109375e-05, -5.340576171875e-05, -0.000255584716796875, -0.0002079010009765625, -0.0002264745271531865, -3.099440846199286e-06, -6.735312490491197e-05, -1.1920928244535389e-07, -0.0001201629638671875, -2.86102294921875e-05, -7.62939453125e-06, -9.536738616588991e-07, -4.720687138615176e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00018117620493285358, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -0.0001697540283203125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -0.0001964569091796875, -8.106231689453125e-06, -2.2649765014648438e-06, -0.0008296966552734375, -3.814697265625e-06, -0.0002269744873046875, -0.005382537841796875, -7.62939453125e-05, -0.0004067420959472656, -1.9073486328125e-06, -0.0001888275146484375, -2.6702880859375e-05, -7.62939453125e-05, -5.7220458984375e-06, -3.4332275390625e-05, -7.62939453125e-06, -0.0002939700207207352, -5.7220458984375e-06, -8.20159912109375e-05, 0.0, -0.006026980001479387, -0.0001666545867919922, -6.3155517578125, -0.005077362060546875, -0.006824493408203125, 0.0, -0.00012087821960449219, -2.86102294921875e-05, -0.007818222045898438, -1.52587890625e-05, -1.33514404296875e-05, -0.6020298004150391, -9.5367431640625e-06, -0.0003643035888671875, -1.52587890625e-05, -0.0006122589111328125, 0.0, -0.007650494575500488, -6.103515625e-05, -0.00543975830078125, -5.543231964111328e-05, -1.0122424364089966, -8.702266313775908e-06], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Hex", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -9.222533902007854, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.<UNK>()\n", "model_output": {"body": [{"body": [{"hole0": "Hex", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "<UNK>"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -8.164188385009766, -0.0013828277587890625, -0.00041434384183958173, -0.11932607740163803, -0.5170770883560181, -9.5367431640625e-05, -0.0031261444091796875, -7.62939453125e-06, -0.02708911895751953, -0.24190807342529297, -0.1179819107055664, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -0.0006951093673706055, -0.00011444091796875, -0.0001068115234375, -1.9073486328125e-06, -0.0235806405544281, -0.00016532992594875395], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Hex", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 116, 224, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -9.876114678956782, "inferred_code": "class Hex(SpellCard):\n\n    def __init__(self):\n        super().__init__('Hex', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE,\n            target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frog()))\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Hex", "_type": "Template25", "hole1": "DRUID", "hole2": "RARE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frog"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Hex"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.340576171875e-05, -7.43865966796875e-05, -5.7220458984375e-06, -0.0037060168106108904, -0.00044241605792194605, -0.0001811981201171875, 0.0, -2.09808349609375e-05, -0.0006660223007202148, -4.172325134277344e-06, -1.1563301086425781e-05, -3.814697265625e-05, -0.0012941360473632812, -3.814697265625e-06, -8.881048415787518e-05, -2.503394853192731e-06, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001888275146484375, -1.9073486328125e-05, -1.52587890625e-05, -7.3993988037109375, -0.0027208328247070312, -3.099436753473128e-06, -0.0015953195979818702, -0.10913531482219696, -2.3841855067985307e-07, -0.2018510103225708, 0.0, -0.8142471313476562, -0.009644508361816406, -7.62939453125e-06, 0.0, -0.012834548950195312, 0.0, -0.0019255876541137695, -8.7738037109375e-05, -0.00014495849609375, -1.9073486328125e-06, -0.773389458656311, -2.503394853192731e-06, -2.47955322265625e-05, -0.35291099548339844, -1.9073486328125e-06, -0.00022208331211004406, -0.0015815705992281437, -0.13438858091831207, -0.053110942244529724], "choice_history": [80, 159, 295, 88, 138, "Hex", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Hex", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frog", "<EOS>"]}, {"score": -20.928159713745117, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -20.928152084350586], "choice_history": [80, 159, 294]}]}
{"index": 49, "beams": [{"score": -0.08347119953165816, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0012912750244140625, -1.1444091796875e-05, 0.0, -1.883488948806189e-05, -2.884860077756457e-05, -3.4689903259277344e-05, -0.000213623046875, -0.0001049041748046875, -2.288818359375e-05, -0.0003460152365732938, -6.127357482910156e-05, -0.0026569366455078125, -1.9073486328125e-06, -0.0011425018310546875, -1.9073486328125e-06, -0.0003014802932739258, -4.768370445162873e-07, -0.000591278076171875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001010894775390625, -6.103515625e-05, -4.9591064453125e-05, 0.0, -0.0009765625, -2.47955322265625e-05, -2.09808349609375e-05, -7.82012939453125e-05, -2.47955322265625e-05, -0.0011731386184692383, -1.9073486328125e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.027785301208496094, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -0.00016415119171142578, -7.62939453125e-06, -1.9073486328125e-05, -4.5299530029296875e-06, -0.00474047614261508, -0.0017757402965798974, -0.000904083251953125, -0.0026035308837890625, -0.0004425048828125, 0.0, -5.14984130859375e-05, 0.0, -0.0005990266799926758, -2.09808349609375e-05, -0.000194549560546875, -0.0001430511474609375, -0.010898232460021973, -0.0001475811004638672, -0.0017414093017578125, -6.866455078125e-05, -1.1444091796875e-05, -0.004329681396484375, -1.1444091796875e-05, -7.62939453125e-05, 0.0, -0.00016021728515625, 0.0, -0.0008639097213745117, -8.213520050048828e-05, -7.05718994140625e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.0012366297887638211, -0.00023424625396728516, -0.0002899169921875, -0.000308990478515625, -0.004313826560974121, -0.0038323402404785156], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -3.706733483621491, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0012912750244140625, -1.1444091796875e-05, 0.0, -1.883488948806189e-05, -2.884860077756457e-05, -3.4689903259277344e-05, -0.000213623046875, -0.0001049041748046875, -2.288818359375e-05, -0.0003460152365732938, -6.127357482910156e-05, -0.0026569366455078125, -1.9073486328125e-06, -0.0011425018310546875, -1.9073486328125e-06, -0.0003014802932739258, -4.768370445162873e-07, -0.000591278076171875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001010894775390625, -6.103515625e-05, -4.9591064453125e-05, 0.0, -0.0009765625, -2.47955322265625e-05, -2.09808349609375e-05, -7.82012939453125e-05, -2.47955322265625e-05, -0.0011731386184692383, -1.9073486328125e-06, -8.0108642578125e-05, -1.9073486328125e-06, -3.6529722213745117, -1.71661376953125e-05, -0.0032787322998046875, -1.33514404296875e-05, -0.0011081695556640625, -5.125998541188892e-06, -0.0030269622802734375, -0.0006866455078125, -0.0005741119384765625, 0.0, -2.288818359375e-05, 0.0, -0.0005397796630859375, -5.7220458984375e-06, -0.0001697540283203125, -8.0108642578125e-05, -0.0060111284255981445, -0.0002372264862060547, -0.0042591094970703125, -8.0108642578125e-05, -1.1444091796875e-05, -0.0068798065185546875, -7.62939453125e-06, -5.91278076171875e-05, 0.0, -0.0001926422119140625, 0.0, -0.0008541345596313477, -9.548664093017578e-05, -5.340576171875e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.001029440201818943, -0.00021517276763916016, -0.0004367828369140625, -0.00035858154296875, -0.003725290298461914, -0.004438281059265137], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.146846956702092, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(6)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Num", "n": 6}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0012912750244140625, -1.1444091796875e-05, 0.0, -1.883488948806189e-05, -2.884860077756457e-05, -3.4689903259277344e-05, -0.000213623046875, -0.0001049041748046875, -2.288818359375e-05, -0.0003460152365732938, -6.127357482910156e-05, -0.0026569366455078125, -1.9073486328125e-06, -0.0011425018310546875, -1.9073486328125e-06, -0.0003014802932739258, -4.768370445162873e-07, -0.000591278076171875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001010894775390625, -6.103515625e-05, -4.9591064453125e-05, 0.0, -0.0009765625, -2.47955322265625e-05, -2.09808349609375e-05, -7.82012939453125e-05, -2.47955322265625e-05, -0.0011731386184692383, -1.9073486328125e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.027785301208496094, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -0.00016415119171142578, -7.62939453125e-06, -1.9073486328125e-05, -4.5299530029296875e-06, -0.00474047614261508, -0.0017757402965798974, -0.000904083251953125, -0.0026035308837890625, -0.0004425048828125, 0.0, -5.14984130859375e-05, 0.0, -0.0005990266799926758, -2.09808349609375e-05, -0.000194549560546875, -0.0001430511474609375, -4.9699788093566895, -0.0011081695556640625, -0.000396728515625, -0.12018394470214844, -2.86102294921875e-05, -5.745722592109814e-05, -0.0003224611282348633], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 47, 165, "6", "<EOS>"]}, {"score": -5.678436299820042, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), selfSelector)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "selfSelector"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0012912750244140625, -1.1444091796875e-05, 0.0, -1.883488948806189e-05, -2.884860077756457e-05, -3.4689903259277344e-05, -0.000213623046875, -0.0001049041748046875, -2.288818359375e-05, -0.0003460152365732938, -6.127357482910156e-05, -0.0026569366455078125, -1.9073486328125e-06, -0.0011425018310546875, -1.9073486328125e-06, -0.0003014802932739258, -4.768370445162873e-07, -0.000591278076171875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001010894775390625, -6.103515625e-05, -4.9591064453125e-05, 0.0, -0.0009765625, -2.47955322265625e-05, -2.09808349609375e-05, -7.82012939453125e-05, -2.47955322265625e-05, -0.0011731386184692383, -1.9073486328125e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.027785301208496094, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -0.00016415119171142578, -7.62939453125e-06, -1.9073486328125e-05, -4.5299530029296875e-06, -0.00474047614261508, -0.0017757402965798974, -0.000904083251953125, -0.0026035308837890625, -0.0004425048828125, 0.0, -5.14984130859375e-05, 0.0, -0.0005990266799926758, -2.09808349609375e-05, -0.000194549560546875, -0.0001430511474609375, -0.010898232460021973, -0.0001475811004638672, -0.0017414093017578125, -6.866455078125e-05, -1.1444091796875e-05, -0.004329681396484375, -1.1444091796875e-05, -7.62939453125e-05, 0.0, -0.00016021728515625, 0.0, -0.0008639097213745117, -8.213520050048828e-05, -7.05718994140625e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.0012366297887638211, -0.00023424625396728516, -0.0002899169921875, -0.000308990478515625, -0.004313826560974121, -5.59879732131958, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "Selector", "<EOS>"]}, {"score": -5.812491041525817, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(len(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Name", "id": "len"}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0012912750244140625, -1.1444091796875e-05, 0.0, -1.883488948806189e-05, -2.884860077756457e-05, -3.4689903259277344e-05, -0.000213623046875, -0.0001049041748046875, -2.288818359375e-05, -0.0003460152365732938, -6.127357482910156e-05, -0.0026569366455078125, -1.9073486328125e-06, -0.0011425018310546875, -1.9073486328125e-06, -0.0003014802932739258, -4.768370445162873e-07, -0.000591278076171875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001010894775390625, -6.103515625e-05, -4.9591064453125e-05, 0.0, -0.0009765625, -2.47955322265625e-05, -2.09808349609375e-05, -7.82012939453125e-05, -2.47955322265625e-05, -0.0011731386184692383, -1.9073486328125e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.027785301208496094, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -0.00016415119171142578, -7.62939453125e-06, -1.9073486328125e-05, -4.5299530029296875e-06, -0.00474047614261508, -0.0017757402965798974, -0.000904083251953125, -0.0026035308837890625, -0.0004425048828125, 0.0, -5.14984130859375e-05, 0.0, -0.0005990266799926758, -2.09808349609375e-05, -0.000194549560546875, -0.0001430511474609375, -0.010898232460021973, -0.0001475811004638672, -0.0017414093017578125, -6.866455078125e-05, -1.1444091796875e-05, -5.455374717712402, 0.0, -0.11842882633209229, -0.00025975704193115234, -1.1444091796875e-05, -0.0006732940673828125, -3.814697265625e-06, -0.018664274364709854, -0.0021915435791015625, -0.01673603057861328, -0.00025177001953125, -0.04033017158508301, -0.09192728996276855], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 19, 160, "len", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.049724599264238, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, 2, CHARACTER_CLASS.PALADIN,\n            target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0012912750244140625, -1.1444091796875e-05, 0.0, -1.883488948806189e-05, -2.884860077756457e-05, -3.4689903259277344e-05, -0.000213623046875, -0.0001049041748046875, -2.288818359375e-05, -0.0003460152365732938, -6.127357482910156e-05, -5.978033065795898, -0.0002803802490234375, -0.0005557358963415027, -4.8041343688964844e-05, -0.0003376007080078125, -1.9073486328125e-06, -0.0050067901611328125, -3.814697265625e-06, -0.0010377168655395508, -3.576278118089249e-07, -0.0008792877197265625, -1.9073486328125e-06, -0.0009021759033203125, -0.0003032684326171875, -9.5367431640625e-06, -0.002155780792236328, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.010776519775390625, -5.7220458984375e-06, -4.76837158203125e-05, -2.288818359375e-05, -0.00013566017150878906, -7.62939453125e-06, -1.33514404296875e-05, -4.291534423828125e-06, -0.006503939628601074, -0.0017735949950292706, -0.0010738372802734375, -0.00208282470703125, -0.0003070831298828125, 0.0, -5.53131103515625e-05, 0.0, -0.0009194612503051758, -1.1444091796875e-05, -0.000179290771484375, -0.00010883808135986328, -0.01045370101928711, -0.0001456737518310547, -0.001613616943359375, -6.67572021484375e-05, -1.1444091796875e-05, -0.004215240478515625, -1.1444091796875e-05, -8.392333984375e-05, 0.0, -0.00012218952178955078, 0.0, -0.0008829832077026367, -6.878376007080078e-05, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.0012230566935613751, -0.00024199485778808594, -0.0002880096435546875, -0.000316619873046875, -0.00426328182220459, -0.003891468048095703], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.438921193393497, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0012912750244140625, -1.1444091796875e-05, 0.0, -1.883488948806189e-05, -2.884860077756457e-05, -3.4689903259277344e-05, -0.000213623046875, -0.0001049041748046875, -2.288818359375e-05, -0.0003460152365732938, -6.127357482910156e-05, -0.0026569366455078125, -1.9073486328125e-06, -0.0011425018310546875, -1.9073486328125e-06, -0.0003014802932739258, -4.768370445162873e-07, -0.000591278076171875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001010894775390625, -6.103515625e-05, -4.9591064453125e-05, 0.0, -0.0009765625, -2.47955322265625e-05, -2.09808349609375e-05, -7.82012939453125e-05, -2.47955322265625e-05, -0.0011731386184692383, -1.9073486328125e-06, -8.0108642578125e-05, -1.9073486328125e-06, -0.027785301208496094, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -0.00016415119171142578, -7.62939453125e-06, -1.9073486328125e-05, -4.5299530029296875e-06, -6.332900524139404, -0.006813644431531429, -0.017868995666503906, -0.009046554565429688, -0.0003910064697265625, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -0.0009480714797973633, -2.47955322265625e-05, -0.0002994537353515625, -0.000179290771484375, -0.008681535720825195, -0.00019311904907226562, -0.00188446044921875, -7.2479248046875e-05, -9.5367431640625e-06, -0.0038299560546875, -1.1444091796875e-05, -7.2479248046875e-05, 0.0, -0.0002079010009765625, 0.0, -0.000835418701171875, -8.785724639892578e-05, -6.67572021484375e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.0013602087274193764, -0.00024366378784179688, -0.0003337860107421875, -0.0003032684326171875, -0.00449216365814209, -0.004408359527587891], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.985596363203591, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, True, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -6.856454849243164, -2.288818359375e-05, -1.52587890625e-05, -2.098061486321967e-05, -2.360340477025602e-05, -3.8623809814453125e-05, -0.000583648681640625, -0.0002765655517578125, -4.76837158203125e-05, -0.00036305541289038956, -0.00012040138244628906, -0.00017547607421875, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -0.0003490447998046875, -1.1920928244535389e-07, -0.001300811767578125, -1.9073486328125e-06, -2.288818359375e-05, -1.1444091796875e-05, -3.24249267578125e-05, -8.58306884765625e-05, -9.1552734375e-05, 0.0, -0.0053043365478515625, -0.0001010894775390625, -0.024799346923828125, -1.71661376953125e-05, -0.0031129121780395508, -1.9073486328125e-06, -0.0003490447998046875, -6.103515625e-05, -1.33514404296875e-05, -0.004274606704711914, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.03654766082763672, -5.7220458984375e-06, -2.09808349609375e-05, -3.0517578125e-05, -0.00017952919006347656, -9.5367431640625e-06, -2.09808349609375e-05, -5.364416665543104e-06, -0.007823944091796875, -0.0027209518011659384, -0.0010890960693359375, -0.001880645751953125, -0.0006008148193359375, 0.0, -4.76837158203125e-05, 0.0, -0.0006867647171020508, -2.288818359375e-05, -0.0002117156982421875, -0.0001506805419921875, -0.011016368865966797, -0.0001550912857055664, -0.0018596649169921875, -6.866455078125e-05, -1.1444091796875e-05, -0.004467010498046875, -1.1444091796875e-05, -7.43865966796875e-05, 0.0, -0.000171661376953125, 0.0, -0.000858306884765625, -8.404254913330078e-05, -7.05718994140625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.0013816370628774166, -0.00023806095123291016, -0.000324249267578125, -0.000331878662109375, -0.004295706748962402, -0.004110813140869141], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.094677633057444, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, minion_type=hearthbreaker.targeting)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Light"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -0.000797271728515625, -0.0002288818359375, -1.1444091796875e-05, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -4.172325134277344e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.0012912750244140625, -1.1444091796875e-05, 0.0, -1.883488948806189e-05, -2.884860077756457e-05, -3.4689903259277344e-05, -0.000213623046875, -0.0001049041748046875, -2.288818359375e-05, -0.0003460152365732938, -6.127357482910156e-05, -0.0026569366455078125, -1.9073486328125e-06, -0.0011425018310546875, -1.9073486328125e-06, -0.0003014802932739258, -4.768370445162873e-07, -0.000591278076171875, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0001010894775390625, -6.103515625e-05, -4.9591064453125e-05, 0.0, -0.0009765625, -2.47955322265625e-05, -2.09808349609375e-05, -7.82012939453125e-05, -2.47955322265625e-05, -7.008020401000977, -8.0108642578125e-05, -0.0003757476806640625, 0.0, -0.00022125244140625, -5.7220458984375e-06, -0.03332328796386719, -1.9073486328125e-06, -0.0016632080078125, -4.88758041683468e-06, -0.002735137939453125, -0.0003414154052734375, -0.0005970001220703125, 0.0, -2.09808349609375e-05, 0.0, -0.0003871917724609375, -9.5367431640625e-06, -0.0001354217529296875, -9.34600830078125e-05, -0.0059206485748291016, -0.0002124309539794922, -0.0054569244384765625, -8.392333984375e-05, -1.1444091796875e-05, -0.008371353149414062, -3.814697265625e-06, -4.76837158203125e-05, 0.0, -0.0002422332763671875, 0.0, -0.0008445978164672852, -9.918212890625e-05, -5.91278076171875e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.001201148726977408, -0.00020897388458251953, -0.0003566741943359375, -0.000263214111328125, -0.003690958023071289, -0.00555574893951416], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Light", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.803207840146193, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Light", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -0.0040683746337890625, -1.9073486328125e-06, -4.38690185546875e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -7.43865966796875e-05, -7.62939453125e-06, -4.1961669921875e-05, -7.248102188110352, -0.004245758056640625, -0.0006726933643221855, -0.00011980455019511282, -2.896778823924251e-05, -8.58306884765625e-05, -0.022487152367830276, -1.9073486328125e-06, -0.0036230087280273438, -1.1920928244535389e-07, -0.4613628387451172, -0.004214286804199219, -0.00032806396484375, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.008874893188476562, -1.9073486328125e-06, -0.0001373291015625, -3.62396240234375e-05, -0.0062639713287353516, -0.00010883808135986328, -0.006481170654296875, -0.0001201629638671875, -1.33514404296875e-05, -0.00467681884765625, -3.814697265625e-06, -9.72747802734375e-05, 0.0, -0.000118255615234375, 0.0, -0.0007479190826416016, -6.67572021484375e-05, -7.05718994140625e-05, -1.9073486328125e-06, -3.0517578125e-05, -0.0032074276823550463, -9.036064147949219e-05, -0.0006256103515625, -8.20159912109375e-05, -0.0042955875396728516, -0.017038941383361816], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Light", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.88759625356542, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Light", "_type": "Template13", "hole1": "PALADIN", "hole2": "FREE"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -7.157312393188477, -0.013364791870117188, -0.0016499245539307594, -8.392220479436219e-05, -1.2040138244628906e-05, -0.0002803802490234375, -0.09145330637693405, -4.76837158203125e-05, -0.4926137924194336, -3.814697265625e-06, -0.0026988983154296875, -0.06318473815917969, -0.002185821533203125, 0.0, -1.52587890625e-05, 0.0, -0.0037784576416015625, -1.9073486328125e-06, -7.43865966796875e-05, -2.09808349609375e-05, -0.008035063743591309, -8.440017700195312e-05, -0.012542724609375, -3.24249267578125e-05, -9.5367431640625e-06, -0.006824493408203125, -5.7220458984375e-06, -6.67572021484375e-05, 0.0, -0.0001163482666015625, 0.0, -0.0008580684661865234, -6.67572021484375e-05, -7.62939453125e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.0050374907441437244, -0.0001819133758544922, -0.002056121826171875, -8.96453857421875e-05, -0.003453493118286133, -0.018813014030456543], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Holy", " ", "Light", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.97524020606906, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Light", "hole2": "target_func", "_type": "Template7", "hole1": "COMMON", "hole4": "find_spell_target", "hole3": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -7.810638904571533, -0.00034332275390625, -4.887569048150908e-06, -0.00016653499915264547, -1.4662741705251392e-05, -3.814697265625e-06, -0.0005241632461547852, -7.62939453125e-06, -0.0014601945877075195, -3.814697265625e-06, -0.001132965087890625, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0002536773681640625, -1.52587890625e-05, -1.33514404296875e-05, -2.1457672119140625e-06, -0.12150847911834717, -3.838539123535156e-05, -0.0042572021484375, -0.00045013427734375, -0.0007534027099609375, 0.0, -1.71661376953125e-05, 0.0, -0.001293182373046875, -1.9073486328125e-06, -0.0001277923583984375, -3.24249267578125e-05, -0.005993366241455078, -0.00015151500701904297, -0.0068817138671875, -4.9591064453125e-05, -9.5367431640625e-06, -0.0067691802978515625, -5.7220458984375e-06, -8.96453857421875e-05, 0.0, -8.58306884765625e-05, 0.0, -0.0009210109710693359, -5.7220458984375e-05, -7.82012939453125e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.001002645236440003, -0.00016736984252929688, -0.0007534027099609375, -0.0002536773681640625, -0.0034410953521728516, -0.004983425140380859], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 121, 251, "Holy", " ", "Light", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -8.249352989927132, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Light", "_type": "Template17", "hole1": 2, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -5.918532371520996, -0.000186920166015625, -4.6132929128361866e-05, -4.0650367736816406e-05, -2.610677620396018e-05, -6.29425048828125e-05, -2.2530493879457936e-05, -7.62939453125e-06, -0.0055130720138549805, -1.9073486328125e-06, -2.2621946334838867, -0.0054073333740234375, -0.0005950927734375, 0.0, -2.47955322265625e-05, 0.0, -0.003459930419921875, -1.9073486328125e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.004610896110534668, -9.417533874511719e-05, -0.01641845703125, -5.7220458984375e-05, -9.5367431640625e-06, -0.008489608764648438, -3.814697265625e-06, -6.866455078125e-05, 0.0, -0.0001544952392578125, 0.0, -0.0008697509765625, -7.641315460205078e-05, -7.2479248046875e-05, -1.9073486328125e-06, -3.0517578125e-05, -0.00291174603626132, -0.00011134147644042969, -0.00063323974609375, -8.392333984375e-05, -0.004320383071899414, -0.01365351676940918], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Holy", " ", "Light", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -8.32534310340779, "inferred_code": "class HolyLight(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Light', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(6), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Light", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 6}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyLight"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.0517578125e-05, -3.814697265625e-06, -8.344646857949556e-07, -7.510183422709815e-06, -2.3841855067985307e-07, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -7.68899917602539e-05, -3.635883331298828e-05, -0.00010895729064941406, -4.9591064453125e-05, -7.157312393188477, -0.013364791870117188, -0.0016499245539307594, -8.392220479436219e-05, -1.2040138244628906e-05, -0.0002803802490234375, -0.09145330637693405, -4.76837158203125e-05, -0.9554281234741211, -3.814697265625e-06, -0.0012874603271484375, -0.012501716613769531, -0.001758575439453125, 0.0, -1.52587890625e-05, 0.0, -0.04031181335449219, -1.9073486328125e-06, -6.67572021484375e-05, -2.09808349609375e-05, -0.008806347846984863, -7.867813110351562e-05, -0.007476806640625, -3.814697265625e-05, -1.1444091796875e-05, -0.0053920745849609375, -5.7220458984375e-06, -7.05718994140625e-05, 0.0, -0.0001010894775390625, 0.0, -0.0009455680847167969, -6.103515625e-05, -8.392333984375e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.003775270190089941, -0.00011324882507324219, -0.0016574859619140625, -9.34600830078125e-05, -0.0040018558502197266, -0.016566038131713867], "choice_history": [80, 159, 295, 88, 138, "Holy", "Light", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Holy", " ", "Light", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "6", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -22.56914520263672, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -22.56913948059082], "choice_history": [80, 159, 294]}]}
{"index": 50, "beams": [{"score": -1.5570097314077813, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.5578241348266602, -4.57763671875e-05, -0.0010089874267578125, -1.1444091796875e-05, -0.0002231597900390625, -3.814697265625e-06, -0.0008068084716796875, -3.814697265625e-05, -0.0014858245849609375, -2.47955322265625e-05, -0.000102996826171875, -0.0001850128173828125, 0.0, -0.0005741119384765625, -2.6702880859375e-05, -0.000457763671875, -1.9073486328125e-06, -4.971027374267578e-05, -2.0265579223632812e-06, -0.0010510683059692383, -1.9073486328125e-06, -0.0012773240450769663, -0.000194549560546875, -0.0016326904296875, -0.0001983642578125, -3.814697265625e-06, -1.9073486328125e-05, -7.62939453125e-06, -0.0001888275146484375, 0.0, -4.57763671875e-05, 0.0, -0.00060272216796875, -1.9073486328125e-06, -0.5971393585205078, -7.62939453125e-06, -0.0001659393310546875, -0.060161590576171875, -0.0001926422119140625, -0.000118255615234375, -0.00012969970703125, -5.7220458984375e-06, 0.0, -0.020778775215148926, 0.0, -0.0023963451385498047, 0.0, -1.1444091796875e-05, -3.4332275390625e-05, -0.000110626220703125, -3.336835652589798e-05, -1.9073486328125e-06, -0.0012760162353515625, -1.52587890625e-05, -0.0632781982421875, -9.5367431640625e-06, -0.013324737548828125, -0.003482818603515625, -0.000385284423828125, -1.9073486328125e-06, -7.450580596923828e-05, 0.0, -0.00022125244140625, 0.0, -0.04712867736816406, -1.9073486328125e-06, -0.004978179931640625, 0.0, -0.005455970764160156, -1.9073486328125e-06, -2.288818359375e-05, -7.62939453125e-05, -3.814697265625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -2.09808349609375e-05, 0.0, -0.0001277923583984375, -1.9073486328125e-06, -0.00016808509826660156, -1.9073486328125e-06, -0.0067397356033325195, -3.814697265625e-06, -0.0005950927734375, -0.03803825378417969, -0.00018310546875, -0.0001506805419921875, -0.0002593994140625, -1.1444091796875e-05, 0.0, -0.0038661956787109375, 0.0, -0.0019818544387817383, -1.9073486328125e-06, -2.47955322265625e-05, -2.6702880859375e-05, -0.0001068115234375, -3.9268285036087036e-05, -1.9073486328125e-06, -0.0009174346923828125, -3.4332275390625e-05, -0.06303048133850098, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -1.7509490421227767, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.5578241348266602, -4.57763671875e-05, -0.0010089874267578125, -1.1444091796875e-05, -0.0002231597900390625, -3.814697265625e-06, -0.0008068084716796875, -3.814697265625e-05, -0.0014858245849609375, -2.47955322265625e-05, -0.000102996826171875, -0.0001850128173828125, 0.0, -0.0005741119384765625, -2.6702880859375e-05, -0.000457763671875, -1.9073486328125e-06, -4.971027374267578e-05, -2.0265579223632812e-06, -0.0010510683059692383, -1.9073486328125e-06, -0.0012773240450769663, -0.000194549560546875, -0.0016326904296875, -0.0001983642578125, -3.814697265625e-06, -1.9073486328125e-05, -7.62939453125e-06, -0.0001888275146484375, 0.0, -4.57763671875e-05, 0.0, -0.00060272216796875, -1.9073486328125e-06, -0.8488073348999023, -0.0002307891845703125, -2.288818359375e-05, -0.0029888153076171875, -0.0001125335693359375, -0.00034413536195643246, -1.7046926586772315e-05, -0.0001850128173828125, -3.24249267578125e-05, -0.00018334314518142492, -5.7220458984375e-06, -0.001888275146484375, -0.0019893646240234375, -0.0005092620849609375, -1.9073486328125e-06, -9.989738464355469e-05, 0.0, -0.000202178955078125, 0.0, -0.17852020263671875, -1.9073486328125e-06, -0.008553504943847656, 0.0, -0.004473686218261719, -1.9073486328125e-06, -2.6702880859375e-05, -6.103515625e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.24249267578125e-05, -5.7220458984375e-06, 0.0, -0.0007686614990234375, -3.814697265625e-06, -0.00037407875061035156, -3.814697265625e-06, -0.0056449174880981445, -5.7220458984375e-06, -0.0004119873046875, -0.024950027465820312, -0.0002040863037109375, -9.72747802734375e-05, -0.00030517578125, -1.52587890625e-05, 0.0, -0.0037746429443359375, 0.0, -0.0021096467971801758, -1.9073486328125e-06, -2.47955322265625e-05, -2.6702880859375e-05, -0.0001087188720703125, -3.997841849923134e-05, -1.9073486328125e-06, -0.0009212493896484375, -1.52587890625e-05, -0.04220569133758545, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -1.8759705275181062, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.8932962417602539, -1.9073486328125e-06, -0.00518035888671875, -1.9073486328125e-06, -0.0925588607788086, -1.1920928244535389e-07, -0.12438321113586426, 0.0, -0.42093372344970703, -0.000125885009765625, -3.814697265625e-06, -2.6702880859375e-05, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -0.0002593994140625, -1.9073486328125e-06, -0.0005685091018676758, -1.9073486328125e-06, -0.007122039794921875, -5.7220458984375e-06, -0.0001049041748046875, -0.059912681579589844, -9.72747802734375e-05, -4.76837158203125e-05, -0.000308990478515625, -1.52587890625e-05, 0.0, -0.009461402893066406, 0.0, -0.0027467012405395508, -1.9073486328125e-06, -1.71661376953125e-05, -2.288818359375e-05, -0.0001049041748046875, -3.504171036183834e-05, -1.9073486328125e-06, -0.001232147216796875, -2.288818359375e-05, -0.0418468713760376, -9.5367431640625e-06, -0.009406089782714844, -0.003810882568359375, -0.00034332275390625, -1.9073486328125e-06, -8.594989776611328e-05, 0.0, -0.0002651214599609375, 0.0, -0.027606964111328125, -1.9073486328125e-06, -0.00525665283203125, 0.0, -0.006073951721191406, -1.9073486328125e-06, -2.09808349609375e-05, -7.82012939453125e-05, -3.814697265625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -2.47955322265625e-05, 0.0, -0.00011444091796875, -3.814697265625e-06, -0.00018334388732910156, -3.814697265625e-06, -0.0064612627029418945, -3.814697265625e-06, -0.000614166259765625, -0.034239768981933594, -0.000186920166015625, -0.000152587890625, -0.000240325927734375, -1.1444091796875e-05, 0.0, -0.0037593841552734375, 0.0, -0.0020085573196411133, -1.9073486328125e-06, -2.47955322265625e-05, -2.6702880859375e-05, -0.0001068115234375, -4.046270623803139e-05, -1.9073486328125e-06, -0.0009059906005859375, -3.4332275390625e-05, -0.061835527420043945, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -3.388844588976319, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in game.other_player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.5578241348266602, -4.57763671875e-05, -0.0010089874267578125, -1.1444091796875e-05, -0.0002231597900390625, -3.814697265625e-06, -0.0008068084716796875, -3.814697265625e-05, -0.0014858245849609375, -2.47955322265625e-05, -0.000102996826171875, -0.0001850128173828125, 0.0, -0.0005741119384765625, -2.6702880859375e-05, -0.000457763671875, -1.9073486328125e-06, -4.971027374267578e-05, -2.0265579223632812e-06, -0.0010510683059692383, -1.9073486328125e-06, -0.0012773240450769663, -0.000194549560546875, -0.0016326904296875, -0.0001983642578125, -3.814697265625e-06, -1.9073486328125e-05, -7.62939453125e-06, -0.0001888275146484375, 0.0, -4.57763671875e-05, 0.0, -0.00060272216796875, -1.9073486328125e-06, -0.8488073348999023, -0.0002307891845703125, -2.288818359375e-05, -0.0029888153076171875, -0.0001125335693359375, -0.00034413536195643246, -1.7046926586772315e-05, -0.0001850128173828125, -3.24249267578125e-05, -0.00018334314518142492, -5.7220458984375e-06, -0.001888275146484375, -0.0019893646240234375, -0.0005092620849609375, -1.9073486328125e-06, -9.989738464355469e-05, 0.0, -0.000202178955078125, 0.0, -1.8121776580810547, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.0009899139404296875, 0.0, -0.004064679145812988, 0.0, -0.007215464953333139, -1.1444091796875e-05, -8.0108642578125e-05, -8.7738037109375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, 0.0, -0.00098419189453125, -1.9073486328125e-06, -0.0005331039428710938, -3.814697265625e-06, -0.02172374725341797, -7.62939453125e-06, -0.0001697540283203125, -0.01829814910888672, -0.0002727508544921875, -9.5367431640625e-05, -0.0002498626708984375, -1.71661376953125e-05, 0.0, -0.0030040740966796875, 0.0, -0.0023232698440551758, -1.9073486328125e-06, -3.0517578125e-05, -3.814697265625e-05, -0.0001087188720703125, -4.450604319572449e-05, -1.9073486328125e-06, -0.001262664794921875, -9.5367431640625e-06, -0.03770005702972412, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -3.712203650956546, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.8932962417602539, -1.9073486328125e-06, -0.00518035888671875, -1.9073486328125e-06, -2.4733285903930664, 0.0, -0.0026150941848754883, -1.9073486328125e-06, -0.0002422332763671875, -0.000118255615234375, -9.5367431640625e-06, -7.62939453125e-06, -7.62939453125e-06, -3.24249267578125e-05, 0.0, -0.000156402587890625, -1.9073486328125e-06, -0.0002747774124145508, -1.9073486328125e-06, -0.006343960762023926, -3.814697265625e-06, -0.0002574920654296875, -0.052086830139160156, -0.0001163482666015625, -9.72747802734375e-05, -0.000415802001953125, -1.1444091796875e-05, 0.0, -0.00431060791015625, 0.0, -0.0021477937698364258, -1.9073486328125e-06, -1.9073486328125e-05, -2.09808349609375e-05, -0.0001068115234375, -3.681657835841179e-05, -1.9073486328125e-06, -0.0010890960693359375, -2.288818359375e-05, -0.0518871545791626, -9.5367431640625e-06, -0.009982109069824219, -0.0038433074951171875, -0.0003414154052734375, -1.9073486328125e-06, -8.785724639892578e-05, 0.0, -0.000270843505859375, 0.0, -0.02866363525390625, -1.9073486328125e-06, -0.0052776336669921875, 0.0, -0.006047248840332031, -1.9073486328125e-06, -2.09808349609375e-05, -7.82012939453125e-05, -3.814697265625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -2.47955322265625e-05, 0.0, -0.000110626220703125, -3.814697265625e-06, -0.0001823902130126953, -3.814697265625e-06, -0.0064955949783325195, -3.814697265625e-06, -0.0006237030029296875, -0.03431129455566406, -0.000186920166015625, -0.0001544952392578125, -0.00023651123046875, -1.1444091796875e-05, 0.0, -0.0037279129028320312, 0.0, -0.0020066499710083008, -1.9073486328125e-06, -2.47955322265625e-05, -2.6702880859375e-05, -0.0001068115234375, -4.081800580024719e-05, -1.9073486328125e-06, -0.0008678436279296875, -3.4332275390625e-05, -0.06257545948028564, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.263724951756714, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player:\n            minion = game.random_choice(minions)\n            minion.heal(player.effective_heal_power(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.8932962417602539, -1.9073486328125e-06, -0.00518035888671875, -1.9073486328125e-06, -0.0925588607788086, -1.1920928244535389e-07, -0.12438321113586426, 0.0, -1.101029396057129, -0.23860645294189453, -9.34600830078125e-05, -9.5367431640625e-06, -0.0021228790283203125, -1.9073486328125e-06, -0.07351279258728027, 0.0, -0.0016117095947265625, -1.1444091796875e-05, -1.9073486328125e-05, 0.0, -0.00016021728515625, -1.9073486328125e-06, -0.09956276416778564, -4.52994936495088e-06, -0.02204716205596924, -3.576278118089249e-07, -0.0002002716064453125, -0.00035858154296875, -5.91278076171875e-05, -0.4065495729446411, -1.9073486328125e-06, -0.08431053161621094, -0.000213623046875, -5.340576171875e-05, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00017547607421875, -9.5367431640625e-06, -0.00030291080474853516, -1.9073486328125e-06, -0.7702662944793701, -1.9073486328125e-06, -2.86102294921875e-05, -0.03156566619873047, -0.0001201629638671875, -0.0004787445068359375, -3.62396240234375e-05, -9.5367431640625e-06, 0.0, -0.007379651069641113, 0.0, -0.0023180246353149414, 0.0, -3.62396240234375e-05, -0.0001163482666015625, -9.5367431640625e-05, -5.272403359413147e-05, -1.9073486328125e-06, -0.000354766845703125, -4.1961669921875e-05, -0.07858610153198242, -9.5367431640625e-06, -0.008516311645507812, -0.00392913818359375, -0.0003948211669921875, -1.9073486328125e-06, -8.785724639892578e-05, 0.0, -0.0002593994140625, 0.0, -0.03685188293457031, -1.9073486328125e-06, -0.0050373077392578125, 0.0, -0.006674766540527344, -1.9073486328125e-06, -2.288818359375e-05, -6.29425048828125e-05, -3.814697265625e-06, -1.1444091796875e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -0.0001049041748046875, -3.814697265625e-06, -0.00016045570373535156, -3.814697265625e-06, -0.006809353828430176, -3.814697265625e-06, -0.00070953369140625, -0.03298187255859375, -0.0002117156982421875, -0.0001773834228515625, -0.000194549560546875, -1.1444091796875e-05, 0.0, -0.0031147003173828125, 0.0, -0.0019952058792114258, -1.9073486328125e-06, -2.86102294921875e-05, -3.0517578125e-05, -0.0001068115234375, -4.33875247836113e-05, -1.9073486328125e-06, -0.000728607177734375, -4.00543212890625e-05, -0.06487429141998291, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 296, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.264064491714855, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.heal(player.effective_heal_power(2), game)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.5578241348266602, -4.57763671875e-05, -0.0010089874267578125, -1.1444091796875e-05, -0.0002231597900390625, -3.814697265625e-06, -0.0008068084716796875, -3.814697265625e-05, -0.0014858245849609375, -2.47955322265625e-05, -0.000102996826171875, -0.0001850128173828125, 0.0, -0.0005741119384765625, -2.6702880859375e-05, -0.000457763671875, -1.9073486328125e-06, -4.971027374267578e-05, -2.0265579223632812e-06, -0.0010510683059692383, -1.9073486328125e-06, -0.0012773240450769663, -0.000194549560546875, -0.0016326904296875, -0.0001983642578125, -3.814697265625e-06, -1.9073486328125e-05, -7.62939453125e-06, -0.0001888275146484375, 0.0, -4.57763671875e-05, 0.0, -0.00060272216796875, -1.9073486328125e-06, -0.5971393585205078, -7.62939453125e-06, -0.0001659393310546875, -0.060161590576171875, -0.0001926422119140625, -0.000118255615234375, -0.00012969970703125, -5.7220458984375e-06, 0.0, -0.020778775215148926, 0.0, -0.0023963451385498047, 0.0, -1.1444091796875e-05, -3.4332275390625e-05, -0.000110626220703125, -3.336835652589798e-05, -1.9073486328125e-06, -0.0012760162353515625, -1.52587890625e-05, -2.8154420852661133, -2.2649765014648438e-06, -0.0092926025390625, -0.0011749267578125, -0.000919342041015625, -1.9073486328125e-06, -6.890296936035156e-05, 0.0, -0.0005168914794921875, 0.0, -0.00861358642578125, 0.0, -0.00495147705078125, 0.0, -0.005028724670410156, -1.9073486328125e-06, -2.47955322265625e-05, -6.4849853515625e-05, -3.814697265625e-06, -1.1444091796875e-05, -7.62939453125e-06, -2.86102294921875e-05, 0.0, -9.34600830078125e-05, -3.814697265625e-06, -0.00020241737365722656, -3.814697265625e-06, -0.006448864936828613, -3.814697265625e-06, -0.0006618499755859375, -0.0377349853515625, -0.0001735687255859375, -0.0001430511474609375, -0.000278472900390625, -1.1444091796875e-05, 0.0, -0.004384040832519531, 0.0, -0.0020276308059692383, -1.9073486328125e-06, -2.288818359375e-05, -2.47955322265625e-05, -0.0001068115234375, -3.84598970413208e-05, -1.9073486328125e-06, -0.0009326934814453125, -3.4332275390625e-05, -0.06236672401428223, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.284761864152799, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player:\n            minion = game.random_choice(minions)\n            minion.damage(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"args": [{"_type": "Name", "id": "minions"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "random_choice", "value": {"_type": "Name", "id": "game"}}}}, {"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.8932962417602539, -1.9073486328125e-06, -0.00518035888671875, -1.9073486328125e-06, -0.0925588607788086, -1.1920928244535389e-07, -0.12438321113586426, 0.0, -1.101029396057129, -0.23860645294189453, -9.34600830078125e-05, -9.5367431640625e-06, -0.0021228790283203125, -1.9073486328125e-06, -0.07351279258728027, 0.0, -0.0016117095947265625, -1.1444091796875e-05, -1.9073486328125e-05, 0.0, -0.00016021728515625, -1.9073486328125e-06, -0.09956276416778564, -4.52994936495088e-06, -0.02204716205596924, -3.576278118089249e-07, -0.0002002716064453125, -0.00035858154296875, -5.91278076171875e-05, -0.4065495729446411, -1.9073486328125e-06, -0.08431053161621094, -0.000213623046875, -5.340576171875e-05, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00017547607421875, -9.5367431640625e-06, -0.00030291080474853516, -1.9073486328125e-06, -0.6690213680267334, -5.53131103515625e-05, -2.288818359375e-05, -0.004703521728515625, -0.0002307891845703125, -0.0007008406682871282, -1.811981201171875e-05, -4.57763671875e-05, -1.52587890625e-05, -0.00037050130777060986, -1.9073486328125e-06, -0.003047943115234375, -0.001873016357421875, -0.00046539306640625, -1.9073486328125e-06, -7.748603820800781e-05, 0.0, -0.0002307891845703125, 0.0, -0.3033409118652344, -1.9073486328125e-06, -0.009151458740234375, 0.0, -0.0048961639404296875, -1.9073486328125e-06, -3.0517578125e-05, -4.38690185546875e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.0517578125e-05, -5.7220458984375e-06, 0.0, -0.0008335113525390625, -3.814697265625e-06, -0.00032639503479003906, -3.814697265625e-06, -0.0061293840408325195, -5.7220458984375e-06, -0.00043487548828125, -0.022592544555664062, -0.0002536773681640625, -0.0001201629638671875, -0.000202178955078125, -1.71661376953125e-05, 0.0, -0.002483367919921875, 0.0, -0.0021115541458129883, -1.9073486328125e-06, -3.24249267578125e-05, -3.814697265625e-05, -0.0001068115234375, -4.94224950671196e-05, -1.9073486328125e-06, -0.0006847381591796875, -1.71661376953125e-05, -0.05192387104034424, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 296, 85, 128, 282, 45, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "game", "<EOS>", "random_choice", "<EOS>", 282, 45, 160, "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.385701423613902, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.heal(player.effective_spell_damage(2), self)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}, "body": [{"_type": "Expr", "value": {"args": [{"hole0": 2, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -0.009919166564941406, -5.7220458984375e-06, -0.0004597902297973633, 0.0, -5.7220458984375e-06, -4.00543212890625e-05, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.110004425048828e-05, 0.0, -3.62396240234375e-05, -6.4373016357421875e-06, -2.9802317840221804e-06, -0.031905174255371094, -3.24249267578125e-05, -1.1444091796875e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.4332275390625e-05, -4.57763671875e-05, -1.71661376953125e-05, 0.0, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -5.841255187988281e-06, -0.0050106048583984375, -7.05718994140625e-05, -0.0003299713134765625, -3.814697265625e-06, -0.0007655620574951172, 0.0, -0.5578241348266602, -4.57763671875e-05, -0.0010089874267578125, -1.1444091796875e-05, -0.0002231597900390625, -3.814697265625e-06, -0.0008068084716796875, -3.814697265625e-05, -0.0014858245849609375, -2.47955322265625e-05, -0.000102996826171875, -0.0001850128173828125, 0.0, -0.0005741119384765625, -2.6702880859375e-05, -0.000457763671875, -1.9073486328125e-06, -4.971027374267578e-05, -2.0265579223632812e-06, -0.0010510683059692383, -1.9073486328125e-06, -0.0012773240450769663, -0.000194549560546875, -0.0016326904296875, -0.0001983642578125, -3.814697265625e-06, -1.9073486328125e-05, -7.62939453125e-06, -0.0001888275146484375, 0.0, -4.57763671875e-05, 0.0, -0.00060272216796875, -1.9073486328125e-06, -0.5971393585205078, -7.62939453125e-06, -0.0001659393310546875, -2.877303123474121, -0.000148773193359375, -0.0003834597591776401, -2.241134461655747e-05, -0.00017547607421875, -5.340576171875e-05, -0.00026118694222532213, -5.7220458984375e-06, -0.001712799072265625, -0.0021305084228515625, -0.000408172607421875, -1.9073486328125e-06, -0.0001016855239868164, 0.0, -0.0002231597900390625, 0.0, -0.19223785400390625, -1.9073486328125e-06, -0.007729530334472656, 0.0, -0.004700660705566406, -1.9073486328125e-06, -2.47955322265625e-05, -6.4849853515625e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.24249267578125e-05, -5.7220458984375e-06, 0.0, -0.0007419586181640625, -3.814697265625e-06, -0.00036454200744628906, -3.814697265625e-06, -0.005682110786437988, -5.7220458984375e-06, -0.000408172607421875, -0.025496482849121094, -0.0001964569091796875, -9.72747802734375e-05, -0.0003070831298828125, -1.52587890625e-05, 0.0, -0.0038852691650390625, 0.0, -0.0021153688430786133, -1.9073486328125e-06, -2.47955322265625e-05, -2.6702880859375e-05, -0.0001087188720703125, -3.9385631680488586e-05, -1.9073486328125e-06, -0.0009937286376953125, -1.33514404296875e-05, -0.04048752784729004, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 63, 253, "2", "<EOS>", 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.9702342813577545, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -4.691037178039551, -0.002277374267578125, -0.06564521789550781, 0.0, -0.2072843313217163, -3.4332275390625e-05, -0.0002727508544921875, -2.0265579223632812e-06, -0.0010128021240234375, -7.05718994140625e-05, -7.62939453125e-06, -2.5040688342414796e-05, -2.1457672119140625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.024232633666294, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"hole0": {"_type": "Name", "id": "game"}, "_type": "Template0", "hole1": "other_player", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -4.691037178039551, -0.002277374267578125, -0.06564521789550781, 0.0, -2.255999803543091, 0.0, -0.0027579069137573242, -1.1920928244535389e-07, -0.00390625, -3.4332275390625e-05, -3.814697265625e-06, -7.637343514943495e-06, -1.1920928244535389e-07], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 95, 172, 19, 160, "game", "<EOS>", "other_player", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.347648746291945, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -4.691037178039551, -0.002277374267578125, -0.06564521789550781, 0.0, -2.5517189502716064, 0.0, -0.030116796493530273, -1.9073468138230965e-06, -0.0042400360107421875, -1.33514404296875e-05, -5.7220458984375e-06, -2.7424859581515193e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 95, 172, 19, 160, "player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.689366919719525, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "_type": "Template15", "hole1": 5, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -0.000820159912109375, -4.38690185546875e-05, -1.764281842042692e-05, -1.8358225133852102e-05, -2.1457672119140625e-06, -9.5367431640625e-06, -1.358979079668643e-05, -1.1920928244535389e-07, -0.0006277561187744141, -0.0003644227981567383, -4.691037178039551, -0.002277374267578125, -2.828624725341797, -0.00012969970703125, -1.71661376953125e-05, 0.0, -0.017170310020446777, 0.0, -0.008070230484008789, 0.0, -0.13900361955165863, -6.711257447022945e-05, -0.0003299713134765625, -5.7220458984375e-06, -1.1444091796875e-05, -5.7578523410484195e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.194061637067534, "inferred_code": "class HolyNova(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Nova', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Nova", "hole2": "PRIEST", "_type": "Template11", "hole1": 5, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolyNova"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -8.106222594506107e-06, -2.9802276912960224e-06, -0.000286102294921875, 0.0, -3.814697265625e-06, -7.081031799316406e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.0001068115234375, -7.9837446212768555, -0.0001087188720703125, -9.536738616588991e-07, -3.778933023568243e-05, -5.125998541188892e-06, -9.5367431640625e-06, -3.099436753473128e-06, 0.0, -0.0025751590728759766, -7.62939453125e-06, -0.00020825862884521484, 0.0, -0.00011444091796875, -3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.017078399658203125, -5.7220458984375e-05, -0.0003185272216796875, 0.0, -0.0007028579711914062, -1.633167266845703e-05, -0.1605377197265625, -0.000965118408203125, -0.0029344558715820312, 0.0, -0.022240161895751953, -5.7220458984375e-06, -0.000316619873046875, -2.0265579223632812e-06, -0.0012874603271484375, -3.0517578125e-05, -7.62939453125e-06, -2.0861807570327073e-05, -5.006785613659304e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Nova", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Holy", " ", "Nova", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -22.5218505859375, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -4.1961669921875e-05, -22.52180290222168], "choice_history": [80, 159, 294]}]}
{"index": 51, "beams": [{"score": -0.04981540789502503, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Holy Smite"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -0.03570270538330078, -0.0008697509765625, -2.47955322265625e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -2.9802276912960224e-06, 0.0, -3.4332275390625e-05, 0.0, -0.0006961822509765625, -2.288818359375e-05, 0.0, -2.13382354559144e-05, -1.20401346066501e-05, -4.0531158447265625e-06, -4.1961669921875e-05, -3.62396240234375e-05, -5.14984130859375e-05, -5.8407895267009735e-06, -2.6702880859375e-05, -0.0001678466796875, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.0003681182861328125, -1.1920928244535389e-07, -0.0010890960693359375, 0.0, -9.5367431640625e-06, 0.0, -0.0001773834228515625, -3.814697265625e-06, -0.0002002716064453125, 0.0, -0.0008335113525390625, -3.24249267578125e-05, -7.62939453125e-06, -0.0002880096435546875, -0.0001125335693359375, -0.0008585453033447266, -1.1920928244535389e-07, -7.62939453125e-05, 0.0, -4.38690185546875e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0005385875701904297, -9.5367431640625e-06, -0.0001964569091796875, -2.0265579223632812e-06, -0.0008616447448730469, -9.477099229115993e-05, -0.001102447509765625, -0.0001697540283203125, -0.0011234283447265625, 0.0, -0.00030040740966796875, -5.7220458984375e-06, -0.000301361083984375, -1.9073486328125e-06, -6.103515625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -5.118665285408497e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Holy", " ", "Smite", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -4.888435014006063, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(2, self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 2}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -0.47608810663223267, -1.9073486328125e-06, -0.005412101745605469, 0.0, -0.10068225860595703, -0.001911163330078125, -1.9073486328125e-05, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.036604881286621094, -1.9073486328125e-06, -7.05718994140625e-05, -1.9073486328125e-06, -0.5136741399765015, 0.0, -0.021884918212890625, -0.19797897338867188, -1.9073486328125e-06, -0.0031864549964666367, -1.9073486328125e-06, -0.0009441375732421875, -1.9073486328125e-06, -0.005290508270263672, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -5.812436161976613, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(2, self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"_type": "Num", "n": 2}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -1.1064258813858032, 0.0, -0.020499229431152344, 0.0, -0.20935630798339844, -0.018758773803710938, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.02788829803466797, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.6108661890029907, -1.1920928244535389e-07, -0.03267478942871094, -0.2433156967163086, -1.9073486328125e-06, -0.008851271122694016, 0.0, -0.00072479248046875, -1.9073486328125e-06, -0.008308887481689453, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.280179768748866, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.append(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "append", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -0.47608810663223267, -1.9073486328125e-06, -0.005412101745605469, 0.0, -0.10068225860595703, -0.001911163330078125, -1.9073486328125e-05, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.036604881286621094, -1.9073486328125e-06, -7.05718994140625e-05, -1.9073486328125e-06, -2.1289761066436768, -2.3841855067985307e-07, -0.0021648406982421875, -0.00022125244140625, -9.5367431640625e-06, -0.0033376342616975307, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "append", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.614778411988482, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -0.47608810663223267, -1.9073486328125e-06, -0.005412101745605469, 0.0, -0.10068225860595703, -0.001911163330078125, -1.9073486328125e-05, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.036604881286621094, -1.9073486328125e-06, -7.05718994140625e-05, -1.9073486328125e-06, -0.5136741399765015, 0.0, -0.021884918212890625, -1.8819446563720703, -0.0002422332763671875, -0.0366668701171875, -0.00032806396484375, -0.000339508056640625, 0.0, -0.002132415771484375, 0.0, -0.0024210214614868164, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.288818359375e-05, -0.000433201901614666, -1.9073486328125e-06, -0.008304595947265625, -1.1444091796875e-05, -0.0008622407913208008, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -6.977037030453175, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -1.1064258813858032, 0.0, -0.020499229431152344, 0.0, -0.20935630798339844, -0.018758773803710938, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.02788829803466797, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -2.059018611907959, -1.9073486328125e-06, -0.000324249267578125, -0.008959770202636719, -9.5367431640625e-06, -0.0010323531460016966, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -6.9989552284887395, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -0.47608810663223267, -1.9073486328125e-06, -0.005412101745605469, 0.0, -0.10068225860595703, -0.001911163330078125, -1.9073486328125e-05, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.036604881286621094, -1.9073486328125e-06, -7.05718994140625e-05, -1.9073486328125e-06, -2.8439433574676514, -1.9073486328125e-06, -0.0011692047119140625, -0.007443428039550781, -7.62939453125e-06, -0.0009195419843308628, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.052792776789829, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -1.1064258813858032, 0.0, -0.020499229431152344, 0.0, -2.3877439498901367, -0.0003204345703125, -0.0046176910400390625, 0.0, -0.001071929931640625, -9.5367431640625e-06, -0.001018524169921875, 0.0, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -0.006262453272938728, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -7.302136576216974, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "DRUID", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -1.1064258813858032, 0.0, -0.020499229431152344, 0.0, -0.20935630798339844, -0.018758773803710938, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.02788829803466797, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -0.6108661890029907, -1.1920928244535389e-07, -0.03267478942871094, -1.709014892578125, -0.0002727508544921875, -0.029298782348632812, -0.00022125244140625, -0.000301361083984375, 0.0, -0.0017108917236328125, 0.0, -0.001980423927307129, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -2.47955322265625e-05, -0.0007460899651050568, 0.0, -0.0065059661865234375, -1.52587890625e-05, -0.0007838010787963867, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -7.332324090012662, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "damage", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -0.47608810663223267, -1.9073486328125e-06, -0.005412101745605469, 0.0, -0.10068225860595703, -0.001911163330078125, -1.9073486328125e-05, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.036604881286621094, -1.9073486328125e-06, -7.05718994140625e-05, -1.9073486328125e-06, -2.949859380722046, -5.841255187988281e-06, -0.2360696792602539, -1.1444091796875e-05, -3.0517578125e-05, -0.0008751602144911885, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.236962411298691, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(2), self)\n", "model_output": {"body": [{"body": [{"hole0": "Holy Smite", "_type": "Template17", "hole1": 1, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 2}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -7.681205749511719, -0.000274658203125, -0.00011014506162609905, -2.5272369384765625e-05, -1.2040087312925607e-05, -1.9073486328125e-06, -4.7683624870842323e-07, 0.0, -0.0006481409072875977, 0.0, -0.14206790924072266, -0.0017490386962890625, -0.17520618438720703, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.06075727939605713, 0.0, -0.003805994987487793, -7.152555099310121e-07, -0.16873179376125336, -0.0008068405441008508, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.0011889543384313583, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Holy", " ", "Smite", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "2", "<EOS>"]}, {"score": -8.977066304017143, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -0.47608810663223267, -1.9073486328125e-06, -0.005412101745605469, 0.0, -2.6739625930786133, -1.33514404296875e-05, -0.0006999969482421875, -3.814697265625e-06, -1.33514404296875e-05, -1.71661376953125e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -1.1563301086425781e-05, -2.3841855067985307e-07, -0.0077075958251953125, -1.71661376953125e-05, -1.71661376953125e-05, -0.00061798095703125, -2.09808349609375e-05, -1.52587890625e-05, 0.0, -2.47955322265625e-05, -0.0001735687255859375, -4.9591064453125e-05, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0001430511474609375, -1.33514404296875e-05, -2.47955322265625e-05, -2.372264862060547e-05, -0.0004901885986328125, -5.14984130859375e-05, -0.000408172607421875, -1.1444091796875e-05, -0.0007358789443969727, 0.0, -0.2672281265258789, 0.0, -0.6652412414550781, 0.0, -5.340576171875e-05, -1.9073486328125e-06, -0.0013486146926879883, -2.0265579223632812e-06, -0.0029144287109375, -1.71661376953125e-05, -0.005757802166044712, -3.063678741455078e-05, -0.0007839202880859375, -0.0014171600341796875, -1.9073486328125e-06, -0.00031280517578125, -4.9591064453125e-05, -0.0002460479736328125, 0.0, -0.0013408660888671875, 0.0, -0.00016129016876220703, -3.814697265625e-06, -1.3134536743164062, 0.0, -0.0006656646728515625, -0.010710716247558594, -0.0002040863037109375, -0.0015010833740234375, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -0.0013793706893920898, 0.0, -0.002980470657348633, -1.9073486328125e-05, -5.91278076171875e-05, -3.814697265625e-06, -1.9073486328125e-05, -0.0013673454523086548, -1.9073486328125e-06, -0.005864143371582031, -7.62939453125e-06, -0.0003151893615722656, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -9.362516798982995, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Smite', 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Smite", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "heal", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -2.2290902137756348, -0.0001918077323352918, -0.5160230398178101, -7.62939453125e-06, -0.01969623565673828, -2.3841855067985307e-07, -0.8952722549438477, -1.71661376953125e-05, -0.0005893707275390625, -3.814697265625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, -1.0132789611816406e-05, -2.3841855067985307e-07, -0.012348175048828125, -1.71661376953125e-05, -1.71661376953125e-05, -0.000560760498046875, -2.09808349609375e-05, -1.52587890625e-05, 0.0, -2.47955322265625e-05, -0.00019073486328125, -4.9591064453125e-05, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.00014495849609375, -1.33514404296875e-05, -2.47955322265625e-05, -2.372264862060547e-05, -0.0005207061767578125, -4.9591064453125e-05, -0.0004138946533203125, -1.1444091796875e-05, -0.0007387399673461914, 0.0, -0.2551698684692383, 0.0, -0.6692180633544922, 0.0, -5.340576171875e-05, -1.9073486328125e-06, -0.0013581514358520508, -2.0265579223632812e-06, -0.00289154052734375, -1.728534698486328e-05, -0.00577878300100565, -3.063678741455078e-05, -0.000789642333984375, -0.0013942718505859375, -1.9073486328125e-06, -0.0003108978271484375, -4.9591064453125e-05, -0.000244140625, 0.0, -0.0013523101806640625, 0.0, -0.00016129016876220703, -3.814697265625e-06, -1.3160123825073242, 0.0, -0.000667572021484375, -0.010786056518554688, -0.0002040863037109375, -0.0015010833740234375, -2.09808349609375e-05, -4.76837158203125e-05, 0.0, -0.0013755559921264648, 0.0, -0.002977609634399414, -1.9073486328125e-05, -5.91278076171875e-05, -3.814697265625e-06, -1.9073486328125e-05, -0.0013784617185592651, -1.9073486328125e-06, -0.0058650970458984375, -7.62939453125e-06, -0.0003151893615722656, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Smite", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "2", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -9.591229389835426, "inferred_code": "class HolySmite(SpellCard):\n\n    def __init__(self):\n        super().__init__('Holy Smite', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in game.other_player.minions:\n            minion.add_buff(3)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Holy Smite", "_type": "Template25", "hole1": "PALADIN", "hole2": "FREE"}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Num", "n": 3}], "_type": "Call", "func": {"_type": "Attribute", "attr": "add_buff", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "HolySmite"}], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.576272320060525e-06, -5.125993993715383e-06, -1.311301275563892e-06, -4.57763671875e-05, 0.0, -1.9073486328125e-06, -2.8967857360839844e-05, -7.653236389160156e-05, -5.352497100830078e-05, -5.53131103515625e-05, -0.0020704269409179688, 0.0, -3.314018249511719e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -7.641315460205078e-05, -1.9073486328125e-06, -0.0001354217529296875, -7.62939453125e-06, -2.6702880859375e-05, -3.3883209228515625, -0.015169143676757812, -0.11410770565271378, -0.004331568721681833, -1.4543494216923136e-05, 0.0, -0.47608810663223267, -1.9073486328125e-06, -0.005412101745605469, 0.0, -2.6739625930786133, -1.33514404296875e-05, -0.0006999969482421875, -3.814697265625e-06, -1.33514404296875e-05, -1.71661376953125e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -1.1563301086425781e-05, -2.3841855067985307e-07, -0.0077075958251953125, -1.71661376953125e-05, -1.71661376953125e-05, -0.00061798095703125, -2.09808349609375e-05, -1.52587890625e-05, 0.0, -2.47955322265625e-05, -0.0001735687255859375, -4.9591064453125e-05, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0001430511474609375, -1.33514404296875e-05, -2.47955322265625e-05, -2.372264862060547e-05, -0.0004901885986328125, -5.14984130859375e-05, -0.000408172607421875, -1.1444091796875e-05, -0.0007358789443969727, 0.0, -0.2672281265258789, 0.0, -0.6652412414550781, 0.0, -5.340576171875e-05, -1.9073486328125e-06, -0.0013486146926879883, -2.0265579223632812e-06, -0.0029144287109375, -1.71661376953125e-05, -0.005757802166044712, -3.063678741455078e-05, -0.0007839202880859375, -0.0014171600341796875, -1.9073486328125e-06, -0.00031280517578125, -4.9591064453125e-05, -0.0002460479736328125, 0.0, -0.0013408660888671875, 0.0, -0.00016129016876220703, -3.814697265625e-06, -1.5117387771606445, -1.1920928244535389e-07, -3.814697265625e-06, -0.30472755432128906, -5.53131103515625e-05, -0.13625472784042358, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Holy", "Smite", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Holy", " ", "Smite", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "add_buff", "<EOS>", 282, 47, 165, "3", "<EOS>"]}, {"score": -21.94127655029297, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.1444091796875e-05, -3.814697265625e-06, -21.941261291503906], "choice_history": [80, 159, 294]}]}
{"index": 52, "beams": [{"score": -0.42914927246874157, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "ChangeHealth", "hole2": "ChangeAttack", "_type": "Template30", "hole1": [{"_type": "Num", "n": 2}], "hole4": [{"hole0": "Buff", "_type": "Template69", "hole1": "Taunt"}], "hole3": 2}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -0.16207504272460938, -0.005428314208984375, -0.0009237527847290039, -0.020040512084960938, -3.4332275390625e-05, -5.7220458984375e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.00041388830868527293, -1.9073486328125e-06, -0.0008070468902587891, -0.02104949951171875, -4.1961669921875e-05, -0.00016856190632097423, -1.1444091796875e-05, -0.0001010894775390625, -0.008665084838867188, -3.814697265625e-06, -0.000743865966796875, -5.841247457283316e-06, -0.0017492033075541258, -3.767002635868266e-05, -1.33514404296875e-05, -0.013692855834960938, -7.62939453125e-06, 0.0, -0.0011386871337890625, -5.91278076171875e-05, 0.0, -0.0001583099365234375, -0.0001888275146484375, -8.0108642578125e-05, -3.24249267578125e-05, -0.000217437744140625, -0.021842122077941895, -0.00023877619241829962, 0.0, -4.1961669921875e-05, 0.0, 0.0, -0.000202178955078125, -3.814697265625e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.0011005401611328125, 0.0, -0.0003871917724609375, -0.000209808349609375, -1.52587890625e-05, -0.0003509521484375, 0.0, -0.010152816772460938, -7.62939453125e-06, -0.0026924610137939453, -7.04526828485541e-05, 0.0, -0.0003414154052734375, -1.1444091796875e-05, -0.0003079899470321834, -1.9073486328125e-06, -0.00018858423572964966, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 51, 205, "Change", "Health", "<EOS>", 282, 47, 165, "2", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Taunt", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -3.000285081765469, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "ChangeHealth", "hole2": "ChangeAttack", "_type": "Template30", "hole1": [{"_type": "Num", "n": 2}], "hole4": [{"hole0": "Buff", "_type": "Template69", "hole1": "Taunt"}], "hole3": 2}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "BEAST", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -2.6304216384887695, -5.7220458984375e-06, -0.001895904541015625, 0.0, -0.0059299468994140625, -2.288818359375e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0012798309326171875, 0.0, -7.62939453125e-06, -0.2045431137084961, -0.0067615509033203125, -0.0014001131057739258, -0.02113819122314453, -2.47955322265625e-05, -5.7220458984375e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0003905235789716244, -1.9073486328125e-06, -0.0009481906890869141, -0.025035858154296875, -3.814697265625e-05, -0.00016522403166163713, -9.5367431640625e-06, -9.1552734375e-05, -0.0077915191650390625, -3.814697265625e-06, -0.0007991790771484375, -5.6028297876764555e-06, -0.0017888303846120834, -3.85044768336229e-05, -1.33514404296875e-05, -0.014646530151367188, -7.62939453125e-06, 0.0, -0.00116729736328125, -5.7220458984375e-05, 0.0, -0.000164031982421875, -0.0001888275146484375, -7.82012939453125e-05, -3.24249267578125e-05, -0.00022125244140625, -0.021541714668273926, -0.00023484228586312383, 0.0, -4.1961669921875e-05, 0.0, 0.0, -0.0002040863037109375, -3.814697265625e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.0011014938354492188, 0.0, -0.0003871917724609375, -0.000209808349609375, -1.52587890625e-05, -0.0003528594970703125, 0.0, -0.010186195373535156, -7.62939453125e-06, -0.002682924270629883, -7.04526828485541e-05, 0.0, -0.00034332275390625, -1.1444091796875e-05, -0.0003077516157645732, -1.9073486328125e-06, -0.00018846502644009888, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 51, 205, "Change", "Health", "<EOS>", 282, 47, 165, "2", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Taunt", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.313575717835185, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "ChangeHealth", "hole2": "ChangeHealth", "_type": "Template30", "hole1": [{"_type": "Num", "n": 2}], "hole4": [{"hole0": "Buff", "_type": "Template69", "hole1": "Taunt"}], "hole3": 2}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -0.16207504272460938, -0.005428314208984375, -0.0009237527847290039, -0.020040512084960938, -3.4332275390625e-05, -5.7220458984375e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.00041388830868527293, -1.9073486328125e-06, -0.0008070468902587891, -3.8834190368652344, -0.0001068115234375, -0.0002095698146149516, -1.1444091796875e-05, -0.0001163482666015625, -0.02618122100830078, -9.5367431640625e-06, -0.0008373260498046875, -5.6028297876764555e-06, -0.0015537904109805822, -4.5299319026526064e-05, -1.1444091796875e-05, -0.019008636474609375, -7.62939453125e-06, 0.0, -0.0010890960693359375, -7.82012939453125e-05, 0.0, -0.0001659393310546875, -0.0001964569091796875, -9.1552734375e-05, -3.24249267578125e-05, -0.00022125244140625, -0.021178364753723145, -0.00023496149515267462, 0.0, -4.1961669921875e-05, 0.0, 0.0, -0.0001964569091796875, -3.814697265625e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.00110626220703125, 0.0, -0.00035858154296875, -0.000209808349609375, -1.52587890625e-05, -0.000354766845703125, 0.0, -0.010008811950683594, -7.62939453125e-06, -0.0027229785919189453, -7.04526828485541e-05, 0.0, -0.0003414154052734375, -1.1444091796875e-05, -0.00030846663867123425, -1.9073486328125e-06, -0.00018858423572964966, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 51, 205, "Change", "Health", "<EOS>", 282, 47, 165, "2", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Taunt", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.522816837391012, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeHealth(3)), MinionSelector(IsType(\n            MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeHealth", "hole2": 3}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -3.0380358695983887, -0.00041961669921875, -0.0030516379047185183, -9.5367431640625e-06, -1.5139515198825393e-05, -0.03549003601074219, -1.9073486328125e-06, -0.19423364102840424, -1.71661376953125e-05, -0.003918647766113281, -0.6129856109619141, -3.4332275390625e-05, 0.0, -0.044859886169433594, -7.43865966796875e-05, 0.0, -0.0001926422119140625, -0.36439990997314453, -0.000202178955078125, -1.52587890625e-05, 0.0, -0.058447957038879395, -0.00038909912109375, 0.0, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.000102996826171875, -1.9073486328125e-06, -9.34600830078125e-05, -3.933906555175781e-06, -0.0009851455688476562, -1.9073486328125e-06, -0.001567840576171875, -0.0001506805419921875, -2.09808349609375e-05, -0.000591278076171875, 0.0, -0.0057525634765625, -3.814697265625e-06, -0.002825617790222168, -6.306170689640567e-05, 0.0, -0.0003204345703125, -7.62939453125e-06, -0.0003277724899817258, -1.9073486328125e-06, -0.0001892987929750234, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.553708048447781, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "ChangeAttack", "hole2": "ChangeAttack", "_type": "Template30", "hole1": [{"_type": "Num", "n": 2}], "hole4": [{"hole0": "Buff", "_type": "Template69", "hole1": "Taunt"}], "hole3": 2}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -0.16207504272460938, -0.005428314208984375, -0.0009237527847290039, -4.063085556030273, -1.33514404296875e-05, -6.29425048828125e-05, -6.4849853515625e-05, -3.814697265625e-06, -0.0004117481003049761, -1.9073486328125e-06, -0.0007439851760864258, -0.10202407836914062, -2.6702880859375e-05, -0.00016415116260759532, -9.5367431640625e-06, -0.0001316070556640625, -0.008096694946289062, -3.814697265625e-06, -0.000919342041015625, -5.125993993715383e-06, -0.0022986026015132666, -3.862371522700414e-05, -1.33514404296875e-05, -0.013695716857910156, -9.5367431640625e-06, 0.0, -0.0012645721435546875, -5.340576171875e-05, 0.0, -0.000156402587890625, -0.0001850128173828125, -7.43865966796875e-05, -3.24249267578125e-05, -0.000202178955078125, -0.021781086921691895, -0.0002446174621582031, 0.0, -3.814697265625e-05, 0.0, 0.0, -0.000202178955078125, -3.814697265625e-06, -6.29425048828125e-05, -3.933906555175781e-06, -0.001087188720703125, 0.0, -0.000408172607421875, -0.000209808349609375, -1.33514404296875e-05, -0.0003509521484375, 0.0, -0.010478973388671875, -7.62939453125e-06, -0.002675294876098633, -7.033347355900332e-05, 0.0, -0.00034332275390625, -1.1444091796875e-05, -0.0003070365637540817, -1.9073486328125e-06, -0.00018858423572964966, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 51, 205, "Change", "Attack", "<EOS>", 282, 47, 165, "2", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Taunt", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.662921738298323, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeHealth(3)), MinionSelector(picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeHealth", "hole2": 3}, {"keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -3.0380358695983887, -0.00041961669921875, -0.0030516379047185183, -9.5367431640625e-06, -1.5139515198825393e-05, -0.03549003601074219, -1.9073486328125e-06, -0.19423364102840424, -1.71661376953125e-05, -0.003918647766113281, -1.227808952331543, -3.814697265625e-06, 0.0, -0.0026187896728515625, -0.0002079010009765625, -1.1920928244535389e-07, -1.1444091796875e-05, -0.000110626220703125, -3.814697265625e-06, -8.20159912109375e-05, 0.0, -0.0008678436279296875, -7.62939453125e-06, -0.001102447509765625, -4.398822784423828e-05, 0.0, -0.00016021728515625, -7.62939453125e-06, -0.001361921662464738, -1.9073486328125e-06, -0.0003306834551040083, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 40, 135, 19, 160, "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.801990978844508, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "ChangeHealth", "hole2": "ChangeAttack", "_type": "Template30", "hole1": [{"_type": "Num", "n": 2}], "hole4": [{"hole0": "Buff", "_type": "Template69", "hole1": "Taunt"}], "hole3": 2}, {"keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -0.16207504272460938, -0.005428314208984375, -0.0009237527847290039, -0.020040512084960938, -3.4332275390625e-05, -5.7220458984375e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.00041388830868527293, -1.9073486328125e-06, -0.0008070468902587891, -0.02104949951171875, -4.1961669921875e-05, -0.00016856190632097423, -1.1444091796875e-05, -0.0001010894775390625, -0.008665084838867188, -3.814697265625e-06, -0.000743865966796875, -5.841247457283316e-06, -0.0017492033075541258, -3.767002635868266e-05, -1.33514404296875e-05, -4.418102264404297, -5.7220458984375e-06, 0.0, -0.001224517822265625, -0.00152587890625, 0.0, -1.33514404296875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.918212890625e-05, 0.0, -0.001041412353515625, -7.62939453125e-06, -0.0014878511428833008, -2.7060508728027344e-05, 0.0, -0.0006694793701171875, -3.24249267578125e-05, -0.0019839496817439795, 0.0, -0.0003561867051757872, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 51, 205, "Change", "Health", "<EOS>", 282, 47, 165, "2", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Taunt", "<EOS>", 40, 135, 19, 160, "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.097263525010469, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(4), CharacterSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": 4, "_type": "Template75"}, {"keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -3.771235942840576, -0.0034914016723632812, -0.24150818586349487, -0.0006008148193359375, -0.000431060791015625, -0.11593914031982422, -3.814697265625e-06, 0.0, -0.6576701402664185, -0.0065517425537109375, 0.0, -0.013561248779296875, -6.29425048828125e-05, -1.9073486328125e-06, -0.1273059844970703, 0.0, -0.00376129150390625, -1.9073486328125e-06, -0.0008126497268676758, -2.956390380859375e-05, 0.0, -0.0001678466796875, -5.7220458984375e-06, -0.0009384126169607043, -1.9073486328125e-06, -0.0001831031549954787, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 66, 257, "4", "<EOS>", 40, 135, 19, 160, "Character", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.145943800983787, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.battlecry, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "ChangeHealth", "hole2": "ChangeAttack", "_type": "Template30", "hole1": [{"_type": "Num", "n": 2}], "hole4": [{"hole0": "Buff", "_type": "Template69", "hole1": "Taunt"}], "hole3": 2}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "battlecry", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -4.758727550506592, 0.0, -0.011174201965332031, 0.0, -0.03141307830810547, -3.62396240234375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.0006448030471801758, 0.0, -5.7220458984375e-06, -0.1852436065673828, -0.006506919860839844, -0.0007596015930175781, -0.02063751220703125, -2.47955322265625e-05, -5.7220458984375e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0003775288350880146, -1.9073486328125e-06, -0.0009882450103759766, -0.0251312255859375, -3.814697265625e-05, -0.0001649856276344508, -9.5367431640625e-06, -9.5367431640625e-05, -0.007969856262207031, -3.814697265625e-06, -0.0008144378662109375, -5.722038622479886e-06, -0.0018610595725476742, -3.886210106429644e-05, -1.71661376953125e-05, -0.017009735107421875, -7.62939453125e-06, 0.0, -0.0012254714965820312, -5.7220458984375e-05, 0.0, -0.000171661376953125, -0.0001850128173828125, -8.0108642578125e-05, -3.4332275390625e-05, -0.0002269744873046875, -0.02254021167755127, -0.00024259088968392462, 0.0, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.00020599365234375, -3.814697265625e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.0011014938354492188, 0.0, -0.000392913818359375, -0.000213623046875, -1.52587890625e-05, -0.000354766845703125, 0.0, -0.010249137878417969, -7.62939453125e-06, -0.0026886463165283203, -7.033347355900332e-05, 0.0, -0.00034332275390625, -1.1444091796875e-05, -0.0003066790523007512, -1.9073486328125e-06, -0.00018846502644009888, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "battlecry", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 51, 205, "Change", "Health", "<EOS>", 282, 47, 165, "2", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Taunt", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.228333120924162, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "ChangeHealth", "hole2": "ChangeAttack", "_type": "Template30", "hole1": [{"_type": "Num", "n": 2}], "hole4": [{"hole0": "Buff", "_type": "Template69", "hole1": "Taunt"}], "hole3": 2}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -4.431126594543457, -5.7220458984375e-06, -0.0001811981201171875, 0.0, -0.000293731689453125, -1.9073486328125e-06, -0.000377655029296875, -1.9073486328125e-06, -0.4727630615234375, 0.0, -0.0050737857818603516, 0.0, -0.0035648345947265625, -1.9073486328125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -0.0011368989944458008, 0.0, -7.62939453125e-06, -0.1862039566040039, -0.005637168884277344, -0.0008341073989868164, -0.019662857055664062, -3.4332275390625e-05, -5.7220458984375e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.00044321283348836005, -1.9073486328125e-06, -0.0008547306060791016, -0.021570205688476562, -3.814697265625e-05, -0.00017249581287615, -9.5367431640625e-06, -9.918212890625e-05, -0.008212089538574219, -3.814697265625e-06, -0.000732421875, -5.9604562920867465e-06, -0.0017469421727582812, -3.790844129980542e-05, -1.33514404296875e-05, -0.013594627380371094, -7.62939453125e-06, 0.0, -0.0011987686157226562, -5.91278076171875e-05, 0.0, -0.0001621246337890625, -0.0001888275146484375, -7.82012939453125e-05, -3.24249267578125e-05, -0.0002231597900390625, -0.02207481861114502, -0.00024056433176156133, 0.0, -4.1961669921875e-05, 0.0, 0.0, -0.000202178955078125, -3.814697265625e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.0011014938354492188, 0.0, -0.000392913818359375, -0.000209808349609375, -1.52587890625e-05, -0.0003528594970703125, 0.0, -0.010143280029296875, -7.62939453125e-06, -0.0026962757110595703, -7.04526828485541e-05, 0.0, -0.0003414154052734375, -1.1444091796875e-05, -0.00030787079595029354, -1.9073486328125e-06, -0.00018858423572964966, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 51, 205, "Change", "Health", "<EOS>", 282, 47, 165, "2", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Taunt", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.308280228910455, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeHealth(3)), MinionSelector(Null, picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeHealth", "hole2": 3}, {"args": [{"_type": "NameConstant", "value": "Null"}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -3.0380358695983887, -0.00041961669921875, -0.0030516379047185183, -9.5367431640625e-06, -1.5139515198825393e-05, -0.03549003601074219, -1.9073486328125e-06, -0.19423364102840424, -1.71661376953125e-05, -0.003918647766113281, -0.6129856109619141, -3.4332275390625e-05, 0.0, -0.044859886169433594, -7.43865966796875e-05, 0.0, -0.0001926422119140625, -1.1971817016601562, -0.0001468658447265625, -1.33514404296875e-05, 0.0, -3.24249267578125e-05, -2.6702880859375e-05, -0.00014495849609375, -0.000274658203125, 0.0, -0.000335693359375, -1.9073486328125e-06, -0.0223541259765625, -5.984306335449219e-05, 0.0, -0.000591278076171875, -1.33514404296875e-05, -0.00047767627984285355, -1.9073486328125e-06, -0.00028693187050521374, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Health", "<EOS>", "3", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 46, 162, "Null", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.322827410698203, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(4), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": 4, "_type": "Template75"}, {"keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -3.771235942840576, -0.0034914016723632812, -0.24150818586349487, -0.0006008148193359375, -0.000431060791015625, -0.11593914031982422, -3.814697265625e-06, 0.0, -1.0143367052078247, -0.018169403076171875, -1.9073486328125e-06, -4.1961669921875e-05, -4.9591064453125e-05, -1.9073486328125e-06, -0.0010242462158203125, 0.0, -0.001117706298828125, 0.0, -0.0005952119827270508, -2.8967857360839844e-05, 0.0, -0.00022125244140625, -7.62939453125e-06, -0.000830529781524092, -1.9073486328125e-06, -0.00019132893066853285, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 66, 257, "4", "<EOS>", 40, 135, 19, 160, "Minion", "Selector", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.587469606729876, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "Give", "_type": "Template66", "hole1": "ChangeHealth", "hole2": 4}, {"hole0": "UserPicker", "_type": "Template41"}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -3.0380358695983887, -0.00041961669921875, -0.0030516379047185183, -9.5367431640625e-06, -1.5139515198825393e-05, -0.03549003601074219, -1.9073486328125e-06, -1.967036247253418, -3.814697265625e-06, -0.32692909240722656, -0.02622699737548828, -0.03197002410888672, -0.0045528411865234375, -1.9073486328125e-06, -0.0001430511474609375, -9.5367431640625e-06, -0.0004483619413804263, 0.0, -0.00012719497317448258, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 59, 248, "Give", "<EOS>", "Change", "Health", "<EOS>", "4", "<EOS>", 53, 219, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -7.375663360779974, "inferred_code": "class Houndmaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Houndmaster', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=Battlecry(Give(Taunt()), MinionSelector(IsType(\n            MINION_TYPE.BEAST), picker=UserPicker())))))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Houndmaster", "hole8": {"args": [{"hole0": "ChangeHealth", "hole2": "ChangeAttack", "_type": "Template30", "hole1": [{"_type": "Num", "n": 2}], "hole4": [{"hole0": "Buff", "_type": "Template69", "hole1": "Taunt"}], "hole3": 2}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"args": [{"hole0": "Give", "_type": "Template69", "hole1": "Taunt"}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "keywords": [{"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}}, "hole7": "battlecry", "hole2": "HUNTER", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 4, "hole4": "minion_type", "hole3": "FREE"}, {"hole0": 4, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Houndmaster"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-05, -0.0025804101023823023, -3.337859743623994e-05, -1.9073486328125e-06, 0.0, 0.0, -2.503394853192731e-06, -0.000225067138671875, -2.503394853192731e-06, -0.0002689361572265625, -0.0065708160400390625, -0.0001678466796875, -7.64102369430475e-05, -1.52587890625e-05, -0.0029336337465792894, 0.0, -0.0004858970642089844, -7.62939453125e-06, -0.01767253875732422, -1.9073486328125e-06, -0.0028764009475708008, 0.0, -0.0008182525634765625, -3.814697265625e-06, -0.0003871917724609375, 0.0, -0.10353660583496094, -1.1920928244535389e-07, -0.009375214576721191, 0.0, -0.0031175613403320312, -1.71661376953125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0017548799514770508, 0.0, -9.5367431640625e-06, -0.16207504272460938, -0.005428314208984375, -0.0009237527847290039, -0.020040512084960938, -3.4332275390625e-05, -5.7220458984375e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.00041388830868527293, -1.9073486328125e-06, -0.0008070468902587891, -0.02104949951171875, -4.1961669921875e-05, -0.00016856190632097423, -1.1444091796875e-05, -0.0001010894775390625, -0.008665084838867188, -3.814697265625e-06, -0.000743865966796875, -5.841247457283316e-06, -0.0017492033075541258, -3.767002635868266e-05, -1.33514404296875e-05, -0.013692855834960938, -7.62939453125e-06, 0.0, -0.0011386871337890625, -5.91278076171875e-05, 0.0, -0.0001583099365234375, -0.0001888275146484375, -8.0108642578125e-05, -3.24249267578125e-05, -0.000217437744140625, -0.021842122077941895, -0.00023877619241829962, 0.0, -4.1961669921875e-05, 0.0, 0.0, -0.000202178955078125, -3.814697265625e-06, -5.91278076171875e-05, -3.933906555175781e-06, -0.0011005401611328125, 0.0, -0.0003871917724609375, -0.000209808349609375, -1.52587890625e-05, -0.0003509521484375, 0.0, -4.724860191345215, -7.62939453125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.06654751300811768, -9.5367431640625e-06, -7.2479248046875e-05, -1.2834138870239258, -1.9073486328125e-05, -0.3202575445175171, -0.0002450656611472368, -0.007375346962362528, -0.006299260072410107, -0.000225067138671875, -0.5091133117675781, -1.9073486328125e-06, 0.0, -0.0075283050537109375, -7.2479248046875e-05, 0.0, -8.392333984375e-05, -0.000408172607421875, -0.0001010894775390625, -2.86102294921875e-05, -5.91278076171875e-05, -0.02029240131378174, -0.0001875162124633789, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -0.000141143798828125, -1.9073486328125e-06, -7.05718994140625e-05, -3.933906555175781e-06, -0.00090789794921875, 0.0, -0.0002307891845703125, -0.0001735687255859375, -1.71661376953125e-05, -0.0003681182861328125, 0.0, -0.006839752197265625, -5.7220458984375e-06, -0.003352046012878418, -6.830691563664004e-05, 0.0, -0.00031280517578125, -9.5367431640625e-06, -0.0003175239253323525, -1.9073486328125e-06, -0.00018798804376274347, 0.0], "choice_history": [80, 159, 295, 88, 138, "Houndmaster", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Houndmaster", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 51, 205, "Change", "Health", "<EOS>", 282, 47, 165, "2", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Taunt", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 14, 136, 19, 160, "Battlecry", "<EOS>", 283, 61, 250, "Give", "<EOS>", "Taunt", "<EOS>", 40, 137, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "4", "<EOS>", "3", "<EOS>"]}, {"score": -23.404281616210938, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -23.40427589416504], "choice_history": [80, 159, 294]}]}
{"index": 53, "beams": [{"score": -0.18920989643606134, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Huffer"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 4, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -0.0025272369384765625, -5.7220458984375e-06, -0.0003192424774169922, -1.1444091796875e-05, -3.814697265625e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.000148773193359375, -0.0001010894775390625, -7.05718994140625e-05, 0.0, -5.91278076171875e-05, 0.0, -2.5510777049930766e-05, 0.0, -8.988380432128906e-05, -1.9073486328125e-06, -0.0749216079711914, -3.814697265625e-06, -2.86102294921875e-05, -1.0251946150674485e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.33514404296875e-05, -0.0005216221907176077, -7.522106170654297e-05, -1.33514404296875e-05, 0.0, -6.866455078125e-05, 0.0, -7.867813110351562e-06, -7.152555099310121e-07, -0.0007441043853759766, -3.62396240234375e-05, -3.0517578125e-05, 0.0, -1.33514404296875e-05, -0.000293731689453125, -2.300739288330078e-05, -2.1457672119140625e-06, -0.00212860107421875, -3.0517578125e-05, -0.00046539306640625, -1.33514404296875e-05, -3.814697265625e-05, -3.814697265625e-06, -0.003692626953125, -4.1961669921875e-05, -7.62939453125e-06, -1.1563301086425781e-05, -0.0002574920654296875, -0.000591278076171875, -2.6702880859375e-05, -4.00543212890625e-05, -1.9073486328125e-06, -7.82012939453125e-05, -1.537799835205078e-05, -0.0001659393310546875, -0.002320885192602873, -0.09209442138671875, -2.86102294921875e-05, -0.00039517879486083984, -1.9073486328125e-06, -0.0001680848654359579, 0.0, -0.005114673171192408, -2.09808349609375e-05, -0.0004253387451171875, -1.71661376953125e-05, -5.924701690673828e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Huffer", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -3.0274831382598393, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Huffer"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 4, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -0.0025272369384765625, -5.7220458984375e-06, -0.0003192424774169922, -1.1444091796875e-05, -3.814697265625e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.000148773193359375, -0.0001010894775390625, -7.05718994140625e-05, 0.0, -5.91278076171875e-05, 0.0, -2.5510777049930766e-05, 0.0, -8.988380432128906e-05, -1.9073486328125e-06, -2.9456233978271484, -1.33514404296875e-05, -7.2479248046875e-05, -8.821448318485636e-06, -2.3841855067985307e-07, 0.0, -1.71661376953125e-05, -0.0007695313543081284, -6.35385513305664e-05, -7.62939453125e-06, 0.0, -0.0001125335693359375, 0.0, -1.7881393432617188e-05, -9.536738616588991e-07, -0.00037801265716552734, -8.0108642578125e-05, -6.4849853515625e-05, 0.0, -1.71661376953125e-05, -4.9591064453125e-05, -5.841255187988281e-06, -2.0265579223632812e-06, -0.0037136077880859375, -1.9073486328125e-05, -0.005748748779296875, -0.0003643035888671875, -2.6702880859375e-05, -1.919269561767578e-05, -5.7220458984375e-05, -0.00072479248046875, -1.71661376953125e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001430511474609375, -1.919269561767578e-05, -0.000179290771484375, -0.0020565984304994345, -0.056140899658203125, -3.62396240234375e-05, -0.0004502534866333008, -1.9073486328125e-06, -0.00016844247875269502, 0.0, -0.005660295020788908, -1.1444091796875e-05, -0.0003910064697265625, -1.9073486328125e-05, -5.733966827392578e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Huffer", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -3.4682176465892027, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Huffer"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 4, "_type": "Template65", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -0.0025272369384765625, -5.7220458984375e-06, -0.0003192424774169922, -1.1444091796875e-05, -3.814697265625e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.000148773193359375, -0.0001010894775390625, -7.05718994140625e-05, 0.0, -5.91278076171875e-05, 0.0, -2.5510777049930766e-05, 0.0, -8.988380432128906e-05, -1.9073486328125e-06, -0.0749216079711914, -3.814697265625e-06, -2.86102294921875e-05, -1.0251946150674485e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.33514404296875e-05, -0.0005216221907176077, -7.522106170654297e-05, -1.33514404296875e-05, 0.0, -6.866455078125e-05, 0.0, -7.867813110351562e-06, -7.152555099310121e-07, -0.0007441043853759766, -3.62396240234375e-05, -3.0517578125e-05, 0.0, -1.33514404296875e-05, -0.000293731689453125, -2.300739288330078e-05, -2.1457672119140625e-06, -0.00212860107421875, -3.0517578125e-05, -0.00046539306640625, -1.33514404296875e-05, -3.814697265625e-05, -3.814697265625e-06, -0.003692626953125, -4.1961669921875e-05, -7.62939453125e-06, -1.1563301086425781e-05, -0.0002574920654296875, -0.000591278076171875, -2.6702880859375e-05, -4.00543212890625e-05, -1.9073486328125e-06, -7.82012939453125e-05, -1.537799835205078e-05, -0.0001659393310546875, -0.002320885192602873, -2.4340438842773438, -7.2479248046875e-05, -4.76837158203125e-05, -0.00020301342010498047, -2.6702880859375e-05, -0.0006084442138671875, -1.9073486328125e-06, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.055348873138427734, -7.748603820800781e-06, -0.0001392364501953125, -0.04357147216796875, -0.001056671142578125, -5.03059163747821e-05, -3.576272320060525e-06, -0.0014514487702399492, -1.9073486328125e-06, -0.8248553276062012, -0.0009557008743286133, -0.014568328857421875, -9.5367431640625e-05, -0.00012600421905517578, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Huffer", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -3.627454554548187, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Huffer"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 4, "_type": "Template65", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -0.0025272369384765625, -5.7220458984375e-06, -0.0003192424774169922, -1.1444091796875e-05, -3.814697265625e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.000148773193359375, -0.0001010894775390625, -7.05718994140625e-05, 0.0, -5.91278076171875e-05, 0.0, -2.5510777049930766e-05, 0.0, -8.988380432128906e-05, -1.9073486328125e-06, -0.0749216079711914, -3.814697265625e-06, -2.86102294921875e-05, -1.0251946150674485e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.33514404296875e-05, -0.0005216221907176077, -7.522106170654297e-05, -1.33514404296875e-05, 0.0, -6.866455078125e-05, 0.0, -7.867813110351562e-06, -7.152555099310121e-07, -0.0007441043853759766, -3.62396240234375e-05, -3.0517578125e-05, 0.0, -1.33514404296875e-05, -0.000293731689453125, -2.300739288330078e-05, -2.1457672119140625e-06, -0.00212860107421875, -3.0517578125e-05, -0.00046539306640625, -1.33514404296875e-05, -3.814697265625e-05, -3.814697265625e-06, -0.003692626953125, -4.1961669921875e-05, -7.62939453125e-06, -1.1563301086425781e-05, -0.0002574920654296875, -0.000591278076171875, -2.6702880859375e-05, -4.00543212890625e-05, -1.9073486328125e-06, -7.82012939453125e-05, -1.537799835205078e-05, -0.0001659393310546875, -0.002320885192602873, -2.4340438842773438, -7.2479248046875e-05, -4.76837158203125e-05, -0.00020301342010498047, -2.6702880859375e-05, -0.0006084442138671875, -1.9073486328125e-06, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.055348873138427734, -7.748603820800781e-06, -0.0001392364501953125, -0.04357147216796875, -0.001056671142578125, -5.03059163747821e-05, -3.576272320060525e-06, -0.0014514487702399492, -1.9073486328125e-06, -0.9646763801574707, -9.655952453613281e-06, -0.03495502471923828, -9.72747802734375e-05, -9.930133819580078e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Huffer", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "4", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.531417524328155, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, windfury=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Huffer"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 4, "_type": "Template65", "hole1": 2, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -0.0025272369384765625, -5.7220458984375e-06, -0.0003192424774169922, -1.1444091796875e-05, -3.814697265625e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.000148773193359375, -0.0001010894775390625, -7.05718994140625e-05, 0.0, -5.91278076171875e-05, 0.0, -2.5510777049930766e-05, 0.0, -8.988380432128906e-05, -1.9073486328125e-06, -0.0749216079711914, -3.814697265625e-06, -2.86102294921875e-05, -1.0251946150674485e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.33514404296875e-05, -0.0005216221907176077, -7.522106170654297e-05, -1.33514404296875e-05, 0.0, -6.866455078125e-05, 0.0, -7.867813110351562e-06, -7.152555099310121e-07, -0.0007441043853759766, -3.62396240234375e-05, -3.0517578125e-05, 0.0, -1.33514404296875e-05, -0.000293731689453125, -2.300739288330078e-05, -2.1457672119140625e-06, -0.00212860107421875, -3.0517578125e-05, -0.00046539306640625, -1.33514404296875e-05, -3.814697265625e-05, -3.814697265625e-06, -0.003692626953125, -4.1961669921875e-05, -7.62939453125e-06, -1.1563301086425781e-05, -0.0002574920654296875, -0.000591278076171875, -2.6702880859375e-05, -4.00543212890625e-05, -1.9073486328125e-06, -7.82012939453125e-05, -1.537799835205078e-05, -0.0001659393310546875, -0.002320885192602873, -2.4340438842773438, -7.2479248046875e-05, -4.76837158203125e-05, -0.00020301342010498047, -2.6702880859375e-05, -0.0006084442138671875, -1.9073486328125e-06, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.055348873138427734, -7.748603820800781e-06, -0.0001392364501953125, -0.04357147216796875, -0.001056671142578125, -5.03059163747821e-05, -3.576272320060525e-06, -0.0014514487702399492, -1.9073486328125e-06, -1.8788695335388184, -7.987022399902344e-05, -0.024608612060546875, -0.0001087188720703125, -0.00013387203216552734, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Huffer", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "4", "<EOS>", "2", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.975366190721381, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, _):\n        return Minion(4, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Huffer"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "_"}], "_type": "arguments"}, "body": [{"hole0": 4, "_type": "Template72", "hole1": 2}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -0.0025272369384765625, -5.7220458984375e-06, -0.0003192424774169922, -1.1444091796875e-05, -3.814697265625e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.000148773193359375, -0.0001010894775390625, -7.05718994140625e-05, 0.0, -5.91278076171875e-05, 0.0, -2.5510777049930766e-05, 0.0, -8.988380432128906e-05, -1.9073486328125e-06, -0.0749216079711914, -3.814697265625e-06, -2.86102294921875e-05, -1.0251946150674485e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.33514404296875e-05, -0.0005216221907176077, -7.522106170654297e-05, -1.33514404296875e-05, 0.0, -6.866455078125e-05, 0.0, -7.867813110351562e-06, -7.152555099310121e-07, -0.0007441043853759766, -3.62396240234375e-05, -3.0517578125e-05, 0.0, -1.33514404296875e-05, -0.000293731689453125, -2.300739288330078e-05, -2.1457672119140625e-06, -0.00212860107421875, -3.0517578125e-05, -0.00046539306640625, -1.33514404296875e-05, -3.814697265625e-05, -3.814697265625e-06, -0.003692626953125, -4.1961669921875e-05, -7.62939453125e-06, -1.1563301086425781e-05, -0.0002574920654296875, -0.000591278076171875, -2.6702880859375e-05, -4.00543212890625e-05, -1.9073486328125e-06, -7.82012939453125e-05, -1.537799835205078e-05, -0.0001659393310546875, -0.002320885192602873, -2.4340438842773438, -7.2479248046875e-05, -4.76837158203125e-05, -0.00020301342010498047, -2.6702880859375e-05, -0.0006084442138671875, -1.9073486328125e-06, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, -2.9984068870544434, -9.894352842820808e-06, -0.0021257400512695312, -0.4375581741333008, -0.0002651214599609375, -5.161555600352585e-05, -5.36431216460187e-05, -0.010905384086072445, -5.9604644775390625e-06], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Huffer", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "_", "<EOS>", 295, 122, 254, "4", "<EOS>", "2", "<EOS>"]}, {"score": -8.03785487713617, "inferred_code": "class Huffer(MinionCard):\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": 3, "_type": "Template27", "hole1": 2}, {"hole0": 4, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -7.280571937561035, -0.08741569519042969, -0.2645528316497803, -3.099440846199286e-06, -0.20496094226837158, 0.0, -0.18490982055664062, -0.0028247833251953125, -0.0013124881079420447, -1.728534698486328e-05, -0.0006900796433910728, -7.62939453125e-06, -0.008777735754847527, -0.0002269744873046875, -0.000881195068359375, -7.62939453125e-06, -5.9485435485839844e-05, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 110, 202, "3", "<EOS>", "2", "<EOS>", 109, 200, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.045087460370269, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Huffer", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -7.962268829345703, -0.01984119415283203, -5.793414675281383e-05, -0.0005595680559054017, -0.0004702892038039863, -1.9073486328125e-06, -0.0038824081420898438, -4.1961669921875e-05, -0.0001010894775390625, -0.000270843505859375, -0.0002498626708984375, -7.62939453125e-06, -6.4849853515625e-05, -1.9073486328125e-06, -6.67572021484375e-05, -7.62939453125e-06, -0.000362396240234375, -0.001816868782043457, -0.04754447937011719, -2.86102294921875e-05, -0.0003949403762817383, 0.0, -0.00014591192302759737, 0.0, -0.005802749656140804, -7.62939453125e-06, -0.000392913818359375, -1.52587890625e-05, -5.53131103515625e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Huffer", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.379562900790916, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Huffer", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 4, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -7.897220134735107, -0.0004062652587890625, -3.814624506048858e-05, -0.00019085407257080078, -0.041980743408203125, -9.5367431640625e-06, -3.314018249511719e-05, -1.52587890625e-05, -0.0001087188720703125, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.0035047531127929688, -0.0014820098876953125, -0.3913564682006836, -0.013174057006835938, -0.0009273253381252289, -1.9073486328125e-06, -0.0007160232635214925, 0.0, -0.02655494213104248, -2.47955322265625e-05, -0.000904083251953125, -7.62939453125e-06, -0.0001697540283203125, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Huffer", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.152552700001252, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Huffer", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 4, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -7.897220134735107, -0.0004062652587890625, -3.814624506048858e-05, -0.00019085407257080078, -0.041980743408203125, -9.5367431640625e-06, -3.314018249511719e-05, -1.52587890625e-05, -0.0001087188720703125, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -0.0035047531127929688, -0.0014820098876953125, -1.1611814498901367, -1.9073486328125e-05, -0.04493628069758415, -5.7220458984375e-06, -0.0006937953294254839, 0.0], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Huffer", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "4", "<EOS>", "2", "<EOS>"]}, {"score": -9.275078000977373, "inferred_code": "class Huffer(MinionCard):\n\n    def create_minion(self, player):\n        return Minion(0, 2)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": 0, "_type": "Template27", "hole1": 2}, {"hole0": 4, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -7.280571937561035, -0.08741569519042969, -1.592280387878418, -0.0030364301055669785, -0.1244887113571167, -1.9073486328125e-06, -0.17273616790771484, -0.0020618438720703125, -0.0021041613072156906, -4.017353057861328e-05, -0.00037898350274190307, -5.7220458984375e-06, -0.007950780913233757, -0.0002155303955078125, -0.0010890960693359375, -7.62939453125e-06, -5.5670738220214844e-05, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 110, 202, "Huffer", "<EOS>", "2", "<EOS>", 109, 200, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.642533537650934, "inferred_code": "class Huffer(MinionCard):\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": 3, "_type": "Template27", "hole1": 3}, {"hole0": 4, "_type": "Template23", "hole1": 2, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -7.280571937561035, -0.08741569519042969, -0.2645528316497803, -3.099440846199286e-06, -1.8814160823822021, 0.0, -0.113433837890625, -0.001300811767578125, -0.0008491248590871692, -9.5367431640625e-06, -0.001329782186076045, -5.7220458984375e-06, -0.010219930671155453, -0.0001850128173828125, -0.0005474090576171875, -5.7220458984375e-06, -5.173683166503906e-05, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 110, 202, "3", "<EOS>", "3", "<EOS>", 109, 200, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.860656458657097, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 1, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"hole0": "Huffer", "_type": "Template25", "hole1": "DRUID", "hole2": "COMMON"}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 4, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -0.0025272369384765625, -5.7220458984375e-06, -0.0003192424774169922, -1.1444091796875e-05, -3.814697265625e-05, -1.33514404296875e-05, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.1444091796875e-05, -9.128023147583008, -0.02219676971435547, -0.0011287707602605224, -2.1338340957299806e-05, -0.25281190872192383, -1.1920928244535389e-07, -0.21299564838409424, -1.1444091796875e-05, -0.23287296295166016, -9.918212890625e-05, -0.006399375852197409, 0.0, -0.0004519223584793508, 0.0], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 23, 201, "Huffer", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 110, 202, "4", "<EOS>", "2", "<EOS>"]}, {"score": -9.930249845125218, "inferred_code": "class Huffer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Huffer', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Huffer", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 4, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Huffer"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -6.103515625e-05, -1.52587890625e-05, -5.6503606174374e-05, -3.1232637411449105e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.53131103515625e-05, -8.7738037109375e-05, -0.000274658203125, -9.07022762298584, -0.10413646697998047, -0.002046616282314062, -0.5195039510726929, -0.033866167068481445, -0.031302452087402344, -0.0013045072555541992, -0.0001621246337890625, -0.16352367401123047, -0.000102996826171875, -0.0031418860889971256, -1.9073486328125e-06, -0.00030565206543542445, 0.0], "choice_history": [80, 159, 295, 88, 138, "Huffer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Huffer", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "4", "<EOS>", "2", "<EOS>"]}, {"score": -21.945079803466797, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -21.945064544677734], "choice_history": [80, 159, 294]}]}
{"index": 54, "beams": [{"score": -0.3957351538047078, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -0.2303152084350586, -5.7220458984375e-06, -1.9073486328125e-06, -0.12126731872558594, -0.0005979537963867188, -0.003204345703125, -7.05718994140625e-05, -0.000774383544921875, 0.0, -0.012946128845214844, -0.00038242340087890625, -0.000919342041015625, -7.62939453125e-06, 0.0, -0.007068634033203125, 0.0, -0.00020599365234375, 0.0, -0.000110626220703125, -3.814697265625e-06, -0.0001087188720703125, 0.0, -0.004943966865539551, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 38, 131, 21, 165, "1", "<EOS>", 82, 14, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>"]}, {"score": -2.327785788329493, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -1.9778728485107422, -3.933906555175781e-06, -1.9073486328125e-06, -0.3370656967163086, -3.814697265625e-06, -4.0937564335763454e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -2.7204495730038616, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -0.2303152084350586, -5.7220458984375e-06, -1.9073486328125e-06, -2.477306365966797, -1.1444091796875e-05, -1.2275530025362968e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -3.367529401431966, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1 - self.target.calculate_attack())\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -1.9778728485107422, -3.933906555175781e-06, -1.9073486328125e-06, -1.3440933227539062, -0.0010776519775390625, -0.0020418167114257812, -3.62396240234375e-05, -0.000453948974609375, 0.0, -0.016366004943847656, -0.0005664825439453125, -0.0010242462158203125, -5.7220458984375e-06, 0.0, -0.0057392120361328125, 0.0, -0.0002079010009765625, 0.0, -0.000141143798828125, -3.814697265625e-06, -0.0001010894775390625, 0.0, -0.004991650581359863, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 38, 131, 21, 165, "1", "<EOS>", 82, 14, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>"]}, {"score": -4.318285832057882, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce(1 - self.target.calculate_attack())\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce", "hole2": [{"op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -3.8567538261413574, 0.0, -3.814697265625e-06, -0.40604591369628906, -0.000392913818359375, -0.010707855224609375, -6.4849853515625e-05, -0.000705718994140625, 0.0, -0.018858909606933594, -0.0005655288696289062, -0.00128936767578125, -5.7220458984375e-06, 0.0, -0.004734039306640625, 0.0, -0.00026702880859375, 0.0, -0.0001239776611328125, -5.7220458984375e-06, -9.918212890625e-05, 0.0, -0.004860997200012207, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>", 282, 38, 131, 21, 165, "1", "<EOS>", 82, 14, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>"]}, {"score": -4.449608931194227, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -0.2303152084350586, -5.7220458984375e-06, -1.9073486328125e-06, -3.8042945861816406, -1.9073486328125e-06, -0.0012760162353515625, -0.000385284423828125, -3.814697265625e-05, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.33514404296875e-05, -1.1920928244535389e-07, -0.4003407955169678, 0.0], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -5.032382735858846, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -4.7299885749816895, -5.7220458984375e-06, -7.62939453125e-06, -0.2827463150024414, -1.9073486328125e-06, -0.006824493408203125, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -5.314834127078939, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.<UNK>(1 - self.target.calculate_attack())\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "<UNK>", "hole2": [{"op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -5.046700477600098, -2.0265579223632812e-06, -4.76837158203125e-05, -0.21750545501708984, -0.000308990478515625, -0.004481315612792969, -2.86102294921875e-05, -0.000835418701171875, 0.0, -0.019339561462402344, -0.00039577484130859375, -0.0014057159423828125, -3.814697265625e-06, 0.0, -0.0056781768798828125, 0.0, -0.0002231597900390625, 0.0, -0.0001506805419921875, -5.7220458984375e-06, -7.62939453125e-05, 0.0, -0.004844784736633301, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 282, 38, 131, 21, 165, "1", "<EOS>", 82, 14, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>"]}, {"score": -5.4027969929084065, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target())\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Call", "func": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -0.2303152084350586, -5.7220458984375e-06, -1.9073486328125e-06, -0.12126731872558594, -0.0005979537963867188, -0.003204345703125, -7.05718994140625e-05, -0.000774383544921875, 0.0, -0.012946128845214844, -0.00038242340087890625, -0.000919342041015625, -7.62939453125e-06, 0.0, -4.996345520019531, 0.0, -0.017595291137695312, 0.0, -0.005564689636230469, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 38, 131, 21, 165, "1", "<EOS>", 82, 14, 134, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>"]}, {"score": -5.9915969463691, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -3.8567538261413574, 0.0, -3.814697265625e-06, -1.678502082824707, 0.0, -0.000499725341796875, -0.000415802001953125, -0.0001163482666015625, 0.0, -0.00010311603546142578, -5.7220458984375e-06, -7.62939453125e-06, -2.0265579223632812e-06, -0.44239020347595215, 0.0], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -6.304112205158162, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -0.2303152084350586, -5.7220458984375e-06, -1.9073486328125e-06, -6.038646221160889, -1.9073486328125e-06, -0.022336959838867188, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -6.311043390880506, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self.target.immune)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Attribute", "attr": "immune", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -0.2303152084350586, -5.7220458984375e-06, -1.9073486328125e-06, -3.8042945861816406, -1.9073486328125e-06, -0.0012760162353515625, -0.000385284423828125, -3.814697265625e-05, 0.0, -0.0001354217529296875, -3.814697265625e-06, -1.33514404296875e-05, -1.1920928244535389e-07, -2.2616875171661377, -8.7738037109375e-05], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "immune", "<EOS>"]}, {"score": -6.366184720645833, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -1.9778728485107422, -3.933906555175781e-06, -1.9073486328125e-06, -3.94461727142334, 0.0, -0.004055023193359375, -0.000957489013671875, -2.47955322265625e-05, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.425761342048645, 0.0], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -6.464485763186531, "inferred_code": "class Humility(SpellCard):\n\n    def __init__(self):\n        super().__init__('Humility', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce(1)\n", "model_output": {"body": [{"body": [{"hole0": "Humility", "_type": "Template3", "hole1": 1, "hole2": "PALADIN"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Humility"}], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -0.0001163482666015625, -1.52587890625e-05, -0.000118255615234375, -0.00034397884155623615, -9.024119935929775e-05, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -0.00022912025451660156, -1.52587890625e-05, -1.33514404296875e-05, -0.0003604888916015625, -0.0029392242431640625, -0.0007534027099609375, -4.7205852752085775e-05, -4.38690185546875e-05, -0.00024325656704604626, 0.0, -0.0015164613723754883, 0.0, -0.0040531158447265625, -0.0007991790771484375, -1.9073486328125e-06, 0.0, -0.000152587890625, 0.0, -2.86102294921875e-05, -5.53131103515625e-05, -0.000553131103515625, 0.0, -3.8567538261413574, 0.0, -3.814697265625e-06, -2.5949010848999023, -5.7220458984375e-06, -2.4665816454216838e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Humility", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "Humility", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -21.228242874145508, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-8.96453857421875e-05, -0.0001926422119140625, -21.22796058654785], "choice_history": [80, 159, 294]}]}
{"index": 55, "beams": [{"score": -0.9076475173569634, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "set_health_to", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -0.8887534141540527, -5.841255187988281e-06, 0.0, -0.002628326416015625, -1.9073486328125e-06, -0.001075603999197483, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -1.038879729421751, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -0.9724311828613281, -7.62939453125e-06, -1.9073486328125e-06, -0.05012321472167969, -7.62939453125e-06, -0.0011257415171712637, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -3.0822195297441795, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -2.9021668434143066, -3.814697265625e-06, -9.5367431640625e-06, -0.16307735443115234, 0.0, -0.00176239013671875, -1.71661376953125e-05], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>"]}, {"score": -4.079604077931435, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "change_attack", "hole2": [{"op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -0.9724311828613281, -7.62939453125e-06, -1.9073486328125e-06, -3.0606517791748047, -0.00058746337890625, -0.001026153564453125, -9.5367431640625e-06, -0.00054168701171875, 0.0, -0.017263412475585938, -0.0007076263427734375, -0.0011119842529296875, -2.09808349609375e-05, 0.0, -0.005397796630859375, 0.0, -4.57763671875e-05, 0.0, -0.000118255615234375, -9.5367431640625e-06, -0.000118255615234375, 0.0, -0.004370689392089844, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 282, 38, 131, 21, 165, "1", "<EOS>", 82, 14, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>"]}, {"score": -4.094209556111309, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce(1)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "bounce", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -4.050202369689941, 0.0, -5.7220458984375e-06, -0.028413772583007812, -1.9073486328125e-06, -0.0004033602599520236, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -4.625032637814002, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "increase_health", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -4.51224422454834, -2.0265579223632812e-06, -3.814697265625e-06, -0.09694194793701172, -1.9073486328125e-06, -0.0006562925409525633, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -4.731792415223026, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(1)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_effect", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -4.5501708984375, 0.0, -9.5367431640625e-06, -0.16524982452392578, -3.814697265625e-06, -0.0011759166372939944, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -4.73802092216647, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.index(1)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "index", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -4.405190467834473, -3.814697265625e-06, -3.814697265625e-06, -0.3173389434814453, -3.814697265625e-06, -0.0002976425748784095, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -5.242249402064772, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.spell_targetable(1)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "spell_targetable", "hole2": [{"_type": "Num", "n": 1}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -5.181094169616699, 0.0, -3.814697265625e-06, -0.044952392578125, -1.9073486328125e-06, -0.0010146936401724815, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "spell_targetable", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -5.512250382299726, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "add_buff", "hole2": [{"hole0": "Buff", "_type": "Template69", "hole1": "Frozen"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -4.992168426513672, -3.099440846199286e-06, -9.5367431640625e-06, -0.07669925689697266, -1.1444091796875e-05, -0.0012913942337036133, -0.00024020671844482422, -0.4266330301761627, -1.1563301086425781e-05], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 282, 61, 250, "Buff", "<EOS>", "Frozen", "<EOS>"]}, {"score": -5.585524011250527, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.copy(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "copy", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -4.937106132507324, 0.0, -1.9073486328125e-06, -0.24506378173828125, -1.9073486328125e-06, -0.0002155303955078125, -8.96453857421875e-05, -4.57763671875e-05, 0.0, -0.0067958831787109375, -1.52587890625e-05, -3.62396240234375e-05, -3.814697265625e-06, -0.3809657096862793, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -5.667210507985146, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self.target.health)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "die", "hole2": [{"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -2.9021668434143066, -3.814697265625e-06, -9.5367431640625e-06, -2.4417848587036133, 0.0, -0.017574310302734375, -0.0001316070556640625, -1.52587890625e-05, 0.0, -0.00078582763671875, -9.5367431640625e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.28952550888061523, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -5.73427658140281, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.find_minion_spell_target(1 - self.target.calculate_attack()\n            )\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Mark", "_type": "Template3", "hole1": 0, "hole2": "HUNTER"}, {"hole0": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}, "_type": "Template5", "hole1": "find_minion_spell_target", "hole2": [{"op": {"_type": "Sub"}, "_type": "BinOp", "left": {"_type": "Num", "n": 1}, "right": {"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -0.0066967010498046875, -0.000415802001953125, -0.0002838355430867523, -3.0517578125e-05, -5.006785613659304e-06, -1.9073486328125e-05, -0.000627687550149858, -1.9073486328125e-06, -5.602836608886719e-05, -3.814697265625e-06, -0.0019664764404296875, -0.00122833251953125, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -0.0002269744873046875, 0.0, -4.999094009399414, -3.24249267578125e-05, -7.62939453125e-06, -0.6813211441040039, -0.0017824172973632812, -0.002758026123046875, -1.71661376953125e-05, -0.0008581876754760742, 0.0, -0.0197296142578125, -0.0009632110595703125, -0.0012378692626953125, -2.6702880859375e-05, 0.0, -0.0063800811767578125, 0.0, -3.4332275390625e-05, 0.0, -0.000133514404296875, -9.5367431640625e-06, -8.0108642578125e-05, 0.0, -0.004628181457519531, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 111, 204, "<UNK>", " ", "Mark", "<EOS>", "0", "<EOS>", "HUNTER", "<EOS>", 116, 225, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "find_minion_spell_target", "<EOS>", 282, 38, 131, 21, 165, "1", "<EOS>", 82, 14, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>"]}, {"score": -11.34994143788498, "inferred_code": "class <UNK>Mark(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Mark', 0, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        self.target.die(self)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_heal_power(self.target.\n                calculate_attack()), self.target)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "<UNK> Mark"}, {"_type": "Num", "n": 0}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_friendly_minion_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "die", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Call", "func": {"_type": "Attribute", "attr": "calculate_attack", "value": {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Attribute", "attr": "target", "value": {"_type": "Name", "id": "self"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Mark"}], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.002220815047621727, -0.0003626880934461951, -2.3841830625315197e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -0.00039505958557128906, -1.52587890625e-05, -1.1801719665527344e-05, -0.0003223419189453125, -5.702430725097656, -1.1444091796875e-05, -0.000400543212890625, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.0265579223632812e-06, 0.0, -7.05718994140625e-05, -4.38690185546875e-05, -4.00543212890625e-05, -0.008902549743652344, -0.00022125244140625, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -2.6702880859375e-05, -2.0265579223632812e-06, -5.7220458984375e-06, -0.0001659393310546875, -1.9073486328125e-06, -0.001682281494140625, -3.814697265625e-05, -1.9073486328125e-06, -0.005730766337364912, -1.71661376953125e-05, -0.00044312194222584367, -0.013988494873046875, -3.24249267578125e-05, -1.9073486328125e-05, -0.0007590766763314605, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0002117156982421875, 0.0, -7.069110870361328e-05, -3.576278118089249e-07, -0.003160834312438965, -1.9073486328125e-06, -5.53131103515625e-05, 0.0, -0.000576019287109375, -1.1444091796875e-05, -0.0002040863037109375, 0.0, -0.4078693389892578, -1.9073486328125e-06, -0.00051116943359375, -0.0018253326416015625, -7.62939453125e-06, -0.0010204315185546875, 0.0, -5.7220458984375e-06, -6.866455078125e-05, -7.62939453125e-05, -0.000118255615234375, -4.57763671875e-05, -3.814697265625e-06, -0.0011121034622192383, -1.1444091796875e-05, -8.7738037109375e-05, 0.0, -0.1859515905380249, -1.9073486328125e-06, -0.09870624542236328, -1.9073486328125e-06, -8.58306884765625e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.4066696166992188e-05, -1.4305104514278355e-06, -0.2740001678466797, -3.24249267578125e-05, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -4.57763671875e-05, 0.0, -6.29425048828125e-05, 0.0, -7.283687591552734e-05, -3.814697265625e-06, -3.62396240234375e-05, -3.814697265625e-06, -1.52587890625e-05, -1.1444091796875e-05, 0.0, -2.47955322265625e-05, 0.0, -1.1444091796875e-05, -2.09808349609375e-05, -3.0517578125e-05, -5.841255187988281e-06, -0.0029325485229492188, -1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, 0.0, -0.4049149751663208, 0.0, -0.00229644775390625, -0.0038433074951171875, -4.38690185546875e-05, 0.0, -0.034114837646484375, 0.0, -0.0009222030639648438, -0.0008392333984375, -0.0044689178466796875, -7.43865966796875e-05, -1.33514404296875e-05, -0.004367828369140625, -1.9073486328125e-06, -0.0001010894775390625, 0.0, -0.04695892333984375, -1.9073486328125e-06, -0.2054738998413086, -1.0728830375228426e-06, -0.002603888511657715, 0.0, -0.020667588338255882, -3.814697265625e-06, -0.0002899169921875, 0.0, -0.00031948089599609375, -0.0004444122314453125, -1.52587890625e-05, 0.0, -0.3531465530395508, 0.0, -0.0001468658447265625, 0.0, -0.011196136474609375, -0.0004100799560546875, -0.000396728515625, 0.0, -0.549224853515625, -1.9073486328125e-06, -0.0007839202880859375, -0.007487297058105469, 0.0, -0.28482580184936523, -5.7220458984375e-06, -0.5639562606811523, -0.00022125244140625, -7.62939453125e-06, 0.0, -0.008212089538574219, 0.0, -0.007259368896484375, 0.0, -0.030836105346679688, -1.9073486328125e-06, -0.0004367828369140625, 0.0, -0.008268356323242188, 0.0, -0.003337860107421875, 0.0, -0.006552377715706825, -2.86102294921875e-05, -0.0010547637939453125, -0.016895294189453125, 0.0, -1.9073486328125e-05, -4.57763671875e-05, -7.62939453125e-06, 0.0, -0.04637718200683594, 0.0, -0.020053863525390625, -1.9073486328125e-06, -0.8160037994384766, -5.7220458984375e-05, -1.1444091796875e-05, -0.008769989013671875, -0.026615142822265625, -4.57763671875e-05, -9.5367431640625e-06, -0.0001163482666015625, 0.0, -0.00011444091796875, 0.0, -0.4538532495498657, 0.0, -0.0001068115234375, -0.4712228775024414, -2.288818359375e-05, -0.000110626220703125, -1.9073486328125e-06, -0.007083892822265625, -1.9073486328125e-06, -0.05065727233886719, 0.0, -0.022492408752441406, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.05315685272216797, -1.9073486328125e-06, -0.062774658203125, -0.0012950897216796875, -0.001697540283203125, -5.7220458984375e-06, -0.00072479248046875, -1.71661376953125e-05, -0.0010242462158203125, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Mark", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "<UNK>", " ", "Mark", "<EOS>", 47, 165, "0", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 282, 45, 160, "self", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 40, 134, 11, 129, 11, 129, 19, 160, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 37, 129, 19, 160, "self", "<EOS>", "target", "<EOS>"]}, {"score": -22.938152313232422, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-5.7220458984375e-06, -0.0001087188720703125, -22.938037872314453], "choice_history": [80, 159, 294]}]}
{"index": 56, "beams": [{"score": -0.12197849396270044, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -0.005198478698730469, -0.0003164820373058319, -1.52587890625e-05, -0.002964019775390625, -3.62396240234375e-05, 0.0, -0.0002956390380859375, -0.0007457733154296875, -0.0002956390380859375, -0.003916382789611816, -3.814697265625e-06, -3.4332275390625e-05, -9.5367431640625e-06, -0.0009326934814453125, -0.0005609989166259766, -1.71661376953125e-05, -0.0021276473999023438, -5.53131103515625e-05, -0.0012903213500976562, 0.0, -0.001373291015625, -0.000217437744140625, -0.0007381439208984375, -0.00015294551849365234, -1.9073486328125e-06, -0.00371551513671875, -2.6702880859375e-05, -5.030501779401675e-05, -2.2649765014648438e-06, -3.9220001781359315e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -2.6701631557206156, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole3": "battlecry"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -2.641819953918457, -0.000202178955078125, -3.099436753473128e-06, -1.1324880688334815e-05, -4.649161837733118e-06, -3.814697265625e-06, -2.2530550268129446e-05, -2.2649765014648438e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.0022842884063720703, 0.0, -0.0020275115966796875, -0.0010128021240234375, -0.0035141732078045607, -1.71661376953125e-05, -0.0016498565673828125, -0.0002537965774536133, -1.9073486328125e-06, -0.0002002716064453125, -0.000659942626953125, -2.09808349609375e-05, -0.002878427505493164, -1.9073486328125e-06, -4.00543212890625e-05, -1.52587890625e-05, -0.0008736848831176758, -0.0007803440093994141, -4.00543212890625e-05, -0.0021514892578125, -6.866455078125e-05, -0.0011699199676513672, 0.0, -0.0016498565673828125, -0.0001430511474609375, -0.0006581544876098633, -0.00011098384857177734, -1.9073486328125e-06, -0.005336761474609375, -2.86102294921875e-05, -4.4702450395561755e-05, -2.1457672119140625e-06, -3.75510826415848e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -6.205287909508087, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -0.005198478698730469, -0.0003164820373058319, -1.52587890625e-05, -0.002964019775390625, -3.62396240234375e-05, 0.0, -0.0002956390380859375, -0.0007457733154296875, -0.0002956390380859375, -0.003916382789611816, -3.814697265625e-06, -3.4332275390625e-05, -9.5367431640625e-06, -0.0009326934814453125, -0.0005609989166259766, -1.71661376953125e-05, -0.0021276473999023438, -5.53131103515625e-05, -0.0012903213500976562, 0.0, -0.001373291015625, -0.000217437744140625, -0.0007381439208984375, -0.00015294551849365234, -1.9073486328125e-06, -5.784096717834473, -0.17044830322265625, -2.6226039153698366e-06, -4.768370445162873e-07, -0.00041449308628216386, 0.0, -0.1304553747177124, 0.0, -0.0003185272216796875, -7.2479248046875e-05, -0.0013363361358642578, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.230199179177902, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "PIRATE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -6.117398262023926, 0.0, -0.0009481906890869141, 0.0, -0.0020122528076171875, -0.0047855377197265625, -0.00031575560569763184, -1.9073486328125e-05, -0.0027866363525390625, -3.814697265625e-05, 0.0, -0.0002899169921875, -0.0007219314575195312, -0.0002803802490234375, -0.003788471221923828, -3.814697265625e-06, -3.4332275390625e-05, -9.5367431640625e-06, -0.0009136199951171875, -0.0005571842193603516, -1.71661376953125e-05, -0.0019474029541015625, -5.53131103515625e-05, -0.0012922286987304688, 0.0, -0.001399993896484375, -0.0001850128173828125, -0.0006866455078125, -0.00015294551849365234, -1.9073486328125e-06, -0.0037975311279296875, -2.47955322265625e-05, -5.1616254495456815e-05, -2.2649765014648438e-06, -3.910079976776615e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -6.49688169707278, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), HeroSelector(players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "HeroSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -0.005198478698730469, -0.0003164820373058319, -1.52587890625e-05, -6.229737281799316, -0.0006524324417114258, -1.3470649719238281e-05, -0.00131988525390625, -0.0017633438110351562, -0.000339508056640625, -0.13606810569763184, -5.7220458984375e-06, -9.72747802734375e-05, -5.7220458984375e-06, -0.0022546052932739258, -0.0005381107330322266, -9.5367431640625e-06, -0.0026121139526367188, -6.4849853515625e-05, -0.0024107694625854492, 0.0, -0.0042362213134765625, -0.000152587890625, -0.0006084442138671875, -6.330013275146484e-05, -1.9073486328125e-06, -0.011456489562988281, -3.24249267578125e-05, -2.4437596948700957e-05, -2.2649765014648438e-06, -3.564378130249679e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Hero", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -7.1169435251091215, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "MinionSelector"}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -6.130890846252441, -0.7519856095314026, -6.306171417236328e-05, -0.13225603103637695, -0.0015106201171875, -2.0265579223632812e-06, -0.003124237060546875, -5.91278076171875e-05, -7.509957504225895e-05, -5.841255187988281e-06, -0.00012600101763382554, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 231, "1", "<EOS>", "Minion", "Selector", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -7.213017820708487, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "_type": "Template6", "hole1": 3, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -5.32376766204834, -0.0007648468017578125, -6.794906312279636e-06, -1.8477399862604216e-05, -2.1457672119140625e-06, -1.9073486328125e-06, -2.741813204920618e-06, -1.1920928244535389e-07, -7.104873657226562e-05, 0.0, -0.0030612945556640625, -7.43865966796875e-05, -5.9604644775390625e-06, -1.4305104514278355e-06, -0.00013458730245474726, 0.0, -1.882501244544983, -1.1920928244535389e-07, -0.0015687942504882812, -2.09808349609375e-05, -0.0006362199783325195, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.3233909479737065, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, Damage=\n            MINION_TYPE)\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"_type": "Name", "id": "MINION_TYPE"}, "hole7": "Damage", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -6.26356315612793, 0.0, -0.07026290893554688, 0.0, -0.018576622009277344, -9.5367431640625e-06, -0.8802270889282227, -0.00098419189453125, -0.00010108474816661328, -5.924701690673828e-05, -3.8623420550720766e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "Damage", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -7.332270454721964, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\n            picker=RandomPicker(1))))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"args": [{"_type": "Num", "n": 1}], "_type": "Call", "func": {"_type": "Name", "id": "RandomPicker"}}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -0.005198478698730469, -0.0003164820373058319, -1.52587890625e-05, -0.002964019775390625, -3.62396240234375e-05, 0.0, -0.0002956390380859375, -0.0007457733154296875, -0.0002956390380859375, -0.003916382789611816, -3.814697265625e-06, -3.4332275390625e-05, -9.5367431640625e-06, -0.0009326934814453125, -0.0005609989166259766, -1.71661376953125e-05, -0.0021276473999023438, -5.53131103515625e-05, -0.0012903213500976562, 0.0, -7.194332122802734, -4.38690185546875e-05, -0.0002231597900390625, -9.5367431640625e-06, -0.005536079406738281, -0.009017109870910645, -2.6702880859375e-05, -0.0011882781982421875, -2.288818359375e-05, -5.14984130859375e-05, -0.0031995552126318216, 0.0, -0.00287628173828125, -2.86102294921875e-05, -2.6225998226436786e-06, -8.344646857949556e-07, -5.0306349294260144e-05, -2.1457672119140625e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 14, 136, 19, 160, "Random", "Picker", "<EOS>", 282, 47, 165, "1", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -7.3685565916080975, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=EnemyPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "EnemyPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -0.005198478698730469, -0.0003164820373058319, -1.52587890625e-05, -0.002964019775390625, -3.62396240234375e-05, 0.0, -0.0002956390380859375, -0.0007457733154296875, -0.0002956390380859375, -0.003916382789611816, -3.814697265625e-06, -3.4332275390625e-05, -9.5367431640625e-06, -7.246366500854492, -2.396106719970703e-05, -1.9073486328125e-06, -0.0027437210083007812, -8.0108642578125e-05, -0.001284480094909668, 0.0, -0.0016193389892578125, -0.0001964569091796875, -0.0007114410400390625, -0.00012230873107910156, -1.9073486328125e-06, -0.0046176910400390625, -2.47955322265625e-05, -4.4106433051638305e-05, -2.2649765014648438e-06, -3.898158684023656e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Enemy", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -7.559527012718348, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(minion_type=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "minion_type", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -0.005198478698730469, -0.0003164820373058319, -1.52587890625e-05, -0.002964019775390625, -3.62396240234375e-05, 0.0, -0.0002956390380859375, -0.0007457733154296875, -0.0002956390380859375, -7.296724319458008, -4.9591064453125e-05, -0.08721160888671875, -4.38690185546875e-05, -0.0586090087890625, -9.5367431640625e-06, -1.52587890625e-05, -0.0008087158203125, -6.103515625e-05, -0.002552628517150879, 0.0, -0.00205230712890625, -0.0004367828369140625, -0.000507354736328125, -6.687641143798828e-05, -1.9073486328125e-06, -0.00356292724609375, -2.09808349609375e-05, -3.814622323261574e-05, -2.2649765014648438e-06, -3.933923289878294e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "minion_type", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -7.604129286896381, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "MinionSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -0.005198478698730469, -0.0003164820373058319, -1.52587890625e-05, -7.470342636108398, -2.09808349609375e-05, -9.655952453613281e-06, -0.013941764831542969, -0.00048065185546875, -0.00014495849609375, -0.004845380783081055, -3.814697265625e-06, -4.00543212890625e-05, -7.62939453125e-06, -0.001377105712890625, -0.0006430149078369141, -1.1444091796875e-05, -0.0022630691528320312, -9.72747802734375e-05, -0.0013686418533325195, 0.0, -0.001552581787109375, -0.0002288818359375, -0.0007686614990234375, -0.00015473365783691406, -1.9073486328125e-06, -0.003330230712890625, -2.288818359375e-05, -5.304668229655363e-05, -2.2649765014648438e-06, -4.0769729821477085e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Minion", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -7.72629031778942, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(1), CharacterSelector(players=BothBothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "hole8": {"hole0": 1, "_type": "Template56", "hole1": "CharacterSelector", "hole2": [{"_type": "keyword", "arg": "players", "value": {"hole0": "BothBothPlayer", "_type": "Template77"}}, {"_type": "keyword", "arg": "picker", "value": {"hole0": "UserPicker", "_type": "Template77"}}]}, "hole7": "battlecry", "hole2": "ALL", "hole6": "<UNK>", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "_type": "Template9", "hole1": 3, "hole4": "minion_type", "hole3": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -0.0820455551147461, -0.00025177001953125, -0.00011598391574807465, -1.3470642443280667e-05, -2.443764969939366e-05, -1.9073486328125e-06, -1.1205610462639015e-05, -2.3841855067985307e-07, -5.7578086853027344e-05, -3.814697265625e-06, -0.0005685091018676758, 0.0, -0.0013810396194458008, -1.9073486328125e-06, -0.0005035400390625, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -0.003926277160644531, 0.0, -0.005156517028808594, 0.0, -0.0021200180053710938, -0.005198478698730469, -0.0003164820373058319, -1.52587890625e-05, -0.002964019775390625, -3.62396240234375e-05, 0.0, -0.0002956390380859375, -0.0007457733154296875, -0.0002956390380859375, -0.003916382789611816, -3.814697265625e-06, -3.4332275390625e-05, -9.5367431640625e-06, -0.0009326934814453125, -7.546496391296387, -0.054831504821777344, -7.2479248046875e-05, -0.0033397674560546875, -9.5367431640625e-05, -0.002680540084838867, 0.0, -0.002422332763671875, -0.00029754638671875, -0.0007077455520629883, -0.00018906593322753906, -1.9073486328125e-06, -0.0034275054931640625, -2.6702880859375e-05, -5.0543418183224276e-05, -2.2649765014648438e-06, -3.9339211070910096e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 124, 264, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "<UNK>", "<EOS>", "battlecry", "<EOS>", 27, 232, "1", "<EOS>", "Character", "Selector", "<EOS>", 291, 79, 271, "players", "<EOS>", 33, 260, "Both", "Both", "Player", "<EOS>", 79, 271, "picker", "<EOS>", 33, 260, "User", "Picker", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -10.023286595337105, "inferred_code": "class IronforgeRifleman(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironforge Rifleman', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.MURLOC), BothPlayer())), RandomPicker(1)])\n", "model_output": {"body": [{"body": [{"hole0": "Ironforge Rifleman", "_type": "Template6", "hole1": 3, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "MURLOC", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}, {"hole0": "BothPlayer", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}, {"args": [{"_type": "Num", "n": 1}], "_type": "Call", "func": {"_type": "Name", "id": "RandomPicker"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronforgeRifleman"}], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.940656698541716e-06, -3.0397963200812228e-05, -1.5973946574376896e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.152553962441743e-07, -0.0002652406692504883, -4.291525328881107e-06, -1.33514404296875e-05, -5.32376766204834, -0.0007648468017578125, -6.794906312279636e-06, -1.8477399862604216e-05, -2.1457672119140625e-06, -1.9073486328125e-06, -2.741813204920618e-06, -1.1920928244535389e-07, -7.104873657226562e-05, 0.0, -0.0030612945556640625, -7.43865966796875e-05, -5.9604644775390625e-06, -1.4305104514278355e-06, -0.00013458730245474726, 0.0, -1.0059858560562134, -4.494190216064453e-05, -0.0006542205810546875, -0.0007076263427734375, -0.9226112365722656, -0.02819061279296875, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -0.0023728609085083008, -1.9073486328125e-06, -0.0001010894775390625, -0.07932662963867188, -0.013092994689941406, -0.1382514238357544, -0.000102996826171875, -0.007235527038574219, -0.04126548767089844, -5.7220458984375e-06, 0.0, -0.02402520179748535, -5.14984130859375e-05, -3.933906555175781e-06, -0.015565872192382812, -0.010214805603027344, -0.0001468658447265625, -8.20159912109375e-05, 0.0, -0.0016976594924926758, -0.0015908479690551758, -1.9073486328125e-06, -0.0005016326904296875, -0.0001373291015625, -0.0002918243408203125, -1.52587890625e-05, 0.0, -0.0011043548583984375, -1.9073486328125e-06, -0.6897525787353516, -2.3841855067985307e-07, -0.017256736755371094, -5.7220458984375e-06, -0.0018848180770874023, -0.00032961368560791016, -0.000362396240234375, -0.6300592422485352, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -0.25872719287872314, -0.7757401466369629, -5.14984130859375e-05, -0.017847061157226562, -2.09808349609375e-05, -1.52587890625e-05, -0.007516637444496155, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironforge", "Rifleman", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Ironforge", " ", "Rifleman", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 17, 155, 283, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 283, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", 68, 260, "Both", "Player", "<EOS>", 40, 136, 19, 160, "Random", "Picker", "<EOS>", 282, 47, 165, "1", "<EOS>"]}, {"score": -21.153982162475586, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [0.0, -1.9073486328125e-06, -21.153980255126953], "choice_history": [80, 159, 294]}]}
{"index": 57, "beams": [{"score": -0.11176394659150901, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -0.013865470886230469, -3.814697265625e-05, -1.6689286894688848e-06, -1.060962586052483e-05, -7.152556463552173e-06, -9.5367431640625e-06, -2.384221261308994e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.9550323486328125e-05, -4.00543212890625e-05, -0.000213623046875, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.933906555175781e-06, -0.07211494445800781, -7.62939453125e-06, -3.7311776395654306e-05, -4.172325134277344e-06, -0.00014541775453835726, 0.0, -0.023174285888671875, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -2.827121621844043, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(3, 3, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 3, "_type": "Template65", "hole1": 3, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -0.013865470886230469, -3.814697265625e-05, -1.6689286894688848e-06, -1.060962586052483e-05, -7.152556463552173e-06, -9.5367431640625e-06, -2.384221261308994e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.9550323486328125e-05, -4.00543212890625e-05, -0.000213623046875, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.933906555175781e-06, -2.6694765090942383, -4.76837158203125e-05, -4.0411949157714844e-05, -9.5367431640625e-06, -1.1444091796875e-05, -0.0012569427490234375, -3.814697265625e-06, -1.71661376953125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.11588287353515625, 0.0, -0.0001068115234375, -0.007542610168457031, -0.0020837783813476562, -9.89418458630098e-06, -2.3841855067985307e-07, -0.0001428086106898263, 0.0, -0.012058138847351074, -9.357929229736328e-05, -0.0020284652709960938, -1.33514404296875e-05, -7.259845733642578e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.403992764531267, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -0.013865470886230469, -3.814697265625e-05, -1.6689286894688848e-06, -1.060962586052483e-05, -7.152556463552173e-06, -9.5367431640625e-06, -2.384221261308994e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.9550323486328125e-05, -4.00543212890625e-05, -0.000213623046875, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.933906555175781e-06, -0.07211494445800781, -7.62939453125e-06, -3.7311776395654306e-05, -4.172325134277344e-06, -0.00014541775453835726, 0.0, -4.315183639526367, -1.9073486328125e-06, -0.00028228759765625, -3.814697265625e-06, -1.728534698486328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.704460859871688, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "_type": "Template6", "hole1": 3, "hole2": "ALL"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -4.675506591796875, -0.00032806396484375, -3.135155202471651e-05, -2.634514203236904e-05, -2.1457672119140625e-06, -5.7220458984375e-06, -9.53671769821085e-06, 0.0, -0.0002079010009765625, 0.0, -0.007872581481933594, -5.7220458984375e-06, -2.2411080863093957e-05, -4.172325134277344e-06, -9.678870264906436e-05, 0.0, -0.01857471466064453, 0.0, -4.9591064453125e-05, -7.62939453125e-06, -2.872943878173828e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.429372660695179, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -0.013865470886230469, -3.814697265625e-05, -1.6689286894688848e-06, -1.060962586052483e-05, -7.152556463552173e-06, -9.5367431640625e-06, -2.384221261308994e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.9550323486328125e-05, -4.00543212890625e-05, -0.000213623046875, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.933906555175781e-06, -0.07211494445800781, -7.62939453125e-06, -3.7311776395654306e-05, -4.172325134277344e-06, -0.00014541775453835726, 0.0, -5.33935022354126, -2.3841855067985307e-07, -0.00148773193359375, -1.9073486328125e-06, -2.682209014892578e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.57710922359837, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, _):\n        return Minion(3, 3, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "_"}], "_type": "arguments"}, "body": [{"hole0": 3, "_type": "Template65", "hole1": 3, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -0.013865470886230469, -3.814697265625e-05, -1.6689286894688848e-06, -1.060962586052483e-05, -7.152556463552173e-06, -9.5367431640625e-06, -2.384221261308994e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.9550323486328125e-05, -4.00543212890625e-05, -0.000213623046875, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.933906555175781e-06, -2.6694765090942383, -4.76837158203125e-05, -4.0411949157714844e-05, -9.5367431640625e-06, -1.1444091796875e-05, -0.0012569427490234375, -3.814697265625e-06, -1.71661376953125e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.5361404418945312, -4.768370445162873e-07, -0.0011959075927734375, -0.3282814025878906, -0.0015668869018554688, -1.2636071915039793e-05, -5.960462772236497e-07, -0.0001462651271140203, 0.0, -0.018198490142822266, -3.254413604736328e-05, -0.004385948181152344, -7.62939453125e-06, -5.352497100830078e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "_", "<EOS>", 295, 120, 247, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.444718949376238, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -0.013865470886230469, -3.814697265625e-05, -1.6689286894688848e-06, -1.060962586052483e-05, -7.152556463552173e-06, -9.5367431640625e-06, -2.384221261308994e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.9550323486328125e-05, -4.00543212890625e-05, -0.000213623046875, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.933906555175781e-06, -0.07211494445800781, -7.62939453125e-06, -3.7311776395654306e-05, -4.172325134277344e-06, -0.00014541775453835726, 0.0, -6.355658054351807, -1.9073486328125e-05, -0.000492095947265625, -1.9073486328125e-06, -4.398822784423828e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.705370759005291, "inferred_code": "class <UNK>Grizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Grizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -6.594976902008057, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -0.013865470886230469, -3.814697265625e-05, -1.6689286894688848e-06, -1.060962586052483e-05, -7.152556463552173e-06, -9.5367431640625e-06, -2.384221261308994e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.9550323486328125e-05, -4.00543212890625e-05, -0.000213623046875, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.933906555175781e-06, -0.07211494445800781, -7.62939453125e-06, -3.7311776395654306e-05, -4.172325134277344e-06, -0.00014541775453835726, 0.0, -0.023174285888671875, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.103978158847497, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(3, 3, taunt=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ironfur Grizzly"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 3, "_type": "Template65", "hole1": 3, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -5.890955924987793, -7.82012939453125e-05, -7.319450378417969e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-06, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -6.866455078125e-05, -0.4737539291381836, -8.96453857421875e-05, -2.09808349609375e-05, -0.07751083374023438, -0.0002346038818359375, 0.0, -7.62939453125e-05, 0.0, -6.318092346191406e-06, 0.0, -1.33514404296875e-05, 0.0, -0.011567115783691406, -3.814697265625e-06, -9.5367431640625e-06, -7.950943836476654e-05, -0.00011205671762581915, -8.583047019783407e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -4.7442885261261836e-05, -3.933906555175781e-06, -0.00046539306640625, 0.0, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -2.503394853192731e-06, -0.0002422332763671875, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -1.52587890625e-05, -3.576278118089249e-07, -0.0002079010009765625, -3.814697265625e-06, -0.000354766845703125, -5.7220458984375e-06, -4.9591064453125e-05, 0.0, -0.022573471069335938, -0.00012969970703125, -3.814697265625e-06, -1.9788742065429688e-05, -3.814697265625e-06, -0.000591278076171875, -3.62396240234375e-05, -9.5367431640625e-06, 0.0, -7.43865966796875e-05, -1.728534698486328e-05, -0.00019073486328125, -5.841255187988281e-06, -0.5408191680908203, -2.47955322265625e-05, -4.0411949157714844e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.00099945068359375, -1.9073486328125e-06, -1.71661376953125e-05, -4.57763671875e-05, -3.814697265625e-06, -0.0592498779296875, -1.9073486328125e-06, -0.0001983642578125, -0.009316444396972656, -0.00347900390625, -1.53777000377886e-05, -4.768370445162873e-07, -0.00011372266453690827, 0.0, -0.0059632062911987305, -6.496906280517578e-05, -0.0019168853759765625, -1.71661376953125e-05, -0.00013172626495361328, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Ironfur", " ", "Grizzly", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.298815565019595, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, charge=True, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "hole2": "ALL", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 3}, {"_type": "Num", "n": 3}], "keywords": [{"_type": "keyword", "arg": "charge", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "_type": "Call", "func": {"_type": "Name", "id": "Minion"}}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -0.013865470886230469, -3.814697265625e-05, -1.6689286894688848e-06, -1.060962586052483e-05, -7.152556463552173e-06, -9.5367431640625e-06, -2.384221261308994e-06, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -1.9550323486328125e-05, -4.00543212890625e-05, -0.000213623046875, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -8.58306884765625e-05, -3.933906555175781e-06, -2.6694765090942383, -4.76837158203125e-05, -4.0411949157714844e-05, -9.5367431640625e-06, -1.1444091796875e-05, -0.0012569427490234375, -3.814697265625e-06, -1.71661376953125e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.73116397857666, 0.0, -0.0027294158935546875, -0.0005092620849609375, -0.0003986358642578125, -0.0003070831298828125, -0.1425161361694336, -2.47955322265625e-05, 0.0, -6.4849853515625e-05, -1.9073486328125e-05, -0.0018520355224609375, -5.7220458984375e-06, -3.814697265625e-06, -0.0006814661901444197, 0.0, 0.0, -5.340576171875e-05, -4.8160127334995195e-05, -3.933906555175781e-06, -0.01750659942626953, -0.0001049041748046875, -0.0010623931884765625, -0.09155082702636719, -3.814697265625e-06, -0.00030517578125, -2.09808349609375e-05, -1.1444091796875e-05, 0.0, -0.21030426025390625, -0.0005855560302734375, -0.4077845811843872, -1.9073486328125e-06, -0.0020627975463867188, -7.62939453125e-06, -3.254413604736328e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "3", "<EOS>", 47, 165, "3", "<EOS>", 291, 79, 271, "charge", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.371532100361662, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Ironfur Grizzly"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -5.890955924987793, -7.82012939453125e-05, -7.319450378417969e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-06, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -6.866455078125e-05, -0.4737539291381836, -8.96453857421875e-05, -2.09808349609375e-05, -0.07751083374023438, -0.0002346038818359375, 0.0, -7.62939453125e-05, 0.0, -6.318092346191406e-06, 0.0, -1.33514404296875e-05, 0.0, -0.011567115783691406, -3.814697265625e-06, -9.5367431640625e-06, -7.950943836476654e-05, -0.00011205671762581915, -8.583047019783407e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -4.7442885261261836e-05, -3.933906555175781e-06, -0.00046539306640625, 0.0, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -2.503394853192731e-06, -0.0002422332763671875, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -1.52587890625e-05, -3.576278118089249e-07, -0.0002079010009765625, -3.814697265625e-06, -0.000354766845703125, -5.7220458984375e-06, -4.9591064453125e-05, 0.0, -0.022573471069335938, -0.00012969970703125, -3.814697265625e-06, -1.9788742065429688e-05, -3.814697265625e-06, -0.000591278076171875, -3.62396240234375e-05, -9.5367431640625e-06, 0.0, -7.43865966796875e-05, -1.728534698486328e-05, -0.00019073486328125, -5.841255187988281e-06, -0.8748855590820312, -3.814697265625e-06, -2.6821697247214615e-05, -2.1457672119140625e-06, -0.0003390443162061274, -1.9073486328125e-06, -0.014647483825683594, 0.0, -5.340576171875e-05, -3.814697265625e-06, -2.872943878173828e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Ironfur", " ", "Grizzly", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.709968652361113, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(3, 3, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "_type": "Template15", "hole1": 3, "hole2": "ALL"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -7.69307804107666, -0.0002079010009765625, -1.6093124941107817e-05, -2.3365017113974318e-05, -5.245207830739673e-06, -7.62939453125e-06, -5.960455837339396e-06, -3.933906555175781e-06, -3.0517578125e-05, -1.1444091796875e-05, -0.002002716064453125, -4.1961669921875e-05, -3.242437742301263e-05, -1.3947486877441406e-05, -0.0001912871521199122, 0.0, -0.01251983642578125, 0.0, -5.91278076171875e-05, -1.1444091796875e-05, -2.491474151611328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.17814624366838, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(3, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "_type": "Template6", "hole1": 3, "hole2": "ALL"}, {"hole0": 3, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -4.675506591796875, -0.00032806396484375, -3.135155202471651e-05, -2.634514203236904e-05, -2.1457672119140625e-06, -5.7220458984375e-06, -9.53671769821085e-06, 0.0, -0.0002079010009765625, 0.0, -0.007872581481933594, -5.7220458984375e-06, -2.2411080863093957e-05, -4.172325134277344e-06, -9.678870264906436e-05, 0.0, -4.492067337036133, -3.814697265625e-06, -0.00025177001953125, -7.62939453125e-06, -1.5497207641601562e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 109, 200, "3", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -10.127184161452533, "inferred_code": "class IronfurGrizzly(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironfur Grizzly', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "model_output": {"body": [{"body": [{"hole0": "Ironfur Grizzly", "_type": "Template6", "hole1": 3, "hole2": "ALL"}, {"hole0": 3, "_type": "Template27", "hole1": 3}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "IronfurGrizzly"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -3.814697265625e-06, -0.0013700895942747593, -3.9219088648678735e-05, -0.0001110973025788553, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, -5.7220458984375e-06, -1.1563301086425781e-05, -5.340576171875e-05, -4.675506591796875, -0.00032806396484375, -3.135155202471651e-05, -2.634514203236904e-05, -2.1457672119140625e-06, -5.7220458984375e-06, -9.53671769821085e-06, 0.0, -0.0002079010009765625, 0.0, -5.449353218078613, -7.62939453125e-06, -2.3125237930798903e-05, 0.0, -1.6690646589267999e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Ironfur", "Grizzly", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Ironfur", " ", "Grizzly", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 110, 202, "3", "<EOS>", "3", "<EOS>"]}, {"score": -23.52139663696289, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -23.52138900756836], "choice_history": [80, 159, 294]}]}
{"index": 58, "beams": [{"score": -1.359456911407385, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": {"args": [{"_type": "arg", "arg": "x"}], "_type": "arguments"}, "body": {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "x"}}}, "ops": [{"_type": "Is"}]}, "_type": "Lambda"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "NameConstant", "value": "Null"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}, "ops": [{"_type": "Is"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -0.3154258728027344, -4.57763671875e-05, -5.7220458984375e-05, -0.000164031982421875, -4.38690185546875e-05, -4.00543212890625e-05, 0.0, -0.0001621246337890625, -2.09808349609375e-05, -7.748603820800781e-05, -3.814697265625e-06, -6.866455078125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001506805419921875, -2.3126602172851562e-05, -0.0035200119018554688, -3.814697265625e-06, -2.86102294921875e-05, -4.00543212890625e-05, 0.0, -0.03786063194274902, -1.621236151549965e-05, -0.000293731689453125, -0.0065784454345703125, -5.340576171875e-05, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0022106170654296875, 0.0, -0.0008405447006225586, -2.0265579223632812e-06, -0.0007078647613525391, 0.0, -0.011727571487426758, -2.0027106074849144e-05, -0.0055637359619140625, -0.000335693359375, -9.5367431640625e-06, -0.000118255615234375, -1.9073486328125e-06, -0.019501090049743652, 0.0, -0.000980019336566329, 0.0, -0.0030775070190429688, -0.00069427490234375, -0.0016107559204101562, -0.0013332366943359375, -8.0108642578125e-05, -0.004071712493896484, -2.15768777707126e-05, -0.01148223876953125, -0.000324249267578125, -5.7220458984375e-05, 0.0, -0.031482696533203125, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.00946414191275835, -1.1920928244535389e-07, -0.003978848457336426, -2.288818359375e-05, -0.0036319494247436523, -9.5367431640625e-06, -1.9073486328125e-06, -0.02842235565185547, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -6.67572021484375e-05, -2.09808349609375e-05, -0.00014722347259521484, -1.537799835205078e-05, -0.0022640228271484375, -3.814697265625e-06, -0.015186309814453125, -0.0016984939575195312, -0.026113510131835938, -0.00217437744140625, -4.38690185546875e-05, -1.1444091796875e-05, -0.0032634735107421875, -2.1457672119140625e-06, -2.288818359375e-05, -0.007837295532226562, -0.0020904541015625, -0.012609481811523438, -3.814697265625e-05, -4.38690185546875e-05, -1.1444091796875e-05, -0.00070953369140625, -3.0517578125e-05, -1.1444091796875e-05, -0.0033349990844726562, -0.0002765655517578125, -0.6411082148551941, -0.0003409385681152344, -0.000102996826171875, -0.0007810592651367188, -2.86102294921875e-05, -0.03190803527832031, -5.14984130859375e-05, -0.05194695666432381, -0.0002558227861300111], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 283, 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 42, 153, 269, 275, 268, "x", "<EOS>", 15, 139, 11, 129, 11, 129, 19, 160, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 279, 6, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 92, 147, 15, 139, 19, 160, "<UNK>", "<EOS>", 279, 6, 282, 46, 162, "Null", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>"]}, {"score": -1.5237658950289799, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(3), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": {"args": [{"_type": "arg", "arg": "x"}], "_type": "arguments"}, "body": {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "x"}}}, "ops": [{"_type": "Is"}]}, "_type": "Lambda"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "NameConstant", "value": "Null"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}, "ops": [{"_type": "Is"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -0.3154258728027344, -4.57763671875e-05, -5.7220458984375e-05, -0.000164031982421875, -4.38690185546875e-05, -4.00543212890625e-05, 0.0, -0.0001621246337890625, -2.09808349609375e-05, -7.748603820800781e-05, -3.814697265625e-06, -6.866455078125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001506805419921875, -2.3126602172851562e-05, -0.0035200119018554688, -3.814697265625e-06, -2.86102294921875e-05, -4.00543212890625e-05, 0.0, -0.03786063194274902, -1.621236151549965e-05, -0.000293731689453125, -0.0065784454345703125, -5.340576171875e-05, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0022106170654296875, 0.0, -0.0008405447006225586, -2.0265579223632812e-06, -0.0007078647613525391, 0.0, -0.011727571487426758, -2.0027106074849144e-05, -0.0055637359619140625, -0.000335693359375, -9.5367431640625e-06, -0.000118255615234375, -1.9073486328125e-06, -0.019501090049743652, 0.0, -0.000980019336566329, 0.0, -0.0030775070190429688, -0.00069427490234375, -0.0016107559204101562, -0.0013332366943359375, -8.0108642578125e-05, -0.004071712493896484, -2.15768777707126e-05, -0.01148223876953125, -0.000324249267578125, -5.7220458984375e-05, 0.0, -0.031482696533203125, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.00946414191275835, -1.1920928244535389e-07, -0.003978848457336426, -2.288818359375e-05, -0.0036319494247436523, -9.5367431640625e-06, -1.9073486328125e-06, -0.02842235565185547, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -6.67572021484375e-05, -2.09808349609375e-05, -0.00014722347259521484, -1.537799835205078e-05, -0.0022640228271484375, -3.814697265625e-06, -0.015186309814453125, -0.0016984939575195312, -0.026113510131835938, -0.00217437744140625, -4.38690185546875e-05, -1.1444091796875e-05, -0.0032634735107421875, -2.1457672119140625e-06, -2.288818359375e-05, -0.007837295532226562, -0.0020904541015625, -0.012609481811523438, -3.814697265625e-05, -4.38690185546875e-05, -1.1444091796875e-05, -0.00070953369140625, -3.0517578125e-05, -1.1444091796875e-05, -0.0033349990844726562, -0.0002765655517578125, -0.7849062085151672, -3.08750823023729e-05, -3.4332275390625e-05, -0.0013265609741210938, -2.6702880859375e-05, -0.06847763061523438, -3.4332275390625e-05, -0.03553561121225357, -0.00046086267684586346], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 283, 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 42, 153, 269, 275, 268, "x", "<EOS>", 15, 139, 11, 129, 11, 129, 19, 160, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 279, 6, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 92, 147, 15, 139, 19, 160, "<UNK>", "<EOS>", 279, 6, 282, 46, 162, "Null", "<EOS>", 295, 89, 141, 25, 223, "3", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>"]}, {"score": -1.8728982142141604, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.health <= 5:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}, "ops": [{"_type": "LtE"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -1.352961540222168, -3.4332275390625e-05, -5.340576171875e-05, -0.0002841949462890625, -2.09808349609375e-05, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-05, -1.1444091796875e-05, -2.3365017113974318e-05, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001373291015625, -2.3245811462402344e-05, -0.08468055725097656, -0.0020704269409179688, -0.008301734924316406, -9.72747802734375e-05, -0.02573680877685547, 0.0, -0.03170204162597656, -3.814697265625e-06, -0.000469207763671875, 0.0, -0.05523276329040527, 0.0, -0.006298383232206106, -2.50339189733495e-06, -0.034671664237976074, 0.0, -9.5367431640625e-06, -0.06653594970703125, -8.20159912109375e-05, -0.0002231597900390625, -7.05718994140625e-05, -0.015781303867697716, -3.4332275390625e-05, -0.000164031982421875, -0.026063919067382812, -5.14984130859375e-05, -0.03257942199707031, -0.000118255615234375, -0.01176239363849163, -0.00011801715299952775, -0.0001220703125, -0.0022058486938476562, -3.0517578125e-05, -0.036307334899902344, -9.5367431640625e-05, -0.02951991558074951, -0.00014197803102433681], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 92, 147, 15, 139, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "health", "<EOS>", 279, 9, 282, 47, 165, "5", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>"]}, {"score": -4.258252914944812, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(3), self)\n        else:\n            self.target.change_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": {"args": [{"_type": "arg", "arg": "x"}], "_type": "arguments"}, "body": {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "x"}}}, "ops": [{"_type": "Is"}]}, "_type": "Lambda"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}], "_type": "If", "test": {"comparators": [{"_type": "NameConstant", "value": "Null"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}, "ops": [{"_type": "Is"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -0.3154258728027344, -4.57763671875e-05, -5.7220458984375e-05, -0.000164031982421875, -4.38690185546875e-05, -4.00543212890625e-05, 0.0, -0.0001621246337890625, -2.09808349609375e-05, -7.748603820800781e-05, -3.814697265625e-06, -6.866455078125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001506805419921875, -2.3126602172851562e-05, -0.0035200119018554688, -3.814697265625e-06, -2.86102294921875e-05, -4.00543212890625e-05, 0.0, -0.03786063194274902, -1.621236151549965e-05, -0.000293731689453125, -0.0065784454345703125, -5.340576171875e-05, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0022106170654296875, 0.0, -0.0008405447006225586, -2.0265579223632812e-06, -0.0007078647613525391, 0.0, -0.011727571487426758, -2.0027106074849144e-05, -0.0055637359619140625, -0.000335693359375, -9.5367431640625e-06, -0.000118255615234375, -1.9073486328125e-06, -0.019501090049743652, 0.0, -0.000980019336566329, 0.0, -0.0030775070190429688, -0.00069427490234375, -0.0016107559204101562, -0.0013332366943359375, -8.0108642578125e-05, -0.004071712493896484, -2.15768777707126e-05, -0.01148223876953125, -0.000324249267578125, -5.7220458984375e-05, 0.0, -0.031482696533203125, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.00946414191275835, -1.1920928244535389e-07, -0.003978848457336426, -2.288818359375e-05, -0.0036319494247436523, -9.5367431640625e-06, -1.9073486328125e-06, -0.02842235565185547, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -6.67572021484375e-05, -2.09808349609375e-05, -0.00014722347259521484, -1.537799835205078e-05, -0.0022640228271484375, -3.814697265625e-06, -0.015186309814453125, -0.0016984939575195312, -0.026113510131835938, -0.00217437744140625, -4.38690185546875e-05, -1.1444091796875e-05, -0.0032634735107421875, -2.1457672119140625e-06, -2.288818359375e-05, -0.007837295532226562, -0.0020904541015625, -0.012609481811523438, -3.814697265625e-05, -4.38690185546875e-05, -1.1444091796875e-05, -0.00070953369140625, -3.0517578125e-05, -1.1444091796875e-05, -0.0033349990844726562, -0.0002765655517578125, -0.7849062085151672, -3.08750823023729e-05, -3.4332275390625e-05, -0.0013265609741210938, -2.6702880859375e-05, -2.760934829711914, -0.0007953643798828125, -0.07724428176879883, -2.09808349609375e-05], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 283, 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 42, 153, 269, 275, 268, "x", "<EOS>", 15, 139, 11, 129, 11, 129, 19, 160, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 279, 6, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 92, 147, 15, 139, 19, 160, "<UNK>", "<EOS>", 279, 6, 282, 46, 162, "Null", "<EOS>", 295, 89, 141, 25, 223, "3", "<EOS>", 295, 89, 141, 29, 246, "2", "<EOS>"]}, {"score": -4.318913395168117, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": {"args": [{"_type": "arg", "arg": "x"}], "_type": "arguments"}, "body": {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "x"}}}, "ops": [{"_type": "Is"}]}, "_type": "Lambda"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "NameConstant", "value": "Null"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}, "ops": [{"_type": "Is"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -0.3154258728027344, -4.57763671875e-05, -5.7220458984375e-05, -0.000164031982421875, -4.38690185546875e-05, -4.00543212890625e-05, 0.0, -0.0001621246337890625, -2.09808349609375e-05, -7.748603820800781e-05, -3.814697265625e-06, -6.866455078125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001506805419921875, -2.3126602172851562e-05, -0.0035200119018554688, -3.814697265625e-06, -2.86102294921875e-05, -4.00543212890625e-05, 0.0, -0.03786063194274902, -1.621236151549965e-05, -0.000293731689453125, -0.0065784454345703125, -5.340576171875e-05, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0022106170654296875, 0.0, -0.0008405447006225586, -2.0265579223632812e-06, -0.0007078647613525391, 0.0, -0.011727571487426758, -2.0027106074849144e-05, -0.0055637359619140625, -0.000335693359375, -9.5367431640625e-06, -0.000118255615234375, -1.9073486328125e-06, -0.019501090049743652, 0.0, -0.000980019336566329, 0.0, -0.0030775070190429688, -0.00069427490234375, -0.0016107559204101562, -0.0013332366943359375, -8.0108642578125e-05, -0.004071712493896484, -2.15768777707126e-05, -0.01148223876953125, -0.000324249267578125, -5.7220458984375e-05, 0.0, -0.031482696533203125, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.00946414191275835, -1.1920928244535389e-07, -0.003978848457336426, -2.288818359375e-05, -0.0036319494247436523, -9.5367431640625e-06, -1.9073486328125e-06, -0.02842235565185547, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -6.67572021484375e-05, -2.09808349609375e-05, -0.00014722347259521484, -1.537799835205078e-05, -0.0022640228271484375, -3.814697265625e-06, -0.015186309814453125, -0.0016984939575195312, -0.026113510131835938, -0.00217437744140625, -4.38690185546875e-05, -1.1444091796875e-05, -0.0032634735107421875, -2.1457672119140625e-06, -2.288818359375e-05, -0.007837295532226562, -0.0020904541015625, -0.012609481811523438, -3.814697265625e-05, -4.38690185546875e-05, -1.1444091796875e-05, -0.00070953369140625, -3.0517578125e-05, -1.1444091796875e-05, -0.0033349990844726562, -0.0002765655517578125, -0.6411082148551941, -0.0003409385681152344, -0.000102996826171875, -0.0007810592651367188, -2.86102294921875e-05, -0.03190803527832031, -5.14984130859375e-05, -3.0115480422973633, -0.00011122091382276267], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 283, 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 42, 153, 269, 275, 268, "x", "<EOS>", 15, 139, 11, 129, 11, 129, 19, 160, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 279, 6, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 92, 147, 15, 139, 19, 160, "<UNK>", "<EOS>", 279, 6, 282, 46, 162, "Null", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>", 295, 89, 141, 25, 223, "3", "<EOS>"]}, {"score": -4.865969301371699, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target, target_func=hearthbreaker.targeting)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole8": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "hole7": "target_func", "hole2": "HUNTER", "hole6": "find_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 3, "hole4": "target_func", "hole3": "COMMON"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": {"args": [{"_type": "arg", "arg": "x"}], "_type": "arguments"}, "body": {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "x"}}}, "ops": [{"_type": "Is"}]}, "_type": "Lambda"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "NameConstant", "value": "Null"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}, "ops": [{"_type": "Is"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -3.3039655685424805, -0.00055694580078125, -0.00012170527770649642, -7.271766662597656e-05, -6.4373016357421875e-06, -5.7220458984375e-06, -8.952382631832734e-05, -1.9073486328125e-06, -0.0003960132598876953, -1.52587890625e-05, -0.010759353637695312, -3.814697265625e-06, -0.03943073749542236, 0.0, -0.00011444091796875, 0.0, -6.29425048828125e-05, 0.0, -0.0015070438385009766, -7.62939453125e-06, -0.001338958740234375, 0.0, -0.02584540843963623, 0.0, -0.38636982440948486, 0.0, -0.015164375305175781, 0.0, -0.0010433197021484375, 0.0, -0.001268625259399414, -5.7220458984375e-06, -0.0020046234130859375, 0.0, -0.005234718322753906, -1.9073486328125e-06, -8.58306884765625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.110004425048828e-05, 0.0, 0.0, -1.4066696166992188e-05, 0.0, -4.57763671875e-05, -2.1219222617219202e-05, -1.311301275563892e-06, -0.06585693359375, -4.38690185546875e-05, -4.9591064453125e-05, -0.0001811981201171875, -5.14984130859375e-05, -3.814697265625e-05, -1.9073486328125e-06, -0.0001373291015625, -1.71661376953125e-05, -7.355213165283203e-05, -3.814697265625e-06, -7.2479248046875e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.000141143798828125, -2.3126602172851562e-05, -0.003414154052734375, -3.814697265625e-06, -2.86102294921875e-05, -4.00543212890625e-05, 0.0, -0.043476104736328125, -1.6689191397745162e-05, -0.0002880096435546875, -0.006565093994140625, -5.340576171875e-05, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0022029876708984375, 0.0, -0.0008538961410522461, -2.0265579223632812e-06, -0.0007040500640869141, 0.0, -0.01172173023223877, -1.9907896785298362e-05, -0.005523681640625, -0.0003337860107421875, -9.5367431640625e-06, -0.000118255615234375, -1.9073486328125e-06, -0.019295096397399902, 0.0, -0.000976204639300704, 0.0, -0.0030698776245117188, -0.0006961822509765625, -0.001613616943359375, -0.0013332366943359375, -8.0108642578125e-05, -0.004073619842529297, -2.15768777707126e-05, -0.011441230773925781, -0.000324249267578125, -5.7220458984375e-05, 0.0, -0.031494140625, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.009462234564125538, -1.1920928244535389e-07, -0.003976941108703613, -2.288818359375e-05, -0.003623366355895996, -9.5367431640625e-06, -1.9073486328125e-06, -0.028392791748046875, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -6.67572021484375e-05, -2.09808349609375e-05, -0.00014722347259521484, -1.537799835205078e-05, -0.0022640228271484375, -3.814697265625e-06, -0.013425827026367188, -0.0018329620361328125, -0.026238441467285156, -0.0021533966064453125, -4.38690185546875e-05, -1.1444091796875e-05, -0.0032186508178710938, -2.1457672119140625e-06, -2.288818359375e-05, -0.008081436157226562, -0.0020503997802734375, -0.012867927551269531, -3.814697265625e-05, -4.1961669921875e-05, -1.1444091796875e-05, -0.0007038116455078125, -3.24249267578125e-05, -1.1444091796875e-05, -0.003292083740234375, -0.000274658203125, -0.6441481709480286, -0.0003447532653808594, -0.000102996826171875, -0.0007886886596679688, -2.86102294921875e-05, -0.032820701599121094, -5.14984130859375e-05, -0.05185265839099884, -0.0002559419663157314], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 283, 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 42, 153, 269, 275, 268, "x", "<EOS>", 15, 139, 11, 129, 11, 129, 19, 160, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 279, 6, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 92, 147, 15, 139, 19, 160, "<UNK>", "<EOS>", 279, 6, 282, 46, 162, "Null", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>"]}, {"score": -4.869866544578024, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(3), self)\n        else:\n            self.target.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": {"args": [{"_type": "arg", "arg": "x"}], "_type": "arguments"}, "body": {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "x"}}}, "ops": [{"_type": "Is"}]}, "_type": "Lambda"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "NameConstant", "value": "Null"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}, "ops": [{"_type": "Is"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -0.3154258728027344, -4.57763671875e-05, -5.7220458984375e-05, -0.000164031982421875, -4.38690185546875e-05, -4.00543212890625e-05, 0.0, -0.0001621246337890625, -2.09808349609375e-05, -7.748603820800781e-05, -3.814697265625e-06, -6.866455078125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001506805419921875, -2.3126602172851562e-05, -0.0035200119018554688, -3.814697265625e-06, -2.86102294921875e-05, -4.00543212890625e-05, 0.0, -0.03786063194274902, -1.621236151549965e-05, -0.000293731689453125, -0.0065784454345703125, -5.340576171875e-05, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0022106170654296875, 0.0, -0.0008405447006225586, -2.0265579223632812e-06, -0.0007078647613525391, 0.0, -0.011727571487426758, -2.0027106074849144e-05, -0.0055637359619140625, -0.000335693359375, -9.5367431640625e-06, -0.000118255615234375, -1.9073486328125e-06, -0.019501090049743652, 0.0, -0.000980019336566329, 0.0, -0.0030775070190429688, -0.00069427490234375, -0.0016107559204101562, -0.0013332366943359375, -8.0108642578125e-05, -0.004071712493896484, -2.15768777707126e-05, -0.01148223876953125, -0.000324249267578125, -5.7220458984375e-05, 0.0, -0.031482696533203125, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.00946414191275835, -1.1920928244535389e-07, -0.003978848457336426, -2.288818359375e-05, -0.0036319494247436523, -9.5367431640625e-06, -1.9073486328125e-06, -0.02842235565185547, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -6.67572021484375e-05, -2.09808349609375e-05, -0.00014722347259521484, -1.537799835205078e-05, -0.0022640228271484375, -3.814697265625e-06, -0.015186309814453125, -0.0016984939575195312, -0.026113510131835938, -0.00217437744140625, -4.38690185546875e-05, -1.1444091796875e-05, -0.0032634735107421875, -2.1457672119140625e-06, -2.288818359375e-05, -0.007837295532226562, -0.0020904541015625, -0.012609481811523438, -3.814697265625e-05, -4.38690185546875e-05, -1.1444091796875e-05, -0.00070953369140625, -3.0517578125e-05, -1.1444091796875e-05, -0.0033349990844726562, -0.0002765655517578125, -0.7849062085151672, -3.08750823023729e-05, -3.4332275390625e-05, -0.0013265609741210938, -2.6702880859375e-05, -0.06847763061523438, -3.4332275390625e-05, -3.3819868564605713, -0.00011026697757188231], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 283, 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 42, 153, 269, 275, 268, "x", "<EOS>", 15, 139, 11, 129, 11, 129, 19, 160, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 279, 6, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 92, 147, 15, 139, 19, 160, "<UNK>", "<EOS>", 279, 6, 282, 46, 162, "Null", "<EOS>", 295, 89, 141, 25, 223, "3", "<EOS>", 295, 89, 141, 25, 223, "3", "<EOS>"]}, {"score": -4.890443753524657, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n        if <UNK> is Null:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.change_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": {"args": [{"_type": "arg", "arg": "x"}], "_type": "arguments"}, "body": {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "x"}}}, "ops": [{"_type": "Is"}]}, "_type": "Lambda"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}], "_type": "If", "test": {"comparators": [{"_type": "NameConstant", "value": "Null"}], "_type": "Compare", "left": {"_type": "Name", "id": "<UNK>"}, "ops": [{"_type": "Is"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -0.3154258728027344, -4.57763671875e-05, -5.7220458984375e-05, -0.000164031982421875, -4.38690185546875e-05, -4.00543212890625e-05, 0.0, -0.0001621246337890625, -2.09808349609375e-05, -7.748603820800781e-05, -3.814697265625e-06, -6.866455078125e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001506805419921875, -2.3126602172851562e-05, -0.0035200119018554688, -3.814697265625e-06, -2.86102294921875e-05, -4.00543212890625e-05, 0.0, -0.03786063194274902, -1.621236151549965e-05, -0.000293731689453125, -0.0065784454345703125, -5.340576171875e-05, -1.9073486328125e-06, -0.000179290771484375, 0.0, -0.0022106170654296875, 0.0, -0.0008405447006225586, -2.0265579223632812e-06, -0.0007078647613525391, 0.0, -0.011727571487426758, -2.0027106074849144e-05, -0.0055637359619140625, -0.000335693359375, -9.5367431640625e-06, -0.000118255615234375, -1.9073486328125e-06, -0.019501090049743652, 0.0, -0.000980019336566329, 0.0, -0.0030775070190429688, -0.00069427490234375, -0.0016107559204101562, -0.0013332366943359375, -8.0108642578125e-05, -0.004071712493896484, -2.15768777707126e-05, -0.01148223876953125, -0.000324249267578125, -5.7220458984375e-05, 0.0, -0.031482696533203125, -1.9073486328125e-06, -0.0003566741943359375, 0.0, -0.00946414191275835, -1.1920928244535389e-07, -0.003978848457336426, -2.288818359375e-05, -0.0036319494247436523, -9.5367431640625e-06, -1.9073486328125e-06, -0.02842235565185547, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -6.67572021484375e-05, -2.09808349609375e-05, -0.00014722347259521484, -1.537799835205078e-05, -0.0022640228271484375, -3.814697265625e-06, -0.015186309814453125, -0.0016984939575195312, -0.026113510131835938, -0.00217437744140625, -4.38690185546875e-05, -1.1444091796875e-05, -0.0032634735107421875, -2.1457672119140625e-06, -2.288818359375e-05, -0.007837295532226562, -0.0020904541015625, -0.012609481811523438, -3.814697265625e-05, -4.38690185546875e-05, -1.1444091796875e-05, -0.00070953369140625, -3.0517578125e-05, -1.1444091796875e-05, -0.0033349990844726562, -0.0002765655517578125, -0.6411082148551941, -0.0003409385681152344, -0.000102996826171875, -0.0007810592651367188, -2.86102294921875e-05, -3.536968231201172, -0.00048828125, -0.07766784727573395, -2.47955322265625e-05], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 283, 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 42, 153, 269, 275, 268, "x", "<EOS>", 15, 139, 11, 129, 11, 129, 19, 160, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 279, 6, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 92, 147, 15, 139, 19, 160, "<UNK>", "<EOS>", 279, 6, 282, 46, 162, "Null", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>", 295, 89, 141, 29, 246, "2", "<EOS>"]}, {"score": -5.149917952573439, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.targeting.<UNK>(player.game, lambda x: x.card\n            .minion_type is MINION_TYPE.BEAST)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, {"args": {"args": [{"_type": "arg", "arg": "x"}], "_type": "arguments"}, "body": {"comparators": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "minion_type", "value": {"_type": "Attribute", "attr": "card", "value": {"_type": "Name", "id": "x"}}}, "ops": [{"_type": "Is"}]}, "_type": "Lambda"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "<UNK>", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -1.352961540222168, -3.4332275390625e-05, -5.340576171875e-05, -0.0002841949462890625, -2.09808349609375e-05, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-05, -1.1444091796875e-05, -2.3365017113974318e-05, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001373291015625, -2.3245811462402344e-05, -3.5293350219726562, -0.00038909912109375, -6.103515625e-05, -0.0025348663330078125, 0.0, -0.023950934410095215, -2.837150896084495e-05, -0.0002346038818359375, -0.04076957702636719, -3.814697265625e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.011363983154296875, 0.0, -0.01638317108154297, -2.0265579223632812e-06, -0.0012503862380981445, 0.0, -0.00424074986949563, -3.218620622646995e-05, -0.005260467529296875, -0.0002536773681640625, -1.52587890625e-05, -0.0003299713134765625, -1.9073486328125e-06, -0.005669713020324707, 0.0, -0.0016202903352677822, 0.0, -0.004023551940917969, -0.000644683837890625, -0.0011777877807617188, -0.0011501312255859375, -0.0001220703125, -0.0037844181060791016, -2.324580964341294e-05, -0.00928497314453125, -0.00028228759765625, -5.53131103515625e-05, 0.0, -0.03653144836425781, -1.9073486328125e-06, -0.000354766845703125, 0.0, -0.00914966780692339, -1.1920928244535389e-07, -0.004011273384094238, -2.288818359375e-05, -0.003417372703552246, -7.62939453125e-06, -1.9073486328125e-06, -0.028017044067382812, -1.52587890625e-05, -4.57763671875e-05, 0.0, -7.05718994140625e-05, -2.09808349609375e-05, -0.00012636184692382812, -1.537799835205078e-05, -0.0021381378173828125, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "<UNK>", "<EOS>", 14, 136, 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 283, 37, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", 42, 153, 269, 275, 268, "x", "<EOS>", 15, 139, 11, 129, 11, 129, 19, 160, "x", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 279, 6, 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"]}, {"score": -5.334850446271389, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.health <= 5:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.change_attack(2)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}], "_type": "If", "test": {"comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}, "ops": [{"_type": "LtE"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -1.352961540222168, -3.4332275390625e-05, -5.340576171875e-05, -0.0002841949462890625, -2.09808349609375e-05, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-05, -1.1444091796875e-05, -2.3365017113974318e-05, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001373291015625, -2.3245811462402344e-05, -0.08468055725097656, -0.0020704269409179688, -0.008301734924316406, -9.72747802734375e-05, -0.02573680877685547, 0.0, -0.03170204162597656, -3.814697265625e-06, -0.000469207763671875, 0.0, -0.05523276329040527, 0.0, -0.006298383232206106, -2.50339189733495e-06, -0.034671664237976074, 0.0, -9.5367431640625e-06, -0.06653594970703125, -8.20159912109375e-05, -0.0002231597900390625, -7.05718994140625e-05, -0.015781303867697716, -3.4332275390625e-05, -0.000164031982421875, -0.026063919067382812, -5.14984130859375e-05, -0.03257942199707031, -0.000118255615234375, -0.01176239363849163, -0.00011801715299952775, -0.0001220703125, -0.0022058486938476562, -3.0517578125e-05, -3.446221351623535, -0.000560760498046875, -0.08121945708990097, -1.52587890625e-05], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 92, 147, 15, 139, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "health", "<EOS>", 279, 9, 282, 47, 165, "5", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>", 295, 89, 141, 29, 246, "2", "<EOS>"]}, {"score": -5.434468476910638, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.health <= 5:\n            self.target.change_attack(2)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 2, "_type": "Template63"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}, "ops": [{"_type": "LtE"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -1.352961540222168, -3.4332275390625e-05, -5.340576171875e-05, -0.0002841949462890625, -2.09808349609375e-05, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-05, -1.1444091796875e-05, -2.3365017113974318e-05, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001373291015625, -2.3245811462402344e-05, -0.08468055725097656, -0.0020704269409179688, -0.008301734924316406, -9.72747802734375e-05, -0.02573680877685547, 0.0, -0.03170204162597656, -3.814697265625e-06, -0.000469207763671875, 0.0, -0.05523276329040527, 0.0, -0.006298383232206106, -2.50339189733495e-06, -0.034671664237976074, 0.0, -9.5367431640625e-06, -0.06653594970703125, -8.20159912109375e-05, -0.0002231597900390625, -7.05718994140625e-05, -0.015781303867697716, -3.4332275390625e-05, -0.000164031982421875, -0.026063919067382812, -5.14984130859375e-05, -3.5018081665039062, -0.0002231597900390625, -0.08100317418575287, -1.9073486328125e-06, -0.0008373260498046875, -0.0013284683227539062, -2.09808349609375e-05, -0.07416820526123047, -5.53131103515625e-05, -0.015008214861154556, -0.00011646735947579145], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 92, 147, 15, 139, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "health", "<EOS>", 279, 9, 282, 47, 165, "5", "<EOS>", 295, 89, 141, 29, 246, "2", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>"]}, {"score": -5.446272245733212, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.hero.health <= 5:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(3), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 3, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "Num", "n": 5}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "health", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}}, "ops": [{"_type": "LtE"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -1.352961540222168, -3.4332275390625e-05, -5.340576171875e-05, -0.0002841949462890625, -2.09808349609375e-05, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-05, -1.1444091796875e-05, -2.3365017113974318e-05, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001373291015625, -2.3245811462402344e-05, -0.08468055725097656, -0.0020704269409179688, -0.008301734924316406, -9.72747802734375e-05, -0.02573680877685547, 0.0, -0.03170204162597656, -3.814697265625e-06, -0.000469207763671875, 0.0, -0.05523276329040527, 0.0, -0.006298383232206106, -2.50339189733495e-06, -0.034671664237976074, 0.0, -9.5367431640625e-06, -0.06653594970703125, -8.20159912109375e-05, -0.0002231597900390625, -7.05718994140625e-05, -0.015781303867697716, -3.4332275390625e-05, -0.000164031982421875, -0.026063919067382812, -5.14984130859375e-05, -0.03257942199707031, -0.000118255615234375, -0.01176239363849163, -0.00011801715299952775, -0.0001220703125, -0.0022058486938476562, -3.0517578125e-05, -0.036307334899902344, -9.5367431640625e-05, -3.602935791015625, -0.00010013411520048976], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 92, 147, 15, 139, 11, 129, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "health", "<EOS>", 279, 9, 282, 47, 165, "5", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>", 295, 89, 141, 25, 223, "3", "<EOS>"]}, {"score": -5.485916152975619, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            self.target.damage(player.effective_spell_damage(5), self)\n        else:\n            self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole2": "HUNTER", "_type": "Template11", "hole1": 3, "hole4": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"body": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "orelse": [{"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}], "_type": "If", "test": {"comparators": [{"_type": "Num", "n": 0}], "_type": "Compare", "left": {"_type": "Attribute", "attr": "cards_played", "value": {"_type": "Name", "id": "player"}}, "ops": [{"_type": "Gt"}]}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -0.039943695068359375, -0.000164031982421875, -7.152555099310121e-07, -1.800060272216797e-05, -5.841255187988281e-06, -5.7220458984375e-06, -2.6822088329936378e-05, -1.9073486328125e-06, -0.0005638599395751953, -1.9073486328125e-06, -0.000762939453125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -1.52587890625e-05, 0.0, -0.00019085407257080078, -5.7220458984375e-06, -0.0001926422119140625, 0.0, -0.004386305809020996, -9.536741345073096e-06, -0.0003299713134765625, -3.814697265625e-06, -0.0005022287368774414, 0.0, -1.71661376953125e-05, -4.38690185546875e-05, -1.9073486328125e-05, -4.589557647705078e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -5.14984130859375e-05, -1.4305092918220907e-05, -1.4305104514278355e-06, -1.352961540222168, -3.4332275390625e-05, -5.340576171875e-05, -0.0002841949462890625, -2.09808349609375e-05, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-05, -1.1444091796875e-05, -2.3365017113974318e-05, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0001373291015625, -2.3245811462402344e-05, -0.08468055725097656, -0.0020704269409179688, -0.008301734924316406, -9.72747802734375e-05, -0.02573680877685547, 0.0, -3.4698238372802734, 0.0, -0.000118255615234375, 0.0, -0.014175890944898129, 0.0, -3.814697265625e-06, -0.13448143005371094, -0.0008144378662109375, -1.33514404296875e-05, -0.000308990478515625, -0.002968309447169304, 0.0, -0.000701904296875, -0.0035648345947265625, -2.288818359375e-05, -0.2353515625, -0.0002384185791015625, -0.02027920074760914, -3.468989962129854e-05, -5.53131103515625e-05, -0.0008392333984375, -4.1961669921875e-05, -0.05570030212402344, -0.0001544952392578125, -0.023605214431881905, -0.00011742107017198578], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 98, 181, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 296, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 92, 147, 15, 139, 11, 129, 19, 160, "player", "<EOS>", "cards_played", "<EOS>", 279, 3, 282, 47, 165, "0", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>", 295, 89, 141, 25, 223, "5", "<EOS>"]}, {"score": -6.223668431497799, "inferred_code": "class KillCommand(SpellCard):\n\n    def __init__(self):\n        super().__init__('Kill Command', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_spell_target, overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Kill Command", "hole8": {"_type": "Num", "n": 1}, "hole7": "overload", "hole2": "HUNTER", "hole6": "find_spell_target", "hole5": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}, "_type": "Template9", "hole1": 3, "hole4": "target_func", "hole3": "COMMON"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "KillCommand"}], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.3841830625315197e-06, -3.409345663385466e-05, -7.986990567587782e-06, -4.57763671875e-05, 0.0, -5.91278076171875e-05, -0.0001239776611328125, -2.2530553906108253e-05, -1.7881377516459906e-06, -4.76837158203125e-05, -3.3039655685424805, -0.00055694580078125, -0.00012170527770649642, -7.271766662597656e-05, -6.4373016357421875e-06, -5.7220458984375e-06, -8.952382631832734e-05, -1.9073486328125e-06, -0.0003960132598876953, -1.52587890625e-05, -0.010759353637695312, -3.814697265625e-06, -0.03943073749542236, 0.0, -0.00011444091796875, 0.0, -6.29425048828125e-05, 0.0, -0.0015070438385009766, -7.62939453125e-06, -0.001338958740234375, 0.0, -0.02584540843963623, 0.0, -2.816605567932129, 0.0, -0.000492095947265625, -4.76837158203125e-05, -0.012122140266001225, 0.0, -0.0057506561279296875, -0.0010051727294921875, -6.29425048828125e-05, 0.0, -8.13007281976752e-05, -5.7220458984375e-06, -0.00035858154296875, 0.0, -2.47955322265625e-05, -0.0023326873779296875, -1.9073486328125e-06, -7.24788405932486e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Kill", "Command", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 124, 264, "Kill", " ", "Command", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 21, 165, "1", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -22.34872817993164, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-2.288818359375e-05, -1.9073486328125e-05, -22.34868621826172], "choice_history": [80, 159, 294]}]}
{"index": 59, "beams": [{"score": -0.015291822848212178, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -0.0103989839553833, -0.0003204345703125, -0.0003814697265625, -0.000156402587890625, -3.3736214390955865e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -5.11941207737209, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, stealth=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "stealth", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -4.917483329772949, -0.00029754638671875, -0.19743633270263672, -0.0001163482666015625, -7.772444951115176e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "stealth", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -6.710653437090059, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -4.917483329772949, -0.00029754638671875, -1.7825775146484375, -0.0062084197998046875, -7.82012939453125e-05, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.8995908666945525, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template17", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -6.85200309753418, -0.00061798095703125, -2.5033637939486653e-05, -7.748603820800781e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -2.7418149329605512e-05, 0.0, -9.21487808227539e-05, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -2.18150598811917e-05, 0.0, -0.00011493635247461498, 0.0, -0.044921159744262695, -0.000423431396484375, -0.0006732940673828125, -7.43865966796875e-05, -5.114074156153947e-05, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 103, 186, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -7.501094473299872, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, Started=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "Started", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -7.3851494789123535, -3.814697265625e-06, -0.1116189956665039, -0.0002231597900390625, -9.822844003792852e-05, -5.7220458984375e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "Started", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -7.585372931581105, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -7.33983039855957, -0.009961128234863281, -0.00013779645087197423, -1.1205666851310525e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.05639803782105446, -6.29425048828125e-05, -0.15639102458953857, -1.9073486328125e-06, -0.009892463684082031, -3.814697265625e-05, -0.0006000386201776564, 0.0, -0.002547219628468156, 0.0, -0.008167266845703125, -0.000102996826171875, -0.0004596710205078125, -0.0003490447998046875, -5.805486944154836e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Kobold", " ", "Geomancer", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -7.696097842731206, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "hole2": "ALL", "_type": "Template11", "hole1": 2, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "spell_damage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -7.498871803283691, -0.000171661376953125, -1.6689286894688848e-06, -1.049041748046875e-05, -9.775161743164062e-06, -1.9073486328125e-06, -2.0265656530682463e-06, 0.0, -6.115436553955078e-05, -3.814697265625e-06, -0.000133514404296875, -5.7220458984375e-06, -0.001674652099609375, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -0.001922607421875, 0.0, -0.17185020446777344, -4.124630868318491e-05, -0.0001125335693359375, -0.0007114410400390625, -6.98541771271266e-05, 0.0, -0.00010060900240205228, 0.0, -0.01858842372894287, -5.91278076171875e-05, -0.001041412353515625, -0.0001583099365234375, -0.0001264803868252784, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -8.336166988868627, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, auras=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "auras", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -7.997623920440674, -5.5670738220214844e-05, -0.33232784271240234, -0.0020389556884765625, -0.00011408144928282127, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -8.483750117731233, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damagegame=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "spell_damagegame", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -0.0103989839553833, -8.4429349899292, -2.7060508728027344e-05, -0.025775909423828125, -0.0005283355712890625, -8.022785186767578e-05, -9.5367431640625e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "spell_damage", "game", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -8.670127166223665, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, spell_damage=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "spell_damage", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -0.0103989839553833, -0.0003204345703125, -8.503113746643066, -0.1520071029663086, -0.000278472900390625, -1.33514404296875e-05], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "spell_damage", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.116289151613728, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, Change=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "Change", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -8.950124740600586, -5.340576171875e-05, -0.16196537017822266, -8.20159912109375e-05, -6.47306369501166e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "Change", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -9.174113047970877, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, enrage=1)\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "enrage", "hole3": {"_type": "Num", "n": 1}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -8.961050987243652, -0.00031507015228271484, -0.20845699310302734, -0.0002155303955078125, -7.17639341019094e-05, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "enrage", "<EOS>", 21, 165, "1", "<EOS>"]}, {"score": -10.45066751332297, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, deathrattle=Deathrattle(Heal(2), PlayerSelector()))\n", "model_output": {"body": [{"body": [{"hole0": "Kobold Geomancer", "_type": "Template15", "hole1": 2, "hole2": "ALL"}, {"hole0": 2, "_type": "Template23", "hole1": 2, "hole2": "deathrattle", "hole3": {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "PlayerSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -0.00287628173828125, -7.05718994140625e-05, -2.7418097943154862e-06, -1.811981201171875e-05, -4.291534423828125e-06, -1.9073486328125e-06, -1.0967274647555314e-05, 0.0, -0.00010883808135986328, -1.1444091796875e-05, -0.0002765655517578125, -8.20159912109375e-05, -7.140370871638879e-05, 0.0, -0.00011922595149371773, 0.0, -8.758041381835938, -0.000377655029296875, -0.07515335083007812, -0.0001316070556640625, -9.34600830078125e-05, 0.0, -0.1913433074951172, -1.9073486328125e-06, -0.0056285858154296875, -0.021065711975097656, -0.0001678466796875, -8.20159912109375e-05, -0.002536773681640625, -0.7456390261650085, -0.003877878189086914, -0.000244140625, -0.00992584228515625, -3.814697265625e-06, -0.11619025468826294, 0.0, -0.03697395324707031, -9.5367431640625e-06, -0.4788750410079956, -0.00030934810638427734, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kobold", " ", "Geomancer", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 109, 200, "2", "<EOS>", "2", "<EOS>", "deathrattle", "<EOS>", 14, 136, 19, 160, "Deathrattle", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "2", "<EOS>", 68, 260, "Player", "Selector", "<EOS>"]}, {"score": -12.815498953907763, "inferred_code": "class KoboldGeomancer(MinionCard):\n\n    def __init__(self):\n        super().__init__('Kobold Geomancer', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=CARD_SOURCE.LIST, minion=\n            BothPlayer())\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Kobold Geomancer"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "LIST", "value": {"_type": "Name", "id": "CARD_SOURCE"}}}, {"_type": "keyword", "arg": "minion", "value": {"hole0": "BothPlayer", "_type": "Template77"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template27", "hole1": 2}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "KoboldGeomancer"}], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -3.218599158572033e-05, -1.7046782886609435e-05, -3.4212545870104805e-05, -3.814697265625e-06, -1.52587890625e-05, 0.0, -3.0994312965049176e-06, -3.0517578125e-05, -1.192092622659402e-05, -1.33514404296875e-05, -8.061833381652832, -1.71661376953125e-05, -5.757808321504854e-05, 0.0, -7.62939453125e-06, -0.0002193450927734375, -5.340576171875e-05, -9.620189666748047e-05, 0.0, -0.00012969970703125, -0.050201416015625, -0.0002841949462890625, -5.91278076171875e-05, -0.38719654083251953, -0.000553131103515625, -1.9073486328125e-06, -8.96453857421875e-05, 0.0, -2.777542977128178e-05, 0.0, -9.679786307970062e-05, -1.9073486328125e-06, -0.10137462615966797, -3.814697265625e-06, -4.38690185546875e-05, -5.090107151772827e-05, -0.00014901161193847656, -3.218649908376392e-06, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.0015648748958483338, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -7.05718994140625e-05, -2.253030106658116e-05, -0.000919342041015625, 0.0, -4.76837158203125e-05, -9.34600830078125e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0033826828002929688, -2.0265579223632812e-06, -0.40459156036376953, -1.9073486328125e-06, -0.0025568008422851562, -0.0002689361572265625, -0.00025725364685058594, -1.9073486328125e-06, -0.44707679748535156, -0.0007534027099609375, -0.000118255615234375, -0.006307839881628752, -1.33514404296875e-05, -0.03614044189453125, -0.0002899169921875, -1.1444091796875e-05, -9.5367431640625e-06, -0.37472355365753174, -1.9073486328125e-06, -1.0367833375930786, -1.01327859738376e-05, -0.06354618072509766, -0.000637054443359375, -0.9173387289047241, -1.9073486328125e-06, -0.5625467300415039, -3.4332275390625e-05, -0.02248072624206543, -0.0010265111923217773, -4.38690185546875e-05, -0.3287229537963867, -1.1444091796875e-05, -0.00010764019680209458, 0.0, -5.967303877696395e-07, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kobold", "Geomancer", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Kobold", " ", "Geomancer", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 291, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 79, 271, "minion", "<EOS>", 33, 260, "Both", "Player", "<EOS>", 110, 202, "2", "<EOS>", "2", "<EOS>"]}, {"score": -23.045854568481445, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-7.82012939453125e-05, -8.0108642578125e-05, -23.045696258544922], "choice_history": [80, 159, 294]}]}
{"index": 60, "beams": [{"score": -0.45756912284286955, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "_type": "Template15", "hole1": 4, "hole2": "WARRIOR"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Kor'kronElite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -0.4074207842350006, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -0.042227745056152344, -5.7220458984375e-05, -5.721882189391181e-05, -2.4914739697123878e-05, -5.125998541188892e-06, -1.9073486328125e-06, -0.00032901758095249534, 0.0, -0.000457763671875, -7.62939453125e-06, -0.0008754730224609375, -0.0002040863037109375, -1.1086437552876305e-05, -1.9073486328125e-06, -0.00039862882113084197, 0.0, -0.0044939517974853516, -4.00543212890625e-05, -0.00023651123046875, -0.0001277923583984375, -4.76837158203125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kor'kron", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -1.1449198430100296, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "_type": "Template15", "hole1": 4, "hole2": "WARRIOR"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Elite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -1.0947715044021606, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -0.042227745056152344, -5.7220458984375e-05, -5.721882189391181e-05, -2.4914739697123878e-05, -5.125998541188892e-06, -1.9073486328125e-06, -0.00032901758095249534, 0.0, -0.000457763671875, -7.62939453125e-06, -0.0008754730224609375, -0.0002040863037109375, -1.1086437552876305e-05, -1.9073486328125e-06, -0.00039862882113084197, 0.0, -0.0044939517974853516, -4.00543212890625e-05, -0.00023651123046875, -0.0001277923583984375, -4.76837158203125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.273382553319152, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "hole2": "WARRIOR", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Kor'kronElite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -0.4074207842350006, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -3.4694862365722656, -8.0108642578125e-05, -1.3232143828645349e-05, -7.867813110351562e-06, -7.271765298355604e-06, -1.9073486328125e-06, -0.0006159543991088867, 0.0, -0.0020275115966796875, 0.0, -0.00021564960479736328, -9.5367431640625e-06, -0.0003948211669921875, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.28466033935546875, -6.723403930664062e-05, -0.09901809692382812, -3.0517578125e-05, -9.298297300119884e-06, -1.9073486328125e-06, -0.00031471214606426656, 0.0, -0.007955193519592285, -9.5367431640625e-06, -0.0003719329833984375, -4.76837158203125e-05, -3.254413604736328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kor'kron", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -4.960733273486312, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "hole2": "WARRIOR", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Elite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -1.0947715044021606, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -3.4694862365722656, -8.0108642578125e-05, -1.3232143828645349e-05, -7.867813110351562e-06, -7.271765298355604e-06, -1.9073486328125e-06, -0.0006159543991088867, 0.0, -0.0020275115966796875, 0.0, -0.00021564960479736328, -9.5367431640625e-06, -0.0003948211669921875, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.28466033935546875, -6.723403930664062e-05, -0.09901809692382812, -3.0517578125e-05, -9.298297300119884e-06, -1.9073486328125e-06, -0.00031471214606426656, 0.0, -0.007955193519592285, -9.5367431640625e-06, -0.0003719329833984375, -4.76837158203125e-05, -3.254413604736328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.433311350526765, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "hole2": "WARRIOR", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Kor'kronElite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -0.4074207842350006, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -3.4694862365722656, -8.0108642578125e-05, -1.3232143828645349e-05, -7.867813110351562e-06, -7.271765298355604e-06, -1.9073486328125e-06, -0.0006159543991088867, 0.0, -0.0020275115966796875, 0.0, -0.00021564960479736328, -9.5367431640625e-06, -0.0003948211669921875, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -1.5415925979614258, -9.94205183815211e-05, -0.0006122589111328125, -0.0001621246337890625, -3.802711216849275e-05, -1.9073486328125e-06, -0.00035822272184304893, 0.0, -0.009096741676330566, -1.33514404296875e-05, -0.0003871917724609375, -4.57763671875e-05, -4.017353057861328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kor'kron", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.120662070693925, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "hole2": "WARRIOR", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Elite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -1.0947715044021606, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -3.4694862365722656, -8.0108642578125e-05, -1.3232143828645349e-05, -7.867813110351562e-06, -7.271765298355604e-06, -1.9073486328125e-06, -0.0006159543991088867, 0.0, -0.0020275115966796875, 0.0, -0.00021564960479736328, -9.5367431640625e-06, -0.0003948211669921875, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -1.5415925979614258, -9.94205183815211e-05, -0.0006122589111328125, -0.0001621246337890625, -3.802711216849275e-05, -1.9073486328125e-06, -0.00035822272184304893, 0.0, -0.009096741676330566, -1.33514404296875e-05, -0.0003871917724609375, -4.57763671875e-05, -4.017353057861328e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.255317424258465, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Kor'kron Elite"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Kor'kronElite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -0.4074207842350006, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -4.826398849487305, -5.7220458984375e-06, -8.487701416015625e-05, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -9.5367431640625e-06, -7.82012939453125e-05, 0.0, -6.103515625e-05, -0.008398056030273438, -7.05718994140625e-05, -1.33514404296875e-05, -0.679046630859375, -0.0006504058837890625, 0.0, -7.05718994140625e-05, 0.0, -5.0902366638183594e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.08335590362548828, -1.9073486328125e-06, -1.9073486328125e-05, -2.0503786799963564e-05, -0.0001919269561767578, -5.376204353524372e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -0.002319779945537448, -3.814697265625e-06, -3.24249267578125e-05, 0.0, -1.33514404296875e-05, 0.0, -2.6702880859375e-05, 0.0, -0.013522148132324219, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -4.1961669921875e-05, -2.0265579223632812e-06, -0.0002613067626953125, -1.33514404296875e-05, -0.0005016326904296875, -2.09808349609375e-05, -3.814697265625e-05, 0.0, -0.05145454406738281, -4.1961669921875e-05, -7.62939453125e-06, -2.300739288330078e-05, -8.0108642578125e-05, -0.0002498626708984375, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -9.72747802734375e-05, -9.5367431640625e-06, -0.04665660858154297, -0.00025272363563999534, -0.12753677368164062, -5.340576171875e-05, -7.748586540401448e-06, -1.9073486328125e-06, -0.00029170498601160944, 0.0, -0.00467371940612793, -1.33514404296875e-05, -0.000316619873046875, -6.103515625e-05, -3.445148468017578e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kor'kron", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Kor'kron", " ", "Elite", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.706805757376969, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Kor'kron Elite"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Kor'kronElite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -0.4074207842350006, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -4.826398849487305, -5.7220458984375e-06, -8.487701416015625e-05, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -9.5367431640625e-06, -7.82012939453125e-05, 0.0, -6.103515625e-05, -0.008398056030273438, -7.05718994140625e-05, -1.33514404296875e-05, -0.7079143524169922, -4.57763671875e-05, 0.0, -7.05718994140625e-05, 0.0, -0.00013529389980249107, 0.0, -4.38690185546875e-05, -5.7220458984375e-06, -0.25112056732177734, -1.33514404296875e-05, -4.76837158203125e-05, -0.0001867835089797154, -0.00035130977630615234, -9.750862955115736e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0026647585909813643, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.52587890625e-05, 0.0, -8.20159912109375e-05, 0.0, -0.004924774169921875, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -7.62939453125e-06, -3.814697265625e-06, -0.000102996826171875, -1.9073486328125e-06, -0.00099945068359375, -3.4332275390625e-05, -0.000926971435546875, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -9.5367431640625e-06, 0.0, -0.013132095336914062, -2.0265579223632812e-06, -0.46955013275146484, -2.5153141905320808e-05, -0.0035343170166015625, -0.000102996826171875, -8.702254490344785e-06, -1.9073486328125e-06, -0.00034010352101176977, 0.0, -0.006691932678222656, -1.71661376953125e-05, -0.0002288818359375, -6.4849853515625e-05, -4.589557647705078e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kor'kron", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Kor'kron", " ", "Elite", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.942668144425625, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Kor'kron Elite"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Elite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -1.0947715044021606, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -4.826398849487305, -5.7220458984375e-06, -8.487701416015625e-05, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -9.5367431640625e-06, -7.82012939453125e-05, 0.0, -6.103515625e-05, -0.008398056030273438, -7.05718994140625e-05, -1.33514404296875e-05, -0.679046630859375, -0.0006504058837890625, 0.0, -7.05718994140625e-05, 0.0, -5.0902366638183594e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.08335590362548828, -1.9073486328125e-06, -1.9073486328125e-05, -2.0503786799963564e-05, -0.0001919269561767578, -5.376204353524372e-05, 0.0, -1.52587890625e-05, -3.814697265625e-06, -0.002319779945537448, -3.814697265625e-06, -3.24249267578125e-05, 0.0, -1.33514404296875e-05, 0.0, -2.6702880859375e-05, 0.0, -0.013522148132324219, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -4.1961669921875e-05, -2.0265579223632812e-06, -0.0002613067626953125, -1.33514404296875e-05, -0.0005016326904296875, -2.09808349609375e-05, -3.814697265625e-05, 0.0, -0.05145454406738281, -4.1961669921875e-05, -7.62939453125e-06, -2.300739288330078e-05, -8.0108642578125e-05, -0.0002498626708984375, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -9.72747802734375e-05, -9.5367431640625e-06, -0.04665660858154297, -0.00025272363563999534, -0.12753677368164062, -5.340576171875e-05, -7.748586540401448e-06, -1.9073486328125e-06, -0.00029170498601160944, 0.0, -0.00467371940612793, -1.33514404296875e-05, -0.000316619873046875, -6.103515625e-05, -3.445148468017578e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Kor'kron", " ", "Elite", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.122183173788926, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "hole2": "WARRIOR", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 4, "_type": "Template65", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Kor'kronElite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -0.4074207842350006, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -3.4694862365722656, -8.0108642578125e-05, -1.3232143828645349e-05, -7.867813110351562e-06, -7.271765298355604e-06, -1.9073486328125e-06, -0.0006159543991088867, 0.0, -0.0020275115966796875, 0.0, -0.00021564960479736328, -9.5367431640625e-06, -0.0003948211669921875, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.28466033935546875, -6.723403930664062e-05, -2.3633346557617188, -5.7220458984375e-05, -2.872943878173828e-05, -1.3589859008789062e-05, -5.14984130859375e-05, -0.0003833770751953125, -3.814697265625e-06, -3.4332275390625e-05, -3.814697265625e-06, -2.6702880859375e-05, -0.2911205291748047, -7.62939453125e-06, -0.0001049041748046875, -0.042942047119140625, -0.0073299407958984375, -0.0014780344208702445, 0.0, -0.0010430837282910943, -1.9073486328125e-06, -0.24201631546020508, -1.1444091796875e-05, -0.006064414978027344, -0.000446319580078125, -8.7738037109375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kor'kron", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.1753295665303085, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "_type": "Template15", "hole1": 4, "hole2": "WARRIOR"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Kor'kronElite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -0.4074207842350006, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -0.042227745056152344, -5.7220458984375e-05, -5.721882189391181e-05, -2.4914739697123878e-05, -5.125998541188892e-06, -1.9073486328125e-06, -0.00032901758095249534, 0.0, -0.000457763671875, -7.62939453125e-06, -0.0008754730224609375, -0.0002040863037109375, -1.1086437552876305e-05, -1.9073486328125e-06, -0.00039862882113084197, 0.0, -6.72218132019043, -5.352497100830078e-05, -0.0003490447998046875, -5.14984130859375e-05, -7.104873657226562e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Kor'kron", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.394156477544129, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, True, MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Kor'kron Elite"}, {"_type": "Num", "n": 4}, {"_type": "Attribute", "attr": "WARRIOR", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "TOTEM", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Elite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -1.0947715044021606, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -4.826398849487305, -5.7220458984375e-06, -8.487701416015625e-05, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -9.5367431640625e-06, -7.82012939453125e-05, 0.0, -6.103515625e-05, -0.008398056030273438, -7.05718994140625e-05, -1.33514404296875e-05, -0.7079143524169922, -4.57763671875e-05, 0.0, -7.05718994140625e-05, 0.0, -0.00013529389980249107, 0.0, -4.38690185546875e-05, -5.7220458984375e-06, -0.25112056732177734, -1.33514404296875e-05, -4.76837158203125e-05, -0.0001867835089797154, -0.00035130977630615234, -9.750862955115736e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0026647585909813643, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.52587890625e-05, 0.0, -8.20159912109375e-05, 0.0, -0.004924774169921875, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -7.62939453125e-06, -3.814697265625e-06, -0.000102996826171875, -1.9073486328125e-06, -0.00099945068359375, -3.4332275390625e-05, -0.000926971435546875, -1.52587890625e-05, -2.86102294921875e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -9.5367431640625e-06, 0.0, -0.013132095336914062, -2.0265579223632812e-06, -0.46955013275146484, -2.5153141905320808e-05, -0.0035343170166015625, -0.000102996826171875, -8.702254490344785e-06, -1.9073486328125e-06, -0.00034010352101176977, 0.0, -0.006691932678222656, -1.71661376953125e-05, -0.0002288818359375, -6.4849853515625e-05, -4.589557647705078e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Kor'kron", " ", "Elite", "<EOS>", 47, 165, "4", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.505906820825658, "inferred_code": "class Kor'kronElite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, spell_targetable=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "_type": "Template15", "hole1": 4, "hole2": "WARRIOR"}, {"hole0": 4, "_type": "Template23", "hole1": 3, "hole2": "spell_targetable", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Kor'kronElite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -0.4074207842350006, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -0.042227745056152344, -5.7220458984375e-05, -5.721882189391181e-05, -2.4914739697123878e-05, -5.125998541188892e-06, -1.9073486328125e-06, -0.00032901758095249534, 0.0, -0.000457763671875, -7.62939453125e-06, -0.0008754730224609375, -0.0002040863037109375, -1.1086437552876305e-05, -1.9073486328125e-06, -0.00039862882113084197, 0.0, -7.015924453735352, -1.9073486328125e-06, -0.010326385498046875, -0.000179290771484375, -0.026849746704101562, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Kor'kron", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", 109, 200, "4", "<EOS>", "3", "<EOS>", "spell_targetable", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.809533893956086, "inferred_code": "class <UNK>Elite(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 3, charge=True)\n", "model_output": {"body": [{"body": [{"hole0": "Kor'kron Elite", "hole2": "WARRIOR", "_type": "Template11", "hole1": 4, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "p"}], "_type": "arguments"}, "body": [{"hole0": 4, "_type": "Template65", "hole1": 3, "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "<UNK>Elite"}], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.000110626220703125, -7.05718994140625e-05, -1.0947715044021606, -0.00020215852418914437, -1.4185829968482722e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, 0.0, -7.62939453125e-06, -5.841255187988281e-06, -6.866455078125e-05, -3.4694862365722656, -8.0108642578125e-05, -1.3232143828645349e-05, -7.867813110351562e-06, -7.271765298355604e-06, -1.9073486328125e-06, -0.0006159543991088867, 0.0, -0.0020275115966796875, 0.0, -0.00021564960479736328, -9.5367431640625e-06, -0.0003948211669921875, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.28466033935546875, -6.723403930664062e-05, -2.3633346557617188, -5.7220458984375e-05, -2.872943878173828e-05, -1.3589859008789062e-05, -5.14984130859375e-05, -0.0003833770751953125, -3.814697265625e-06, -3.4332275390625e-05, -3.814697265625e-06, -2.6702880859375e-05, -0.2911205291748047, -7.62939453125e-06, -0.0001049041748046875, -0.042942047119140625, -0.0073299407958984375, -0.0014780344208702445, 0.0, -0.0010430837282910943, -1.9073486328125e-06, -0.24201631546020508, -1.1444091796875e-05, -0.006064414978027344, -0.000446319580078125, -8.7738037109375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Elite", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Kor'kron", " ", "Elite", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "p", "<EOS>", 295, 120, 247, "4", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -23.169532775878906, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -23.16950035095215], "choice_history": [80, 159, 294]}]}
{"index": 61, "beams": [{"score": -0.35170101859603164, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -0.15266990661621094, -2.288818359375e-05, -0.0003719329833984375, -0.0002787916746456176, -0.000392913818359375, -7.62939453125e-06, -2.86102294921875e-05, -0.0008400733349844813, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -2.86102294921875e-05, 0.0, -1.728534698486328e-05, -2.741813204920618e-06, -0.0005060434341430664, -7.62939453125e-06, -2.288818359375e-05, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -2.944469451904297e-05, -2.0265579223632812e-06, -0.015857696533203125, -6.103515625e-05, -0.000244140625, -0.0010356903076171875, -0.00035333630512468517, 0.0, -0.0004444122314453125, -0.0002079010009765625, -9.72747802734375e-05, -1.8477434423402883e-05, -2.47955322265625e-05, -0.0007343292236328125, -2.47955322265625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0045261383056640625, -5.7220458984375e-06, -0.00124359130859375, -0.001670241355895996, -0.008492469787597656, -0.0005588531494140625, -0.00012957259605173022, 0.0, -0.00025412123068235815, 0.0, -0.002566099166870117, 0.0, -3.0517578125e-05, -5.340576171875e-05, -0.0004444122314453125, -9.918212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.00013387203216552734, -1.52587890625e-05, -4.57763671875e-05, -0.001117706298828125, -0.0005550384521484375, -0.0004997178912162781, -0.0002422332763671875, -0.14688873291015625, -6.866455078125e-05, -0.0031778421252965927, -5.91278076171875e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -2.318716562548616, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -0.15266990661621094, -2.288818359375e-05, -0.0003719329833984375, -0.0002787916746456176, -0.000392913818359375, -7.62939453125e-06, -2.86102294921875e-05, -0.0008400733349844813, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -2.86102294921875e-05, 0.0, -1.728534698486328e-05, -2.741813204920618e-06, -0.0005060434341430664, -7.62939453125e-06, -2.288818359375e-05, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -2.944469451904297e-05, -2.0265579223632812e-06, -0.015857696533203125, -6.103515625e-05, -0.000244140625, -0.0010356903076171875, -0.00035333630512468517, 0.0, -0.0004444122314453125, -0.0002079010009765625, -9.72747802734375e-05, -1.8477434423402883e-05, -2.47955322265625e-05, -0.0007343292236328125, -2.47955322265625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0045261383056640625, -5.7220458984375e-06, -0.00124359130859375, -0.001670241355895996, -0.008492469787597656, -0.0005588531494140625, -0.00012957259605173022, 0.0, -0.00025412123068235815, 0.0, -0.002566099166870117, 0.0, -3.0517578125e-05, -5.340576171875e-05, -0.0004444122314453125, -9.918212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.00013387203216552734, -1.52587890625e-05, -4.57763671875e-05, -0.001117706298828125, -0.0005550384521484375, -0.0004997178912162781, -0.0002422332763671875, -1.9943208694458008, -0.0011386871337890625, -4.9591064453125e-05, 0.0, -0.0003452301025390625, -0.005504608154296875, 0.0, -0.0081024169921875, -0.09346485137939453, -0.000118255615234375, -0.0008544921875, -1.9073486328125e-06, -0.0010318756103515625, -0.0009614229202270508, -9.5367431640625e-06, -0.0001811981201171875, -3.0517578125e-05, -0.00156402587890625, -0.000156402587890625, 0.0, -0.008458137512207031, -3.933906555175781e-06, -0.0009003877639770508, -1.3470649719238281e-05], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"]}, {"score": -2.6354666118975274, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -2.378795623779297, -4.57763671875e-05, -0.0001583099365234375, -7.414542778860778e-05, -0.0005340576171875, 0.0, -5.7220458984375e-06, -0.0001571092288941145, -2.491474151611328e-05, -5.7220458984375e-06, 0.0, -8.0108642578125e-05, 0.0, -3.0875205993652344e-05, -1.1920922133867862e-06, -0.0004030466079711914, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -2.47955322265625e-05, -1.71661376953125e-05, -8.58306884765625e-06, 0.0, -0.03378868103027344, -2.86102294921875e-05, -0.024362564086914062, -0.00092315673828125, -0.000293731689453125, -1.990795135498047e-05, -4.9591064453125e-05, -0.0004673004150390625, -0.000118255615234375, -9.5367431640625e-06, -1.9073486328125e-06, -0.001026153564453125, -3.814697265625e-06, -0.000789642333984375, -0.007278084754943848, -0.00734710693359375, -0.0017681121826171875, -0.00010025016672443599, 0.0, -0.00018487643683329225, 0.0, -0.0019937753677368164, 0.0, -4.1961669921875e-05, -3.814697265625e-05, -0.000476837158203125, -9.5367431640625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.00013196468353271484, -1.52587890625e-05, -4.76837158203125e-05, -0.00109100341796875, -0.0006046295166015625, -0.0005125923198647797, -0.000232696533203125, -0.16318225860595703, -6.866455078125e-05, -0.003550250083208084, -6.67572021484375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -3.472821871536752, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -3.207508087158203, -0.0013980865478515625, -9.72747802734375e-05, -0.001420085085555911, -0.0001735687255859375, -2.86102294921875e-05, -3.814697265625e-06, -0.0151284234598279, -2.09808349609375e-05, -7.62939453125e-06, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -2.86102294921875e-05, -2.3841855067985307e-07, -0.0010720491409301758, -1.71661376953125e-05, -1.33514404296875e-05, 0.0, -1.33514404296875e-05, -0.0007343292236328125, -1.7404556274414062e-05, 0.0, -0.020914077758789062, -5.91278076171875e-05, -0.002536773681640625, -0.0030727386474609375, -0.00033295154571533203, 0.0, -2.288818359375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.020343899726867676, 0.0, -0.0041561126708984375, -1.71661376953125e-05, -0.000118255615234375, -0.0002956390380859375, -0.0003414154052734375, -5.1856040954589844e-05, -7.62939453125e-06, -0.0024900436401367188, -5.53131103515625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0061473846435546875, -3.814697265625e-06, -0.000728607177734375, -0.004975080490112305, -0.006806373596191406, -0.0015201568603515625, -9.953497647074983e-05, 0.0, -0.0002009663003263995, 0.0, -0.0018928050994873047, 0.0, -3.0517578125e-05, -4.1961669921875e-05, -0.00043487548828125, -9.918212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.00013196468353271484, -1.52587890625e-05, -4.57763671875e-05, -0.0010833740234375, -0.0005893707275390625, -0.0005168833304196596, -0.0002460479736328125, -0.15688133239746094, -6.866455078125e-05, -0.00329645536839962, -6.67572021484375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -4.491478758817493, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"args": [{"args": [{"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Name", "id": "IsType"}}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -2.378795623779297, -4.57763671875e-05, -0.0001583099365234375, -7.414542778860778e-05, -0.0005340576171875, 0.0, -5.7220458984375e-06, -0.0001571092288941145, -2.491474151611328e-05, -5.7220458984375e-06, 0.0, -8.0108642578125e-05, 0.0, -3.0875205993652344e-05, -1.1920922133867862e-06, -0.0004030466079711914, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -2.47955322265625e-05, -1.71661376953125e-05, -8.58306884765625e-06, 0.0, -0.03378868103027344, -2.86102294921875e-05, -0.024362564086914062, -0.00092315673828125, -0.000293731689453125, -1.990795135498047e-05, -4.9591064453125e-05, -0.0004673004150390625, -0.000118255615234375, -9.5367431640625e-06, -1.9073486328125e-06, -0.001026153564453125, -3.814697265625e-06, -0.000789642333984375, -0.007278084754943848, -0.00734710693359375, -0.0017681121826171875, -0.00010025016672443599, 0.0, -0.00018487643683329225, 0.0, -0.0019937753677368164, 0.0, -4.1961669921875e-05, -3.814697265625e-05, -0.000476837158203125, -9.5367431640625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.00013196468353271484, -1.52587890625e-05, -4.76837158203125e-05, -0.00109100341796875, -0.0006046295166015625, -0.0005125923198647797, -0.000232696533203125, -1.896775245666504, -0.001262664794921875, -5.14984130859375e-05, 0.0, -0.0003223419189453125, -0.0047626495361328125, 0.0, -0.0071563720703125, -0.09787940979003906, -0.0001220703125, -0.0008487701416015625, -1.9073486328125e-06, -0.0009479522705078125, -0.0009099245071411133, -9.5367431640625e-06, -0.0001659393310546875, -3.0517578125e-05, -0.0016803741455078125, -0.000156402587890625, 0.0, -0.008890151977539062, -3.933906555175781e-06, -0.0008889436721801758, -1.3470649719238281e-05], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 40, 136, 19, 160, "Minion", "Selector", "<EOS>", 282, 40, 136, 19, 160, "Is", "Type", "<EOS>", 282, 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"]}, {"score": -5.30963453147433, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -0.15266990661621094, -2.288818359375e-05, -0.0003719329833984375, -0.0002787916746456176, -0.000392913818359375, -7.62939453125e-06, -2.86102294921875e-05, -0.0008400733349844813, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -2.86102294921875e-05, 0.0, -1.728534698486328e-05, -2.741813204920618e-06, -0.0005060434341430664, -7.62939453125e-06, -2.288818359375e-05, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -2.944469451904297e-05, -2.0265579223632812e-06, -0.015857696533203125, -6.103515625e-05, -0.000244140625, -0.0010356903076171875, -0.00035333630512468517, 0.0, -0.0004444122314453125, -0.0002079010009765625, -9.72747802734375e-05, -1.8477434423402883e-05, -2.47955322265625e-05, -0.0007343292236328125, -2.47955322265625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0045261383056640625, -5.7220458984375e-06, -0.00124359130859375, -0.001670241355895996, -5.122908592224121, -0.0004138946533203125, -3.433180972933769e-05, -1.9073486328125e-06, -9.298322765971534e-06, -1.1444091796875e-05], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -5.32367860220711, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            FREE, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -0.15266990661621094, -2.288818359375e-05, -0.0003719329833984375, -0.0002787916746456176, -0.000392913818359375, -7.62939453125e-06, -2.86102294921875e-05, -0.0008400733349844813, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -2.86102294921875e-05, 0.0, -1.728534698486328e-05, -2.741813204920618e-06, -0.0005060434341430664, -7.62939453125e-06, -2.288818359375e-05, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -2.944469451904297e-05, -2.0265579223632812e-06, -4.985604286193848, -2.47955322265625e-05, -0.00311279296875, -0.000247955322265625, -0.00034415721893310547, 0.0, -7.43865966796875e-05, -0.0002613067626953125, -4.38690185546875e-05, -2.6702873583417386e-05, -2.6702880859375e-05, -0.000843048095703125, -2.86102294921875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.0048084259033203125, -5.7220458984375e-06, -0.0013790130615234375, -0.0015604496002197266, -0.012869834899902344, -0.0005645751953125, -0.0001743886386975646, 0.0, -0.0002606760535854846, 0.0, -0.003300309181213379, 0.0, -3.24249267578125e-05, -5.340576171875e-05, -0.00048065185546875, -0.000102996826171875, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.00013577938079833984, -1.52587890625e-05, -4.38690185546875e-05, -0.0011272430419921875, -0.000545501708984375, -0.0004905389505438507, -0.000240325927734375, -0.141876220703125, -6.866455078125e-05, -0.0031238405499607325, -5.7220458984375e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -5.660134663062308, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            BEAST, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -0.15266990661621094, -2.288818359375e-05, -0.0003719329833984375, -0.0002787916746456176, -0.000392913818359375, -7.62939453125e-06, -2.86102294921875e-05, -0.0008400733349844813, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -2.86102294921875e-05, 0.0, -1.728534698486328e-05, -2.741813204920618e-06, -0.0005060434341430664, -7.62939453125e-06, -2.288818359375e-05, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -2.944469451904297e-05, -2.0265579223632812e-06, -4.9916839599609375, -3.24249267578125e-05, -0.33394622802734375, -0.0004749298095703125, -0.00034868717193603516, 0.0, -0.0004444122314453125, -0.00017547607421875, -4.38690185546875e-05, -2.2172915123519488e-05, -3.24249267578125e-05, -0.00087738037109375, -2.09808349609375e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0064849853515625, -5.7220458984375e-06, -0.0011730194091796875, -0.0016176700592041016, -0.013216018676757812, -0.000621795654296875, -0.0001861882774392143, 0.0, -0.0002505459124222398, 0.0, -0.003647446632385254, 0.0, -3.4332275390625e-05, -5.340576171875e-05, -0.0004978179931640625, -0.0001049041748046875, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.00013577938079833984, -1.52587890625e-05, -4.38690185546875e-05, -0.001129150390625, -0.0005397796630859375, -0.000485889904666692, -0.0002346038818359375, -0.1385354995727539, -7.05718994140625e-05, -0.0031714048236608505, -5.53131103515625e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "BEAST", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -6.1572944034696775, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=hearthbreaker.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "hearthbreaker"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -0.15266990661621094, -2.288818359375e-05, -0.0003719329833984375, -0.0002787916746456176, -0.000392913818359375, -7.62939453125e-06, -2.86102294921875e-05, -0.0008400733349844813, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -2.86102294921875e-05, 0.0, -1.728534698486328e-05, -2.741813204920618e-06, -0.0005060434341430664, -7.62939453125e-06, -2.288818359375e-05, 0.0, -1.1444091796875e-05, -4.76837158203125e-05, -2.944469451904297e-05, -2.0265579223632812e-06, -0.015857696533203125, -6.103515625e-05, -0.000244140625, -0.0010356903076171875, -0.00035333630512468517, 0.0, -0.0004444122314453125, -0.0002079010009765625, -9.72747802734375e-05, -1.8477434423402883e-05, -2.47955322265625e-05, -0.0007343292236328125, -2.47955322265625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -5.793526649475098, -3.62396240234375e-05, -0.008861541748046875, -0.0007421970367431641, -0.009550094604492188, -0.000751495361328125, -8.952232747105882e-05, 0.0, -0.00016139607760123909, 0.0, -0.003006458282470703, 0.0, -3.4332275390625e-05, -5.53131103515625e-05, -0.00043487548828125, -9.72747802734375e-05, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.00013387203216552734, -1.52587890625e-05, -4.76837158203125e-05, -0.0011196136474609375, -0.00054168701171875, -0.0004882737994194031, -0.0002307891845703125, -0.15488052368164062, -6.67572021484375e-05, -0.0035426123067736626, -5.53131103515625e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "hearthbreaker", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -6.24156729085621, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Leokk"}, {"_type": "Num", "n": 3}, {"_type": "Attribute", "attr": "HUNTER", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -0.0027551651000976562, -1.9073486328125e-06, -0.0001652240753173828, -1.1444091796875e-05, -1.52587890625e-05, -2.288818359375e-05, -5.7220458984375e-06, -5.53131103515625e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -7.2479248046875e-05, -9.34600830078125e-05, -8.7738037109375e-05, -0.0001583099365234375, -1.33514404296875e-05, -0.000446319580078125, -1.9073486328125e-06, -6.675708846159978e-06, 0.0, -2.6702880859375e-05, 0.0, -2.378795623779297, -4.57763671875e-05, -0.0001583099365234375, -7.414542778860778e-05, -0.0005340576171875, 0.0, -5.7220458984375e-06, -0.0001571092288941145, -2.491474151611328e-05, -5.7220458984375e-06, 0.0, -8.0108642578125e-05, 0.0, -3.0875205993652344e-05, -1.1920922133867862e-06, -0.0004030466079711914, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -2.47955322265625e-05, -1.71661376953125e-05, -8.58306884765625e-06, 0.0, -3.666192054748535, -2.288818359375e-05, -9.72747802734375e-05, -0.0008144378662109375, -0.0002593994140625, -2.0861623852397315e-05, -8.20159912109375e-05, -0.0003986358642578125, -0.000125885009765625, -1.33514404296875e-05, -1.9073486328125e-06, -0.0010700225830078125, -5.7220458984375e-06, -0.0007228851318359375, -0.005454659461975098, -0.0067844390869140625, -0.001220703125, -9.500546002527699e-05, 0.0, -0.0001753415126586333, 0.0, -0.0018678903579711914, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0004901885986328125, -9.1552734375e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.00013196468353271484, -1.52587890625e-05, -4.9591064453125e-05, -0.001102447509765625, -0.0006084442138671875, -0.0005103274015709758, -0.0002307891845703125, -0.16431236267089844, -6.866455078125e-05, -0.0036260653287172318, -6.67572021484375e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Leokk", "<EOS>", 47, 165, "3", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -6.85873247313998, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"hole0": "Leokk", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -6.44394588470459, -0.0003337860107421875, -2.622600959512056e-06, -0.24856281280517578, -0.025604844093322754, -3.814697265625e-06, -1.5735626220703125e-05, -1.9073486328125e-05, -0.000118255615234375, 0.0, -0.00070953369140625, -1.1444091796875e-05, -0.00214385986328125, -3.814697265625e-06, -0.10333442687988281, -0.0008869171142578125, -0.00037080090260133147, 0.0, -0.00013469737314153463, 0.0, -0.0036307573318481445, 0.0, -4.57763671875e-05, -4.00543212890625e-05, -0.0007076263427734375, -0.000408172607421875, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -0.00013577938079833984, -1.52587890625e-05, -5.7220458984375e-05, -0.003276824951171875, -0.000812530517578125, -0.00043725306750275195, -0.000133514404296875, -0.017154693603515625, -6.4849853515625e-05, -0.005144206341356039, -4.9591064453125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Leokk", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -8.343683935341915, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk Leokk', 1, CHARACTER_CLASS.ALL, CARD_RARITY\n            .COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\n", "model_output": {"body": [{"body": [{"hole0": "Leokk Leokk", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template23", "hole1": 4, "hole2": "auras", "hole3": {"_type": "List", "elts": [{"args": [{"hole0": 1, "_type": "Template73"}, {"hole0": "MinionSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "Aura"}}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -6.44394588470459, -0.0003337860107421875, -2.622600959512056e-06, -1.7651662826538086, -0.0021179616451263428, -0.001811981201171875, -0.00026869773864746094, -3.814697265625e-06, -2.241134461655747e-05, -1.33514404296875e-05, -0.0001354217529296875, 0.0, -0.00136566162109375, -9.5367431640625e-06, -0.001956939697265625, -3.814697265625e-06, -0.09250926971435547, -0.0007572174072265625, -0.0003777105885092169, 0.0, -0.00013588930596597493, 0.0, -0.003525853157043457, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.00078582763671875, -0.0004215240478515625, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -0.00013577938079833984, -1.52587890625e-05, -5.7220458984375e-05, -0.0032377243041992188, -0.0007991790771484375, -0.00043892202666029334, -0.00014495849609375, -0.017473220825195312, -6.103515625e-05, -0.005099622532725334, -4.9591064453125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Leokk", " ", "Leokk", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "2", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Aura", "<EOS>", 283, 64, 255, "1", "<EOS>", 68, 260, "Minion", "Selector", "<EOS>"]}, {"score": -9.063270669312487, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Leokk", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "BEAST", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -6.44394588470459, -0.0003337860107421875, -2.622600959512056e-06, -0.24856281280517578, -0.025604844093322754, -3.814697265625e-06, -1.5735626220703125e-05, -1.9073486328125e-05, -0.000118255615234375, 0.0, -0.00070953369140625, -1.1444091796875e-05, -0.00214385986328125, -3.814697265625e-06, -2.3411521911621094, -3.4332275390625e-05, -0.00019250520563218743, -1.9073486328125e-06, -2.3007385607343167e-05, -7.62939453125e-06], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Leokk", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -10.258950188801464, "inferred_code": "class Leokk(MinionCard):\n\n    def __init__(self):\n        super().__init__('Leokk Leokk', 0, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Leokk Leokk", "_type": "Template13", "hole1": "COMMON", "hole2": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 4}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Leokk"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -1.4662635294371285e-05, -6.735241913702339e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.9604644775390625e-06, -8.58306884765625e-05, -0.0001049041748046875, -2.47955322265625e-05, -8.979586601257324, -0.04618549346923828, -0.002203715266659856, -0.0033098459243774414, -0.0027753114700317383, -0.0058765411376953125, -0.39477992057800293, -4.00543212890625e-05, -0.6641331911087036, -0.00018310546875, -0.15531444549560547, -0.0026721954345703125, -0.0014374891761690378, 0.0, -6.675678741885349e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Leokk", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Leokk", " ", "Leokk", "<EOS>", "COMMON", "<EOS>", "COMMON", "<EOS>", 110, 202, "2", "<EOS>", "4", "<EOS>"]}, {"score": -23.470458984375, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -2.86102294921875e-05, -23.470428466796875], "choice_history": [80, 159, 294]}]}
{"index": 62, "beams": [{"score": -0.5906999594371811, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, True)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "<UNK> Justice"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -0.46259403228759766, -2.09808349609375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.52587890625e-05, -5.53131103515625e-05, -0.02158355712890625, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -0.000110626220703125, 0.0, -0.06847858428955078, -1.9073486328125e-06, -2.6702880859375e-05, -0.006878063548356295, -9.34600830078125e-05, -0.00026449092547409236, -0.0018749237060546875, -3.814697265625e-06, -5.7220458984375e-06, -0.00014958836254663765, -7.62939453125e-06, -0.0001010894775390625, 0.0, -1.52587890625e-05, 0.0, -4.780292510986328e-05, -1.1920928244535389e-07, -0.0004367828369140625, 0.0, 0.0, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -3.24249267578125e-05, 0.0, -0.0067806243896484375, -3.814697265625e-06, -0.00045013427734375, -6.103515625e-05, -0.000263214111328125, 0.0, -0.006911277770996094, -1.9073486328125e-05, -0.0006103515625, -9.5367431640625e-06, -1.33514404296875e-05, -0.0001354217529296875, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00019741058349609375, 0.0, -0.0005474090576171875, -0.001300811767578125, -4.38690185546875e-05, -3.24249267578125e-05, -0.0001659393310546875, -6.4849853515625e-05, 0.0, -0.0019812583923339844, -2.09808349609375e-05, -5.340576171875e-05, -0.0001316070556640625, 0.0, -0.002648935653269291, 0.0, -4.00543212890625e-05, -1.71661376953125e-05, -8.592876838520169e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "<UNK>", " ", "Justice", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -1.047310963509517, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Justice", "_type": "Template17", "hole1": 1, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -1.0203876495361328, -0.00045013427734375, -0.0003482098691165447, -1.9073486328125e-05, -9.059880540007725e-06, -1.52587890625e-05, -0.00017595147073734552, -1.9073486328125e-06, -0.0009336471557617188, 0.0, -0.002376556396484375, -1.9073486328125e-06, -0.00016021728515625, -5.7220458984375e-06, -1.52587890625e-05, -0.000232696533203125, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -6.866455078125e-05, -0.00229644775390625, -6.103515625e-05, -7.2479248046875e-05, -0.011762619018554688, -0.0001068115234375, 0.0, -0.001073002815246582, -0.000152587890625, -0.0001010894775390625, -8.58306884765625e-05, 0.0, -0.0012453075032681227, 0.0, -2.09808349609375e-05, -1.1444091796875e-05, -2.5030931283254176e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 103, 186, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -3.677618430643605, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, True, MINION_TYPE.BEAST)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "<UNK> Justice"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -0.46259403228759766, -2.09808349609375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.52587890625e-05, -5.53131103515625e-05, -0.02158355712890625, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -0.000110626220703125, 0.0, -2.8040771484375, -5.7220458984375e-06, -1.9073486328125e-05, -0.0025423080660402775, -7.82012939453125e-05, -0.00043585419189184904, -0.0036373138427734375, -3.814697265625e-06, -5.7220458984375e-06, -0.0002475767396390438, -9.5367431640625e-06, -0.0002384185791015625, -1.1444091796875e-05, -2.86102294921875e-05, 0.0, -8.404254913330078e-05, -2.3841855067985307e-07, -0.0004062652587890625, 0.0, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-05, 0.0, -0.0019893646240234375, -5.7220458984375e-06, -0.0070285797119140625, -7.2479248046875e-05, -0.0003795623779296875, 0.0, -2.09808349609375e-05, 0.0, -0.0003223419189453125, -5.7220458984375e-06, -0.002811431884765625, -1.9073486328125e-06, -0.35448360443115234, -1.9073486328125e-06, -0.000370025634765625, 0.0, -0.0008258819580078125, -8.7738037109375e-05, -1.9073486328125e-06, -9.72747802734375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.000255584716796875, 0.0, -0.000522613525390625, -0.0010890960693359375, -3.814697265625e-05, -3.4332275390625e-05, -0.000255584716796875, -5.91278076171875e-05, 0.0, -0.0016771554946899414, -1.52587890625e-05, -5.7220458984375e-05, -0.0001316070556640625, 0.0, -0.003256840631365776, 0.0, -3.24249267578125e-05, -1.71661376953125e-05, -8.389912545681e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "<UNK>", " ", "Justice", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -5.685584611208462, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, True)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "<UNK> Justice"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -0.46259403228759766, -2.09808349609375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.52587890625e-05, -5.53131103515625e-05, -0.02158355712890625, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -0.000110626220703125, 0.0, -0.06847858428955078, -1.9073486328125e-06, -2.6702880859375e-05, -0.006878063548356295, -9.34600830078125e-05, -0.00026449092547409236, -0.0018749237060546875, -3.814697265625e-06, -5.7220458984375e-06, -0.00014958836254663765, -7.62939453125e-06, -0.0001010894775390625, 0.0, -1.52587890625e-05, 0.0, -4.780292510986328e-05, -1.1920928244535389e-07, -0.0004367828369140625, 0.0, 0.0, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -3.24249267578125e-05, 0.0, -5.105539321899414, 0.0, -2.47955322265625e-05, -0.0002040863037109375, -0.0001430511474609375, 0.0, -0.0030183792114257812, -2.47955322265625e-05, -0.0008983612060546875, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001354217529296875, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00018978118896484375, 0.0, -0.0006999969482421875, -0.0013427734375, -4.38690185546875e-05, -3.4332275390625e-05, -0.00017547607421875, -6.4849853515625e-05, 0.0, -0.0019106864929199219, -1.9073486328125e-05, -5.340576171875e-05, -0.0001354217529296875, 0.0, -0.0026381060015410185, 0.0, -4.00543212890625e-05, -1.71661376953125e-05, -8.890836033970118e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "<UNK>", " ", "Justice", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -5.704039835967677, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "<UNK> Justice"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -0.46259403228759766, -2.09808349609375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.52587890625e-05, -5.53131103515625e-05, -3.85214900970459, -2.47955322265625e-05, 0.0, -4.76837158203125e-05, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.1716022491455078, 0.0, -3.814697265625e-06, -0.006346947979182005, -7.43865966796875e-05, -0.0001987025170819834, -0.008731842041015625, -1.9073486328125e-06, -1.9073486328125e-06, -0.00016081325884442776, -3.814697265625e-06, -0.00080108642578125, -0.0001506805419921875, -2.09808349609375e-05, 0.0, -4.780292510986328e-05, -2.3841855067985307e-07, -0.0003414154052734375, 0.0, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -0.0002288818359375, -0.0001316070556640625, 0.0, -0.001392364501953125, 0.0, -4.76837158203125e-05, -0.0003986358642578125, -0.000396728515625, -0.7502193450927734, 0.0, -0.0005645751953125, -0.0001201629638671875, -0.024715423583984375, -1.9073486328125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -0.0002841949462890625, -1.33514404296875e-05, -0.0001087188720703125, 0.0, -0.14292919635772705, -2.47955322265625e-05, -0.018251419067382812, -1.9073486328125e-06, -0.24963665008544922, -3.62396240234375e-05, -1.9073486328125e-06, -0.0003662109375, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -9.1552734375e-05, 0.0, -0.0006084442138671875, -0.0008602142333984375, -5.53131103515625e-05, -4.38690185546875e-05, -0.000232696533203125, -5.53131103515625e-05, 0.0, -0.001280665397644043, -1.33514404296875e-05, -5.7220458984375e-05, -7.2479248046875e-05, -1.9073486328125e-06, -0.002030561212450266, 0.0, -1.9073486328125e-05, -1.9073486328125e-05, -4.541286762105301e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "<UNK>", " ", "Justice", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -5.865223606415356, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, True, MINION_TYPE.__init__)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "<UNK> Justice"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"_type": "Attribute", "attr": "__init__", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -0.46259403228759766, -2.09808349609375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.52587890625e-05, -5.53131103515625e-05, -0.02158355712890625, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -0.000110626220703125, 0.0, -2.8040771484375, -5.7220458984375e-06, -1.9073486328125e-05, -0.0025423080660402775, -7.82012939453125e-05, -0.00043585419189184904, -0.0036373138427734375, -3.814697265625e-06, -5.7220458984375e-06, -0.0002475767396390438, -9.5367431640625e-06, -0.0002384185791015625, -1.1444091796875e-05, -2.86102294921875e-05, 0.0, -8.404254913330078e-05, -2.3841855067985307e-07, -0.0004062652587890625, 0.0, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-05, -5.7220458984375e-05, 0.0, -0.0019893646240234375, -5.7220458984375e-06, -0.0070285797119140625, -7.2479248046875e-05, -0.0003795623779296875, 0.0, -2.09808349609375e-05, 0.0, -0.0003223419189453125, -5.7220458984375e-06, -0.002811431884765625, -1.9073486328125e-06, -2.539229393005371, 0.0, -0.002239227294921875, -1.9073486328125e-06, -0.0019817352294921875, -7.43865966796875e-05, -1.9073486328125e-06, -0.0001087188720703125, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.000263214111328125, 0.0, -0.000579833984375, -0.0009746551513671875, -4.00543212890625e-05, -3.24249267578125e-05, -0.000293731689453125, -6.103515625e-05, 0.0, -0.0015693902969360352, -1.71661376953125e-05, -5.91278076171875e-05, -0.0001220703125, 0.0, -0.003215625649318099, 0.0, -3.24249267578125e-05, -1.71661376953125e-05, -8.437770884484053e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 287, 48, 169, "<UNK>", " ", "Justice", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 37, 129, 19, 160, "MINION_TYPE", "<EOS>", "__init__", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -5.911610536784792, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Justice", "_type": "Template15", "hole1": 1, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -5.834836006164551, -8.392333984375e-05, -0.0009743722039274871, -3.0517578125e-05, -1.1444075425970368e-05, -0.0006961822509765625, -2.5153087335638702e-05, -1.9073486328125e-06, -0.0003167390823364258, -1.9073486328125e-06, -0.000286102294921875, 0.0, -0.0003528594970703125, -1.33514404296875e-05, -5.7220458984375e-06, -0.0001373291015625, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -5.7220458984375e-05, -0.0027256011962890625, -4.9591064453125e-05, -5.7220458984375e-05, -0.06252288818359375, -0.0001621246337890625, -1.9073486328125e-06, -0.0012657642364501953, -0.000125885009765625, -8.7738037109375e-05, -7.43865966796875e-05, 0.0, -0.0015437667025253177, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -1.7045771528501064e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 101, 184, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -5.954747562594974, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "<UNK> Justice"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -0.46259403228759766, -2.09808349609375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.52587890625e-05, -5.53131103515625e-05, -3.85214900970459, -2.47955322265625e-05, 0.0, -4.76837158203125e-05, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.1716022491455078, 0.0, -3.814697265625e-06, -0.006346947979182005, -7.43865966796875e-05, -0.0001987025170819834, -0.008731842041015625, -1.9073486328125e-06, -1.9073486328125e-06, -0.00016081325884442776, -3.814697265625e-06, -0.00080108642578125, -0.0001506805419921875, -2.09808349609375e-05, 0.0, -4.780292510986328e-05, -2.3841855067985307e-07, -0.0003414154052734375, 0.0, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -0.0002288818359375, -0.0001316070556640625, 0.0, -0.001392364501953125, 0.0, -4.76837158203125e-05, -0.0003986358642578125, -0.000396728515625, -1.2955541610717773, -5.7220458984375e-06, -0.00152587890625, 0.0, -9.5367431640625e-06, 0.0, -0.0015964508056640625, -1.9073486328125e-05, -0.13750648498535156, -1.9073486328125e-05, -0.0003910064697265625, -1.9073486328125e-06, -0.0004711151123046875, -9.1552734375e-05, -3.814697265625e-06, -0.0001010894775390625, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0001468658447265625, 0.0, -0.00049591064453125, -0.00087738037109375, -5.7220458984375e-05, -4.00543212890625e-05, -0.0001678466796875, -5.340576171875e-05, 0.0, -0.0012018680572509766, -1.33514404296875e-05, -5.7220458984375e-05, -0.0001316070556640625, 0.0, -0.0028671640902757645, 0.0, -2.47955322265625e-05, -1.52587890625e-05, -6.793241482228041e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "<UNK>", " ", "Justice", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -5.970207154452481, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Light Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, True)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Light Justice"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -0.46259403228759766, -2.09808349609375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.52587890625e-05, -5.53131103515625e-05, -0.02158355712890625, -7.62939453125e-06, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -0.000110626220703125, 0.0, -0.06847858428955078, -1.9073486328125e-06, -2.6702880859375e-05, -5.374377250671387, -0.000461578369140625, -0.007827339693903923, -0.0053157806396484375, -1.9073486328125e-06, -3.814697265625e-06, -0.0001208750472869724, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -1.33514404296875e-05, 0.0, -5.173683166503906e-05, -2.3841855067985307e-07, -0.0004634857177734375, 0.0, 0.0, 0.0, -1.33514404296875e-05, -1.33514404296875e-05, -3.0517578125e-05, 0.0, -0.00710296630859375, -3.814697265625e-06, -0.0005130767822265625, -6.103515625e-05, -0.0002689361572265625, 0.0, -0.0071125030517578125, -1.9073486328125e-05, -0.00061798095703125, -9.5367431640625e-06, -1.33514404296875e-05, -0.0001354217529296875, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00019741058349609375, 0.0, -0.0005550384521484375, -0.0012989044189453125, -4.57763671875e-05, -3.24249267578125e-05, -0.0001659393310546875, -6.4849853515625e-05, 0.0, -0.001981377601623535, -2.09808349609375e-05, -5.340576171875e-05, -0.0001316070556640625, 0.0, -0.002712422516196966, 0.0, -4.00543212890625e-05, -1.71661376953125e-05, -8.712035196367651e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Light", " ", "Justice", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 46, 161, "False", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -6.512027503471472, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Gallywix's Justice\", 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, False)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"hole0": "Gallywix's Justice", "_type": "Template13", "hole1": "PALADIN", "hole2": "COMMON"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -5.533404350280762, -0.022928237915039062, -0.10914528369903564, -0.00020599365234375, -5.4240030294749886e-05, -0.04953765869140625, -0.45540952682495117, -1.9073486328125e-06, -0.06116676330566406, 0.0, -0.2508354187011719, -3.814697265625e-06, -0.0005741119384765625, 0.0, -3.814697265625e-06, -0.0003795623779296875, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0001049041748046875, -0.00272369384765625, -5.7220458984375e-05, -7.43865966796875e-05, -0.016305923461914062, -0.000102996826171875, 0.0, -0.0010777711868286133, -0.0001239776611328125, -9.918212890625e-05, -0.0001163482666015625, 0.0, -0.0024040157441049814, 0.0, -2.47955322265625e-05, -1.1444091796875e-05, -5.38701715413481e-05, -3.814697265625e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 100, 183, "Gallywix's", " ", "Justice", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -6.722216247771939, "inferred_code": "class <UNK>Justice(SpellCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Justice", "_type": "Template17", "hole1": 1, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -6.129547595977783, -6.103515625e-05, -5.161762237548828e-05, -5.340576171875e-05, -0.5693569183349609, -0.001041412353515625, -0.0003505933564156294, -1.71661376953125e-05, -8.225420970120467e-06, -1.9073486328125e-05, -0.00016343459719792008, -1.9073486328125e-06, -0.0010071992874145508, 0.0, -0.00215911865234375, -1.9073486328125e-06, -0.0001678466796875, -5.7220458984375e-06, -1.52587890625e-05, -0.0002346038818359375, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -6.866455078125e-05, -0.0022373199462890625, -5.91278076171875e-05, -7.2479248046875e-05, -0.012105941772460938, -0.0001068115234375, 0.0, -0.001080632209777832, -0.0001544952392578125, -0.0001010894775390625, -8.58306884765625e-05, 0.0, -0.0012557824375107884, 0.0, -2.09808349609375e-05, -1.1444091796875e-05, -2.4315871996805072e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 136, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>"]}, {"score": -6.753401602167287, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(1, 4, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Heal(2), HeroSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Justice", "_type": "Template17", "hole1": 1, "hole2": "PALADIN"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 1}, {"_type": "Num", "n": 4}], "keywords": [{"_type": "keyword", "arg": "effects", "value": {"_type": "List", "elts": [{"args": [{"hole0": "CharacterAttack", "_type": "Template69", "hole1": "IsHero"}, {"args": [{"args": [{"_type": "Num", "n": 2}], "_type": "Call", "func": {"_type": "Name", "id": "Heal"}}, {"hole0": "HeroSelector", "_type": "Template77"}], "_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}}], "_type": "Call", "func": {"_type": "Name", "id": "Effect"}}]}}], "_type": "Call", "func": {"_type": "Name", "id": "Weapon"}}}], "_type": "FunctionDef", "name": "create_weapon"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -1.0203876495361328, -0.00045013427734375, -0.0003482098691165447, -1.9073486328125e-05, -9.059880540007725e-06, -1.52587890625e-05, -0.00017595147073734552, -1.9073486328125e-06, -0.0009336471557617188, 0.0, -0.002376556396484375, -1.9073486328125e-06, -0.00016021728515625, -5.7220458984375e-06, -1.52587890625e-05, -0.000232696533203125, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -6.866455078125e-05, -0.00229644775390625, -6.103515625e-05, -7.2479248046875e-05, -4.471282958984375, -4.9591064453125e-05, 0.0, -0.002613067626953125, -3.814697265625e-06, -0.0001220703125, -7.62939453125e-06, -1.1444091796875e-05, -0.00011848864232888445, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.4424145774682984e-05, 0.0, -0.003948211669921875, -0.0012607574462890625, -2.288818359375e-05, -0.02776157855987549, 0.0, -0.001316070556640625, -9.1552734375e-05, -0.15071392059326172, -0.0006275177001953125, -5.7220458984375e-05, -5.7220458984375e-06, -3.24249267578125e-05, -0.002659916877746582, -4.38690185546875e-05, -3.814697265625e-05, -0.0055408477783203125, -6.29425048828125e-05, -0.005508542060852051, -0.00323331356048584, -1.52587890625e-05, -0.0013730525970458984, -0.0024397370871156454, -8.0108642578125e-05, -0.0004749298095703125, -0.000995635986328125, -1.9073486328125e-06, 0.0, -0.006814002990722656, -0.0033054351806640625, -0.00058746337890625, -0.0001354217529296875, -0.027212142944335938, -0.0001659393310546875, -2.09808349609375e-05, -1.9073486328125e-06, -0.39583683013916016, -0.00057220458984375, -5.7220458984375e-06, -0.00040435791015625, 0.0, -0.2781333923339844, 0.0, -0.3206005096435547, -0.0001926422119140625, -0.0041179656982421875, -1.9788742065429688e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 103, 186, "<UNK>", " ", "Justice", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 91, 143, "create_weapon", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Weapon", "<EOS>", 283, 47, 165, "1", "<EOS>", 47, 165, "4", "<EOS>", 290, 79, 271, "effects", "<EOS>", 17, 155, 282, 40, 136, 19, 160, "Effect", "<EOS>", 283, 61, 250, "Character", "Attack", "<EOS>", "Is", "Hero", "<EOS>", 40, 136, 19, 160, "Action", "Tag", "<EOS>", 283, 40, 136, 19, 160, "Heal", "<EOS>", 282, 47, 165, "2", "<EOS>", 68, 260, "Hero", "Selector", "<EOS>"]}, {"score": -8.89182875332699, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "<UNK> Justice", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "DEMON", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -7.262478351593018, -0.04265785217285156, -0.011877186596393585, -0.00020062923431396484, -3.325890065752901e-05, -4.00543212890625e-05, -0.008618592284619808, 0.0, -0.6663899421691895, 0.0, -1.71661376953125e-05, 0.0, -0.0025091171264648438, -3.814697265625e-06, -0.31357860565185547, -2.86102294921875e-05, -0.18832111358642578, -0.0002880096435546875, -1.0719522833824158e-06, 0.0, -0.3897196054458618, 0.0], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 121, 251, "<UNK>", " ", "Justice", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -11.282359899425124, "inferred_code": "class <UNK>Justice(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Justice', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(player.minions)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_heal_power(4), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "<UNK> Justice"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "PALADIN", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"targets": [{"_type": "Name", "id": "targets"}], "_type": "Assign", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "copy", "value": {"_type": "Name", "id": "copy"}}}}, {"_type": "Expr", "value": {"args": [{"_type": "Attribute", "attr": "minions", "value": {"_type": "Name", "id": "player"}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "extend", "value": {"_type": "Name", "id": "targets"}}}}, {"iter": {"_type": "Attribute", "attr": "minions", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}, "body": [{"_type": "Expr", "value": {"args": [{"args": [{"_type": "Num", "n": 4}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Name", "id": "minion"}}}}], "target": {"_type": "Name", "id": "minion"}, "_type": "For"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "name": "<UNK>Justice"}], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.0001316070556640625, -3.24249267578125e-05, -0.00010907096293522045, -0.0002099059202009812, -2.2649765014648438e-06, -9.5367431640625e-06, 0.0, 0.0, -0.003912687301635742, -9.655952453613281e-06, -0.0004349946975708008, -0.000171661376953125, -0.46259403228759766, -2.09808349609375e-05, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.52587890625e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.52587890625e-05, -5.53131103515625e-05, -3.85214900970459, -2.47955322265625e-05, 0.0, -4.76837158203125e-05, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.1716022491455078, 0.0, -3.814697265625e-06, -0.006346947979182005, -7.43865966796875e-05, -0.0001987025170819834, -0.008731842041015625, -1.9073486328125e-06, -1.9073486328125e-06, -0.00016081325884442776, -3.814697265625e-06, -0.00080108642578125, -0.0001506805419921875, -2.09808349609375e-05, 0.0, -4.780292510986328e-05, -2.3841855067985307e-07, -0.0003414154052734375, 0.0, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -0.0002288818359375, -0.0001316070556640625, 0.0, -0.001392364501953125, 0.0, -4.76837158203125e-05, -0.0003986358642578125, -0.000396728515625, -0.7502193450927734, 0.0, -0.0005645751953125, -0.0001201629638671875, -0.024715423583984375, -1.9073486328125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -0.0002841949462890625, -1.33514404296875e-05, -0.0001087188720703125, 0.0, -0.14292919635772705, -2.47955322265625e-05, -0.018251419067382812, -1.9073486328125e-06, -1.5259885787963867, 0.0, -4.57763671875e-05, -0.0011272430419921875, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, 0.0, -7.62939453125e-06, -1.1563301086425781e-05, -1.0251987987430766e-05, -0.3542203903198242, -0.0032062530517578125, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -1.33514404296875e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -0.001220703125, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -0.004192471504211426, 0.0, -4.1961669921875e-05, -1.9073486328125e-06, -0.000244140625, -1.9073486328125e-06, -0.006924629211425781, -2.09808349609375e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.7170478105545044, 0.0, -8.20159912109375e-05, -0.0003490447998046875, -0.0002193450927734375, 0.0, -0.0013866424560546875, 0.0, -0.0010614395141601562, -1.1444091796875e-05, -0.0055999755859375, -0.0010890960693359375, -0.00249481201171875, -0.00511932373046875, 0.0, -0.000148773193359375, -1.9073486328125e-06, -0.21645355224609375, -7.62939453125e-06, -0.018201828002929688, -8.344646857949556e-07, -0.1124734878540039, 0.0, -0.0649232566356659, -0.0042266845703125, -0.004206657409667969, -8.392333984375e-05, -3.814697265625e-06, -0.0029392242431640625, -3.0517578125e-05, 0.0, -0.015989303588867188, -6.4849853515625e-05, -0.005962371826171875, -1.9073486328125e-06, -0.06792736053466797, -0.0009746551513671875, -0.0008525848388671875, -1.9073486328125e-06, 0.0, -0.0280914306640625, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0023064613342285156, -1.9073486328125e-06, -0.02315044403076172, -0.003894805908203125, -2.09808349609375e-05, 0.0, -0.02332019805908203, 0.0, -0.023069381713867188, 0.0, -0.3018608093261719, -1.9073486328125e-06, -0.0006046295166015625, -3.814697265625e-06, -0.0005016326904296875, -1.1920928244535389e-07, -0.022050142288208008, 0.0, -0.08389247208833694, -0.00682830810546875, -0.0007686614990234375, -0.0015583038330078125, 0.0, -1.9073486328125e-06, -0.000141143798828125, -1.9073486328125e-05, 0.0, -0.04920387268066406, 0.0, -0.24987423419952393, -5.7220458984375e-06, -0.5092573165893555, -0.0003757476806640625, -9.5367431640625e-06, -0.41436195373535156, -0.0005283355712890625, -0.006961822509765625, -5.7220458984375e-06, -0.0007114410400390625, 0.0, -9.5367431640625e-05, 0.0, -0.5239742994308472, -5.7220458984375e-06, -0.0004673004150390625, -0.36795520782470703, 0.0, -0.03139353170990944, 0.0, -0.0013790130615234375, 0.0, -0.00781559944152832, -4.38690185546875e-05], "choice_history": [80, 159, 295, 88, 138, "<UNK>", "Justice", "<EOS>", 282, 45, 160, "Weapon", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "<UNK>", " ", "Justice", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 298, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 85, 128, 282, 45, 160, "targets", "<EOS>", 14, 136, 11, 129, 19, 160, "copy", "<EOS>", "copy", "<EOS>", 282, 37, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 141, 14, 136, 11, 129, 19, 160, "targets", "<EOS>", "extend", "<EOS>", 282, 37, 129, 19, 160, "player", "<EOS>", "minions", "<EOS>", 90, 142, 19, 160, "minion", "<EOS>", 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 19, 160, "minion", "<EOS>", "damage", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "4", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -22.225357055664062, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -22.225343704223633], "choice_history": [80, 159, 294]}]}
{"index": 63, "beams": [{"score": -0.026037591485405187, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"hole0": 6, "_type": "Template23", "hole1": 5, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -0.003363370895385742, -0.0001850128173828125, -0.00029301640461198986, -1.71661376953125e-05, -3.552477573975921e-05, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -0.006371498107910156, -1.52587890625e-05, -0.0003154978039674461, -1.1920928244535389e-07, -0.0003255328629165888, -1.9073486328125e-06, -0.003876805305480957, 0.0, -0.000110626220703125, -1.71661376953125e-05, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.742272301014495, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"hole0": 6, "_type": "Template23", "hole1": 5, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -5.722090244293213, -0.0006465911865234375, -5.698244785889983e-05, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -0.0041904449462890625, -2.288818359375e-05, -0.0002504278381820768, -1.1920928244535389e-07, -0.00022814607655163854, -1.9073486328125e-06, -0.0035381317138671875, 0.0, -0.0001430511474609375, -2.09808349609375e-05, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -5.853171013258752, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "hole2": "ALL", "_type": "Template11", "hole1": 6, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 6, "_type": "Template23", "hole1": 5, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -5.273556709289551, -0.000759124755859375, -3.576278118089249e-07, -8.094069198705256e-05, -0.00015377985255327076, -7.748603820800781e-06, -0.003328680992126465, -0.00024068355560302734, -0.0006061792373657227, -3.814697265625e-06, -0.0001840592158259824, 0.0, -0.0001087188720703125, 0.0, -0.03541254997253418, -3.814697265625e-06, -0.002246856689453125, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.1961669921875e-05, 0.0, -0.27311038970947266, -9.655952453613281e-06, -0.24860191345214844, -7.62939453125e-06, -0.0048732454888522625, 0.0, -0.000510531710460782, 0.0, -0.005265355110168457, 0.0, -6.4849853515625e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.314820903328595, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"hole0": 6, "_type": "Template23", "hole1": 5, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -0.003363370895385742, -0.0001850128173828125, -0.00029301640461198986, -1.71661376953125e-05, -3.552477573975921e-05, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -0.006371498107910156, -1.52587890625e-05, -0.0003154978039674461, -1.1920928244535389e-07, -0.0003255328629165888, -1.9073486328125e-06, -7.287976264953613, -1.1920922133867862e-06, -0.004802703857421875, -7.62939453125e-06, -5.841255187988281e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.546567503620501, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template6", "hole1": 6, "hole2": "ALL"}, {"hole0": 6, "_type": "Template23", "hole1": 5, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -7.359912872314453, -0.008138656616210938, -3.957670196541585e-05, -0.005297489929944277, -0.0003104196803178638, -1.52587890625e-05, -0.0025064945220947266, -0.0003129243850708008, -0.00020897388458251953, -5.7220458984375e-06, -3.723910776898265e-05, 0.0, -6.651878356933594e-05, 0.0, -0.03710746765136719, -1.1444091796875e-05, -0.0006647371919825673, -2.622604142743512e-06, -0.0004015647282358259, -1.9073486328125e-06, -0.12729382514953613, 0.0, -0.000247955322265625, -5.7220458984375e-06, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.549886784239327, "inferred_code": "class LordTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"hole0": 6, "_type": "Template23", "hole1": 5, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -7.474277496337891, -0.04770485684275627, -4.410743713378906e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011119842529296875, -0.00638580322265625, -4.1961669921875e-05, -1.6212332411669195e-05, -5.495469304150902e-05, -0.00022256234660744667, -1.52587890625e-05, -0.0066422224044799805, -0.00026702880859375, -0.0003175735182594508, -1.52587890625e-05, -5.9009460528614e-05, -1.9073486328125e-06, -5.340576171875e-05, -3.814697265625e-06, -0.006724357604980469, -9.5367431640625e-06, -0.00034672103356570005, -1.1920928244535389e-07, -0.0003301912802271545, -1.9073486328125e-06, -0.004707455635070801, 0.0, -0.0001201629638671875, -1.9073486328125e-05, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.571418509548884, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "hole2": "ALL", "_type": "Template11", "hole1": 6, "hole4": {"_type": "Attribute", "attr": "DRAGON", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"hole0": 6, "_type": "Template23", "hole1": 5, "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -5.273556709289551, -0.000759124755859375, -3.576278118089249e-07, -8.094069198705256e-05, -0.00015377985255327076, -7.748603820800781e-06, -0.003328680992126465, -0.00024068355560302734, -0.0006061792373657227, -3.814697265625e-06, -0.0001840592158259824, 0.0, -0.0001087188720703125, 0.0, -0.03541254997253418, -3.814697265625e-06, -0.002246856689453125, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.1961669921875e-05, 0.0, -2.21958065032959, -1.9073486328125e-06, -0.012456893920898438, -2.86102294921875e-05, -0.013462113216519356, 0.0, -0.0007099746726453304, 0.0, -0.004387974739074707, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.832707056342535, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, charge=True, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 6}, {"_type": "Num", "n": 5}], "keywords": [{"_type": "keyword", "arg": "charge", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "_type": "Call", "func": {"_type": "Name", "id": "Minion"}}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -0.003363370895385742, -0.0001850128173828125, -0.00029301640461198986, -1.71661376953125e-05, -3.552477573975921e-05, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -5.811606407165527, -0.0001163482666015625, -0.000469207763671875, -1.7881377516459906e-06, 0.0, -0.0006351470947265625, -3.814697265625e-06, -1.33514404296875e-05, -7.43865966796875e-05, -2.09808349609375e-05, -0.0029554367065429688, 0.0, -0.000308990478515625, -0.0006046295166015625, -0.000240325927734375, -0.004311561584472656, -6.67572021484375e-05, -0.0002689361572265625, 0.0, -0.0019674301147460938, -0.0001926422119140625, -9.5367431640625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0066793449223041534, -4.38690185546875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.21090804040431976, -0.025989770889282227, -0.7515277862548828, -0.0007457733154296875, -0.000423431396484375, -0.8044687509536743, -1.1444091796875e-05, -0.0007381439208984375, -4.38690185546875e-05, -7.62939453125e-06, 0.0, -0.03810405731201172, -0.0005950927734375, -0.1526087522506714, 0.0, -0.0008144378662109375, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "6", "<EOS>", 47, 165, "5", "<EOS>", 291, 79, 271, "charge", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.966455349265509, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, windfury=True, taunt=True, taunt=True, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 6}, {"_type": "Num", "n": 5}], "keywords": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "_type": "Call", "func": {"_type": "Name", "id": "Minion"}}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -0.003363370895385742, -0.0001850128173828125, -0.00029301640461198986, -1.71661376953125e-05, -3.552477573975921e-05, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -5.811606407165527, -0.0001163482666015625, -0.000469207763671875, -1.7881377516459906e-06, 0.0, -0.0006351470947265625, -3.814697265625e-06, -1.33514404296875e-05, -7.43865966796875e-05, -2.09808349609375e-05, -0.0029554367065429688, 0.0, -0.000308990478515625, -0.0006046295166015625, -0.000240325927734375, -0.004311561584472656, -6.67572021484375e-05, -0.0002689361572265625, 0.0, -0.0019674301147460938, -0.0001926422119140625, -9.5367431640625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0066793449223041534, -4.38690185546875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.21090804040431976, -0.025989770889282227, -1.3830738067626953, -0.10335159301757812, -0.0028362274169921875, -0.07783925533294678, -1.9073486328125e-06, -0.0018396377563476562, -9.5367431640625e-06, -5.352497100830078e-05, 0.0, -0.031887054443359375, -0.000213623046875, -0.13497531414031982, 0.0, -0.0038213729858398438, -5.7220458984375e-06, -1.9073486328125e-05, 0.0, -0.020775794982910156, -0.000209808349609375, -0.04145646095275879, 0.0, -0.004161834716796875, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -0.033288002014160156, -0.0002155303955078125, -0.03848576545715332, 0.0, -0.005274772644042969, -3.814697265625e-06, -3.24249267578125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "6", "<EOS>", 47, 165, "5", "<EOS>", 293, 79, 271, "windfury", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.047889835169585, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, buffs=[Buff(CantAttack())])\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"hole0": 6, "_type": "Template23", "hole1": 5, "hole2": "buffs", "hole3": {"_type": "List", "elts": [{"hole0": "Buff", "_type": "Template69", "hole1": "CantAttack"}]}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -0.003363370895385742, -0.0001850128173828125, -0.00029301640461198986, -1.71661376953125e-05, -3.552477573975921e-05, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -0.006371498107910156, -1.52587890625e-05, -0.0003154978039674461, -1.1920928244535389e-07, -0.0003255328629165888, -1.9073486328125e-06, -6.916036605834961, -2.622604142743512e-06, -0.000392913818359375, -4.57763671875e-05, -0.0009517669677734375, -0.7301511764526367, -0.000141143798828125, -0.0003132820129394531, -5.495547520695254e-05, -0.3516921401023865, -0.0260801799595356, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 109, 200, "6", "<EOS>", "5", "<EOS>", "buffs", "<EOS>", 17, 155, 282, 61, 250, "Buff", "<EOS>", "Cant", "Attack", "<EOS>"]}, {"score": -8.067281860455743, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"hole0": 6, "_type": "Template27", "hole1": 5}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -0.003363370895385742, -0.0001850128173828125, -0.00029301640461198986, -1.71661376953125e-05, -3.552477573975921e-05, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -8.028519630432129, -3.62396240234375e-05, -0.00043062682379968464, -8.344650268554688e-06, -0.02328956127166748, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 110, 202, "6", "<EOS>", "5", "<EOS>"]}, {"score": -8.07707727843421, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, windfury=True, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 6}, {"_type": "Num", "n": 5}], "keywords": [{"_type": "keyword", "arg": "windfury", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "_type": "Call", "func": {"_type": "Name", "id": "Minion"}}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -0.003363370895385742, -0.0001850128173828125, -0.00029301640461198986, -1.71661376953125e-05, -3.552477573975921e-05, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -5.811606407165527, -0.0001163482666015625, -0.000469207763671875, -1.7881377516459906e-06, 0.0, -0.0006351470947265625, -3.814697265625e-06, -1.33514404296875e-05, -7.43865966796875e-05, -2.09808349609375e-05, -0.0029554367065429688, 0.0, -0.000308990478515625, -0.0006046295166015625, -0.000240325927734375, -0.004311561584472656, -6.67572021484375e-05, -0.0002689361572265625, 0.0, -0.0019674301147460938, -0.0001926422119140625, -9.5367431640625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0066793449223041534, -4.38690185546875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.21090804040431976, -0.025989770889282227, -0.7515277862548828, -0.0007457733154296875, -0.000423431396484375, -1.0234094858169556, -5.7220458984375e-06, -0.00107574462890625, -1.9073486328125e-05, -3.814697265625e-06, 0.0, -0.028159141540527344, -0.000988006591796875, -0.18685400485992432, 0.0, -0.001247406005859375, -9.5367431640625e-06, -1.3470649719238281e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "6", "<EOS>", 47, 165, "5", "<EOS>", 291, 79, 271, "windfury", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -8.600810469323896, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(6, 5, charge=True, taunt=True)\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "hole2": "ALL", "_type": "Template11", "hole1": 6, "hole4": {"_type": "Attribute", "attr": "BEAST", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}], "_type": "arguments"}, "body": [{"_type": "Return", "value": {"args": [{"_type": "Num", "n": 6}, {"_type": "Num", "n": 5}], "keywords": [{"_type": "keyword", "arg": "charge", "value": {"_type": "NameConstant", "value": true}}, {"_type": "keyword", "arg": "taunt", "value": {"_type": "NameConstant", "value": true}}], "_type": "Call", "func": {"_type": "Name", "id": "Minion"}}}], "_type": "FunctionDef", "name": "create_minion"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -5.273556709289551, -0.000759124755859375, -3.576278118089249e-07, -8.094069198705256e-05, -0.00015377985255327076, -7.748603820800781e-06, -0.003328680992126465, -0.00024068355560302734, -0.0006061792373657227, -3.814697265625e-06, -0.0001840592158259824, 0.0, -0.0001087188720703125, 0.0, -0.03541254997253418, -3.814697265625e-06, -0.002246856689453125, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -4.1961669921875e-05, 0.0, -0.27311038970947266, -9.655952453613281e-06, -1.515517234802246, -0.00191497802734375, -0.0006256103515625, -7.152555099310121e-07, -1.9073486328125e-06, -0.000736236572265625, -7.62939453125e-06, -5.7220458984375e-06, -4.38690185546875e-05, -1.33514404296875e-05, -0.02012920379638672, 0.0, -0.0009593963623046875, -0.0005207061767578125, -0.000217437744140625, -0.004164695739746094, -0.0002841949462890625, -5.53131103515625e-05, 0.0, -0.0015277862548828125, -5.7220458984375e-05, -0.00018310546875, -2.09808349609375e-05, -1.9073486328125e-06, -0.028908777981996536, -3.0517578125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.11573270708322525, -0.006029367446899414, -0.4642295837402344, -0.0005664825439453125, -0.00048828125, -0.6318365335464478, -1.1444091796875e-05, -0.00070953369140625, -4.38690185546875e-05, -7.62939453125e-06, 0.0, -0.03728008270263672, -0.000621795654296875, -0.1727217435836792, 0.0, -0.000732421875, -1.1444091796875e-05, -1.1563301086425781e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 98, 181, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 91, 143, "create_minion", "<EOS>", 269, 276, 268, "self", "<EOS>", 268, "player", "<EOS>", 295, 94, 167, 14, 137, 19, 160, "Minion", "<EOS>", 283, 47, 165, "6", "<EOS>", 47, 165, "5", "<EOS>", 291, 79, 271, "charge", "<EOS>", 20, 161, "True", "<EOS>", 79, 271, "taunt", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -9.028459988736806, "inferred_code": "class LordOfTheArena(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lord of the Arena', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 5, effects=[Effect(DidDamage(), ActionTag(Give(6),\n            SelfSelector()))])\n", "model_output": {"body": [{"body": [{"hole0": "Lord of the Arena", "_type": "Template15", "hole1": 6, "hole2": "ALL"}, {"hole0": 6, "hole2": "DidDamage", "hole5": "SelfSelector", "_type": "Template1", "hole1": 5, "hole4": [{"_type": "Num", "n": 6}], "hole3": "Give"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "LordOfTheArena"}], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -5.340576171875e-05, -0.0001850128173828125, -6.866455078125e-05, -3.7788631743751466e-05, -0.001049634302034974, -0.0012860116548836231, -4.9233327445108443e-05, -1.1920928244535389e-07, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.741813204920618e-06, -0.0011539459228515625, -0.006725311279296875, -4.57763671875e-05, -1.537788011773955e-05, -6.222614319995046e-05, -0.00021171437401790172, -1.52587890625e-05, -0.003363370895385742, -0.0001850128173828125, -0.00029301640461198986, -1.71661376953125e-05, -3.552477573975921e-05, -1.9073486328125e-06, -4.9591064453125e-05, -3.814697265625e-06, -6.319549560546875, -0.7241077423095703, -0.0001529341097921133, -1.5020307728264015e-05, -0.03508666157722473, -1.9073486328125e-06, -0.4323762357234955, -0.008001386187970638, -1.9073486328125e-06, -0.045702219009399414, -2.384185791015625e-06, -9.5367431640625e-06, -0.6662311553955078, -9.5367431640625e-06, -0.34019869565963745, -1.1444091796875e-05, -0.44198286533355713, -2.133846101060044e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Lord", "Of", "The", "Arena", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 101, 184, "Lord", " ", "of", " ", "the", " ", "Arena", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 96, 176, "6", "<EOS>", "5", "<EOS>", "Did", "Damage", "<EOS>", "Give", "<EOS>", 282, 47, 165, "6", "<EOS>", "Self", "Selector", "<EOS>"]}, {"score": -19.130556106567383, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-2.6702880859375e-05, -3.814697265625e-05, -19.130491256713867], "choice_history": [80, 159, 294]}]}
{"index": 64, "beams": [{"score": -0.0863564709112481, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "MECH", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.06628799438476562, -0.0002880096435546875, -1.4305104514278355e-06, -1.8000591808231547e-05, -4.613397686625831e-05, -1.9073486328125e-06, -0.0003224611282348633, -3.814697265625e-06, -2.288818359375e-05, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -0.005130767822265625, -1.9073486328125e-06, -0.0038299560546875, -0.0001201629638671875, -0.00988836120814085, 0.0, -1.7642625607550144e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Mechanical", " ", "Dragonling", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -3.250567088132577, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "_type": "Template6", "hole1": 1, "hole2": "ALL"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -3.2439746856689453, -0.0020551681518554688, -0.00024232311989180744, -0.0001282634329982102, -5.733966827392578e-05, -1.9073486328125e-05, -4.649161564884707e-05, 0.0, -0.0007582902908325195, 0.0, -0.0021905899047851562, -3.814697265625e-06, -0.000883147120475769, 0.0, -1.2159323887317441e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 118, 242, "Mechanical", " ", "Dragonling", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -4.706248878636522, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "MECH", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.06628799438476562, -0.0002880096435546875, -1.4305104514278355e-06, -1.8000591808231547e-05, -4.613397686625831e-05, -1.9073486328125e-06, -0.0003224611282348633, -3.814697265625e-06, -2.288818359375e-05, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -0.005130767822265625, -1.9073486328125e-06, -0.0038299560546875, -0.0001201629638671875, -4.6297831535339355, 0.0, -1.525802508695051e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Mechanical", " ", "Dragonling", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -5.184849910981704, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "_type": "Template13", "hole1": "ALL", "hole2": "COMMON"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -5.094547748565674, -0.015253067016601562, -0.014848330989480019, -0.0002397046919213608, -1.8358230590820312e-05, -0.0022716522216796875, -0.014156907796859741, -0.0003032684326171875, -0.030521750450134277, -0.0005817413330078125, -0.0038433074951171875, -1.9073486328125e-05, -0.008036622777581215, 0.0, -1.2635842722374946e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 100, 183, "Mechanical", " ", "Dragonling", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -5.689287531652596, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Mechanical Dragonling"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -4.660613536834717, -7.05718994140625e-05, -0.00011861324310302734, 0.0, 0.0, -4.38690185546875e-05, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -0.07393741607666016, -2.86102294921875e-05, -4.57763671875e-05, -0.06261825561523438, -1.9073486328125e-05, 0.0, -3.62396240234375e-05, -3.814697265625e-06, -4.768371127283899e-06, 0.0, -3.0517578125e-05, 0.0, -0.6313962936401367, -5.91278076171875e-05, -2.09808349609375e-05, -5.960462772236497e-07, -0.00027024513110518456, -2.0742414562846534e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.9232174205826595e-05, 0.0, -0.0030879974365234375, 0.0, -1.9073486328125e-06, 0.0, -5.91278076171875e-05, -1.07287787614041e-05, -0.0012360811233520508, 0.0, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -4.12463559769094e-05, -3.576277322281385e-06, -0.008680343627929688, 0.0, -0.06349849700927734, -0.0024890899658203125, -5.7220458984375e-06, -0.0002067089080810547, -1.9073486328125e-06, -0.003696441650390625, -9.72747802734375e-05, -3.814697265625e-06, 0.0, -0.0008641481399536133, -5.7220458984375e-06, -0.15960121154785156, -1.1920928244535389e-07, -0.014186859130859375, -3.814697265625e-06, -0.0018491665832698345, 0.0, -7.152541456889594e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Mechanical", " ", "Dragonling", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -5.898875891893674, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "DRAGON", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.06628799438476562, -0.0002880096435546875, -1.4305104514278355e-06, -1.8000591808231547e-05, -4.613397686625831e-05, -1.9073486328125e-06, -0.0003224611282348633, -3.814697265625e-06, -2.288818359375e-05, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -5.426420211791992, -0.0001316070556640625, -0.000141143798828125, -4.00543212890625e-05, -0.4047650694847107, 0.0, -1.0132553143193945e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Mechanical", " ", "Dragonling", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -6.000578216081742, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Mechanical Dragonling"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "keywords": [{"_type": "keyword", "arg": "minion_type", "value": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -4.660613536834717, -7.05718994140625e-05, -0.00011861324310302734, 0.0, 0.0, -4.38690185546875e-05, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -0.07393741607666016, -2.86102294921875e-05, -4.57763671875e-05, -0.06261825561523438, -1.9073486328125e-05, 0.0, -3.62396240234375e-05, -3.814697265625e-06, -4.768371127283899e-06, 0.0, -3.0517578125e-05, 0.0, -0.7696313858032227, -2.86102294921875e-05, -2.09808349609375e-05, -1.6689286894688848e-06, -0.0004453654692042619, -3.2424919481854886e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00012265508121345192, 0.0, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, 0.0, -3.24249267578125e-05, -4.887569048150908e-06, -0.0005742311477661133, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.0001245736493729055, -4.88758041683468e-06, -0.0026187896728515625, -1.9073486328125e-06, -4.57763671875e-05, -3.814697265625e-05, -0.00020432472229003906, 0.0, -0.031899452209472656, -0.0002498626708984375, -1.9073486328125e-06, -8.64267349243164e-05, -1.9073486328125e-06, -0.0003643035888671875, -0.0009212493896484375, -9.5367431640625e-06, 0.0, -0.0003300905227661133, -2.47955322265625e-05, -0.38485050201416016, 0.0, -0.008821487426757812, -3.814697265625e-06, -0.0012146863155066967, 0.0, -1.0609585842757951e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Mechanical", " ", "Dragonling", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 290, 79, 271, "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -6.242890267658929, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "MECH", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.06628799438476562, -0.0002880096435546875, -1.4305104514278355e-06, -1.8000591808231547e-05, -4.613397686625831e-05, -1.9073486328125e-06, -0.0003224611282348633, -3.814697265625e-06, -2.288818359375e-05, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -0.005130767822265625, -1.9073486328125e-06, -5.670345306396484, -0.031764984130859375, -0.0007325080805458128, 0.0, -0.003514947835355997, 0.0, -0.4634675979614258, -0.00029754638671875, -0.0002422332763671875, -9.5367431640625e-06, -1.33514404296875e-05, -1.9073486328125e-06], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Mechanical", " ", "Dragonling", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -6.645778892682408, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "DRAGON", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 1, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.06628799438476562, -0.0002880096435546875, -1.4305104514278355e-06, -1.8000591808231547e-05, -4.613397686625831e-05, -1.9073486328125e-06, -0.0003224611282348633, -3.814697265625e-06, -2.288818359375e-05, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -5.426420211791992, -0.0001316070556640625, -0.000141143798828125, -4.00543212890625e-05, -1.151654601097107, 0.0, -2.3601729481015354e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Mechanical", " ", "Dragonling", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 110, 202, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.805437116909722, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, windfury=True)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "MECH", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template23", "hole1": 1, "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.06628799438476562, -0.0002880096435546875, -1.4305104514278355e-06, -1.8000591808231547e-05, -4.613397686625831e-05, -1.9073486328125e-06, -0.0003224611282348633, -3.814697265625e-06, -2.288818359375e-05, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -0.005130767822265625, -1.9073486328125e-06, -5.670345306396484, -0.031764984130859375, -0.0007325080805458128, 0.0, -0.003514947835355997, 0.0, -1.0262260437011719, -3.063678741455078e-05, -0.0002994537353515625, -5.7220458984375e-06, -1.71661376953125e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Mechanical", " ", "Dragonling", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 109, 200, "2", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 20, 161, "True", "<EOS>"]}, {"score": -7.500797075127359, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"hole0": "Mechanical Dragonling", "hole2": "FREE", "_type": "Template34", "hole1": 1, "hole4": {"_type": "Attribute", "attr": "MECH", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type"}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -4.660613536834717, -7.05718994140625e-05, -0.00011861324310302734, 0.0, 0.0, -4.38690185546875e-05, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -2.6709394454956055, -0.0010347366333007812, -6.9141146923357155e-06, -0.00037073082057759166, -1.2040138244628906e-05, -7.62939453125e-06, -0.002139229094609618, 0.0, -0.0012798309326171875, 0.0, -2.3007391064311378e-05, -2.86102294921875e-05, -0.0002765655517578125, -0.008901596069335938, -1.52587890625e-05, 0.0, -0.00023090839385986328, -2.47955322265625e-05, -0.02743053436279297, 0.0, -0.12557601928710938, -3.814697265625e-06, -0.0014212466776371002, 0.0, -5.125993538968032e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 112, 211, "Mechanical", " ", "Dragonling", "<EOS>", "1", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 11, 129, 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -8.079605086794565, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Mechanical Dragonling"}, {"_type": "Num", "n": 1}, {"_type": "Attribute", "attr": "ALL", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "COMMON", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -4.660613536834717, -7.05718994140625e-05, -0.00011861324310302734, 0.0, 0.0, -4.38690185546875e-05, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -0.07393741607666016, -2.86102294921875e-05, -4.57763671875e-05, -2.805227279663086, -2.09808349609375e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -1.4066622497921344e-05, 0.0, -8.20159912109375e-05, 0.0, -0.5274171829223633, -3.62396240234375e-05, -9.72747802734375e-05, -3.576272320060525e-06, -0.0004588351584970951, -3.957746957894415e-05, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.00014816405018791556, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-05, -4.291525328881107e-06, -0.0006676912307739258, 0.0, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.000191569299204275, -3.3378591979271732e-06, -0.003192901611328125, 0.0, -4.76837158203125e-05, -4.57763671875e-05, -0.00018334388732910156, 0.0, -0.005709648132324219, -4.57763671875e-05, -0.0007568586734123528, 0.0, -1.0013571227318607e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 286, 48, 169, "Mechanical", " ", "Dragonling", "<EOS>", 47, 165, "1", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 46, 161, "False", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -8.148624302757177, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.PIRATE)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "hole2": "minion_type", "_type": "Template7", "hole1": "COMMON", "hole4": "PIRATE", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.06628799438476562, -0.0002880096435546875, -1.4305104514278355e-06, -1.8000591808231547e-05, -4.613397686625831e-05, -1.9073486328125e-06, -0.0003224611282348633, -3.814697265625e-06, -2.288818359375e-05, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -8.052146911621094, -7.62939453125e-06, -0.00016021728515625, -7.2479248046875e-05, -0.028862835839390755, 0.0, -6.55648091196781e-06, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Mechanical", " ", "Dragonling", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -8.260576095012418, "inferred_code": "class MechanicalDragonling(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mechanical Dragonling', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, False, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"body": [{"body": [{"hole0": "Mechanical Dragonling", "hole2": "minion_type", "_type": "Template7", "hole1": "RARE", "hole4": "MECH", "hole3": {"_type": "Name", "id": "MINION_TYPE"}}, {"hole0": 2, "_type": "Template27", "hole1": 1}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "MechanicalDragonling"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-06, -5.53131103515625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -5.9604644775390625e-06, -1.7881377516459906e-06, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -6.675719760096399e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.06628799438476562, -0.0002880096435546875, -1.4305104514278355e-06, -1.8000591808231547e-05, -4.613397686625831e-05, -1.9073486328125e-06, -8.173012733459473, -1.1444091796875e-05, -0.001491546630859375, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -0.0002193450927734375, -1.9073486328125e-06, -0.0052776336669921875, -1.9073486328125e-06, -0.0041294097900390625, -0.000125885009765625, -0.009420599788427353, 0.0, -1.585444806551095e-05, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mechanical", "Dragonling", "<EOS>", 282, 45, 160, "Minion", "Card", "<EOS>", 296, 121, 251, "Mechanical", " ", "Dragonling", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 19, 160, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 110, 202, "2", "<EOS>", "1", "<EOS>"]}, {"score": -22.479454040527344, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-7.62939453125e-06, -3.814697265625e-06, -22.479442596435547], "choice_history": [80, 159, 294]}]}
{"index": 65, "beams": [{"score": -0.39547079473980773, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template17", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -0.3705635070800781, -0.0032796859741210938, -1.621236151549965e-05, -7.867813110351562e-05, -1.347058241663035e-05, -4.4465065002441406e-05, -2.861022494471399e-06, -2.0265579223632812e-06, -0.0008530616760253906, -3.814697265625e-06, -0.007869720458984375, -0.000324249267578125, -0.00312042236328125, -0.0003032684326171875, -5.340576171875e-05, 0.0, -0.0031800270080566406, -1.1920928244535389e-07, -0.001787424087524414, 0.0, -0.0024593472480773926, -7.795983401592821e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00038313865661621094, -7.152555099310121e-07], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -1.443849801679555, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Mind Blast"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -1.275874137878418, 0.0, -0.00010168540029553697, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -5.245207830739673e-06, 0.0, -0.000156402587890625, -1.1444091796875e-05, -2.09808349609375e-05, -0.0027828216552734375, -0.00019073486328125, -0.0001220703125, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -1.4543427823809907e-05, -2.0265579223632812e-06, -2.110004425048828e-05, 0.0, -0.00022125244140625, -0.000316619873046875, -3.814697265625e-06, -4.172316494077677e-06, -4.8995003453455865e-05, -4.172325134277344e-06, -0.0011997222900390625, -2.09808349609375e-05, -3.814697265625e-06, -6.794929504394531e-05, -1.3589859008789062e-05, -0.0001506805419921875, 0.0, -0.000579833984375, 0.0, -8.869171142578125e-05, -1.6689286894688848e-06, -0.002698063850402832, 0.0, -1.52587890625e-05, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00043594837188720703, -1.9311904907226562e-05, -0.0011044740676879883, -1.9073486328125e-06, -3.62396240234375e-05, -0.000640869140625, -4.00543212890625e-05, -0.00021743772958870977, -2.1457672119140625e-06, -3.62396240234375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.002445220947265625, -3.24249267578125e-05, -4.76837158203125e-05, 0.0, -0.006548762321472168, -5.841255187988281e-06, -0.09427738189697266, -0.001285552978515625, -0.028166770935058594, 0.0, -0.019600391387939453, -3.62396240234375e-05, -0.00138092041015625, -3.814697265625e-06, -0.0003566741943359375, -4.76837158203125e-05, -3.814697265625e-06, -0.0009495019912719727, -2.7418097943154862e-06], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Mind", " ", "Blast", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -4.54620774222586, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Mind Blast"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}, {"_type": "Expr", "value": {"args": [{"hole0": 5, "_type": "Template71"}, {"_type": "Name", "id": "self"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "damage", "value": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}}}}}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -1.275874137878418, 0.0, -0.00010168540029553697, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -5.245207830739673e-06, 0.0, -0.000156402587890625, -1.1444091796875e-05, -2.09808349609375e-05, -0.0027828216552734375, -0.00019073486328125, -0.0001220703125, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -1.4543427823809907e-05, -2.0265579223632812e-06, -2.110004425048828e-05, 0.0, -0.00022125244140625, -0.000316619873046875, -3.814697265625e-06, -4.172316494077677e-06, -4.8995003453455865e-05, -4.172325134277344e-06, -0.0011997222900390625, -2.09808349609375e-05, -3.814697265625e-06, -6.794929504394531e-05, -1.3589859008789062e-05, -0.0001506805419921875, 0.0, -0.000579833984375, 0.0, -8.869171142578125e-05, -1.6689286894688848e-06, -0.002698063850402832, 0.0, -1.52587890625e-05, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00043594837188720703, -1.9311904907226562e-05, -0.0011044740676879883, -1.9073486328125e-06, -3.62396240234375e-05, -0.000640869140625, -4.00543212890625e-05, -0.00021743772958870977, -2.1457672119140625e-06, -3.62396240234375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.002445220947265625, -3.24249267578125e-05, -4.76837158203125e-05, 0.0, -0.006548762321472168, -5.841255187988281e-06, -2.4169368743896484, -1.33514404296875e-05, -0.0001212356801261194, 0.0, -5.7220458984375e-06, -5.53131103515625e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, 0.0, -3.8623809814453125e-05, 0.0, -3.814697265625e-06, -2.1457672119140625e-06, -8.344646857949556e-07, -0.11194801330566406, -7.62939453125e-06, -3.814697265625e-05, -0.00093841552734375, -1.9073486328125e-05, -0.00141143798828125, 0.0, -3.62396240234375e-05, -7.62939453125e-06, -2.3126602172851562e-05, -1.9073486328125e-06, -7.43865966796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -6.67572021484375e-05, -2.288818359375e-05, -9.5367431640625e-06, -1.5735626220703125e-05, -0.2392139434814453, -9.5367431640625e-06, -0.0009107589721679688, -0.000827789306640625, -0.05418980121612549, -0.00019882354536093771, -0.2802848815917969, -1.52587890625e-05, -0.012108802795410156, -0.016857147216796875, -1.1444091796875e-05, 0.0, -0.00075531005859375, -1.9073486328125e-06, -0.00608062744140625, 0.0, -0.0011463165283203125, 0.0, -0.024288177490234375, -2.384185791015625e-06, -0.002224445343017578, -1.1920928244535389e-07, -0.0029461514204740524, -4.291525328881107e-06, -0.06907832622528076, -3.814697265625e-05, -2.288818359375e-05, -0.0037107467651367188, -0.000213623046875, -0.0009686565026640892, -4.0531158447265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.0004913805169053376, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Mind", " ", "Blast", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "5", "<EOS>", 89, 141, 14, 136, 11, 129, 11, 129, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 283, 63, 253, "5", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -4.777790543130969, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template15", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -3.9900293350219727, -0.0002288818359375, -1.7881377516459906e-06, -4.911422001896426e-05, -6.198883056640625e-06, -4.9591064453125e-05, -7.033163274172693e-05, -1.9073486328125e-06, -0.00022327899932861328, -0.00012433528900146484, -0.5795183181762695, -0.0004367828369140625, -0.1924896240234375, -7.62939453125e-06, -6.4849853515625e-05, 0.0, -0.005113959312438965, -2.3841855067985307e-07, -0.0047588348388671875, 0.0, -0.0030782222747802734, -5.209310256759636e-05, -3.0517578125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00041472911834716797, -3.933898824470816e-06], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -5.669646709691669, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Mind Blast"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -1.275874137878418, 0.0, -0.00010168540029553697, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -5.245207830739673e-06, 0.0, -0.000156402587890625, -1.1444091796875e-05, -2.09808349609375e-05, -0.0027828216552734375, -0.00019073486328125, -0.0001220703125, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -1.4543427823809907e-05, -2.0265579223632812e-06, -2.110004425048828e-05, 0.0, -0.00022125244140625, -0.000316619873046875, -3.814697265625e-06, -4.172316494077677e-06, -4.8995003453455865e-05, -4.172325134277344e-06, -0.0011997222900390625, -2.09808349609375e-05, -3.814697265625e-06, -6.794929504394531e-05, -1.3589859008789062e-05, -0.0001506805419921875, 0.0, -0.000579833984375, 0.0, -8.869171142578125e-05, -1.6689286894688848e-06, -0.002698063850402832, 0.0, -1.52587890625e-05, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00043594837188720703, -1.9311904907226562e-05, -0.0011044740676879883, -1.9073486328125e-06, -3.62396240234375e-05, -0.000640869140625, -4.00543212890625e-05, -0.00021743772958870977, -2.1457672119140625e-06, -3.62396240234375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.002445220947265625, -3.24249267578125e-05, -4.76837158203125e-05, 0.0, -0.006548762321472168, -5.841255187988281e-06, -0.09427738189697266, -0.001285552978515625, -4.266960144042969, -7.62939453125e-06, -4.1961669921875e-05, 0.0, -0.0020170211791992188, -3.576278118089249e-07, -0.002012491226196289, 0.0, -0.0047965943813323975, -1.4066597032069694e-05, -4.38690185546875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0004374980926513672, -8.106198947643861e-06], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Mind", " ", "Blast", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -5.81539940800257, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.game.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"args": {"args": [{"_type": "arg", "arg": "self"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Str", "s": "Mind Blast"}, {"_type": "Num", "n": 2}, {"_type": "Attribute", "attr": "PRIEST", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"_type": "Attribute", "attr": "FREE", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "keywords": [{"_type": "keyword", "arg": "target_func", "value": {"_type": "Attribute", "attr": "find_spell_target", "value": {"_type": "Attribute", "attr": "targeting", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "_type": "Call", "func": {"_type": "Attribute", "attr": "__init__", "value": {"hole0": "super", "_type": "Template77"}}}}], "_type": "FunctionDef", "name": "__init__"}, {"hole0": {"_type": "Name", "id": "player"}, "_type": "Template0", "hole1": "game", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -1.275874137878418, 0.0, -0.00010168540029553697, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-06, -5.245207830739673e-06, 0.0, -0.000156402587890625, -1.1444091796875e-05, -2.09808349609375e-05, -0.0027828216552734375, -0.00019073486328125, -0.0001220703125, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -1.4543427823809907e-05, -2.0265579223632812e-06, -2.110004425048828e-05, 0.0, -0.00022125244140625, -0.000316619873046875, -3.814697265625e-06, -4.172316494077677e-06, -4.8995003453455865e-05, -4.172325134277344e-06, -0.0011997222900390625, -2.09808349609375e-05, -3.814697265625e-06, -6.794929504394531e-05, -1.3589859008789062e-05, -0.0001506805419921875, 0.0, -0.000579833984375, 0.0, -8.869171142578125e-05, -1.6689286894688848e-06, -0.002698063850402832, 0.0, -1.52587890625e-05, 0.0, -0.0002346038818359375, -1.9073486328125e-06, -0.00043594837188720703, -1.9311904907226562e-05, -0.0011044740676879883, -1.9073486328125e-06, -3.62396240234375e-05, -0.000640869140625, -4.00543212890625e-05, -0.00021743772958870977, -2.1457672119140625e-06, -3.62396240234375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.002445220947265625, -3.24249267578125e-05, -4.76837158203125e-05, 0.0, -0.006548762321472168, -5.841255187988281e-06, -0.09427738189697266, -0.001285552978515625, -0.028166770935058594, 0.0, -4.0659098625183105, 0.0, -0.05284261703491211, 0.0, -0.27113914489746094, -0.003665924072265625, -1.9073486328125e-05, -0.00035190582275390625, -2.861018856492592e-06], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 91, 143, "__init__", "<EOS>", 269, 275, 268, "self", "<EOS>", 295, 89, 141, 14, 137, 11, 129, 33, 260, "super", "<EOS>", "__init__", "<EOS>", 285, 48, 169, "Mind", " ", "Blast", "<EOS>", 47, 165, "2", "<EOS>", 37, 129, 19, 160, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 37, 129, 19, 160, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 290, 79, 271, "target_func", "<EOS>", 11, 129, 11, 129, 19, 160, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 95, 172, 19, 160, "player", "<EOS>", "game", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -6.2780005297619965, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template16", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -5.963878154754639, -0.0004329681396484375, -4.911301948595792e-05, -6.556510925292969e-05, -4.41074053014745e-06, -5.7220458984375e-05, -1.9788689314736985e-05, -1.9073486328125e-06, -0.0012916319537907839, -0.0001888275146484375, -0.23462867736816406, -0.0005474090576171875, -0.06348133087158203, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -0.006118893623352051, -2.3841855067985307e-07, -0.004228711128234863, -1.1920928244535389e-07, -0.0014120936393737793, -5.98412734689191e-05, -5.91278076171875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00038874149322509766, -2.0265558760002023e-06], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 102, 185, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -6.345811242002739, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.game.other_player.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template17", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "game", "value": {"_type": "Name", "id": "player"}}, "_type": "Template0", "hole1": "other_player", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -0.3705635070800781, -0.0032796859741210938, -1.621236151549965e-05, -7.867813110351562e-05, -1.347058241663035e-05, -4.4465065002441406e-05, -2.861022494471399e-06, -2.0265579223632812e-06, -0.0008530616760253906, -3.814697265625e-06, -0.007869720458984375, -0.000324249267578125, -0.00312042236328125, -0.0003032684326171875, -5.340576171875e-05, 0.0, -5.779021739959717, -1.1920928244535389e-07, -0.1594698429107666, 0.0, -0.019136304035782814, -5.960462772236497e-07, -0.00018310546875, -9.5367431640625e-06, -1.33514404296875e-05, -0.0004202127456665039, -1.0728830375228426e-06], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 95, 172, 11, 129, 19, 160, "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -6.433208438858166, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n        self.target.add_buff(Buff(Frozen()))\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template15", "hole1": 2, "hole2": "PRIEST"}, {"args": {"args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}], "_type": "arguments"}, "body": [{"_type": "Expr", "value": {"args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}], "_type": "Call", "func": {"_type": "Attribute", "attr": "use", "value": {"hole0": "super", "_type": "Template77"}}}}, {"_type": "Expr", "value": {"hole0": 5, "_type": "Template47"}}, {"hole0": "Frozen", "_type": "Template50"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -3.9900293350219727, -0.0002288818359375, -1.7881377516459906e-06, -4.911422001896426e-05, -6.198883056640625e-06, -4.9591064453125e-05, -7.033163274172693e-05, -1.9073486328125e-06, -0.00022327899932861328, -0.00012433528900146484, -0.8274478912353516, -9.5367431640625e-06, -0.00013566017150878906, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, 0.0, -7.867813110351562e-06, 0.0, -3.814697265625e-06, -2.0265579223632812e-06, -2.1457672119140625e-06, -0.09493827819824219, -2.09808349609375e-05, -0.00019073486328125, -0.0001659393310546875, -3.814697265625e-05, -0.001346588134765625, -3.814697265625e-06, -4.57763671875e-05, -3.814697265625e-05, -4.208087921142578e-05, -3.814697265625e-06, -4.1961669921875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -6.4849853515625e-05, -1.9073486328125e-05, -9.5367431640625e-06, -1.5735626220703125e-05, -0.42826271057128906, -1.1444091796875e-05, -0.00089263916015625, -0.0007762908935546875, -0.058747053146362305, -0.00023410224821418524, -1.006648063659668, -0.00408935546875, -0.01703619956970215, -2.47955322265625e-05], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 91, 143, "use", "<EOS>", 269, 277, 268, "self", "<EOS>", 268, "player", "<EOS>", 268, "game", "<EOS>", 297, 89, 141, 14, 136, 11, 129, 33, 260, "super", "<EOS>", "use", "<EOS>", 283, 45, 160, "player", "<EOS>", 45, 160, "game", "<EOS>", 89, 141, 25, 223, "5", "<EOS>", 117, 226, "Frozen", "<EOS>"]}, {"score": -6.536525605071084, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template15", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Name", "id": "self"}, "_type": "Template0", "hole1": "target", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -3.9900293350219727, -0.0002288818359375, -1.7881377516459906e-06, -4.911422001896426e-05, -6.198883056640625e-06, -4.9591064453125e-05, -7.033163274172693e-05, -1.9073486328125e-06, -0.00022327899932861328, -0.00012433528900146484, -0.5795183181762695, -0.0004367828369140625, -1.957219123840332, 0.0, -0.0041702985763549805, -3.62396240234375e-05, -0.00214385986328125, -3.814697265625e-06, -0.000286102294921875, -0.0001354217529296875, -3.814697265625e-06, -0.000760316732339561, -2.3841855067985307e-07], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 101, 184, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 95, 172, 19, 160, "self", "<EOS>", "target", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -6.9286110081741725, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.current_player.hero.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template17", "hole1": 2, "hole2": "PRIEST"}, {"hole0": {"_type": "Attribute", "attr": "current_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -0.3705635070800781, -0.0032796859741210938, -1.621236151549965e-05, -7.867813110351562e-05, -1.347058241663035e-05, -4.4465065002441406e-05, -2.861022494471399e-06, -2.0265579223632812e-06, -0.0008530616760253906, -3.814697265625e-06, -0.007869720458984375, -0.000324249267578125, -0.00312042236328125, -0.0003032684326171875, -5.340576171875e-05, 0.0, -0.0031800270080566406, -1.1920928244535389e-07, -6.507515907287598, 0.0, -0.02965172939002514, -9.179073458653875e-06, -0.0002803802490234375, -5.7220458984375e-06, -3.814697265625e-06, -0.000408172607421875, -5.960462772236497e-07], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 103, 186, "Mind", " ", "Blast", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "current_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -7.338955638014326, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 0, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.target_func, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.draw()\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template13", "hole1": "COMMON", "hole2": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}, "_type": "Template5", "hole1": "draw"}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -4.9691667556762695, -0.009490013122558594, -7.354942499659956e-05, -0.00010883807408390567, -6.318092346191406e-06, -0.0005588531494140625, -0.17586863040924072, 0.0, -0.0016336441040039062, -1.9073486328125e-06, -0.6976509094238281, -0.5656986236572266, -0.031180381774902344, 0.0, -0.00012969970703125, 0.0, -0.17744827270507812, 0.0, -0.014507293701171875, -1.1920928244535389e-07, -0.6944053173065186, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Mind", " ", "Blast", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 116, 224, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "draw", "<EOS>"]}, {"score": -7.591086056607857, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 0, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.target_func, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template13", "hole1": "COMMON", "hole2": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "other_player", "value": {"_type": "Name", "id": "game"}}, "_type": "Template0", "hole1": "hero", "hole2": [{"_type": "Num", "n": 5}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -4.9691667556762695, -0.009490013122558594, -7.354942499659956e-05, -0.00010883807408390567, -6.318092346191406e-06, -0.0005588531494140625, -0.17586863040924072, 0.0, -0.0016336441040039062, -1.9073486328125e-06, -2.3924293518066406, -0.0072345733642578125, -0.020252227783203125, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.003355264663696289, -1.1920928244535389e-07, -0.0072231292724609375, -1.1920928244535389e-07, -0.0021565258502960205, -2.8013790142722428e-05, -3.62396240234375e-05, -1.33514404296875e-05, -1.33514404296875e-05, -0.000354528398020193, -8.344646857949556e-07], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Mind", " ", "Blast", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 95, 172, 11, 129, 19, 160, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 282, 47, 165, "5", "<EOS>"]}, {"score": -7.831642001417059, "inferred_code": "class MindBlast(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mind Blast', 0, CHARACTER_CLASS.COMMON,\n            CARD_RARITY.target_func, False)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.heal(player.effective_heal_power(5), self)\n", "model_output": {"body": [{"body": [{"hole0": "Mind Blast", "_type": "Template13", "hole1": "COMMON", "hole2": "target_func"}, {"hole0": {"_type": "Attribute", "attr": "hero", "value": {"_type": "Name", "id": "player"}}, "_type": "Template5", "hole1": "heal", "hole2": [{"args": [{"_type": "Num", "n": 5}], "_type": "Call", "func": {"_type": "Attribute", "attr": "effective_heal_power", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Name", "id": "self"}]}], "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "MindBlast"}], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -1.71661376953125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -1.1920928244535389e-07, -1.4424267646973021e-05, -3.218649908376392e-06, -0.00037384033203125, 0.0, -1.9073486328125e-06, -8.738040196476504e-05, -1.9073486328125e-05, -0.00012981891632080078, -4.1961669921875e-05, -4.9691667556762695, -0.009490013122558594, -7.354942499659956e-05, -0.00010883807408390567, -6.318092346191406e-06, -0.0005588531494140625, -0.17586863040924072, 0.0, -0.0016336441040039062, -1.9073486328125e-06, -0.6976509094238281, -0.9540090560913086, -0.0002307891845703125, 0.0, -0.00055694580078125, 0.0, -0.018346786499023438, 0.0, -0.03377997875213623, 0.0, -0.8427832126617432, -2.3841855067985307e-07, -0.0045948028564453125, -0.000244140625, -6.103515625e-05, -0.028017044067382812, -5.7220458984375e-06, -4.38690185546875e-05, 0.0, -0.004324913024902344, 0.0, -0.05970621109008789, 0.0, -0.0016956329345703125, -0.000514984130859375, -5.7220458984375e-06, -0.0020159208215773106, 0.0, -0.012703895568847656, -3.814697265625e-06, -0.012411355972290039, 0.0], "choice_history": [80, 159, 295, 88, 138, "Mind", "Blast", "<EOS>", 282, 45, 160, "Spell", "Card", "<EOS>", 296, 100, 183, "Mind", " ", "Blast", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 116, 225, 11, 129, 19, 160, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 283, 40, 136, 11, 129, 19, 160, "player", "<EOS>", "effective_heal_power", "<EOS>", 282, 47, 165, "5", "<EOS>", 45, 160, "self", "<EOS>"]}, {"score": -21.23367691040039, "inferred_code": "", "model_output": {"body": [], "_type": "Module"}, "score_history": [-7.62939453125e-06, -0.0002994537353515625, -21.233369827270508], "choice_history": [80, 159, 294]}]}
