{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"score": -0.16604607544439176, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ROGUE", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -0.10655796527862549, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.0012664794921875, 0.0, -3.755042052944191e-05, 0.0, -0.0001277923583984375, -5.53131103515625e-05, -0.0012664794921875, -0.00010835535795195028, -2.7418097943154862e-06, 0.0, 0.0, -0.00016605848213657737, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -3.0671119034320142, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -3.0074853897094727, 0.0, -3.635883331298828e-05, -5.7220458984375e-06, -0.00159454345703125, 0.0, -3.731200922629796e-05, 0.0, -0.000125885009765625, -6.866455078125e-05, -0.0010585784912109375, -9.250211587641388e-05, -2.7418097943154862e-06, 0.0, 0.0, -0.00018310538143850863, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -3.836412364862035, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -3.777338981628418, 0.0, -3.62396240234375e-05, -3.814697265625e-06, -0.00115203857421875, 0.0, -3.814644878730178e-05, 0.0, -0.0001239776611328125, -5.91278076171875e-05, -0.00098419189453125, -8.535019878763705e-05, -2.861018856492592e-06, 0.0, 0.0, -0.00016653529019095004, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -4.001497448908083, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gallywix's Blade"}, {"_type": "Num", "n": 5}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -3.632540702819824, -9.5367431640625e-06, -3.814697265625e-06, -0.0002613067626953125, -0.0042362213134765625, -0.009881019592285156, -0.00037384033203125, -2.09808349609375e-05, -0.0366433821618557, -0.00040912628173828125, -0.0002388704160694033, -1.1801719665527344e-05, -0.0024871826171875, -0.00014495849609375, -7.998623186722398e-05, -6.794917680963408e-06, -0.000469207763671875, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.3589859008789062e-05, 0.0, -0.021789908409118652, 0.0, -0.0020275115966796875, -5.53131103515625e-05, -2.288818359375e-05, -2.47955322265625e-05, 0.0, -0.02362644672393799, 0.0, -3.874247340718284e-05, 0.0, -0.2463703155517578, -0.0002880096435546875, -0.0005931854248046875, -6.234450847841799e-05, -3.4570634852570947e-06, -1.9073486328125e-06, 0.0, -0.00035810424014925957, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Gallywix's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, True)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Gallywix's", " ", "Blade", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 54, 134, "False", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -4.367156915141713, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARLOCK", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -4.30756950378418, 0.0, -2.288818359375e-05, -5.7220458984375e-06, -0.0010280609130859375, 0.0, -4.184180943411775e-05, 0.0, -0.000133514404296875, -5.7220458984375e-05, -0.0015964508056640625, -0.00010835535795195028, -3.099436753473128e-06, 0.0, 0.0, -0.00016915792366489768, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "WARLOCK", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -4.399255379332942, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK><UNK>", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ROGUE", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -4.251922130584717, -0.006180423777550459, -0.00030596344731748104, -1.4066675248614047e-05, -3.576278118089249e-07, 0.0, -0.016954421997070312, -0.0011425018310546875, -0.0008796662441454828, -0.00011336588067933917, -4.172325134277344e-06, 0.0, -0.009497284889221191, -4.410743713378906e-05, -0.10866177082061768, 0.0, -3.0517578125e-05, -3.814697265625e-06, -0.0012359619140625, 0.0, -3.874247340718284e-05, 0.0, -0.000125885009765625, -5.340576171875e-05, -0.00136566162109375, -0.00010060756903840229, -2.7418097943154862e-06, 0.0, 0.0, -0.00016951555153355002, 0.0], "inferred_code": "class <UNK><UNK>(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "<UNK>", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -5.489083105481477, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 3, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -4.770705223083496, -2.6702880859375e-05, -0.6677169799804688, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -0.0011615753173828125, 0.0, -3.4927896194858477e-05, 0.0, -0.0001220703125, -5.53131103515625e-05, -0.0010623931884765625, -9.166773088509217e-05, -2.7418097943154862e-06, 0.0, 0.0, -0.00016975394100882113, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 3, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "3", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -6.047510080644933, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PRIEST", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -5.987868309020996, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.00128173828125, 0.0, -3.886167905875482e-05, 0.0, -0.0001239776611328125, -5.53131103515625e-05, -0.0014247894287109375, -0.00010156114149140194, -2.7418097943154862e-06, 0.0, 0.0, -0.00017070765898097306, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PRIEST", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -6.083774620566082, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "DRUID", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -6.024555683135986, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0010471343994140625, 0.0, -3.445112452027388e-05, 0.0, -0.000125885009765625, -5.7220458984375e-05, -0.001239776611328125, -9.142933413386345e-05, -2.9802276912960224e-06, 0.0, 0.0, -0.0001627206220291555, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -6.085398011198258, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "SHAMAN", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -6.026141166687012, -1.9073486328125e-06, -2.288818359375e-05, -5.7220458984375e-06, -0.0010089874267578125, 0.0, -3.635841858340427e-05, 0.0, -0.0001239776611328125, -5.91278076171875e-05, -0.0013027191162109375, -0.00010549464059295133, -2.861018856492592e-06, 0.0, 0.0, -0.00016570082516409457, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -6.126408548113851, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>BladeBlade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ROGUE", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -5.975212097167969, -0.0012637039180845022, -0.0001674750237725675, -2.6225870897178538e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -0.019496917724609375, -0.0013332366943359375, -0.0011044511338695884, -0.00010001347254728898, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.008795619010925293, -3.254413604736328e-05, -0.10025513172149658, 0.0, -2.86102294921875e-05, -3.814697265625e-06, -0.0012340545654296875, 0.0, -3.766962618101388e-05, 0.0, -0.0001277923583984375, -4.57763671875e-05, -0.00162506103515625, -0.00010442187340231612, -2.861018856492592e-06, 0.0, 0.0, -0.00018429748888593167, 0.0], "inferred_code": "class <UNK>BladeBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -6.261818938296919, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 5, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.00851583480834961, -2.682209014892578e-05, -6.202819347381592, 0.0, -2.288818359375e-05, -5.7220458984375e-06, -0.001068115234375, 0.0, -3.600080526666716e-05, 0.0, -0.0001125335693359375, -6.29425048828125e-05, -0.0009937286376953125, -0.0001050178543664515, -2.861018856492592e-06, 0.0, 0.0, -0.00016868104285094887, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -6.446132593575548, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 3, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -4.770705223083496, -2.6702880859375e-05, -1.6238794326782227, 0.0, -5.543231964111328e-05, -5.7220458984375e-06, -0.0018367767333984375, 0.0, -3.3974247344303876e-05, 0.0, -0.0001220703125, -5.91278076171875e-05, -0.0012416839599609375, -0.00010168034350499511, -2.622600959512056e-06, 0.0, 0.0, -0.00018370144243817776, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 3, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}, {"score": -7.102449255932925, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gallywix's Blade"}, {"_type": "Num", "n": 5}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Num", "n": 5}, {"_type": "Template35"}], "func": {"id": "Weapon", "_type": "Name"}}, "targets": [{"id": "weapon", "_type": "Name"}]}, {"_type": "Return", "value": {"id": "weapon", "_type": "Name"}}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -3.632540702819824, -9.5367431640625e-06, -3.814697265625e-06, -0.0002613067626953125, -0.0042362213134765625, -0.009881019592285156, -0.00037384033203125, -2.09808349609375e-05, -0.0366433821618557, -0.00040912628173828125, -0.0002388704160694033, -1.1801719665527344e-05, -0.0024871826171875, -0.00014495849609375, -7.998623186722398e-05, -6.794917680963408e-06, -0.000469207763671875, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.3589859008789062e-05, 0.0, -0.021789908409118652, 0.0, -0.0020275115966796875, -5.53131103515625e-05, -2.288818359375e-05, -2.47955322265625e-05, 0.0, -0.02362644672393799, 0.0, -3.874247340718284e-05, 0.0, -1.5322904586791992, -0.0006275177001953125, -3.814697265625e-06, -7.05718994140625e-05, -0.000255584716796875, 0.0, -0.15212520956993103, -5.960462772236497e-07, -0.0006542205810546875, -3.814697265625e-06, -0.004183769226074219, -1.71661376953125e-05, -0.6197984218597412, -0.00025054701836779714, -0.0028533935546875, -0.000293731689453125, -2.09808349609375e-05, -0.6296523213386536, -5.364416665543104e-06, -0.23052978515625, -0.09913253784179688, -2.6702880859375e-05, -0.0002193450927734375, -1.9073486328125e-06, -0.07561136782169342, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Gallywix's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, True)\n\n    def create_weapon(self, player):\n        weapon = Weapon(5, 3)\n        return weapon\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Gallywix's", " ", "Blade", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 54, 134, "False", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 218, 82, 103, 205, 53, 133, "weapon", "<EOS>", 20, 111, 25, 133, "Weapon", "<EOS>", 206, 55, 138, "5", "<EOS>", 70, 91, 140, 25, 133, "weapon", "<EOS>"]}, {"score": -7.3023457987453, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "<UNK>Blade", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "HUNTER", "hole1": 3, "hole0": "<UNK> Blade"}], "hole6": [{"_type": "Template20", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-2.09808349609375e-05, -0.000335693359375, -5.161761509953067e-05, -0.01481418963521719, -0.00262481439858675, -0.0005265279905870557, -2.2292029825621285e-05, -3.576278118089249e-07, -1.9073486328125e-06, -0.027370452880859375, -0.0011768341064453125, -0.0008283494389615953, -0.00010216087684966624, -2.1457672119140625e-06, -1.1920928244535389e-07, -4.770705223083496, -2.6702880859375e-05, -2.4798173904418945, -1.9073486328125e-06, -2.8967857360839844e-05, -5.7220458984375e-06, -0.001316070556640625, 0.0, -3.0398065064218827e-05, 0.0, -0.000171661376953125, -4.76837158203125e-05, -0.0019931793212890625, -0.0001557943905936554, -2.0265558760002023e-06, 0.0, 0.0, -0.00016462798521388322, 0.0], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [77, 145, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "<UNK>", " ", "Blade", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"score": -0.05069594872291816, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -0.016466617584228516, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -1.1444075425970368e-05, 0.0, 0.0, -0.023235321044921875, -0.000125885009765625, -1.8954207916976884e-05, -7.748596544843167e-06, -0.0003167390823364258, -1.1920928244535389e-07], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}, {"score": -3.8756992149287655, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -0.016466617584228516, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -1.1444075425970368e-05, 0.0, 0.0, -3.8252029418945312, -2.47955322265625e-05, -2.861022494471399e-06, -7.271740287251305e-06, -4.172307308181189e-05, 0.0, -0.0233156681060791, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -6.127357482910156e-05, 0.0], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, charge=True)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "6", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.882111573988354, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 7, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -4.8412556648254395, 0.0, -0.0001744031615089625, 0.0, -0.022398827597498894, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -1.2397744285408407e-05, 0.0, 0.0, -0.015413284301757812, -0.000118255615234375, -1.871579297585413e-05, -7.629387255292386e-06, -0.0002995729446411133, -1.1920928244535389e-07], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 7, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}, {"score": -4.979141883977704, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -4.8377766609191895, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.0490381100680679e-05, 0.0, -1.9073486328125e-06, -0.13043975830078125, -0.0001049041748046875, -2.062316343653947e-05, -7.748596544843167e-06, -0.0002760887145996094, -1.1920928244535389e-07], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}, {"score": -5.506328039335116, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -5.4035258293151855, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.1444089977885596e-05, 0.0, 0.0, -0.09190654754638672, -7.2479248046875e-05, -1.5854799130465835e-05, -8.463848644169047e-06, -0.0002760887145996094, -1.1920928244535389e-07], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}, {"score": -6.357959799901423, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -5.9828200340271, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.3112994565744884e-05, 0.0, 0.0, -0.3642110824584961, -0.0001010894775390625, -1.609321407158859e-05, -1.0848032616195269e-05, -0.00027811527252197266, -1.1920928244535389e-07], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}, {"score": -6.557740894118062, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Boulderfist<UNK>", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -6.408937931060791, -2.205361488449853e-05, -7.808208465576172e-06, -9.655952453613281e-06, 0.0, 0.0, -0.0001220703125, -3.62396240234375e-05, -8.22540732769994e-06, -6.961822509765625e-05, -6.198883056640625e-06, -8.7738037109375e-05, -0.007015954703092575, -1.71661376953125e-05, -8.201598393497989e-05, 0.0, -0.018554329872131348, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -8.940683983382769e-06, 0.0, 0.0, -0.12182140350341797, -0.0001068115234375, -1.8358168745180592e-05, -1.0848032616195269e-05, -0.0003126859664916992, -1.1920928244535389e-07], "inferred_code": "class Boulderfist<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [77, 145, "Boulderfist", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}, {"score": -7.011197738704816, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -4.8377766609191895, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.0490381100680679e-05, 0.0, -1.9073486328125e-06, -2.135226249694824, -2.09808349609375e-05, -2.503394853192731e-06, -7.271740287251305e-06, -3.468980867182836e-05, 0.0, -0.027500629425048828, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -6.318092346191406e-05, 0.0], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(6, 7, charge=True)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "6", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.2235836315228354, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -5.9828200340271, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.3112994565744884e-05, 0.0, 0.0, -1.1995344161987305, -2.09808349609375e-05, -2.503394853192731e-06, -6.318072337307967e-06, -4.0650207665748894e-05, 0.0, -0.030521631240844727, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -6.508827209472656e-05, 0.0], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, charge=True)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "6", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.748864448845765, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Ogre", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -7.698622703552246, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -0.016466617584228516, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -1.1444075425970368e-05, 0.0, 0.0, -0.023235321044921875, -0.000125885009765625, -1.8954207916976884e-05, -7.748596544843167e-06, -0.0003167390823364258, -1.1920928244535389e-07], "inferred_code": "class <UNK>Ogre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [77, 145, "<UNK>", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}, {"score": -7.891798071882242, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -5.4035258293151855, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.1444089977885596e-05, 0.0, 0.0, -2.4483518600463867, -2.09808349609375e-05, -2.503394853192731e-06, -5.8412379075889476e-06, -4.1484658140689135e-05, 0.0, -0.02921605110168457, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -6.127357482910156e-05, 0.0], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(6, 7, charge=True)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "6", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.058141156623428, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -0.016466617584228516, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -1.1444075425970368e-05, 0.0, 0.0, -7.654336929321289, -1.52587890625e-05, -9.5367431640625e-06, -0.00040435791015625, -0.009554862976074219, -0.2651329040527344, -0.000133514404296875, -1.9073486328125e-06, -0.00014208737411536276, -7.307522173505276e-05, -1.9907789464923553e-05, -7.82012939453125e-05, -0.02578449249267578, -3.814697265625e-06, -0.0007206221343949437, -5.960462772236497e-07, -0.000499725341796875, -0.0059795379638671875, -0.000514984130859375, -0.0018405914306640625, -0.061887502670288086, -5.7220458984375e-06, -0.0039005279541015625, -6.29425048828125e-05, -4.4465065002441406e-05, -1.9073486328125e-06], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, True)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Boulderfist", " ", "Ogre", "<EOS>", 55, 138, "6", "<EOS>", 65, 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>"]}, {"score": -8.115247540596094, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -0.016466617584228516, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -1.1444075425970368e-05, 0.0, 0.0, -0.023235321044921875, -0.000125885009765625, -1.8954207916976884e-05, -7.748596544843167e-06, -8.064866065979004, -2.384185791015625e-06], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -8.200542740966725, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BoulderfistOgre", "hole2": [{"_type": "Template6", "hole3": "ALL", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -0.0016508804401382804, -1.1920928244535389e-07, -9.47713851928711e-06, -5.841255187988281e-06, 0.0, 0.0, -0.00014495849609375, -2.09808349609375e-05, -8.106198947643861e-06, -6.592273712158203e-05, -8.344650268554688e-06, -1.9073486328125e-05, -0.008017566055059433, -9.5367431640625e-06, -7.331370579777285e-05, 0.0, -7.868661403656006, 0.0, -5.7220458984375e-06, 0.0, -1.0609614946588408e-05, 0.0, 0.0, -0.3209543228149414, -8.96453857421875e-05, -1.645084012125153e-05, -1.1324866136419587e-05, -0.00029337406158447266, -1.1920928244535389e-07], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.ALL)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [77, 145, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "7", "<EOS>"]}, {"score": -8.642165628136809, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Boulderfist<UNK>", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004542034293990582, -6.408937931060791, -2.205361488449853e-05, -7.808208465576172e-06, -9.655952453613281e-06, 0.0, 0.0, -0.0001220703125, -3.62396240234375e-05, -8.22540732769994e-06, -6.961822509765625e-05, -6.198883056640625e-06, -8.7738037109375e-05, -0.007015954703092575, -1.71661376953125e-05, -8.201598393497989e-05, 0.0, -0.018554329872131348, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -8.940683983382769e-06, 0.0, 0.0, -2.1815147399902344, -2.09808349609375e-05, -2.741813204920618e-06, -7.152531907195225e-06, -3.8027617847546935e-05, 0.0, -0.025000452995300293, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -5.936622619628906e-05, 0.0], "inferred_code": "class Boulderfist<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, charge=True)\n", "choice_history": [77, 145, "Boulderfist", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "6", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"score": -0.7779379791816083, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.13416814804077148, 0.0, -0.000102996826171875, 0.0, -0.0005090152262710035, 0.0, -0.0001220703125, -8.7738037109375e-05, -0.0001659393310546875, -1.1444091796875e-05, -1.1920928244535389e-07, -0.06024360656738281, -3.814697265625e-06, -8.392333984375e-05, -0.0003299713134765625, -0.0001049041748046875, -1.9073486328125e-06, -0.000118255615234375, 0.0, -0.00020122528076171875, 0.0, -0.0001558065414428711, 0.0, -0.34340977668762207, 0.0, -1.52587890625e-05, -0.0005168914794921875, -0.0008220672607421875, -0.0020122528076171875, -8.225440979003906e-05, -1.33514404296875e-05, 0.0, -0.1565149873495102, -0.0002495049557182938], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -2.3859350539921635, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.13416814804077148, 0.0, -0.000102996826171875, 0.0, -0.0005090152262710035, 0.0, -0.0001220703125, -8.7738037109375e-05, -0.0001659393310546875, -1.1444091796875e-05, -1.1920928244535389e-07, -0.06024360656738281, -3.814697265625e-06, -8.392333984375e-05, -0.0003299713134765625, -0.0001049041748046875, -1.9073486328125e-06, -0.000118255615234375, 0.0, -0.00020122528076171875, 0.0, -0.0001558065414428711, 0.0, -1.9772608280181885, 0.0, -0.0001678466796875, -0.01735401153564453, -0.0002040863037109375, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.11348891258239746, -1.9073486328125e-06, -1.9073486328125e-05, -0.0022830963134765625, -9.5367431640625e-06, -5.7220458984375e-06, -0.000825047492980957, 0.0], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -2.631687984633338, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.13416814804077148, 0.0, -0.000102996826171875, 0.0, -0.0005090152262710035, 0.0, -0.0001220703125, -8.7738037109375e-05, -0.0001659393310546875, -1.1444091796875e-05, -1.1920928244535389e-07, -0.06024360656738281, -3.814697265625e-06, -8.392333984375e-05, -0.0003299713134765625, -0.0001049041748046875, -1.9073486328125e-06, -0.000118255615234375, 0.0, -0.00020122528076171875, 0.0, -0.0001558065414428711, 0.0, -2.357212781906128, 0.0, -5.7220458984375e-06, -0.0001678466796875], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -2.9327726222752446, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.13416814804077148, 0.0, -0.000102996826171875, 0.0, -0.0005090152262710035, 0.0, -0.0001220703125, -8.7738037109375e-05, -0.0001659393310546875, -1.1444091796875e-05, -1.1920928244535389e-07, -0.06024360656738281, -3.814697265625e-06, -8.392333984375e-05, -0.0003299713134765625, -0.0001049041748046875, -1.9073486328125e-06, -0.000118255615234375, 0.0, -0.00020122528076171875, 0.0, -0.0001558065414428711, 0.0, -0.34340977668762207, 0.0, -1.52587890625e-05, -0.0005168914794921875, -0.0008220672607421875, -0.0020122528076171875, -8.225440979003906e-05, -1.33514404296875e-05, 0.0, -2.3115952014923096, -3.933906555175781e-06], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Frozen", "<EOS>"]}, {"score": -3.762830024736786, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -3.0466179847717285, -1.33514404296875e-05, -0.00011444091796875, 0.0, -0.0006681944942101836, 0.0, -0.0001430511474609375, -3.0517578125e-05, -9.72747802734375e-05, -1.9073486328125e-05, 0.0, -0.09964752197265625, -3.814697265625e-06, -9.5367431640625e-05, -0.00038909912109375, -0.0001049041748046875, 0.0, -0.0001506805419921875, 0.0, -0.000179290771484375, 0.0, -0.0001538991928100586, 0.0, -0.3762543201446533, 0.0, -1.52587890625e-05, -0.00054931640625, -0.00077056884765625, -0.001983642578125, -8.034706115722656e-05, -1.33514404296875e-05, 0.0, -0.15660057961940765, -0.00024342528195120394], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -4.213362720393654, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -3.572378635406494, -1.71661376953125e-05, -0.000164031982421875, 0.0, -0.00016270835476461798, 0.0, -0.0001316070556640625, -0.0001678466796875, -0.0002765655517578125, -1.1444091796875e-05, -1.1920928244535389e-07, -0.052715301513671875, -3.814697265625e-06, -7.82012939453125e-05, -0.000335693359375, -0.0001049041748046875, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.00021076202392578125, 0.0, -0.00016629695892333984, 0.0, -0.33472466468811035, 0.0, -1.52587890625e-05, -0.0004978179931640625, -0.00084686279296875, -0.0020236968994140625, -8.416175842285156e-05, -1.33514404296875e-05, 0.0, -0.16996054351329803, -0.0002431868779240176], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -4.2617248155354375, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.13416814804077148, 0.0, -0.000102996826171875, 0.0, -0.0005090152262710035, 0.0, -0.0001220703125, -8.7738037109375e-05, -0.0001659393310546875, -1.1444091796875e-05, -1.1920928244535389e-07, -0.06024360656738281, -3.814697265625e-06, -8.392333984375e-05, -0.0003299713134765625, -0.0001049041748046875, -1.9073486328125e-06, -0.000118255615234375, 0.0, -0.00020122528076171875, 0.0, -0.0001558065414428711, 0.0, -3.92323899269104, 0.0, -1.9073486328125e-06, -0.06418228149414062], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(2)\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 68]}, {"score": -4.330248923221674, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.13416814804077148, 0.0, -0.000102996826171875, 0.0, -0.0005090152262710035, 0.0, -0.0001220703125, -8.7738037109375e-05, -0.0001659393310546875, -1.1444091796875e-05, -1.1920928244535389e-07, -2.870621681213379, -1.71661376953125e-05, -0.000667572021484375, -0.0001010894775390625, -3.0517578125e-05, 0.0, -0.0019512176513671875, 0.0, -0.0011138916015625, 0.0, -0.00014591217041015625, 0.0, -1.072982907295227, 0.0, 0.0, -7.05718994140625e-05, -0.000148773193359375, -0.0003795623779296875, -4.00543212890625e-05, 0.0, -0.1074371337890625, -0.00099001859780401, 0.0, -0.060349464416503906, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0001373291015625], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        player.hero.increase_armor(2)\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -4.394039086727155, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -3.6526131629943848, 0.0, -0.0003566741943359375, 0.0, -0.0003302822879049927, 0.0, -0.00018310546875, -2.6702880859375e-05, -6.866455078125e-05, -1.52587890625e-05, -1.1920928244535389e-07, -0.10274505615234375, -3.814697265625e-06, -0.0001010894775390625, -0.000362396240234375, -9.72747802734375e-05, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -0.0001697540283203125, 0.0, -0.0001481771469116211, 0.0, -0.37862133979797363, 0.0, -1.52587890625e-05, -0.0004711151123046875, -0.0007171630859375, -0.0018901824951171875, -8.225440979003906e-05, -1.33514404296875e-05, 0.0, -0.176747664809227, -0.0002349614369450137], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -5.107637450818167, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Deadly Poison"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -0.05450248718261719, -1.9073486328125e-06, -1.9073486328125e-06, -0.00164031982421875, -1.1444091796875e-05, -0.001743316650390625, -3.24249267578125e-05, -3.814697265625e-06, -1.4185804502631072e-05, -5.447858711704612e-05, -3.099440846199286e-06, -1.1920922133867862e-06, -3.0517578125e-05, -6.67572021484375e-05, -4.57763671875e-05, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.016811132431030273, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, -7.62939453125e-06, -3.814697265625e-05, -2.47955322265625e-05, -5.340576171875e-05, -1.9073486328125e-06, -6.4849853515625e-05, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -0.13416814804077148, 0.0, -0.000102996826171875, 0.0, -0.0005090152262710035, 0.0, -0.0001220703125, -8.7738037109375e-05, -0.0001659393310546875, -1.1444091796875e-05, -1.1920928244535389e-07, -2.870621681213379, -1.71661376953125e-05, -0.000667572021484375, -0.0001010894775390625, -3.0517578125e-05, 0.0, -0.0019512176513671875, 0.0, -0.0011138916015625, 0.0, -0.00014591217041015625, 0.0, -0.9225016832351685, 0.0, -2.288818359375e-05, -0.000453948974609375, -0.0013446807861328125, -0.0014630556106567383, -7.11679458618164e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.25213736295700073, -0.00024008746549952775, -4.1961669921875e-05, -0.3778076171875, -0.2732582092285156, -1.9073486328125e-06, -0.00693511962890625, -1.9073486328125e-06, -0.18171119689941406, 0.0, -0.0011467933654785156, 0.0, -0.0007772445678710938, 0.0], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Deadly", " ", "Poison", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -5.908574132647971, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "SHAMAN", "hole1": 1, "hole0": "Deadly Poison"}], "hole6": [{"_type": "Template10"}, {"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_heal_power", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "heal", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -2.9392786026000977, -1.1444091796875e-05, -5.722038622479886e-06, -5.173651879886165e-05, -2.622604142743512e-06, -2.1457672119140625e-06, -1.1920923270736239e-07, -0.00012636177416425198, -0.7982503175735474, -9.5367431640625e-06, -0.002155303955078125, 0.0, -0.0001049041748046875, 0.0, -3.6716039176099e-05, 0.0, -1.52587890625e-05, -3.0517578125e-05, -3.4332275390625e-05, -7.748603820800781e-06, -4.0531158447265625e-06, -0.008927345275878906, -1.9073486328125e-06, -0.46755313873291016, -2.6702880859375e-05, -3.24249267578125e-05, -1.33514404296875e-05, -0.06726562976837158, -2.09808349609375e-05, -0.4232664108276367, -1.9073486328125e-06, -0.010402679443359375, -0.0005682625342160463, 0.0, -7.62939453125e-06, -0.0002651214599609375, -0.00559234619140625, -0.0044498443603515625, -1.9073486328125e-06, -0.0001647472381591797, -1.9073486328125e-06, -1.151803970336914, 0.0, -9.5367431640625e-05, -0.0002460479736328125, -7.2479248046875e-05, -2.47955322265625e-05, -1.9073486328125e-06, -2.09808349609375e-05, -0.0023764800280332565, -0.00020229816436767578, -9.5367431640625e-06, -0.022220611572265625, -5.7220458984375e-06, -5.7220458984375e-06, -0.0006792545318603516, 0.0], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.heal(player.effective_heal_power(2), self)\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 87, 117, 25, 133, "minion", "<EOS>", 17, 104, 42, "minions", "<EOS>", 217, 97, 166, 25, 133, "minion", "<EOS>", "heal", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_heal_power", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -5.910827332342649, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "SHAMAN", "hole1": 1, "hole0": "Deadly Poison"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -2.9392786026000977, -1.1444091796875e-05, -5.722038622479886e-06, -5.173651879886165e-05, -2.622604142743512e-06, -2.1457672119140625e-06, -1.1920923270736239e-07, -0.00012636177416425198, -0.7982503175735474, -9.5367431640625e-06, -0.002155303955078125, 0.0, -0.0001049041748046875, 0.0, -3.6716039176099e-05, 0.0, -1.52587890625e-05, -3.0517578125e-05, -3.4332275390625e-05, -7.748603820800781e-06, -4.0531158447265625e-06, -0.008927345275878906, -1.9073486328125e-06, -1.0869474411010742, -0.000286102294921875, -8.392333984375e-05, -3.0517578125e-05, -0.13550186157226562, 0.0, -0.0005521774291992188, -5.7220458984375e-06, -8.487701416015625e-05, 0.0, -0.32260334491729736, 0.0, -3.0517578125e-05, -0.0014400482177734375, -0.016489028930664062, -0.009446144104003906, -6.878376007080078e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.5860593914985657, -6.318092346191406e-06], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Frozen", "<EOS>"]}, {"score": -5.96821139792786, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "SHAMAN", "hole1": 1, "hole0": "Deadly Poison"}], "hole6": [{"_type": "Template10"}, {"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -2.9392786026000977, -1.1444091796875e-05, -5.722038622479886e-06, -5.173651879886165e-05, -2.622604142743512e-06, -2.1457672119140625e-06, -1.1920923270736239e-07, -0.00012636177416425198, -0.7982503175735474, -9.5367431640625e-06, -0.002155303955078125, 0.0, -0.0001049041748046875, 0.0, -3.6716039176099e-05, 0.0, -1.52587890625e-05, -3.0517578125e-05, -3.4332275390625e-05, -7.748603820800781e-06, -4.0531158447265625e-06, -0.008927345275878906, -1.9073486328125e-06, -0.46755313873291016, -2.6702880859375e-05, -3.24249267578125e-05, -1.33514404296875e-05, -0.06726562976837158, -2.09808349609375e-05, -0.4232664108276367, -1.9073486328125e-06, -0.010402679443359375, -0.0005682625342160463, 0.0, -7.62939453125e-06, -0.0002651214599609375, -0.00559234619140625, -0.0044498443603515625, -1.9073486328125e-06, -0.0001647472381591797, -1.9073486328125e-06, -1.235628604888916, 0.0, -3.814697265625e-06, -0.00177001953125], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(2)\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 87, 117, 25, 133, "minion", "<EOS>", 17, 104, 42, "minions", "<EOS>", 217, 97, 166, 25, 133, "minion", "<EOS>", "change_temp_attack", "<EOS>", 205, 68]}, {"score": -6.275195226472476, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "SHAMAN", "hole1": 1, "hole0": "Deadly Poison"}], "hole6": [{"_type": "Template10"}, {"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -2.9392786026000977, -1.1444091796875e-05, -5.722038622479886e-06, -5.173651879886165e-05, -2.622604142743512e-06, -2.1457672119140625e-06, -1.1920923270736239e-07, -0.00012636177416425198, -0.7982503175735474, -9.5367431640625e-06, -0.002155303955078125, 0.0, -0.0001049041748046875, 0.0, -3.6716039176099e-05, 0.0, -1.52587890625e-05, -3.0517578125e-05, -3.4332275390625e-05, -7.748603820800781e-06, -4.0531158447265625e-06, -0.008927345275878906, -1.9073486328125e-06, -0.46755313873291016, -2.6702880859375e-05, -3.24249267578125e-05, -1.33514404296875e-05, -0.06726562976837158, -2.09808349609375e-05, -0.4232664108276367, -1.9073486328125e-06, -0.010402679443359375, -0.0005682625342160463, 0.0, -7.62939453125e-06, -0.0002651214599609375, -0.00559234619140625, -0.0044498443603515625, -1.9073486328125e-06, -0.0001647472381591797, -1.9073486328125e-06, -1.522362232208252, 0.0, -4.57763671875e-05, -0.0002918243408203125, -0.004116058349609375, -0.000574946403503418, -3.9577484130859375e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.016898512840270996, -2.0265579223632812e-06], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.add_buff(Buff(Frozen()))\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 87, 117, 25, 133, "minion", "<EOS>", 17, 104, 42, "minions", "<EOS>", 217, 97, 166, 25, 133, "minion", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Frozen", "<EOS>"]}, {"score": -6.2766429709653835, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "DeadlyPoison", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "SHAMAN", "hole1": 1, "hole0": "Deadly Poison"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-9.72747802734375e-05, -0.00186920166015625, -7.152555099310121e-07, -9.774702630238608e-05, -4.887569048150908e-06, -2.264278009533882e-06, -4.0769344195723534e-05, -2.50339189733495e-06, -1.9073486328125e-06, -2.9392786026000977, -1.1444091796875e-05, -5.722038622479886e-06, -5.173651879886165e-05, -2.622604142743512e-06, -2.1457672119140625e-06, -1.1920923270736239e-07, -0.00012636177416425198, -0.7982503175735474, -9.5367431640625e-06, -0.002155303955078125, 0.0, -0.0001049041748046875, 0.0, -3.6716039176099e-05, 0.0, -1.52587890625e-05, -3.0517578125e-05, -3.4332275390625e-05, -7.748603820800781e-06, -4.0531158447265625e-06, -0.008927345275878906, -1.9073486328125e-06, -1.0869474411010742, -0.000286102294921875, -8.392333984375e-05, -3.0517578125e-05, -0.13550186157226562, 0.0, -0.0005521774291992188, -5.7220458984375e-06, -8.487701416015625e-05, 0.0, -0.32260334491729736, 0.0, -3.0517578125e-05, -0.0014400482177734375, -0.016489028930664062, -0.009446144104003906, -6.878376007080078e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.9511855244636536, -0.0006958237499929965], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"score": -0.6368412513574171, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -0.22967529296875, -1.1444091796875e-05, -1.9073486328125e-06, -0.004638671875, -2.3841855067985307e-07, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.872943878173828e-05, -3.814697265625e-06, -2.09808349609375e-05, -0.0018367767333984375, -0.000133514404296875, -0.00040049428935162723, -0.0009255962795577943, -0.136848583817482, -3.4689426684053615e-05, -0.05846405029296875, -0.004215240478515625, -3.814697265625e-06, -6.866455078125e-05, -0.05798542499542236, -1.9073486328125e-05, 0.0, -0.04840087890625, -0.000202178955078125, -1.9073486328125e-06, -0.0030750036239624023, -1.1920928244535389e-07, -0.000698089599609375, -5.7220458984375e-06, -0.00012886524200439453, -2.872943878173828e-05, -1.9073486328125e-06, 0.0, 0.0, -0.012679100036621094, 0.0, -0.0048675537109375, -5.7220458984375e-06, -0.0004773139953613281, -0.00014555452798958868, -7.259842823259532e-05, -0.00012421607971191406, -1.9073486328125e-06, -5.888787200092338e-05, 0.0, -0.000118255615234375, -0.005953788757324219, -0.0004749298095703125, -0.00010657003440428525, -1.7881233361549675e-05, -3.3974622056121007e-05, -3.457069396972656e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -2.133300191587118, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -1.5889902114868164, -0.13962173461914062, -9.1552734375e-05, -0.02297508716583252, 0.0, -1.33514404296875e-05, 0.0, -0.001761317253112793, -4.768370445162873e-07, -4.57763671875e-05, -5.91278076171875e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.5497207641601562e-05, -5.7220458984375e-06, -3.0517578125e-05, -0.0014057159423828125, -0.0001087188720703125, -0.000370700319763273, -0.0010625518625602126, -0.13470061123371124, -3.2901341910474e-05, -0.06025886535644531, -0.0039520263671875, -3.814697265625e-06, -6.67572021484375e-05, -0.04017078876495361, -1.9073486328125e-05, 0.0, -0.04253673553466797, -0.0002002716064453125, -1.9073486328125e-06, -0.0036797523498535156, -1.1920928244535389e-07, -0.0007419586181640625, -7.62939453125e-06, -0.00013077259063720703, -2.872943878173828e-05, -1.9073486328125e-06, 0.0, 0.0, -0.014029502868652344, 0.0, -0.004878997802734375, -5.7220458984375e-06, -0.0004736185073852539, -0.00013995169138070196, -6.604192458325997e-05, -0.00012803077697753906, -1.9073486328125e-06, -5.721903289668262e-05, 0.0, -0.000118255615234375, -0.005963325500488281, -0.000476837158203125, -0.00010716603719629347, -1.9788581994362175e-05, -3.3974622056121007e-05, -3.457069396972656e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(3), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -3.0342535369817654, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 5, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -0.22967529296875, -1.1444091796875e-05, -1.9073486328125e-06, -0.004638671875, -2.3841855067985307e-07, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.872943878173828e-05, -3.814697265625e-06, -2.09808349609375e-05, -0.0018367767333984375, -0.000133514404296875, -0.00040049428935162723, -0.0009255962795577943, -2.572451114654541, -1.192092622659402e-05, -0.0558013916015625, -0.0028438568115234375, -5.7220458984375e-06, -1.33514404296875e-05, -0.027330756187438965, -1.1444091796875e-05, 0.0, -0.04483795166015625, -0.0002079010009765625, -1.9073486328125e-06, -0.003316164016723633, 0.0, -0.0005817413330078125, -3.814697265625e-06, -9.834766387939453e-05, -3.063678741455078e-05, -1.9073486328125e-06, 0.0, 0.0, -0.012468338012695312, 0.0, -0.005131721496582031, -5.7220458984375e-06, -0.0005022287368774414, -0.00014567373727913946, -8.463855920126662e-05, -0.00011849403381347656, -1.9073486328125e-06, -5.900707401451655e-05, 0.0, -0.0001201629638671875, -0.005913734436035156, -0.0004749298095703125, -0.00010716603719629347, -1.7881233361549675e-05, -3.3974622056121007e-05, -3.254413604736328e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(5),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "5", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -3.413275918889582, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -0.22967529296875, -1.1444091796875e-05, -1.9073486328125e-06, -0.004638671875, -2.3841855067985307e-07, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.872943878173828e-05, -3.814697265625e-06, -2.09808349609375e-05, -0.0018367767333984375, -0.000133514404296875, -0.00040049428935162723, -0.0009255962795577943, -0.136848583817482, -3.4689426684053615e-05, -2.925015449523926, -0.0104522705078125, -0.032313376665115356, -0.00027248586411587894, -1.5735626220703125e-05, -0.00013554096221923828, 0.0, -9.83476493274793e-05, 0.0, -7.2479248046875e-05, -0.0062274932861328125, -0.000164031982421875, -3.981559711974114e-05, -1.871571657829918e-05, -3.159045081702061e-05, -4.982948303222656e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -3.531008555878458, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "HeroSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -0.22967529296875, -1.1444091796875e-05, -1.9073486328125e-06, -0.004638671875, -2.3841855067985307e-07, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.872943878173828e-05, -3.814697265625e-06, -2.09808349609375e-05, -0.0018367767333984375, -0.000133514404296875, -0.00040049428935162723, -0.0009255962795577943, -0.136848583817482, -3.4689426684053615e-05, -0.05846405029296875, -0.004215240478515625, -3.814697265625e-06, -6.866455078125e-05, -2.9314937591552734, -2.3126602172851562e-05, 0.0, -0.08592987060546875, -1.71661376953125e-05, 0.0, -0.006855607032775879, 0.0, -0.0001735687255859375, -7.62939453125e-06, -0.00023794172739144415, -3.635883331298828e-05, -1.9073486328125e-06, -6.29425048828125e-05, 0.0, -7.6293927122605965e-06, 0.0, -0.000682830810546875, -0.0036163330078125, -0.0005397796630859375, -9.524452616460621e-05, -3.516612196108326e-05, -3.659724825411104e-05, -3.457069396972656e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector\n            (players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Hero", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -3.679735019944843, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -0.22967529296875, -1.1444091796875e-05, -1.9073486328125e-06, -0.004638671875, -2.3841855067985307e-07, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.872943878173828e-05, -3.814697265625e-06, -2.09808349609375e-05, -0.0018367767333984375, -0.000133514404296875, -0.00040049428935162723, -0.0009255962795577943, -0.136848583817482, -3.4689426684053615e-05, -0.05846405029296875, -0.004215240478515625, -3.814697265625e-06, -6.866455078125e-05, -0.05798542499542236, -1.9073486328125e-05, 0.0, -3.1037139892578125, -9.5367431640625e-06, 0.0, -0.010202765464782715, 0.0, -0.0001678466796875, -7.62939453125e-06, -0.00017130373453255743, -4.410743713378906e-05, -1.9073486328125e-06, -6.103515625e-05, 0.0, -7.987019671418238e-06, 0.0, -0.0006351470947265625, -0.004824638366699219, -0.0005645751953125, -8.451655594399199e-05, -3.838465272565372e-05, -3.814697265625e-05, -3.647804260253906e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -4.140637218299986, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 6, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -0.22967529296875, -1.1444091796875e-05, -1.9073486328125e-06, -0.004638671875, -2.3841855067985307e-07, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.872943878173828e-05, -3.814697265625e-06, -2.09808349609375e-05, -0.0018367767333984375, -0.000133514404296875, -0.00040049428935162723, -0.0009255962795577943, -3.6566972732543945, -1.1205645932932384e-05, -0.10803413391113281, -0.004311561584472656, -2.47955322265625e-05, -2.288818359375e-05, -0.0250169038772583, -1.52587890625e-05, 0.0, -0.017164230346679688, -0.0001239776611328125, -1.9073486328125e-06, -0.0027506351470947266, 0.0, -0.000431060791015625, -5.7220458984375e-06, -0.00011360645294189453, -3.063678741455078e-05, -1.9073486328125e-06, 0.0, 0.0, -0.012217521667480469, 0.0, -0.004245758056640625, -5.7220458984375e-06, -0.0004792213439941406, -0.00014936922525521368, -7.867810199968517e-05, -0.00012040138244628906, -1.9073486328125e-06, -6.258314533624798e-05, 0.0, -0.000118255615234375, -0.006257057189941406, -0.000469207763671875, -0.00010394763376098126, -1.8000440832111053e-05, -3.3855412766570225e-05, -3.254413604736328e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(6),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "6", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -4.4667950251249735, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 0, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -0.22967529296875, -1.1444091796875e-05, -1.9073486328125e-06, -0.004638671875, -2.3841855067985307e-07, -3.4332275390625e-05, -9.5367431640625e-05, -2.47955322265625e-05, -3.814697265625e-06, -2.872943878173828e-05, -3.814697265625e-06, -2.09808349609375e-05, -0.0018367767333984375, -0.000133514404296875, -0.00040049428935162723, -0.0009255962795577943, -3.9937500953674316, -0.000187753263162449, -0.011129379272460938, -0.003154754638671875, -5.7220458984375e-06, -2.47955322265625e-05, -0.0979386568069458, -1.1444091796875e-05, 0.0, -0.028049468994140625, -0.0001468658447265625, -1.9073486328125e-06, -0.004237651824951172, -1.1920928244535389e-07, -0.000530242919921875, -3.814697265625e-06, -0.00010979175567626953, -3.063678741455078e-05, -1.9073486328125e-06, 0.0, 0.0, -0.013891220092773438, 0.0, -0.004498481750488281, -5.7220458984375e-06, -0.0005022287368774414, -0.00014591215585824102, -7.677075336687267e-05, -0.00012612342834472656, -1.9073486328125e-06, -5.8053454267792404e-05, 0.0, -0.000118255615234375, -0.0058956146240234375, -0.0004787445068359375, -0.00010907323303399608, -1.9669374523800798e-05, -3.409382770769298e-05, -3.266334533691406e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(0),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "Deal", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -4.549143266568443, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -4.085507392883301, 0.0, -4.1961669921875e-05, -0.10737991333007812, -1.33514404296875e-05, -1.9073486328125e-06, -0.0034570693969726562, -2.3841855067985307e-07, -4.57763671875e-05, -8.0108642578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -3.063678741455078e-05, -3.814697265625e-06, -2.288818359375e-05, -0.0018024444580078125, -0.0001316070556640625, -0.00038261833833530545, -0.0008990349597297609, -0.13388989865779877, -3.4689426684053615e-05, -0.06876182556152344, -0.0041790008544921875, -5.7220458984375e-06, -7.43865966796875e-05, -0.059848904609680176, -1.9073486328125e-05, 0.0, -0.05037117004394531, -0.0002040863037109375, -1.9073486328125e-06, -0.003074049949645996, -1.1920928244535389e-07, -0.000698089599609375, -5.7220458984375e-06, -0.00012886524200439453, -2.872943878173828e-05, -1.9073486328125e-06, 0.0, 0.0, -0.012561798095703125, 0.0, -0.004841804504394531, -5.7220458984375e-06, -0.0004773139953613281, -0.00014555452798958868, -7.259842823259532e-05, -0.00012421607971191406, -1.9073486328125e-06, -5.900707401451655e-05, 0.0, -0.0001201629638671875, -0.00595855712890625, -0.0004749298095703125, -0.0001064508396666497, -1.7881233361549675e-05, -3.3974622056121007e-05, -3.457069396972656e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -4.558772734598108, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 5, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -1.5889902114868164, -0.13962173461914062, -9.1552734375e-05, -0.02297508716583252, 0.0, -1.33514404296875e-05, 0.0, -0.001761317253112793, -4.768370445162873e-07, -4.57763671875e-05, -5.91278076171875e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.5497207641601562e-05, -5.7220458984375e-06, -3.0517578125e-05, -0.0014057159423828125, -0.0001087188720703125, -0.000370700319763273, -0.0010625518625602126, -2.6046173572540283, -1.2397762475302443e-05, -0.037250518798828125, -0.003017425537109375, -3.814697265625e-06, -1.1444091796875e-05, -0.02282547950744629, -1.1444091796875e-05, 0.0, -0.03931140899658203, -0.00020599365234375, -1.9073486328125e-06, -0.004058241844177246, 0.0, -0.0006160736083984375, -3.814697265625e-06, -9.644031524658203e-05, -3.063678741455078e-05, -1.9073486328125e-06, 0.0, 0.0, -0.013808250427246094, 0.0, -0.005064964294433594, -5.7220458984375e-06, -0.0004984140396118164, -0.00013995169138070196, -7.59362883400172e-05, -0.00012230873107910156, -1.9073486328125e-06, -5.602700184681453e-05, 0.0, -0.000118255615234375, -0.005902290344238281, -0.000476837158203125, -0.00010847723751794547, -1.9788581994362175e-05, -3.409382770769298e-05, -3.254413604736328e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(5), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "5", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -4.806774950596562, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -1.5889902114868164, -2.044693946838379, -0.000118255615234375, -0.34052574634552, -2.3841855067985307e-07, -0.0001544952392578125, -3.24249267578125e-05, -7.62939453125e-06, -3.814697265625e-06, -2.682209014892578e-05, -5.7220458984375e-06, -2.86102294921875e-05, -0.0018100738525390625, -0.0001010894775390625, -0.00039442218258045614, -0.0011287600500509143, -0.1401200294494629, -3.6119894502917305e-05, -0.05966758728027344, -0.004604339599609375, -5.7220458984375e-06, -7.2479248046875e-05, -0.05962574481964111, -1.9073486328125e-05, 0.0, -0.04769706726074219, -0.00020599365234375, -1.9073486328125e-06, -0.0031017065048217773, -1.1920928244535389e-07, -0.0007076263427734375, -7.62939453125e-06, -0.0001289844512939453, -3.063678741455078e-05, -1.9073486328125e-06, 0.0, 0.0, -0.013491630554199219, 0.0, -0.0051727294921875, -5.7220458984375e-06, -0.0004888772964477539, -0.00014388559793587774, -7.474419544450939e-05, 0.0, 0.0, -0.00894463062286377, -3.576278118089249e-07, -5.7220458984375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -4.9591064453125e-05, -1.33514404296875e-05, -1.52587890625e-05, -0.0030364990234375, -9.918212890625e-05, -0.00020253560796845704, -3.516641299938783e-05, -0.3360581398010254, -3.4570680327306036e-06, -0.008447647094726562, -0.0020084381103515625, -5.7220458984375e-06, -0.000278472900390625, -0.01114654541015625, -2.288818359375e-05, 0.0, -0.029707908630371094, -0.0001659393310546875, -1.9073486328125e-06, -0.003596782684326172, -1.1920928244535389e-07, -0.0006351470947265625, -9.5367431640625e-06, -0.0001367330551147461, -2.682209014892578e-05, -1.9073486328125e-06, 0.0, 0.0, -0.013149261474609375, 0.0, -0.0042209625244140625, -5.7220458984375e-06, -0.0004602670669555664, -0.00013792513345833868, -5.9723832237068564e-05, -0.00013184547424316406, -1.9073486328125e-06, -5.197408972890116e-05, 0.0, -0.000118255615234375, -0.00594329833984375, -0.0004730224609375, -0.00010990763257723302, -1.7762025890988298e-05, -3.3974622056121007e-05, -3.457069396972656e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())),\n            battlecry=Battlecry(Damage(3), CharacterSelector(players=\n            BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -4.895672037554334, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.060301780700683594, 0.0, -0.0003910064697265625, -1.5889902114868164, -0.13962173461914062, -9.1552734375e-05, -0.02297508716583252, 0.0, -1.33514404296875e-05, 0.0, -0.001761317253112793, -4.768370445162873e-07, -4.57763671875e-05, -5.91278076171875e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.5497207641601562e-05, -5.7220458984375e-06, -3.0517578125e-05, -0.0014057159423828125, -0.0001087188720703125, -0.000370700319763273, -0.0010625518625602126, -0.13470061123371124, -3.2901341910474e-05, -2.895758628845215, -0.008869171142578125, -0.02890416420996189, -0.00024125896743498743, -1.7642974853515625e-05, -0.00013554096221923828, 0.0, -9.83476493274793e-05, 0.0, -7.2479248046875e-05, -0.006302833557128906, -0.0001659393310546875, -3.9219565223902464e-05, -1.9311753931106068e-05, -3.159045081702061e-05, -5.173683166503906e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -4.951607529949619, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Fire Elemental"}, {"_type": "Num", "n": 6}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -0.0007419586181640625, -4.00543212890625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.52587890625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.576278118089249e-07, -5.3524967370321974e-05, -5.841255187988281e-06, -2.1457672119140625e-06, -0.0005664825439453125, -1.9073486328125e-06, -0.00020003344980068505, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.95168399810791, 0.0, -0.0001239776611328125, -0.5369958877563477, -0.0886688232421875, -5.340576171875e-05, -0.04897713661193848, 0.0, -1.9073486328125e-05, 0.0, -0.001448512077331543, -4.768370445162873e-07, -4.1961669921875e-05, -6.4849853515625e-05, -1.33514404296875e-05, -9.5367431640625e-06, -1.5497207641601562e-05, -5.7220458984375e-06, -3.24249267578125e-05, -0.0014171600341796875, -0.0001087188720703125, -0.00036033199285157025, -0.0010669579496607184, -0.13478757441043854, -3.3020547562045977e-05, -0.06406021118164062, -0.0039119720458984375, -5.7220458984375e-06, -7.05718994140625e-05, -0.04063999652862549, -1.9073486328125e-05, 0.0, -0.04273414611816406, -0.000202178955078125, -1.9073486328125e-06, -0.0036683082580566406, -1.1920928244535389e-07, -0.0007457733154296875, -7.62939453125e-06, -0.00013077259063720703, -2.872943878173828e-05, -1.9073486328125e-06, 0.0, 0.0, -0.0139923095703125, 0.0, -0.0048732757568359375, -5.7220458984375e-06, -0.0004736185073852539, -0.00014185904001351446, -6.616113387281075e-05, -0.00012803077697753906, -1.9073486328125e-06, -5.745744056184776e-05, 0.0, -0.000118255615234375, -0.0059642791748046875, -0.0004749298095703125, -0.0001070468351827003, -1.9788581994362175e-05, -3.3974622056121007e-05, -3.457069396972656e-05], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Damage(3), CharacterSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Fire", " ", "Elemental", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "5", "<EOS>"]}, {"score": -11.527824841918573, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Template20", "hole2": 6, "hole1": 6, "hole0": "MinionCard"}], "hole6": [{"_type": "Template20", "hole2": 6, "hole1": 6, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -7.388650894165039, -2.007143974304199, -0.000400301709305495, -1.1609995365142822, -5.304682781570591e-05, -3.576278118089249e-07, -4.768370445162873e-07, -0.013276456855237484, -3.576278118089249e-07, -0.22642922401428223, -0.00048828125, -0.0047612739726901054, -4.374980926513672e-05, -7.05718994140625e-05, -0.6396656036376953, -0.01595592498779297, -0.0001644847507122904, -0.0003309247549623251, 0.0, -3.3378546504536644e-06, -0.06816363334655762, -2.0265558760002023e-06], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        return MinionCard(6, 6)\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 96, 161, "Minion", "Card", "<EOS>", "6", "<EOS>", "6", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Minion", "<EOS>", "6", "<EOS>", "6", "<EOS>"]}, {"score": -11.527867372703952, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FireElemental", "hole2": [{"_type": "Template20", "hole2": 6, "hole1": 6, "hole0": "Minion"}], "hole6": [{"_type": "Template20", "hole2": 6, "hole1": 6, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-4.1961669921875e-05, -1.52587890625e-05, -0.0010346779599785805, -8.630412048660219e-05, -4.0531076592742465e-06, -2.3126602172851562e-05, -6.0796710386057384e-06, -1.311301275563892e-06, -7.62939453125e-06, -7.388650894165039, -2.007143974304199, -0.000400301709305495, -0.5549118518829346, -3.576278118089249e-07, -5.722038622479886e-06, -0.055434465408325195, -8.344646857949556e-07, -0.3733478784561157, -0.002239227294921875, -0.013279572129249573, -3.170964555465616e-05, -6.866455078125e-05, -1.0369691848754883, -0.02295398712158203, -0.0001327861682511866, -0.0005352493026293814, 0.0, -3.814689989667386e-06, -0.0705341100692749, -2.3841830625315197e-06], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        return Minion(6, 6)\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 217, 96, 161, "Minion", "<EOS>", "6", "<EOS>", "6", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Minion", "<EOS>", "6", "<EOS>", "6", "<EOS>"]}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"score": -0.027562613642999167, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -0.012300848960876465, -4.768360213347478e-06, -0.0003986358642578125, -1.9073486328125e-05, -1.33514404296875e-05, -6.67572021484375e-05, -0.0005255937576293945, -4.172325134277344e-06, -3.24249267578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0007441402412950993, -0.0023245352786034346, -0.0002613067626953125, -3.814697265625e-06, -0.006518199108541012, -7.450580596923828e-05, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -3.421305154915899e-05, 0.0, -5.340576171875e-05, -0.00029754638671875, -7.62939453125e-06, -1.1205610462639015e-05, -4.9947626393986866e-05, -1.9073486328125e-06, -1.1801649634435307e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -5.227354026071566, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "combo"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -5.20325231552124, -0.0008817766210995615, -0.011075973510742188, -0.0001735687255859375, -9.5367431640625e-06, -2.86102294921875e-05, -0.001055002212524414, -2.9802317840221804e-06, -4.00543212890625e-05, -2.6702880859375e-05, -3.814697265625e-06, -0.0007909485138952732, -0.0015725877601653337, -0.0003204345703125, -5.7220458984375e-06, -0.0038998983800411224, -6.878376007080078e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -2.968310218420811e-05, 0.0, -5.53131103515625e-05, -0.0001926422119140625, -7.62939453125e-06, -1.4662635294371285e-05, -5.3285231842892244e-05, -1.9073486328125e-06, -1.4066597032069694e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, combo=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "combo", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -5.286271136130722, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "MinionSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -0.012300848960876465, -4.768360213347478e-06, -0.0003986358642578125, -1.9073486328125e-05, -1.33514404296875e-05, -6.67572021484375e-05, -0.0005255937576293945, -4.172325134277344e-06, -3.24249267578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0007441402412950993, -0.0023245352786034346, -0.0002613067626953125, -3.814697265625e-06, -5.262035846710205, -0.003155946731567383, 0.0, -1.3589859008789062e-05, 0.0, -5.9962141676805913e-05, 0.0, -5.340576171875e-05, -0.0003795623779296875, -7.62939453125e-06, -8.4638240878121e-06, -5.018594674766064e-05, -3.933906555175781e-06, -1.0013530300057027e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -6.526114474662215, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template35"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -5.855382442474365, -2.145764938177308e-06, -0.6092004776000977, -0.026558995246887207, -3.814697265625e-06, -0.00037406088085845113, 0.0, -0.007818222045898438, -0.022119522094726562, -2.288818359375e-05, -1.1920928244535389e-07, -0.0007290689973160625, -7.62939453125e-06, -0.00013052565918769687], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, overload=3)\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "overload", "<EOS>", 39, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -6.6065002203234755, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "DrawDraw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -0.012300848960876465, -4.768360213347478e-06, -0.0003986358642578125, -1.9073486328125e-05, -1.33514404296875e-05, -6.67572021484375e-05, -0.0005255937576293945, -4.172325134277344e-06, -3.24249267578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0007441402412950993, -6.587024688720703, -1.1920928244535389e-07, -0.000804901123046875, -1.9073486328125e-06, -0.00022159461514092982, -9.72747802734375e-05, 0.0, -7.748603820800781e-06, 0.0, -4.553793405648321e-05, 0.0, -4.1961669921875e-05, -0.0002727508544921875, -5.7220458984375e-06, -1.2159273865108844e-05, -4.529858779278584e-05, -3.933906555175781e-06, -1.168244216387393e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(DrawDraw(),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -6.896968797845034, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventorInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -6.867564678192139, -0.0021313512697815895, -2.794526517391205e-05, -3.6954811548639555e-06, -4.5299530029296875e-06, -1.52587890625e-05, -0.00131988525390625, -0.0002269744873046875, -7.2479248046875e-05, -2.288818359375e-05, -1.52587890625e-05, -0.0001087188720703125, -1.9073486328125e-06, 0.0, -8.821448318485636e-06, -4.3153682781849056e-05, -3.814697265625e-06, -4.398822784423828e-05, -0.00016021728515625, -0.000141143798828125, -0.0003662109375, -0.0004444122314453125, -3.814697265625e-05, -2.288818359375e-05, -0.012595772743225098, -4.172316494077677e-06, -0.000446319580078125, -2.288818359375e-05, -2.09808349609375e-05, -8.0108642578125e-05, -0.0005054473876953125, -2.2649765014648438e-06, -3.814697265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0008678187150508165, -0.0021291112061589956, -0.000278472900390625, -3.814697265625e-06, -0.0064659216441214085, -7.450580596923828e-05, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -3.433226083870977e-05, 0.0, -5.340576171875e-05, -0.0002880096435546875, -7.62939453125e-06, -1.1205610462639015e-05, -4.9351609050063416e-05, -1.9073486328125e-06, -1.1801649634435307e-05], "inferred_code": "class GnomishInventorInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.114787739268991, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "Draw"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -0.012300848960876465, -4.768360213347478e-06, -0.0003986358642578125, -1.9073486328125e-05, -1.33514404296875e-05, -6.67572021484375e-05, -0.0005255937576293945, -4.172325134277344e-06, -3.24249267578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0007441402412950993, -0.0023245352786034346, -0.0002613067626953125, -3.814697265625e-06, -7.089935779571533, -0.00328826904296875, -4.220008850097656e-05, 0.0, -3.421305154915899e-05, 0.0, -0.0004119873046875, -0.000507354736328125, -5.7220458984375e-06, -2.312633478140924e-05, -3.2066898711491376e-05, -2.0265579223632812e-06, -1.2397689715726301e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), Draw()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Draw", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.36314289296763, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "User"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -7.191593170166016, -3.814697265625e-06, -0.16082000732421875, -0.0001068115234375, -9.5367431640625e-06, -5.91278076171875e-05, -0.0010821819305419922, -3.099440846199286e-06, -3.4332275390625e-05, -3.24249267578125e-05, -3.814697265625e-06, -0.0008030558237805963, -0.0013680788688361645, -0.00051116943359375, -7.62939453125e-06, -0.0024911349173635244, -4.9591064453125e-05, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -3.1232822948368266e-05, 0.0, -5.340576171875e-05, -0.000213623046875, -7.62939453125e-06, -1.2993727978027891e-05, -5.5073280236683786e-05, -2.0265579223632812e-06, -1.3708974620385561e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, User=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "User", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.73722656334607, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -5.855382442474365, -2.145764938177308e-06, -1.812849998474121, -0.03536641597747803, -1.9073486328125e-06, -0.0005054369103163481, 0.0, -0.00665283203125, -0.021526336669921875, -2.288818359375e-05, -2.3841855067985307e-07, -0.0009376376401633024, -7.748603820800781e-06, -0.00020597243565134704], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, overload=1)\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "overload", "<EOS>", 38, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.825756046841747, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -7.632570743560791, -1.2636171959456988e-05, -0.169891357421875, -1.71661376953125e-05, -0.003943992778658867, -0.004816530272364616, -0.00035720778396353126, -3.719305823324248e-05, 0.0, -0.00030696007888764143, 0.0, -0.00040435791015625, -0.009136199951171875, -2.288818359375e-05, -2.3841855067985307e-07, -0.0004144095000810921, -5.841255187988281e-06, -5.376194530981593e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, picker=UserPicker())\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.86504918145431, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "query"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -7.486549377441406, -3.635817120084539e-05, -0.355560302734375, -0.01171875, -3.814697265625e-06, -1.33514404296875e-05, -0.0028619763907045126, -3.2186455882765586e-06, -4.57763671875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.0013957095798105001, -0.00046791406930424273, -0.0008411407470703125, -1.33514404296875e-05, -0.001345022115856409, -3.814697265625e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -3.0279152269940823e-05, 0.0, -5.14984130859375e-05, -0.0001621246337890625, -7.62939453125e-06, -1.6331539882230572e-05, -6.58016069792211e-05, -3.933906555175781e-06, -1.645074735279195e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, query=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "query", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -7.869209618441687, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "DrawInventor"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -0.012300848960876465, -4.768360213347478e-06, -0.0003986358642578125, -1.9073486328125e-05, -1.33514404296875e-05, -6.67572021484375e-05, -0.0005255937576293945, -4.172325134277344e-06, -3.24249267578125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0007441402412950993, -7.633033275604248, -0.0004178263188805431, -0.2159128189086914, -7.62939453125e-06, -0.001404886948876083, -4.029273986816406e-05, -1.9073486328125e-06, -5.9604644775390625e-06, 0.0, -6.496903370134532e-05, 0.0, -4.9591064453125e-05, -0.00029754638671875, -5.7220458984375e-06, -9.417489309271332e-06, -4.005359369330108e-05, -3.814697265625e-06, -1.0967194612021558e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(DrawInventor(),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "Inventor", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -8.083864855367551, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Gnomish Inventor"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "overload"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -0.00074005126953125, -0.0001850128173828125, -5.53131103515625e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.0001392364501953125, -1.9073486328125e-06, 0.0, -7.152531907195225e-06, -5.1855851779691875e-05, -3.933906555175781e-06, -4.208087921142578e-05, -0.0001468658447265625, -0.0001239776611328125, -0.000408172607421875, -0.0005474090576171875, -4.00543212890625e-05, -2.09808349609375e-05, -5.855382442474365, -2.145764938177308e-06, -2.163224697113037, -0.0541229248046875, -3.814697265625e-06, -1.1444091796875e-05, -0.0023925304412841797, -2.2649765014648438e-06, -5.91278076171875e-05, -1.52587890625e-05, -3.814697265625e-06, -0.001475709956139326, -0.0003240864025428891, -0.0013179779052734375, -2.288818359375e-05, -0.0013408891391009092, -3.24249267578125e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -2.9921526220277883e-05, 0.0, -5.14984130859375e-05, -0.000156402587890625, -7.62939453125e-06, -1.6927575416048057e-05, -7.056967297103256e-05, -3.933906555175781e-06, -1.7404405298293568e-05], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, overload=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Gnomish", " ", "Inventor", "<EOS>", 72, 65, 64, 212, 76, 195, "overload", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}, {"score": -9.003698667631738, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Gnomish Inventor"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -8.340906143188477, -1.9073486328125e-05, -6.914137884450611e-06, -3.2544132409384474e-05, -1.9073486328125e-06, 0.0, -0.2801053822040558, -3.373566141817719e-05, -0.007745503913611174, 0.0, -0.0007480382919311523, 0.0, -0.0002231597900390625, 0.0, -4.6610071876784787e-05, 0.0, -0.0015010833740234375, -0.02932453155517578, -7.62939453125e-06, -2.9802317840221804e-06, -1.3708998267247807e-05, -1.8000409909291193e-05, -2.1457672119140625e-06, -0.33851027488708496, -3.62396240234375e-05, -0.000766754150390625, -8.58306884765625e-05, -0.002338409423828125, -5.841255187988281e-06], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 4, windfury=True)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -10.735655626281073, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GnomishInventor", "hole2": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -2.47955322265625e-05, -4.768370445162873e-07, -1.0967240996251348e-05, -0.0010434923460707068, -4.052184522151947e-06, -5.602820692729438e-06, -4.768371127283899e-06, -9.5367431640625e-06, -7.936132431030273, -0.015606880187988281, -0.0004044771194458008, -0.025781182572245598, -0.00022709369659423828, -0.0006746187573298812, -0.06635193526744843, -0.016275763511657715, -0.9372228384017944, -6.294241757132113e-05, -5.14984130859375e-05, -1.7237129211425781, -0.00045013427734375, -1.9073486328125e-06, -0.01090165227651596, -4.57763671875e-05, -0.0005353478481993079], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        return Minion(2, 4)\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [77, 145, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"score": -2.1698191924820662, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -0.663686990737915, -1.9073486328125e-06, -0.0012664794921875, 0.0, -8.392333984375e-05, 0.0, -2.3245622287504375e-05, 0.0, -9.5367431640625e-06, -7.43865966796875e-05, -6.866455078125e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -0.27321434020996094, -0.000118255615234375, -0.0003452301025390625, -6.103515625e-05, -0.00012969970703125, -0.000728607177734375, -3.0517578125e-05, -0.0009452097583562136, 0.0, -0.009378910064697266, 0.0, -0.0002651214599609375, -0.5661201477050781, -2.86102294921875e-05, -7.62939453125e-05, -7.43865966796875e-05, -3.0517578125e-05, -0.0001850128173828125, -0.0008749958360567689, -1.9073486328125e-06, -0.05862736701965332, -2.1457672119140625e-06, -0.0001583099365234375, -0.5875406265258789], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -2.4008286758194686, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -0.663686990737915, -1.9073486328125e-06, -0.0012664794921875, 0.0, -8.392333984375e-05, 0.0, -2.3245622287504375e-05, 0.0, -9.5367431640625e-06, -7.43865966796875e-05, -6.866455078125e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -0.27321434020996094, -0.000118255615234375, -0.0003452301025390625, -6.103515625e-05, -0.00012969970703125, -0.000728607177734375, -3.0517578125e-05, -0.0009452097583562136, 0.0, -0.009378910064697266, 0.0, -0.0002651214599609375, -0.5661201477050781, -2.86102294921875e-05, -7.62939453125e-05, -7.43865966796875e-05, -3.0517578125e-05, -0.0001850128173828125, -0.0008749958360567689, -1.9073486328125e-06, -0.05862736701965332, -2.1457672119140625e-06, -0.0001583099365234375, -0.8185501098632812], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(4)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 72]}, {"score": -2.6328906579852287, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -1.1810791492462158, -0.0001373291015625, -0.0038661956787109375, 0.0, -6.4849853515625e-05, 0.0, -2.264958675368689e-05, 0.0, -9.5367431640625e-06, -6.866455078125e-05, -6.866455078125e-05, -3.254413604736328e-05, -4.0531158447265625e-06, -0.22305679321289062, -0.0001277923583984375, -0.000339508056640625, -6.103515625e-05, -0.0001277923583984375, -0.0007495880126953125, -2.47955322265625e-05, -0.0009388916660100222, 0.0, -0.00948953628540039, 0.0, -0.000247955322265625, -0.5620279312133789, -2.86102294921875e-05, -7.43865966796875e-05, -7.43865966796875e-05, -3.0517578125e-05, -0.0001811981201171875, -0.0008786913240328431, -1.9073486328125e-06, -0.05747818946838379, -2.1457672119140625e-06, -0.0001544952392578125, -0.5858087539672852], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -2.6424316922653475, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -0.663686990737915, -1.9073486328125e-06, -0.0012664794921875, 0.0, -8.392333984375e-05, 0.0, -2.3245622287504375e-05, 0.0, -9.5367431640625e-06, -7.43865966796875e-05, -6.866455078125e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -0.27321434020996094, -0.000118255615234375, -0.0003452301025390625, -6.103515625e-05, -0.00012969970703125, -0.000728607177734375, -3.0517578125e-05, -0.0009452097583562136, 0.0, -0.009378910064697266, 0.0, -0.0002651214599609375, -0.8996992111206055, -0.0001087188720703125, -3.62396240234375e-05, -0.00011444091796875, -1.1444091796875e-05, -6.67572021484375e-05, -0.0007606737199239433, -1.9073486328125e-06, -0.11191189289093018, -2.2649765014648438e-06, -7.43865966796875e-05, -0.6735448837280273], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n        player.hero.increase_armor(4)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 72, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 72]}, {"score": -2.687866644047574, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -0.663686990737915, -1.9073486328125e-06, -0.0012664794921875, 0.0, -8.392333984375e-05, 0.0, -2.3245622287504375e-05, 0.0, -9.5367431640625e-06, -7.43865966796875e-05, -6.866455078125e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -0.27321434020996094, -0.000118255615234375, -0.0003452301025390625, -6.103515625e-05, -0.00012969970703125, -0.000728607177734375, -3.0517578125e-05, -0.0009452097583562136, 0.0, -0.009378910064697266, 0.0, -0.0002651214599609375, -0.8996992111206055, -0.0001087188720703125, -3.62396240234375e-05, -0.00011444091796875, -1.1444091796875e-05, -6.67572021484375e-05, -0.0007606737199239433, -1.9073486328125e-06, -0.11191189289093018, -2.2649765014648438e-06, -7.43865966796875e-05, -0.7189798355102539], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n        player.hero.increase_armor(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 72, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -2.86782260378601, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -1.1810791492462158, -0.0001373291015625, -0.0038661956787109375, 0.0, -6.4849853515625e-05, 0.0, -2.264958675368689e-05, 0.0, -9.5367431640625e-06, -6.866455078125e-05, -6.866455078125e-05, -3.254413604736328e-05, -4.0531158447265625e-06, -0.22305679321289062, -0.0001277923583984375, -0.000339508056640625, -6.103515625e-05, -0.0001277923583984375, -0.0007495880126953125, -2.47955322265625e-05, -0.0009388916660100222, 0.0, -0.00948953628540039, 0.0, -0.000247955322265625, -0.5620279312133789, -2.86102294921875e-05, -7.43865966796875e-05, -7.43865966796875e-05, -3.0517578125e-05, -0.0001811981201171875, -0.0008786913240328431, -1.9073486328125e-06, -0.05747818946838379, -2.1457672119140625e-06, -0.0001544952392578125, -0.8207406997680664], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(4)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 72]}, {"score": -2.98673911507791, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -0.663686990737915, -1.9073486328125e-06, -0.0012664794921875, 0.0, -8.392333984375e-05, 0.0, -2.3245622287504375e-05, 0.0, -9.5367431640625e-06, -7.43865966796875e-05, -6.866455078125e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -1.910736083984375, -1.52587890625e-05, -0.03156566619873047, -0.0004425048828125, -0.0001735687255859375, -9.34600830078125e-05, -0.001018524169921875, -0.0011891113827005029, 0.0, -0.012725234031677246, 0.0, -5.14984130859375e-05, -0.3578462600708008], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68]}, {"score": -3.1174581805803996, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -1.1810791492462158, -0.0001373291015625, -0.0038661956787109375, 0.0, -6.4849853515625e-05, 0.0, -2.264958675368689e-05, 0.0, -9.5367431640625e-06, -6.866455078125e-05, -6.866455078125e-05, -3.254413604736328e-05, -4.0531158447265625e-06, -0.22305679321289062, -0.0001277923583984375, -0.000339508056640625, -6.103515625e-05, -0.0001277923583984375, -0.0007495880126953125, -2.47955322265625e-05, -0.0009388916660100222, 0.0, -0.00948953628540039, 0.0, -0.000247955322265625, -0.9061050415039062, -0.0001087188720703125, -3.62396240234375e-05, -0.0001163482666015625, -1.1444091796875e-05, -6.67572021484375e-05, -0.0007650844636373222, -1.9073486328125e-06, -0.1078406572341919, -2.2649765014648438e-06, -7.2479248046875e-05, -0.6761817932128906], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n        player.hero.increase_armor(4)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 72, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 72]}, {"score": -3.1575058261492472, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -1.1810791492462158, -0.0001373291015625, -0.0038661956787109375, 0.0, -6.4849853515625e-05, 0.0, -2.264958675368689e-05, 0.0, -9.5367431640625e-06, -6.866455078125e-05, -6.866455078125e-05, -3.254413604736328e-05, -4.0531158447265625e-06, -0.22305679321289062, -0.0001277923583984375, -0.000339508056640625, -6.103515625e-05, -0.0001277923583984375, -0.0007495880126953125, -2.47955322265625e-05, -0.0009388916660100222, 0.0, -0.00948953628540039, 0.0, -0.000247955322265625, -0.9061050415039062, -0.0001087188720703125, -3.62396240234375e-05, -0.0001163482666015625, -1.1444091796875e-05, -6.67572021484375e-05, -0.0007650844636373222, -1.9073486328125e-06, -0.1078406572341919, -2.2649765014648438e-06, -7.2479248046875e-05, -0.7162294387817383], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n        player.hero.increase_armor(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 72, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -3.793894605126809, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -1.1810791492462158, -0.0001373291015625, -0.0038661956787109375, 0.0, -6.4849853515625e-05, 0.0, -2.264958675368689e-05, 0.0, -9.5367431640625e-06, -6.866455078125e-05, -6.866455078125e-05, -3.254413604736328e-05, -4.0531158447265625e-06, -2.201894760131836, -1.52587890625e-05, -0.030226707458496094, -0.000453948974609375, -0.0001678466796875, -8.96453857421875e-05, -0.00096893310546875, -0.0011162746232002974, 0.0, -0.01214909553527832, 0.0, -5.14984130859375e-05, -0.3557748794555664], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68]}, {"score": -3.9903487723655076, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -0.663686990737915, -1.9073486328125e-06, -0.0012664794921875, 0.0, -8.392333984375e-05, 0.0, -2.3245622287504375e-05, 0.0, -9.5367431640625e-06, -7.43865966796875e-05, -6.866455078125e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -1.910736083984375, -1.52587890625e-05, -0.03156566619873047, -0.0004425048828125, -0.0001735687255859375, -9.34600830078125e-05, -0.001018524169921875, -0.0011891113827005029, 0.0, -0.012725234031677246, 0.0, -5.14984130859375e-05, -1.3614559173583984], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 72]}, {"score": -4.017704324405315, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "DRUID", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -2.577100992202759, -1.9073486328125e-05, -0.0021762847900390625, 0.0, -0.000102996826171875, 0.0, -1.9788581994362175e-05, 0.0, -9.5367431640625e-06, -6.4849853515625e-05, -6.103515625e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -0.2039957046508789, -0.000118255615234375, -0.0003604888916015625, -6.103515625e-05, -0.00012969970703125, -0.0006771087646484375, -2.6702880859375e-05, -0.0009235136676579714, 0.0, -0.009582996368408203, 0.0, -0.0002593994140625, -0.5696916580200195, -2.86102294921875e-05, -7.43865966796875e-05, -7.43865966796875e-05, -3.0517578125e-05, -0.0001811981201171875, -0.0008734461735002697, -1.9073486328125e-06, -0.05898308753967285, -2.1457672119140625e-06, -0.000156402587890625, -0.5862503051757812], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -4.796395139184426, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template37"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -1.1810791492462158, -0.0001373291015625, -0.0038661956787109375, 0.0, -6.4849853515625e-05, 0.0, -2.264958675368689e-05, 0.0, -9.5367431640625e-06, -6.866455078125e-05, -6.866455078125e-05, -3.254413604736328e-05, -4.0531158447265625e-06, -2.201894760131836, -1.52587890625e-05, -0.030226707458496094, -0.000453948974609375, -0.0001678466796875, -8.96453857421875e-05, -0.00096893310546875, -0.0011162746232002974, 0.0, -0.01214909553527832, 0.0, -5.14984130859375e-05, -1.3582754135131836], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 72]}, {"score": -4.907120422426999, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PRIEST", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -3.9315168857574463, -3.814697265625e-06, -0.0012093782424926758, 0.0, -7.43865966796875e-05, 0.0, -2.9325159630388953e-05, 0.0, -9.5367431640625e-06, -5.91278076171875e-05, -9.5367431640625e-05, -2.682209014892578e-05, -2.1457672119140625e-06, -0.5768423080444336, -1.1444091796875e-05, -0.01966094970703125, -0.0004596710205078125, -0.0001850128173828125, -9.72747802734375e-05, -0.0016765594482421875, -0.0012974725104868412, 0.0, -0.013575553894042969, 0.0, -5.340576171875e-05, -0.3546018600463867], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68]}, {"score": -10.25036465309406, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "HeroicStrike", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.52587890625e-05, -0.0048809051513671875, -3.576278118089249e-07, -0.00018010969506576657, -2.2172682292875834e-05, -4.7681896830908954e-07, -0.0002776124165393412, -4.1723224057932384e-06, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, -4.768371127283899e-06, -5.316708848113194e-05, -2.9802317840221804e-06, -5.7220458984375e-06, -8.344646857949556e-07, -2.1457672119140625e-05, -0.663686990737915, -1.9073486328125e-06, -0.0012664794921875, 0.0, -8.392333984375e-05, 0.0, -2.3245622287504375e-05, 0.0, -9.5367431640625e-06, -7.43865966796875e-05, -6.866455078125e-05, -3.063678741455078e-05, -4.0531158447265625e-06, -2.9127159118652344, -0.009830474853515625, -0.37850379943847656, -0.000438690185546875, -7.62939453125e-05, -0.004425048828125, -3.814697265625e-06, -0.0014986941823735833, -2.741813204920618e-06, -0.005038261413574219, -1.9073486328125e-06, -0.0006303787231445312, -1.9073486328125e-06, -0.06080436706542969, 0.0, -0.0003342628479003906, 0.0, -0.006514549255371094, 0.0, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, -0.001979827880859375, -0.0006037590792402625, 0.0, -0.00640869140625, -0.00366973876953125, -0.0004024505615234375, 0.0, -1.0269992351531982, 0.0, -0.5823655128479004, -2.3841855067985307e-07, -3.24249267578125e-05, -0.0002288818359375, 0.0, -9.5367431640625e-06, -0.10224246978759766, 0.0, -0.018825531005859375, -0.000194549560546875, -9.5367431640625e-06, -0.5926361083984375, -1.9073486328125e-06, -0.7846031188964844, 0.0, -0.005000114440917969, -4.00543212890625e-05, -0.4947080612182617, -7.62939453125e-06, -0.0071315765380859375, 0.0, -0.7337255477905273, 0.0, -0.015106201171875, 0.0, -0.0016956329345703125, -0.17626285552978516, 0.0, -0.0010547636775299907, -1.1920928244535389e-07, -0.00116729736328125, -0.003314971923828125, -0.0001354217529296875, 0.0, -0.045131418853998184, 0.0, -0.6072252988815308, -1.9073486328125e-06, -0.0011119842529296875, -0.0001277923583984375, -0.015531539916992188, -0.0008808285929262638, -7.987004210008308e-06, -0.00177001953125, -1.71661376953125e-05, -0.20662164688110352, -0.057010650634765625, 0.0, -0.0001659393310546875, -0.25499820709228516, -0.2676553726196289, -0.028954505920410156, -0.06137847900390625, -5.7220458984375e-06, -0.026121139526367188, -0.0005816131015308201, 0.0, -0.04589188098907471, 0.0, -0.002635955810546875, -0.014247894287109375], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.minions)\n        targets.append(player.hero)\n        targets = game.random_choice(targets)\n        target.add_buff(Buff(ChangeAttack(2)))\n        player.hero.change_temp_attack(2)\n", "choice_history": [77, 147, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 42, "hero", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "change_temp_attack", "<EOS>", 205, 68]}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"score": -0.14694489849898673, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -0.049343228340148926, 0.0, -4.672993964049965e-05, -1.4305104514278355e-06, -3.0517578125e-05, 0.0, -0.0009728670120239258, 0.0, -7.62939453125e-06, -0.005733489990234375, -2.6702880859375e-05, -2.3842630980652757e-07, -7.152555099310121e-07, -0.00042179334559477866, 0.0, -0.011262893676757812, 0.0, -0.000110626220703125, -1.1444091796875e-05, -0.0004088878631591797, -8.344646857949556e-07], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.173621944470142, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronbarkProtector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -3.0771098136901855, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -0.049343228340148926, 0.0, -4.672993964049965e-05, -1.4305104514278355e-06, -3.0517578125e-05, 0.0, -0.0009728670120239258, 0.0, -7.62939453125e-06, -0.005733489990234375, -2.6702880859375e-05, -2.3842630980652757e-07, -7.152555099310121e-07, -0.00042179334559477866, 0.0, -0.011262893676757812, 0.0, -0.000110626220703125, -1.1444091796875e-05, -0.0004088878631591797, -8.344646857949556e-07], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.196563258078527, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ROGUE", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -4.087604522705078, 0.0, -1.990794771700166e-05, -7.152555099310121e-07, -0.0001678466796875, 0.0, -0.0007781982421875, 0.0, -9.5367431640625e-06, -0.016969680786132812, -2.86102294921875e-05, -2.3842630980652757e-07, -7.152555099310121e-07, -0.0004302533052396029, 0.0, -0.011462092399597168, 0.0, -0.0001125335693359375, -1.1444091796875e-05, -0.0004012584686279297, -8.344646857949556e-07], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "ROGUE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.374264162272993, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "DRUID", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -4.275635719299316, 0.0, -2.0861618395429105e-05, -1.0728830375228426e-06, -2.47955322265625e-05, 0.0, -0.001484513282775879, 0.0, -9.5367431640625e-06, -0.005397796630859375, -2.288818359375e-05, -1.192174750030972e-07, -7.152555099310121e-07, -0.000361496553523466, 0.0, -0.012198448181152344, 0.0, -0.000110626220703125, -9.5367431640625e-06, -0.0004203319549560547, -8.344646857949556e-07], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.700329643061195, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK><UNK>", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -4.563871383666992, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -0.049343228340148926, 0.0, -4.672993964049965e-05, -1.4305104514278355e-06, -3.0517578125e-05, 0.0, -0.0009728670120239258, 0.0, -7.62939453125e-06, -0.005733489990234375, -2.6702880859375e-05, -2.3842630980652757e-07, -7.152555099310121e-07, -0.00042179334559477866, 0.0, -0.011262893676757812, 0.0, -0.000110626220703125, -1.1444091796875e-05, -0.0004088878631591797, -8.344646857949556e-07], "inferred_code": "class <UNK><UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.956003453344323, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -4.853455066680908, -2.3841855067985307e-07, -4.827956945518963e-05, -9.536738616588991e-07, -5.53131103515625e-05, 0.0, -0.0006750822067260742, 0.0, -9.5367431640625e-06, -0.010799407958984375, -2.47955322265625e-05, -2.384258550591767e-07, -7.152555099310121e-07, -0.0004026085662189871, 0.0, -0.011449813842773438, 0.0, -0.0001049041748046875, -9.5367431640625e-06, -0.0004012584686279297, -8.344646857949556e-07], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.02889146221878, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -0.049343228340148926, 0.0, -4.672993964049965e-05, -1.4305104514278355e-06, -3.0517578125e-05, 0.0, -0.0009728670120239258, 0.0, -7.62939453125e-06, -0.005733489990234375, -2.6702880859375e-05, -2.3842630980652757e-07, -7.152555099310121e-07, -0.00042179334559477866, 0.0, -4.893033027648926, -3.814697265625e-06, -0.0001430511474609375, -2.09808349609375e-05, -0.0005388259887695312, -1.5497195136049413e-06], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, charge=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.664392100429005, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 8, "hole1": 8, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -0.049343228340148926, 0.0, -4.672993964049965e-05, -1.4305104514278355e-06, -3.0517578125e-05, 0.0, -0.0009728670120239258, 0.0, -7.62939453125e-06, -5.272558212280273, -0.00045013427734375, -0.00023043155670166016, -3.254412877140567e-05, -1.9311988580739126e-05, -8.344646857949556e-07, -3.409341297810897e-05, -2.3841855067985307e-07, -0.04024028778076172, -2.47955322265625e-05, -5.7220458984375e-06, -0.07417333126068115, -3.4332275390625e-05, -3.0517578125e-05, -0.0007381439208984375, -0.00017142295837402344, -1.1920928244535389e-07, -0.000820159912109375, -1.9073486328125e-06, -0.1454375982284546, 0.0, -0.0001773834228515625, -0.0001621246337890625, -7.772444223519415e-05, -3.4570680327306036e-06], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, charge=True, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "8", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.731224569913252, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PRIEST", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -5.631535530090332, 0.0, -4.1961524402722716e-05, -4.768371127283899e-06, -3.4332275390625e-05, 0.0, -0.0010317564010620117, 0.0, -7.62939453125e-06, -0.0073070526123046875, -2.86102294921875e-05, -1.192174750030972e-07, -7.152555099310121e-07, -0.00038330379175022244, 0.0, -0.011738777160644531, 0.0, -0.00011444091796875, -1.1444091796875e-05, -0.0004184246063232422, -8.344646857949556e-07], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "PRIEST", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.097874448713753, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ForceTankProtector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -5.91669225692749, -0.09222595393657684, -0.01257218699902296, -2.0265579223632812e-06, -6.988644599914551e-05, -4.291534423828125e-06, 0.0, -1.9073486328125e-06, -0.0012969970703125, -3.814697265625e-06, -2.861018856492592e-06, -3.0159948437358253e-05, -2.0265579223632812e-06, -1.52587890625e-05, -0.000286150723695755, -2.741813204920618e-06, -0.03979218006134033, 0.0, -4.625310975825414e-05, -2.145764938177308e-06, -2.110004425048828e-05, 0.0, -0.0009461641311645508, 0.0, -7.62939453125e-06, -0.0048274993896484375, -2.6702880859375e-05, -1.192174750030972e-07, -5.960462772236497e-07, -0.0004370456445030868, 0.0, -0.011310696601867676, 0.0, -0.000110626220703125, -1.1444091796875e-05, -0.0004069805145263672, -8.344646857949556e-07], "inferred_code": "class ForceTankProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "Force", "Tank", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.155913716434384, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 8, "hole0": 8}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -6.054691314697266, 0.0, -1.8238997654407285e-05, -2.503394853192731e-06, -6.866455078125e-05, 0.0, -0.0009592771530151367, 0.0, -9.5367431640625e-06, -0.009288787841796875, -2.86102294921875e-05, -1.192174750030972e-07, -7.152555099310121e-07, -0.0004483647644519806, 0.0, -0.011300921440124512, 0.0, -0.00011444091796875, -1.1444091796875e-05, -0.0004050731658935547, -8.344646857949556e-07], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.302888644497642, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "IronbarkProtector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template10"}, {"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Template38"}, {"id": "game", "_type": "Name"}, {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}], "hole1": "summon", "hole0": {"_type": "Template25", "hole0": "IronbarkProtector"}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -4.135571479797363, -0.2390374392271042, -0.003960431087762117, -7.152555099310121e-07, -0.24566751718521118, -2.6583669750834815e-05, 0.0, -1.9073486328125e-06, -0.0001373291015625, -0.000457763671875, -4.529942543740617e-06, -8.213513501686975e-05, -4.291534423828125e-06, -2.86102294921875e-05, -0.0001284480094909668, -4.053113570989808e-06, -0.2158803939819336, 0.0, -1.6450881958007812e-05, -2.3841855067985307e-07, -0.000209808349609375, 0.0, -1.406666160619352e-05, 0.0, -7.62939453125e-06, -7.43865966796875e-05, -2.288818359375e-05, -0.00014019012451171875, -7.152555099310121e-07, -1.0182199478149414, -1.9073486328125e-06, -0.0007190704345703125, -0.0002956390380859375, -0.0001239776611328125, 0.0, -0.00042437209049239755, -0.0021137294825166464, -0.000102996826171875, -2.6702880859375e-05, -0.0002651214599609375, -3.814697265625e-06, -0.0005707722157239914, -1.2397689715726301e-05, -0.0011615753173828125, -0.0001430511474609375, -3.0517578125e-05, -0.0032656581606715918, -1.2278553185751662e-05, -0.004428863525390625, -0.00142669677734375, -0.0001049041748046875, -0.0004367828369140625, -0.0051116943359375, -0.0004177093505859375, -0.00027737492928281426, -0.19134840369224548, -0.016393370926380157, -0.1757286787033081, -2.3841830625315197e-06, -6.4849853515625e-05, -0.0003795623779296875, -0.0014781951904296875, -7.43865966796875e-05, -0.0005761384963989258, 0.0, -0.0031261444091796875, -9.5367431640625e-06, -7.62939453125e-05, -3.814697265625e-06, -1.2397762475302443e-05, -1.1801719665527344e-05, -9.5367431640625e-06, -6.67572021484375e-05, -0.0001068115234375, -2.6702880859375e-05, -0.00018632410501595587, 0.0, -2.09808349609375e-05, -0.000888824462890625, -0.000110626220703125, -0.00046536774607375264, 0.0, -7.62939453125e-05, -3.4332275390625e-05, -7.2479248046875e-05, -0.0001049041748046875, -0.0018405914306640625, -3.0517578125e-05, -0.000316619873046875, -1.71661376953125e-05, -0.0003452301025390625, -0.0004482269287109375, -0.000156402587890625, -1.33514404296875e-05, -0.0012798613170161843, -1.2397729733493179e-05, -0.00043487548828125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0064334869384765625, 0.0, -0.010334014892578125, -5.7220458984375e-06, -0.0002155303955078125, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9192688341718167e-05, 0.0, -3.814697265625e-06, -4.9591064453125e-05, -0.00025177001953125, -0.000274658203125, -0.0001634354266570881, -1.9073486328125e-06, -1.1444091796875e-05, -0.005671501159667969, -9.5367431640625e-06, -0.000102996826171875, -1.9073486328125e-06, -0.0017712878761813045, 0.0], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            IronbarkProtector().summon(player, game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 217, 97, 166, 34, 171, "Ironbark", "Protector", "<EOS>", "summon", "<EOS>", 207, 73, 53, 133, "game", "<EOS>", 48, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -7.879031883349818, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Protector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}], "hole2": 8, "hole1": 8, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -0.01670074462890625, -0.05043276771903038, -0.010486639104783535, -3.802711216849275e-05, -1.1086463928222656e-05, -2.861022494471399e-06, 0.0, -1.9073486328125e-06, -0.00054931640625, -3.814697265625e-06, -2.264974000354414e-06, -5.543231236515567e-05, -2.0265579223632812e-06, -5.340576171875e-05, -0.0002019256353378296, -5.483625955093885e-06, -0.049343228340148926, 0.0, -4.672993964049965e-05, -1.4305104514278355e-06, -3.0517578125e-05, 0.0, -0.0009728670120239258, 0.0, -7.62939453125e-06, -5.272558212280273, -0.00045013427734375, -0.00023043155670166016, -3.254412877140567e-05, -1.9311988580739126e-05, -8.344646857949556e-07, -3.409341297810897e-05, -2.3841855067985307e-07, -0.04024028778076172, -2.47955322265625e-05, -5.7220458984375e-06, -0.07417333126068115, -3.4332275390625e-05, -3.0517578125e-05, -0.0007381439208984375, -0.00017142295837402344, -1.1920928244535389e-07, -0.000820159912109375, -1.9073486328125e-06, -2.3550503253936768, 0.0, -0.00045013427734375, -0.00487518310546875, -0.00011932849884033203, -3.099440846199286e-06], "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, charge=True, charge=True)\n", "choice_history": [77, 145, "<UNK>", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "8", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -11.9804356356494, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "IronbarkProtector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template10"}, {"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Template38"}, {"id": "game", "_type": "Name"}, {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}], "hole1": "summon", "hole0": {"_type": "Template25", "hole0": "IronbarkProtector"}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -4.135571479797363, -0.2390374392271042, -0.003960431087762117, -7.152555099310121e-07, -0.24566751718521118, -2.6583669750834815e-05, 0.0, -1.9073486328125e-06, -0.0001373291015625, -0.000457763671875, -4.529942543740617e-06, -8.213513501686975e-05, -4.291534423828125e-06, -2.86102294921875e-05, -0.0001284480094909668, -4.053113570989808e-06, -0.2158803939819336, 0.0, -1.6450881958007812e-05, -2.3841855067985307e-07, -0.000209808349609375, 0.0, -1.406666160619352e-05, 0.0, -7.62939453125e-06, -7.43865966796875e-05, -2.288818359375e-05, -0.00014019012451171875, -7.152555099310121e-07, -1.0182199478149414, -1.9073486328125e-06, -0.0007190704345703125, -0.0002956390380859375, -0.0001239776611328125, 0.0, -0.00042437209049239755, -0.0021137294825166464, -0.000102996826171875, -2.6702880859375e-05, -0.0002651214599609375, -3.814697265625e-06, -0.0005707722157239914, -1.2397689715726301e-05, -0.0011615753173828125, -0.0001430511474609375, -3.0517578125e-05, -0.0032656581606715918, -1.2278553185751662e-05, -0.004428863525390625, -0.00142669677734375, -0.0001049041748046875, -0.0004367828369140625, -0.0051116943359375, -0.0004177093505859375, -0.00027737492928281426, -0.19134840369224548, -0.016393370926380157, -0.1757286787033081, -2.3841830625315197e-06, -6.4849853515625e-05, -0.0003795623779296875, -0.0014781951904296875, -7.43865966796875e-05, -0.0005761384963989258, 0.0, -0.0031261444091796875, -9.5367431640625e-06, -7.62939453125e-05, -3.814697265625e-06, -1.2397762475302443e-05, -1.1801719665527344e-05, -9.5367431640625e-06, -6.67572021484375e-05, -0.0001068115234375, -2.6702880859375e-05, -0.00018632410501595587, 0.0, -2.09808349609375e-05, -0.000888824462890625, -0.000110626220703125, -0.00046536774607375264, 0.0, -7.62939453125e-05, -3.4332275390625e-05, -7.2479248046875e-05, -0.0001049041748046875, -0.0018405914306640625, -3.0517578125e-05, -0.000316619873046875, -1.71661376953125e-05, -0.0003452301025390625, -0.0004482269287109375, -0.000156402587890625, -1.33514404296875e-05, -0.0012798613170161843, -1.2397729733493179e-05, -0.00043487548828125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0064334869384765625, 0.0, -0.010334014892578125, -5.7220458984375e-06, -0.0002155303955078125, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9192688341718167e-05, 0.0, -3.814697265625e-06, -4.9591064453125e-05, -0.00025177001953125, -0.000274658203125, -0.0001634354266570881, -1.9073486328125e-06, -1.1444091796875e-05, -5.295933723449707, -7.2479248046875e-05, -0.0009632110595703125, -3.24249267578125e-05, -0.38810238242149353, 0.0], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            IronbarkProtector().summon(player, game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) == 0\n", "choice_history": [77, 148, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 217, 97, 166, 34, 171, "Ironbark", "Protector", "<EOS>", "summon", "<EOS>", 207, 73, 53, 133, "game", "<EOS>", 48, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>"]}, {"score": -17.6166568482475, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "IronbarkProtector", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 8, "hole0": "Ironbark Protector"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}, {"_type": "Lambda", "body": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}, "args": {"_type": "Template13", "hole0": "x"}}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}, "_type": "If", "body": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "game", "_type": "Name"}, {"_type": "Lambda", "body": {"_type": "NameConstant", "value": true}, "args": {"_type": "Template13", "hole0": "m"}}], "func": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}]}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template38"}, {"id": "game", "_type": "Name"}, {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}], "hole1": "summon", "hole0": {"_type": "Template25", "hole0": "IronbarkJustice"}}]}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard"}, "score_history": [-1.71661376953125e-05, -4.135571479797363, -0.2390374392271042, -0.003960431087762117, -7.152555099310121e-07, -0.24566751718521118, -2.6583669750834815e-05, 0.0, -1.9073486328125e-06, -0.0001373291015625, -0.000457763671875, -4.529942543740617e-06, -8.213513501686975e-05, -4.291534423828125e-06, -2.86102294921875e-05, -0.0001284480094909668, -4.053113570989808e-06, -0.2158803939819336, 0.0, -1.6450881958007812e-05, -2.3841855067985307e-07, -0.000209808349609375, 0.0, -1.406666160619352e-05, 0.0, -7.62939453125e-06, -7.43865966796875e-05, -2.288818359375e-05, -0.00014019012451171875, -7.152555099310121e-07, -0.6973762512207031, -0.0016937255859375, -0.07222652435302734, -5.53131103515625e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.91278076171875e-05, -0.002206787932664156, -5.245207830739673e-06, -0.0016727447509765625, -1.9073486328125e-06, -0.0001678466796875, -1.9073486328125e-06, -0.09882450103759766, -0.0002994537353515625, -0.0012836456298828125, -9.5367431640625e-06, -0.011101126670837402, 0.0, -0.000316619873046875, -1.1920928244535389e-07, -0.9796042442321777, -1.1920928244535389e-07, -0.014127731323242188, -0.006847381591796875, -2.86102294921875e-05, -1.9073486328125e-06, -0.30378618836402893, 0.0, -0.1059560775756836, -0.0016841888427734375, -0.02405548095703125, -0.0003604888916015625, -0.34152162075042725, -2.0265579223632812e-06, -0.06097221374511719, -0.000579833984375, -0.011023521423339844, -0.09954833984375, -4.57763671875e-05, -1.9073486328125e-06, -0.0006690025329589844, 0.0, -2.47955322265625e-05, -0.0018634796142578125, -0.0002422332763671875, -0.0009326934814453125, -0.0027067656628787518, 0.0, -5.7220458984375e-06, -0.005206108093261719, -8.392333984375e-05, -0.000118255615234375, -3.814697265625e-06, -0.0021327254362404346, 0.0, -1.0278701782226562, -0.022891998291015625, -0.11473846435546875, -2.6702880859375e-05, -0.0072002410888671875, -0.000225067138671875, -0.0001201629638671875, -4.57763671875e-05, -0.000293130986392498, -9.536738616588991e-07, -1.33514404296875e-05, -0.006464958190917969, -0.0020933151245117188, -0.0016632080078125, -0.36931002140045166, 0.0, -5.7220458984375e-06, -0.026536941528320312, -0.000232696533203125, -5.340576171875e-05, -1.1444091796875e-05, -0.00573645019903779, 0.0, -0.11785697937011719, -0.3832588195800781, -0.0007610321044921875, -0.1096506118774414, -1.9073486328125e-05, -0.00795745849609375, -7.62939453125e-06, -9.5367431640625e-06, -7.43865966796875e-05, -0.0004712202353402972, -2.7418097943154862e-06, -1.9073486328125e-05, -0.1301288604736328, -0.0009613037109375, -0.0010766983032226562, -0.49949586391448975, 0.0, -3.24249267578125e-05, -0.19109344482421875, -2.288818359375e-05, -9.72747802734375e-05, -3.814697265625e-06, -0.017180362716317177, 0.0, -0.8044500350952148, -0.0018587112426757812, -5.53131103515625e-05, -5.7220458984375e-06, -3.814697265625e-06, -6.103515625e-05, -0.10505974292755127, 0.0, -0.00020885467529296875, -1.9073486328125e-06, -0.000102996826171875, -5.7220458984375e-06, -0.06318283081054688, -2.86102294921875e-05, -0.00270843505859375, -1.9073486328125e-06, -0.029262542724609375, 0.0, -0.0001430511474609375, 0.0, -0.4456092119216919, 0.0, -0.00260162353515625, -0.02951812744140625, -1.52587890625e-05, -0.00435030460357666, 0.0, -0.0029382705688476562, -5.53131103515625e-05, -0.0077381134033203125, -0.00046539306640625, -0.6063176393508911, -3.886222839355469e-05, -0.29267311096191406, -0.0001621246337890625, -0.001030325423926115, -7.152555099310121e-07, -0.2947368621826172, -0.1208486557006836, -0.000766754150390625, -8.20159912109375e-05, -0.2704448699951172, 0.0, -0.4505329132080078, 0.0, -3.0517578125e-05, -0.2723579406738281, -0.035808563232421875, -0.005206108093261719, -0.0014801025390625, -0.2776613235473633, -0.0004711151123046875, -0.004138619638979435, -1.3983454704284668, -0.11964718252420425, -0.008904574438929558, -4.768370445162873e-07, -0.000560760498046875, -0.000171661376953125, -0.0005283355712890625, -5.7220458984375e-06, -0.00022518634796142578, 0.0, -0.006953239440917969, -8.0108642578125e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.4185905456542969e-05, -1.5497207641601562e-05, -1.1444091796875e-05, -9.1552734375e-05, -8.96453857421875e-05, -2.86102294921875e-05, -0.00020051001047249883, 0.0, -0.6208248138427734, -0.20460987091064453, -0.1676645278930664, -0.0001068115234375, -0.01584046706557274, -9.298310033045709e-06, -0.010107040405273438, 0.0, -0.036594390869140625, -0.005637168884277344, -5.53131103515625e-05, -0.11345373839139938, 0.0, -0.00011444091796875, -4.9591064453125e-05, -9.918212890625e-05, -0.0001468658447265625, -0.0024585723876953125, -0.0001010894775390625, -0.00023651123046875, -2.6702880859375e-05, -0.0007457733154296875, -0.0003795623779296875, -0.0005092620849609375, -1.1444091796875e-05, -0.0013401900650933385, -7.510169325541938e-06, -0.0004634857177734375, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -0.005588531494140625, 0.0, -0.010845184326171875, -7.62939453125e-06, -0.000270843505859375, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.8715853002504446e-05, 0.0, -3.814697265625e-06, -5.14984130859375e-05, -0.0002765655517578125, -0.0002727508544921875, -0.00015544828784186393, -1.9073486328125e-06, -1.1444091796875e-05, -0.005911827087402344, -9.5367431640625e-06, -0.0001049041748046875, -1.9073486328125e-06, -0.0017382724909111857, 0.0], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = hearthbreaker.targeting.<UNK>(player.minions, lambda x: \n            len(player.minions) < 7)\n        if len(player.minions) < 7:\n            if len(player.hand) < 7:\n                targets = hearthbreaker.targeting.find_minion_spell_target(game\n                    , lambda m: True)\n                target.increase_health(2)\n        else:\n            IronbarkJustice().summon(player, game, len(player.minions))\n        super().reveal()\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 206, 45, 104, 42, "minions", "<EOS>", 50, 128, 2, 150, "x", "<EOS>", 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 89, 122, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "hand", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 218, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 206, 53, 133, "game", "<EOS>", 50, 128, 2, 150, "m", "<EOS>", 26, 134, "True", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 34, 171, "Ironbark", "Justice", "<EOS>", "summon", "<EOS>", 207, 73, 53, 133, "game", "<EOS>", 48, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"score": -5.2640315399511834, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.8258790969848633, -0.042032353579998016, 0.0, -0.007540583610534668, 0.0, -0.006130218505859375, -0.0013790130615234375, -0.0649576187133789, -0.0002422332763671875, -0.0003376007080078125, -7.62939453125e-06, -0.3381023406982422, -1.9073486328125e-06, -0.0043087005615234375, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.008161544799804688, -1.9073486328125e-06, -0.0071163177490234375, 0.0, -0.0072193145751953125, -2.09808349609375e-05, -0.0005379915237426758, 0.0, -0.03798830509185791, 0.0, -0.001634836196899414, -3.814697265625e-06, -0.0004673004150390625, -0.0056667327880859375, -3.62396240234375e-05, -6.4849853515625e-05, 0.0, -0.000667572021484375, 0.0, -0.00030422210693359375, 0.0, -0.993800163269043, 0.0, -0.017026901245117188, -0.00012969970703125, -4.76837158203125e-05, 0.0, -0.0123443603515625, 0.0, -0.0009469985961914062, -9.5367431640625e-06, -3.516674041748047e-05, -5.7220458984375e-06, -0.0004482269287109375, -0.11888408660888672, -2.86102294921875e-05, -0.001071929931640625, -1.52587890625e-05, -0.0034074783325195312, 0.0, -0.00572967529296875, -0.0016651153564453125, -2.09808349609375e-05, -0.06666183471679688, 0.0, -1.1444091796875e-05, 0.0, -0.0005006790161132812, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08341407775878906, 0.0, -1.9073486328125e-06, -0.21618938446044922, -0.0001163482666015625, -0.0003299713134765625, -2.86102294921875e-05, 0.0, -2.86102294921875e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.2000436782836914, 0.0, -1.9073486328125e-06, -0.03467369079589844, -2.86102294921875e-05, -0.0001316070556640625, -6.29425048828125e-05, -0.0013570785522460938, 0.0, -8.20159912109375e-05, 0.0, -0.00012886524200439453, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.12847900390625, 0.0, -1.9073486328125e-06, -0.009489059448242188], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -5.332265166845836, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.8258790969848633, -0.042032353579998016, 0.0, -0.007540583610534668, 0.0, -0.006130218505859375, -0.0013790130615234375, -0.0649576187133789, -0.0002422332763671875, -0.0003376007080078125, -7.62939453125e-06, -0.3381023406982422, -1.9073486328125e-06, -0.0043087005615234375, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.008161544799804688, -1.9073486328125e-06, -0.0071163177490234375, 0.0, -0.0072193145751953125, -2.09808349609375e-05, -0.0005379915237426758, 0.0, -0.03798830509185791, 0.0, -0.001634836196899414, -3.814697265625e-06, -0.0004673004150390625, -0.0056667327880859375, -3.62396240234375e-05, -6.4849853515625e-05, 0.0, -0.000667572021484375, 0.0, -0.00030422210693359375, 0.0, -0.993800163269043, 0.0, -0.017026901245117188, -0.00012969970703125, -4.76837158203125e-05, 0.0, -0.0123443603515625, 0.0, -0.0009469985961914062, -9.5367431640625e-06, -3.516674041748047e-05, -5.7220458984375e-06, -0.0004482269287109375, -0.11888408660888672, -2.86102294921875e-05, -0.001071929931640625, -1.52587890625e-05, -0.0034074783325195312, 0.0, -0.00572967529296875, -0.0016651153564453125, -2.09808349609375e-05, -0.06666183471679688, 0.0, -1.1444091796875e-05, 0.0, -0.0005006790161132812, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08341407775878906, 0.0, -1.9073486328125e-06, -0.21618938446044922, -0.0001163482666015625, -0.0003299713134765625, -2.86102294921875e-05, 0.0, -2.86102294921875e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.2000436782836914, 0.0, -1.9073486328125e-06, -0.03467369079589844, -2.86102294921875e-05, -0.0001316070556640625, -6.29425048828125e-05, -0.0013570785522460938, 0.0, -8.20159912109375e-05, 0.0, -0.00012886524200439453, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.9524374008178711, 0.0, -1.52587890625e-05, -0.001262664794921875, -0.1679973602294922, -0.000274658203125, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.07539986073970795, -0.008799227885901928], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -5.681701713579905, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7774796485900879, -0.0001531839370727539, -0.00039851298788562417, -1.9073486328125e-06, -0.011272430419921875, -0.00075531005859375, -0.07862567901611328, -0.00028228759765625, -0.0004711151123046875, -5.7220458984375e-06, -0.3522977828979492, -1.9073486328125e-06, -0.0021839141845703125, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.008119583129882812, -3.814697265625e-06, -0.00534820556640625, 0.0, -0.0030059814453125, -2.47955322265625e-05, -0.0004636049270629883, -1.9073486328125e-06, -0.031903862953186035, 0.0, -0.0015586614608764648, -3.814697265625e-06, -0.00042724609375, -0.005644798278808594, -3.62396240234375e-05, -5.91278076171875e-05, 0.0, -0.0007495880126953125, 0.0, -0.00032806396484375, 0.0, -0.8630399703979492, 0.0, -0.018491744995117188, -0.0001316070556640625, -4.57763671875e-05, 0.0, -0.012584686279296875, 0.0, -0.0009307861328125, -9.5367431640625e-06, -3.719329833984375e-05, -5.7220458984375e-06, -0.000446319580078125, -0.10289859771728516, -3.0517578125e-05, -0.001079559326171875, -1.52587890625e-05, -0.004085540771484375, 0.0, -0.005805015563964844, -0.001720428466796875, -2.288818359375e-05, -0.07530021667480469, 0.0, -1.1444091796875e-05, 0.0, -0.0005464553833007812, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08214855194091797, 0.0, -1.9073486328125e-06, -0.20558547973632812, -0.000118255615234375, -0.0003108978271484375, -2.86102294921875e-05, 0.0, -2.6702880859375e-05, 0.0, -6.580352783203125e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.19962024688720703, 0.0, -1.9073486328125e-06, -0.03468894958496094, -2.86102294921875e-05, -0.00014495849609375, -6.866455078125e-05, -0.0012826919555664062, 0.0, -8.0108642578125e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.1198787689208984, 0.0, -1.9073486328125e-06, -0.009860992431640625], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -5.703179608379223, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.8258790969848633, -0.042032353579998016, 0.0, -0.007540583610534668, 0.0, -0.006130218505859375, -0.0013790130615234375, -0.0649576187133789, -0.0002422332763671875, -0.0003376007080078125, -7.62939453125e-06, -0.3381023406982422, -1.9073486328125e-06, -0.0043087005615234375, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.008161544799804688, -1.9073486328125e-06, -0.0071163177490234375, 0.0, -0.0072193145751953125, -2.09808349609375e-05, -0.0005379915237426758, 0.0, -0.03798830509185791, 0.0, -0.001634836196899414, -3.814697265625e-06, -0.0004673004150390625, -0.0056667327880859375, -3.62396240234375e-05, -6.4849853515625e-05, 0.0, -0.000667572021484375, 0.0, -0.00030422210693359375, 0.0, -0.4843711853027344, 0.0, -0.7444095611572266, -7.82012939453125e-05, -0.00014495849609375, 0.0, -0.015064239501953125, -1.9073486328125e-06, -0.05812358856201172, -7.62939453125e-06, -0.00010776519775390625, -1.9073486328125e-06, -5.91278076171875e-05, -0.2611503601074219, -1.1444091796875e-05, -0.0012149810791015625, -1.71661376953125e-05, -0.002948760986328125, 0.0, -0.00496673583984375, -0.00159454345703125, -2.288818359375e-05, -0.09543800354003906, 0.0, -1.1444091796875e-05, 0.0, -0.00048828125, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.085174560546875, 0.0, -1.9073486328125e-06, -0.20766735076904297, -0.0001087188720703125, -0.000308990478515625, -2.86102294921875e-05, 0.0, -2.86102294921875e-05, 0.0, -6.67572021484375e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.19953346252441406, 0.0, -1.9073486328125e-06, -0.03470611572265625, -2.86102294921875e-05, -0.0001316070556640625, -6.29425048828125e-05, -0.0013456344604492188, 0.0, -8.20159912109375e-05, 0.0, -0.00012886524200439453, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.1274957656860352, 0.0, -1.9073486328125e-06, -0.009454727172851562], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -5.71899542005297, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7670044898986816, -1.8238997654407285e-05, -0.003938824404031038, -7.62939453125e-06, -0.01821422576904297, -0.0011386871337890625, -0.07402420043945312, -0.0003814697265625, -0.000396728515625, -7.62939453125e-06, -0.40587520599365234, -1.9073486328125e-06, -0.0022058486938476562, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0073375701904296875, -3.814697265625e-06, -0.005462646484375, 0.0, -0.00418853759765625, -2.288818359375e-05, -0.0004712343215942383, -1.9073486328125e-06, -0.03443098068237305, 0.0, -0.0015659332275390625, -3.814697265625e-06, -0.000469207763671875, -0.005591392517089844, -3.4332275390625e-05, -5.91278076171875e-05, 0.0, -0.000736236572265625, 0.0, -0.00031566619873046875, 0.0, -0.878509521484375, 0.0, -0.0211334228515625, -0.00012969970703125, -4.38690185546875e-05, 0.0, -0.012765884399414062, 0.0, -0.000957489013671875, -1.1444091796875e-05, -3.719329833984375e-05, -5.7220458984375e-06, -0.000438690185546875, -0.10106754302978516, -3.0517578125e-05, -0.0010585784912109375, -1.52587890625e-05, -0.004040718078613281, 0.0, -0.006114959716796875, -0.0016231536865234375, -2.288818359375e-05, -0.07902908325195312, 0.0, -1.1444091796875e-05, 0.0, -0.0005321502685546875, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08131122589111328, 0.0, -1.9073486328125e-06, -0.20630645751953125, -0.000118255615234375, -0.0003070831298828125, -2.86102294921875e-05, 0.0, -2.86102294921875e-05, 0.0, -6.580352783203125e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.20075225830078125, 0.0, -1.9073486328125e-06, -0.034732818603515625, -2.6702880859375e-05, -0.000141143798828125, -6.67572021484375e-05, -0.0013437271118164062, 0.0, -8.20159912109375e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.0837364196777344, 0.0, -1.9073486328125e-06, -0.00954437255859375], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.other_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -5.755965126085293, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7774796485900879, -0.0001531839370727539, -0.00039851298788562417, -1.9073486328125e-06, -0.011272430419921875, -0.00075531005859375, -0.07862567901611328, -0.00028228759765625, -0.0004711151123046875, -5.7220458984375e-06, -0.3522977828979492, -1.9073486328125e-06, -0.0021839141845703125, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.008119583129882812, -3.814697265625e-06, -0.00534820556640625, 0.0, -0.0030059814453125, -2.47955322265625e-05, -0.0004636049270629883, -1.9073486328125e-06, -0.031903862953186035, 0.0, -0.0015586614608764648, -3.814697265625e-06, -0.00042724609375, -0.005644798278808594, -3.62396240234375e-05, -5.91278076171875e-05, 0.0, -0.0007495880126953125, 0.0, -0.00032806396484375, 0.0, -0.8630399703979492, 0.0, -0.018491744995117188, -0.0001316070556640625, -4.57763671875e-05, 0.0, -0.012584686279296875, 0.0, -0.0009307861328125, -9.5367431640625e-06, -3.719329833984375e-05, -5.7220458984375e-06, -0.000446319580078125, -0.10289859771728516, -3.0517578125e-05, -0.001079559326171875, -1.52587890625e-05, -0.004085540771484375, 0.0, -0.005805015563964844, -0.001720428466796875, -2.288818359375e-05, -0.07530021667480469, 0.0, -1.1444091796875e-05, 0.0, -0.0005464553833007812, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08214855194091797, 0.0, -1.9073486328125e-06, -0.20558547973632812, -0.000118255615234375, -0.0003108978271484375, -2.86102294921875e-05, 0.0, -2.6702880859375e-05, 0.0, -6.580352783203125e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.19962024688720703, 0.0, -1.9073486328125e-06, -0.03468894958496094, -2.86102294921875e-05, -0.00014495849609375, -6.866455078125e-05, -0.0012826919555664062, 0.0, -8.0108642578125e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.9520635604858398, 0.0, -1.52587890625e-05, -0.001277923583984375, -0.16585826873779297, -0.0002765655517578125, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.07557155191898346, -0.008924786001443863], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -5.773425816838362, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.8258790969848633, -0.042032353579998016, 0.0, -0.007540583610534668, 0.0, -0.006130218505859375, -0.0013790130615234375, -0.0649576187133789, -0.0002422332763671875, -0.0003376007080078125, -7.62939453125e-06, -0.3381023406982422, -1.9073486328125e-06, -0.0043087005615234375, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.008161544799804688, -1.9073486328125e-06, -0.0071163177490234375, 0.0, -0.0072193145751953125, -2.09808349609375e-05, -0.0005379915237426758, 0.0, -0.03798830509185791, 0.0, -0.001634836196899414, -3.814697265625e-06, -0.0004673004150390625, -0.0056667327880859375, -3.62396240234375e-05, -6.4849853515625e-05, 0.0, -0.000667572021484375, 0.0, -0.00030422210693359375, 0.0, -0.4843711853027344, 0.0, -0.7444095611572266, -7.82012939453125e-05, -0.00014495849609375, 0.0, -0.015064239501953125, -1.9073486328125e-06, -0.05812358856201172, -7.62939453125e-06, -0.00010776519775390625, -1.9073486328125e-06, -5.91278076171875e-05, -0.2611503601074219, -1.1444091796875e-05, -0.0012149810791015625, -1.71661376953125e-05, -0.002948760986328125, 0.0, -0.00496673583984375, -0.00159454345703125, -2.288818359375e-05, -0.09543800354003906, 0.0, -1.1444091796875e-05, 0.0, -0.00048828125, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.085174560546875, 0.0, -1.9073486328125e-06, -0.20766735076904297, -0.0001087188720703125, -0.000308990478515625, -2.86102294921875e-05, 0.0, -2.86102294921875e-05, 0.0, -6.67572021484375e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.19953346252441406, 0.0, -1.9073486328125e-06, -0.03470611572265625, -2.86102294921875e-05, -0.0001316070556640625, -6.29425048828125e-05, -0.0013456344604492188, 0.0, -8.20159912109375e-05, 0.0, -0.00012886524200439453, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.9556884765625, 0.0, -1.52587890625e-05, -0.001262664794921875, -0.16719722747802734, -0.000274658203125, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.074037104845047, -0.008706051856279373], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -5.85054653303262, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7670044898986816, -1.8238997654407285e-05, -0.003938824404031038, -7.62939453125e-06, -0.01821422576904297, -0.0011386871337890625, -0.07402420043945312, -0.0003814697265625, -0.000396728515625, -7.62939453125e-06, -0.40587520599365234, -1.9073486328125e-06, -0.0022058486938476562, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0073375701904296875, -3.814697265625e-06, -0.005462646484375, 0.0, -0.00418853759765625, -2.288818359375e-05, -0.0004712343215942383, -1.9073486328125e-06, -0.03443098068237305, 0.0, -0.0015659332275390625, -3.814697265625e-06, -0.000469207763671875, -0.005591392517089844, -3.4332275390625e-05, -5.91278076171875e-05, 0.0, -0.000736236572265625, 0.0, -0.00031566619873046875, 0.0, -0.878509521484375, 0.0, -0.0211334228515625, -0.00012969970703125, -4.38690185546875e-05, 0.0, -0.012765884399414062, 0.0, -0.000957489013671875, -1.1444091796875e-05, -3.719329833984375e-05, -5.7220458984375e-06, -0.000438690185546875, -0.10106754302978516, -3.0517578125e-05, -0.0010585784912109375, -1.52587890625e-05, -0.004040718078613281, 0.0, -0.006114959716796875, -0.0016231536865234375, -2.288818359375e-05, -0.07902908325195312, 0.0, -1.1444091796875e-05, 0.0, -0.0005321502685546875, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08131122589111328, 0.0, -1.9073486328125e-06, -0.20630645751953125, -0.000118255615234375, -0.0003070831298828125, -2.86102294921875e-05, 0.0, -2.86102294921875e-05, 0.0, -6.580352783203125e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.20075225830078125, 0.0, -1.9073486328125e-06, -0.034732818603515625, -2.6702880859375e-05, -0.000141143798828125, -6.67572021484375e-05, -0.0013437271118164062, 0.0, -8.20159912109375e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.9713125228881836, 0.0, -1.52587890625e-05, -0.001262664794921875, -0.16599750518798828, -0.000274658203125, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.07703623920679092, -0.008917797356843948], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.other_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -6.109886299167492, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.8258790969848633, -0.042032353579998016, 0.0, -0.007540583610534668, 0.0, -0.006130218505859375, -0.0013790130615234375, -0.0649576187133789, -0.0002422332763671875, -0.0003376007080078125, -7.62939453125e-06, -0.3381023406982422, -1.9073486328125e-06, -0.0043087005615234375, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.008161544799804688, -1.9073486328125e-06, -0.0071163177490234375, 0.0, -0.0072193145751953125, -2.09808349609375e-05, -0.0005379915237426758, 0.0, -0.03798830509185791, 0.0, -0.001634836196899414, -3.814697265625e-06, -0.0004673004150390625, -0.0056667327880859375, -3.62396240234375e-05, -6.4849853515625e-05, 0.0, -0.000667572021484375, 0.0, -0.00030422210693359375, 0.0, -0.993800163269043, 0.0, -0.017026901245117188, -0.00012969970703125, -4.76837158203125e-05, 0.0, -0.0123443603515625, 0.0, -0.0009469985961914062, -9.5367431640625e-06, -3.516674041748047e-05, -5.7220458984375e-06, -0.0004482269287109375, -0.11888408660888672, -2.86102294921875e-05, -0.001071929931640625, -1.52587890625e-05, -0.0034074783325195312, 0.0, -0.00572967529296875, -0.0016651153564453125, -2.09808349609375e-05, -0.06666183471679688, 0.0, -1.1444091796875e-05, 0.0, -0.0005006790161132812, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08341407775878906, 0.0, -1.9073486328125e-06, -0.21618938446044922, -0.0001163482666015625, -0.0003299713134765625, -2.86102294921875e-05, 0.0, -2.86102294921875e-05, 0.0, -6.4849853515625e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.2000436782836914, 0.0, -1.9073486328125e-06, -0.03467369079589844, -2.86102294921875e-05, -0.0001316070556640625, -6.29425048828125e-05, -0.0013570785522460938, 0.0, -8.20159912109375e-05, 0.0, -0.00012886524200439453, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.890416145324707, 0.0, -1.9073486328125e-06, -0.09340667724609375], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.increase_health(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68]}, {"score": -6.193640881556284, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7774796485900879, -0.0001531839370727539, -0.00039851298788562417, -1.9073486328125e-06, -0.011272430419921875, -0.00075531005859375, -0.07862567901611328, -0.00028228759765625, -0.0004711151123046875, -5.7220458984375e-06, -0.3522977828979492, -1.9073486328125e-06, -0.0021839141845703125, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.008119583129882812, -3.814697265625e-06, -0.00534820556640625, 0.0, -0.0030059814453125, -2.47955322265625e-05, -0.0004636049270629883, -1.9073486328125e-06, -0.031903862953186035, 0.0, -0.0015586614608764648, -3.814697265625e-06, -0.00042724609375, -0.005644798278808594, -3.62396240234375e-05, -5.91278076171875e-05, 0.0, -0.0007495880126953125, 0.0, -0.00032806396484375, 0.0, -0.5734930038452148, 0.0, -0.6414146423339844, -7.43865966796875e-05, -0.0001373291015625, 0.0, -0.016157150268554688, -1.9073486328125e-06, -0.056044578552246094, -9.5367431640625e-06, -0.00010979175567626953, -1.9073486328125e-06, -6.29425048828125e-05, -0.20109939575195312, -1.33514404296875e-05, -0.001216888427734375, -1.71661376953125e-05, -0.003566741943359375, 0.0, -0.0050525665283203125, -0.001651763916015625, -2.288818359375e-05, -0.10634803771972656, 0.0, -1.1444091796875e-05, 0.0, -0.00052642822265625, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08377552032470703, 0.0, -1.9073486328125e-06, -0.1977062225341797, -0.000110626220703125, -0.0002918243408203125, -3.0517578125e-05, 0.0, -2.6702880859375e-05, 0.0, -6.771087646484375e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.19918346405029297, 0.0, -1.9073486328125e-06, -0.034679412841796875, -2.86102294921875e-05, -0.00014495849609375, -6.866455078125e-05, -0.001277923583984375, 0.0, -7.82012939453125e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.1187877655029297, 0.0, -1.9073486328125e-06, -0.009824752807617188], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -6.25483366639849, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7670044898986816, -1.8238997654407285e-05, -0.003938824404031038, -7.62939453125e-06, -0.01821422576904297, -0.0011386871337890625, -0.07402420043945312, -0.0003814697265625, -0.000396728515625, -7.62939453125e-06, -0.40587520599365234, -1.9073486328125e-06, -0.0022058486938476562, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0073375701904296875, -3.814697265625e-06, -0.005462646484375, 0.0, -0.00418853759765625, -2.288818359375e-05, -0.0004712343215942383, -1.9073486328125e-06, -0.03443098068237305, 0.0, -0.0015659332275390625, -3.814697265625e-06, -0.000469207763671875, -0.005591392517089844, -3.4332275390625e-05, -5.91278076171875e-05, 0.0, -0.000736236572265625, 0.0, -0.00031566619873046875, 0.0, -0.5620689392089844, 0.0, -0.6878252029418945, -7.05718994140625e-05, -0.000133514404296875, 0.0, -0.016605377197265625, -1.9073486328125e-06, -0.05698394775390625, -9.5367431640625e-06, -0.00011169910430908203, -1.9073486328125e-06, -6.29425048828125e-05, -0.2029886245727539, -1.33514404296875e-05, -0.001201629638671875, -1.71661376953125e-05, -0.003509521484375, 0.0, -0.00531768798828125, -0.001560211181640625, -2.288818359375e-05, -0.11220932006835938, 0.0, -1.1444091796875e-05, 0.0, -0.0005130767822265625, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.0829629898071289, 0.0, -1.9073486328125e-06, -0.19842910766601562, -0.000110626220703125, -0.0002880096435546875, -2.86102294921875e-05, 0.0, -2.6702880859375e-05, 0.0, -6.771087646484375e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.200286865234375, 0.0, -1.9073486328125e-06, -0.03470802307128906, -2.6702880859375e-05, -0.0001392364501953125, -6.67572021484375e-05, -0.0013360977172851562, 0.0, -8.0108642578125e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.0826997756958008, 0.0, -1.9073486328125e-06, -0.009511947631835938], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.other_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -6.270176945592475, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7774796485900879, -0.0001531839370727539, -0.00039851298788562417, -1.9073486328125e-06, -0.011272430419921875, -0.00075531005859375, -0.07862567901611328, -0.00028228759765625, -0.0004711151123046875, -5.7220458984375e-06, -0.3522977828979492, -1.9073486328125e-06, -0.0021839141845703125, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.008119583129882812, -3.814697265625e-06, -0.00534820556640625, 0.0, -0.0030059814453125, -2.47955322265625e-05, -0.0004636049270629883, -1.9073486328125e-06, -0.031903862953186035, 0.0, -0.0015586614608764648, -3.814697265625e-06, -0.00042724609375, -0.005644798278808594, -3.62396240234375e-05, -5.91278076171875e-05, 0.0, -0.0007495880126953125, 0.0, -0.00032806396484375, 0.0, -0.5734930038452148, 0.0, -0.6414146423339844, -7.43865966796875e-05, -0.0001373291015625, 0.0, -0.016157150268554688, -1.9073486328125e-06, -0.056044578552246094, -9.5367431640625e-06, -0.00010979175567626953, -1.9073486328125e-06, -6.29425048828125e-05, -0.20109939575195312, -1.33514404296875e-05, -0.001216888427734375, -1.71661376953125e-05, -0.003566741943359375, 0.0, -0.0050525665283203125, -0.001651763916015625, -2.288818359375e-05, -0.10634803771972656, 0.0, -1.1444091796875e-05, 0.0, -0.00052642822265625, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08377552032470703, 0.0, -1.9073486328125e-06, -0.1977062225341797, -0.000110626220703125, -0.0002918243408203125, -3.0517578125e-05, 0.0, -2.6702880859375e-05, 0.0, -6.771087646484375e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.19918346405029297, 0.0, -1.9073486328125e-06, -0.034679412841796875, -2.86102294921875e-05, -0.00014495849609375, -6.866455078125e-05, -0.001277923583984375, 0.0, -7.82012939453125e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.9555778503417969, 0.0, -1.52587890625e-05, -0.0012798309326171875, -0.16500282287597656, -0.0002765655517578125, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.07415600121021271, -0.00882499385625124], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -6.388561761728788, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7670044898986816, -1.8238997654407285e-05, -0.003938824404031038, -7.62939453125e-06, -0.01821422576904297, -0.0011386871337890625, -0.07402420043945312, -0.0003814697265625, -0.000396728515625, -7.62939453125e-06, -0.40587520599365234, -1.9073486328125e-06, -0.0022058486938476562, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0073375701904296875, -3.814697265625e-06, -0.005462646484375, 0.0, -0.00418853759765625, -2.288818359375e-05, -0.0004712343215942383, -1.9073486328125e-06, -0.03443098068237305, 0.0, -0.0015659332275390625, -3.814697265625e-06, -0.000469207763671875, -0.005591392517089844, -3.4332275390625e-05, -5.91278076171875e-05, 0.0, -0.000736236572265625, 0.0, -0.00031566619873046875, 0.0, -0.5620689392089844, 0.0, -0.6878252029418945, -7.05718994140625e-05, -0.000133514404296875, 0.0, -0.016605377197265625, -1.9073486328125e-06, -0.05698394775390625, -9.5367431640625e-06, -0.00011169910430908203, -1.9073486328125e-06, -6.29425048828125e-05, -0.2029886245727539, -1.33514404296875e-05, -0.001201629638671875, -1.71661376953125e-05, -0.003509521484375, 0.0, -0.00531768798828125, -0.001560211181640625, -2.288818359375e-05, -0.11220932006835938, 0.0, -1.1444091796875e-05, 0.0, -0.0005130767822265625, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.0829629898071289, 0.0, -1.9073486328125e-06, -0.19842910766601562, -0.000110626220703125, -0.0002880096435546875, -2.86102294921875e-05, 0.0, -2.6702880859375e-05, 0.0, -6.771087646484375e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.200286865234375, 0.0, -1.9073486328125e-06, -0.03470802307128906, -2.6702880859375e-05, -0.0001392364501953125, -6.67572021484375e-05, -0.0013360977172851562, 0.0, -8.0108642578125e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.9748706817626953, 0.0, -1.52587890625e-05, -0.001262664794921875, -0.1651325225830078, -0.000274658203125, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0755520612001419, -0.008816712535917759], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.other_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -6.55133558372102, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.8258790969848633, -0.042032353579998016, 0.0, -0.007540583610534668, 0.0, -0.006130218505859375, -0.0013790130615234375, -0.0649576187133789, -0.0002422332763671875, -0.0003376007080078125, -7.62939453125e-06, -0.3381023406982422, -1.9073486328125e-06, -0.0043087005615234375, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.008161544799804688, -1.9073486328125e-06, -0.0071163177490234375, 0.0, -0.0072193145751953125, -2.09808349609375e-05, -0.0005379915237426758, 0.0, -0.03798830509185791, 0.0, -0.001634836196899414, -3.814697265625e-06, -0.0004673004150390625, -0.0056667327880859375, -3.62396240234375e-05, -6.4849853515625e-05, 0.0, -0.000667572021484375, 0.0, -0.00030422210693359375, 0.0, -0.4843711853027344, 0.0, -0.7444095611572266, -7.82012939453125e-05, -0.00014495849609375, 0.0, -0.015064239501953125, -1.9073486328125e-06, -0.05812358856201172, -7.62939453125e-06, -0.00010776519775390625, -1.9073486328125e-06, -5.91278076171875e-05, -0.2611503601074219, -1.1444091796875e-05, -0.0012149810791015625, -1.71661376953125e-05, -0.002948760986328125, 0.0, -0.00496673583984375, -0.00159454345703125, -2.288818359375e-05, -0.09543800354003906, 0.0, -1.1444091796875e-05, 0.0, -0.00048828125, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.085174560546875, 0.0, -1.9073486328125e-06, -0.20766735076904297, -0.0001087188720703125, -0.000308990478515625, -2.86102294921875e-05, 0.0, -2.86102294921875e-05, 0.0, -6.67572021484375e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.19953346252441406, 0.0, -1.9073486328125e-06, -0.03470611572265625, -2.86102294921875e-05, -0.0001316070556640625, -6.29425048828125e-05, -0.0013456344604492188, 0.0, -8.20159912109375e-05, 0.0, -0.00012886524200439453, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.892226219177246, 0.0, 0.0, -0.09288215637207031], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.minions)\n        if (self.target.card.minion_type is MINION_TYPE.BEAST and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.increase_health(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68]}, {"score": -6.560068183916819, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "MarkOfTheWild", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Template33"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-05, -0.001064300537109375, -0.00029237763374112546, -0.00030159950256347656, -0.0022688768804073334, -0.001988424686715007, 0.0, -0.00013201776891946793, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -9.34600830078125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.52587890625e-05, -2.407998726994265e-05, -4.76837158203125e-05, -0.0001789325033314526, -3.4332275390625e-05, -0.0006571995327249169, -0.0014172792434692383, -0.001124650239944458, -2.0265579223632812e-06, -0.022764205932617188, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -1.9073486328125e-06, -2.288818359375e-05, -1.33514404296875e-05, -0.1699892282485962, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -8.96453857421875e-05, -3.24249267578125e-05, -0.000843048095703125, -1.9073486328125e-06, 0.0, -6.866455078125e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001239776611328125, 0.0, -5.7220458984375e-05, 0.0, -0.1143876314163208, 0.0, -1.919269561767578e-05, 0.0, -2.3484071789425798e-05, 0.0, -3.62396240234375e-05, -9.5367431640625e-06, -0.00028228759765625, -4.029273986816406e-05, -3.576278118089249e-07, -0.6428003311157227, -0.0001735687255859375, -0.0021076202392578125, -7.62939453125e-06, -3.4332275390625e-05, -0.027441024780273438, -1.52587890625e-05, -0.006862521171569824, -1.1920928244535389e-07, -0.0025968551635742188, -3.814697265625e-05, -0.00011444091796875, -9.5367431640625e-06, -0.0001697540283203125, 0.0, -0.0026928186416625977, 0.0, -0.001560211181640625, 0.0, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.6406354904174805, -5.7220458984375e-06, -0.00075531005859375, -0.011609712615609169, 0.0, -0.7774796485900879, -0.0001531839370727539, -0.00039851298788562417, -1.9073486328125e-06, -0.011272430419921875, -0.00075531005859375, -0.07862567901611328, -0.00028228759765625, -0.0004711151123046875, -5.7220458984375e-06, -0.3522977828979492, -1.9073486328125e-06, -0.0021839141845703125, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.008119583129882812, -3.814697265625e-06, -0.00534820556640625, 0.0, -0.0030059814453125, -2.47955322265625e-05, -0.0004636049270629883, -1.9073486328125e-06, -0.031903862953186035, 0.0, -0.0015586614608764648, -3.814697265625e-06, -0.00042724609375, -0.005644798278808594, -3.62396240234375e-05, -5.91278076171875e-05, 0.0, -0.0007495880126953125, 0.0, -0.00032806396484375, 0.0, -0.8630399703979492, 0.0, -0.018491744995117188, -0.0001316070556640625, -4.57763671875e-05, 0.0, -0.012584686279296875, 0.0, -0.0009307861328125, -9.5367431640625e-06, -3.719329833984375e-05, -5.7220458984375e-06, -0.000446319580078125, -0.10289859771728516, -3.0517578125e-05, -0.001079559326171875, -1.52587890625e-05, -0.004085540771484375, 0.0, -0.005805015563964844, -0.001720428466796875, -2.288818359375e-05, -0.07530021667480469, 0.0, -1.1444091796875e-05, 0.0, -0.0005464553833007812, -1.1444091796875e-05, -1.9431114196777344e-05, -1.9073486328125e-06, -0.08214855194091797, 0.0, -1.9073486328125e-06, -0.20558547973632812, -0.000118255615234375, -0.0003108978271484375, -2.86102294921875e-05, 0.0, -2.6702880859375e-05, 0.0, -6.580352783203125e-05, -1.33514404296875e-05, -7.748603820800781e-06, -1.9073486328125e-06, -0.19962024688720703, 0.0, -1.9073486328125e-06, -0.03468894958496094, -2.86102294921875e-05, -0.00014495849609375, -6.866455078125e-05, -0.0012826919555664062, 0.0, -8.0108642578125e-05, 0.0, -0.00013077259063720703, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.911031723022461, 0.0, -1.9073486328125e-06, -0.09707450866699219], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.DEMON and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.increase_health(2)\n", "choice_history": [77, 147, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68]}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"score": -2.9326085059569493, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "minions", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "minions", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"id": "minion", "_type": "Name"}], "hole1": "remove", "hole0": {"id": "minions", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -1.1910409927368164, -8.392333984375e-05, -8.96453857421875e-05, -7.62939453125e-06, -6.29425048828125e-05, -0.0001087188720703125, -7.62939453125e-06, -0.11786878108978271, 0.0, -0.0036745071411132812, -1.9073486328125e-05, -0.000152587890625, -7.62939453125e-06, -0.00334930419921875, 0.0, -0.0006748437881469727, 0.0, -0.000492095947265625, 0.0, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000202178955078125, 0.0, -4.9591064453125e-05, 0.0, -0.00011515617370605469, -2.5033950805664062e-05, -0.0002193450927734375, -1.1444091796875e-05, -0.03585624694824219, -0.0001392364501953125, -1.52587890625e-05, -1.1444091796875e-05, -0.0119096040725708, -1.0728830375228426e-06, -0.004786491394042969, -0.00038909912109375, -5.7220458984375e-06, -1.9073486328125e-06, -0.003935337066650391, -1.1920928244535389e-07, -0.000118255615234375, -0.0006351470947265625, -1.9073486328125e-06, -0.004045533016324043, -4.768370445162873e-07, -0.00043487548828125, -0.05760669708251953, -0.000286102294921875, -1.1444091796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.013165473006665707, 0.0, -0.0002002716064453125, -3.814697265625e-06, -0.0001049041748046875, -9.5367431640625e-06, -0.000286102294921875, 0.0, -0.0021715164184570312, 0.0, -0.005333542823791504, -9.655952453613281e-06, -1.71661376953125e-05, -0.0018901824951171875, 0.0, -1.094443917274475, 0.0, -0.000179290771484375, -0.0005283355712890625, -1.71661376953125e-05, 0.0, -0.06088755652308464, -1.1920928244535389e-07, -0.06268942356109619, 0.0, -0.001056671142578125, -0.00031280517578125, 0.0, -0.0005776882171630859, -1.9073486328125e-06, -0.000751495361328125, -3.4332275390625e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.004106925800442696, 0.0, -0.00012803077697753906, 0.0, 0.0, -0.020383834838867188, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -4.57763671875e-05, -0.00020837702322751284, -1.1920928244535389e-07, -6.67572021484375e-05, -0.008802413940429688, -0.0001239776611328125, -3.814697265625e-06, -5.733961006626487e-05, 0.0, -7.62939453125e-06, -0.000782012939453125, -0.0001087188720703125, -0.0024696483742445707, 0.0, -0.000946044921875, -0.0012264251708984375, -0.00017547607421875, -1.9073486328125e-05, -0.0002880096435546875, -6.4849853515625e-05, -0.0009860992431640625, -1.9073486328125e-06, -0.000270843505859375, -8.20159912109375e-05, -3.814697265625e-05, -7.62939453125e-06, -6.162974750623107e-05, -1.1920928244535389e-07, -0.0006351470947265625, 0.0, -2.300739288330078e-05, -1.9073486328125e-06, -0.000125885009765625, 0.0, -0.000244140625, -7.62939453125e-05, -0.008890151977539062, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00015437602996826172, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.004532814025878906, 0.0, -0.000457763671875, 0.0, -0.00025582313537597656, 0.0, -0.00010633467900333926, -4.410743713378906e-06, -0.0003261566162109375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0037260055541992188, -0.0003528594970703125, -0.0067348480224609375], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "minions", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "minions", "<EOS>", 97, 166, 25, 133, "minions", "<EOS>", "remove", "<EOS>", 205, 53, 133, "minion", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -2.9989217770843126, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -0.8893747329711914, -0.10268497467041016, -0.00099945068359375, -0.004784584045410156, -6.103515625e-05, -0.0974264144897461, -1.9073486328125e-06, -0.000640869140625, -0.00011444091796875, -2.6702880859375e-05, -4.57763671875e-05, -0.0020610843785107136, -8.344646857949556e-07, -0.0004221200942993164, 0.0, -9.274482727050781e-05, -1.9073486328125e-06, -0.0004901885986328125, 0.0, -0.0002002716064453125, -7.82012939453125e-05, -0.24483203887939453, -0.0005741119384765625, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -1.33514404296875e-05, -6.29425048828125e-05, 0.0, -0.004119873046875, 0.0, -0.0004749298095703125, 0.0, -0.00018143653869628906, 0.0, -0.00011074542271671817, -4.291534423828125e-06, -0.00041961669921875, -1.71661376953125e-05, -1.1444091796875e-05, -0.0037527084350585938, -0.000560760498046875, -0.011003494262695312, -0.0002498626708984375, -0.004032135009765625, -0.0051250457763671875, -1.2483712434768677, 0.0, -0.000728607177734375, -0.1627330780029297, -0.0002155303955078125, -6.29425048828125e-05, -0.0005550384521484375, -5.53131103515625e-05, -0.0036029815673828125, -1.9073486328125e-06, -0.000457763671875, -4.57763671875e-05, -2.86102294921875e-05, -1.52587890625e-05, -0.0001478096965001896, -1.1920928244535389e-07, -0.0010949373245239258, 0.0, -6.151199340820312e-05, 0.0, -0.0001316070556640625, 0.0, -0.000232696533203125, -6.67572021484375e-05, -0.007228851318359375, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.000148773193359375, 0.0, -1.1444091796875e-05, -5.14984130859375e-05, -1.9073486328125e-06, -0.00438690185546875, 0.0, -0.0004329681396484375, 0.0, -0.00025773048400878906, 0.0, -0.00010454653966007754, -4.410743713378906e-06, -0.00032806396484375, -1.33514404296875e-05, -9.5367431640625e-06, -0.0038576126098632812, -0.00034332275390625, -0.0067291259765625], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68, 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -3.103684736471429, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "minions", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"id": "minion", "_type": "Name"}], "hole1": "remove", "hole0": {"id": "minions", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -1.1910409927368164, -8.392333984375e-05, -8.96453857421875e-05, -7.62939453125e-06, -6.29425048828125e-05, -0.0001087188720703125, -7.62939453125e-06, -0.11786878108978271, 0.0, -0.0036745071411132812, -1.9073486328125e-05, -0.000152587890625, -7.62939453125e-06, -0.00334930419921875, 0.0, -0.0006748437881469727, 0.0, -0.000492095947265625, 0.0, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000202178955078125, 0.0, -4.9591064453125e-05, 0.0, -0.00011515617370605469, -2.5033950805664062e-05, -0.0002193450927734375, -1.1444091796875e-05, -0.03585624694824219, -0.0001392364501953125, -1.52587890625e-05, -1.1444091796875e-05, -0.0119096040725708, -1.0728830375228426e-06, -0.004786491394042969, -0.00038909912109375, -5.7220458984375e-06, -1.9073486328125e-06, -0.003935337066650391, -1.1920928244535389e-07, -0.000118255615234375, -0.0006351470947265625, -1.9073486328125e-06, -0.004045533016324043, -4.768370445162873e-07, -0.00043487548828125, -0.05760669708251953, -0.000286102294921875, -1.1444091796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.013165473006665707, 0.0, -0.0002002716064453125, -3.814697265625e-06, -0.0001049041748046875, -9.5367431640625e-06, -0.000286102294921875, 0.0, -0.0021715164184570312, 0.0, -0.005333542823791504, -9.655952453613281e-06, -1.71661376953125e-05, -0.0018901824951171875, 0.0, -0.4227461814880371, -3.099436753473128e-06, -0.0001468658447265625, -0.0001678466796875, -4.38690185546875e-05, -5.7220458984375e-06, -0.43482348322868347, 0.0, -0.5330489873886108, 0.0, -0.000377655029296875, -0.0003814697265625, 0.0, -0.0016058683395385742, -1.9073486328125e-06, -0.0009613037109375, -3.0517578125e-05, -2.288818359375e-05, -3.814697265625e-06, -0.008612623438239098, 0.0, -0.00011479854583740234, 0.0, 0.0, -0.014150619506835938, -5.7220458984375e-06, -5.7220458984375e-06, -1.9073486328125e-06, -4.76837158203125e-05, -0.00020837702322751284, -1.1920928244535389e-07, -7.05718994140625e-05, -0.008775711059570312, -0.0001583099365234375, -3.814697265625e-06, -5.578988930210471e-05, 0.0, -7.62939453125e-06, -0.0007953643798828125, -0.0001125335693359375, -0.0024546277709305286, 0.0, -0.00092315673828125, -0.0012187957763671875, -0.000179290771484375, -1.9073486328125e-05, -0.0002880096435546875, -6.4849853515625e-05, -0.0009860992431640625, -1.9073486328125e-06, -0.0002727508544921875, -7.62939453125e-05, -3.62396240234375e-05, -7.62939453125e-06, -5.9603295085253194e-05, -1.1920928244535389e-07, -0.0006389617919921875, 0.0, -2.491474151611328e-05, -1.9073486328125e-06, -0.0001277923583984375, 0.0, -0.000244140625, -7.62939453125e-05, -0.008836746215820312, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00015437602996826172, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0045337677001953125, 0.0, -0.000457763671875, 0.0, -0.00025582313537597656, 0.0, -0.00010633467900333926, -4.410743713378906e-06, -0.00032627576729282737, -1.33514404296875e-05, -9.5367431640625e-06, -0.0037326812744140625, -0.0003566741943359375, -0.0067424774169921875], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "minions", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "minions", "<EOS>", "remove", "<EOS>", 205, 53, 133, "minion", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -4.4991800458520075, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "minions", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -1.1910409927368164, -8.392333984375e-05, -8.96453857421875e-05, -7.62939453125e-06, -6.29425048828125e-05, -0.0001087188720703125, -7.62939453125e-06, -0.11786878108978271, 0.0, -0.0036745071411132812, -1.9073486328125e-05, -0.000152587890625, -7.62939453125e-06, -0.00334930419921875, 0.0, -0.0006748437881469727, 0.0, -0.000492095947265625, 0.0, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000202178955078125, 0.0, -4.9591064453125e-05, 0.0, -0.00011515617370605469, -2.5033950805664062e-05, -0.0002193450927734375, -1.1444091796875e-05, -0.03585624694824219, -0.0001392364501953125, -1.52587890625e-05, -1.1444091796875e-05, -0.0119096040725708, -1.0728830375228426e-06, -0.004786491394042969, -0.00038909912109375, -5.7220458984375e-06, -1.9073486328125e-06, -0.003935337066650391, -1.1920928244535389e-07, -0.000118255615234375, -0.0006351470947265625, -1.9073486328125e-06, -0.004045533016324043, -4.768370445162873e-07, -0.00043487548828125, -0.05760669708251953, -0.000286102294921875, -1.1444091796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.013165473006665707, 0.0, -0.0002002716064453125, -3.814697265625e-06, -0.0001049041748046875, -9.5367431640625e-06, -0.000286102294921875, 0.0, -0.0021715164184570312, 0.0, -0.005333542823791504, -9.655952453613281e-06, -1.71661376953125e-05, -0.0018901824951171875, 0.0, -0.4227461814880371, -3.099436753473128e-06, -0.0001468658447265625, -0.0001678466796875, -4.38690185546875e-05, -5.7220458984375e-06, -1.092313289642334, -1.4305104514278355e-06, -0.0005352497100830078, 0.0, -1.9073486328125e-06, -0.030210494995117188, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.0005424891132861376, -3.576278118089249e-07, -0.0001926422119140625, -0.020175933837890625, -0.0025310516357421875, -3.814697265625e-06, -5.257126031210646e-05, 0.0, -0.179229736328125, -0.0017719268798828125, -0.32781028747558594, 0.0, -0.6659097671508789, 0.0, -0.022477388381958008, 0.0, -1.9788742065429688e-05, 0.0, -0.029973268508911133, 0.0, 0.0, -0.0018215179443359375, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.0002752523578237742, -1.1920928244535389e-07, -0.0001773834228515625, -0.023026466369628906, -9.5367431640625e-05, -1.9073486328125e-06, -5.1498369430191815e-05, 0.0, -7.62939453125e-06, -0.0008487701416015625, -9.5367431640625e-05, -0.0021413536742329597, 0.0, -0.001110076904296875, -0.001117706298828125, -0.00017547607421875, -2.09808349609375e-05, -0.0002956390380859375, -6.866455078125e-05, -0.000904083251953125, -1.9073486328125e-06, -0.0002689361572265625, -6.4849853515625e-05, -3.4332275390625e-05, -7.62939453125e-06, -5.686171061825007e-05, -1.1920928244535389e-07, -0.0006694793701171875, 0.0, -2.682209014892578e-05, -1.9073486328125e-06, -0.0001277923583984375, 0.0, -0.000244140625, -7.82012939453125e-05, -0.008710861206054688, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00015628337860107422, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0045375823974609375, 0.0, -0.0004596710205078125, 0.0, -0.00025773048400878906, 0.0, -0.00010633467900333926, -4.410743713378906e-06, -0.0003223419189453125, -1.33514404296875e-05, -9.5367431640625e-06, -0.0037326812744140625, -0.0003757476806640625, -0.0067462921142578125], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minion.damage(player.effective_spell_damage(2), self)\n            self.target.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "minions", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -4.546660408348359, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "minions", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -1.1910409927368164, -8.392333984375e-05, -8.96453857421875e-05, -7.62939453125e-06, -6.29425048828125e-05, -0.0001087188720703125, -7.62939453125e-06, -0.11786878108978271, 0.0, -0.0036745071411132812, -1.9073486328125e-05, -0.000152587890625, -7.62939453125e-06, -0.00334930419921875, 0.0, -0.0006748437881469727, 0.0, -0.000492095947265625, 0.0, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000202178955078125, 0.0, -4.9591064453125e-05, 0.0, -0.00011515617370605469, -2.5033950805664062e-05, -0.0002193450927734375, -1.1444091796875e-05, -0.03585624694824219, -0.0001392364501953125, -1.52587890625e-05, -1.1444091796875e-05, -0.0119096040725708, -1.0728830375228426e-06, -0.004786491394042969, -0.00038909912109375, -5.7220458984375e-06, -1.9073486328125e-06, -0.003935337066650391, -1.1920928244535389e-07, -0.000118255615234375, -0.0006351470947265625, -1.9073486328125e-06, -0.004045533016324043, -4.768370445162873e-07, -0.00043487548828125, -0.05760669708251953, -0.000286102294921875, -1.1444091796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.013165473006665707, 0.0, -0.0002002716064453125, -3.814697265625e-06, -0.0001049041748046875, -9.5367431640625e-06, -0.000286102294921875, 0.0, -0.0021715164184570312, 0.0, -0.005333542823791504, -9.655952453613281e-06, -1.71661376953125e-05, -0.0018901824951171875, 0.0, -0.4227461814880371, -3.099436753473128e-06, -0.0001468658447265625, -0.0001678466796875, -4.38690185546875e-05, -5.7220458984375e-06, -1.092313289642334, -1.4305104514278355e-06, -0.0005352497100830078, 0.0, -1.9073486328125e-06, -0.030210494995117188, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.0005424891132861376, -3.576278118089249e-07, -0.0001926422119140625, -0.020175933837890625, -0.0025310516357421875, -3.814697265625e-06, -5.257126031210646e-05, 0.0, -0.179229736328125, -0.0017719268798828125, -0.32781028747558594, 0.0, -0.7236871719360352, -7.62939453125e-06, -0.0016956329345703125, 0.0, -0.00025177001953125, 0.0, -0.0003210306167602539, -9.655952453613281e-06, -0.012230467051267624, 0.0, -0.0018733739852905273, 0.0, 0.0, -0.0023403167724609375, -3.814697265625e-06, -1.9073486328125e-05, -3.814697265625e-06, -3.4332275390625e-05, -0.0005245874635875225, -7.152555099310121e-07, -0.0001983642578125, -0.04346752166748047, -0.00319671630859375, -3.814697265625e-06, -6.0081438277848065e-05, 0.0, -9.5367431640625e-06, -0.00077056884765625, -8.96453857421875e-05, -0.0033527561463415623, 0.0, -0.0012493133544921875, -0.0013866424560546875, -0.0002880096435546875, -2.09808349609375e-05, -0.0003070831298828125, -9.1552734375e-05, -0.00080108642578125, -1.9073486328125e-06, -0.0002765655517578125, -6.866455078125e-05, -3.0517578125e-05, -7.62939453125e-06, -5.686171061825007e-05, -1.1920928244535389e-07, -0.00069427490234375, 0.0, -2.682209014892578e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -0.0002384185791015625, -7.82012939453125e-05, -0.008649826049804688, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00015246868133544922, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0045452117919921875, 0.0, -0.0004596710205078125, 0.0, -0.00025582313537597656, 0.0, -0.00010633467900333926, -4.410743713378906e-06, -0.0003223419189453125, -1.33514404296875e-05, -9.5367431640625e-06, -0.0037221908569335938, -0.000370025634765625, -0.00664520263671875], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minion.damage(player.effective_spell_damage(2), self)\n            game.other_player.hero.damage(player.effective_spell_damage(2),\n                self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "minions", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -4.65247574643341, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"id": "targets", "_type": "Name"}, "ops": [{"_type": "IsNot"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "args": {"_type": "Template8"}, "name": "use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -0.8893747329711914, -0.10268497467041016, -0.00099945068359375, -0.004784584045410156, -6.103515625e-05, -0.0974264144897461, -1.9073486328125e-06, -0.000640869140625, -0.00011444091796875, -2.6702880859375e-05, -4.57763671875e-05, -0.0020610843785107136, -8.344646857949556e-07, -0.0004221200942993164, 0.0, -9.274482727050781e-05, -1.9073486328125e-06, -0.0004901885986328125, 0.0, -0.0002002716064453125, -7.82012939453125e-05, -0.24483203887939453, -0.0005741119384765625, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -1.33514404296875e-05, -6.29425048828125e-05, 0.0, -0.004119873046875, 0.0, -0.0004749298095703125, 0.0, -0.00018143653869628906, 0.0, -0.00011074542271671817, -4.291534423828125e-06, -0.00041961669921875, -1.71661376953125e-05, -1.1444091796875e-05, -0.0037527084350585938, -0.000560760498046875, -0.011003494262695312, -0.0002498626708984375, -0.004032135009765625, -0.0051250457763671875, -0.36276161670684814, 0.0, -0.0004367828369140625, -0.011208534240722656, -0.11098480224609375, -0.0001735687255859375, -2.86102294921875e-05, -2.6702880859375e-05, -5.340576171875e-05, 0.0, -0.06458510458469391, -1.6689286894688848e-06, -0.10540008544921875, -1.9073486328125e-06, -0.0004911422729492188, 0.0, -0.04274749755859375, 0.0, -0.06198990345001221, 0.0, -0.007067680358886719, 0.0, -3.4332275390625e-05, -0.00034332275390625, -0.0002613067626953125, -3.4332275390625e-05, 0.0, -0.012326240539550781, 0.0, -0.0001354217529296875, 0.0, -0.00012052059173583984, -9.655952453613281e-06, -0.0023163557052612305, -2.6702880859375e-05, -0.9469528198242188, -0.0025386810302734375, -0.05930519104003906, -1.52587890625e-05, -0.6108074188232422, -0.0001201629638671875, -0.02702951431274414, 0.0, -0.006247520446777344, -0.022962570190429688, -0.0002346038818359375, -0.00244140625, -1.9073486328125e-06, -0.0056858062744140625, -1.9073486328125e-06, -0.06369590759277344, 0.0, -0.44043827056884766, 0.0, -0.00048065185546875, -0.000720977783203125, -3.814697265625e-06, -0.000415802001953125, 0.0, -0.07630203664302826, 0.0, -7.05718994140625e-05, 0.0, 0.0, -0.000888824462890625, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, -0.00022375467233359814, -1.1920928244535389e-07, -6.67572021484375e-05, -0.005008697509765625, -7.43865966796875e-05, -3.814697265625e-06, -6.616107566514984e-05, 0.0, -9.5367431640625e-05, -0.007997512817382812, -2.86102294921875e-05, -0.012114524841308594, -3.814697265625e-06, -0.000213623046875, 0.0, -0.0029954910278320312, 0.0, -2.491474151611328e-05, 0.0, -0.0001964569091796875, 0.0, 0.0, -0.00099945068359375, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -0.000255463644862175, -1.1920928244535389e-07, -0.0001316070556640625, -0.014509201049804688, -5.53131103515625e-05, -1.9073486328125e-06, -5.662433250108734e-05, 0.0], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        if targets is not MINION_TYPE.BEAST:\n            minion.damage(player.effective_spell_damage(2), self)\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68, 217, 88, 118, "use", "<EOS>", 3, 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 89, 122, 21, 114, 25, 133, "targets", "<EOS>", 202, 13, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 217, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -5.0642975790652045, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "minions", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -1.1910409927368164, -8.392333984375e-05, -8.96453857421875e-05, -7.62939453125e-06, -6.29425048828125e-05, -0.0001087188720703125, -7.62939453125e-06, -0.11786878108978271, 0.0, -0.0036745071411132812, -1.9073486328125e-05, -0.000152587890625, -7.62939453125e-06, -0.00334930419921875, 0.0, -0.0006748437881469727, 0.0, -0.000492095947265625, 0.0, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000202178955078125, 0.0, -4.9591064453125e-05, 0.0, -0.00011515617370605469, -2.5033950805664062e-05, -0.0002193450927734375, -1.1444091796875e-05, -0.03585624694824219, -0.0001392364501953125, -1.52587890625e-05, -1.1444091796875e-05, -0.0119096040725708, -1.0728830375228426e-06, -0.004786491394042969, -0.00038909912109375, -5.7220458984375e-06, -1.9073486328125e-06, -0.003935337066650391, -1.1920928244535389e-07, -0.000118255615234375, -0.0006351470947265625, -1.9073486328125e-06, -0.004045533016324043, -4.768370445162873e-07, -0.00043487548828125, -0.05760669708251953, -0.000286102294921875, -1.1444091796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.013165473006665707, 0.0, -0.0002002716064453125, -3.814697265625e-06, -0.0001049041748046875, -9.5367431640625e-06, -0.000286102294921875, 0.0, -0.0021715164184570312, 0.0, -0.005333542823791504, -9.655952453613281e-06, -1.71661376953125e-05, -0.0018901824951171875, 0.0, -0.4227461814880371, -3.099436753473128e-06, -0.0001468658447265625, -0.0001678466796875, -4.38690185546875e-05, -5.7220458984375e-06, -1.092313289642334, -1.4305104514278355e-06, -0.0005352497100830078, 0.0, -1.9073486328125e-06, -0.030210494995117188, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-05, -0.0005424891132861376, -3.576278118089249e-07, -0.0001926422119140625, -0.020175933837890625, -0.0025310516357421875, -3.814697265625e-06, -5.257126031210646e-05, 0.0, -0.179229736328125, -0.0017719268798828125, -1.2853918075561523, -1.9073486328125e-06, -0.3358156085014343, 0.0, -0.000820159912109375, 0.0, 0.0, -0.0038967132568359375, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-05, -0.000268816074822098, -1.1920928244535389e-07, -6.866455078125e-05, -0.010328292846679688, -0.000270843505859375, -1.9073486328125e-06, -5.507464084075764e-05, 0.0, -7.62939453125e-06, -0.0008563995361328125, -7.62939453125e-05, -0.0017715608701109886, 0.0, -0.0009403228759765625, -0.0013294219970703125, -0.0001659393310546875, -1.9073486328125e-05, -0.0002841949462890625, -6.4849853515625e-05, -0.0009708404541015625, -1.9073486328125e-06, -0.0002689361572265625, -6.866455078125e-05, -3.814697265625e-05, -5.7220458984375e-06, -5.817285637021996e-05, -1.1920928244535389e-07, -0.000637054443359375, 0.0, -2.491474151611328e-05, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -0.000244140625, -7.82012939453125e-05, -0.008838653564453125, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00015628337860107422, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.004528999328613281, 0.0, -0.0004596710205078125, 0.0, -0.00025582313537597656, 0.0, -0.00010633467900333926, -4.410743713378906e-06, -0.0003243684477638453, -1.33514404296875e-05, -9.5367431640625e-06, -0.0037412643432617188, -0.000362396240234375, -0.0067691802978515625], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minion.damage(player.effective_spell_damage(2), self)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "minions", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -5.130750676352541, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "minions", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minions", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -1.1910409927368164, -8.392333984375e-05, -8.96453857421875e-05, -7.62939453125e-06, -6.29425048828125e-05, -0.0001087188720703125, -7.62939453125e-06, -0.11786878108978271, 0.0, -0.0036745071411132812, -1.9073486328125e-05, -0.000152587890625, -7.62939453125e-06, -0.00334930419921875, 0.0, -0.0006748437881469727, 0.0, -0.000492095947265625, 0.0, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000202178955078125, 0.0, -4.9591064453125e-05, 0.0, -0.00011515617370605469, -2.5033950805664062e-05, -0.0002193450927734375, -1.1444091796875e-05, -0.03585624694824219, -0.0001392364501953125, -1.52587890625e-05, -1.1444091796875e-05, -0.0119096040725708, -1.0728830375228426e-06, -0.004786491394042969, -0.00038909912109375, -5.7220458984375e-06, -1.9073486328125e-06, -0.003935337066650391, -1.1920928244535389e-07, -0.000118255615234375, -0.0006351470947265625, -1.9073486328125e-06, -0.004045533016324043, -4.768370445162873e-07, -0.00043487548828125, -0.05760669708251953, -0.000286102294921875, -1.1444091796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.013165473006665707, 0.0, -0.0002002716064453125, -3.814697265625e-06, -0.0001049041748046875, -9.5367431640625e-06, -0.000286102294921875, 0.0, -0.0021715164184570312, 0.0, -0.005333542823791504, -9.655952453613281e-06, -1.71661376953125e-05, -0.0018901824951171875, 0.0, -0.4227461814880371, -3.099436753473128e-06, -0.0001468658447265625, -0.0001678466796875, -4.38690185546875e-05, -5.7220458984375e-06, -0.43482348322868347, 0.0, -1.2499316930770874, 0.0, -7.62939453125e-06, -0.0394287109375, -7.62939453125e-06, -2.09808349609375e-05, -1.33514404296875e-05, -2.47955322265625e-05, -0.0005921629490330815, -2.3841855067985307e-07, -0.0001621246337890625, -0.020139694213867188, -0.0043468475341796875, -1.9073486328125e-06, -4.9948652304010466e-05, 0.0, -0.19219303131103516, -0.0017223358154296875, -0.34624671936035156, 0.0, -0.6596279144287109, 0.0, -0.02459275722503662, 0.0, -1.9788742065429688e-05, 0.0, -0.031018495559692383, 0.0, 0.0, -0.00179290771484375, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.0002747754333540797, -1.1920928244535389e-07, -0.00018310546875, -0.02347087860107422, -9.918212890625e-05, -1.9073486328125e-06, -5.1498369430191815e-05, 0.0, -7.62939453125e-06, -0.0008487701416015625, -9.34600830078125e-05, -0.0021159620955586433, 0.0, -0.0011138916015625, -0.001125335693359375, -0.00017547607421875, -2.09808349609375e-05, -0.0002956390380859375, -6.866455078125e-05, -0.00090789794921875, -1.9073486328125e-06, -0.0002689361572265625, -6.4849853515625e-05, -3.4332275390625e-05, -7.62939453125e-06, -5.686171061825007e-05, -1.1920928244535389e-07, -0.000667572021484375, 0.0, -2.682209014892578e-05, -1.9073486328125e-06, -0.0001277923583984375, 0.0, -0.000244140625, -7.82012939453125e-05, -0.008710861206054688, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00015628337860107422, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.004536628723144531, 0.0, -0.0004596710205078125, 0.0, -0.00025773048400878906, 0.0, -0.00010633467900333926, -4.410743713378906e-06, -0.0003223419189453125, -1.33514404296875e-05, -9.5367431640625e-06, -0.0037336349487304688, -0.0003757476806640625, -0.006748199462890625], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minions.damage(player.effective_spell_damage(2), self)\n            self.target.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 82, 103, 205, 53, 133, "minions", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "minions", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -5.236194172499907, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "args": {"_type": "Template8"}, "name": "use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -0.8893747329711914, -0.10268497467041016, -0.00099945068359375, -0.004784584045410156, -6.103515625e-05, -0.0974264144897461, -1.9073486328125e-06, -0.000640869140625, -0.00011444091796875, -2.6702880859375e-05, -4.57763671875e-05, -0.0020610843785107136, -8.344646857949556e-07, -0.0004221200942993164, 0.0, -9.274482727050781e-05, -1.9073486328125e-06, -0.0004901885986328125, 0.0, -0.0002002716064453125, -7.82012939453125e-05, -0.24483203887939453, -0.0005741119384765625, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -1.33514404296875e-05, -6.29425048828125e-05, 0.0, -0.004119873046875, 0.0, -0.0004749298095703125, 0.0, -0.00018143653869628906, 0.0, -0.00011074542271671817, -4.291534423828125e-06, -0.00041961669921875, -1.71661376953125e-05, -1.1444091796875e-05, -0.0037527084350585938, -0.000560760498046875, -0.011003494262695312, -0.0002498626708984375, -0.004032135009765625, -0.0051250457763671875, -0.36276161670684814, 0.0, -0.0004367828369140625, -0.011208534240722656, -0.11098480224609375, -0.0001735687255859375, -2.86102294921875e-05, -2.6702880859375e-05, -5.340576171875e-05, 0.0, -0.06458510458469391, -1.6689286894688848e-06, -0.10540008544921875, -1.9073486328125e-06, -0.0004911422729492188, 0.0, -0.04274749755859375, 0.0, -0.06198990345001221, 0.0, -0.007067680358886719, 0.0, -3.4332275390625e-05, -0.00034332275390625, -0.0002613067626953125, -3.4332275390625e-05, 0.0, -0.012326240539550781, 0.0, -0.0001354217529296875, 0.0, -0.00012052059173583984, -9.655952453613281e-06, -0.0023163557052612305, -2.6702880859375e-05, -0.49635887145996094, -0.000545501708984375, -2.86102294921875e-05, 0.0, -0.059070587158203125, -2.3841855067985307e-07, -0.026430130004882812, -0.0004482269287109375, -1.52587890625e-05, 0.0, -0.03507125377655029, -1.1920928244535389e-07, -0.000133514404296875, -0.00156402587890625, -2.288818359375e-05, -0.007099902257323265, -4.768370445162873e-07, -0.0007152557373046875, -0.028731346130371094, -0.000194549560546875, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.03388404846191406, 0.0, -0.0007801055908203125, -3.814697265625e-06, -0.000141143798828125, -7.62939453125e-06, -0.0004863739013671875, 0.0, -0.002223968505859375, 0.0, -0.0061037540435791016, -9.5367431640625e-06, -7.62939453125e-05, -0.0010776519775390625, 0.0, -0.12553302943706512, -8.344646857949556e-07, -0.0001392364501953125, -0.00023651123046875, -2.86102294921875e-05, -3.814697265625e-06, -0.7213919758796692, -5.960462772236497e-07, -0.0025185346603393555, 0.0, -1.9073486328125e-06, -0.18952655792236328, -9.5367431640625e-06, -1.1444091796875e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.0004936159821227193, -3.576278118089249e-07, -0.000171661376953125, -0.02069091796875, -0.001567840576171875, -3.814697265625e-06, -5.829329529660754e-05, 0.0, -0.1747894287109375, -0.0024003982543945312, -0.2770099639892578, 0.0, -0.6000232696533203, 0.0, -0.020117998123168945, 0.0, -1.9788742065429688e-05, 0.0, -0.03318142890930176, 0.0, 0.0, -0.001705169677734375, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.00027346430579200387, -1.1920928244535389e-07, -0.0001773834228515625, -0.022693634033203125, -9.34600830078125e-05, -1.9073486328125e-06, -5.066390076535754e-05, 0.0], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(2), self)\n            self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68, 217, 88, 118, "use", "<EOS>", 3, 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -5.4105266077537095, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "args": {"_type": "Template8"}, "name": "use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -0.8893747329711914, -0.10268497467041016, -0.00099945068359375, -0.004784584045410156, -6.103515625e-05, -0.0974264144897461, -1.9073486328125e-06, -0.000640869140625, -0.00011444091796875, -2.6702880859375e-05, -4.57763671875e-05, -0.0020610843785107136, -8.344646857949556e-07, -0.0004221200942993164, 0.0, -9.274482727050781e-05, -1.9073486328125e-06, -0.0004901885986328125, 0.0, -0.0002002716064453125, -7.82012939453125e-05, -0.24483203887939453, -0.0005741119384765625, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -1.33514404296875e-05, -6.29425048828125e-05, 0.0, -0.004119873046875, 0.0, -0.0004749298095703125, 0.0, -0.00018143653869628906, 0.0, -0.00011074542271671817, -4.291534423828125e-06, -0.00041961669921875, -1.71661376953125e-05, -1.1444091796875e-05, -0.0037527084350585938, -0.000560760498046875, -0.011003494262695312, -0.0002498626708984375, -0.004032135009765625, -0.0051250457763671875, -0.36276161670684814, 0.0, -0.0004367828369140625, -0.011208534240722656, -0.11098480224609375, -0.0001735687255859375, -2.86102294921875e-05, -2.6702880859375e-05, -5.340576171875e-05, 0.0, -0.06458510458469391, -1.6689286894688848e-06, -0.10540008544921875, -1.9073486328125e-06, -0.0004911422729492188, 0.0, -0.04274749755859375, 0.0, -0.06198990345001221, 0.0, -0.007067680358886719, 0.0, -3.4332275390625e-05, -0.00034332275390625, -0.0002613067626953125, -3.4332275390625e-05, 0.0, -0.012326240539550781, 0.0, -0.0001354217529296875, 0.0, -0.00012052059173583984, -9.655952453613281e-06, -0.0023163557052612305, -2.6702880859375e-05, -0.49635887145996094, -0.000545501708984375, -2.86102294921875e-05, 0.0, -0.059070587158203125, -2.3841855067985307e-07, -0.026430130004882812, -0.0004482269287109375, -1.52587890625e-05, 0.0, -0.03507125377655029, -1.1920928244535389e-07, -0.000133514404296875, -0.00156402587890625, -2.288818359375e-05, -0.007099902257323265, -4.768370445162873e-07, -0.0007152557373046875, -0.028731346130371094, -0.000194549560546875, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.03388404846191406, 0.0, -0.0007801055908203125, -3.814697265625e-06, -0.000141143798828125, -7.62939453125e-06, -0.0004863739013671875, 0.0, -0.002223968505859375, 0.0, -0.0061037540435791016, -9.5367431640625e-06, -7.62939453125e-05, -0.0010776519775390625, 0.0, -0.12553302943706512, -8.344646857949556e-07, -0.0001392364501953125, -0.00023651123046875, -2.86102294921875e-05, -3.814697265625e-06, -1.0429213047027588, -3.576278118089249e-07, -0.0003325939178466797, 0.0, -1.9073486328125e-06, -0.049017906188964844, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -2.47955322265625e-05, -0.0005157842533662915, -4.768370445162873e-07, -0.000171661376953125, -0.01923370361328125, -0.0015125274658203125, -3.814697265625e-06, -5.6028329709079117e-05, 0.0, -0.13999462127685547, -0.0023469924926757812, -0.2500743865966797, 0.0, -0.6607418060302734, 0.0, -0.019665002822875977, 0.0, -1.9788742065429688e-05, 0.0, -0.032157182693481445, 0.0, 0.0, -0.0016651153564453125, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.00027358351508155465, -1.1920928244535389e-07, -0.000171661376953125, -0.022274017333984375, -9.34600830078125e-05, -1.9073486328125e-06, -5.078311005490832e-05, 0.0], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minion.damage(player.effective_spell_damage(2), self)\n            self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68, 217, 88, 118, "use", "<EOS>", 3, 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -5.422128065300363, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "args": {"_type": "Template8"}, "name": "use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -0.8893747329711914, -0.10268497467041016, -0.00099945068359375, -0.004784584045410156, -6.103515625e-05, -0.0974264144897461, -1.9073486328125e-06, -0.000640869140625, -0.00011444091796875, -2.6702880859375e-05, -4.57763671875e-05, -0.0020610843785107136, -8.344646857949556e-07, -0.0004221200942993164, 0.0, -9.274482727050781e-05, -1.9073486328125e-06, -0.0004901885986328125, 0.0, -0.0002002716064453125, -7.82012939453125e-05, -0.24483203887939453, -0.0005741119384765625, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -1.33514404296875e-05, -6.29425048828125e-05, 0.0, -0.004119873046875, 0.0, -0.0004749298095703125, 0.0, -0.00018143653869628906, 0.0, -0.00011074542271671817, -4.291534423828125e-06, -0.00041961669921875, -1.71661376953125e-05, -1.1444091796875e-05, -0.0037527084350585938, -0.000560760498046875, -0.011003494262695312, -0.0002498626708984375, -0.004032135009765625, -0.0051250457763671875, -0.36276161670684814, 0.0, -0.0004367828369140625, -0.011208534240722656, -0.11098480224609375, -0.0001735687255859375, -2.86102294921875e-05, -2.6702880859375e-05, -5.340576171875e-05, 0.0, -0.06458510458469391, -1.6689286894688848e-06, -0.10540008544921875, -1.9073486328125e-06, -0.0004911422729492188, 0.0, -0.04274749755859375, 0.0, -0.06198990345001221, 0.0, -0.007067680358886719, 0.0, -3.4332275390625e-05, -0.00034332275390625, -0.0002613067626953125, -3.4332275390625e-05, 0.0, -0.012326240539550781, 0.0, -0.0001354217529296875, 0.0, -0.00012052059173583984, -9.655952453613281e-06, -0.0023163557052612305, -2.6702880859375e-05, -0.49635887145996094, -0.000545501708984375, -2.86102294921875e-05, 0.0, -0.059070587158203125, -2.3841855067985307e-07, -0.026430130004882812, -0.0004482269287109375, -1.52587890625e-05, 0.0, -0.03507125377655029, -1.1920928244535389e-07, -0.000133514404296875, -0.00156402587890625, -2.288818359375e-05, -0.007099902257323265, -4.768370445162873e-07, -0.0007152557373046875, -0.028731346130371094, -0.000194549560546875, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.03388404846191406, 0.0, -0.0007801055908203125, -3.814697265625e-06, -0.000141143798828125, -7.62939453125e-06, -0.0004863739013671875, 0.0, -0.002223968505859375, 0.0, -0.0061037540435791016, -9.5367431640625e-06, -7.62939453125e-05, -0.0010776519775390625, 0.0, -0.12553302943706512, -8.344646857949556e-07, -0.0001392364501953125, -0.00023651123046875, -2.86102294921875e-05, -3.814697265625e-06, -0.7213919758796692, -5.960462772236497e-07, -0.0025185346603393555, 0.0, -1.9073486328125e-06, -0.18952655792236328, -9.5367431640625e-06, -1.1444091796875e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.0004936159821227193, -3.576278118089249e-07, -0.000171661376953125, -0.02069091796875, -0.001567840576171875, -3.814697265625e-06, -5.829329529660754e-05, 0.0, -0.1747894287109375, -0.0024003982543945312, -0.2770099639892578, 0.0, -0.7985811233520508, -7.62939453125e-06, -0.0016460418701171875, 0.0, -0.0002803802490234375, 0.0, -0.0002923011779785156, -9.655952453613281e-06, -0.01142942439764738, 0.0, -0.0018998384475708008, 0.0, 0.0, -0.002349853515625, -3.814697265625e-06, -1.9073486328125e-05, -3.814697265625e-06, -3.24249267578125e-05, -0.0005224423948675394, -7.152555099310121e-07, -0.0002040863037109375, -0.043941497802734375, -0.0030345916748046875, -3.814697265625e-06, -5.733963189413771e-05, 0.0], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(2), self)\n            game.other_player.hero.damage(player.effective_spell_damage(2),\n                self)\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68, 217, 88, 118, "use", "<EOS>", 3, 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -5.467850014622307, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "args": {"_type": "Template8"}, "name": "use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -0.8893747329711914, -0.10268497467041016, -0.00099945068359375, -0.004784584045410156, -6.103515625e-05, -0.0974264144897461, -1.9073486328125e-06, -0.000640869140625, -0.00011444091796875, -2.6702880859375e-05, -4.57763671875e-05, -0.0020610843785107136, -8.344646857949556e-07, -0.0004221200942993164, 0.0, -9.274482727050781e-05, -1.9073486328125e-06, -0.0004901885986328125, 0.0, -0.0002002716064453125, -7.82012939453125e-05, -0.24483203887939453, -0.0005741119384765625, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -1.33514404296875e-05, -6.29425048828125e-05, 0.0, -0.004119873046875, 0.0, -0.0004749298095703125, 0.0, -0.00018143653869628906, 0.0, -0.00011074542271671817, -4.291534423828125e-06, -0.00041961669921875, -1.71661376953125e-05, -1.1444091796875e-05, -0.0037527084350585938, -0.000560760498046875, -0.011003494262695312, -0.0002498626708984375, -0.004032135009765625, -0.0051250457763671875, -0.36276161670684814, 0.0, -0.0004367828369140625, -0.011208534240722656, -0.11098480224609375, -0.0001735687255859375, -2.86102294921875e-05, -2.6702880859375e-05, -5.340576171875e-05, 0.0, -0.06458510458469391, -1.6689286894688848e-06, -0.10540008544921875, -1.9073486328125e-06, -0.0004911422729492188, 0.0, -0.04274749755859375, 0.0, -0.06198990345001221, 0.0, -0.007067680358886719, 0.0, -3.4332275390625e-05, -0.00034332275390625, -0.0002613067626953125, -3.4332275390625e-05, 0.0, -0.012326240539550781, 0.0, -0.0001354217529296875, 0.0, -0.00012052059173583984, -9.655952453613281e-06, -0.0023163557052612305, -2.6702880859375e-05, -0.49635887145996094, -0.000545501708984375, -2.86102294921875e-05, 0.0, -0.059070587158203125, -2.3841855067985307e-07, -0.026430130004882812, -0.0004482269287109375, -1.52587890625e-05, 0.0, -0.03507125377655029, -1.1920928244535389e-07, -0.000133514404296875, -0.00156402587890625, -2.288818359375e-05, -0.007099902257323265, -4.768370445162873e-07, -0.0007152557373046875, -0.028731346130371094, -0.000194549560546875, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.03388404846191406, 0.0, -0.0007801055908203125, -3.814697265625e-06, -0.000141143798828125, -7.62939453125e-06, -0.0004863739013671875, 0.0, -0.002223968505859375, 0.0, -0.0061037540435791016, -9.5367431640625e-06, -7.62939453125e-05, -0.0010776519775390625, 0.0, -0.12553302943706512, -8.344646857949556e-07, -0.0001392364501953125, -0.00023651123046875, -2.86102294921875e-05, -3.814697265625e-06, -1.0429213047027588, -3.576278118089249e-07, -0.0003325939178466797, 0.0, -1.9073486328125e-06, -0.049017906188964844, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -2.47955322265625e-05, -0.0005157842533662915, -4.768370445162873e-07, -0.000171661376953125, -0.01923370361328125, -0.0015125274658203125, -3.814697265625e-06, -5.6028329709079117e-05, 0.0, -0.13999462127685547, -0.0023469924926757812, -0.2500743865966797, 0.0, -0.7293310165405273, -7.62939453125e-06, -0.0016040802001953125, 0.0, -0.0003032684326171875, 0.0, -0.0002827644348144531, -7.748603820800781e-06, -0.011003495194017887, 0.0, -0.001912236213684082, 0.0, 0.0, -0.0022335052490234375, -3.814697265625e-06, -1.9073486328125e-05, -3.814697265625e-06, -3.24249267578125e-05, -0.0005217273719608784, -7.152555099310121e-07, -0.000202178955078125, -0.0439910888671875, -0.0029621124267578125, -3.814697265625e-06, -5.710121331503615e-05, 0.0], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minion.damage(player.effective_spell_damage(2), self)\n            game.other_player.hero.damage(player.effective_spell_damage(2),\n                self)\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68, 217, 88, 118, "use", "<EOS>", 3, 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -5.891591837656378, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "minions", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -2.200958251953125, -0.0004062652587890625, -0.000331878662109375, -2.6702880859375e-05, -3.4332275390625e-05, -5.340576171875e-05, -1.1444091796875e-05, -0.18634049594402313, 0.0, -0.008913040161132812, -3.24249267578125e-05, -7.82012939453125e-05, -7.62939453125e-06, -0.004364013671875, 0.0, -0.0007055997848510742, 0.0, -0.0004119873046875, 0.0, -6.103515625e-05, -5.7220458984375e-06, -1.1444091796875e-05, -5.91278076171875e-05, 0.0, -0.0001201629638671875, 0.0, -4.76837158203125e-05, 0.0, -0.0001112222671508789, -2.300739288330078e-05, -0.0002061128179775551, -1.1444091796875e-05, -0.025760650634765625, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, -0.0034979579504579306, 0.0, -0.046343445777893066, -9.5367431640625e-06, -7.62939453125e-06, -0.00016021728515625, -3.814697265625e-06, -0.13576507568359375, 0.0, -0.0002117156982421875, 0.0, -0.000579833984375, 0.0, -0.2988210916519165, -2.0265579223632812e-06, -0.009342432953417301, -1.71661376953125e-05, -0.13988780975341797, -0.0010204315185546875, -5.340576171875e-05, 0.0, -0.05993378162384033, -1.4305104514278355e-06, -0.06490802764892578, -0.0049533843994140625, -5.7220458984375e-06, -1.9073486328125e-06, -0.007971644401550293, 0.0, -8.0108642578125e-05, -0.0003528594970703125, -3.814697265625e-06, -0.0025334523525089025, -4.768370445162873e-07, -0.0005512237548828125, -0.05860328674316406, -0.00028228759765625, -1.9073486328125e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.027165651321411133, 0.0, -0.0006265640258789062, -3.814697265625e-06, -0.0001468658447265625, -7.62939453125e-06, -0.00040435791015625, 0.0, -0.0023632049560546875, 0.0, -0.006119966506958008, -9.5367431640625e-06, -7.62939453125e-05, -0.0011310577392578125, 0.0, -0.12809760868549347, -8.344646857949556e-07, -0.0001392364501953125, -0.0002384185791015625, -3.0517578125e-05, -3.814697265625e-06, -0.7574213743209839, -5.960462772236497e-07, -0.0024689435958862305, 0.0, -1.9073486328125e-06, -0.19401264190673828, -9.5367431640625e-06, -1.1444091796875e-05, -7.62939453125e-06, -2.09808349609375e-05, -0.000524122966453433, -3.576278118089249e-07, -0.00017547607421875, -0.020353317260742188, -0.0016613006591796875, -3.814697265625e-06, -5.924696961301379e-05, 0.0, -0.22267532348632812, -0.0022001266479492188, -0.3818817138671875, 0.0, -0.5843124389648438, 0.0, -0.02199387550354004, 0.0, -2.1696090698242188e-05, 0.0, -0.02971959114074707, 0.0, 0.0, -0.00171661376953125, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.0002741795324254781, -1.1920928244535389e-07, -0.0001811981201171875, -0.02323436737060547, -9.5367431640625e-05, -1.9073486328125e-06, -5.0544695113785565e-05, 0.0, -7.62939453125e-06, -0.0008411407470703125, -9.1552734375e-05, -0.0020809145644307137, 0.0, -0.001117706298828125, -0.001129150390625, -0.00017547607421875, -2.288818359375e-05, -0.00031280517578125, -6.67572021484375e-05, -0.0008602142333984375, -1.9073486328125e-06, -0.00026702880859375, -6.29425048828125e-05, -3.24249267578125e-05, -7.62939453125e-06, -5.4596839618170634e-05, -1.1920928244535389e-07, -0.000682830810546875, 0.0, -2.682209014892578e-05, -1.9073486328125e-06, -0.0001277923583984375, 0.0, -0.000244140625, -7.82012939453125e-05, -0.0086669921875, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00015628337860107422, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.004547119140625, 0.0, -0.000457763671875, 0.0, -0.00025773048400878906, 0.0, -0.00010633467900333926, -4.410743713378906e-06, -0.0003224610991310328, -1.33514404296875e-05, -9.5367431640625e-06, -0.003726959228515625, -0.000385284423828125, -0.0067310333251953125], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        targets.extend(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            target.damage(player.effective_spell_damage(2), self)\n            self.target.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "minions", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -5.914713246396062, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "minions", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"id": "minion", "_type": "Name"}], "hole1": "remove", "hole0": {"id": "minions", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "args": {"_type": "Template8"}, "name": "use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -0.8893747329711914, -0.10268497467041016, -0.00099945068359375, -0.004784584045410156, -6.103515625e-05, -0.0974264144897461, -1.9073486328125e-06, -0.000640869140625, -0.00011444091796875, -2.6702880859375e-05, -4.57763671875e-05, -0.0020610843785107136, -8.344646857949556e-07, -0.0004221200942993164, 0.0, -9.274482727050781e-05, -1.9073486328125e-06, -0.0004901885986328125, 0.0, -0.0002002716064453125, -7.82012939453125e-05, -0.24483203887939453, -0.0005741119384765625, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002651214599609375, 0.0, -1.33514404296875e-05, -6.29425048828125e-05, 0.0, -0.004119873046875, 0.0, -0.0004749298095703125, 0.0, -0.00018143653869628906, 0.0, -0.00011074542271671817, -4.291534423828125e-06, -0.00041961669921875, -1.71661376953125e-05, -1.1444091796875e-05, -0.0037527084350585938, -0.000560760498046875, -0.011003494262695312, -0.0002498626708984375, -0.004032135009765625, -0.0051250457763671875, -0.36276161670684814, 0.0, -0.0004367828369140625, -0.011208534240722656, -0.11098480224609375, -0.0001735687255859375, -2.86102294921875e-05, -2.6702880859375e-05, -5.340576171875e-05, 0.0, -0.06458510458469391, -1.6689286894688848e-06, -0.10540008544921875, -1.9073486328125e-06, -0.0004911422729492188, 0.0, -0.04274749755859375, 0.0, -0.06198990345001221, 0.0, -0.007067680358886719, 0.0, -3.4332275390625e-05, -0.00034332275390625, -0.0002613067626953125, -3.4332275390625e-05, 0.0, -0.012326240539550781, 0.0, -0.0001354217529296875, 0.0, -0.00012052059173583984, -9.655952453613281e-06, -0.0023163557052612305, -2.6702880859375e-05, -0.49635887145996094, -0.000545501708984375, -2.86102294921875e-05, 0.0, -0.059070587158203125, -2.3841855067985307e-07, -0.026430130004882812, -0.0004482269287109375, -1.52587890625e-05, 0.0, -0.03507125377655029, -1.1920928244535389e-07, -0.000133514404296875, -0.00156402587890625, -2.288818359375e-05, -0.007099902257323265, -4.768370445162873e-07, -0.0007152557373046875, -0.028731346130371094, -0.000194549560546875, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.03388404846191406, 0.0, -0.0007801055908203125, -3.814697265625e-06, -0.000141143798828125, -7.62939453125e-06, -0.0004863739013671875, 0.0, -0.002223968505859375, 0.0, -0.0061037540435791016, -9.5367431640625e-06, -7.62939453125e-05, -0.0010776519775390625, 0.0, -2.1795268058776855, 0.0, -0.0001659393310546875, -0.0007190704345703125, -1.71661376953125e-05, 0.0, -0.3154335618019104, 0.0, -0.34186220169067383, 0.0, -0.0022068023681640625, -0.0003261566162109375, 0.0, -0.0009620189666748047, 0.0, -0.00064849853515625, -3.62396240234375e-05, -2.288818359375e-05, -5.7220458984375e-06, -0.003413755213841796, -1.9073486328125e-06, -0.00020802021026611328, 0.0, 0.0, -0.017620086669921875, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0002087339962599799, -1.1920928244535389e-07, -6.29425048828125e-05, -0.009840011596679688, -0.000125885009765625, -3.814697265625e-06, -5.84124936722219e-05, 0.0], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68, 217, 88, 118, "use", "<EOS>", 3, 219, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "minions", "<EOS>", 97, 166, 25, 133, "minions", "<EOS>", "remove", "<EOS>", 205, 53, 133, "minion", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -5.9769676187219005, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Multi-Shot", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "minions", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "For", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}, "targets": [{"id": "minion", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.6702880859375e-05, -0.0050792694091796875, -0.0002845126437023282, -8.583047019783407e-06, -2.038473030552268e-05, -3.933906555175781e-06, -9.357929229736328e-05, -3.814697265625e-06, -0.0006866455078125, -8.58306884765625e-05, -6.9141387939453125e-06, -7.62939453125e-06, -2.145764938177308e-06, -1.4185905456542969e-05, -0.09482979774475098, -3.814697265625e-06, -0.002203702926635742, 0.0, -0.07747173309326172, 0.0, -1.3589850823336747e-05, 0.0, -4.9591064453125e-05, 0.0, -1.9073486328125e-05, -0.00012433528900146484, -3.099436753473128e-06, -2.200958251953125, -0.0004062652587890625, -0.000331878662109375, -2.6702880859375e-05, -3.4332275390625e-05, -5.340576171875e-05, -1.1444091796875e-05, -0.18634049594402313, 0.0, -0.008913040161132812, -3.24249267578125e-05, -7.82012939453125e-05, -7.62939453125e-06, -0.004364013671875, 0.0, -0.0007055997848510742, 0.0, -0.0004119873046875, 0.0, -6.103515625e-05, -5.7220458984375e-06, -1.1444091796875e-05, -5.91278076171875e-05, 0.0, -0.0001201629638671875, 0.0, -4.76837158203125e-05, 0.0, -0.0001112222671508789, -2.300739288330078e-05, -0.0002061128179775551, -1.1444091796875e-05, -0.025760650634765625, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, -0.0034979579504579306, 0.0, -0.046343445777893066, -9.5367431640625e-06, -7.62939453125e-06, -0.00016021728515625, -3.814697265625e-06, -0.13576507568359375, 0.0, -0.0002117156982421875, 0.0, -0.000579833984375, 0.0, -0.2988210916519165, -2.0265579223632812e-06, -0.009342432953417301, -1.71661376953125e-05, -0.13988780975341797, -0.0010204315185546875, -5.340576171875e-05, 0.0, -0.05993378162384033, -1.4305104514278355e-06, -0.06490802764892578, -0.0049533843994140625, -5.7220458984375e-06, -1.9073486328125e-06, -0.007971644401550293, 0.0, -8.0108642578125e-05, -0.0003528594970703125, -3.814697265625e-06, -0.0025334523525089025, -4.768370445162873e-07, -0.0005512237548828125, -0.05860328674316406, -0.00028228759765625, -1.9073486328125e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.027165651321411133, 0.0, -0.0006265640258789062, -3.814697265625e-06, -0.0001468658447265625, -7.62939453125e-06, -0.00040435791015625, 0.0, -0.0023632049560546875, 0.0, -0.006119966506958008, -9.5367431640625e-06, -7.62939453125e-05, -0.0011310577392578125, 0.0, -0.12809760868549347, -8.344646857949556e-07, -0.0001392364501953125, -0.0002384185791015625, -3.0517578125e-05, -3.814697265625e-06, -1.0039204359054565, -4.768370445162873e-07, -0.00033462047576904297, 0.0, -1.9073486328125e-06, -0.049492835998535156, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -2.6702880859375e-05, -0.0005509400507435203, -4.768370445162873e-07, -0.0001773834228515625, -0.018863677978515625, -0.001583099365234375, -3.814697265625e-06, -5.6028329709079117e-05, 0.0, -0.18435096740722656, -0.002147674560546875, -0.34862709045410156, 0.0, -0.6450977325439453, 0.0, -0.021341562271118164, 0.0, -1.9788742065429688e-05, 0.0, -0.028784990310668945, 0.0, 0.0, -0.001678466796875, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.0002741795324254781, -1.1920928244535389e-07, -0.0001735687255859375, -0.022769927978515625, -9.5367431640625e-05, -1.9073486328125e-06, -5.066390076535754e-05, 0.0, -7.62939453125e-06, -0.0008487701416015625, -9.1552734375e-05, -0.002096412004902959, 0.0, -0.001117706298828125, -0.001129150390625, -0.00017547607421875, -2.288818359375e-05, -0.0003147125244140625, -6.67572021484375e-05, -0.000858306884765625, -1.9073486328125e-06, -0.00026702880859375, -6.29425048828125e-05, -3.24249267578125e-05, -7.62939453125e-06, -5.447763396659866e-05, -1.1920928244535389e-07, -0.0006847381591796875, 0.0, -2.682209014892578e-05, -1.9073486328125e-06, -0.0001277923583984375, 0.0, -0.000244140625, -7.82012939453125e-05, -0.008665084838867188, -3.24249267578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.00015628337860107422, 0.0, -1.1444091796875e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.004546165466308594, 0.0, -0.000457763671875, 0.0, -0.00025773048400878906, 0.0, -0.00010633467900333926, -4.410743713378906e-06, -0.0003224610991310328, -1.33514404296875e-05, -9.5367431640625e-06, -0.003726959228515625, -0.000385284423828125, -0.0067291259765625], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        targets.extend(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(targets)\n            minion.damage(player.effective_spell_damage(2), self)\n            self.target.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "minions", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 219, 82, 103, 205, 53, 133, "minion", "<EOS>", 20, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"score": -3.4216124084608595, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -2.000985622406006, 0.0, -1.52587890625e-05, -0.020517349243164062, -0.0025081634521484375, -0.00013744831085205078, -2.884864625229966e-05, -0.000202178955078125, -1.9073486328125e-06, -0.4476683735847473, -0.003675293643027544, -0.0018138885498046875, -0.0076503753662109375, -0.4662456512451172, -0.0036575794219970703, -2.682209014892578e-05], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n        player.draw()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -3.506678711605545, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Call", "func": {"attr": "calculate_max_health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "func": {"attr": "effective_heal_power", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -1.9237185716629028, 0.0, -2.288818359375e-05, -0.005324363708496094, -3.24249267578125e-05, -4.1961669921875e-05, -3.814697265625e-06, -0.0016231536865234375, -0.05206608399748802, -2.6941299438476562e-05, -1.9073486328125e-06, -0.35358619689941406, -0.021019935607910156, -1.71661376953125e-05, -5.340576171875e-05, -0.005625724792480469, -3.814697265625e-06, -0.0848093032836914, -0.00029754638671875, -0.021520614624023438, -0.000110626220703125, -3.886222839355469e-05, 0.0, -0.28129780292510986, -5.960462203802308e-06, -0.000751495361328125, -0.0001068115234375, -0.00040149688720703125, -3.814697265625e-06, -0.07863616943359375, -0.06577014923095703, -0.008070945739746094, -1.9073486328125e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.1214132308959961, 0.0, -0.0002785921096801758, 0.0, -0.013425827026367188, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_heal_power", "<EOS>", 205, 48, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 53, 133, "self", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.026164439024214, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -2.000985622406006, 0.0, -1.52587890625e-05, -0.020517349243164062, -0.0025081634521484375, -0.00013744831085205078, -2.884864625229966e-05, -0.000202178955078125, -1.9073486328125e-06, -0.4476683735847473, -0.003675293643027544, -0.0018138885498046875, -0.0076503753662109375, -1.0601224899291992, 0.0, -0.0013370513916015625, 0.0, -0.0009337663650512695, 0.0, -0.0031032562255859375, 0.0, -0.008985519409179688, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.181630507096415, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -3.461742401123047, 0.0, -1.52587890625e-05, -0.001430511474609375, -1.9073486328125e-06, -0.0075533390045166016, -1.9073486328125e-06, -0.002147674560546875, -0.0008678436279296875, -0.1083536148071289, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -0.06876850128173828, 0.0, -0.0004214048385620117, 0.0, -0.06375885009765625, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 53, 133, "self", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.295540109259818, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -2.000985622406006, 0.0, -1.52587890625e-05, -0.020517349243164062, -0.0025081634521484375, -0.00013744831085205078, -2.884864625229966e-05, -0.000202178955078125, -1.9073486328125e-06, -1.2465752363204956, -1.990795135498047e-05, -0.0006256103515625, -0.019741058349609375, -0.5141916275024414, -1.9073486328125e-06, -0.014739990234375, -1.9073486328125e-06, -0.0007573366165161133, 0.0, -0.002512216567993164, 0.0, -0.0054988861083984375, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Frozen", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.398562936955713, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Attack<UNK>"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "func": {"id": "Effect", "_type": "Name"}}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -0.6741834878921509, 0.0, -1.9073486328125e-06, -0.004406929016113281, -5.7220458984375e-06, -0.000659942626953125, 0.0, -1.5417461395263672, -9.1552734375e-05, -1.9073486328125e-06, -0.00586700439453125, -1.9073486328125e-06, -0.9203661680221558, -0.3341611623764038, -0.0003839731216430664, -0.002964019775390625, -0.012167930603027344, -1.9073486328125e-06, 0.0, -0.01999664306640625, -0.0001683234004303813, 0.0, -0.0003185272216796875, -3.4332275390625e-05, -0.0011539459228515625, -0.2126709520816803, -0.00015233927115332335, -0.1316242218017578, -9.5367431640625e-06, -0.02570151723921299, -3.814697265625e-06, -1.9073486328125e-06, -0.0020503997802734375, -0.012541770935058594, -0.019629478454589844, -0.008906364440917969, -0.00010955333709716797], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(Attack<UNK>(), ActionTag(Draw(),\n            PlayerSelector())))\n        player.draw()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Effect", "<EOS>", 206, 63, 171, "Attack", "<UNK>", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.416809057795817, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Call", "func": {"attr": "calculate_max_health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "func": {"attr": "effective_heal_power", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "heal", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -3.3270883560180664, 0.0, -0.00014495849609375, -0.002902984619140625, -1.52587890625e-05, -0.000209808349609375, -3.814697265625e-06, -0.0021724700927734375, -0.004350742325186729, -2.6702879040385596e-05, -1.9073486328125e-06, -0.09654808044433594, -0.004656791687011719, -9.5367431640625e-06, -2.6702880859375e-05, -0.0067691802978515625, -1.9073486328125e-06, -0.039520263671875, -0.0001277923583984375, -0.010973930358886719, -5.7220458984375e-05, -4.494190216064453e-05, 0.0, -0.17571008205413818, -6.675716122117592e-06, -0.0003719329833984375, -6.4849853515625e-05, -0.00027179718017578125, -5.7220458984375e-06, -0.10729217529296875, -0.012180328369140625, -0.015377044677734375, -1.9073486328125e-06, -7.82012939453125e-05, 0.0, -0.1246938705444336, 0.0, -0.00027763843536376953, 0.0, -0.01834583282470703, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(self.target.\n            calculate_max_health()), self)\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_heal_power", "<EOS>", 205, 48, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_max_health", "<EOS>", 53, 133, "self", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.51022435685023, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Call", "args": [{"id": "draw_player", "_type": "Name"}], "func": {"id": "PlayerSelector", "_type": "Name"}}], "func": {"id": "Deathrattle", "_type": "Name"}}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -0.6741834878921509, 0.0, -1.9073486328125e-06, -0.004406929016113281, -5.7220458984375e-06, -0.000659942626953125, 0.0, -0.722139835357666, -0.002712249755859375, -0.08489036560058594, -0.026760101318359375, -5.7220458984375e-06, -0.4178217649459839, -3.3378219086444005e-05, -0.08791542053222656, -1.085434913635254, -5.7220458984375e-06, -2.09808349609375e-05, -0.0022323131561279297, -0.0009374618530273438, 0.0, -0.00153350830078125, -0.0034170150756835938, -1.9073486328125e-06, -0.9099191427230835, -0.01128530502319336, -0.0015811920166015625, -0.0003070831298828125, -0.0002498626708984375, -0.005283474922180176, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Deathrattle(Draw(), PlayerSelector(draw_player))\n            )\n        player.draw()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 48, 111, 25, 133, "Player", "Selector", "<EOS>", 205, 53, 133, "draw_player", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.659482732400065, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -3.0270156860351562, 0.0, -3.814697265625e-06, -0.9893426895141602, -3.814697265625e-06, -0.08582615852355957, -1.9073486328125e-06, -0.0065212249755859375, -0.0007915496826171875, -0.023146629333496094, -3.814697265625e-06, -5.7220458984375e-05, 0.0, -0.016966819763183594, 0.0, -0.0003902912139892578, 0.0, -0.04293346405029297, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(self)\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 53, 133, "self", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.677022587492829, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_heal_power", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -1.9237185716629028, 0.0, -2.288818359375e-05, -0.005324363708496094, -3.24249267578125e-05, -4.1961669921875e-05, -3.814697265625e-06, -0.0016231536865234375, -0.05206608399748802, -2.6941299438476562e-05, -1.9073486328125e-06, -2.166611671447754, -2.86102294921875e-05, -3.0517578125e-05, -0.0013679265975952148, -1.9073486328125e-06, -0.05571746826171875, -4.57763671875e-05, -0.000751495361328125, -0.003127455711364746, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_heal_power(3), self)\n        player.draw()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_heal_power", "<EOS>", 205, 70, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.689101233681228, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -0.6741834878921509, 0.0, -1.9073486328125e-06, -0.004406929016113281, -5.7220458984375e-06, -0.000659942626953125, 0.0, -0.722139835357666, -0.002712249755859375, -0.08489036560058594, -0.026760101318359375, -5.7220458984375e-06, -0.4178217649459839, -3.3378219086444005e-05, -0.08791542053222656, -0.4195137023925781, -0.000164031982421875, 0.0, -0.017215728759765625, -0.0012036561965942383, -3.814697265625e-06, -1.4043588638305664, -1.9073486328125e-06, -5.7220458984375e-06, -0.23219764232635498, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.10328292846679688, -0.0014644861221313477, -3.576278118089249e-07, -3.0517578125e-05, -0.0044612884521484375, -0.011927604675292969, -0.005107283592224121, -0.00011861324310302734], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Deathrattle(Draw(), PlayerSelector(picker=\n            RandomPicker())))\n        player.draw()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.748997538131661, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"id": "draw_player", "_type": "Name"}], "func": {"id": "PlayerSelector", "_type": "Name"}}], "func": {"id": "Deathrattle", "_type": "Name"}}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -0.6741834878921509, 0.0, -1.9073486328125e-06, -0.004406929016113281, -5.7220458984375e-06, -0.000659942626953125, 0.0, -0.722139835357666, -0.002712249755859375, -0.08489036560058594, -0.026760101318359375, -5.7220458984375e-06, -1.3537347316741943, -0.000333263335051015, -0.018768310546875, -0.47552490234375, -3.814697265625e-06, -9.5367431640625e-06, -0.049025774002075195, -0.0019665956497192383, -1.9073486328125e-06, -0.0011806488037109375, -0.0077266693115234375, -1.9073486328125e-06, -0.8402304649353027, -0.011156797409057617, -0.0010833740234375, -0.0003681182861328125, -0.000331878662109375, -0.005304932594299316, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Deathrattle(Kill(), PlayerSelector(draw_player))\n            )\n        player.draw()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Player", "Selector", "<EOS>", 205, 53, 133, "draw_player", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.064192698871338, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -0.6741834878921509, 0.0, -1.9073486328125e-06, -0.004406929016113281, -5.7220458984375e-06, -0.000659942626953125, 0.0, -0.722139835357666, -0.002712249755859375, -0.08489036560058594, -0.026760101318359375, -5.7220458984375e-06, -0.4178217649459839, -3.3378219086444005e-05, -2.479996681213379, -1.9073486328125e-06, -0.025076420977711678, -9.5367431640625e-06, -1.9073486328125e-06, -0.002178192138671875, -0.005809783935546875, -0.1395282745361328, -0.01141977310180664, -7.11679458618164e-05], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Deathrattle(Draw(), PlayerSelector()))\n        player.draw()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.237218033507233, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "func": {"attr": "effective_heal_power", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -1.9237185716629028, 0.0, -2.288818359375e-05, -0.005324363708496094, -3.24249267578125e-05, -4.1961669921875e-05, -3.814697265625e-06, -0.0016231536865234375, -0.05206608399748802, -2.6941299438476562e-05, -1.9073486328125e-06, -0.35358619689941406, -0.021019935607910156, -1.71661376953125e-05, -5.340576171875e-05, -0.005625724792480469, -3.814697265625e-06, -0.0848093032836914, -0.00029754638671875, -0.021520614624023438, -0.000110626220703125, -3.886222839355469e-05, 0.0, -2.047079086303711, -9.775161743164062e-06, -0.0051097869873046875, -0.0001125335693359375, -0.0005979537963867188, -3.814697265625e-06, -0.06163978576660156, -0.02528858184814453, -0.00909423828125, -1.9073486328125e-06, -8.7738037109375e-05, -1.9073486328125e-06, -0.13990402221679688, 0.0, -0.0003025531768798828, 0.0, -0.011561393737792969, 0.0], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_heal_power(self.target.\n            calculate_attack()), self)\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_heal_power", "<EOS>", 205, 48, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 53, 133, "self", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -5.4818606067122815, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "PowerShieldShield", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"id": "PlayerSelector", "_type": "Name"}}], "func": {"id": "Deathrattle", "_type": "Name"}}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.62396240234375e-05, -0.0030574798583984375, -0.0002160072181141004, -0.015279531478881836, -0.1049412190914154, -0.013438857160508633, -4.291447112336755e-06, -1.2040138244628906e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -0.000110626220703125, -5.7220458984375e-06, -8.392333984375e-05, -0.0002536773681640625, -7.62939453125e-06, -0.0001621246337890625, -1.1444091796875e-05, -2.6702880859375e-05, -0.0008441302343271673, -7.43865966796875e-05, -0.06677877902984619, -0.04169332981109619, -0.00038075377233326435, -1.1920928244535389e-07, -6.103515625e-05, -6.866455078125e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.03363466262817383, -1.9073486328125e-06, -8.58306884765625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -0.0002193450927734375, -0.01251220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -2.86102294921875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0002002716064453125, -1.9073486328125e-06, -4.00543212890625e-05, -1.1920928244535389e-07, -0.1131218671798706, 0.0, -0.0003662109375, 0.0, -0.00010669222683645785, 0.0, -9.72747802734375e-05, -2.86102294921875e-05, -5.7220458984375e-06, -0.0024328231811523438, -4.768370445162873e-07, -0.052875518798828125, -0.000247955322265625, -2.86102294921875e-05, -0.001384735107421875, -0.0002307891845703125, -1.52587890625e-05, -0.0003662109375, -1.9073486328125e-06, -8.392333984375e-05, 0.0, -0.0005851984024047852, 0.0, -0.6741834878921509, 0.0, -1.9073486328125e-06, -0.004406929016113281, -5.7220458984375e-06, -0.000659942626953125, 0.0, -0.722139835357666, -0.002712249755859375, -0.08489036560058594, -0.026760101318359375, -5.7220458984375e-06, -1.3537347316741943, -0.000333263335051015, -0.018768310546875, -0.47552490234375, -3.814697265625e-06, -9.5367431640625e-06, -0.049025774002075195, -0.0019665956497192383, -1.9073486328125e-06, -0.0011806488037109375, -0.0077266693115234375, -1.9073486328125e-06, -1.5666446685791016, -1.1920928244535389e-07, -0.0001201629638671875, -0.01799774169921875, -0.003559112548828125, -0.0030034780502319336, -1.33514404296875e-05], "inferred_code": "class PowerShieldShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Deathrattle(Kill(), PlayerSelector(targets)))\n        player.draw()\n", "choice_history": [77, 147, "Power", "Shield", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Power", " ", "Word", " ", "Shield", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Player", "Selector", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"score": -0.0978410019340572, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -0.036351561546325684, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -9.489048534305766e-05, 0.0, -1.9073486328125e-06, -0.001720428466796875, -1.9073486328125e-06, -1.311301275563892e-06, -3.2186455882765586e-06, -7.295380055438727e-05, 0.0, -0.05515623092651367, 0.0, -0.000377655029296875, -1.71661376953125e-05, -0.0001608133316040039, -2.503394853192731e-06], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.0193704141890976, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -0.036351561546325684, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -9.489048534305766e-05, 0.0, -1.9073486328125e-06, -0.001720428466796875, -1.9073486328125e-06, -1.311301275563892e-06, -3.2186455882765586e-06, -7.295380055438727e-05, 0.0, -2.976623058319092, -5.7220458984375e-06, -0.000370025634765625, -3.0517578125e-05, -0.00021374224161263555, -7.152555099310121e-07], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, charge=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.643575646499073, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -3.5708954334259033, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -8.010857709450647e-05, 0.0, -1.9073486328125e-06, -0.001628875732421875, -1.9073486328125e-06, -1.0728830375228426e-06, -2.264974000354414e-06, -6.365605804603547e-05, 0.0, -0.06656670570373535, 0.0, -0.0003204345703125, -1.52587890625e-05, -0.0001628398895263672, -5.960462772236497e-07], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.489263989462813, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -5.431277751922607, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -8.594936662120745e-05, 0.0, -1.9073486328125e-06, -0.0019588470458984375, -3.814697265625e-06, -1.4305104514278355e-06, -2.3841830625315197e-06, -5.686151052941568e-05, 0.0, -0.05150878429412842, 0.0, -0.0003509521484375, -1.52587890625e-05, -0.00016486644744873047, -5.960462772236497e-07], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.368116952980131, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -3.5708954334259033, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -8.010857709450647e-05, 0.0, -1.9073486328125e-06, -0.001628875732421875, -1.9073486328125e-06, -1.0728830375228426e-06, -2.264974000354414e-06, -6.365605804603547e-05, 0.0, -2.7909977436065674, -5.7220458984375e-06, -0.000354766845703125, -2.6702880859375e-05, -0.00022149084543343633, -7.152555099310121e-07], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(3, 5, charge=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.558575370011624, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -6.490224361419678, -3.814697265625e-06, -7.62939453125e-06, 0.0, -4.9948539526667446e-05, 0.0, -1.9073486328125e-06, -0.00943756103515625, -1.9073486328125e-06, -1.311301275563892e-06, -2.861018856492592e-06, -6.0914411733392626e-05, 0.0, -0.054430246353149414, 0.0, -0.00034332275390625, -1.71661376953125e-05, -0.00017631053924560547, -5.960462772236497e-07], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.684276714158379, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 5, "hole1": 3, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -0.036351561546325684, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -9.489048534305766e-05, 0.0, -1.9073486328125e-06, -6.556913375854492, -0.00241851806640625, -0.0002484666183590889, -4.887576324108522e-06, 0.0, 0.0, -0.0002717970637604594, 0.0, -0.026891708374023438, -1.52587890625e-05, -1.9073486328125e-06, -0.04142498970031738, -0.003631591796875, -4.9591064453125e-05, -7.62939453125e-06, -5.7935703807743266e-05, -1.1920928244535389e-07, -0.000125885009765625, -3.814697265625e-06, -0.011513710021972656, 0.0, -0.0002498626708984375, -7.62939453125e-06, -0.00011050699686165899, -7.152555099310121e-07], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, charge=True, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "3", "<EOS>", "5", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.145369864872578, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "divine_shield", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -0.036351561546325684, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -9.489048534305766e-05, 0.0, -1.9073486328125e-06, -0.001720428466796875, -1.9073486328125e-06, -1.311301275563892e-06, -3.2186455882765586e-06, -7.295380055438727e-05, 0.0, -7.088338851928711, -1.33514404296875e-05, -0.014642715454101562, -2.47955322265625e-05, -0.00022268293832894415, -8.344646857949556e-07], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, divine_shield=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "divine_shield", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.203865507017099, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PRIEST", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -7.006106853485107, 0.0, -0.13557934761047363, -1.9073486328125e-05, -2.86102294921875e-05, 0.0, -0.00010371192183811218, 0.0, -1.9073486328125e-06, -0.00092315673828125, -1.9073486328125e-06, -1.311301275563892e-06, -3.2186455882765586e-06, -6.913936522323638e-05, 0.0, -0.05971837043762207, 0.0, -0.00038909912109375, -1.71661376953125e-05, -0.0001608133316040039, -2.503394853192731e-06], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.2132928162284315, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "WARRIOR", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -7.113722324371338, -1.9073486328125e-06, -0.037814974784851074, -3.814697265625e-05, -3.814697265625e-05, 0.0, -0.00010561932867858559, 0.0, -1.9073486328125e-06, -0.001163482666015625, -1.9073486328125e-06, -1.311301275563892e-06, -3.099436753473128e-06, -6.723213300574571e-05, 0.0, -0.059037208557128906, 0.0, -0.0003757476806640625, -1.71661376953125e-05, -0.0001608133316040039, -2.503394853192731e-06], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.885683992357372, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "Player", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -7.675774574279785, 0.0, -0.14722871780395508, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -0.0001078842396964319, 0.0, -1.9073486328125e-06, -0.0008373260498046875, -1.9073486328125e-06, -1.311301275563892e-06, -3.2186455882765586e-06, -6.770894106011838e-05, 0.0, -0.06032001972198486, 0.0, -0.0003814697265625, -1.71661376953125e-05, -0.0001628398895263672, -2.384185791015625e-06], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.Player,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "Player", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.082660414880195, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "find_spell_target", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -8.012837409973145, 0.0, -1.1444091796875e-05, 0.0, -6.496899732155725e-05, 0.0, -1.9073486328125e-06, -0.0063800811767578125, -1.9073486328125e-06, -1.1920922133867862e-06, -2.7418097943154862e-06, -6.234484317246825e-05, 0.0, -0.05895888805389404, 0.0, -0.000331878662109375, -1.71661376953125e-05, -0.0001723766326904297, -5.960462772236497e-07], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.find_spell_target)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "find_spell_target", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.136672474331135, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template34"}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -0.036351561546325684, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -9.489048534305766e-05, 0.0, -1.9073486328125e-06, -0.001720428466796875, -1.9073486328125e-06, -1.311301275563892e-06, -3.2186455882765586e-06, -7.295380055438727e-05, 0.0, -0.05515623092651367, 0.0, -8.039389610290527], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=1)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 38]}, {"score": -8.222245433074136, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 3, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -8.15002155303955, -1.1563301086425781e-05, -0.0008484125137329102, 0.0, -0.010966062545776367, -7.62939453125e-06, -3.814697265625e-05, 0.0, -1.692770456429571e-05, 0.0, -1.9073486328125e-06, -0.0061626434326171875, -3.814697265625e-06, -1.4305104514278355e-06, -3.3378546504536644e-06, -8.010584861040115e-05, 0.0, -0.053048014640808105, 0.0, -0.000400543212890625, -1.71661376953125e-05, -0.0001666545867919922, -2.503394853192731e-06], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.940537432491055, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Sen'jinShieldmasta", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.14984130859375e-05, -4.994744449504651e-05, -7.343036122620106e-05, -2.1099860532558523e-05, -2.3692846298217773e-06, -4.887576324108522e-06, 0.0, 0.0, -9.1552734375e-05, -6.866455078125e-05, -9.536738616588991e-07, -7.092952728271484e-05, -2.1457672119140625e-06, -7.62939453125e-06, -0.0002905130386352539, -1.7881377516459906e-06, -0.003076194552704692, 0.0, -0.036351561546325684, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -9.489048534305766e-05, 0.0, -1.9073486328125e-06, -8.89892578125, -0.0011386871337890625, -6.07964102528058e-06, -2.622604142743512e-06, -0.00013744831085205078, 0.0], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"score": -0.811591498936366, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -0.23794901371002197, -1.1444091796875e-05, -9.655952453613281e-06, -1.9073486328125e-06, -0.0062038893811404705, 0.0, -0.000457763671875, -0.000255584716796875, -4.1961669921875e-05, -1.71661376953125e-05, -3.576278118089249e-07, -0.005028724670410156, -9.5367431640625e-06, -1.9073486328125e-05, -0.0001068115234375, -0.0019817352294921875, 0.0, -3.24249267578125e-05, 0.0, -0.010632514953613281, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00025010108947753906, 0.0, -1.52587890625e-05, -0.000560760498046875, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.62396240234375e-05, -0.00018215169257018715, -2.0265579223632812e-06, -0.000179290771484375, -0.4844503402709961, -0.0001049041748046875, -1.1444091796875e-05, -1.52587890625e-05, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -1.396200530613612, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -0.23794901371002197, -1.1444091796875e-05, -9.655952453613281e-06, -1.9073486328125e-06, -0.0062038893811404705, 0.0, -0.000457763671875, -0.000255584716796875, -4.1961669921875e-05, -1.71661376953125e-05, -3.576278118089249e-07, -0.005028724670410156, -9.5367431640625e-06, -1.9073486328125e-05, -0.0001068115234375, -0.0019817352294921875, 0.0, -3.24249267578125e-05, 0.0, -0.010632514953613281, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00025010108947753906, 0.0, -1.52587890625e-05, -0.000560760498046875, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.62396240234375e-05, -0.00018215169257018715, -2.0265579223632812e-06, -0.000179290771484375, -1.069162368774414, -1.1444091796875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -3.3358031440627087, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_enemy_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -2.762516498565674, -4.1961669921875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0028220410458743572, 0.0, -0.00066375732421875, -0.0002593994140625, -4.38690185546875e-05, -1.52587890625e-05, -3.576278118089249e-07, -0.0049037933349609375, -9.5367431640625e-06, -1.9073486328125e-05, -0.000110626220703125, -0.001842498779296875, 0.0, -3.0517578125e-05, 0.0, -0.012587547302246094, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00025582313537597656, 0.0, -1.52587890625e-05, -0.00052642822265625, -2.86102294921875e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.62396240234375e-05, -0.00018227090185973793, -2.0265579223632812e-06, -0.000179290771484375, -0.48556995391845703, -0.000102996826171875, -1.1444091796875e-05, -1.52587890625e-05, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -3.565011851406439, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -2.972132682800293, 0.0, -9.775161743164062e-06, -1.9073486328125e-06, -0.008315919898450375, 0.0, -0.0006656646728515625, -0.0002193450927734375, -3.62396240234375e-05, -1.71661376953125e-05, -4.768370445162873e-07, -0.006190299987792969, -9.5367431640625e-06, -2.09808349609375e-05, -0.000110626220703125, -0.0016956329345703125, 0.0, -3.4332275390625e-05, 0.0, -0.009442329406738281, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00024056434631347656, 0.0, -1.52587890625e-05, -0.0005035400390625, -2.6702880859375e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-05, -0.00018239011114928871, -2.0265579223632812e-06, -0.000186920166015625, -0.5017843246459961, -0.0001068115234375, -1.1444091796875e-05, -1.52587890625e-05, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -3.9180918861281384, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_enemy_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -2.762516498565674, -4.1961669921875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0028220410458743572, 0.0, -0.00066375732421875, -0.0002593994140625, -4.38690185546875e-05, -1.52587890625e-05, -3.576278118089249e-07, -0.0049037933349609375, -9.5367431640625e-06, -1.9073486328125e-05, -0.000110626220703125, -0.001842498779296875, 0.0, -3.0517578125e-05, 0.0, -0.012587547302246094, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00025582313537597656, 0.0, -1.52587890625e-05, -0.00052642822265625, -2.86102294921875e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.62396240234375e-05, -0.00018227090185973793, -2.0265579223632812e-06, -0.000179290771484375, -1.0679597854614258, -1.1444091796875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -3.9374165435772213, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -3.3597030639648438, 0.0, -6.4373016357421875e-06, -1.9073486328125e-06, -0.0005927052698098123, 0.0, -0.0001964569091796875, -7.62939453125e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020132064819335938, -5.7220458984375e-06, -1.71661376953125e-05, -0.0001621246337890625, -0.0017108917236328125, 0.0, -3.24249267578125e-05, 0.0, -0.01568603515625, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00026154518127441406, 0.0, -1.52587890625e-05, -0.0005626678466796875, -2.86102294921875e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-05, -0.00018227090185973793, -2.0265579223632812e-06, -0.000179290771484375, -0.4927845001220703, -0.000102996826171875, -1.1444091796875e-05, -1.52587890625e-05, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -4.104954592800482, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -2.972132682800293, 0.0, -9.775161743164062e-06, -1.9073486328125e-06, -0.008315919898450375, 0.0, -0.0006656646728515625, -0.0002193450927734375, -3.62396240234375e-05, -1.71661376953125e-05, -4.768370445162873e-07, -0.006190299987792969, -9.5367431640625e-06, -2.09808349609375e-05, -0.000110626220703125, -0.0016956329345703125, 0.0, -3.4332275390625e-05, 0.0, -0.009442329406738281, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00024056434631347656, 0.0, -1.52587890625e-05, -0.0005035400390625, -2.6702880859375e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-05, -0.00018239011114928871, -2.0265579223632812e-06, -0.000186920166015625, -1.0418319702148438, -1.1444091796875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -4.500269403074292, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -3.3597030639648438, 0.0, -6.4373016357421875e-06, -1.9073486328125e-06, -0.0005927052698098123, 0.0, -0.0001964569091796875, -7.62939453125e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020132064819335938, -5.7220458984375e-06, -1.71661376953125e-05, -0.0001621246337890625, -0.0017108917236328125, 0.0, -3.24249267578125e-05, 0.0, -0.01568603515625, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00026154518127441406, 0.0, -1.52587890625e-05, -0.0005626678466796875, -2.86102294921875e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-05, -0.00018227090185973793, -2.0265579223632812e-06, -0.000179290771484375, -1.0557384490966797, -1.1444091796875e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.<UNK>)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -5.229121201475891, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"id": "character", "_type": "Name"}}}, "ops": [{"_type": "Eq"}]}, "args": {"_type": "Template13", "hole0": "character"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -2.8883466720581055, -3.814697265625e-06, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, -9.5367431640625e-06, -1.71661376953125e-05, -2.288818359375e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.0004901885986328125, -9.5367431640625e-06, -0.21308672428131104, -1.52587890625e-05, -2.6702880859375e-05, -4.57763671875e-05, -0.02126026153564453, 0.0, -0.0015020370483398438, -0.0001678466796875, -0.0003070831298828125, -0.0003833770751953125, -0.7441473007202148, 0.0, -0.05069732666015625, -2.86102294921875e-05, -0.0030918121337890625, -9.5367431640625e-06, -0.0008859634399414062, -4.57763671875e-05, -7.82012939453125e-05, -5.7220458984375e-06, -0.15915298461914062, -7.62939453125e-06, -0.34202003479003906, -1.9073486328125e-06, -0.003258228302001953, -2.288818359375e-05, -0.001556396484375, -0.2487316131591797, -0.000804901123046875, -0.0021800994873046875, -3.814697265625e-06, -0.0001678466796875, -7.62939453125e-06, -0.0035696029663085938, 0.0, -0.0728902816772461, -5.7220458984375e-06, -0.00032806396484375, -1.9073486328125e-06, -5.114070154377259e-05, 0.0, -0.0001087188720703125, -0.00030517578125, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -0.006214141845703125, -5.53131103515625e-05, -9.5367431640625e-06, -0.0001964569091796875, -0.0007305145263671875, 0.0, -5.14984130859375e-05, 0.0, -0.0046024322509765625, -1.9073486328125e-06, -2.5391578674316406e-05, -3.814697265625e-06, -0.0008012056350708008, 0.0, -1.1444091796875e-05, -0.0005512237548828125, -3.62396240234375e-05, -3.814697265625e-06, -7.62939453125e-06, -3.0517578125e-05, -0.00020277487055864185, -2.0265579223632812e-06, -0.0001811981201171875, -0.4508075714111328, -7.05718994140625e-05, -9.5367431640625e-06, -1.52587890625e-05, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda character: character.card\n            .minion_type == MINION_TYPE.DEMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "character", "<EOS>", 21, 114, 17, 104, 17, 104, 25, 133, "character", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 202, 8, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -5.445841662837381, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -0.23794901371002197, -1.1444091796875e-05, -9.655952453613281e-06, -1.9073486328125e-06, -0.0062038893811404705, 0.0, -0.000457763671875, -0.000255584716796875, -4.1961669921875e-05, -1.71661376953125e-05, -3.576278118089249e-07, -0.005028724670410156, -9.5367431640625e-06, -1.9073486328125e-05, -0.0001068115234375, -0.0019817352294921875, 0.0, -3.24249267578125e-05, 0.0, -4.573846817016602, 0.0, -0.19833910465240479, -3.0517578125e-05, -0.016217350959777832, 0.0, -8.0108642578125e-05, -0.0008373260498046875, -0.000324249267578125, -5.7220458984375e-06, -3.814697265625e-06, -3.24249267578125e-05, -0.00021636462770402431, -2.0265579223632812e-06, -0.0001373291015625, -0.34058189392089844, -7.62939453125e-05, -1.1444091796875e-05, -1.52587890625e-05, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -5.4926065135848035, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template37"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -0.23794901371002197, -1.1444091796875e-05, -9.655952453613281e-06, -1.9073486328125e-06, -0.0062038893811404705, 0.0, -0.000457763671875, -0.000255584716796875, -4.1961669921875e-05, -1.71661376953125e-05, -3.576278118089249e-07, -0.005028724670410156, -9.5367431640625e-06, -1.9073486328125e-05, -0.0001068115234375, -0.0019817352294921875, 0.0, -3.24249267578125e-05, 0.0, -0.010632514953613281, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00025010108947753906, 0.0, -1.52587890625e-05, -0.000560760498046875, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.62396240234375e-05, -0.00018215169257018715, -2.0265579223632812e-06, -0.000179290771484375, -5.165539741516113, -1.33514404296875e-05, -1.52587890625e-05, -2.6702880859375e-05, -1.9073486328125e-06], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>"]}, {"score": -5.606630556202276, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "damage", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -5.033153057098389, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.003988384269177914, 0.0, -0.0017709732055664062, -0.0003986358642578125, -0.0001220703125, -2.47955322265625e-05, -4.768370445162873e-07, -0.005394935607910156, -1.1444091796875e-05, -1.9073486328125e-05, -0.0001049041748046875, -0.0024318695068359375, 0.0, -3.4332275390625e-05, 0.0, -0.011229515075683594, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00024628639221191406, 0.0, -1.52587890625e-05, -0.00052642822265625, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.62396240234375e-05, -0.00018227090185973793, -2.0265579223632812e-06, -0.0001811981201171875, -0.48358917236328125, -0.0001068115234375, -1.1444091796875e-05, -1.52587890625e-05, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.damage)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "damage", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -5.741276391233157, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Num", "n": 3}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -0.23794901371002197, -1.1444091796875e-05, -9.655952453613281e-06, -1.9073486328125e-06, -0.0062038893811404705, 0.0, -0.000457763671875, -0.000255584716796875, -4.1961669921875e-05, -1.71661376953125e-05, -3.576278118089249e-07, -0.005028724670410156, -9.5367431640625e-06, -1.9073486328125e-05, -0.0001068115234375, -0.0019817352294921875, 0.0, -3.24249267578125e-05, 0.0, -0.010632514953613281, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00025010108947753906, 0.0, -1.52587890625e-05, -0.000560760498046875, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.62396240234375e-05, -0.00018215169257018715, -2.0265579223632812e-06, -0.000179290771484375, -5.24177885055542, -0.0001201629638671875, -0.17218615114688873, -2.384185791015625e-06, -9.72747802734375e-05, 0.0, -7.82012939453125e-05, -3.814697265625e-06], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 55, 138, "3", "<EOS>", 53, 133, "self", "<EOS>"]}, {"score": -6.164195650145075, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "Call", "func": {"attr": "calculate_max_health", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}], "left": {"attr": "health", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, {"_type": "Template19", "hole1": {"id": "EnemyPlayer", "_type": "Name"}, "hole0": "PlayerSelector"}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -2.8883466720581055, -3.814697265625e-06, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, -9.5367431640625e-06, -1.71661376953125e-05, -2.288818359375e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.0004901885986328125, -9.5367431640625e-06, -0.21308672428131104, -1.52587890625e-05, -2.6702880859375e-05, -4.57763671875e-05, -0.02126026153564453, 0.0, -0.0015020370483398438, -0.0001678466796875, -0.0003070831298828125, -0.0003833770751953125, -0.9727754592895508, -5.7220458984375e-06, -0.050751686096191406, -0.0020503997802734375, -0.013256072998046875, -9.5367431640625e-06, -0.026302337646484375, -7.82012939453125e-05, -0.022525787353515625, -0.0001392364501953125, -0.009304046630859375, -2.288818359375e-05, -0.07082748413085938, 0.0, -0.5172359943389893, -3.24249267578125e-05, -0.000152587890625, -0.22474384307861328, -0.000171661376953125, -0.15679168701171875, -0.01563739776611328, -0.00029754638671875, -0.00012969970703125, -2.6702880859375e-05, -1.9073486328125e-06, -0.00035953521728515625, -3.814697265625e-06, -0.04848480224609375, -9.5367431640625e-05, -0.18695640563964844, -0.0030260086059570312, -0.029028892517089844, -0.0077648162841796875, 0.0, -0.000156402587890625, -1.52587890625e-05, -0.29823625087738037, -0.0052089691162109375, -1.9073486328125e-06, -0.0003299713134765625, 0.0, -2.4318680516444147e-05, 0.0, -7.82012939453125e-05, -0.000164031982421875, -7.62939453125e-06, -3.814697265625e-06, 0.0, -0.0008945465087890625, -7.2479248046875e-05, -5.7220458984375e-06, -0.0003643035888671875, -0.00145721435546875, 0.0, -2.288818359375e-05, 0.0, -0.006275177001953125, -1.9073486328125e-06, -2.5391578674316406e-05, -3.814697265625e-06, -0.0007649660110473633, 0.0, -2.86102294921875e-05, -0.0009765625, -8.20159912109375e-05, -5.7220458984375e-06, -3.814697265625e-06, -3.24249267578125e-05, -0.00020241725724190474, -2.0265579223632812e-06, -0.000156402587890625, -0.3592185974121094, -7.2479248046875e-05, -9.5367431640625e-06, -1.52587890625e-05, 0.0], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target, filter_func=lambda target: target.health ==\n            target.calculate_max_health() and PlayerSelector(EnemyPlayer()))\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 17, 104, 25, 133, "target", "<EOS>", "health", "<EOS>", 202, 8, 205, 48, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_max_health", "<EOS>", 59, 155, "Player", "Selector", "<EOS>", 25, 133, "Enemy", "Player", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -6.495388023937892, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "SinisterStrike", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sinister Strike"}, {"_type": "Template34"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"right": {"attr": "spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}, "_type": "BinOp", "left": {"_type": "Template33"}, "op": {"_type": "Add"}}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.05718994140625e-05, -0.00077056884765625, -1.1920922133867862e-06, -0.0001130042364820838, -1.680836794548668e-05, -5.960377166047692e-06, -1.192092622659402e-05, -1.7404556274414062e-05, -1.9073486328125e-06, -3.62396240234375e-05, -7.62939453125e-06, -3.814697265625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-05, -2.47955322265625e-05, -1.52587890625e-05, -1.0371154530730564e-05, -5.5313066695816815e-05, -2.9802317840221804e-06, -4.0531158447265625e-06, -4.00543212890625e-05, -5.340576171875e-05, -0.0001239776611328125, -2.288818359375e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0026856660842895508, 0.0, -5.53131103515625e-05, -1.52587890625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -1.33514404296875e-05, -0.058032989501953125, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -2.6702880859375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -0.0003299713134765625, -9.5367431640625e-06, -0.23794901371002197, -1.1444091796875e-05, -9.655952453613281e-06, -1.9073486328125e-06, -0.0062038893811404705, 0.0, -0.000457763671875, -0.000255584716796875, -4.1961669921875e-05, -1.71661376953125e-05, -3.576278118089249e-07, -0.005028724670410156, -9.5367431640625e-06, -1.9073486328125e-05, -0.0001068115234375, -0.0019817352294921875, 0.0, -3.24249267578125e-05, 0.0, -0.010632514953613281, -1.9073486328125e-06, -2.372264862060547e-05, -3.814697265625e-06, -0.00025010108947753906, 0.0, -1.52587890625e-05, -0.000560760498046875, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -3.62396240234375e-05, -0.00018215169257018715, -2.0265579223632812e-06, -0.000179290771484375, -5.186188697814941, -0.005703926086425781, -0.4328603744506836, -0.3141145706176758, -0.07745075225830078, -0.000579833984375, -0.0009012222290039062, -0.14989912509918213, -1.9073486328125e-06, -0.00057220458984375, 0.0, -0.00010395050048828125, -1.9073486328125e-06], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2 + player.\n            spell_damage), self)\n", "choice_history": [77, 147, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sinister", " ", "Strike", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 46, 106, 37, 78, 17, 104, 42, "spell_damage", "<EOS>", 53, 133, "self", "<EOS>"]}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score": -2.4442791621762865, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Succubus", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -1.082515835762024, -0.0006486494676209986, -5.7220458984375e-06, -1.9073486328125e-06, -0.17635594308376312, -0.5699462890625, -0.08581733703613281, -0.0001964569091796875, -0.009417827241122723, 0.0, -3.814697265625e-06, -7.62939453125e-05, 0.0, -3.063678741455078e-05, 0.0, -1.33514404296875e-05, -0.000347137451171875, -3.814697265625e-06, -0.12451408058404922, 0.0, -4.827859083889052e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Summon(Succubus()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Succubus", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -2.6865774539141114, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "SuccubusSuccubus", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -1.082515835762024, -0.0006486494676209986, -5.7220458984375e-06, -1.9073486328125e-06, -0.17635594308376312, -0.8812275528907776, -0.009092364460229874, -0.0046176910400390625, -0.0001373291015625, -0.004048094619065523, -1.9073486328125e-06, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -5.841255187988281e-06, 0.0, -1.33514404296875e-05, -0.000522613525390625, -3.814697265625e-06, -0.13294517993927002, 0.0, -4.446410093805753e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Summon(SuccubusSuccubus()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Succubus", "Succubus", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -3.3189899916464185, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "IncreaseSuccubus", "_type": "Name"}, "hole0": "<UNK>"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -1.6467353105545044, -0.014735325239598751, -4.1961669921875e-05, -9.5367431640625e-06, -0.5177916884422302, -0.02816072851419449, -4.839835673919879e-05, -0.0082855224609375, -3.814697265625e-05, -0.6284554600715637, 0.0, -1.9073486328125e-06, -4.38690185546875e-05, 0.0, -7.748603820800781e-06, 0.0, -1.52587890625e-05, -0.0004367828369140625, -3.814697265625e-06, -0.07979828119277954, 0.0, -4.446410821401514e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(<UNK>(IncreaseSuccubus()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "<UNK>", "<EOS>", 25, 133, "Increase", "Succubus", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -3.3589749255546906, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "SuccubusSuccubus", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -0.5338290929794312, -0.7248126268386841, -0.016912253573536873, -0.05007171630859375, -6.4849853515625e-05, -0.5953261256217957, 0.0, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.3709068298339844e-05, 0.0, -1.1444091796875e-05, -0.0004138946533203125, -1.9073486328125e-06, -0.04635646566748619, 0.0, -6.508611113531515e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(SuccubusSuccubus()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Succubus", "Succubus", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -3.3932585955148227, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "IncreaseSuccubus", "_type": "Name"}, "hole0": "<UNK>"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -1.6467353105545044, -0.014735325239598751, -4.1961669921875e-05, -9.5367431640625e-06, -0.5177916884422302, -0.02816072851419449, -4.839835673919879e-05, -0.0082855224609375, -3.814697265625e-05, -0.769576370716095, -1.9073486328125e-06, -1.9073486328125e-06, -4.1961669921875e-05, 0.0, -5.841255187988281e-06, 0.0, -1.33514404296875e-05, -0.001071929931640625, -1.9073486328125e-06, -0.012317026033997536, 0.0, -4.398744204081595e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(<UNK>(IncreaseSuccubus()), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "<UNK>", "<EOS>", 25, 133, "Increase", "Succubus", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -3.4813064188341514, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Succubus", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -0.5338290929794312, -0.7544695138931274, -0.1794605255126953, -0.0006465911865234375, -9.5367431640625e-06, -1.9073486328125e-06, -0.5277118682861328, -1.537799835205078e-05, -1.9073486328125e-06, -0.000217437744140625, -5.7220458984375e-06, 0.0, -0.055620670318603516, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.032288312911987305, -0.00015842914581298828, 0.0, -0.0002651214599609375, 0.0, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.00341033935546875, -7.62939453125e-06, -0.0020320313051342964, -2.3841855067985307e-07, -3.9338512578979135e-05, -1.9073486328125e-06], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(Succubus()), PlayerSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Succubus", "<EOS>", 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -3.5521924373346323, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "SuccubusSuccubus", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -0.5338290929794312, -0.7248126268386841, -0.016912253573536873, -0.05007171630859375, -6.4849853515625e-05, -0.8150631785392761, -1.1920928244535389e-07, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -7.987022399902344e-06, 0.0, -1.33514404296875e-05, -0.001209259033203125, -1.9073486328125e-06, -0.019067307934165, 0.0, -4.303381501813419e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(SuccubusSuccubus()), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Succubus", "Succubus", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -3.8302864947685578, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "DiscardSuccubus", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -1.0051406621932983, -0.7248126268386841, -0.016912253573536873, -0.05007171630859375, -6.4849853515625e-05, -0.5953261256217957, 0.0, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.3709068298339844e-05, 0.0, -1.1444091796875e-05, -0.0004138946533203125, -1.9073486328125e-06, -0.04635646566748619, 0.0, -6.508611113531515e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(DiscardSuccubus()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Discard", "Succubus", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -3.9526179880480186, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Discard", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -1.0051406621932983, -0.7544695138931274, -0.1794605255126953, -0.0006465911865234375, -9.5367431640625e-06, -1.9073486328125e-06, -0.5277118682861328, -1.537799835205078e-05, -1.9073486328125e-06, -0.000217437744140625, -5.7220458984375e-06, 0.0, -0.055620670318603516, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.032288312911987305, -0.00015842914581298828, 0.0, -0.0002651214599609375, 0.0, -1.52587890625e-05, 0.0, -3.814697265625e-06, -0.00341033935546875, -7.62939453125e-06, -0.0020320313051342964, -2.3841855067985307e-07, -3.9338512578979135e-05, -1.9073486328125e-06], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(Discard()), PlayerSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Discard", "<EOS>", 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.0235040065484995, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "DiscardSuccubus", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -1.0051406621932983, -0.7248126268386841, -0.016912253573536873, -0.05007171630859375, -6.4849853515625e-05, -0.8150631785392761, -1.1920928244535389e-07, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -7.987022399902344e-06, 0.0, -1.33514404296875e-05, -0.001209259033203125, -1.9073486328125e-06, -0.019067307934165, 0.0, -4.303381501813419e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(DiscardSuccubus()), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Discard", "Succubus", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.08916352450197, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Succubus", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -0.5338290929794312, -0.7544695138931274, -0.1794605255126953, -0.0006465911865234375, -9.5367431640625e-06, -1.9073486328125e-06, -1.0262054204940796, -1.1444091796875e-05, -1.9073486328125e-06, -0.1724414825439453, -0.0002079010009765625, 0.0, -0.019023656845092773, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -0.00955820083618164, -0.00016605854034423828, 0.0, -0.0002193450927734375, 0.0, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -0.00157928466796875, -5.7220458984375e-06, -0.00014017752255313098, -2.0265579223632812e-06, -5.364353637560271e-05, -1.9073486328125e-06], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(Succubus()), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Succubus", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.199149591811334, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Discard", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -1.082515835762024, -0.0006486494676209986, -5.7220458984375e-06, -1.9073486328125e-06, -1.931226372718811, -0.5699462890625, -0.08581733703613281, -0.0001964569091796875, -0.009417827241122723, 0.0, -3.814697265625e-06, -7.62939453125e-05, 0.0, -3.063678741455078e-05, 0.0, -1.33514404296875e-05, -0.000347137451171875, -3.814697265625e-06, -0.12451408058404922, 0.0, -4.827859083889052e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Summon(Discard()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Discard", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.441447883549159, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "DiscardSuccubus", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -1.082515835762024, -0.0006486494676209986, -5.7220458984375e-06, -1.9073486328125e-06, -1.931226372718811, -0.8812275528907776, -0.009092364460229874, -0.0046176910400390625, -0.0001373291015625, -0.004048094619065523, -1.9073486328125e-06, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -5.841255187988281e-06, 0.0, -1.33514404296875e-05, -0.000522613525390625, -3.814697265625e-06, -0.13294517993927002, 0.0, -4.446410093805753e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Summon(DiscardSuccubus()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Discard", "Succubus", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.483267775908104, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Succubus", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -1.082515835762024, -0.0006486494676209986, -5.7220458984375e-06, -1.9073486328125e-06, -0.17635594308376312, -0.5699462890625, -0.08581733703613281, -0.0001964569091796875, -0.009417827241122723, 0.0, -3.814697265625e-06, -7.62939453125e-05, 0.0, -3.063678741455078e-05, 0.0, -1.33514404296875e-05, -0.000347137451171875, -3.814697265625e-06, -2.163536310195923, 0.0, -1.4662710782431532e-05, 0.0], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Summon(Succubus()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Succubus", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -4.560475093715837, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Succubus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Discard", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-05, -1.52587890625e-05, -0.00027963751927018166, -7.832019036868587e-05, -1.019984483718872e-05, -6.651877629337832e-05, -8.344646857949556e-07, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -3.337860107421875e-06, -0.000125885009765625, -0.000148773193359375, -2.09808349609375e-05, -2.288818359375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.007183074951171875, 0.0, -0.0001201629638671875, -0.0005817413330078125, -0.0003108978271484375, -0.010095834732055664, -2.0265579223632812e-06, -0.0005741119384765625, -0.0003070831298828125, -8.20159912109375e-05, -0.12136173248291016, -2.3841855067985307e-07, -1.9073486328125e-06, -3.0517578125e-05, -0.00036263465881347656, -5.960462772236497e-07, -0.0001010894775390625, -1.9073486328125e-06, -6.4849853515625e-05, -1.1444091796875e-05, -7.62939453125e-05, -0.00010526180267333984, -0.0002117156982421875, -0.22478389739990234, -0.02701854705810547, -0.9925442934036255, -0.0041698976419866085, -5.7220458984375e-06, -5.7220458984375e-06, -1.0051406621932983, -0.7544695138931274, -0.1794605255126953, -0.0006465911865234375, -9.5367431640625e-06, -1.9073486328125e-06, -1.0262054204940796, -1.1444091796875e-05, -1.9073486328125e-06, -0.1724414825439453, -0.0002079010009765625, 0.0, -0.019023656845092773, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, -0.00955820083618164, -0.00016605854034423828, 0.0, -0.0002193450927734375, 0.0, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -0.00157928466796875, -5.7220458984375e-06, -0.00014017752255313098, -2.0265579223632812e-06, -5.364353637560271e-05, -1.9073486328125e-06], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give(Discard()), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Succubus", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Discard", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"score": -0.09416909851961464, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001065969467163086, 0.0, -5.7220458984375e-06, -0.010175704956054688, -0.0004119873046875, -3.302054028608836e-05, -9.536714060232043e-06, -3.6955862015020102e-06, -2.0265579223632812e-06], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -2.8600868914359125, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Golem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -2.840024709701538, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001065969467163086, 0.0, -5.7220458984375e-06, -0.010175704956054688, -0.0004119873046875, -3.302054028608836e-05, -9.536714060232043e-06, -3.6955862015020102e-06, -2.0265579223632812e-06], "inferred_code": "class <UNK>Golem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "<UNK>", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -4.614630031443994, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ForceTankGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -4.388704299926758, -0.21003609895706177, -0.0003134759608656168, -8.940695806813892e-06, -0.00016522733494639397, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00397491455078125, -4.00543212890625e-05, -2.312633478140924e-05, -6.67572021484375e-05, -4.291534423828125e-06, -3.814697265625e-06, -0.00010374197154305875, -2.2649765014648438e-06, -0.0007727146148681641, -5.7220458984375e-06, -7.06910650478676e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0009837150573730469, 0.0, -7.62939453125e-06, -0.008878707885742188, -0.0003871917724609375, -3.51662420143839e-05, -8.344629350176547e-06, -4.2916244638036005e-06, -2.0265579223632812e-06], "inferred_code": "class ForceTankGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "Force", "Tank", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -4.861602992689939, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001065969467163086, 0.0, -5.7220458984375e-06, -4.607351303100586, -3.814697265625e-06, -2.622604142743512e-06, -3.576278118089249e-07, -0.0001003862707875669, 0.0, -0.17055237293243408, -1.9073486328125e-06, -1.9073486328125e-05, -1.33514404296875e-05, -2.4676321118022315e-05, 0.0], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7, charge=True)\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "7", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.054238573481598, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "War<UNK>", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -4.966257095336914, -7.545799599029124e-05, -9.11373645067215e-05, -2.0265579223632812e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0002002716064453125, -3.814697265625e-05, -1.680836794548668e-05, -0.0001004934310913086, -4.172325134277344e-06, -7.62939453125e-06, -0.00028845755150541663, -4.410743713378906e-06, -0.0004407167434692383, -5.7220458984375e-06, -3.790853952523321e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001107931137084961, 0.0, -5.7220458984375e-06, -0.010980606079101562, -0.000392913818359375, -3.1590068829245865e-05, -9.775130820344202e-06, -3.934000233130064e-06, -2.0265579223632812e-06], "inferred_code": "class War<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "War", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -6.401186683458036, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ForceGolemGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -4.388704299926758, -1.9709023237228394, -0.027089903131127357, -2.0265579223632812e-06, -0.0001441282220184803, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0030689239501953125, -3.62396240234375e-05, -2.3245540432981215e-05, -7.259845733642578e-05, -4.172325134277344e-06, -3.814697265625e-06, -0.00010862533235922456, -2.2649765014648438e-06, -0.0007460117340087891, -5.7220458984375e-06, -6.604191003134474e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0009989738464355469, 0.0, -7.62939453125e-06, -0.008729934692382812, -0.000392913818359375, -3.5643064620671794e-05, -8.463837730232626e-06, -3.934002052119467e-06, -2.0265579223632812e-06], "inferred_code": "class ForceGolemGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "Force", "Golem", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -7.389675694497782, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -7.286736965179443, -9.5367431640625e-06, -1.9073486328125e-06, -0.0195159912109375, -0.000885009765625, -5.078204412711784e-05, -5.6028297876764555e-06, -6.437470801756717e-06, -2.0265579223632812e-06], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, p):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -7.627520785606237, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Golem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -2.840024709701538, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001065969467163086, 0.0, -5.7220458984375e-06, -4.607351303100586, -3.814697265625e-06, -2.622604142743512e-06, -3.576278118089249e-07, -0.0001003862707875669, 0.0, -0.17055237293243408, -1.9073486328125e-06, -1.9073486328125e-05, -1.33514404296875e-05, -2.4676321118022315e-05, 0.0], "inferred_code": "class <UNK>Golem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7, charge=True)\n", "choice_history": [77, 145, "<UNK>", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "7", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.784584481179536, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "WARRIOR", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -7.688793182373047, -1.33514404296875e-05, -0.0001118183063226752, 0.0, -5.7220458984375e-06, 0.0, -0.00048744678497314453, 0.0, -5.7220458984375e-06, -0.013040542602539062, -0.000244140625, -2.4556931748520583e-05, -8.702254490344785e-06, -2.622709871502593e-06, -1.9073486328125e-06], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -7.820156366397896, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK><UNK>", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -2.840024709701538, -4.966257095336914, -7.545799599029124e-05, -9.11373645067215e-05, -2.0265579223632812e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0002002716064453125, -3.814697265625e-05, -1.680836794548668e-05, -0.0001004934310913086, -4.172325134277344e-06, -7.62939453125e-06, -0.00028845755150541663, -4.410743713378906e-06, -0.0004407167434692383, -5.7220458984375e-06, -3.790853952523321e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001107931137084961, 0.0, -5.7220458984375e-06, -0.010980606079101562, -0.000392913818359375, -3.1590068829245865e-05, -9.775130820344202e-06, -3.934000233130064e-06, -2.0265579223632812e-06], "inferred_code": "class <UNK><UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "<UNK>", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -8.335401863728464, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001065969467163086, 0.0, -5.7220458984375e-06, -4.607351303100586, -3.814697265625e-06, -2.622604142743512e-06, -3.576278118089249e-07, -0.0001003862707875669, 0.0, -3.644341468811035, 0.0, -2.09808349609375e-05, -7.62939453125e-06, -3.8266178307821974e-05, -1.9073486328125e-06], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7, windfury=True)\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "7", "<EOS>", "7", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.420944780983689, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001065969467163086, 0.0, -5.7220458984375e-06, -4.607351303100586, -3.814697265625e-06, -2.622604142743512e-06, -3.576278118089249e-07, -0.0001003862707875669, 0.0, -3.729816436767578, 0.0, -9.5367431640625e-05, -9.5367431640625e-06, -3.1828880310058594e-05, 0.0], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7, stealth=True)\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "7", "<EOS>", "7", "<EOS>", "stealth", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.756098390497925, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Thaddius", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}, {"_type": "Template19", "hole1": {"id": "Feugen", "_type": "Name"}, "hole0": "InGraveyard"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -0.001065969467163086, 0.0, -5.7220458984375e-06, -4.607351303100586, -3.814697265625e-06, -2.622604142743512e-06, -3.576278118089249e-07, -0.0001003862707875669, 0.0, -3.0258045196533203, 0.0, -0.0003299713134765625, -1.9073486328125e-06, -1.33514404296875e-05, -3.814697265625e-06, -0.0017833709716796875, -1.9073486328125e-06, -0.005970001220703125, -0.0012302398681640625, -0.0009746551513671875, -0.02295207977294922, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.17444005608558655, -2.1219253540039062e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.0005729198455810547, -1.33514404296875e-05, 0.0, -0.000171661376953125, -0.013784408569335938, -0.0078067779541015625, -0.0021152496337890625, -7.62939453125e-06, -1.33514404296875e-05, -2.6702880859375e-05, -0.8070065975189209, -3.0517578125e-05], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7, deathrattle=Deathrattle(Summon(Thaddius()),\n            PlayerSelector(), InGraveyard(Feugen())))\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "7", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 207, 59, 155, "Summon", "<EOS>", 25, 133, "Thaddius", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 59, 155, "In", "Graveyard", "<EOS>", 25, 133, "Feugen", "<EOS>"]}, {"score": -8.82197685796882, "model_output": {"hole4": "create_minion", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 7, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -0.0002127836924046278, -2.384185791015625e-06, -0.0005570650100708008, -5.7220458984375e-06, -4.816053478862159e-05, 0.0, -5.7220458984375e-06, 0.0, -8.713608741760254, 0.0, -1.9073486328125e-06, -0.025165557861328125, -0.0006694793701171875, -5.555017924052663e-05, -5.125993993715383e-06, -7.152759280870669e-06, -1.9073486328125e-06], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, create_minion):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "create_minion", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}, {"score": -9.09987136051177, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WarGolem", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 0, "hole0": "War Golem"}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 7}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -0.07410691678524017, -0.007008769549429417, -6.675719760096399e-06, -3.6120880395174026e-05, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002956390380859375, -3.24249267578125e-05, -2.074220174108632e-05, -9.131431579589844e-05, -4.172325134277344e-06, -5.7220458984375e-06, -9.003100395202637, -1.5020368664409034e-05, -0.0007348060607910156, -1.71661376953125e-05, -7.057189213810489e-05, 0.0, -3.814697265625e-06, 0.0, -0.0004336833953857422, 0.0, -9.5367431640625e-06, -0.013446807861328125, -0.00035858154296875, -3.445100810495205e-05, -1.1205629562027752e-05, -3.6955816540285014e-06, -2.0265579223632812e-06], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 0, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [77, 145, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "War", " ", "Golem", "<EOS>", "ALL", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "7", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"score": -0.697825872045307, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -0.1330423355102539, -4.38690185546875e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.0047495365142822266, -0.12910926342010498, -2.09808349609375e-05, -3.814697265625e-06, -0.000244140625], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            TargetSelector(IsMinion())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Target", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -2.79450210247591, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsHero", "_type": "Name"}, "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -0.1330423355102539, -4.38690185546875e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.0047495365142822266, -2.159040689468384, 0.0, 0.0, -0.06701374053955078], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            TargetSelector(IsHero())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Target", "Selector", "<EOS>", 25, 133, "Is", "Hero", "<EOS>", 205, 71]}, {"score": -2.85384674434021, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -2.265598773956299, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -0.1330423355102539, -4.38690185546875e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.0047495365142822266, -0.12910926342010498, -2.09808349609375e-05, -3.814697265625e-06, -0.000244140625], "inferred_code": "class <UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            TargetSelector(IsMinion())))])\n", "choice_history": [77, 145, "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Target", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -3.8882208696420477, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -3.1987524032592773, -2.09808349609375e-05, 0.0, -5.340576171875e-05, -3.814697265625e-06, -0.14290976524353027, -0.11559391021728516, -2.86102294921875e-05, -5.7220458984375e-06, -0.0002613067626953125], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            HeroSelector(IsMinion())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Hero", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -4.087834816076558, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -3.424428701400757, 0.0, 0.0, 0.0, -3.814697265625e-06, -0.02472078800201416, -5.7220458984375e-06, -0.00022125244140625, -1.9073486328125e-05, -0.0004119873046875, -0.004037976264953613, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -9.298318218498025e-06, 0.0, -1.52587890625e-05, -0.0008754730224609375, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.000523430178873241, 0.0, -0.002187967300415039, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.00234222412109375, -1.1444091796875e-05, -0.06673979759216309, -0.0006885528564453125, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017057418823242188, -5.7220458984375e-06, -0.04293273761868477, -7.629378160345368e-06, -0.1112823486328125, -0.0066661834716796875, -0.13306427001953125, -4.38690185546875e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.004784822463989258, -0.12916076183319092, -2.09808349609375e-05, -3.814697265625e-06, -0.0002460479736328125], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            TargetSelector(IsMinion())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Target", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -4.189352952581196, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -3.5964202880859375, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -3.814697265625e-06, -0.09912741184234619, -0.06290912628173828, -6.866455078125e-05, -1.9073486328125e-06, -0.0001983642578125], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            PlayerSelector(IsMinion())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Player", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -4.37283655249734, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.703108549118042, -7.867813110351562e-06, -7.43865966796875e-05, -3.0517578125e-05, -0.0005950927734375, -0.003365755081176758, 0.0, -9.1552734375e-05, -9.5367431640625e-06, -1.0371197276981547e-05, 0.0, -1.52587890625e-05, -0.000820159912109375, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005573864909820259, 0.0, -0.001962900161743164, 0.0, -2.86102294921875e-05, -2.47955322265625e-05, -6.496906280517578e-05, 0.0, -2.09808349609375e-05, -0.002361297607421875, -1.33514404296875e-05, -0.0649876594543457, -0.0006961822509765625, -0.0002880096435546875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.00017547607421875, -0.017101287841796875, -5.7220458984375e-06, -0.042959440499544144, -7.629378160345368e-06, -0.11118888854980469, -0.0067424774169921875, -0.13317108154296875, -4.38690185546875e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.0048220157623291016, -0.12864959239959717, -2.09808349609375e-05, -3.814697265625e-06, -0.000244140625], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            EPIC, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            TargetSelector(IsMinion())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Target", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -4.490543924909382, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "MinionSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -3.869694232940674, -2.09808349609375e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -0.07543742656707764, -0.11431396007537842, -4.9591064453125e-05, -1.9073486328125e-06, -0.000408172607421875], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            MinionSelector(IsMinion())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -4.512060963254719, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -3.995945930480957, -1.9073486328125e-06, -0.20181703567504883, -1.52587890625e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.0014476776123046875], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            SelfSelector()))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.624930345175692, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Resurrect<UNK>"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -4.039205074310303, -0.042219627648591995, -0.0005935430526733398, -0.245880126953125, -1.9073486328125e-06, -0.026103854179382324, -5.7220458984375e-06, 0.0, 0.0, -0.001010894775390625], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(\n            Resurrect<UNK>(), PlayerSelector()))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Resurrect", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.627872668844013, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "CharacterSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -4.03347110748291, -7.43865966796875e-05, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.022979736328125, -0.14030253887176514, -6.103515625e-05, -7.62939453125e-06, -0.0002498626708984375], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            CharacterSelector(IsMinion())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Character", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -4.659411743454932, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -2.445873260498047, -0.22531890869140625, -5.7220458984375e-06, 0.0, -0.029436111450195312, -1.52587890625e-05, -1.9073486328125e-06, -0.051311492919921875, -0.007721900939941406, -3.814697265625e-06, -1.5504454374313354, -0.006043193396180868, -0.0061130523681640625, -1.9073486328125e-06, -0.01998555101454258, -3.4332275390625e-05, 0.0, 0.0, -0.0042724609375], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            MinionSelector(Kill(), SelfSelector())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.692500256639271, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "TargetSelector"}, {"_type": "Template25", "hole0": "BothPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -2.445873260498047, -0.22531890869140625, -5.7220458984375e-06, 0.0, -0.029436111450195312, -1.52587890625e-05, -1.9073486328125e-06, -0.051311492919921875, -0.007721900939941406, -3.814697265625e-06, -0.6448296904563904, -0.7955647706985474, 0.0, -0.0002899169921875, -1.9073486328125e-06, -0.1787889003753662, -0.00017547607421875, -1.1444091796875e-05, -5.7220458984375e-06, -0.000316619873046875], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            MinionSelector(TargetSelector(), BothPlayer())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Target", "Selector", "<EOS>", 63, 171, "Both", "Player", "<EOS>", 205, 71]}, {"score": -4.7562082639749335, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Acidmaw", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -0.10957790166139603, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -2.445873260498047, -1.6105918884277344, -2.86102294921875e-05, 0.0, -0.0068111419677734375, -1.33514404296875e-05, -3.814697265625e-06, -0.18636131286621094, -7.62939453125e-06, -1.71661376953125e-05, -0.024489879608154297, 0.0, -0.007971763610839844, -0.008420944213867188, -0.00010311603546142578, -1.9073486328125e-06, -0.0004100799560546875, -0.00032806396484375, -0.0017385482788085938, 0.0, -0.0002002716064453125, -1.9073486328125e-06, -0.13436973094940186, -2.09808349609375e-05, 0.0, 0.0, -0.015615463256835938], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            MinionSelector(condition=Null, players=BothPlayer())))])\n", "choice_history": [77, 145, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 205, 71]}, {"score": -4.950522974770813, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsHero", "_type": "Name"}, "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -2.265598773956299, -0.0001074075698852539, -3.4868717193603516e-06, -0.0002319812774658203, 0.0, 0.0, -0.00022125244140625, -9.5367431640625e-06, -0.0001354217529296875, -1.52587890625e-05, -3.814697265625e-06, -0.00246429443359375, -6.103515625e-05, -1.9073486328125e-06, -2.503394853192731e-06, -3.4332275390625e-05, -0.001117706298828125, -1.9073486328125e-06, -0.00025233885389752686, -3.576272320060525e-06, -5.7220458984375e-06, 0.0, -6.67572021484375e-05, 0.0, -7.367134094238281e-05, -5.7220458984375e-06, -0.03393054008483887, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.026861071586608887, -3.814697265625e-06, -0.0001354217529296875, -2.288818359375e-05, -0.0004730224609375, -0.0032504796981811523, 0.0, -7.62939453125e-05, -5.7220458984375e-06, -1.0013571227318607e-05, 0.0, -1.52587890625e-05, -0.0008525848388671875, -0.0001220703125, -2.1457672119140625e-06, -1.1920928244535389e-07, -0.0005560758872888982, 0.0, -0.0021212100982666016, 0.0, -3.0517578125e-05, -2.47955322265625e-05, -6.687641143798828e-05, 0.0, -2.09808349609375e-05, -0.0023174285888671875, -1.1444091796875e-05, -0.06629073619842529, -0.0006923675537109375, -0.00028228759765625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -4.9591064453125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001773834228515625, -0.017061233520507812, -5.7220458984375e-06, -0.04291020706295967, -7.629378160345368e-06, -0.11108016967773438, -0.006683349609375, -0.1330423355102539, -4.38690185546875e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.0047495365142822266, -2.159040689468384, 0.0, 0.0, -0.06701374053955078], "inferred_code": "class <UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Kill(),\n            TargetSelector(IsHero())))])\n", "choice_history": [77, 145, "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Acidmaw", "<EOS>", 55, 138, "7", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Target", "Selector", "<EOS>", 25, 133, "Is", "Hero", "<EOS>", 205, 71]}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score": -0.3616871966302071, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -0.13741683959960938, -6.67572021484375e-05, -1.9073486328125e-06, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.000949859619140625, -0.0030117034912109375, -0.0001201629638671875, -2.6702880859375e-05, -0.0001068115234375, -0.004461169242858887, -7.641315460205078e-05, -0.018939971923828125, -2.86102294921875e-05, -5.4717063903808594e-05, -9.5367431640625e-06, -0.0015108585357666016, -1.9073486328125e-06, -0.00433874037116766, 0.0, -4.38690185546875e-05, -0.0002574920654296875, -3.24249267578125e-05, -1.7523747374070808e-05, -7.629365427419543e-06, -7.760507287457585e-05, -2.0265579223632812e-06, -0.0023542640265077353, -2.86102294921875e-05, -9.5367431640625e-05, -7.62939453125e-06, -0.00013566017150878906, -4.0531158447265625e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, True\n            )\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -2.018978000707179, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -1.8782577514648438, -1.1444091796875e-05, -0.07268333435058594, -1.33514404296875e-05, 0.0, -5.245195097813848e-06, -1.1920928244535389e-07, -0.0010547637939453125, -0.0022068023681640625, -0.0016155242919921875, -1.1444091796875e-05, -0.000141143798828125, -0.009627819061279297, -3.3020973205566406e-05, -0.021162033081054688, -3.24249267578125e-05, -9.584426879882812e-05, -1.1444091796875e-05, -0.000278472900390625, -5.53131103515625e-05, -4.1961669921875e-05, -0.00029349327087402344, -3.933906555175781e-06, -0.00017833709716796875, 0.0, -0.007638083305209875, 0.0, -7.43865966796875e-05, -0.0004138946533203125, -3.814697265625e-05, -1.072883515007561e-05, -4.768360213347478e-06, -8.571139187552035e-05, -1.1920928244535389e-07, -0.002179265022277832, -1.1444091796875e-05, -7.82012939453125e-05, -5.7220458984375e-06, -0.00014829635620117188, -7.748603820800781e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.4526621245576905, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -2.096485137939453, -2.6702880859375e-05, -1.52587890625e-05, -4.0531076592742465e-06, -2.3841855067985307e-07, -0.0074100494384765625, -0.8104629516601562, -0.0001659393310546875, -2.09808349609375e-05, -0.0075283050537109375, -0.30303311347961426, -6.699562072753906e-05, -0.025730133056640625, -2.288818359375e-05, -6.401538848876953e-05, -1.1444091796875e-05, -0.0003566741943359375, -3.814697265625e-06, -0.0007839202880859375, -7.62939453125e-06, -0.0001964569091796875, 0.0, -0.000614166259765625, -5.7220458984375e-06, -4.9591064453125e-05, 0.0, -0.0056372880935668945, 0.0, -2.47955322265625e-05, -0.0041255950927734375, -6.67572021484375e-05, -2.002710425585974e-05, -5.722029527532868e-06, -5.042520206188783e-05, 0.0, -0.001928567886352539, -2.288818359375e-05, -8.58306884765625e-05, -5.7220458984375e-06, -0.00011777877807617188, -5.841255187988281e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.066761388709409, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -2.096485137939453, -2.6702880859375e-05, -1.52587890625e-05, -4.0531076592742465e-06, -2.3841855067985307e-07, -0.0074100494384765625, -0.589996337890625, -0.00316619873046875, -5.53131103515625e-05, -1.71661376953125e-05, -0.008520126342773438, -3.814697265625e-06, -1.1081528663635254, -6.4849853515625e-05, -0.0007610321044921875, -5.7220458984375e-05, -0.003787994384765625, -0.0016541481018066406, -0.00011074542999267578, -0.041957855224609375, -1.9073486328125e-05, -0.00017559528350830078, -5.7220458984375e-06, -0.00031280517578125, -3.814697265625e-06, -0.0003185272216796875, -1.71661376953125e-05, -8.0108642578125e-05, 0.0, -0.00115966796875, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.007094144821166992, 0.0, -2.6702880859375e-05, -0.005406379699707031, -8.392333984375e-05, -1.9550250726751983e-05, -6.079655122448457e-06, -5.125969255459495e-05, 0.0, -0.001955270767211914, -2.09808349609375e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.00010609626770019531, -7.748603820800781e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.BEAST, CARD_RARITY.FREE,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Boar", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "BEAST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.229988111291476, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 3, "hole0": "Boar"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -3.9608421325683594, -4.76837158203125e-05, -4.0411134250462055e-05, -1.33514404296875e-05, -6.496874993899837e-05, -2.3841855067985307e-07, -0.0003529787063598633, 0.0, -0.12843537330627441, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.00014769997505936772, 0.0, -1.9073486328125e-06, -0.13730907440185547, -2.47955322265625e-05, -8.583057933719829e-06, -2.264974000354414e-06, -8.976458047982305e-05, 0.0, -0.0015578269958496094, -5.14984130859375e-05, -0.0001983642578125, -5.7220458984375e-06, -0.0001900196075439453, -1.1563301086425781e-05], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boar", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.303036703987772, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -2.096485137939453, -2.6702880859375e-05, -1.52587890625e-05, -4.0531076592742465e-06, -2.3841855067985307e-07, -0.0074100494384765625, -0.589996337890625, -0.00316619873046875, -5.53131103515625e-05, -1.71661376953125e-05, -0.008520126342773438, -3.814697265625e-06, -1.2823643684387207, -7.62939453125e-06, -0.06268882751464844, -9.72747802734375e-05, -0.00214385986328125, -0.011555075645446777, -8.0108642578125e-05, -0.03442573547363281, -2.09808349609375e-05, -7.832050323486328e-05, -5.7220458984375e-06, -0.000209808349609375, -5.7220458984375e-06, -0.00049591064453125, -1.1444091796875e-05, -9.918212890625e-05, 0.0, -0.001201629638671875, -3.814697265625e-06, -4.1961669921875e-05, 0.0, -0.006983757019042969, 0.0, -2.47955322265625e-05, -0.004939079284667969, -8.0108642578125e-05, -1.978866566787474e-05, -5.960446742392378e-06, -5.1498107495717704e-05, 0.0, -0.0019611120223999023, -2.09808349609375e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.0001100301742553711, -7.748603820800781e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Boar", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.377862825301662, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"attr": "ALL", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -2.096485137939453, -2.6702880859375e-05, -1.52587890625e-05, -4.0531076592742465e-06, -2.3841855067985307e-07, -0.0074100494384765625, -0.589996337890625, -0.00316619873046875, -5.53131103515625e-05, -1.71661376953125e-05, -0.008520126342773438, -3.814697265625e-06, -1.4099860191345215, 0.0, -0.007902145385742188, -0.0002727508544921875, -0.0023784637451171875, -0.007921576499938965, -0.0001087188720703125, -0.038814544677734375, -1.9073486328125e-05, -7.259845733642578e-05, -7.62939453125e-06, -0.000244140625, -5.7220458984375e-06, -0.000518798828125, -1.1444091796875e-05, -0.000110626220703125, 0.0, -0.001323699951171875, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -0.0068923234939575195, 0.0, -2.6702880859375e-05, -0.005641937255859375, -8.20159912109375e-05, -2.0027082427986898e-05, -5.960446742392378e-06, -5.19749301020056e-05, 0.0, -0.001963019371032715, -2.09808349609375e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.0001100301742553711, -7.748603820800781e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Boar", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.576427712339836, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -2.096485137939453, -2.6702880859375e-05, -1.52587890625e-05, -4.0531076592742465e-06, -2.3841855067985307e-07, -0.0074100494384765625, -0.8104629516601562, -0.0001659393310546875, -2.09808349609375e-05, -0.0075283050537109375, -1.3523447513580322, -6.306171417236328e-05, -0.09797954559326172, -5.91278076171875e-05, -7.009506225585938e-05, -2.09808349609375e-05, -0.0003948211669921875, -7.62939453125e-06, -0.0008182525634765625, -7.62939453125e-06, -0.0002574920654296875, 0.0, -0.0006961822509765625, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.005833983421325684, 0.0, -2.6702880859375e-05, -0.005869865417480469, -6.866455078125e-05, -2.002710425585974e-05, -6.198863957251888e-06, -5.316699389368296e-05, 0.0, -0.0019197463989257812, -2.288818359375e-05, -8.7738037109375e-05, -5.7220458984375e-06, -0.00011777877807617188, -5.841255187988281e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.591999065463369, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -1.8782577514648438, -1.1444091796875e-05, -2.669623374938965, -1.71661376953125e-05, 0.0, -1.311301275563892e-06, -3.933906555175781e-06, -0.0121307373046875, -0.0009479522705078125, -0.000156402587890625, -3.814697265625e-06, -9.5367431640625e-05, -0.006680130958557129, -4.458427429199219e-05, -1.33514404296875e-05, -6.866455078125e-05, -0.000217437744140625, -0.0004291534423828125, -2.2649765014648438e-06, -4.1961669921875e-05, 0.0, -0.000128147192299366, 0.0, -0.0001049041748046875, -0.000701904296875, -4.38690185546875e-05, -9.179109838441946e-06, -1.6689286894688848e-06, -6.186929385876283e-05, 0.0, -0.001482844352722168, -9.5367431640625e-06, -7.82012939453125e-05, -3.814697265625e-06, -0.00015211105346679688, -7.748603820800781e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\n            minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "FREE", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.904069079267735, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -0.13741683959960938, -6.67572021484375e-05, -1.9073486328125e-06, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.000949859619140625, -0.0030117034912109375, -0.0001201629638671875, -2.6702880859375e-05, -0.0001068115234375, -5.558330535888672, -4.780292510986328e-05, -0.0073719024658203125, -1.9073486328125e-05, -5.8531761169433594e-05, -3.814697265625e-06, -0.0013124942779541016, -1.9073486328125e-06, -0.004453658126294613, 0.0, -4.1961669921875e-05, -0.000301361083984375, -2.86102294921875e-05, -1.6689285985194147e-05, -6.198863957251888e-06, -8.022763358894736e-05, -2.0265579223632812e-06, -0.002527594333514571, -2.6702880859375e-05, -9.1552734375e-05, -7.62939453125e-06, -0.00013363361358642578, -4.0531158447265625e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, True\n            )\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.109033241181777, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"attr": "charge", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -2.096485137939453, -2.6702880859375e-05, -1.52587890625e-05, -4.0531076592742465e-06, -2.3841855067985307e-07, -0.0074100494384765625, -0.589996337890625, -0.00316619873046875, -5.53131103515625e-05, -1.71661376953125e-05, -0.008520126342773438, -3.814697265625e-06, -3.123168468475342, -0.00014019012451171875, -0.01921844482421875, -1.1444091796875e-05, -0.014986038208007812, -0.005653738975524902, -8.58306884765625e-05, -0.034908294677734375, -2.288818359375e-05, -7.259845733642578e-05, -7.62939453125e-06, -0.0001964569091796875, -5.7220458984375e-06, -0.0005893707275390625, -1.33514404296875e-05, -0.000118255615234375, 0.0, -0.0012969970703125, -3.814697265625e-06, -4.76837158203125e-05, 0.0, -0.0070923566818237305, 0.0, -2.6702880859375e-05, -0.005812644958496094, -8.20159912109375e-05, -2.0146289898548275e-05, -5.960446742392378e-06, -5.185572445043363e-05, 0.0, -0.001963019371032715, -2.09808349609375e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.0001081228256225586, -7.748603820800781e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.charge, CARD_RARITY.\n            FREE, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Boar", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "charge", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.244886979873371, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "ALL", "hole1": 3, "hole0": "Boar"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}], "hole2": 2, "hole1": 4, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -3.9608421325683594, -4.76837158203125e-05, -4.0411134250462055e-05, -1.33514404296875e-05, -6.496874993899837e-05, -2.3841855067985307e-07, -0.0003529787063598633, 0.0, -0.12843537330627441, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -0.00014769997505936772, 0.0, -1.9073486328125e-06, -2.0620288848876953, -0.0068874359130859375, -0.0002189612714573741, 0.0, -1.33514404296875e-05, 0.0, -0.0001785741187632084, 0.0, -0.005099296569824219, -0.00017547607421875, -1.9073486328125e-06, -0.001556396484375, -0.00038909912109375, -4.00543212890625e-05, -1.9073486328125e-06, -2.7418136596679688e-05, -2.0265579223632812e-06, -0.001338958740234375, -3.814697265625e-06, -0.07621753215789795, -1.9073486328125e-06, -8.20159912109375e-05, -9.5367431640625e-06, -7.116787310224026e-05, -2.622604142743512e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Boar", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.304807796403082, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -2.096485137939453, -2.6702880859375e-05, -1.52587890625e-05, -4.0531076592742465e-06, -2.3841855067985307e-07, -0.0074100494384765625, -0.589996337890625, -0.00316619873046875, -5.53131103515625e-05, -1.71661376953125e-05, -0.008520126342773438, -3.814697265625e-06, -3.331648349761963, -3.814697265625e-06, -0.0012683868408203125, -9.5367431640625e-06, -0.01181793212890625, -0.010643482208251953, -4.38690185546875e-05, -0.03959083557128906, -1.71661376953125e-05, -6.496906280517578e-05, -7.62939453125e-06, -0.0001888275146484375, -7.62939453125e-06, -0.00051116943359375, -1.1444091796875e-05, -0.0001049041748046875, 0.0, -0.0013217926025390625, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.006932258605957031, 0.0, -2.47955322265625e-05, -0.0049915313720703125, -8.0108642578125e-05, -1.990787495742552e-05, -5.8412379075889476e-06, -5.1498107495717704e-05, 0.0, -0.0019572973251342773, -2.09808349609375e-05, -8.7738037109375e-05, -5.7220458984375e-06, -0.0001119375228881836, -7.748603820800781e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            FREE, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Boar", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.652307524407767, "model_output": {"hole4": "Minion", "_type": "Template0", "hole3": "create_minion", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -0.13741683959960938, -6.67572021484375e-05, -1.9073486328125e-06, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.000949859619140625, -0.0030117034912109375, -0.0001201629638671875, -2.6702880859375e-05, -0.0001068115234375, -0.004461169242858887, -7.641315460205078e-05, -0.018939971923828125, -2.86102294921875e-05, -5.4717063903808594e-05, -9.5367431640625e-06, -0.0015108585357666016, -1.9073486328125e-06, -6.253173351287842, -0.04040336608886719, -8.96453857421875e-05, -0.0019283294677734375, -1.71661376953125e-05, -1.978873842745088e-05, -6.079655122448457e-06, -0.00010073126759380102, -3.933906555175781e-06, -0.0019794702529907227, -3.62396240234375e-05, -8.96453857421875e-05, -5.7220458984375e-06, -0.00016200542449951172, -7.748603820800781e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, True\n            )\n\n    def create_minion(self, Minion):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "Minion", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.6881568576314905, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "", "hole0": "Boar", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 2, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -8.22540732769994e-06, -0.0004976092022843659, -9.879469871520996e-06, -1.3947435945738107e-05, -5.006785613659304e-06, 0.0, -0.019903182983398438, -1.9073486328125e-06, -7.62939453125e-06, -0.16640472412109375, -0.0006275177001953125, -0.13741683959960938, -6.67572021484375e-05, -1.9073486328125e-06, -1.5497195136049413e-06, -1.1920928244535389e-07, -0.000949859619140625, -0.0030117034912109375, -0.0001201629638671875, -2.6702880859375e-05, -0.0001068115234375, -0.004461169242858887, -7.641315460205078e-05, -5.861293792724609, -0.00177764892578125, -0.48852717876434326, 0.0, -0.000247955322265625, -0.0002803802490234375, -1.9073486328125e-05, -1.6331649021594785e-05, -3.576272320060525e-06, -8.45192262204364e-05, -2.0265579223632812e-06, -0.0018947124481201172, -1.71661376953125e-05, -9.5367431640625e-05, -5.7220458984375e-06, -0.00014674663543701172, -5.9604644775390625e-06], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            CARD_RARITY.COMMON)\n\n    def (self, p):\n        return Minion(4, 2, charge=True)\n", "choice_history": [77, 145, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Boar", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 64, "<EOS>", "p", "<EOS>", 217, 93, 151, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"score": -0.6425228579365481, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -0.40935611724853516, -6.103515625e-05, -0.08049511909484863, -2.2411135432776064e-05, -0.00011479845124995336, -2.288818359375e-05, -0.00013827794464305043, -1.1920928244535389e-07, -0.000102996826171875, -0.022159576416015625, -4.00543212890625e-05, -2.741813204920618e-06, -8.344646857949556e-07, -1.2959237210452557e-05, -1.1920928244535389e-07, -0.10574734210968018, 0.0, -0.0022764205932617188, -9.5367431640625e-06, -0.00011456012725830078, -9.536738616588991e-07], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.262986294674292, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "TOTEM"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -0.40935611724853516, -6.103515625e-05, -2.720801591873169, -3.218649908376392e-06, -0.00013470645353663713, -1.1444091796875e-05, -0.00010132435272680596, 0.0, -6.67572021484375e-05, -0.013998031616210938, -3.4332275390625e-05, -4.768371127283899e-06, -9.536738616588991e-07, -1.4096032828092575e-05, -1.1920928244535389e-07, -0.09410703182220459, 0.0, -0.0023241043090820312, -1.1444091796875e-05, -0.00011038780212402344, -8.344646857949556e-07], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 75, 164, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.002756182516897, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -0.40935611724853516, -6.103515625e-05, -0.08049511909484863, -2.2411135432776064e-05, -0.00011479845124995336, -2.288818359375e-05, -0.00013827794464305043, -1.1920928244535389e-07, -0.000102996826171875, -0.022159576416015625, -4.00543212890625e-05, -2.741813204920618e-06, -8.344646857949556e-07, -1.2959237210452557e-05, -1.1920928244535389e-07, -2.587495803833008, 0.0, -0.010525703430175781, -1.52587890625e-05, -0.000179290771484375, -3.814697265625e-06, -0.0389786958694458, -2.1457672119140625e-06, -0.05601310729980469, -0.0003871917724609375, -0.045113563537597656, -0.005166253075003624, -0.00684714037925005, -1.71661376953125e-05, -1.9073486328125e-06, -0.7984532713890076, -0.32447350025177, -3.814697265625e-06, -7.62939453125e-06, -0.09263992309570312, -0.0019407272338867188, -0.4273567199707031, -0.0001850128173828125, 0.0, -0.010105133056640625, -2.872943878173828e-05, 0.0, -2.09808349609375e-05, -0.035564422607421875, -0.0002269744873046875, -5.91278076171875e-05, -1.9073486328125e-06, -0.0003948211669921875, -1.71661376953125e-05, 0.0, -0.010033607482910156, 0.0, -0.000110626220703125, -1.9073486328125e-05, -0.015421867370605469, -0.0005700588226318359, 0.0], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, deathrattle=Deathrattle(Give(ChangeAttack(1)),\n            MinionSelector(Null, picker=RandomPicker())))\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>"]}, {"score": -5.2544198178634005, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Choice"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}, "arg": "choices"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -1.0954971313476562, -1.1444091796875e-05, -0.011191368103027344, -2.09808349609375e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.0007354593253694475, -7.390969585685525e-06, -0.0004825592041015625, -4.57763671875e-05, -7.62939453125e-05, -0.10094420611858368, -0.0014705657958984375, -0.7519598007202148, -0.0049152374267578125, 0.0, -9.5367431640625e-06, -0.0025502429343760014, -2.0384708477649838e-05, -0.0001087188720703125, -0.0009765625, -7.05718994140625e-05, -0.16435527801513672, -0.0001544952392578125, -0.000152587890625, -0.00042877841042354703, -4.5656201109522954e-05, -3.814697265625e-06, 0.0, -5.0306221965001896e-05, -0.04685026407241821, -1.9073486328125e-06, -4.57763671875e-05, -0.3742103576660156, -0.0023345947265625, -0.01070404052734375, -0.0047991275787353516, -6.318072337307967e-06, -1.52587890625e-05, -7.2479248046875e-05, -0.0006622075452469289, -0.0012414453085511923, 0.0, -5.7220458984375e-06, -0.12774085998535156, -0.0019741058349609375, -0.00093841552734375, -5.7220458984375e-06, -0.006581352092325687, -8.273124694824219e-05, 0.0, -9.5367431640625e-06, -0.01647663116455078, -0.0002651214599609375, -0.03504300117492676, -8.106212590064388e-06, -0.00077056884765625, -0.0006656646728515625, -0.0001010894775390625, -0.17080865800380707, -0.3233926296234131, -1.2902154922485352, -0.0018253326416015625, -0.48431771993637085, -0.11519086360931396, 0.0, -0.003747701644897461, -5.841255187988281e-06, -0.0028209686279296875, -1.71661376953125e-05, -0.06000542268157005, -0.0001662969298195094, 0.0, -0.0001659393310546875, -8.58306884765625e-05, -7.867811291362159e-06, -3.814697265625e-06, -5.233287811279297e-05, 0.0, -7.62939453125e-06, -0.011579513549804688, -5.91278076171875e-05, -1.502025406807661e-05, -9.775113539944869e-06, -9.237555786967278e-06, -2.3841855067985307e-07], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(3))]), SelfSelector()),\n            Choice(Attack(), ChangeAttack(2), HeroSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "choices", "<EOS>", 33, 168, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "2", "<EOS>"]}, {"score": -5.342255277946258, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Template21", "hole1": 2, "hole0": "Heal"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Choice"}, "arg": "choices"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -1.0954971313476562, -1.1444091796875e-05, -0.011191368103027344, -2.09808349609375e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.0007354593253694475, -7.390969585685525e-06, -0.0004825592041015625, -4.57763671875e-05, -7.62939453125e-05, -0.10094420611858368, -0.0014705657958984375, -0.6676578521728516, -0.00048828125, -0.6053475141525269, -0.003802776336669922, -0.42309296131134033, -1.4305104514278355e-06, -0.039096832275390625, -3.814697265625e-05, -0.366759717464447, -0.0003730052267201245, 0.0, -6.866455078125e-05, -0.07485389709472656, -0.0002956390380859375, -0.09817612171173096, -5.841170059284195e-05, -0.000873565673828125, -0.0002346038818359375, -4.38690185546875e-05, -0.103664830327034, -0.30886971950531006, -0.10933971405029297, -0.02281951904296875, -1.9073486328125e-06, -5.7220458984375e-06, -0.3447427749633789, -3.3378546504536644e-06, -1.33514404296875e-05, -0.00286102294921875, -0.0001544952392578125, -0.08890724182128906, -0.042296409606933594, -0.0001201629638671875, -0.005567051470279694, -1.5616295058862306e-05, -1.9073486328125e-06, 0.0, -0.0004047145484946668, -0.022801987826824188, -1.9073486328125e-06, -6.866455078125e-05, -0.19466590881347656, -0.07332801818847656, -0.04077339172363281, -0.013660311698913574, -1.5497195136049413e-06, -1.1444091796875e-05, -7.2479248046875e-05, -0.0009621381759643555, -0.0021383760031312704, 0.0, -2.288818359375e-05, -0.16463184356689453, -0.27729225158691406, -5.7220458984375e-06, -0.005615059286355972, -5.602836608886719e-05, 0.0, -5.7220458984375e-06, -0.000179290771484375, -2.0265566490706988e-05, -3.814697265625e-06, -0.00035858154296875, 0.0, -1.52587890625e-05, -0.0017337799072265625, -7.62939453125e-06, -0.0002479245013091713, -1.5497195136049413e-06, -2.3682659957557917e-05, 0.0], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Heal(2),\n            HeroSelector()), Choice(Attack(), Give([Buff(ChangeAttack(1)),\n            Buff(ChangeHealth(3))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "choices", "<EOS>", 33, 168, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 60, 163, "Heal", "<EOS>", "2", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 206, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 63, 171, "Self", "Selector", "<EOS>", 205, 71, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "2", "<EOS>"]}, {"score": -5.343180890607165, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Anodized<UNK>Cub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -4.709746360778809, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -0.40935611724853516, -6.103515625e-05, -0.08049511909484863, -2.2411135432776064e-05, -0.00011479845124995336, -2.288818359375e-05, -0.00013827794464305043, -1.1920928244535389e-07, -0.000102996826171875, -0.022159576416015625, -4.00543212890625e-05, -2.741813204920618e-06, -8.344646857949556e-07, -1.2959237210452557e-05, -1.1920928244535389e-07, -0.10574734210968018, 0.0, -0.0022764205932617188, -9.5367431640625e-06, -0.00011456012725830078, -9.536738616588991e-07], "inferred_code": "class Anodized<UNK>Cub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "choice_history": [77, 145, "Anodized", "<UNK>", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.573518465685176, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRobo<UNK>", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -4.939131736755371, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -0.40935611724853516, -6.103515625e-05, -0.08049511909484863, -2.2411135432776064e-05, -0.00011479845124995336, -2.288818359375e-05, -0.00013827794464305043, -1.1920928244535389e-07, -0.000102996826171875, -0.022159576416015625, -4.00543212890625e-05, -2.741813204920618e-06, -8.344646857949556e-07, -1.2959237210452557e-05, -1.1920928244535389e-07, -0.10574734210968018, 0.0, -0.0022764205932617188, -9.5367431640625e-06, -0.00011456012725830078, -9.536738616588991e-07], "inferred_code": "class AnodizedRobo<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "choice_history": [77, 145, "Anodized", "Robo", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.02778381198015, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}, "arg": "choices"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -1.0954971313476562, -1.1444091796875e-05, -0.011191368103027344, -2.09808349609375e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.0007354593253694475, -7.390969585685525e-06, -0.0004825592041015625, -4.57763671875e-05, -7.62939453125e-05, -0.10094420611858368, -0.0014705657958984375, -0.7519598007202148, -0.0049152374267578125, 0.0, -9.5367431640625e-06, -0.0025502429343760014, -2.0384708477649838e-05, -0.0001087188720703125, -0.0009765625, -7.05718994140625e-05, -0.16435527801513672, -0.0001544952392578125, -0.000152587890625, -0.00042877841042354703, -4.5656201109522954e-05, -3.814697265625e-06, 0.0, -5.0306221965001896e-05, -0.04685026407241821, -1.9073486328125e-06, -4.57763671875e-05, -0.3742103576660156, -0.0023345947265625, -0.01070404052734375, -0.0047991275787353516, -6.318072337307967e-06, -1.52587890625e-05, -7.2479248046875e-05, -0.0006622075452469289, -0.0012414453085511923, 0.0, -5.7220458984375e-06, -0.12774085998535156, -0.0019741058349609375, -0.00093841552734375, -5.7220458984375e-06, -0.006581352092325687, -8.273124694824219e-05, 0.0, -9.5367431640625e-06, -0.01647663116455078, -0.0002651214599609375, -0.03504300117492676, -8.106212590064388e-06, -0.00077056884765625, -0.0006656646728515625, -0.0001010894775390625, -0.17080865800380707, -0.3233926296234131, -0.3676481246948242, -0.016828536987304688, -1.1444091796875e-05, -7.62939453125e-06, -0.8354371786117554, -5.006785613659304e-06, -7.62939453125e-06, -0.005709648132324219, -9.72747802734375e-05, -0.13913536071777344, -0.4110422134399414, -0.0002765655517578125, -0.0013236113591119647, -8.4638240878121e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001412626006640494, -0.08199822157621384, -3.933906555175781e-06, -7.82012939453125e-05, -0.17769145965576172, -0.08274650573730469, -0.04922676086425781, -0.017721056938171387, -1.0728830375228426e-06, -1.1444091796875e-05, -8.20159912109375e-05, -0.0008587837219238281, -0.002060174709185958, 0.0, -2.09808349609375e-05, -0.17897891998291016, -0.3634529113769531, -5.7220458984375e-06, -0.006595895625650883, -6.377696990966797e-05, 0.0, -3.814697265625e-06, -0.0001354217529296875, -1.8596643712953664e-05, -1.9073486328125e-06, -0.0003701448440551758, 0.0, -1.52587890625e-05, -0.0030231475830078125, -1.1444091796875e-05, -0.0007577642682008445, -3.6954863844584906e-06, -4.830199759453535e-05, -2.0265579223632812e-06], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(3))]), SelfSelector()),\n            Choice(Attack(), Give([Buff(ChangeAttack(1)), Buff(ChangeHealth\n            (3))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "choices", "<EOS>", 33, 168, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 206, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 63, 171, "Self", "Selector", "<EOS>", 205, 71, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "2", "<EOS>"]}, {"score": -6.041821498077603, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"id": "Summon", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}, "arg": "choices"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -1.0954971313476562, -1.1444091796875e-05, -0.011191368103027344, -2.09808349609375e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.0007354593253694475, -7.390969585685525e-06, -0.0004825592041015625, -4.57763671875e-05, -7.62939453125e-05, -0.10094420611858368, -0.0014705657958984375, -0.7519598007202148, -0.0049152374267578125, 0.0, -9.5367431640625e-06, -0.0025502429343760014, -2.0384708477649838e-05, -0.0001087188720703125, -0.0009765625, -7.05718994140625e-05, -0.16435527801513672, -0.0001544952392578125, -0.000152587890625, -0.00042877841042354703, -4.5656201109522954e-05, -3.814697265625e-06, 0.0, -5.0306221965001896e-05, -0.04685026407241821, -1.9073486328125e-06, -4.57763671875e-05, -0.3742103576660156, -0.0023345947265625, -0.01070404052734375, -0.0047991275787353516, -6.318072337307967e-06, -1.52587890625e-05, -7.2479248046875e-05, -0.0006622075452469289, -0.0012414453085511923, 0.0, -5.7220458984375e-06, -0.12774085998535156, -0.0019741058349609375, -0.00093841552734375, -5.7220458984375e-06, -0.006581352092325687, -8.273124694824219e-05, 0.0, -9.5367431640625e-06, -0.01647663116455078, -0.0002651214599609375, -0.03504300117492676, -8.106212590064388e-06, -0.00077056884765625, -0.0006656646728515625, -0.0001010894775390625, -0.17080865800380707, -0.3233926296234131, -0.3676481246948242, -0.016828536987304688, -1.1444091796875e-05, -7.62939453125e-06, -0.6376289129257202, -2.2768756025470793e-05, -0.32733726501464844, -0.6078996658325195, -7.05718994140625e-05, -0.770293653011322, -2.3841855067985307e-07, -0.00347900390625, -8.392333984375e-05, -0.017966264858841896, -0.0001207590103149414, 0.0, -5.7220458984375e-06, -0.000640869140625, -3.6716461181640625e-05, -1.9073486328125e-06, -3.135204315185547e-05, 0.0, -1.71661376953125e-05, -0.0073871612548828125, -1.33514404296875e-05, -0.00016747500922065228, -1.4305104514278355e-06, -8.899893146008253e-06, 0.0], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(3))]), SelfSelector()),\n            Choice(Attack(), Summon(targets), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "choices", "<EOS>", 33, 168, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Summon", "<EOS>", 205, 53, 133, "targets", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "2", "<EOS>"]}, {"score": -6.160970990027273, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -0.40935611724853516, -6.103515625e-05, -0.08049511909484863, -2.2411135432776064e-05, -0.00011479845124995336, -2.288818359375e-05, -0.00013827794464305043, -1.1920928244535389e-07, -0.000102996826171875, -0.022159576416015625, -4.00543212890625e-05, -2.741813204920618e-06, -8.344646857949556e-07, -1.2959237210452557e-05, -1.1920928244535389e-07, -2.587495803833008, 0.0, -0.010525703430175781, -1.52587890625e-05, -0.000179290771484375, -3.814697265625e-06, -0.0389786958694458, -2.1457672119140625e-06, -0.05601310729980469, -0.0003871917724609375, -0.045113563537597656, -0.005166253075003624, -0.00684714037925005, -1.71661376953125e-05, -1.9073486328125e-06, -0.7984532713890076, -0.32447350025177, -3.814697265625e-06, -7.62939453125e-06, -0.09263992309570312, -0.0019407272338867188, -1.0727176666259766, -7.43865966796875e-05, -1.9073486328125e-06, -0.0023175477981567383, -0.0003377199172973633, -1.9073486328125e-06, -0.08098888397216797, -1.9073486328125e-06, -1.9073486328125e-06, -0.10607647895812988, 0.0, -2.47955322265625e-05, 0.0, -0.3953348398208618, -0.00045108795166015625, 0.0], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, deathrattle=Deathrattle(Give(ChangeAttack(1)),\n            MinionSelector(picker=RandomPicker())))\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>"]}, {"score": -6.45092409967895, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template36_expr_seq"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}, "arg": "choices"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -1.0954971313476562, -1.1444091796875e-05, -0.011191368103027344, -2.09808349609375e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.0007354593253694475, -7.390969585685525e-06, -0.0004825592041015625, -4.57763671875e-05, -7.62939453125e-05, -0.10094420611858368, -0.0014705657958984375, -0.7519598007202148, -0.0049152374267578125, 0.0, -9.5367431640625e-06, -0.0025502429343760014, -2.0384708477649838e-05, -0.0001087188720703125, -0.0009765625, -7.05718994140625e-05, -0.16435527801513672, -0.0001544952392578125, -0.000152587890625, -0.00042877841042354703, -4.5656201109522954e-05, -3.814697265625e-06, 0.0, -5.0306221965001896e-05, -0.04685026407241821, -1.9073486328125e-06, -4.57763671875e-05, -0.3742103576660156, -0.0023345947265625, -0.01070404052734375, -0.0047991275787353516, -6.318072337307967e-06, -1.52587890625e-05, -7.2479248046875e-05, -0.0006622075452469289, -0.0012414453085511923, 0.0, -5.7220458984375e-06, -0.12774085998535156, -0.0019741058349609375, -0.00093841552734375, -5.7220458984375e-06, -0.006581352092325687, -8.273124694824219e-05, 0.0, -9.5367431640625e-06, -0.01647663116455078, -0.0002651214599609375, -0.03504300117492676, -8.106212590064388e-06, -0.00077056884765625, -0.0006656646728515625, -0.0001010894775390625, -0.17080865800380707, -0.3233926296234131, -0.3676481246948242, -0.016828536987304688, -1.1444091796875e-05, -7.62939453125e-06, -0.8354371786117554, -5.006785613659304e-06, -7.62939453125e-06, -0.005709648132324219, -9.72747802734375e-05, -0.13913536071777344, -1.3245763778686523, -0.4360532760620117, -0.011671066284179688, -0.000164031982421875, -0.008165506646037102, -1.3470649719238281e-05, 0.0, -3.24249267578125e-05, -0.0006561279296875, -1.0251987987430766e-05, -1.33514404296875e-05, -0.0001373291015625, 0.0, -1.71661376953125e-05, -0.020318984985351562, -4.38690185546875e-05, -3.3020423870766535e-05, -1.0609570381348021e-05, -8.35879473015666e-06, -3.576278118089249e-07], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(3))]), SelfSelector()),\n            Choice(Attack(), Give([]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "choices", "<EOS>", 33, 168, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 206, 71, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 71, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "2", "<EOS>"]}, {"score": -6.727312961982413, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Attack<UNK>"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}, "arg": "choices"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -1.0954971313476562, -1.1444091796875e-05, -0.011191368103027344, -2.09808349609375e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.0007354593253694475, -7.390969585685525e-06, -0.0004825592041015625, -4.57763671875e-05, -7.62939453125e-05, -0.10094420611858368, -0.0014705657958984375, -0.7519598007202148, -0.0049152374267578125, 0.0, -9.5367431640625e-06, -0.0025502429343760014, -2.0384708477649838e-05, -0.0001087188720703125, -0.0009765625, -7.05718994140625e-05, -0.16435527801513672, -0.0001544952392578125, -0.000152587890625, -0.00042877841042354703, -4.5656201109522954e-05, -3.814697265625e-06, 0.0, -5.0306221965001896e-05, -0.04685026407241821, -1.9073486328125e-06, -4.57763671875e-05, -0.3742103576660156, -0.0023345947265625, -0.01070404052734375, -0.0047991275787353516, -6.318072337307967e-06, -1.52587890625e-05, -7.2479248046875e-05, -0.0006622075452469289, -0.0012414453085511923, 0.0, -5.7220458984375e-06, -0.12774085998535156, -0.0019741058349609375, -0.00093841552734375, -5.7220458984375e-06, -0.006581352092325687, -8.273124694824219e-05, 0.0, -9.5367431640625e-06, -0.01647663116455078, -0.0002651214599609375, -0.03504300117492676, -8.106212590064388e-06, -0.00077056884765625, -0.0006656646728515625, -0.0001010894775390625, -0.17080865800380707, -1.2973058223724365, -0.004711963701993227, -0.14013099670410156, -0.10921573638916016, -2.6702880859375e-05, -5.7220458984375e-06, -0.7137293815612793, -1.5258699932019226e-05, -3.814697265625e-06, -0.004263877868652344, -6.67572021484375e-05, -0.09244251251220703, -0.41121959686279297, -0.0002689361572265625, -0.0013367105275392532, -9.179073458653875e-06, -1.9073486328125e-06, 0.0, -0.0001311299274675548, -0.07897390425205231, -3.933906555175781e-06, -8.96453857421875e-05, -0.23284530639648438, -0.058074951171875, -0.055545806884765625, -0.01576828956604004, -1.0728830375228426e-06, -1.1444091796875e-05, -8.0108642578125e-05, -0.0009107589721679688, -0.0019860262982547283, 0.0, -2.09808349609375e-05, -0.18906211853027344, -0.3470420837402344, -5.7220458984375e-06, -0.006796147674322128, -6.186962127685547e-05, 0.0, -3.814697265625e-06, -0.000133514404296875, -1.8596643712953664e-05, -1.9073486328125e-06, -0.00034928321838378906, 0.0, -1.52587890625e-05, -0.0031070709228515625, -1.1444091796875e-05, -0.0007339401636272669, -3.8146954466355965e-06, -4.8057991079986095e-05, -2.0265579223632812e-06], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(3))]), SelfSelector()),\n            Choice(Attack<UNK>(), Give([Buff(ChangeAttack(1)), Buff(\n            ChangeHealth(3))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "choices", "<EOS>", 33, 168, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Attack", "<UNK>", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 206, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 63, 171, "Self", "Selector", "<EOS>", 205, 71, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "2", "<EOS>"]}, {"score": -6.883385419499852, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template36_expr_seq"}], "hole0": "Choice"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}, "arg": "choices"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -1.0954971313476562, -1.1444091796875e-05, -0.011191368103027344, -2.09808349609375e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.0007354593253694475, -7.390969585685525e-06, -0.0004825592041015625, -4.57763671875e-05, -7.62939453125e-05, -0.10094420611858368, -0.0014705657958984375, -0.7519598007202148, -0.0049152374267578125, 0.0, -9.5367431640625e-06, -0.0025502429343760014, -2.0384708477649838e-05, -0.0001087188720703125, -0.0009765625, -7.05718994140625e-05, -0.16435527801513672, -0.0001544952392578125, -0.000152587890625, -0.00042877841042354703, -4.5656201109522954e-05, -3.814697265625e-06, 0.0, -5.0306221965001896e-05, -0.04685026407241821, -1.9073486328125e-06, -4.57763671875e-05, -0.3742103576660156, -0.0023345947265625, -0.01070404052734375, -0.0047991275787353516, -6.318072337307967e-06, -1.52587890625e-05, -7.2479248046875e-05, -0.0006622075452469289, -0.0012414453085511923, 0.0, -5.7220458984375e-06, -0.12774085998535156, -0.0019741058349609375, -0.00093841552734375, -5.7220458984375e-06, -0.006581352092325687, -8.273124694824219e-05, 0.0, -9.5367431640625e-06, -0.01647663116455078, -0.0002651214599609375, -0.03504300117492676, -8.106212590064388e-06, -0.00077056884765625, -0.0006656646728515625, -0.0001010894775390625, -0.17080865800380707, -0.3233926296234131, -0.3676481246948242, -0.016828536987304688, -1.1444091796875e-05, -7.62939453125e-06, -0.8354371786117554, -5.006785613659304e-06, -7.62939453125e-06, -0.005709648132324219, -9.72747802734375e-05, -0.13913536071777344, -0.4110422134399414, -0.0002765655517578125, -0.0013236113591119647, -8.4638240878121e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001412626006640494, -0.08199822157621384, -3.933906555175781e-06, -7.82012939453125e-05, -0.17769145965576172, -0.08274650573730469, -0.04922676086425781, -0.017721056938171387, -1.0728830375228426e-06, -1.1444091796875e-05, -8.20159912109375e-05, -0.0008587837219238281, -0.002060174709185958, 0.0, -2.09808349609375e-05, -0.17897891998291016, -1.1971712112426758, -0.005806922912597656, -0.0032196044921875, -0.0013655424118041992, -1.9073486328125e-06, -0.006188631057739258, 0.0, 0.0, -0.016077041625976562, -5.7220458984375e-06, -0.00023874756880104542, -1.1801701475633308e-05, -2.2159423679113388e-05, -2.1457672119140625e-06], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(3))]), SelfSelector()),\n            Choice(Attack(), Give([Buff(ChangeAttack(1)), Buff(ChangeHealth\n            (3))]))])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "choices", "<EOS>", 33, 168, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 206, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 205, 71, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "2", "<EOS>"]}, {"score": -6.910567943419302, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -0.40935611724853516, -6.103515625e-05, -0.08049511909484863, -2.2411135432776064e-05, -0.00011479845124995336, -2.288818359375e-05, -0.00013827794464305043, -1.1920928244535389e-07, -0.000102996826171875, -0.022159576416015625, -4.00543212890625e-05, -2.741813204920618e-06, -8.344646857949556e-07, -1.2959237210452557e-05, -1.1920928244535389e-07, -2.587495803833008, 0.0, -0.010525703430175781, -1.52587890625e-05, -0.000179290771484375, -3.814697265625e-06, -0.0389786958694458, -2.1457672119140625e-06, -0.05601310729980469, -0.0003871917724609375, -0.045113563537597656, -0.005166253075003624, -0.00684714037925005, -1.71661376953125e-05, -1.9073486328125e-06, -0.7984532713890076, -0.32447350025177, -3.814697265625e-06, -7.62939453125e-06, -0.09263992309570312, -0.0019407272338867188, -1.0727176666259766, -7.43865966796875e-05, -1.9073486328125e-06, -0.0023175477981567383, -0.0003377199172973633, -1.9073486328125e-06, -0.08098888397216797, -1.9073486328125e-06, -1.9073486328125e-06, -0.10607647895812988, 0.0, -2.47955322265625e-05, 0.0, -1.1450344324111938, -0.00034618377685546875, -2.2649765014648438e-06], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, deathrattle=Deathrattle(Give(ChangeAttack(1)),\n            MinionSelector(picker=UserPicker())))\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>"]}, {"score": -7.071587175157099, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AnodizedRoboCub", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Anodized Robo Cub"}, {"_type": "Template33"}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}], "hole1": [{"_type": "Template25", "hole0": "Attack"}, {"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Choice"}, "arg": "choices"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -7.62939453125e-05, -0.0007844470092095435, -0.00908832810819149, -0.008136129006743431, -0.0006596058374270797, -2.3655593395233154e-07, -3.4570680327306036e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001125335693359375, -5.7220458984375e-06, -2.47955322265625e-05, -0.0001087188720703125, -1.1444091796875e-05, -0.0001430511474609375, -9.5367431640625e-06, -3.814697265625e-06, -0.00036507140612229705, -0.0001068102938006632, -0.00020563328871503472, -8.535382221452892e-05, -0.0002579689025878906, -0.00016236305236816406, -7.62939453125e-06, -0.000247955322265625, -3.814697265625e-06, -1.71661376953125e-05, -7.62939453125e-06, -2.4199485778808594e-05, 0.0, -0.0009877104312181473, 0.0, -2.86102294921875e-05, -0.00016021728515625, -1.0954971313476562, -1.1444091796875e-05, -0.011191368103027344, -2.09808349609375e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.0007354593253694475, -7.390969585685525e-06, -0.0004825592041015625, -4.57763671875e-05, -7.62939453125e-05, -0.10094420611858368, -0.0014705657958984375, -0.7519598007202148, -0.0049152374267578125, 0.0, -9.5367431640625e-06, -0.0025502429343760014, -2.0384708477649838e-05, -0.0001087188720703125, -0.0009765625, -7.05718994140625e-05, -0.16435527801513672, -0.0001544952392578125, -0.000152587890625, -0.00042877841042354703, -4.5656201109522954e-05, -3.814697265625e-06, 0.0, -5.0306221965001896e-05, -0.04685026407241821, -1.9073486328125e-06, -4.57763671875e-05, -1.4431734085083008, -0.03104400634765625, -0.0002956390380859375, -0.0024803876876831055, -1.1920922133867862e-06, -3.24249267578125e-05, -6.866455078125e-05, -0.00052642822265625, -0.0013612506445497274, 0.0, -7.62939453125e-06, -0.09870529174804688, -0.0015659332275390625, -0.0010128021240234375, -3.814697265625e-06, -0.005609497427940369, -8.26120376586914e-05, 0.0, -7.62939453125e-06, -0.015906333923339844, -0.0002765655517578125, -0.02721691131591797, -6.675708846159978e-06, -0.0007171630859375, -0.0006313323974609375, -9.72747802734375e-05, -0.17246006429195404, -0.2911125421524048, -0.4085569381713867, -0.015825271606445312, -1.33514404296875e-05, -7.62939453125e-06, -0.8539903163909912, -4.887576324108522e-06, -7.62939453125e-06, -0.006035804748535156, -9.5367431640625e-05, -0.1399545669555664, -0.40511035919189453, -0.000270843505859375, -0.0013201625552028418, -8.583032467868179e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00014328914403449744, -0.08160113543272018, -3.933906555175781e-06, -7.82012939453125e-05, -0.17635345458984375, -0.08218765258789062, -0.04929924011230469, -0.017782092094421387, -1.0728830375228426e-06, -1.1444091796875e-05, -8.20159912109375e-05, -0.0008589029312133789, -0.002063989406451583, 0.0, -2.09808349609375e-05, -0.17952346801757812, -0.33977794647216797, -5.7220458984375e-06, -0.006528152152895927, -6.568431854248047e-05, 0.0, -3.814697265625e-06, -0.000133514404296875, -1.8477434423402883e-05, -1.9073486328125e-06, -0.0003701448440551758, 0.0, -1.71661376953125e-05, -0.003017425537109375, -1.33514404296875e-05, -0.0007647922611795366, -3.6954863844584906e-06, -4.8540299758315086e-05, -2.0265579223632812e-06], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Attack(), Give([Buff(\n            ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector()),\n            Choice(Attack(), Give([Buff(ChangeAttack(1)), Buff(ChangeHealth\n            (3))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n", "choice_history": [77, 145, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 64, 212, 76, 195, "choices", "<EOS>", 33, 168, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Attack", "<EOS>", 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 206, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 63, 171, "Self", "Selector", "<EOS>", 205, 71, "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"score": -7.877946286831943, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "chosen_card", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -0.17888176441192627, 0.0, -1.1444091796875e-05, -0.00018310546875, -1.9073486328125e-06, -0.059024810791015625, 0.0, -0.2986869812011719, -0.018622754141688347, 0.0, -0.3348008394241333, -0.0011740922927856445, -0.0075435638427734375, -0.00011444091796875, -5.7220458984375e-05, -0.2631540298461914, -0.000110626220703125, -1.8864707946777344, -0.00052642822265625, -0.00025177001953125, 0.0, -0.05271339416503906, -0.2594733238220215, -1.1920928244535389e-07, -0.004695892333984375, -0.0013332366943359375, -0.003924369812011719, -0.0006046295166015625, -0.00035858154296875, -0.0024957656860351562, -0.0012884140014648438, -1.9073486328125e-06, -0.000194549560546875, -0.025107383728027344, -0.029476165771484375, -0.10409736633300781, -0.012241482734680176, -7.62939453125e-06, -0.012990951538085938, -1.9073486328125e-05, -0.0001583099365234375, -0.04014607146382332, -0.00016880035400390625, -0.000873565673828125, -7.62939453125e-06, -0.8489065170288086, 0.0, -0.4373464584350586, -0.00453948974609375, -0.0001735687255859375, -0.01523137092590332, 0.0], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.append(player.game.current_player)\n        player.hand[-1].player = player\n        player.trigger('card_drawn', chosen_card)\n        player.draw()\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "chosen_card", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -8.228004246388522, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "reduce_cost", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -0.17888176441192627, 0.0, -1.1444091796875e-05, -0.00018310546875, -1.9073486328125e-06, -0.059024810791015625, 0.0, -0.2986869812011719, -0.018622754141688347, 0.0, -0.3348008394241333, -0.0011740922927856445, -0.0075435638427734375, -0.00011444091796875, -5.7220458984375e-05, -0.2631540298461914, -0.000110626220703125, -1.8864707946777344, -0.00052642822265625, -0.00025177001953125, 0.0, -0.05271339416503906, -0.2594733238220215, -1.1920928244535389e-07, -0.004695892333984375, -0.0013332366943359375, -0.003924369812011719, -0.0006046295166015625, -0.00035858154296875, -0.0024957656860351562, -0.0012884140014648438, -1.9073486328125e-06, -0.000194549560546875, -0.025107383728027344, -0.029476165771484375, -0.10409736633300781, -0.012241482734680176, -7.62939453125e-06, -0.012990951538085938, -1.9073486328125e-05, -0.0001583099365234375, -0.04014607146382332, -0.00016880035400390625, -0.000873565673828125, -7.62939453125e-06, -1.4890828132629395, 0.0, -0.1597890853881836, -0.0006275177001953125, -0.001255035400390625, -0.005499005317687988, -1.9073486328125e-06], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.append(player.game.current_player)\n        player.hand[-1].player = player\n        player.trigger('card_drawn', reduce_cost)\n        player.draw()\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "reduce_cost", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -8.684922889477534, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "chosen_card", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -1.6675968170166016, -5.7220458984375e-06, -0.0030040740966796875, -0.05677981674671173, 0.0, -0.21001744270324707, -0.00011217576684430242, -0.012253133580088615, -1.1444091796875e-05, -0.000308990478515625, -0.0006198883056640625, -2.47955322265625e-05, 0.0, -0.0008383989334106445, 0.0, -0.009794235229492188, 0.0, -1.1444091796875e-05, -0.0002613067626953125, -1.9073486328125e-06, -0.08188152313232422, 0.0, -0.1423492431640625, -0.01728021912276745, 0.0, -0.3051034212112427, -0.0009120702743530273, -0.0059947967529296875, -0.0001277923583984375, -5.7220458984375e-05, -0.24860382080078125, -0.0001430511474609375, -1.7551307678222656, -0.0006847381591796875, -0.0002689361572265625, 0.0, -0.04527091979980469, -0.25233960151672363, -1.1920928244535389e-07, -0.00469207763671875, -0.0013599395751953125, -0.0039005279541015625, -0.000675201416015625, -0.000316619873046875, -0.0025501251220703125, -0.0013074874877929688, -1.9073486328125e-06, -0.00019073486328125, -0.01858234405517578, -0.03280353546142578, -0.1139678955078125, -0.012099385261535645, -7.62939453125e-06, -0.012722015380859375, -1.71661376953125e-05, -0.0001621246337890625, -0.039408404380083084, -0.00016880035400390625, -0.0008716583251953125, -7.62939453125e-06, -0.8502073287963867, 0.0, -0.4399080276489258, -0.00457763671875, -0.00017547607421875, -0.015299081802368164, 0.0], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.other_player.minions)\n        targets.append(player.game.current_player)\n        player.hand[-1].player = player\n        player.trigger('card_drawn', chosen_card)\n        player.draw()\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "chosen_card", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -8.778050334562508, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "chosen_card", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -1.8477603197097778, 0.0, -6.866455078125e-05, -4.9591064453125e-05, 0.0, -0.0017032623291015625, -0.0034248828887939453, 0.0, -0.46448612213134766, -0.1334390640258789, -0.043201446533203125, 0.0, -0.13069391250610352, 0.0, -0.004489898681640625, 0.0, -2.288818359375e-05, -0.0001316070556640625, -1.52587890625e-05, -0.21956443786621094, -1.9073486328125e-06, -0.0014553070068359375, -0.08419144153594971, 0.0, -0.10167121887207031, -0.0005415678024291992, -0.0014362335205078125, -0.0001621246337890625, -3.62396240234375e-05, -0.35723018646240234, -0.0003376007080078125, -1.225743293762207, -0.0002727508544921875, -0.00034332275390625, 0.0, -0.0052242279052734375, -0.06758177280426025, -1.1920928244535389e-07, -0.0074481964111328125, -0.00154876708984375, -0.0034589767456054688, -0.000461578369140625, -0.000255584716796875, -0.0029630661010742188, -0.0009393692016601562, -1.9073486328125e-06, -0.000179290771484375, -0.08295822143554688, -0.021417617797851562, -0.05808258056640625, -0.012497663497924805, -7.62939453125e-06, -0.013498306274414062, -1.71661376953125e-05, -0.0001621246337890625, -0.04034145548939705, -0.00016307830810546875, -0.0008945465087890625, -7.62939453125e-06, -0.8657112121582031, 0.0], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.extend(player.minions)\n        targets.append(player.game.current_player)\n        player.hand[-1].player = player\n        player.trigger('card_drawn', chosen_card)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "chosen_card", "<EOS>"]}, {"score": -8.79647555891141, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "mirror", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -0.17888176441192627, 0.0, -1.1444091796875e-05, -0.00018310546875, -1.9073486328125e-06, -0.059024810791015625, 0.0, -0.2986869812011719, -0.018622754141688347, 0.0, -0.3348008394241333, -0.0011740922927856445, -0.0075435638427734375, -0.00011444091796875, -5.7220458984375e-05, -0.2631540298461914, -0.000110626220703125, -1.8864707946777344, -0.00052642822265625, -0.00025177001953125, 0.0, -0.05271339416503906, -0.2594733238220215, -1.1920928244535389e-07, -0.004695892333984375, -0.0013332366943359375, -0.003924369812011719, -0.0006046295166015625, -0.00035858154296875, -0.0024957656860351562, -0.0012884140014648438, -1.9073486328125e-06, -0.000194549560546875, -0.025107383728027344, -0.029476165771484375, -0.10409736633300781, -0.012241482734680176, -7.62939453125e-06, -0.012990951538085938, -1.9073486328125e-05, -0.0001583099365234375, -0.04014607146382332, -0.00016880035400390625, -0.000873565673828125, -7.62939453125e-06, -2.1570072174072266, -1.9073486328125e-06, -0.053572654724121094, -0.0011157989501953125, -0.0025482177734375, -0.010480880737304688, 0.0], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.append(player.game.current_player)\n        player.hand[-1].player = player\n        player.trigger('card_drawn', mirror)\n        player.draw()\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "mirror", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -9.03013618350677, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "reduce_cost", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -1.6675968170166016, -5.7220458984375e-06, -0.0030040740966796875, -0.05677981674671173, 0.0, -0.21001744270324707, -0.00011217576684430242, -0.012253133580088615, -1.1444091796875e-05, -0.000308990478515625, -0.0006198883056640625, -2.47955322265625e-05, 0.0, -0.0008383989334106445, 0.0, -0.009794235229492188, 0.0, -1.1444091796875e-05, -0.0002613067626953125, -1.9073486328125e-06, -0.08188152313232422, 0.0, -0.1423492431640625, -0.01728021912276745, 0.0, -0.3051034212112427, -0.0009120702743530273, -0.0059947967529296875, -0.0001277923583984375, -5.7220458984375e-05, -0.24860382080078125, -0.0001430511474609375, -1.7551307678222656, -0.0006847381591796875, -0.0002689361572265625, 0.0, -0.04527091979980469, -0.25233960151672363, -1.1920928244535389e-07, -0.00469207763671875, -0.0013599395751953125, -0.0039005279541015625, -0.000675201416015625, -0.000316619873046875, -0.0025501251220703125, -0.0013074874877929688, -1.9073486328125e-06, -0.00019073486328125, -0.01858234405517578, -0.03280353546142578, -0.1139678955078125, -0.012099385261535645, -7.62939453125e-06, -0.012722015380859375, -1.71661376953125e-05, -0.0001621246337890625, -0.039408404380083084, -0.00016880035400390625, -0.0008716583251953125, -7.62939453125e-06, -1.4873604774475098, 0.0, -0.1606302261352539, -0.00063323974609375, -0.0012531280517578125, -0.005501866340637207, -1.9073486328125e-06], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.other_player.minions)\n        targets.append(player.game.current_player)\n        player.hand[-1].player = player\n        player.trigger('card_drawn', reduce_cost)\n        player.draw()\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "reduce_cost", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -9.311903525513564, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -1.8477603197097778, 0.0, -6.866455078125e-05, -4.9591064453125e-05, 0.0, -0.0017032623291015625, -0.0034248828887939453, 0.0, -0.46448612213134766, -0.1334390640258789, -0.043201446533203125, 0.0, -0.13069391250610352, 0.0, -0.004489898681640625, 0.0, -2.288818359375e-05, -0.0001316070556640625, -1.52587890625e-05, -0.21956443786621094, -1.9073486328125e-06, -0.0014553070068359375, -0.08419144153594971, 0.0, -0.10167121887207031, -0.0005415678024291992, -0.0014362335205078125, -0.0001621246337890625, -3.62396240234375e-05, -1.2300596237182617, 0.0, -0.6335159540176392, 0.0, -0.0014247894287109375, -1.9073486328125e-06, -0.047122955322265625, 0.0, -0.01913464069366455, 0.0, -0.0001125335693359375, -0.000240325927734375, -0.00412750244140625, -0.7091617584228516, -7.05718994140625e-05, -0.0012454986572265625, -0.14199791848659515, -1.9073486328125e-06, -0.009454007260501385, -1.9073486328125e-06, -0.012445449829101562, -0.000667572021484375, -0.0003452301025390625, 0.0, -0.010349273681640625, 0.0, -0.004486083984375, 0.0, -1.71661376953125e-05, -0.0002593994140625, -5.7220458984375e-06, -0.04028034210205078, 0.0, -0.11488151550292969, -0.022844430059194565, 0.0, -0.29791176319122314, -0.0014346837997436523], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.extend(player.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.opponent.minions)\n        targets.append(player.game.current_player)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>"]}, {"score": -9.38235369454786, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "reduce_cost", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -1.8477603197097778, 0.0, -6.866455078125e-05, -4.9591064453125e-05, 0.0, -0.0017032623291015625, -0.0034248828887939453, 0.0, -0.46448612213134766, -0.1334390640258789, -0.043201446533203125, 0.0, -0.13069391250610352, 0.0, -0.004489898681640625, 0.0, -2.288818359375e-05, -0.0001316070556640625, -1.52587890625e-05, -0.21956443786621094, -1.9073486328125e-06, -0.0014553070068359375, -0.08419144153594971, 0.0, -0.10167121887207031, -0.0005415678024291992, -0.0014362335205078125, -0.0001621246337890625, -3.62396240234375e-05, -0.35723018646240234, -0.0003376007080078125, -1.225743293762207, -0.0002727508544921875, -0.00034332275390625, 0.0, -0.0052242279052734375, -0.06758177280426025, -1.1920928244535389e-07, -0.0074481964111328125, -0.00154876708984375, -0.0034589767456054688, -0.000461578369140625, -0.000255584716796875, -0.0029630661010742188, -0.0009393692016601562, -1.9073486328125e-06, -0.000179290771484375, -0.08295822143554688, -0.021417617797851562, -0.05808258056640625, -0.012497663497924805, -7.62939453125e-06, -0.013498306274414062, -1.71661376953125e-05, -0.0001621246337890625, -0.04034145548939705, -0.00016307830810546875, -0.0008945465087890625, -7.62939453125e-06, -1.4700145721435547, 0.0], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.extend(player.minions)\n        targets.append(player.game.current_player)\n        player.hand[-1].player = player\n        player.trigger('card_drawn', reduce_cost)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "reduce_cost", "<EOS>"]}, {"score": -10.144067761857961, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -0.17888176441192627, 0.0, -1.1444091796875e-05, -0.00018310546875, -1.9073486328125e-06, -0.059024810791015625, 0.0, -0.2986869812011719, -0.018622754141688347, 0.0, -0.3348008394241333, -0.0011740922927856445, -0.0075435638427734375, -0.00011444091796875, -5.7220458984375e-05, -1.4856863021850586, 0.0, -0.6576238870620728, 0.0, -0.001758575439453125, -1.9073486328125e-06, -0.05374717712402344, 0.0, -0.02099013328552246, 0.0, -8.96453857421875e-05, -0.0003757476806640625, -0.0042209625244140625, -0.7785520553588867, -6.866455078125e-05, -0.00102996826171875, -0.14113971590995789, -1.9073486328125e-06, -0.009651417843997478, -1.9073486328125e-06, -0.012371063232421875, -0.000682830810546875, -0.0002956390380859375, 0.0, -0.009645462036132812, 0.0, -0.004633903503417969, 0.0, -1.71661376953125e-05, -0.0002651214599609375, -5.7220458984375e-06, -0.04068565368652344, 0.0, -0.12613868713378906, -0.022736545652151108, 0.0, -0.3094521760940552, -0.0014286041259765625, -0.009053230285644531, -7.62939453125e-05, -5.7220458984375e-05, -1.0751361846923828, 0.0, -0.6205054521560669, 0.0, -0.0026884078979492188, -1.9073486328125e-06, -0.0667572021484375, 0.0, -0.021712064743041992, 0.0, -0.00012969970703125, -0.0003490447998046875, -0.0042266845703125, -0.6546564102172852, -6.4849853515625e-05, -0.0013217926025390625, -0.12540850043296814, -1.9073486328125e-06, -0.009763832204043865, -1.9073486328125e-06], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.opponent.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.opponent.minions)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>"]}, {"score": -10.291427767272687, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}}, "targets": [{"attr": "power", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -0.17888176441192627, 0.0, -1.1444091796875e-05, -0.00018310546875, -1.9073486328125e-06, -0.059024810791015625, 0.0, -0.2986869812011719, -0.018622754141688347, 0.0, -0.3348008394241333, -0.0011740922927856445, -0.0075435638427734375, -0.00011444091796875, -5.7220458984375e-05, -1.4856863021850586, 0.0, -0.6576238870620728, 0.0, -0.001758575439453125, -1.9073486328125e-06, -0.05374717712402344, 0.0, -0.02099013328552246, 0.0, -8.96453857421875e-05, -0.0003757476806640625, -0.0042209625244140625, -0.7785520553588867, -6.866455078125e-05, -0.00102996826171875, -0.14113971590995789, -1.9073486328125e-06, -0.009651417843997478, -1.9073486328125e-06, -0.012371063232421875, -0.000682830810546875, -0.0002956390380859375, 0.0, -0.009645462036132812, 0.0, -0.004633903503417969, 0.0, -1.71661376953125e-05, -0.0002651214599609375, -5.7220458984375e-06, -0.04068565368652344, 0.0, -0.12613868713378906, -0.022736545652151108, 0.0, -0.3094521760940552, -0.0014286041259765625, -0.009053230285644531, -7.62939453125e-05, -5.7220458984375e-05, -0.43045520782470703, -7.05718994140625e-05, -1.3877029418945312, 0.0, -0.08575820922851562, -0.031397029757499695, 0.0, -0.16669654846191406, -1.9073486328125e-06, -0.1304492950439453, -0.024730682373046875, -4.57763671875e-05, 0.0, -0.030904769897460938, 0.0, -0.0149078369140625, -1.33514404296875e-05, -0.036029815673828125, 0.0, -0.36832451820373535, -1.5497195136049413e-06, -0.022593814879655838, -2.0265579223632812e-06], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.opponent.minions)\n        targets.append(player.game.current_player)\n        player.hero.power = hearthbreaker.targeting.find_minion_spell_target()\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 17, 104, 42, "hero", "<EOS>", "power", "<EOS>", 20, 109, 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>"]}, {"score": -10.378401639309672, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -0.17888176441192627, 0.0, -1.1444091796875e-05, -0.00018310546875, -1.9073486328125e-06, -0.059024810791015625, 0.0, -0.2986869812011719, -0.018622754141688347, 0.0, -0.3348008394241333, -0.0011740922927856445, -0.0075435638427734375, -0.00011444091796875, -5.7220458984375e-05, -1.4856863021850586, 0.0, -0.6576238870620728, 0.0, -0.001758575439453125, -1.9073486328125e-06, -0.05374717712402344, 0.0, -0.02099013328552246, 0.0, -8.96453857421875e-05, -0.0003757476806640625, -0.0042209625244140625, -0.7785520553588867, -6.866455078125e-05, -0.00102996826171875, -0.14113971590995789, -1.9073486328125e-06, -0.009651417843997478, -1.9073486328125e-06, -0.012371063232421875, -0.000682830810546875, -0.0002956390380859375, 0.0, -0.009645462036132812, 0.0, -0.004633903503417969, 0.0, -1.71661376953125e-05, -0.0002651214599609375, -5.7220458984375e-06, -0.04068565368652344, 0.0, -0.12613868713378906, -0.022736545652151108, 0.0, -0.3094521760940552, -0.0014286041259765625, -0.009053230285644531, -7.62939453125e-05, -5.7220458984375e-05, -1.0751361846923828, 0.0, -0.6205054521560669, 0.0, -0.0026884078979492188, -1.9073486328125e-06, -0.0667572021484375, 0.0, -0.021712064743041992, 0.0, -0.00012969970703125, -0.0003490447998046875, -0.0042266845703125, -0.73406982421875, -0.2914831340312958, -1.1920928244535389e-07], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.opponent.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.hand)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "hand", "<EOS>"]}, {"score": -10.379544481072784, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}}, "targets": [{"attr": "power", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}]}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "chosen_card", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -0.17888176441192627, 0.0, -1.1444091796875e-05, -0.00018310546875, -1.9073486328125e-06, -0.059024810791015625, 0.0, -0.2986869812011719, -0.018622754141688347, 0.0, -0.3348008394241333, -0.0011740922927856445, -0.0075435638427734375, -0.00011444091796875, -5.7220458984375e-05, -0.2631540298461914, -0.000110626220703125, -1.4191865921020508, 0.0, -0.05106163024902344, -0.05074022710323334, 0.0, -0.13323652744293213, -1.9073486328125e-06, -0.11497783660888672, -0.029119491577148438, -5.14984130859375e-05, 0.0, -0.028329849243164062, 0.0, -0.034008026123046875, -1.33514404296875e-05, -0.034232139587402344, 0.0, -0.39542317390441895, -1.1920922133867862e-06, -0.023494109511375427, -2.0265579223632812e-06, -0.04739189147949219, -1.9073486328125e-05, -9.5367431640625e-05, -1.260080337524414, -0.0020656585693359375, -1.2584362030029297, -0.0002899169921875, -1.71661376953125e-05, 0.0, -0.01546478271484375, -0.07619808614253998, -1.1920928244535389e-07, -0.0078067779541015625, -0.000736236572265625, -0.004504203796386719, -0.0007801055908203125, -0.0003204345703125, -0.0028076171875, -0.0014810562133789062, -7.62939453125e-06, -0.0001773834228515625, -0.011420249938964844, -0.10065937042236328, -0.21325969696044922, -0.009551048278808594, -5.7220458984375e-06, -0.017347335815429688, -1.33514404296875e-05, -0.0001544952392578125, -0.037026721984148026, -0.00013446807861328125, -0.0008831024169921875, -7.62939453125e-06, -0.8644003868103027, 0.0], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.append(player.game.current_player)\n        player.hero.power = hearthbreaker.targeting.find_minion_spell_target()\n        player.hand[-1].player = player\n        player.trigger('card_drawn', chosen_card)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 17, 104, 42, "hero", "<EOS>", "power", "<EOS>", 20, 109, 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "chosen_card", "<EOS>"]}, {"score": -10.510414291382851, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -1.8477603197097778, 0.0, -6.866455078125e-05, -4.9591064453125e-05, 0.0, -0.0017032623291015625, -0.0034248828887939453, 0.0, -0.46448612213134766, -0.1334390640258789, -0.043201446533203125, 0.0, -0.13069391250610352, 0.0, -0.004489898681640625, 0.0, -2.288818359375e-05, -0.0001316070556640625, -1.52587890625e-05, -0.21956443786621094, -1.9073486328125e-06, -0.0014553070068359375, -0.08419144153594971, 0.0, -0.10167121887207031, -0.0005415678024291992, -0.0014362335205078125, -0.0001621246337890625, -3.62396240234375e-05, -1.2300596237182617, 0.0, -0.6335159540176392, 0.0, -0.0014247894287109375, -1.9073486328125e-06, -0.047122955322265625, 0.0, -0.01913464069366455, 0.0, -0.0001125335693359375, -0.000240325927734375, -0.00412750244140625, -0.7091617584228516, -7.05718994140625e-05, -0.0012454986572265625, -0.14199791848659515, -1.9073486328125e-06, -0.009454007260501385, -1.9073486328125e-06, -0.012445449829101562, -0.000667572021484375, -0.0003452301025390625, 0.0, -0.010349273681640625, 0.0, -0.004486083984375, 0.0, -1.71661376953125e-05, -0.0002593994140625, -5.7220458984375e-06, -0.04028034210205078, 0.0, -0.11488151550292969, -0.022844430059194565, 0.0, -1.4976311922073364, -0.00022602065291721374], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.extend(player.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.opponent.minions)\n        targets.append(player.game.other_player)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>"]}, {"score": -10.991311296258331, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}}, "targets": [{"attr": "power", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}]}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Subscript", "value": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}, "slice": {"_type": "Index", "value": {"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}}}}]}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "reduce_cost", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -0.2708425521850586, -0.38124728202819824, -0.000362396240234375, -0.0006387201719917357, -1.9073486328125e-06, -0.001285552978515625, -0.000835418701171875, -6.866455078125e-05, 0.0, -0.0033189058303833008, 0.0, -0.17888176441192627, 0.0, -1.1444091796875e-05, -0.00018310546875, -1.9073486328125e-06, -0.059024810791015625, 0.0, -0.2986869812011719, -0.018622754141688347, 0.0, -0.3348008394241333, -0.0011740922927856445, -0.0075435638427734375, -0.00011444091796875, -5.7220458984375e-05, -0.2631540298461914, -0.000110626220703125, -1.4191865921020508, 0.0, -0.05106163024902344, -0.05074022710323334, 0.0, -0.13323652744293213, -1.9073486328125e-06, -0.11497783660888672, -0.029119491577148438, -5.14984130859375e-05, 0.0, -0.028329849243164062, 0.0, -0.034008026123046875, -1.33514404296875e-05, -0.034232139587402344, 0.0, -0.39542317390441895, -1.1920922133867862e-06, -0.023494109511375427, -2.0265579223632812e-06, -0.04739189147949219, -1.9073486328125e-05, -9.5367431640625e-05, -1.260080337524414, -0.0020656585693359375, -1.2584362030029297, -0.0002899169921875, -1.71661376953125e-05, 0.0, -0.01546478271484375, -0.07619808614253998, -1.1920928244535389e-07, -0.0078067779541015625, -0.000736236572265625, -0.004504203796386719, -0.0007801055908203125, -0.0003204345703125, -0.0028076171875, -0.0014810562133789062, -7.62939453125e-06, -0.0001773834228515625, -0.011420249938964844, -0.10065937042236328, -0.21325969696044922, -0.009551048278808594, -5.7220458984375e-06, -0.017347335815429688, -1.33514404296875e-05, -0.0001544952392578125, -0.037026721984148026, -0.00013446807861328125, -0.0008831024169921875, -7.62939453125e-06, -1.4761652946472168, -1.9073486328125e-06], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.opponent.minions)\n        targets.append(player.game.current_player)\n        player.hero.power = hearthbreaker.targeting.find_minion_spell_target()\n        player.hand[-1].player = player\n        player.trigger('card_drawn', reduce_cost)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 45, 104, 17, 104, 42, "hero", "<EOS>", "power", "<EOS>", 20, 109, 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 82, 103, 205, 45, 104, 28, 144, 17, 104, 42, "hand", "<EOS>", 80, 125, 44, 190, 100, 38, "player", "<EOS>", 42, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "reduce_cost", "<EOS>"]}, {"score": -11.023376031449963, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BurrowingMine", "hole2": [{"_type": "Template6", "hole3": "FREE", "hole2": "PALADIN", "hole1": 0, "hole0": "Burrowing Mine"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "targets": [{"id": "targets", "_type": "Name"}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.049368858337402344, -4.649054244509898e-05, -0.013105589896440506, -0.014191428199410439, -1.6687845345586538e-06, -5.364412118069595e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -0.0026092529296875, -1.9073486328125e-05, -1.3232143828645349e-05, -7.951099541969597e-05, -1.668929871811997e-05, -0.0010235309600830078, -1.1920928244535389e-07, -5.984149538562633e-05, -0.3063220977783203, 0.0, -0.3091784715652466, 0.0, -0.000152587890625, 0.0, -2.8848335205111653e-05, 0.0, -5.7220458984375e-06, -0.0002307891845703125, -1.9073486328125e-06, -6.330013275146484e-05, -5.9604644775390625e-06, -1.4089288711547852, -0.00098419189453125, -0.0057048797607421875, -4.1961669921875e-05, -6.866455078125e-05, -0.0033998489379882812, -5.7220458984375e-06, -0.0806783065199852, -4.0531076592742465e-06, -0.017075538635253906, -5.340576171875e-05, -0.0008955001831054688, -3.814697265625e-06, -0.0073947906494140625, -1.9073486328125e-06, -0.005525708198547363, 0.0, -0.0835418701171875, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.000270843505859375, 0.0, -1.6675968170166016, -5.7220458984375e-06, -0.0030040740966796875, -0.05677981674671173, 0.0, -0.21001744270324707, -0.00011217576684430242, -0.012253133580088615, -1.1444091796875e-05, -0.000308990478515625, -0.0006198883056640625, -2.47955322265625e-05, 0.0, -0.0008383989334106445, 0.0, -0.009794235229492188, 0.0, -1.1444091796875e-05, -0.0002613067626953125, -1.9073486328125e-06, -0.08188152313232422, 0.0, -0.1423492431640625, -0.01728021912276745, 0.0, -0.3051034212112427, -0.0009120702743530273, -0.0059947967529296875, -0.0001277923583984375, -5.7220458984375e-05, -1.5340919494628906, 0.0, -0.6459623575210571, 0.0, -0.0016393661499023438, -1.9073486328125e-06, -0.05578804016113281, 0.0, -0.024101972579956055, 0.0, -0.0001163482666015625, -0.000347137451171875, -0.0035858154296875, -0.6558237075805664, -6.29425048828125e-05, -0.00112152099609375, -0.12675759196281433, -1.9073486328125e-06, -0.00899552833288908, -1.9073486328125e-06, -0.012025833129882812, -0.0006656646728515625, -0.000270843505859375, 0.0, -0.010519027709960938, 0.0, -0.0046596527099609375, 0.0, -1.71661376953125e-05, -0.00025177001953125, -5.7220458984375e-06, -0.042583465576171875, 0.0, -0.12741661071777344, -0.022771235555410385, 0.0, -0.3076134920120239, -0.0014362335205078125, -0.008912086486816406, -7.82012939453125e-05, -5.7220458984375e-05, -1.1033544540405273, 0.0, -0.6268144845962524, 0.0, -0.0026702880859375, -1.9073486328125e-06, -0.06846427917480469, 0.0, -0.021734952926635742, 0.0, -0.0001316070556640625, -0.000347137451171875, -0.004177093505859375, -0.6368579864501953, -6.4849853515625e-05, -0.00131988525390625, -0.12370344996452332, -1.9073486328125e-06, -0.009545440785586834, -1.9073486328125e-06], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.other_player.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.opponent.minions)\n        targets.append(player.game.current_player)\n        targets = len(player.opponent.minions)\n", "choice_history": [77, 147, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "PALADIN", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 17, 104, 42, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>"]}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"score": -0.5931596754623456, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template37"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -0.0057621002197265625, -1.9073486328125e-05, -3.4332275390625e-05, -1.9192693798686378e-05, 0.0, -0.0004673004150390625, -4.76837158203125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.0019559860229492188, -0.0003871917724609375, -1.33514404296875e-05, -0.000118255615234375, -0.0002269744873046875, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0003186464309692383, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -7.62939453125e-06, -0.0001392364501953125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.5566549301147461, -0.000186920166015625, -1.9073486328125e-06, -0.0001291036605834961, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>"]}, {"score": -0.923701225876755, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Num", "n": 6}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -0.0057621002197265625, -1.9073486328125e-05, -3.4332275390625e-05, -1.9192693798686378e-05, 0.0, -0.0004673004150390625, -4.76837158203125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.0019559860229492188, -0.0003871917724609375, -1.33514404296875e-05, -0.000118255615234375, -0.0002269744873046875, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0003186464309692383, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -7.62939453125e-06, -0.0001392364501953125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.8853607177734375, -6.103515625e-05, -0.0015355937648564577, -7.152555099310121e-07, -0.0001888275146484375, -1.9073486328125e-06, -0.0003637075424194336, -1.9073486328125e-06], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 55, 138, "6", "<EOS>", 53, 133, "self", "<EOS>"]}, {"score": -4.480783343179326, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -0.0057621002197265625, -1.9073486328125e-05, -3.4332275390625e-05, -1.9192693798686378e-05, 0.0, -0.0004673004150390625, -4.76837158203125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.0019559860229492188, -0.0003871917724609375, -1.33514404296875e-05, -0.000118255615234375, -0.0002269744873046875, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0003186464309692383, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -7.62939453125e-06, -0.0001392364501953125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -4.443988800048828, -0.000568389892578125, -1.9073486328125e-06, -3.743171691894531e-05, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -4.8990552424025395, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template37"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -4.280681610107422, -2.288818359375e-05, -0.0002079010009765625, -0.04500389099121094, 0.0, -0.0021953582763671875, -7.62939453125e-06, -1.9073486328125e-06, -0.00011444091796875, 0.0, -6.67572021484375e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -5.14984130859375e-05, 0.0, -0.0004425048828125, 0.0, -0.005364894866943359, -9.5367431640625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.002269744873046875, 0.0, -0.005863189697265625, -2.09808349609375e-05, -2.6702880859375e-05, -1.8835065930034034e-05, 0.0, -0.0004329681396484375, -5.14984130859375e-05, -7.62939453125e-06, -1.33514404296875e-05, -8.344646857949556e-07, -0.0019683837890625, -0.00041961669921875, -1.1444091796875e-05, -0.0001125335693359375, -0.00022125244140625, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.00031375885009765625, 0.0, -1.7285345165873878e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -5.7220458984375e-06, -0.0001392364501953125, -2.288818359375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.5485296249389648, -0.000186920166015625, -1.9073486328125e-06, -0.0001271963119506836, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>"]}, {"score": -5.249557590325196, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Num", "n": 6}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -4.280681610107422, -2.288818359375e-05, -0.0002079010009765625, -0.04500389099121094, 0.0, -0.0021953582763671875, -7.62939453125e-06, -1.9073486328125e-06, -0.00011444091796875, 0.0, -6.67572021484375e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -5.14984130859375e-05, 0.0, -0.0004425048828125, 0.0, -0.005364894866943359, -9.5367431640625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.002269744873046875, 0.0, -0.005863189697265625, -2.09808349609375e-05, -2.6702880859375e-05, -1.8835065930034034e-05, 0.0, -0.0004329681396484375, -5.14984130859375e-05, -7.62939453125e-06, -1.33514404296875e-05, -8.344646857949556e-07, -0.0019683837890625, -0.00041961669921875, -1.1444091796875e-05, -0.0001125335693359375, -0.00022125244140625, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.00031375885009765625, 0.0, -1.7285345165873878e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -5.7220458984375e-06, -0.0001392364501953125, -2.288818359375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.8972244262695312, -5.91278076171875e-05, -0.0015111922984942794, -7.152555099310121e-07, -0.00019073486328125, -1.9073486328125e-06, -0.0003579854965209961, -1.9073486328125e-06], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 55, 138, "6", "<EOS>", 53, 133, "self", "<EOS>"]}, {"score": -6.124514818045725, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template37"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -5.5394134521484375, -5.924701690673828e-05, -0.000118255615234375, -1.2516963579400908e-05, 0.0, -0.0003032684326171875, -6.29425048828125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.00225067138671875, -0.0003147125244140625, -1.33514404296875e-05, -0.0001068115234375, -0.0002002716064453125, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.00032341480255126953, 0.0, -1.7285345165873878e-05, -1.9073486328125e-06, -0.0002257823944091797, 0.0, -5.7220458984375e-06, -0.000141143798828125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.5542106628417969, -0.00018310546875, -1.9073486328125e-06, -0.0001271963119506836, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 37, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>"]}, {"score": -6.236971497399907, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template37"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -5.642868518829346, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -0.0027179718017578125, 0.0, -0.00624847412109375, -1.9073486328125e-05, -5.14984130859375e-05, -2.2649763195659034e-05, 0.0, -0.0005035400390625, -4.57763671875e-05, -7.62939453125e-06, -1.52587890625e-05, -7.152555099310121e-07, -0.001987457275390625, -0.00037384033203125, -1.33514404296875e-05, -0.000125885009765625, -0.000179290771484375, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -0.0003281831741333008, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002257823944091797, 0.0, -5.7220458984375e-06, -0.0001354217529296875, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.5612878799438477, -0.0001888275146484375, -1.9073486328125e-06, -0.00013005733489990234, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>"]}, {"score": -6.461148209025339, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Num", "n": 6}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -5.5394134521484375, -5.924701690673828e-05, -0.000118255615234375, -1.2516963579400908e-05, 0.0, -0.0003032684326171875, -6.29425048828125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.00225067138671875, -0.0003147125244140625, -1.33514404296875e-05, -0.0001068115234375, -0.0002002716064453125, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.00032341480255126953, 0.0, -1.7285345165873878e-05, -1.9073486328125e-06, -0.0002257823944091797, 0.0, -5.7220458984375e-06, -0.000141143798828125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.889007568359375, -5.91278076171875e-05, -0.0015305944252759218, -7.152555099310121e-07, -0.0001888275146484375, -1.9073486328125e-06, -0.0003656148910522461, -1.9073486328125e-06], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 37, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 55, 138, "6", "<EOS>", 53, 133, "self", "<EOS>"]}, {"score": -6.556137127200088, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Num", "n": 6}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -5.642868518829346, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -0.0027179718017578125, 0.0, -0.00624847412109375, -1.9073486328125e-05, -5.14984130859375e-05, -2.2649763195659034e-05, 0.0, -0.0005035400390625, -4.57763671875e-05, -7.62939453125e-06, -1.52587890625e-05, -7.152555099310121e-07, -0.001987457275390625, -0.00037384033203125, -1.33514404296875e-05, -0.000125885009765625, -0.000179290771484375, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -0.0003281831741333008, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002257823944091797, 0.0, -5.7220458984375e-06, -0.0001354217529296875, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.8786067962646484, -6.29425048828125e-05, -0.0015465444885194302, -7.152555099310121e-07, -0.0001888275146484375, -1.9073486328125e-06, -0.00036466121673583984, -1.9073486328125e-06], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 55, 138, "6", "<EOS>", 53, 133, "self", "<EOS>"]}, {"score": -6.899550557000737, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template35"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -0.0057621002197265625, -1.9073486328125e-05, -3.4332275390625e-05, -1.9192693798686378e-05, 0.0, -0.0004673004150390625, -4.76837158203125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.0019559860229492188, -0.0003871917724609375, -1.33514404296875e-05, -0.000118255615234375, -0.0002269744873046875, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0003186464309692383, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -7.62939453125e-06, -0.0001392364501953125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -6.863170623779297, -8.0108642578125e-05, -1.9073486328125e-06, -0.00011110305786132812, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 70, 53, 133, "self", "<EOS>"]}, {"score": -7.421864986281832, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Num", "n": 0}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -0.0057621002197265625, -1.9073486328125e-05, -3.4332275390625e-05, -1.9192693798686378e-05, 0.0, -0.0004673004150390625, -4.76837158203125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.0019559860229492188, -0.0003871917724609375, -1.33514404296875e-05, -0.000118255615234375, -0.0002269744873046875, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0003186464309692383, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -7.62939453125e-06, -0.0001392364501953125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -0.8853607177734375, -6.103515625e-05, -6.499760150909424, -2.0265558760002023e-06, -0.0001430511474609375, -1.9073486328125e-06, -0.00034737586975097656, -1.9073486328125e-06], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 55, 138, "0", "<EOS>", 53, 133, "self", "<EOS>"]}, {"score": -7.576438903670976, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template37"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -6.983561038970947, 0.0, -0.0004291534423828125, -7.62939453125e-06, -0.003467559814453125, 0.0, -0.00579833984375, -2.682209014892578e-05, -2.6702880859375e-05, -2.0027157006552443e-05, 0.0, -0.0005435943603515625, -4.38690185546875e-05, -7.62939453125e-06, -1.52587890625e-05, -7.152555099310121e-07, -0.0019330978393554688, -0.0003337860107421875, -1.52587890625e-05, -0.00012969970703125, -0.000247955322265625, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -0.00031769275665283203, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002257823944091797, 0.0, -5.7220458984375e-06, -0.0001392364501953125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.000156402587890625, -0.5593757629394531, -0.0001850128173828125, -1.9073486328125e-06, -0.0001291036605834961, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.<UNK>, overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "<UNK>", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>"]}, {"score": -7.920422695441346, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -0.0057621002197265625, -1.9073486328125e-05, -3.4332275390625e-05, -1.9192693798686378e-05, 0.0, -0.0004673004150390625, -4.76837158203125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.0019559860229492188, -0.0003871917724609375, -1.33514404296875e-05, -0.000118255615234375, -0.0002269744873046875, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0003186464309692383, 0.0, -1.7166135876323096e-05, -1.9073486328125e-06, -0.0002295970916748047, 0.0, -7.62939453125e-06, -0.0001392364501953125, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -4.57763671875e-05, -8.153904491337016e-05, -1.9073486328125e-06, -0.0001544952392578125, -7.790544509887695, -0.003795623779296875, -0.087288998067379, -1.9073486328125e-06, -0.0001392364501953125, 0.0, -0.0024656057357788086, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage('Crackle'), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 56, 142, "Crackle", "<EOS>", 53, 133, "self", "<EOS>"]}, {"score": -7.941581129885606, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template37"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -0.0057621002197265625, -1.9073486328125e-05, -3.4332275390625e-05, -1.9192693798686378e-05, 0.0, -0.0004673004150390625, -4.76837158203125e-05, -7.62939453125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -7.134532928466797, -0.00379180908203125, -0.05129241943359375, -8.0108642578125e-05, -0.0003261566162109375, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -0.0009431838989257812, 0.0, -1.454353241570061e-05, -1.9073486328125e-06, -0.0002142190933227539, 0.0, -1.52587890625e-05, -0.0002593994140625, -2.6702880859375e-05, -1.52587890625e-05, 0.0, -5.53131103515625e-05, -8.749950211495161e-05, -3.814697265625e-06, -0.0001697540283203125, -0.5838136672973633, -0.0002288818359375, -1.9073486328125e-06, -0.00012433528900146484, 0.0, -0.0010471343994140625, -0.09333229064941406, -4.00543212890625e-05, -0.024581074714660645, 0.0, -0.002788543701171875, -0.0006771087646484375, -4.00543212890625e-05, -0.001772165298461914, 0.0, -0.0043163299560546875, -0.0027618408203125, -4.57763671875e-05, -0.0017325878143310547, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -7.946142554147002, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Crackle", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Template33"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template37"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.33514404296875e-05, -0.0012722015380859375, -2.9802276912960224e-06, -6.198873961693607e-06, -2.264967406517826e-06, -4.172325134277344e-06, 0.0, -3.814697265625e-06, -2.288818359375e-05, -7.62939453125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, -2.288818359375e-05, -7.62939453125e-06, -3.4332275390625e-05, -3.576278118089249e-07, -2.47955322265625e-05, -3.0517578125e-05, -8.7738037109375e-05, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002460479736328125, 0.0, -0.0015288591384887695, 0.0, -0.014484405517578125, -0.00048828125, -7.62939453125e-06, 0.0, -8.96453857421875e-05, 0.0, -7.62939453125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -5.53131103515625e-05, 0.0, -0.000347137451171875, 0.0, -0.005061626434326172, -1.1444091796875e-05, -3.814697265625e-06, -7.62939453125e-06, -0.0018873214721679688, 0.0, -7.169031143188477, -0.14464187622070312, -0.0003814697265625, 0.0, -0.00015783309936523438, -7.62939453125e-06, -1.5735617125756107e-05, 0.0, -0.0003986358642578125, -3.4332275390625e-05, -1.33514404296875e-05, -2.47955322265625e-05, -1.0728830375228426e-06, -0.0007266998291015625, -0.0001468658447265625, -0.0010547637939453125, -6.103515625e-05, -0.0001621246337890625, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -0.00025844573974609375, 0.0, -1.7046926586772315e-05, -1.9073486328125e-06, -0.00019884109497070312, 0.0, -1.1444091796875e-05, -0.0001621246337890625, -1.71661376953125e-05, -1.52587890625e-05, 0.0, -4.9591064453125e-05, -8.308877295348793e-05, -1.9073486328125e-06, -0.000152587890625, -0.6019220352172852, -0.00016021728515625, -1.9073486328125e-06, -0.0001405477523803711, 0.0], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=True)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(4), self)\n", "choice_history": [77, 147, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Crackle", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 26, 134, "True", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 72, 53, 133, "self", "<EOS>"]}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"score": -1.546528900966365, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -0.2023906707763672, -0.000125885009765625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.00021576881408691406, 0.0, -6.67572021484375e-05, 0.0, -0.4021482467651367, 0.0, -1.9073486328125e-05, -0.0008602142333984375, -0.0045528411865234375, -0.001421332242898643, 0.0, -0.009161949157714844, -1.9073486328125e-06, -0.5646095275878906, -0.005465882830321789], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -2.1457459406157398, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole1": "bounce", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -1.7209758758544922, -1.52587890625e-05, 0.0, -5.7220458984375e-06, 0.0, -0.00029969215393066406, 0.0, -4.5180320739746094e-05, 0.0, -0.0689401626586914, -3.814697265625e-06], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -2.338829942040462, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -0.2023906707763672, -0.000125885009765625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.00021576881408691406, 0.0, -6.67572021484375e-05, 0.0, -0.4021482467651367, 0.0, -1.9073486328125e-05, -0.0008602142333984375, -0.0045528411865234375, -0.001421332242898643, 0.0, -0.009161949157714844, -1.9073486328125e-06, -1.3622679710388184, -0.00010848045349121094], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Frozen", "<EOS>"]}, {"score": -2.8247717098494434, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -0.2023906707763672, -0.000125885009765625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.00021576881408691406, 0.0, -6.67572021484375e-05, 0.0, -2.197165012359619, 0.0, 0.0, -0.06931877136230469], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -3.0491839327407035, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_enemy_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -1.805462121963501, 0.0, -0.00016021728515625, 0.0, -3.4451368264853954e-05, 0.0, -8.392333984375e-05, -5.7220458984375e-06, -0.0002288818359375, -0.000995635986328125, 0.0, -0.003536224365234375, -1.52587890625e-05, -2.47955322265625e-05, -0.2463998794555664, -0.0001621246337890625, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -0.0002243518829345703, 0.0, -6.699562072753906e-05, 0.0, -0.40230655670166016, 0.0, -2.09808349609375e-05, -0.0009403228759765625, -0.004750251770019531, -0.001565098762512207, 0.0, -0.010560989379882812, -1.9073486328125e-06, -0.5518856048583984, -0.00525869894772768], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -3.433102556180671, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_enemy_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole1": "bounce", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -1.805462121963501, 0.0, -0.00016021728515625, 0.0, -3.4451368264853954e-05, 0.0, -8.392333984375e-05, -5.7220458984375e-06, -0.0002288818359375, -0.000995635986328125, 0.0, -0.003536224365234375, -1.52587890625e-05, -2.47955322265625e-05, -1.5425481796264648, -1.52587890625e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0003292560577392578, 0.0, -4.8995018005371094e-05, 0.0, -0.0651397705078125, -3.814697265625e-06], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -3.652451463655005, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole1": "bounce", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -2.392483949661255, -1.1920928244535389e-07, -0.00011467933654785156, 0.0, -2.4557000870117918e-05, 0.0, -3.62396240234375e-05, -2.09808349609375e-05, -0.0002231597900390625, -0.0002269744873046875, 0.0, -0.0055294036865234375, -1.52587890625e-05, -3.4332275390625e-05, -1.1827812194824219, -1.71661376953125e-05, 0.0, -3.814697265625e-06, 0.0, -0.00030052661895751953, 0.0, -4.5299530029296875e-05, 0.0, -0.056125640869140625, -3.814697265625e-06], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -3.7681149781275494, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -2.392483949661255, -1.1920928244535389e-07, -0.00011467933654785156, 0.0, -2.4557000870117918e-05, 0.0, -3.62396240234375e-05, -2.09808349609375e-05, -0.0002231597900390625, -0.0002269744873046875, 0.0, -0.0055294036865234375, -1.52587890625e-05, -3.4332275390625e-05, -0.3739128112792969, -0.0001468658447265625, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -0.00023472309112548828, 0.0, -6.473064422607422e-05, 0.0, -0.40825748443603516, 0.0, -1.9073486328125e-05, -0.000865936279296875, -0.0046405792236328125, -0.001539468765258789, 0.0, -0.01038360595703125, -1.9073486328125e-06, -0.5495221614837646, -0.005319223739206791], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -3.864969514303226, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Spell", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -0.2023906707763672, -0.000125885009765625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.00021576881408691406, 0.0, -6.67572021484375e-05, 0.0, -0.4021482467651367, 0.0, -1.9073486328125e-05, -0.0008602142333984375, -0.0045528411865234375, -0.001421332242898643, 0.0, -0.009161949157714844, -1.9073486328125e-06, -2.7453155517578125, -0.14320047199726105], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Spell()))\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Spell", "<EOS>"]}, {"score": -3.8723226270195994, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_enemy_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -1.805462121963501, 0.0, -0.00016021728515625, 0.0, -3.4451368264853954e-05, 0.0, -8.392333984375e-05, -5.7220458984375e-06, -0.0002288818359375, -0.000995635986328125, 0.0, -0.003536224365234375, -1.52587890625e-05, -2.47955322265625e-05, -0.2463998794555664, -0.0001621246337890625, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -0.0002243518829345703, 0.0, -6.699562072753906e-05, 0.0, -0.40230655670166016, 0.0, -2.09808349609375e-05, -0.0009403228759765625, -0.004750251770019531, -0.001565098762512207, 0.0, -0.010560989379882812, -1.9073486328125e-06, -1.3801727294921875, -0.00011026859283447266], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Frozen", "<EOS>"]}, {"score": -3.997256584574785, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -0.2023906707763672, -0.000125885009765625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.00021576881408691406, 0.0, -6.67572021484375e-05, 0.0, -3.3636741638183594, 0.0, -1.9073486328125e-06, -0.07529258728027344], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 69]}, {"score": -4.363453217458442, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_enemy_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -1.805462121963501, 0.0, -0.00016021728515625, 0.0, -3.4451368264853954e-05, 0.0, -8.392333984375e-05, -5.7220458984375e-06, -0.0002288818359375, -0.000995635986328125, 0.0, -0.003536224365234375, -1.52587890625e-05, -2.47955322265625e-05, -0.2463998794555664, -0.0001621246337890625, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -0.0002243518829345703, 0.0, -6.699562072753906e-05, 0.0, -2.2164406776428223, 0.0, 0.0, -0.0751190185546875], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -4.726033039500322, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -0.2023906707763672, -0.000125885009765625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.00021576881408691406, 0.0, -6.67572021484375e-05, 0.0, -4.079504489898682, 0.0, -1.71661376953125e-05, -0.07973766326904297, -1.9073486328125e-06, -0.008455276489257812, -2.86102294921875e-05], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 53, 133, "self", "<EOS>"]}, {"score": -5.0235799035582644, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -2.392483949661255, -1.1920928244535389e-07, -0.00011467933654785156, 0.0, -2.4557000870117918e-05, 0.0, -3.62396240234375e-05, -2.09808349609375e-05, -0.0002231597900390625, -0.0002269744873046875, 0.0, -0.0055294036865234375, -1.52587890625e-05, -3.4332275390625e-05, -0.3739128112792969, -0.0001468658447265625, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -0.00023472309112548828, 0.0, -6.473064422607422e-05, 0.0, -2.1561670303344727, 0.0, 0.0, -0.07984733581542969], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -7.761770010103788, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EmergencyCoolant", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"id": "PlayerSelector", "_type": "Name"}}], "func": {"id": "ActionTag", "_type": "Name"}}], "func": {"id": "Effect", "_type": "Name"}}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.00028228759765625, -0.0033416748046875, -4.768370445162873e-07, -5.3523639508057386e-05, -2.753696753643453e-05, -4.7682806325610727e-07, -1.442432312614983e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-05, -7.2479248046875e-05, -1.1444091796875e-05, -0.003948211669921875, -0.0001468658447265625, -0.001129150390625, -2.09808349609375e-05, -1.71661376953125e-05, -1.0728830375228426e-06, -0.0003457764396443963, -4.291534423828125e-06, -2.3841855067985307e-07, -4.00543212890625e-05, -7.82012939453125e-05, -0.0003509521484375, -0.0030221939086914062, -3.814697265625e-06, -9.1552734375e-05, -3.576278118089249e-07, -0.0001373291015625, -6.866455078125e-05, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -6.866455078125e-05, -0.0001468658447265625, -1.71661376953125e-05, -1.52587890625e-05, -0.0001125335693359375, -5.7220458984375e-06, -0.0004119873046875, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -0.3360016345977783, 0.0, -0.00018703937530517578, 0.0, -4.839835673919879e-05, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -0.0001049041748046875, -0.0012054443359375, 0.0, -0.003353118896484375, -1.52587890625e-05, -2.6702880859375e-05, -0.2023906707763672, -0.000125885009765625, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.00021576881408691406, 0.0, -6.67572021484375e-05, 0.0, -3.2566051483154297, 0.0, -5.7220458984375e-06, -0.29360103607177734, -7.62939453125e-06, -0.0005340576171875, 0.0, -0.46190083026885986, -1.33514404296875e-05, -3.62396240234375e-05, -0.10183334350585938, -0.000102996826171875, -0.8393698930740356, -0.07192622870206833, -2.1457672119140625e-06, -0.0001430511474609375, -0.0006008148193359375, -1.71661376953125e-05, 0.0, -0.10307979583740234, -0.000263214111328125, -1.9073486328125e-06, -3.4332275390625e-05, -0.001667022705078125, -0.000457763671875, -0.4531252980232239, -2.5272369384765625e-05, -0.009418487548828125, -0.016572952270507812, -1.1444091796875e-05, 0.0, -0.44828903675079346, -0.6109256744384766, 0.0, -0.024437904357910156, -0.012347221374511719, 0.0, -0.49612510204315186, 0.0], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(TurnStarted(), ActionTag(Kill(),\n            PlayerSelector(targets))))\n", "choice_history": [77, 147, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Emergency", " ", "Coolant", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Player", "Selector", "<EOS>", 205, 53, 133, "targets", "<EOS>"]}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"score": -0.08244266112887999, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -0.06840860843658447, 0.0, -0.000125885009765625, -5.7220458984375e-06, -0.00010728820052463561, -2.2649765014648438e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.513626357052999, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "divine_shield", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -3.4991354942321777, 0.0, -0.0002803802490234375, -9.5367431640625e-06, -0.0004057883925270289, -2.2649765014648438e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, divine_shield=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "divine_shield", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.7487266263410675, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "True", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -4.731370449066162, 0.0, -0.0028142929077148438, -2.288818359375e-05, -0.0007233619107864797, -2.741813204920618e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, True=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "True", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.299692531589244, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template34"}, "hole2": "spell_damage", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -5.030582904815674, 0.0, -0.25531673431396484], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 38]}, {"score": -5.588178773737582, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "activate", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -5.567229270935059, 0.0, -0.006724357604980469, -5.7220458984375e-06, -0.00042378887883387506, -2.741813204920618e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, activate=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "activate", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.896577199733649, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "ImportFrom", "module": "<UNK>", "level": 0, "names": [{"_type": "alias", "name": "spare_part_list"}]}, {"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -5.035120964050293, -0.16504383087158203, -0.0029506683349609375, -0.006524020805954933, 0.0, -0.0040836334228515625, -0.000774383544921875, -0.07629045844078064, -1.7523765563964844e-05, -0.0010304064489901066, 0.0, -0.01511383056640625, -0.00054168701171875, -0.001034427434206009, -1.6450776456622407e-05, -0.001939084380865097, -1.1920928244535389e-07, -0.5789171457290649, 0.0, -0.000331878662109375, -4.9591064453125e-05, -0.00014233564434107393, -2.0265579223632812e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        from <UNK> import spare_part_list\n        return Minion(1, 4, windfury=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 218, 90, 123, "<UNK>", "<EOS>", 196, 191, "spare_part_list", "<EOS>", "0", "<EOS>", 93, 151, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.340427776310889, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -6.325860977172852, 0.0, -0.000457763671875, -9.5367431640625e-06, -0.0003041028685402125, -2.503394853192731e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.551972886074452, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_damage", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -5.030582904815674, 0.0, -1.5073356628417969, -3.0517578125e-05, -0.0002305507514392957, -3.576278118089249e-07], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.589204199848496, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -6.497018814086914, -0.00012969970703125, -5.91278076171875e-05, -3.814697265625e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.00026154506485909224, -0.0002846717834472656, -2.515315827622544e-05, -1.9073486328125e-06, -0.0019779761787503958, -8.344646857949556e-07, -0.0073947906494140625, -0.0003185272216796875, -5.7220458984375e-05, -1.3351394954952411e-05, -1.9073486328125e-06, -1.6093150406959467e-05, 0.0, -0.08021426200866699, 0.0, -0.000148773193359375, -5.7220458984375e-06, -0.00011169897334184498, -2.1457672119140625e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 72, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.79461915374327, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -6.725427150726318, -0.0005835294723510742, -0.00392913818359375, -0.0015354156494140625, -2.6702880859375e-05, -2.121913348673843e-05, -1.9073486328125e-06, -3.397396358195692e-05, 0.0, -0.05810058116912842, 0.0, -8.392333984375e-05, -3.814697265625e-06, -0.00010907623072853312, -4.172325134277344e-06], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, p):\n        return Minion(1, 4, windfury=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.005896826747602, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "4", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -6.9225358963012695, 0.0, -0.040645599365234375, -1.1444091796875e-05, -0.02891075611114502, -2.3841855067985307e-07], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, 4=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "4", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.0407240605709305, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -6.159426212310791, 0.0, -0.0004253387451171875, -1.71661376953125e-05, -6.67572021484375e-05, -4.76837158203125e-05, -0.002681732177734375, -1.1920928244535389e-07, -0.001018524169921875, -0.041268348693847656, -0.06233978271484375, -0.03399857133626938, -1.0132738680113107e-05, -0.0008640289306640625, -1.1444091796875e-05, -0.7208181023597717, -0.00024996104184538126, -0.0035686492919921875, -1.9073486328125e-06, -0.00011670589447021484, 0.0, 0.0], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, deathrattle=Deathrattle(Summon(Frozen()),\n            PlayerSelector()))\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Frozen", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -7.649512549403767, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "MAGE", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -7.479502201080322, 0.0, -0.01687145233154297, -1.71661376953125e-05, -0.13932836055755615, -4.768370445162873e-07], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, MAGE=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.109877471706568, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Flying Machine"}, {"_type": "Template35"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "UsedPower"}, {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.000179290771484375, -1.33514404296875e-05, -5.53131103515625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.8715683836489916e-05, -4.804131094715558e-05, -1.9073486328125e-06, -4.971027374267578e-05, -0.002132415771484375, -5.91278076171875e-05, -4.57763671875e-05, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0010265109594911337, -0.0003190040588378906, -2.1457668481161818e-05, -1.9073486328125e-06, -0.0018934691324830055, -7.152555099310121e-07, -0.00672149658203125, -0.0003337860107421875, -4.9591064453125e-05, -1.4901119357091375e-05, -2.0265579223632812e-06, -1.8358114175498486e-05, 0.0, -5.689462184906006, 0.0, -0.00045013427734375, -0.000186920166015625, -0.019739508628845215, -3.933906555175781e-06, -2.09808349609375e-05, -0.0071258544921875, -3.814697265625e-06, -1.2515056133270264, -0.08132576942443848, -9.5367431640625e-06, -0.000110626220703125, -0.00023651123046875, -7.62939453125e-06, 0.0, -5.340576171875e-05, -2.551078432588838e-05, -1.9073486328125e-06, -0.0001220703125, -0.24041748046875, -0.08012580871582031, -0.6892367601394653, -5.2213632443454117e-05, -0.000335693359375, -2.86102294921875e-05, -0.0194769948720932, -3.4689364838413894e-05, -0.0007686614990234375, 0.0, -0.013214945793151855, 0.0, 0.0, -7.62939453125e-06, -0.0019931793212890625], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(UsedPower(), ActionTag(Give(\n            Frozen()), PlayerSelector()))])\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Flying", " ", "Machine", "<EOS>", 70, 65, 64, 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Used", "Power", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Frozen", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -9.902231286194564, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "FlyingMachine", "hole2": [{"_type": "Template16", "hole1": 4, "hole0": 1}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -1.9073486328125e-05, -0.0003718638326972723, -0.00013803508772980422, -0.00011312343121971935, -4.209578037261963e-06, -1.5497195136049413e-06, -8.344646857949556e-07, -1.9073486328125e-06, -9.114533424377441, -0.005860328674316406, -0.007848739624023438, -0.0011026859283447266, -0.002330780029296875, -2.062306521111168e-05, -0.23637628555297852, -1.9073486328125e-06, -0.02770805172622204, -3.933906555175781e-06, -3.814697265625e-06, -0.40765857696533203, -7.62939453125e-05, -0.00016927719116210938, -3.933906555175781e-06, -1.2755379430018365e-05, 0.0, -0.09747135639190674, 0.0, -0.000186920166015625, -5.7220458984375e-06, -0.0001916884648380801, -2.3841855067985307e-07], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        return Minion(1, 4)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "choice_history": [77, 145, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 217, 94, 152, "1", "<EOS>", "4", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"score": -2.451461890090478, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -1.0181293487548828, -0.0008697509765625, -1.71661376953125e-05, -0.0011813640594482422, -2.3841855067985307e-07, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -9.655952453613281e-06, 0.0, -0.000957489013671875, -0.007762908935546875, -0.0021953582763671875, -0.00010347308125346899, -0.000546795956324786, -2.47955322265625e-05, -9.5367431640625e-06, -0.38794082403182983, -0.002051625167950988, 0.0, -2.09808349609375e-05, -0.5050487518310547, -0.00052642822265625, -0.06378936767578125, -0.00012969970703125, -5.7220458984375e-06, -0.005535125732421875, -0.00022518634796142578, 0.0, -9.1552734375e-05, -0.1140737533569336, -0.001983642578125, -0.005330204963684082, -2.0265579223632812e-06, -0.0001087188720703125, -0.000255584716796875, 0.0, -0.00026547908782958984, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.3218906819820404, -0.0005058048409409821, -1.1920928244535389e-07, -0.00017833709716796875, 0.0, -7.271765298355604e-06, 0.0, -7.43865966796875e-05, -0.0001354217529296875, -4.38690185546875e-05, -1.430507836630568e-06, -5.722038622479886e-06, -5.364412118069595e-06, -5.9604562920867465e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeAttack(3)),\n            MinionSelector(Null, picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -2.5033830774193504, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.6895538568496704, -9.536697689327411e-06, -3.0517578125e-05, -5.7220458984375e-06, -0.00035953521728515625, -2.145764938177308e-06, -3.24249267578125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, 0.0, -0.0012378692626953125, -0.005489349365234375, -0.00269317626953125, -0.00013017619494348764, -0.0005061641568318009, -3.0517578125e-05, -1.1444091796875e-05, -0.40664052963256836, -0.0022021662443876266, 0.0, -2.09808349609375e-05, -0.45256805419921875, -0.000457763671875, -0.053890228271484375, -9.34600830078125e-05, -5.7220458984375e-06, -0.00646209716796875, -0.00024235248565673828, 0.0, -0.00012969970703125, -0.10561466217041016, -0.0019016265869140625, -0.005783796310424805, -2.0265579223632812e-06, -0.00011444091796875, -0.000274658203125, 0.0, -0.0002903938293457031, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -0.3057759702205658, -0.0005010364693589509, -1.1920928244535389e-07, -0.00018596649169921875, 0.0, -5.364416665543104e-06, 0.0, -7.05718994140625e-05, -0.0001373291015625, -4.38690185546875e-05, -1.430507836630568e-06, -5.6028297876764555e-06, -5.364412118069595e-06, -5.9604562920867465e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(3)), MinionSelector(Null, picker=\n            RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -2.5801033778874327, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.7787834405899048, -1.6689286894688848e-06, -7.43865966796875e-05, -5.7220458984375e-06, -0.00040948379319161177, -1.0728830375228426e-06, -1.71661376953125e-05, 0.0, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, 0.0, -0.00113677978515625, -0.0037899017333984375, -0.0029287338256835938, -0.00012242764933034778, -0.00044348929077386856, -2.86102294921875e-05, -1.1444091796875e-05, -0.3771688640117645, -0.002032862976193428, 0.0, -2.288818359375e-05, -0.47051048278808594, -0.00042724609375, -0.05358695983886719, -9.5367431640625e-05, -5.7220458984375e-06, -0.006870269775390625, -0.0002633333206176758, 0.0, -0.000118255615234375, -0.11887359619140625, -0.001911163330078125, -0.005964040756225586, -2.0265579223632812e-06, -0.00011444091796875, -0.0002574920654296875, 0.0, -0.0002981424331665039, 0.0, -4.38690185546875e-05, -3.814697265625e-06, -0.2930019497871399, -0.0005033014458604157, -1.1920928244535389e-07, -0.00018405914306640625, 0.0, -5.364416665543104e-06, 0.0, -7.2479248046875e-05, -0.0001373291015625, -4.57763671875e-05, -1.311298774453462e-06, -5.6028297876764555e-06, -5.364412118069595e-06, -5.841247457283316e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeAttack(3)), MinionSelector(Null, picker=\n            RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.0247154025334666, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -1.0181293487548828, -0.0008697509765625, -1.71661376953125e-05, -0.0011813640594482422, -2.3841855067985307e-07, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -9.655952453613281e-06, 0.0, -0.000957489013671875, -0.007762908935546875, -0.0021953582763671875, -0.00010347308125346899, -0.000546795956324786, -2.47955322265625e-05, -9.5367431640625e-06, -0.38794082403182983, -0.002051625167950988, 0.0, -2.09808349609375e-05, -1.124776840209961, -0.0004138946533203125, -0.010187149047851562, -0.000354766845703125, -3.814697265625e-06, -0.00417327880859375, -0.00011074542999267578, 0.0, -7.2479248046875e-05, -0.13794708251953125, -0.00127410888671875, -0.00431370735168457, -2.0265579223632812e-06, -8.96453857421875e-05, -0.0002880096435546875, 0.0, -0.0003924369812011719, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -0.30813273787498474, -0.0004758833674713969, -1.1920928244535389e-07, -0.00018966197967529297, 0.0, -5.245207830739673e-06, 0.0, -7.43865966796875e-05, -0.000133514404296875, -4.38690185546875e-05, -1.3112990018271375e-06, -5.6028297876764555e-06, -5.483620952873025e-06, -5.6028297876764555e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeAttack(1)),\n            MinionSelector(Null, picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.1508076396550777, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}], "hole1": {"id": "Buff", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template19", "hole2": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -1.0181293487548828, -0.0008697509765625, -1.71661376953125e-05, -0.0011813640594482422, -2.3841855067985307e-07, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -9.655952453613281e-06, 0.0, -0.000957489013671875, -0.007762908935546875, -0.0021953582763671875, -0.00010347308125346899, -0.000546795956324786, -2.47955322265625e-05, -9.5367431640625e-06, -1.2436699867248535, -0.0075864773243665695, -3.4332275390625e-05, -0.61602783203125, -4.57763671875e-05, -0.011470573954284191, -0.0014362867223098874, -4.172325134277344e-06, -0.06488458067178726, -2.4795530407573096e-05, -0.08662891387939453, -0.030088424682617188, -0.000321267347317189, -0.0005151033401489258, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002193450927734375, -0.00012958049774169922, 0.0, -7.62939453125e-06, -4.9591064453125e-05, -1.1444091796875e-05, -0.00028228759765625, 0.0, -0.000102996826171875, 0.0, -0.03993988037109375, -1.52587890625e-05, -9.5367431640625e-06, 0.0, -0.00023365019296761602, 0.0, -7.62939453125e-06, -0.0057926177978515625, -6.4849853515625e-05, -1.1920928244535389e-07, -8.702266313775908e-06, -4.29153169534402e-06, -6.914137884450611e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(Buff(ChangeAttack(\n            2))), MinionSelector(IsType(MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Buff", "<EOS>", 205, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.2006415498938097, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.6895538568496704, -9.536697689327411e-06, -3.0517578125e-05, -5.7220458984375e-06, -0.00035953521728515625, -2.145764938177308e-06, -3.24249267578125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, 0.0, -0.0012378692626953125, -0.005489349365234375, -0.00269317626953125, -0.00013017619494348764, -0.0005061641568318009, -3.0517578125e-05, -1.1444091796875e-05, -0.40664052963256836, -0.0022021662443876266, 0.0, -2.09808349609375e-05, -1.1934576034545898, -0.000438690185546875, -0.009489059448242188, -0.0003871917724609375, -5.7220458984375e-06, -0.0040912628173828125, -0.00011456012725830078, 0.0, -0.000110626220703125, -0.10821247100830078, -0.001262664794921875, -0.004283785820007324, -2.0265579223632812e-06, -8.96453857421875e-05, -0.0003204345703125, 0.0, -0.0004076957702636719, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -0.3082081973552704, -0.00047421440831385553, -1.1920928244535389e-07, -0.00019538402557373047, 0.0, -5.245207830739673e-06, 0.0, -7.2479248046875e-05, -0.000133514404296875, -4.38690185546875e-05, -1.3112990018271375e-06, -5.483620952873025e-06, -5.483620952873025e-06, -5.483620952873025e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(1)), MinionSelector(Null, picker=\n            RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.2045537336867866, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.7787834405899048, -1.6689286894688848e-06, -7.43865966796875e-05, -5.7220458984375e-06, -0.00040948379319161177, -1.0728830375228426e-06, -1.71661376953125e-05, 0.0, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, 0.0, -0.00113677978515625, -0.0037899017333984375, -0.0029287338256835938, -0.00012242764933034778, -0.00044348929077386856, -2.86102294921875e-05, -1.1444091796875e-05, -0.3771688640117645, -0.002032862976193428, 0.0, -2.288818359375e-05, -1.1338424682617188, -0.0004291534423828125, -0.009387969970703125, -0.00040435791015625, -5.7220458984375e-06, -0.0041332244873046875, -0.00011837482452392578, 0.0, -0.000102996826171875, -0.11349773406982422, -0.001270294189453125, -0.0043163299560546875, -2.0265579223632812e-06, -8.96453857421875e-05, -0.000324249267578125, 0.0, -0.0004038810729980469, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -0.30844637751579285, -0.00047421440831385553, -1.1920928244535389e-07, -0.00019347667694091797, 0.0, -5.245207830739673e-06, 0.0, -7.2479248046875e-05, -0.000133514404296875, -4.38690185546875e-05, -1.3112990018271375e-06, -5.483620952873025e-06, -5.483620952873025e-06, -5.483620952873025e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeAttack(1)), MinionSelector(Null, picker=\n            RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.226732736303113, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}], "hole1": {"id": "Buff", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template19", "hole2": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.6895538568496704, -9.536697689327411e-06, -3.0517578125e-05, -5.7220458984375e-06, -0.00035953521728515625, -2.145764938177308e-06, -3.24249267578125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, 0.0, -0.0012378692626953125, -0.005489349365234375, -0.00269317626953125, -0.00013017619494348764, -0.0005061641568318009, -3.0517578125e-05, -1.1444091796875e-05, -1.2052340507507324, -0.0068179345689713955, -3.62396240234375e-05, -0.6266460418701172, -4.00543212890625e-05, -0.01626497134566307, -0.0013070929562672973, -4.172325134277344e-06, -0.06048315390944481, -2.3007391064311378e-05, -0.07080078125, -0.031436920166015625, -0.0003198367194272578, -0.0005110502243041992, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.000217437744140625, -0.00012767314910888672, 0.0, -7.62939453125e-06, -4.76837158203125e-05, -1.1444091796875e-05, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -0.03993797302246094, -1.52587890625e-05, -9.5367431640625e-06, 0.0, -0.00023365019296761602, 0.0, -7.62939453125e-06, -0.0058116912841796875, -6.4849853515625e-05, -1.1920928244535389e-07, -8.583057933719829e-06, -4.29153169534402e-06, -6.914137884450611e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Buff", "<EOS>", 205, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.387524477798358, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}], "hole1": {"id": "Buff", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template19", "hole2": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.7787834405899048, -1.6689286894688848e-06, -7.43865966796875e-05, -5.7220458984375e-06, -0.00040948379319161177, -1.0728830375228426e-06, -1.71661376953125e-05, 0.0, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, 0.0, -0.00113677978515625, -0.0037899017333984375, -0.0029287338256835938, -0.00012242764933034778, -0.00044348929077386856, -2.86102294921875e-05, -1.1444091796875e-05, -1.266521692276001, -0.00838148407638073, -3.62396240234375e-05, -0.619847297668457, -3.814697265625e-05, -0.02702348679304123, -0.001528146443888545, -6.079673767089844e-06, -0.06555721908807755, -2.34842264035251e-05, -0.07036685943603516, -0.03227043151855469, -0.00030219333712011576, -0.0005935430526733398, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002288818359375, -0.0001277923583984375, 0.0, -7.62939453125e-06, -4.76837158203125e-05, -1.1444091796875e-05, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -0.04039955139160156, -1.52587890625e-05, -9.5367431640625e-06, 0.0, -0.00023365019296761602, 0.0, -7.62939453125e-06, -0.0058994293212890625, -6.4849853515625e-05, -1.1920928244535389e-07, -8.463848644169047e-06, -4.29153169534402e-06, -6.914137884450611e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Buff", "<EOS>", 205, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.4408931787781682, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -1.0181293487548828, -0.0008697509765625, -1.71661376953125e-05, -0.0011813640594482422, -2.3841855067985307e-07, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -9.655952453613281e-06, 0.0, -0.000957489013671875, -0.007762908935546875, -0.0021953582763671875, -0.00010347308125346899, -0.000546795956324786, -2.47955322265625e-05, -9.5367431640625e-06, -0.38794082403182983, -0.002051625167950988, 0.0, -2.09808349609375e-05, -0.5050487518310547, -0.00052642822265625, -0.06378936767578125, -0.00012969970703125, -5.7220458984375e-06, -0.005535125732421875, -0.00022518634796142578, 0.0, -9.1552734375e-05, -0.1140737533569336, -0.001983642578125, -0.005330204963684082, -2.0265579223632812e-06, -0.0001087188720703125, -0.000255584716796875, 0.0, -0.00026547908782958984, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -1.3109596967697144, -0.0009974208660423756, -7.748573807475623e-06, -7.736682164249942e-05, 0.0, -1.5735622582724318e-05, 0.0, -4.00543212890625e-05, -0.0001239776611328125, -4.38690185546875e-05, -1.1920901670237072e-06, -6.914126061019488e-06, -5.006785613659304e-06, -6.675708846159978e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeAttack(3)),\n            MinionSelector(Null, picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.552916232477628, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.6895538568496704, -9.536697689327411e-06, -3.0517578125e-05, -5.7220458984375e-06, -0.00035953521728515625, -2.145764938177308e-06, -3.24249267578125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, 0.0, -0.0012378692626953125, -0.005489349365234375, -0.00269317626953125, -0.00013017619494348764, -0.0005061641568318009, -3.0517578125e-05, -1.1444091796875e-05, -0.40664052963256836, -0.0022021662443876266, 0.0, -2.09808349609375e-05, -0.45256805419921875, -0.000457763671875, -0.053890228271484375, -9.34600830078125e-05, -5.7220458984375e-06, -0.00646209716796875, -0.00024235248565673828, 0.0, -0.00012969970703125, -0.10561466217041016, -0.0019016265869140625, -0.005783796310424805, -2.0265579223632812e-06, -0.00011444091796875, -0.000274658203125, 0.0, -0.0002903938293457031, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -1.354946494102478, -0.0009945594938471913, -8.106198947643861e-06, -7.927417027531192e-05, 0.0, -1.5735622582724318e-05, 0.0, -3.814697265625e-05, -0.000125885009765625, -4.38690185546875e-05, -1.1920901670237072e-06, -6.794917680963408e-06, -5.006785613659304e-06, -6.675708846159978e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(3)), MinionSelector(Null, picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -3.679475701614706, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.7787834405899048, -1.6689286894688848e-06, -7.43865966796875e-05, -5.7220458984375e-06, -0.00040948379319161177, -1.0728830375228426e-06, -1.71661376953125e-05, 0.0, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, 0.0, -0.00113677978515625, -0.0037899017333984375, -0.0029287338256835938, -0.00012242764933034778, -0.00044348929077386856, -2.86102294921875e-05, -1.1444091796875e-05, -0.3771688640117645, -0.002032862976193428, 0.0, -2.288818359375e-05, -0.47051048278808594, -0.00042724609375, -0.05358695983886719, -9.5367431640625e-05, -5.7220458984375e-06, -0.006870269775390625, -0.0002633333206176758, 0.0, -0.000118255615234375, -0.11887359619140625, -0.001911163330078125, -0.005964040756225586, -2.0265579223632812e-06, -0.00011444091796875, -0.0002574920654296875, 0.0, -0.0002981424331665039, 0.0, -4.38690185546875e-05, -3.814697265625e-06, -1.3920105695724487, -0.0010014735162258148, -8.34461570775602e-06, -7.736682164249942e-05, 0.0, -1.5735622582724318e-05, 0.0, -3.814697265625e-05, -0.000125885009765625, -4.38690185546875e-05, -1.1920901670237072e-06, -6.675708846159978e-06, -5.006785613659304e-06, -6.5565000113565475e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeAttack(3)), MinionSelector(Null, picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -4.064566857058452, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -1.0181293487548828, -0.0008697509765625, -1.71661376953125e-05, -0.0011813640594482422, -2.3841855067985307e-07, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -9.655952453613281e-06, 0.0, -0.000957489013671875, -0.007762908935546875, -0.0021953582763671875, -0.00010347308125346899, -0.000546795956324786, -2.47955322265625e-05, -9.5367431640625e-06, -0.38794082403182983, -0.002051625167950988, 0.0, -2.09808349609375e-05, -1.124776840209961, -0.0004138946533203125, -0.010187149047851562, -0.000354766845703125, -3.814697265625e-06, -0.00417327880859375, -0.00011074542999267578, 0.0, -7.2479248046875e-05, -0.13794708251953125, -0.00127410888671875, -0.00431370735168457, -2.0265579223632812e-06, -8.96453857421875e-05, -0.0002880096435546875, 0.0, -0.0003924369812011719, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -1.3477445840835571, -0.0008485292783007026, -6.437280717364047e-06, -8.463859558105469e-05, 0.0, -1.549720582261216e-05, 0.0, -4.00543212890625e-05, -0.0001220703125, -4.38690185546875e-05, -1.1920901670237072e-06, -6.675708846159978e-06, -5.125993993715383e-06, -6.198873961693607e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeAttack(1)),\n            MinionSelector(Null, picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -4.240188782165433, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.6895538568496704, -9.536697689327411e-06, -3.0517578125e-05, -5.7220458984375e-06, -0.00035953521728515625, -2.145764938177308e-06, -3.24249267578125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.537799835205078e-05, 0.0, -0.0012378692626953125, -0.005489349365234375, -0.00269317626953125, -0.00013017619494348764, -0.0005061641568318009, -3.0517578125e-05, -1.1444091796875e-05, -0.40664052963256836, -0.0022021662443876266, 0.0, -2.09808349609375e-05, -1.1934576034545898, -0.000438690185546875, -0.009489059448242188, -0.0003871917724609375, -5.7220458984375e-06, -0.0040912628173828125, -0.00011456012725830078, 0.0, -0.000110626220703125, -0.10821247100830078, -0.001262664794921875, -0.004283785820007324, -2.0265579223632812e-06, -8.96453857421875e-05, -0.0003204345703125, 0.0, -0.0004076957702636719, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -1.347527265548706, -0.0008389923605136573, -6.556489552167477e-06, -8.654594421386719e-05, 0.0, -1.3589857189799659e-05, 0.0, -3.814697265625e-05, -0.0001239776611328125, -4.38690185546875e-05, -1.1920901670237072e-06, -6.5565000113565475e-06, -5.125993993715383e-06, -6.198873961693607e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeAttack(1)), MinionSelector(Null, picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -4.243215479414289, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "GoblinAuto-Barber", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Template33"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.47955322265625e-05, -1.52587890625e-05, -2.8013790142722428e-05, -0.0005829308647662401, -0.00025650550378486514, -1.189112663269043e-05, -1.2397711543599144e-05, -3.099440846199286e-06, -5.7220458984375e-06, -4.1961669921875e-05, -7.62939453125e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.33514404296875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -3.659658250398934e-05, -5.173683166503906e-05, -3.933904736186378e-06, -0.0001010894775390625, -1.33514404296875e-05, -0.0002880096435546875, -7.62939453125e-06, -2.86102294921875e-05, -5.7220458984375e-06, -4.982948303222656e-05, 0.0, -0.007616996765136719, 0.0, -6.67572021484375e-05, -0.4502534866333008, -0.0001773834228515625, -3.814697265625e-06, -0.7787834405899048, -1.6689286894688848e-06, -7.43865966796875e-05, -5.7220458984375e-06, -0.00040948379319161177, -1.0728830375228426e-06, -1.71661376953125e-05, 0.0, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, 0.0, -0.00113677978515625, -0.0037899017333984375, -0.0029287338256835938, -0.00012242764933034778, -0.00044348929077386856, -2.86102294921875e-05, -1.1444091796875e-05, -0.3771688640117645, -0.002032862976193428, 0.0, -2.288818359375e-05, -1.1338424682617188, -0.0004291534423828125, -0.009387969970703125, -0.00040435791015625, -5.7220458984375e-06, -0.0041332244873046875, -0.00011837482452392578, 0.0, -0.000102996826171875, -0.11349773406982422, -0.001270294189453125, -0.0043163299560546875, -2.0265579223632812e-06, -8.96453857421875e-05, -0.000324249267578125, 0.0, -0.0004038810729980469, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -1.346876621246338, -0.0008386347908526659, -6.556489552167477e-06, -8.654594421386719e-05, 0.0, -1.549720582261216e-05, 0.0, -3.814697265625e-05, -0.0001239776611328125, -4.38690185546875e-05, -1.1920901670237072e-06, -6.437291176553117e-06, -5.125993993715383e-06, -6.198873961693607e-06], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give(ChangeAttack(1)), MinionSelector(Null, picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Goblin", " ", "Auto-Barber", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"score": -2.175997279813302, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -0.42297840118408203, -0.000522613525390625, -7.82012939453125e-05, -0.0008815525216050446, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -0.3735877275466919, 0.0, -3.814697265625e-06, -0.00193023681640625, -0.17798233032226562, -6.103515625e-05, -0.0006166696548461914, -1.1920928244535389e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.00018703937530517578, -0.08801054954528809, 0.0, -1.9073486328125e-06, -0.012760162353515625, -0.0077495574951171875, -0.3038978576660156, -0.025030136108398438, -3.814697265625e-06, -3.814697265625e-06, -0.00153350830078125, -9.775161743164062e-06, 0.0, -0.000240325927734375, -1.9073486328125e-06, -1.9073486328125e-06, -0.09551835060119629, 0.0, -0.02991962432861328, -7.62939453125e-06, -0.0004022121138405055, -0.00038433074951171875, -2.0265579223632812e-06, -0.0001068115234375, -0.06546783447265625], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            picker=RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -2.4593115071804093, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -1.319148063659668, -0.006655693054199219, -9.310158930020407e-05, -3.218650817871094e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.0003021955199074, -0.5580534934997559, 0.0, -1.9073486328125e-06, -0.0024204254150390625, -0.011203765869140625, -0.22246837615966797, -1.9073486328125e-06, 0.0, -0.000537872314453125, -7.62939453125e-06, -1.9073486328125e-06, -0.0041103363037109375, -1.9073486328125e-06, 0.0, -0.07037830352783203, -1.9073486328125e-06, -0.007671356201171875, -1.9073486328125e-06, -0.002661466598510742, -0.0004143714904785156, 0.0, -0.0004405975341796875, -0.005191802978515625], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(2)), MinionSelector(picker=RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.3467778192968325, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -0.42297840118408203, -0.000522613525390625, -7.82012939453125e-05, -0.0008815525216050446, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -1.1694213151931763, 0.0, -3.814697265625e-06, -0.000316619873046875, -0.002567291259765625, -0.0001087188720703125, -0.0010079145431518555, -1.1920928244535389e-07, -9.5367431640625e-06, -1.9073486328125e-06, -0.00013363361358642578, -0.002575993537902832, 0.0, -1.9073486328125e-06, -0.036065101623535156, -0.0031604766845703125, -0.948028564453125, -0.01192474365234375, -5.7220458984375e-06, -3.814697265625e-06, -0.0001678466796875, -4.0531158447265625e-06, -1.9073486328125e-06, -0.000164031982421875, -3.814697265625e-06, -3.814697265625e-06, -0.06981492042541504, -1.9073486328125e-06, -0.07722854614257812, -9.5367431640625e-06, -0.0005134343518875539, -0.00039970874786376953, -3.933906555175781e-06, -0.000133514404296875, -0.03242301940917969], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            picker=RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.821337364872015, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -0.42297840118408203, -0.000522613525390625, -7.82012939453125e-05, -0.0008815525216050446, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -0.3735877275466919, 0.0, -3.814697265625e-06, -0.00193023681640625, -1.8209400177001953, -0.14940643310546875, -0.1371440887451172, -0.06494331359863281, -1.9073486328125e-06, -1.9073486328125e-06, -0.03219127655029297, -2.3365020751953125e-05, 0.0, -0.0005092620849609375, -1.9073486328125e-06, -1.9073486328125e-06, -0.15742337703704834, 0.0, -0.049457550048828125, -5.7220458984375e-06, -0.0005041360855102539, -0.0003343820571899414, -1.9073486328125e-06, -0.00022125244140625, -0.04213523864746094], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeHealth(2))]), MinionSelector(picker=RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.8845526169996987, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -1.1614017486572266, -0.000782012939453125, -0.000133514404296875, -0.003030296415090561, -3.576278118089249e-07, -3.814697265625e-06, 0.0, -1.621246337890625e-05, -0.18962907791137695, 0.0, -1.9073486328125e-06, -0.002124786376953125, -0.0010395050048828125, -0.0019702911376953125, -0.0007691383361816406, 0.0, -7.62939453125e-06, 0.0, -0.00016033649444580078, -0.148451566696167, 0.0, -1.9073486328125e-06, -0.0063533782958984375, -0.14521408081054688, -0.16726303100585938, -0.0009883642196655273, -1.1920928244535389e-07, -1.1444091796875e-05, -1.9073486328125e-06, -0.00014889240264892578, -0.039583563804626465, 0.0, -1.9073486328125e-06, -0.013972282409667969, -1.119969367980957, -0.025758743286132812, -0.029323577880859375, -1.9073486328125e-06, 0.0, -0.0008678436279296875, -1.251697449333733e-05, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -1.9073486328125e-06, -0.13179242610931396, 0.0, -0.07107734680175781, -7.62939453125e-06, -0.0004308223142288625, -0.00038826465606689453, -2.0265579223632812e-06, -0.000102996826171875, -0.05527210235595703], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(ChangeHealth\n            (2))]), MinionSelector(picker=RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.9451906895593964, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "HasSensei", "_type": "Name"}, "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -1.319148063659668, -0.006655693054199219, -9.310158930020407e-05, -3.218650817871094e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.0003021955199074, -0.8525776863098145, 0.0, -5.7220458984375e-06, -0.000255584716796875, -0.5346202850341797, -7.62939453125e-06, -9.095668065128848e-05, -1.3470649719238281e-05, 0.0, -3.814697265625e-06, -0.011713027954101562, -0.00011444091796875, -0.0006924867630004883, -1.1920928244535389e-07, -1.52587890625e-05, -0.014453887939453125, -8.20159912109375e-05, -0.004583954811096191, -0.0005837678909301758, -2.47955322265625e-05, -7.62939453125e-06, -7.62939453125e-06, -0.007135868072509766, -0.5804735422134399, -9.536738616588991e-07, -9.5367431640625e-06, -0.00014495849609375, -3.814697265625e-06, 0.0, -0.0008869171142578125, -4.017353057861328e-05, 0.0, -5.7220458984375e-06, -0.34491634368896484, -0.002803802490234375, -0.00026404819800518453, -4.41074053014745e-06, -5.7220458984375e-06, 0.0, -5.567073458223604e-05, -0.0019054412841796875, 0.0, 0.0, -0.010374069213867188, -0.0022373199462890625, -7.62939453125e-06, -9.131427214015275e-05, -1.537799835205078e-05, 0.0, -4.00543212890625e-05, -0.0001735687255859375], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(HasSensei(\n            )), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Effect", "<EOS>", 206, 59, 155, "Turn", "Ended", "<EOS>", 25, 133, "Has", "Sensei", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.9587797039409196, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -2.001680612564087, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-06, -9.000301361083984e-05, 0.0, -8.20159912109375e-05, -8.58306884765625e-05, -5.7220458984375e-06, -0.0060787200927734375, 0.0, -3.814697265625e-06, -3.814697265625e-06, -6.711483001708984e-05, 0.0, -0.006573677062988281, -0.000247955322265625, -0.0004253387451171875, -1.1920928244535389e-07, -1.1444026313256472e-05, -6.265996489673853e-06, -3.576278118089249e-07, -0.0007046459941193461, 0.0, -5.53131103515625e-05, -8.392333984375e-05, -6.711483001708984e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0015659332275390625, 0.0, -0.00015616313612554222, -0.0019971132278442383, -1.9073486328125e-06, -9.5367431640625e-06, -2.47955322265625e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31912899017333984, -0.0012874603271484375, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003916025161743164, -2.622604142743512e-06, -2.288818359375e-05, -0.003208160400390625, -4.57763671875e-05, -0.4244365692138672, -0.0005207061767578125, -7.82012939453125e-05, -0.0008796451729722321, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -0.373454213142395, 0.0, -3.814697265625e-06, -0.0019359588623046875, -0.17718887329101562, -6.103515625e-05, -0.0006166696548461914, -1.1920928244535389e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.00018703937530517578, -0.08793425559997559, 0.0, -1.9073486328125e-06, -0.01276397705078125, -0.00775909423828125, -0.30491065979003906, -0.02496337890625, -3.814697265625e-06, -3.814697265625e-06, -0.00153350830078125, -9.775161743164062e-06, 0.0, -0.000240325927734375, -1.9073486328125e-06, -1.9073486328125e-06, -0.0954124927520752, 0.0, -0.029936790466308594, -7.62939453125e-06, -0.0004022121138405055, -0.00038433074951171875, -2.0265579223632812e-06, -0.0001087188720703125, -0.06622982025146484], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            picker=RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.983820580087624, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -0.42297840118408203, -0.000522613525390625, -7.82012939453125e-05, -0.0008815525216050446, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -1.1694213151931763, 0.0, -3.814697265625e-06, -0.000316619873046875, -0.002567291259765625, -0.0001087188720703125, -0.0010079145431518555, -1.1920928244535389e-07, -9.5367431640625e-06, -1.9073486328125e-06, -0.00013363361358642578, -0.002575993537902832, 0.0, -1.9073486328125e-06, -0.036065101623535156, -0.0031604766845703125, -0.4916725158691406, -1.33514404296875e-05, -0.0006730555323883891, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -1.2855052947998047], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.162834546998219, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -1.319148063659668, -0.006655693054199219, -9.310158930020407e-05, -3.218650817871094e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.0003021955199074, -0.8525776863098145, 0.0, -5.7220458984375e-06, -0.000255584716796875, -0.8947649002075195, -0.36707019805908203, -1.9073486328125e-06, 0.0, -0.0002765655517578125, -5.7220458984375e-06, -9.5367431640625e-06, -0.06545639038085938, -1.9073486328125e-06, 0.0, -0.3963813781738281, -1.9073486328125e-06, -0.0035400390625, -5.7220458984375e-06, -0.003617405891418457, -0.0004830360412597656, 0.0, -0.0004482269287109375, -0.0041904449462890625], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeAttack(2)), MinionSelector(picker=RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -4.180423639856301, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -0.42297840118408203, -0.000522613525390625, -7.82012939453125e-05, -0.0008815525216050446, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -0.3735877275466919, 0.0, -3.814697265625e-06, -0.00193023681640625, -0.17798233032226562, -6.103515625e-05, -0.0006166696548461914, -1.1920928244535389e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.00018703937530517578, -0.08801054954528809, 0.0, -1.9073486328125e-06, -0.012760162353515625, -0.0077495574951171875, -1.346665382385254, -1.1444091796875e-05, -0.0006661413935944438, -7.867813110351562e-06, 0.0, -3.814697265625e-06, -1.1796035766601562], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.219586502221482, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -2.001680612564087, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-06, -9.000301361083984e-05, 0.0, -8.20159912109375e-05, -8.58306884765625e-05, -5.7220458984375e-06, -0.0060787200927734375, 0.0, -3.814697265625e-06, -3.814697265625e-06, -6.711483001708984e-05, 0.0, -0.006573677062988281, -0.000247955322265625, -0.0004253387451171875, -1.1920928244535389e-07, -1.1444026313256472e-05, -6.265996489673853e-06, -3.576278118089249e-07, -0.0007046459941193461, 0.0, -5.53131103515625e-05, -8.392333984375e-05, -6.711483001708984e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0015659332275390625, 0.0, -0.00015616313612554222, -0.0019971132278442383, -1.9073486328125e-06, -9.5367431640625e-06, -2.47955322265625e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -1.304734230041504, -0.006470680236816406, -9.035981202032417e-05, -3.218650817871094e-05, -0.0001087188720703125, -1.9073486328125e-06, -0.0003021955199074, -0.5597769021987915, 0.0, -1.9073486328125e-06, -0.0024204254150390625, -0.01134490966796875, -0.22001361846923828, -1.9073486328125e-06, 0.0, -0.0005359649658203125, -7.62939453125e-06, -1.9073486328125e-06, -0.004097938537597656, -1.9073486328125e-06, 0.0, -0.07050800323486328, -1.9073486328125e-06, -0.0076541900634765625, -1.9073486328125e-06, -0.0026595592498779297, -0.0004143714904785156, 0.0, -0.0004425048828125, -0.0052814483642578125], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(2)), MinionSelector(picker=RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -4.753697267275058, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "HasSensei", "_type": "Name"}, "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -0.42297840118408203, -0.000522613525390625, -7.82012939453125e-05, -0.0008815525216050446, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -1.1694213151931763, 0.0, -3.814697265625e-06, -0.000316619873046875, -0.002567291259765625, -0.0001087188720703125, -0.0010079145431518555, -1.1920928244535389e-07, -9.5367431640625e-06, -1.9073486328125e-06, -0.00013363361358642578, -0.002575993537902832, 0.0, -1.9073486328125e-06, -0.036065101623535156, -0.0031604766845703125, -0.4916725158691406, -1.33514404296875e-05, -0.0006730555323883891, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.3288230895996094, -0.0001468658447265625, -0.0006623268127441406, 0.0, -5.14984130859375e-05, -0.05048561096191406, -0.0001277923583984375, -0.13318920135498047, -0.0009307861328125, -1.33514404296875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.004624216817319393, -1.0105541944503784, -7.152555099310121e-07, -5.7220458984375e-06, -0.0003223419189453125, -3.814697265625e-06, 0.0, -0.00342559814453125, -4.208087921142578e-05, 0.0, -9.5367431640625e-06, -0.4934978485107422, -0.0011157989501953125, -0.0002515310770832002, -4.41074053014745e-06, -5.7220458984375e-06, 0.0, -6.830691563664004e-05, -0.0019494295120239258, 0.0, 0.0, -0.023271560668945312, -0.0014591217041015625, -7.62939453125e-06, -8.761876233620569e-05, -1.537799835205078e-05, 0.0, -5.53131103515625e-05, -0.000164031982421875], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector())\n            ), Effect(TurnEnded(HasSensei()), ActionTag(Give(ChangeHealth(2\n            )), SelfSelector()))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Effect", "<EOS>", 206, 59, 155, "Turn", "Ended", "<EOS>", 25, 133, "Has", "Sensei", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.868108621339999, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Has+2/+2", "_type": "Name"}, "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -0.42297840118408203, -0.000522613525390625, -7.82012939453125e-05, -0.0008815525216050446, -7.152555099310121e-07, -5.7220458984375e-06, 0.0, -1.0371208190917969e-05, -1.1694213151931763, 0.0, -3.814697265625e-06, -0.000316619873046875, -0.002567291259765625, -0.0001087188720703125, -0.0010079145431518555, -1.1920928244535389e-07, -9.5367431640625e-06, -1.9073486328125e-06, -0.00013363361358642578, -0.002575993537902832, 0.0, -1.9073486328125e-06, -0.036065101623535156, -0.0031604766845703125, -0.4916725158691406, -1.33514404296875e-05, -0.0006730555323883891, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.3288230895996094, -0.0001468658447265625, -0.0006623268127441406, 0.0, -5.14984130859375e-05, -0.05048561096191406, -0.0001277923583984375, -0.13318920135498047, -0.0009307861328125, -1.33514404296875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.004624216817319393, -1.1249655485153198, -7.152555099310121e-07, -5.7220458984375e-06, -0.0003223419189453125, -3.814697265625e-06, 0.0, -0.00342559814453125, -4.208087921142578e-05, 0.0, -9.5367431640625e-06, -0.4934978485107422, -0.0011157989501953125, -0.0002515310770832002, -4.41074053014745e-06, -5.7220458984375e-06, 0.0, -6.830691563664004e-05, -0.0019494295120239258, 0.0, 0.0, -0.023271560668945312, -0.0014591217041015625, -7.62939453125e-06, -8.761876233620569e-05, -1.537799835205078e-05, 0.0, -5.53131103515625e-05, -0.000164031982421875], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector())\n            ), Effect(TurnEnded(Has+2/+2()), ActionTag(Give(ChangeHealth(2)\n            ), SelfSelector()))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Effect", "<EOS>", 206, 59, 155, "Turn", "Ended", "<EOS>", 25, 133, "Has", "+2/+2", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -5.028872389720938, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -1.1614017486572266, -0.000782012939453125, -0.000133514404296875, -0.003030296415090561, -3.576278118089249e-07, -3.814697265625e-06, 0.0, -1.621246337890625e-05, -0.18962907791137695, 0.0, -1.9073486328125e-06, -0.002124786376953125, -0.0010395050048828125, -0.0019702911376953125, -0.0007691383361816406, 0.0, -7.62939453125e-06, 0.0, -0.00016033649444580078, -0.148451566696167, 0.0, -1.9073486328125e-06, -0.0063533782958984375, -0.14521408081054688, -0.16726303100585938, -0.0009883642196655273, -1.1920928244535389e-07, -1.1444091796875e-05, -1.9073486328125e-06, -0.00014889240264892578, -0.039583563804626465, 0.0, -1.9073486328125e-06, -0.013972282409667969, -0.3959941864013672, -0.2705726623535156, -0.0024607181549072266, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -0.00021767616271972656, -0.027428865432739258, 0.0, -1.9073486328125e-06, -0.035462379455566406, -0.8974142074584961, -0.6789617538452148, -1.9073486328125e-06, 0.0, -0.0008373260498046875, -4.410743713378906e-06, -7.62939453125e-06, -0.0011749267578125, -5.7220458984375e-06, -1.9073486328125e-06, -0.15819048881530762, -1.9073486328125e-06, -0.038321495056152344, -1.71661376953125e-05, -0.00044524663826450706, -0.0004706382751464844, -2.0265579223632812e-06, -7.82012939453125e-05, -0.07162952423095703], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(ChangeHealth\n            (2)), Buff(ChangeHealth(2))]), MinionSelector(picker=\n            RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -7.603017425677173, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "IronSensei", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Template35"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "HasSensei", "_type": "Name"}, "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-0.0001544952392578125, -2.09808349609375e-05, -0.00011801023356383666, -0.00013457897875923663, -3.099440846199286e-06, -5.111098289489746e-05, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, -0.0002288818359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.0002918243408203125, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.00013660451804753393, -4.2557716369628906e-05, -2.2649765014648438e-06, -7.450580596923828e-05, -0.000675201416015625, -0.0001239776611328125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -2.3245811462402344e-05, 0.0, -0.22957348823547363, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00010716915130615234, -1.9073486328125e-06, -7.62939453125e-05, -8.7738037109375e-05, -3.814697265625e-06, -0.0024261474609375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.081031799316406e-05, 0.0, -0.007262229919433594, -0.0002384185791015625, -0.0004405975341796875, -1.1920928244535389e-07, -1.168244216387393e-05, -7.707683835178614e-06, -3.576278118089249e-07, -0.0006682871608063579, 0.0, -5.7220458984375e-05, -9.1552734375e-05, -6.270408630371094e-05, -9.5367431640625e-06, -4.9591064453125e-05, -0.0014095306396484375, 0.0, -0.00015354064817074686, -0.0019418001174926758, -1.9073486328125e-06, -9.5367431640625e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -0.0002307891845703125, -3.063678741455078e-05, 0.0, -5.7220458984375e-06, -0.31371116638183594, -0.0012664794921875, -1.33514404296875e-05, -1.9073486328125e-06, -0.0003973245620727539, -2.622604142743512e-06, -2.288818359375e-05, -0.0032291412353515625, -4.57763671875e-05, -1.1614017486572266, -0.000782012939453125, -0.000133514404296875, -0.003030296415090561, -3.576278118089249e-07, -3.814697265625e-06, 0.0, -1.621246337890625e-05, -0.18962907791137695, 0.0, -1.9073486328125e-06, -0.002124786376953125, -0.0010395050048828125, -0.0019702911376953125, -0.0007691383361816406, 0.0, -7.62939453125e-06, 0.0, -0.00016033649444580078, -0.148451566696167, 0.0, -1.9073486328125e-06, -0.0063533782958984375, -0.14521408081054688, -0.16726303100585938, -0.0009883642196655273, -1.1920928244535389e-07, -1.1444091796875e-05, -1.9073486328125e-06, -0.00014889240264892578, -0.039583563804626465, 0.0, -1.9073486328125e-06, -0.013972282409667969, -0.3959941864013672, -0.2705726623535156, -0.0024607181549072266, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -0.00021767616271972656, -0.027428865432739258, 0.0, -1.9073486328125e-06, -0.035462379455566406, -0.5539264678955078, -7.62939453125e-06, -0.0002967115433420986, -1.7404556274414062e-05, 0.0, -3.814697265625e-06, -0.025075912475585938, -8.7738037109375e-05, -0.0005620718002319336, 0.0, -4.00543212890625e-05, -0.07478904724121094, -0.0001087188720703125, -0.16277027130126953, -0.0008202791213989258, -1.71661376953125e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.00530528137460351, -1.0413508415222168, -7.152555099310121e-07, -7.62939453125e-06, -0.0003757476806640625, -5.7220458984375e-06, 0.0, -0.00527191162109375, -4.792213439941406e-05, 0.0, -9.5367431640625e-06, -0.7185811996459961, -3.814697265625e-06, -0.006405916064977646, -1.8835060473065823e-05, -0.526576042175293, -0.0032672882080078125, -1.9073486328125e-06, 0.0, -0.000244140625, -1.1444091796875e-05, -9.5367431640625e-06, -1.0455322265625, -3.814697265625e-06, -7.62939453125e-06, -0.22755813598632812, 0.0, -0.0012311935424804688, -4.9591064453125e-05, -0.020491838455200195, -0.0004636049270629883, 0.0, -0.00011444091796875, -0.0002288818359375], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(ChangeHealth\n            (2)), Buff(ChangeHealth(2))]), SelfSelector())), Effect(\n            TurnEnded(HasSensei()), ActionTag(Kill(), MinionSelector(picker\n            =RandomPicker())))])\n", "choice_history": [77, 145, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Iron", " ", "Sensei", "<EOS>", 70, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Effect", "<EOS>", 206, 59, 155, "Turn", "Ended", "<EOS>", 25, 133, "Has", "Sensei", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"score": -1.8946643039067723, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -1.350642204284668, -1.9073486328125e-06, -0.025682687759399414, -0.0030434131622314453, -7.62939453125e-06, -0.14643552899360657, -4.00543212890625e-05, -0.14531707763671875, -2.86102294921875e-05, -0.0350567102432251, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -0.06808853149414062], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), HeroSelector())])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -2.8106737002177553, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Immune"}, {"_type": "Template19", "hole2": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -1.406357765197754, -2.09808349609375e-05, -0.5489629507064819, -0.3104825019836426, -0.022584915161132812, -0.31658077239990234, -3.468989962129854e-05, -0.001705169677734375, -1.9073486328125e-06, -6.29425048828125e-05, -3.814697265625e-06, -0.0007114410400390625, -0.0003529787063598633, 0.0, -0.0008602142333984375, -1.1444091796875e-05, 0.0, -0.00251007080078125, 0.0, -2.86102294921875e-05, 0.0, -0.012155532836914062, 0.0, -1.9073486328125e-06, -0.06694412231445312], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(Immune(), MinionSelector(IsType(\n            MINION_TYPE.BEAST)))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "Immune", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 205, 71]}, {"score": -3.04703697705974, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK>SpellTarget"}, {"_type": "Template19", "hole2": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -1.406357765197754, -2.09808349609375e-05, -0.8982258439064026, -0.16277723014354706, -0.021631240844726562, -5.006789251638111e-06, -0.0015201568603515625, -0.2784767150878906, -0.0001608133316040039, -0.000400543212890625, 0.0, -9.72747802734375e-05, -5.7220458984375e-06, -0.0002899169921875, -0.0003261566162109375, 0.0, -0.0010509490966796875, -1.71661376953125e-05, 0.0, -0.0046176910400390625, 0.0, -2.09808349609375e-05, 0.0, -0.01422882080078125, 0.0, -1.9073486328125e-06, -0.136505126953125], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "Spell", "Target", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 205, 71]}, {"score": -3.3330658097817008, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsHero", "_type": "Name"}, "hole0": "CharacterAttack"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "Immune"}, {"_type": "Template25", "hole0": "Attack<UNK>"}], "hole1": {"id": "BuffUntil", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -0.4086179733276367, -0.6904504299163818, -0.04157555103302002, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, -0.009978164918720722, -0.3740898370742798, -1.1920928244535389e-07, -6.4849853515625e-05, -0.00012969970703125, -5.7220458984375e-06, 0.0, -0.0062389373779296875, -3.2901763916015625e-05, 0.0, -1.71661376953125e-05, -0.03590202331542969, -0.00045013427734375, -0.00024282894446514547, -0.00038146969745866954, -1.1444091796875e-05, 0.0, -0.30603715777397156, -0.004411101341247559, -1.9073486328125e-06, -0.001102447509765625, -0.002887725830078125, -7.82012939453125e-05, -0.041112020611763, -0.0338117890059948, -0.11136436462402344, -4.1961669921875e-05, -0.2893064618110657, -0.03532695770263672, -0.06833183765411377, -0.004791259765625, -1.1444091796875e-05, -0.010681867599487305, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -0.0053348541259765625], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(CharacterAttack(IsHero()),\n            ActionTag(Give(BuffUntil(Immune(), Attack<UNK>())),\n            HeroSelector()))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 155, "Character", "Attack", "<EOS>", 25, 133, "Is", "Hero", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Buff", "Until", "<EOS>", 206, 63, 171, "Immune", "<EOS>", 63, 171, "Attack", "<UNK>", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -3.443610294297848, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Immune", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -0.4086179733276367, -1.6232917308807373, -0.00019466876983642578, -1.9073486328125e-06, -1.9073486328125e-06, -0.48543089628219604, -0.0002781962975859642, -0.00705718994140625, -3.814697265625e-06, -0.011231636628508568, -1.7642974853515625e-05, 0.0, -1.9073486328125e-06, -0.057300567626953125], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(Summon(Immune()), HeroSelector())])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Immune", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -3.7703218008715496, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Immune"}, {"_type": "Template19", "hole1": {"id": "Adjacent", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -1.406357765197754, -2.09808349609375e-05, -0.5489629507064819, -0.3104825019836426, -0.022584915161132812, -1.3234596252441406, -0.008657574653625488, -0.00012409687042236328, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.027641979977488518, -6.198873961693607e-06, -2.09808349609375e-05, -0.0016765594482421875], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(Immune(), MinionSelector(Adjacent()))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "Immune", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Adjacent", "<EOS>", 205, 71]}, {"score": -4.073063561255019, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK>SpellTarget"}, {"_type": "Template19", "hole1": {"id": "Adjacent", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -1.406357765197754, -2.09808349609375e-05, -0.8982258439064026, -0.16277723014354706, -0.021631240844726562, -5.006789251638111e-06, -0.0015201568603515625, -1.4219884872436523, -0.0048236846923828125, -4.76837158203125e-05, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -0.03410825878381729, -8.940683983382769e-06, -6.67572021484375e-05, -0.00116729736328125], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(<UNK>SpellTarget(), MinionSelector(\n            Adjacent()))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "Spell", "Target", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Adjacent", "<EOS>", 205, 71]}, {"score": -4.19130899155936, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template19", "hole2": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -1.350642204284668, -1.9073486328125e-06, -0.025682687759399414, -0.0030434131622314453, -7.62939453125e-06, -0.14643552899360657, -4.00543212890625e-05, -2.0019779205322266, -0.33208274841308594, -0.00015461444854736328, -2.09808349609375e-05, 0.0, -0.0003414154052734375, -2.288818359375e-05, -0.00020599365234375, -0.000396728515625, 0.0, -0.001556396484375, -5.7220458984375e-06, 0.0, -0.0012264251708984375, 0.0, -5.14984130859375e-05, 0.0, -0.1944122314453125, 0.0, -1.71661376953125e-05, -0.012683868408203125], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 205, 71]}, {"score": -4.253335104016166, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Immune<UNK><UNK>"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -1.406357765197754, -2.09808349609375e-05, -0.5489629507064819, -1.331723690032959, -0.7279443740844727, -0.05467426776885986, -0.012195587158203125, -1.71661376953125e-05, -0.0010750285582616925, -1.1682510375976562e-05, -7.62939453125e-06, 0.0, -0.050045013427734375], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(Immune<UNK><UNK>(), HeroSelector())])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "Immune", "<UNK>", "<UNK>", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.350113947218794, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "CharacterAttack"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "Immune"}, {"_type": "Template25", "hole0": "Attack<UNK>"}], "hole1": {"id": "BuffUntil", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -0.4086179733276367, -0.6904504299163818, -0.04157555103302002, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, -0.009978164918720722, -1.6149431467056274, -3.814697265625e-06, -0.0007495880126953125, -2.288818359375e-05, 0.0, 0.0, -0.001010894775390625, -1.5735626220703125e-05, 0.0, -2.09808349609375e-05, -0.02752685546875, -0.000400543212890625, -0.00012254691682755947, -0.0010715723037719727, -2.6702880859375e-05, 0.0, -0.08091519773006439, -0.007473587989807129, -3.814697265625e-06, -0.0051898956298828125, -0.0067157745361328125, -9.34600830078125e-05, -0.049032893031835556, -0.02316640503704548, -0.15703201293945312, -4.76837158203125e-05, -0.19788317382335663, -0.04105091094970703, -0.10853302478790283, -0.0053863525390625, -1.71661376953125e-05, -0.01473236083984375, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -0.0060596466064453125], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(CharacterAttack(IsMinion()),\n            ActionTag(Give(BuffUntil(Immune(), Attack<UNK>())),\n            HeroSelector()))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 155, "Character", "Attack", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Buff", "Until", "<EOS>", 206, 63, 171, "Immune", "<EOS>", 63, 171, "Attack", "<UNK>", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.437178205289108, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Immune", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -0.4086179733276367, -2.2304840087890625, -0.14486169815063477, -1.6570091247558594e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.6510938405990601, -0.00035506210406310856, -0.10241889953613281, -1.9073486328125e-06, -0.004453805275261402, -3.7431702367030084e-05, -1.9073486328125e-06, 0.0, -0.04463958740234375], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(MinionSummoned(Immune()),\n            HeroSelector())])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Immune", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.987402672047764, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsHero", "_type": "Name"}, "hole0": "CharacterAttack"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "Immune"}, {"_type": "Template25", "hole0": "TurnEnded"}], "hole1": {"id": "BuffUntil", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -0.4086179733276367, -0.6904504299163818, -0.04157555103302002, -1.1444091796875e-05, -1.9073486328125e-06, -2.288818359375e-05, -0.009978164918720722, -0.3740898370742798, -1.1920928244535389e-07, -6.4849853515625e-05, -0.00012969970703125, -5.7220458984375e-06, 0.0, -0.0062389373779296875, -3.2901763916015625e-05, 0.0, -1.71661376953125e-05, -0.03590202331542969, -0.00045013427734375, -0.00024282894446514547, -0.00038146969745866954, -1.1444091796875e-05, 0.0, -0.30603715777397156, -0.004411101341247559, -1.9073486328125e-06, -0.001102447509765625, -0.002887725830078125, -7.82012939453125e-05, -0.041112020611763, -0.0338117890059948, -0.11136436462402344, -4.1961669921875e-05, -1.8268870115280151, -0.003443002700805664, -0.008645057678222656, -0.07260894775390625, -8.20159912109375e-05, -0.12152229994535446, -1.537799835205078e-05, -1.9073486328125e-06, 0.0, -0.034942626953125], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(CharacterAttack(IsHero()),\n            ActionTag(Give(BuffUntil(Immune(), TurnEnded())), HeroSelector()))]\n            )\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 155, "Character", "Attack", "<EOS>", 25, 133, "Is", "Hero", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Buff", "Until", "<EOS>", 206, 63, 171, "Immune", "<EOS>", 63, 171, "Turn", "Ended", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -5.551462450208071, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole2": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole1": {"id": "AuraUntil", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "Immune"}, {"_type": "Template25", "hole0": "Attack<UNK>"}], "hole1": {"id": "BuffUntil", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -1.1177396774291992, -0.04786181449890137, -0.0006924867630004883, -2.288818359375e-05, -0.0001163482666015625, -0.4468872547149658, -0.08611893653869629, -0.000209808349609375, -0.035796165466308594, -1.2587432861328125, -1.33514404296875e-05, -0.06821620464324951, -0.003203981788828969, -9.918212890625e-05, -0.006518995855003595, -4.601478576660156e-05, -0.0066165924072265625, -3.814697265625e-05, -0.13737404346466064, -2.09808349609375e-05, 0.0, -0.002750396728515625, -0.00012969970703125, -1.9073486328125e-06, 0.0, -0.09097576141357422, -4.017353057861328e-05, 0.0, -6.67572021484375e-05, -0.586395263671875, -0.0074310302734375, -0.00022757040278520435, -0.0035675764083862305, -1.71661376953125e-05, 0.0, -0.07822096347808838, -0.008262276649475098, -1.9073486328125e-06, -0.0060062408447265625, -0.0034580230712890625, -4.57763671875e-05, -0.0679749846458435, -0.03590034693479538, -0.0987396240234375, -4.57763671875e-05, -0.2976548373699188, -0.051280975341796875, -0.11419975757598877, -0.002227783203125, -1.1444091796875e-05, -0.02104365825653076, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -0.00824737548828125], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(Give(AuraUntil(ChangeAttack(2),\n            HeroSelector())), ActionTag(Give(BuffUntil(Immune(),\n            Attack<UNK>())), HeroSelector()))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Aura", "Until", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Buff", "Until", "<EOS>", 206, 63, 171, "Immune", "<EOS>", 63, 171, "Attack", "<UNK>", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -6.007829651685469, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "func": {"id": "ManaChange", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template19", "hole2": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "hole1": {"id": "AuraUntil", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -1.1177396774291992, -0.04786181449890137, -0.0006924867630004883, -2.288818359375e-05, -0.0001163482666015625, -0.4468872547149658, -0.08611893653869629, -0.000209808349609375, -0.035796165466308594, -0.4740943908691406, -1.1444091796875e-05, -3.4332275390625e-05, -1.9073486328125e-06, -0.757510781288147, -6.103515625e-05, 0.0, -7.62939453125e-06, -0.06330490112304688, -0.0004558563232421875, -0.001659393310546875, -0.36462879180908203, -0.00296783447265625, -0.009532928466796875, -0.001758575439453125, 0.0, -0.006028175354003906, -0.000308990478515625, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001125335693359375, -0.00063323974609375, -0.0036394596099853516, -1.1920928244535389e-07, -4.38690185546875e-05, 0.0, -0.00556182861328125, -3.254413604736328e-05, -0.0002689361572265625, -0.0061817169189453125, -0.6583518981933594, -0.0017795562744140625, -0.20124995708465576, -0.01729106903076172, 0.0, -6.29425048828125e-05, -5.7220458984375e-06, -0.000244140625, -4.1961669921875e-05, 0.0, -0.0002002716064453125, -1.52587890625e-05, 0.0, -0.0006875991821289062, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.04499244689941406, -5.7220458984375e-06, -0.0003261566162109375, 0.0, 0.0, -0.005558013916015625, 0.0, -0.0022039413452148438, -1.9073486328125e-06, -0.0003743161796592176, 0.0, -0.2747306823730469, -0.052799224853515625, -0.0015411376953125, -5.7220458984375e-06, -1.33514404296875e-05, -0.0006055831909179688, -3.814697265625e-06, -0.3582090139389038, -0.10071671009063721, -1.9073486328125e-06, -9.5367431640625e-06, -0.00128936767578125], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(Give(AuraUntil(ManaChange(-3),\n            GreaterThan(Count(MinionSelector(MinionSelector(IsType(\n            MINION_TYPE.BEAST)))), value=0))), MinionSelector(IsMinion()))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Aura", "Until", "<EOS>", 206, 48, 111, 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 205, 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -6.910216555448287, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mal'Ganis", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "func": {"id": "ManaChange", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template19", "hole2": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "hole1": {"id": "AuraUntil", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template19", "hole1": {"id": "Adjacent", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 7, "hole0": 9}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -3.4332275390625e-05, -0.0004557558859232813, -2.8967857360839844e-05, -7.599592208862305e-06, -1.5139577953959815e-05, 0.0, 0.0, -8.392333984375e-05, -7.62939453125e-06, -7.62939453125e-06, -0.006359100341796875, 0.0, -0.0001201629638671875, -1.9073486328125e-05, 0.0, -1.7762184143066406e-05, -2.6702880859375e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.007324812468141317, -1.9073486328125e-06, -0.000102996826171875, 0.0, -0.00018310546875, 0.0, -2.110004425048828e-05, -1.9073486328125e-06, -0.003658294677734375, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002843141555786133, -7.62939453125e-06, -0.05599498748779297, -0.00029754638671875, -0.0001506805419921875, -0.02945077419281006, -1.1920928244535389e-07, -7.641315460205078e-05, -6.67572021484375e-05, -4.839896791963838e-05, -3.814697265625e-06, -5.7220458984375e-05, -0.013896942138671875, -6.4849853515625e-05, -4.768370445162873e-07, -3.099436753473128e-06, -7.390969585685525e-06, 0.0, -0.0003497600555419922, 0.0, -0.0004024505615234375, -2.47955322265625e-05, -0.0003923176846001297, -0.0001049041748046875, -3.814697265625e-06, -0.7298812866210938, -1.1177396774291992, -0.04786181449890137, -0.0006924867630004883, -2.288818359375e-05, -0.0001163482666015625, -0.4468872547149658, -0.08611893653869629, -0.000209808349609375, -0.035796165466308594, -0.4740943908691406, -1.1444091796875e-05, -3.4332275390625e-05, -1.9073486328125e-06, -0.757510781288147, -6.103515625e-05, 0.0, -7.62939453125e-06, -0.06330490112304688, -0.0004558563232421875, -0.001659393310546875, -0.36462879180908203, -0.00296783447265625, -0.009532928466796875, -0.001758575439453125, 0.0, -0.006028175354003906, -0.000308990478515625, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001125335693359375, -0.00063323974609375, -0.0036394596099853516, -1.1920928244535389e-07, -4.38690185546875e-05, 0.0, -0.00556182861328125, -3.254413604736328e-05, -0.0002689361572265625, -0.0061817169189453125, -0.6583518981933594, -0.0017795562744140625, -0.20124995708465576, -0.01729106903076172, 0.0, -6.29425048828125e-05, -5.7220458984375e-06, -0.000244140625, -4.1961669921875e-05, 0.0, -0.0002002716064453125, -1.52587890625e-05, 0.0, -0.0006875991821289062, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -0.04499244689941406, -5.7220458984375e-06, -0.0003261566162109375, 0.0, 0.0, -0.005558013916015625, 0.0, -0.0022039413452148438, -1.9073486328125e-06, -0.0003743161796592176, 0.0, -0.2747306823730469, -0.052799224853515625, -0.0015411376953125, -5.7220458984375e-06, -1.33514404296875e-05, -0.0006055831909179688, -3.814697265625e-06, -1.360608458518982, -2.2649765014648438e-06, -3.814697265625e-06, -0.0019989013671875], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(Give(AuraUntil(ManaChange(-3),\n            GreaterThan(Count(MinionSelector(MinionSelector(IsType(\n            MINION_TYPE.BEAST)))), value=0))), MinionSelector(Adjacent()))])\n", "choice_history": [77, 145, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mal'Ganis", "<EOS>", 55, 138, "9", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Aura", "Until", "<EOS>", 206, 48, 111, 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 205, 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Adjacent", "<EOS>", 205, 71]}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"score": -1.0746264715355736, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -0.736709475517273, -0.006456472910940647, -0.04193305969238281, -1.1444091796875e-05, -0.18040180206298828, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, -0.000972747802734375], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Kill(),\n            SelfSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -2.3075156013158065, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Increasethat"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -1.643513560295105, -0.03213220089673996, -0.4993051290512085, -0.0002689361572265625, -9.5367431640625e-06, -0.023791790008544922, -2.110004425048828e-05, 0.0, -1.33514404296875e-05, -0.0003299713134765625], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(\n            Increasethat(), HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "that", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -2.7576918859642845, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -0.736709475517273, -0.006456472910940647, -0.04193305969238281, -1.1444091796875e-05, -1.863905906677246, -9.5367431640625e-06, 0.0, -1.33514404296875e-05, -0.000522613525390625], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Kill(),\n            HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -3.0098095859077674, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Resurrectthat"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -2.080866813659668, -0.4853006601333618, -0.22182826697826385, -0.0002346038818359375, -1.71661376953125e-05, -0.11311924457550049, -3.4332275390625e-05, 0.0, -1.1444091796875e-05, -0.00026702880859375], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(\n            Resurrectthat(), HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Resurrect", "that", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -3.3770994121816855, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>thatWithHand"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -1.9362066984176636, -0.19298937916755676, -0.5989399552345276, -0.5351018905639648, -0.0006042718887329102, -9.1552734375e-05, -1.9073486328125e-06, -0.0044748783111572266, -3.814697265625e-06, 0.0, -7.62939453125e-06, -0.0005474090576171875], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(\n            <UNK>thatWithHand(), PlayerSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "<UNK>", "that", "With", "Hand", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -3.5053788224843245, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreasethatWithHand"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -1.643513560295105, -0.03213220089673996, -1.1809161901474, -0.529471755027771, -0.0006921291351318359, -8.392333984375e-05, -1.9073486328125e-06, -0.009975552558898926, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0004520416259765625], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(\n            IncreasethatWithHand(), PlayerSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "that", "With", "Hand", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -3.5205461109665137, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Resurrect<UNK>"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -2.080866813659668, -0.9960371851921082, -0.22182826697826385, -0.0002346038818359375, -1.71661376953125e-05, -0.11311924457550049, -3.4332275390625e-05, 0.0, -1.1444091796875e-05, -0.00026702880859375], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(\n            Resurrect<UNK>(), HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Resurrect", "<UNK>", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.09226162979872, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>that"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -1.9362066984176636, -0.19298937916755676, -1.8128939867019653, -0.0008220672607421875, -3.814697265625e-06, -0.04046773910522461, -2.3126602172851562e-05, 0.0, -5.7220458984375e-06, -0.0007190704345703125], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(<UNK>that(\n            ), HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "<UNK>", "that", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.174035267760026, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -3.5184593200683594, -6.29425048828125e-05, -0.19226090610027313, -0.0011610755464062095, -0.07512570172548294, -4.5776185288559645e-05, -0.0039520263671875, -4.76837158203125e-05, -0.3206443786621094, -7.2479248046875e-05, 0.0, -5.14984130859375e-05, -0.0002899169921875], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Damage(1),\n            HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.795384215810607, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>Pain"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -1.9362066984176636, -2.2144243717193604, -0.46841979026794434, -0.000293731689453125, -2.6702880859375e-05, -0.06751859188079834, -1.33514404296875e-05, 0.0, -5.7220458984375e-06, -0.0003452301025390625], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(<UNK>Pain(\n            ), HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "<UNK>", "Pain", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.927717592255483, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -0.736709475517273, -0.006456472910940647, -3.197742462158203, -0.017822265625, -0.7404336929321289, -0.0002002716064453125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.023276329040527344, -0.09441554546356201, -1.52587890625e-05, -1.71661376953125e-05, -0.002483367919921875], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Kill(),\n            TargetSelector(IsMinion())))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 59, 155, "Target", "Selector", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 205, 71]}, {"score": -5.018784927823852, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Heal"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -4.0349273681640625, -0.708649754524231, -0.000396728515625, -5.7220458984375e-05, -0.16617178916931152, -2.09808349609375e-05, 0.0, -1.9073486328125e-05, -0.0004119873046875], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(),\n            HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Heal", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -5.026313441493706, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>thatWithHeal"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -1.9362066984176636, -0.19298937916755676, -0.5989399552345276, -2.0981926918029785, -4.768370445162873e-07, -3.0517578125e-05, -9.5367431640625e-06, -0.09128963947296143, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.000514984130859375], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(\n            <UNK>thatWithHeal(), PlayerSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "<UNK>", "that", "With", "Heal", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -5.241861476251195, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>thatHero"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -0.04608154296875, -0.000186920166015625, -1.9362066984176636, -0.19298937916755676, -2.3368630409240723, -0.01853376254439354, -0.0001678466796875, -3.814697265625e-06, -0.6480304002761841, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, -0.0009212493896484375], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(\n            <UNK>thatHero(), HeroSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "<UNK>", "that", "Hero", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -5.301338373117012, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "MistressOfPain", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Template33"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Damaged"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.0008537700050510466, -0.001353658502921462, -0.0015973548870533705, -2.622600959512056e-06, -1.259148120880127e-06, -8.344650268554688e-06, -2.3841830625315197e-06, 0.0, -9.1552734375e-05, -5.7220458984375e-06, -3.0517578125e-05, -2.288818359375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.602820692729438e-06, -6.401538848876953e-05, -3.397464024601504e-05, -0.00028443336486816406, -1.3470647900248878e-05, 0.0, -0.0002269744873046875, -5.7220458984375e-06, -3.814697265625e-06, -7.43865966796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.006298065185546875, -3.576278118089249e-07, -7.62939453125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -0.0022660493850708008, -1.1920928244535389e-07, -7.2479248046875e-05, -0.0002994537353515625, -9.5367431640625e-06, -0.0020444393157958984, -2.3841855067985307e-07, -0.000156402587890625, -3.62396240234375e-05, -0.00014328924589790404, -1.1920928244535389e-07, -1.52587890625e-05, -0.014108657836914062, -7.62939453125e-05, -0.0021266937255859375, -6.5565000113565475e-06, -4.4107433495810255e-05, -8.344646857949556e-07, -0.00014328956604003906, -3.814697265625e-06, -0.0002994537353515625, -0.0014705657958984375, -4.267692202120088e-05, -1.1920928244535389e-07, -7.62939453125e-06, -0.0001697540283203125, -0.00078582763671875, -0.023585796356201172, -0.0017385482788085938, -0.000835418701171875, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0001277923583984375, -0.0001125335693359375, 0.0, -3.0517578125e-05, -4.732483863830566, -0.0003833770751953125, -5.7220458984375e-06, -1.52587890625e-05, -0.0035359091125428677, -0.00014448071306105703, -2.86102294921875e-05, -0.001018524169921875, -2.86102294921875e-05, -0.0066890716552734375, -0.000213623046875, -7.43865966796875e-05, -6.699561345158145e-05, -8.20159912109375e-05, -1.9073486328125e-06, 0.0, -0.0021293163299560547, -0.19195422530174255, -1.9073486328125e-06, -0.0006580352783203125, -0.05044841766357422, -0.008646011352539062, -0.00060272216796875, -0.002809762954711914, -2.8848648071289062e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.0012322664260864258, -0.002165078418329358, 0.0, -9.72747802734375e-05, -0.12729930877685547, -0.0063323974609375, -6.29425048828125e-05, -7.62939453125e-06, -0.07416987419128418, -2.6941299438476562e-05, -9.5367431640625e-06, -2.288818359375e-05, -0.0259857177734375], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Give([Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\n", "choice_history": [77, 145, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Mistress", " ", "of", " ", "Pain", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Damaged", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"score": -4.828561378063746, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.0607194900512695, 0.0, -0.0018596649169921875, -3.814697265625e-06, -0.4325399398803711, 0.0, -5.364284152165055e-05, 0.0, -1.33514404296875e-05, -0.009561538696289062, -0.0004405975341796875, -0.00011944499419769272, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.523456199327484e-05, 0.0, -0.1074380874633789, -9.5367431640625e-06, -1.9073486328125e-06, -0.08085155487060547, 0.0, -0.010692596435546875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.003726959228515625, -5.7220458984375e-06, -4.38690185546875e-05, -0.2217578887939453, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.02356255054473877, -3.230571746826172e-05, -0.0001544952392578125, -0.0025959014892578125, -8.20159912109375e-05, -0.06988906860351562, -0.004367828369140625, -0.000377655029296875, -0.004516720771789551, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6354973316192627, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001220703125, -2.6702880859375e-05, -0.0516815185546875, -0.04225337505340576, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1905742883682251, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.0018329620361328125, -0.7179479598999023, -0.0019339323043823242, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.1666911244392395, -0.14484040439128876, -0.06708335876464844, -7.82012939453125e-05, -0.1242532730102539, -0.000453948974609375, 0.0, -0.002091646194458008, -5.841255187988281e-06, -8.20159912109375e-05, -3.814697265625e-06, -0.15550804138183594, -8.7738037109375e-05, -0.000228762612096034, -0.0001811981201171875, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -0.00325775146484375, -1.9073486328125e-06, -0.0008497238159179688, -1.1444091796875e-05, -0.027124762535095215, -0.0002143383026123047, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.28875553607940674, 0.0, -0.009881973266601562, -0.00087738037109375, -0.0006954669952392578, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE\n            )\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.06350007345754, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "SHAMAN", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.406682014465332, 0.0, -0.0037403106689453125, -5.7220458984375e-06, -0.3274660110473633, 0.0, -5.2927622164133936e-05, 0.0, -1.1444091796875e-05, -0.005886077880859375, -0.000579833984375, -0.0001279081916436553, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.571139187552035e-05, 0.0, -0.10769271850585938, -9.5367431640625e-06, -1.9073486328125e-06, -0.07676219940185547, 0.0, -0.010634422302246094, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0036983489990234375, -5.7220458984375e-06, -4.38690185546875e-05, -0.2226886749267578, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023861169815063477, -3.230571746826172e-05, -0.000152587890625, -0.0025873184204101562, -8.20159912109375e-05, -0.06982898712158203, -0.0044116973876953125, -0.0003795623779296875, -0.004522562026977539, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6353342533111572, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001220703125, -2.6702880859375e-05, -0.05166816711425781, -0.04225516319274902, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.19037401676177979, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.0018329620361328125, -0.7172555923461914, -0.0019358396530151367, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.1666848063468933, -0.14487183094024658, -0.06715965270996094, -7.82012939453125e-05, -0.12386322021484375, -0.000453948974609375, 0.0, -0.0020935535430908203, -5.841255187988281e-06, -8.20159912109375e-05, -3.814697265625e-06, -0.15550994873046875, -8.7738037109375e-05, -0.000228762612096034, -0.0001811981201171875, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -0.00325775146484375, -1.9073486328125e-06, -0.000850677490234375, -1.1444091796875e-05, -0.026982665061950684, -0.0002143383026123047, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.28866779804229736, 0.0, -0.009869575500488281, -0.0008792877197265625, -0.0006935596466064453, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "SHAMAN", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.096561950997689, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.5068082809448242, 0.0, -0.0028553009033203125, -1.9073486328125e-06, -0.2421436309814453, 0.0, -4.42257514805533e-05, 0.0, -1.33514404296875e-05, -0.008213043212890625, -0.000705718994140625, -0.0001269547501578927, -2.0265558760002023e-06, 0.0, -1.1920928244535389e-07, -8.499614341417328e-05, 0.0, -0.11161231994628906, -9.5367431640625e-06, -1.9073486328125e-06, -0.09797060489654541, 0.0, -0.00933074951171875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0033779144287109375, -7.62939453125e-06, -4.38690185546875e-05, -0.22300148010253906, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023831486701965332, -3.230571746826172e-05, -0.0001506805419921875, -0.002590179443359375, -8.20159912109375e-05, -0.0697031021118164, -0.0045528411865234375, -0.000385284423828125, -0.00449979305267334, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6373740434646606, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001239776611328125, -2.6702880859375e-05, -0.05183219909667969, -0.0423659086227417, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1879974603652954, 0.0, -1.9073486328125e-06, -0.000301361083984375, -0.0018405914306640625, -0.7129878997802734, -0.0019491910934448242, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.16659745573997498, -0.14483903348445892, -0.06714248657226562, -7.82012939453125e-05, -0.12476348876953125, -0.0004558563232421875, 0.0, -0.002111673355102539, -5.841255187988281e-06, -8.20159912109375e-05, -3.814697265625e-06, -0.15607643127441406, -8.7738037109375e-05, -0.000228762612096034, -0.00018310546875, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -0.0032548904418945312, -1.9073486328125e-06, -0.0008525848388671875, -1.1444091796875e-05, -0.026540160179138184, -0.0002124309539794922, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.2852517366409302, 0.0, -0.009591102600097656, -0.000888824462890625, -0.000691533088684082, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.144766574146338, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.0607194900512695, 0.0, -0.0018596649169921875, -3.814697265625e-06, -0.4325399398803711, 0.0, -5.364284152165055e-05, 0.0, -1.33514404296875e-05, -0.009561538696289062, -0.0004405975341796875, -0.00011944499419769272, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.523456199327484e-05, 0.0, -0.1074380874633789, -9.5367431640625e-06, -1.9073486328125e-06, -0.08085155487060547, 0.0, -0.010692596435546875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.003726959228515625, -5.7220458984375e-06, -4.38690185546875e-05, -0.2217578887939453, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.02356255054473877, -3.230571746826172e-05, -0.0001544952392578125, -0.0025959014892578125, -8.20159912109375e-05, -0.06988906860351562, -0.004367828369140625, -0.000377655029296875, -0.004516720771789551, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.7564022541046143, 0.0, -7.2479248046875e-05, -0.0008335113525390625, -0.0001163482666015625, -0.011892318725585938, -0.05124175548553467, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -6.115436553955078e-05, -0.6349635124206543, -1.52587890625e-05, -2.09808349609375e-05, -0.00018310546875, -0.000133514404296875, -0.3875417709350586, -0.005188941955566406, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -0.19537003338336945, -0.08190008252859116, -0.13756942749023438, -0.0001010894775390625, -0.22092533111572266, -0.000331878662109375, 0.0, -0.0019866228103637695, -5.841255187988281e-06, -8.392333984375e-05, -3.814697265625e-06, -0.14026832580566406, -8.392333984375e-05, -0.00021708010172005743, -0.0001850128173828125, -4.38690185546875e-05, 0.0, -3.814697265625e-06, -0.0036077499389648438, -1.9073486328125e-06, -0.0009164810180664062, -1.1444091796875e-05, -0.028945565223693848, -0.0002256631851196289, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.2788259983062744, 0.0, -0.009985923767089844, -0.000865936279296875, -0.0007088184356689453, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE\n            )\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.379989531541646, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "SHAMAN", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.406682014465332, 0.0, -0.0037403106689453125, -5.7220458984375e-06, -0.3274660110473633, 0.0, -5.2927622164133936e-05, 0.0, -1.1444091796875e-05, -0.005886077880859375, -0.000579833984375, -0.0001279081916436553, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.571139187552035e-05, 0.0, -0.10769271850585938, -9.5367431640625e-06, -1.9073486328125e-06, -0.07676219940185547, 0.0, -0.010634422302246094, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0036983489990234375, -5.7220458984375e-06, -4.38690185546875e-05, -0.2226886749267578, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023861169815063477, -3.230571746826172e-05, -0.000152587890625, -0.0025873184204101562, -8.20159912109375e-05, -0.06982898712158203, -0.0044116973876953125, -0.0003795623779296875, -0.004522562026977539, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.7565853595733643, 0.0, -7.2479248046875e-05, -0.00083160400390625, -0.0001163482666015625, -0.01189422607421875, -0.05124080181121826, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -6.115436553955078e-05, -0.6347851753234863, -1.52587890625e-05, -2.09808349609375e-05, -0.00018310546875, -0.000133514404296875, -0.38706207275390625, -0.005199432373046875, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.19535663723945618, -0.08190694451332092, -0.1377582550048828, -0.0001010894775390625, -0.2201089859008789, -0.0003337860107421875, 0.0, -0.001988530158996582, -5.841255187988281e-06, -8.392333984375e-05, -3.814697265625e-06, -0.14029693603515625, -8.392333984375e-05, -0.00021708010172005743, -0.0001850128173828125, -4.38690185546875e-05, 0.0, -3.814697265625e-06, -0.0036077499389648438, -1.9073486328125e-06, -0.0009174346923828125, -1.1444091796875e-05, -0.028811216354370117, -0.0002256631851196289, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.2787353992462158, 0.0, -0.00997161865234375, -0.0008678436279296875, -0.0007069110870361328, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "SHAMAN", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.4141623130005385, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.5068082809448242, 0.0, -0.0028553009033203125, -1.9073486328125e-06, -0.2421436309814453, 0.0, -4.42257514805533e-05, 0.0, -1.33514404296875e-05, -0.008213043212890625, -0.000705718994140625, -0.0001269547501578927, -2.0265558760002023e-06, 0.0, -1.1920928244535389e-07, -8.499614341417328e-05, 0.0, -0.11161231994628906, -9.5367431640625e-06, -1.9073486328125e-06, -0.09797060489654541, 0.0, -0.00933074951171875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0033779144287109375, -7.62939453125e-06, -4.38690185546875e-05, -0.22300148010253906, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023831486701965332, -3.230571746826172e-05, -0.0001506805419921875, -0.002590179443359375, -8.20159912109375e-05, -0.0697031021118164, -0.0045528411865234375, -0.000385284423828125, -0.00449979305267334, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.7542887926101685, 0.0, -7.2479248046875e-05, -0.0008373260498046875, -0.000118255615234375, -0.011934280395507812, -0.05118262767791748, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -6.115436553955078e-05, -0.6348443031311035, -1.52587890625e-05, -2.09808349609375e-05, -0.0001850128173828125, -0.000133514404296875, -0.38522815704345703, -0.005228996276855469, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -0.19523334503173828, -0.08198554068803787, -0.13795757293701172, -0.0001010894775390625, -0.22161483764648438, -0.0003337860107421875, 0.0, -0.0020066499710083008, -5.841255187988281e-06, -8.392333984375e-05, -3.814697265625e-06, -0.1408538818359375, -8.392333984375e-05, -0.00021708010172005743, -0.0001850128173828125, -4.38690185546875e-05, 0.0, -3.814697265625e-06, -0.0036039352416992188, -1.9073486328125e-06, -0.000919342041015625, -1.1444091796875e-05, -0.02840876579284668, -0.0002237558364868164, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.27525341510772705, 0.0, -0.009688377380371094, -0.00087738037109375, -0.000706791877746582, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.4711608554531, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.0607194900512695, 0.0, -0.0018596649169921875, -3.814697265625e-06, -1.076089859008789, 0.0, -0.0010665946174412966, 0.0, -3.24249267578125e-05, -0.0002994537353515625, -0.00031280517578125, -0.00014197398559190333, -1.5497195136049413e-06, 0.0, -1.1920928244535389e-07, -7.72474886616692e-05, 0.0, -0.13083362579345703, -9.5367431640625e-06, -1.9073486328125e-06, -0.06139051914215088, 0.0, -0.01160430908203125, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0042095184326171875, -5.7220458984375e-06, -4.76837158203125e-05, -0.21835899353027344, -1.52587890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023304343223571777, -3.218650817871094e-05, -0.0001583099365234375, -0.0025739669799804688, -8.0108642578125e-05, -0.06942939758300781, -0.0040740966796875, -0.000370025634765625, -0.004631161689758301, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.263618378288811e-05, -0.6343493461608887, -1.1444091796875e-05, -2.288818359375e-05, -0.0001201629638671875, -2.6702880859375e-05, -0.051624298095703125, -0.042127370834350586, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1929394006729126, 0.0, -1.9073486328125e-06, -0.0002956390380859375, -0.00182342529296875, -0.719761848449707, -0.0019224882125854492, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.16693651676177979, -0.14479932188987732, -0.06718826293945312, -8.0108642578125e-05, -0.12261581420898438, -0.0004520416259765625, 0.0, -0.0020592212677001953, -5.841255187988281e-06, -8.20159912109375e-05, -3.814697265625e-06, -0.1545085906982422, -8.7738037109375e-05, -0.000228762612096034, -0.0001811981201171875, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -0.0032596588134765625, -1.9073486328125e-06, -0.0008449554443359375, -1.1444091796875e-05, -0.02759683132171631, -0.0002142190933227539, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.2936222553253174, 0.0, -0.010477066040039062, -0.000873565673828125, -0.0006878376007080078, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE\n            )\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.786519859294977, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.0607194900512695, 0.0, -0.0018596649169921875, -3.814697265625e-06, -1.076089859008789, 0.0, -0.0010665946174412966, 0.0, -3.24249267578125e-05, -0.0002994537353515625, -0.00031280517578125, -0.00014197398559190333, -1.5497195136049413e-06, 0.0, -1.1920928244535389e-07, -7.72474886616692e-05, 0.0, -0.13083362579345703, -9.5367431640625e-06, -1.9073486328125e-06, -0.06139051914215088, 0.0, -0.01160430908203125, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0042095184326171875, -5.7220458984375e-06, -4.76837158203125e-05, -0.21835899353027344, -1.52587890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023304343223571777, -3.218650817871094e-05, -0.0001583099365234375, -0.0025739669799804688, -8.0108642578125e-05, -0.06942939758300781, -0.0040740966796875, -0.000370025634765625, -0.004631161689758301, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.263618378288811e-05, -0.7576994895935059, 0.0, -7.2479248046875e-05, -0.000823974609375, -0.00011444091796875, -0.011888504028320312, -0.05157470703125, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -6.115436553955078e-05, -0.6361880302429199, -1.52587890625e-05, -2.09808349609375e-05, -0.0001811981201171875, -0.000133514404296875, -0.38778114318847656, -0.005168914794921875, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -0.1955849528312683, -0.0815827026963234, -0.13750648498535156, -0.000102996826171875, -0.2187042236328125, -0.000331878662109375, 0.0, -0.001955270767211914, -5.841255187988281e-06, -8.392333984375e-05, -3.814697265625e-06, -0.13923168182373047, -8.392333984375e-05, -0.00021708010172005743, -0.0001850128173828125, -4.38690185546875e-05, 0.0, -3.814697265625e-06, -0.003612518310546875, -1.9073486328125e-06, -0.000911712646484375, -1.1444091796875e-05, -0.029352784156799316, -0.0002256631851196289, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.283764123916626, 0.0, -0.010583877563476562, -0.00086212158203125, -0.0007011890411376953, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE\n            )\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.053487380387374, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.0607194900512695, 0.0, -0.0018596649169921875, -3.814697265625e-06, -0.4325399398803711, 0.0, -5.364284152165055e-05, 0.0, -1.33514404296875e-05, -0.009561538696289062, -0.0004405975341796875, -0.00011944499419769272, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.523456199327484e-05, 0.0, -0.1074380874633789, -9.5367431640625e-06, -1.9073486328125e-06, -0.08085155487060547, 0.0, -0.010692596435546875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.003726959228515625, -5.7220458984375e-06, -4.38690185546875e-05, -0.2217578887939453, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.02356255054473877, -3.230571746826172e-05, -0.0001544952392578125, -0.0025959014892578125, -8.20159912109375e-05, -0.06988906860351562, -0.004367828369140625, -0.000377655029296875, -0.004516720771789551, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6354973316192627, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001220703125, -2.6702880859375e-05, -0.0516815185546875, -0.04225337505340576, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1905742883682251, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.0018329620361328125, -0.6700162887573242, -0.15289783477783203, -4.172325134277344e-06, -5.7220458984375e-06, 0.0, -8.428096771240234e-05, -0.0778127908706665, 0.0, -2.09808349609375e-05, -0.000652313232421875, -0.0041980743408203125, -1.0153083801269531, -0.08261656016111374, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -7.736682891845703e-05, -0.04184424877166748, 0.0, -3.4332275390625e-05, -0.00146484375, -0.02532958984375, -0.2254486083984375, -0.0011959075927734375, 0.0, -0.0017080307006835938, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.4427776336669922, -8.58306884765625e-05, -0.00013959406351204962, -0.00016021728515625, -0.0001201629638671875, -1.9073486328125e-06, -3.814697265625e-06, -0.007173895835876465, -3.814697265625e-06, -0.0010929107666015625, -2.09808349609375e-05, -0.011709451675415039, -0.00018644332885742188, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -0.15876734256744385, 0.0, -0.012915611267089844, -0.0012493133544921875, -0.0009340047836303711, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE\n            )\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(\n            ChangeHealth(2))]), MinionSelector(Null, picker=RandomPicker())\n            ), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.2909109189160475, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "SHAMAN", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.406682014465332, 0.0, -0.0037403106689453125, -5.7220458984375e-06, -0.3274660110473633, 0.0, -5.2927622164133936e-05, 0.0, -1.1444091796875e-05, -0.005886077880859375, -0.000579833984375, -0.0001279081916436553, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.571139187552035e-05, 0.0, -0.10769271850585938, -9.5367431640625e-06, -1.9073486328125e-06, -0.07676219940185547, 0.0, -0.010634422302246094, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0036983489990234375, -5.7220458984375e-06, -4.38690185546875e-05, -0.2226886749267578, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023861169815063477, -3.230571746826172e-05, -0.000152587890625, -0.0025873184204101562, -8.20159912109375e-05, -0.06982898712158203, -0.0044116973876953125, -0.0003795623779296875, -0.004522562026977539, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6353342533111572, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001220703125, -2.6702880859375e-05, -0.05166816711425781, -0.04225516319274902, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.19037401676177979, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.0018329620361328125, -0.6706781387329102, -0.1530160903930664, -4.172325134277344e-06, -5.7220458984375e-06, 0.0, -8.428096771240234e-05, -0.07777082920074463, 0.0, -2.09808349609375e-05, -0.000652313232421875, -0.004199981689453125, -1.015829086303711, -0.0826946422457695, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -7.736682891845703e-05, -0.041809916496276855, 0.0, -3.4332275390625e-05, -0.00146484375, -0.025186538696289062, -0.2251720428466797, -0.0011959075927734375, 0.0, -0.0017070770263671875, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.44293212890625, -8.58306884765625e-05, -0.00013959406351204962, -0.00016021728515625, -0.0001201629638671875, -1.9073486328125e-06, -3.814697265625e-06, -0.007168173789978027, -3.814697265625e-06, -0.0010929107666015625, -2.09808349609375e-05, -0.011696100234985352, -0.00018644332885742188, 0.0, -4.1961669921875e-05, -3.814697265625e-06, -0.15904104709625244, 0.0, -0.012894630432128906, -0.0012493133544921875, -0.0009301900863647461, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(\n            ChangeHealth(2))]), MinionSelector(Null, picker=RandomPicker())\n            ), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "SHAMAN", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.335054834739545, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.5068082809448242, 0.0, -0.0028553009033203125, -1.9073486328125e-06, -0.2421436309814453, 0.0, -4.42257514805533e-05, 0.0, -1.33514404296875e-05, -0.008213043212890625, -0.000705718994140625, -0.0001269547501578927, -2.0265558760002023e-06, 0.0, -1.1920928244535389e-07, -8.499614341417328e-05, 0.0, -0.11161231994628906, -9.5367431640625e-06, -1.9073486328125e-06, -0.09797060489654541, 0.0, -0.00933074951171875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0033779144287109375, -7.62939453125e-06, -4.38690185546875e-05, -0.22300148010253906, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023831486701965332, -3.230571746826172e-05, -0.0001506805419921875, -0.002590179443359375, -8.20159912109375e-05, -0.0697031021118164, -0.0045528411865234375, -0.000385284423828125, -0.00449979305267334, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6373740434646606, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001239776611328125, -2.6702880859375e-05, -0.05183219909667969, -0.0423659086227417, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1879974603652954, 0.0, -1.9073486328125e-06, -0.000301361083984375, -0.0018405914306640625, -0.6747703552246094, -0.152787446975708, -4.172325134277344e-06, -5.7220458984375e-06, 0.0, -8.428096771240234e-05, -0.07720434665679932, 0.0, -2.09808349609375e-05, -0.0006580352783203125, -0.004207611083984375, -1.018768310546875, -0.08251630514860153, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -7.736682891845703e-05, -0.04177558422088623, 0.0, -3.4332275390625e-05, -0.0014705657958984375, -0.025255203247070312, -0.22698688507080078, -0.0012073516845703125, 0.0, -0.001705169677734375, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.44165611267089844, -8.58306884765625e-05, -0.00013959406351204962, -0.00016021728515625, -0.0001201629638671875, -1.9073486328125e-06, -3.814697265625e-06, -0.007160544395446777, -3.814697265625e-06, -0.0010957717895507812, -2.09808349609375e-05, -0.011698007583618164, -0.00018644332885742188, 0.0, -4.38690185546875e-05, -3.814697265625e-06, -0.15675604343414307, 0.0, -0.01255035400390625, -0.0012645721435546875, -0.0009320974349975586, -2.3841855067985307e-07], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(\n            ChangeHealth(2))]), MinionSelector(Null, picker=RandomPicker())\n            ), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.35058291012249, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.0607194900512695, 0.0, -0.0018596649169921875, -3.814697265625e-06, -0.4325399398803711, 0.0, -5.364284152165055e-05, 0.0, -1.33514404296875e-05, -0.009561538696289062, -0.0004405975341796875, -0.00011944499419769272, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.523456199327484e-05, 0.0, -0.1074380874633789, -9.5367431640625e-06, -1.9073486328125e-06, -0.08085155487060547, 0.0, -0.010692596435546875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.003726959228515625, -5.7220458984375e-06, -4.38690185546875e-05, -0.2217578887939453, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.02356255054473877, -3.230571746826172e-05, -0.0001544952392578125, -0.0025959014892578125, -8.20159912109375e-05, -0.06988906860351562, -0.004367828369140625, -0.000377655029296875, -0.004516720771789551, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6354973316192627, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001220703125, -2.6702880859375e-05, -0.0516815185546875, -0.04225337505340576, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1905742883682251, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.0018329620361328125, -0.7179479598999023, -0.0019339323043823242, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.1666911244392395, -0.14484040439128876, -0.06708335876464844, -7.82012939453125e-05, -0.1242532730102539, -0.000453948974609375, 0.0, -0.002091646194458008, -5.841255187988281e-06, -8.20159912109375e-05, -3.814697265625e-06, -0.15550804138183594, -8.7738037109375e-05, -0.000228762612096034, -0.0001811981201171875, -4.76837158203125e-05, 0.0, -3.814697265625e-06, -0.00325775146484375, -1.9073486328125e-06, -0.0008497238159179688, -1.1444091796875e-05, -0.027124762535095215, -0.0002143383026123047, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -2.6039223670959473, 0.0, -0.0053234100341796875, -1.33514404296875e-05, -0.21294045448303223, -3.254413604736328e-05, 0.0], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE\n            )\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(Mech())]), MinionSelector(\n            Null, picker=RandomPicker())), players=BothPlayer())\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>"]}, {"score": -7.548931439308234, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.0607194900512695, 0.0, -0.0018596649169921875, -3.814697265625e-06, -0.4325399398803711, 0.0, -5.364284152165055e-05, 0.0, -1.33514404296875e-05, -0.009561538696289062, -0.0004405975341796875, -0.00011944499419769272, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.523456199327484e-05, 0.0, -0.1074380874633789, -9.5367431640625e-06, -1.9073486328125e-06, -0.08085155487060547, 0.0, -0.010692596435546875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.003726959228515625, -5.7220458984375e-06, -4.38690185546875e-05, -0.2217578887939453, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.02356255054473877, -3.230571746826172e-05, -0.0001544952392578125, -0.0025959014892578125, -8.20159912109375e-05, -0.06988906860351562, -0.004367828369140625, -0.000377655029296875, -0.004516720771789551, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6354973316192627, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001220703125, -2.6702880859375e-05, -0.0516815185546875, -0.04225337505340576, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1905742883682251, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.0018329620361328125, -0.6700162887573242, -0.15289783477783203, -4.172325134277344e-06, -5.7220458984375e-06, 0.0, -8.428096771240234e-05, -0.0778127908706665, 0.0, -2.09808349609375e-05, -0.000652313232421875, -0.0041980743408203125, -1.0153083801269531, -0.08261656016111374, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -7.736682891845703e-05, -0.04184424877166748, 0.0, -3.4332275390625e-05, -0.00146484375, -0.02532958984375, -0.2254486083984375, -0.0011959075927734375, 0.0, -0.0017080307006835938, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.042074203491211, -4.00543212890625e-05, -5.7220458984375e-06, 0.0, -0.0012899632565677166, -2.9206275939941406e-05, 0.0, -7.2479248046875e-05, -0.0007266998291015625, -3.814697265625e-06, -0.00029754638671875, 0.0, -0.0002803802490234375, -1.1920928244535389e-07, -0.0007352828979492188, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.02814304828643799, 0.0, -0.0008897781372070312, -2.86102294921875e-05, -0.572293758392334, -0.0001399517059326172, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.46435678005218506, 0.0, -0.019189834594726562, -0.0015716552734375, -0.0005763769149780273, 0.0], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE\n            )\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(\n            ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH),\n            picker=UserPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.7853830644992, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "SHAMAN", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.406682014465332, 0.0, -0.0037403106689453125, -5.7220458984375e-06, -0.3274660110473633, 0.0, -5.2927622164133936e-05, 0.0, -1.1444091796875e-05, -0.005886077880859375, -0.000579833984375, -0.0001279081916436553, -1.7881377516459906e-06, 0.0, -1.1920928244535389e-07, -8.571139187552035e-05, 0.0, -0.10769271850585938, -9.5367431640625e-06, -1.9073486328125e-06, -0.07676219940185547, 0.0, -0.010634422302246094, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0036983489990234375, -5.7220458984375e-06, -4.38690185546875e-05, -0.2226886749267578, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023861169815063477, -3.230571746826172e-05, -0.000152587890625, -0.0025873184204101562, -8.20159912109375e-05, -0.06982898712158203, -0.0044116973876953125, -0.0003795623779296875, -0.004522562026977539, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6353342533111572, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001220703125, -2.6702880859375e-05, -0.05166816711425781, -0.04225516319274902, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.19037401676177979, 0.0, -1.9073486328125e-06, -0.0002994537353515625, -0.0018329620361328125, -0.6706781387329102, -0.1530160903930664, -4.172325134277344e-06, -5.7220458984375e-06, 0.0, -8.428096771240234e-05, -0.07777082920074463, 0.0, -2.09808349609375e-05, -0.000652313232421875, -0.004199981689453125, -1.015829086303711, -0.0826946422457695, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -7.736682891845703e-05, -0.041809916496276855, 0.0, -3.4332275390625e-05, -0.00146484375, -0.025186538696289062, -0.2251720428466797, -0.0011959075927734375, 0.0, -0.0017070770263671875, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.0417957305908203, -4.00543212890625e-05, -5.7220458984375e-06, 0.0, -0.001290797721594572, -2.9206275939941406e-05, 0.0, -7.2479248046875e-05, -0.0007266998291015625, -3.814697265625e-06, -0.00029754638671875, 0.0, -0.0002803802490234375, -1.1920928244535389e-07, -0.0007352828979492188, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.028134465217590332, 0.0, -0.0008897781372070312, -2.86102294921875e-05, -0.5724368095397949, -0.0001399517059326172, 0.0, -3.24249267578125e-05, -3.814697265625e-06, -0.46393048763275146, 0.0, -0.01916790008544922, -0.0015773773193359375, -0.0005744695663452148, 0.0], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(\n            ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH),\n            picker=UserPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "SHAMAN", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.830996711653569, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Powermace", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 3, "hole0": "Powermace"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 2, "hole1": 3, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-1.9073486328125e-05, -0.0005817413330078125, -0.0006921403692103922, -0.000590801180806011, -0.0002802217786666006, -1.4901146641932428e-05, -1.1920928244535389e-07, 0.0, -0.15508747100830078, -4.76837158203125e-05, -4.76837158203125e-06, -3.933906555175781e-06, -8.46386501507368e-06, -1.1920928244535389e-07, -1.5068082809448242, 0.0, -0.0028553009033203125, -1.9073486328125e-06, -0.2421436309814453, 0.0, -4.42257514805533e-05, 0.0, -1.33514404296875e-05, -0.008213043212890625, -0.000705718994140625, -0.0001269547501578927, -2.0265558760002023e-06, 0.0, -1.1920928244535389e-07, -8.499614341417328e-05, 0.0, -0.11161231994628906, -9.5367431640625e-06, -1.9073486328125e-06, -0.09797060489654541, 0.0, -0.00933074951171875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0033779144287109375, -7.62939453125e-06, -4.38690185546875e-05, -0.22300148010253906, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.023831486701965332, -3.230571746826172e-05, -0.0001506805419921875, -0.002590179443359375, -8.20159912109375e-05, -0.0697031021118164, -0.0045528411865234375, -0.000385284423828125, -0.00449979305267334, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -1.251697449333733e-05, -0.6373740434646606, -1.1444091796875e-05, -2.09808349609375e-05, -0.0001239776611328125, -2.6702880859375e-05, -0.05183219909667969, -0.0423659086227417, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -0.00012028217315673828, -0.1879974603652954, 0.0, -1.9073486328125e-06, -0.000301361083984375, -0.0018405914306640625, -0.6747703552246094, -0.152787446975708, -4.172325134277344e-06, -5.7220458984375e-06, 0.0, -8.428096771240234e-05, -0.07720434665679932, 0.0, -2.09808349609375e-05, -0.0006580352783203125, -0.004207611083984375, -1.018768310546875, -0.08251630514860153, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -7.736682891845703e-05, -0.04177558422088623, 0.0, -3.4332275390625e-05, -0.0014705657958984375, -0.025255203247070312, -0.22698688507080078, -0.0012073516845703125, 0.0, -0.001705169677734375, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.0441436767578125, -4.00543212890625e-05, -5.7220458984375e-06, 0.0, -0.0012947316281497478, -2.9206275939941406e-05, 0.0, -7.2479248046875e-05, -0.0007266998291015625, -3.814697265625e-06, -0.00029754638671875, 0.0, -0.00028228759765625, -1.1920928244535389e-07, -0.0007352828979492188, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.028146862983703613, 0.0, -0.0008907318115234375, -2.86102294921875e-05, -0.5723147392272949, -0.0001399517059326172, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.459678053855896, 0.0, -0.01874256134033203, -0.0015888214111328125, -0.0005744695663452148, 0.0], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2)), Buff(ChangeHealth(2)), Buff(\n            ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH),\n            picker=UserPicker())), taunt=True)\n", "choice_history": [77, 145, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Powermace", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"score": -3.4050646637933824, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5167269706726074, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.00125885009765625, -0.12436294555664062, -0.02311253547668457, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.5200471878051758, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.001293182373046875, -0.13529205322265625, -0.022348523139953613, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.167194366455078e-05, -0.1144566535949707, 0.0, -1.1444091796875e-05, -8.392333984375e-05, -0.06926727294921875, -0.4646739959716797, -0.0001697540283203125, 0.0, -0.0024967193603515625, -0.0004254579544067383, -5.7220458984375e-06, -1.9073486328125e-06, -0.000701904296875, -0.000545501708984375, -4.1961669921875e-05, 0.0, -0.0003345012664794922, -3.266334533691406e-05, 0.0, -1.71661376953125e-05, -0.0003376007080078125, -1.9073486328125e-06, -0.00067138671875, 0.0, -0.000102996826171875, -1.919269561767578e-05, -0.0007772445678710938, -7.62939453125e-06, -0.00014495849609375, -1.9073486328125e-06, -3.814697265625e-06, -0.0006848573684692383, -5.7220458984375e-06, -0.0038919448852539062, -4.00543212890625e-05, -0.004188656806945801, -0.00017976760864257812, -5.7220458984375e-06, -0.0001506805419921875, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000152587890625, -0.0001983642578125, -0.0001583099365234375, -0.0002317159523954615, 0.0, -1.8835065930034034e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -3.8541087299254286, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Mech", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.9206051826477051, -4.76837158203125e-05, -1.52587890625e-05, -5.340576171875e-05, -0.000423431396484375, -0.39401817321777344, -0.011124849319458008, -1.52587890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.9337399005889893, -0.0185597725212574, -0.1357269287109375, -9.5367431640625e-06, -0.033768653869628906, -5.53131103515625e-05, 0.0, -0.0006389617919921875, -6.496906280517578e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0004749298095703125, -0.0006160736083984375, -3.4332275390625e-05, 0.0, -0.00019788742065429688, -3.0875205993652344e-05, 0.0, -2.6702880859375e-05, -0.000988006591796875, -3.814697265625e-06, -0.00049591064453125, 0.0, -0.0001125335693359375, -2.110004425048828e-05, -0.0008840560913085938, -5.7220458984375e-06, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.0002862215042114258, -3.814697265625e-06, -0.0019321441650390625, -4.57763671875e-05, -0.0028706789016723633, -0.00017452239990234375, -1.9073486328125e-06, -6.103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.000156402587890625, -0.000171661376953125, -0.0001392364501953125, -0.00023719829914625734, 0.0, -1.8835065930034034e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(Mech())]), MinionSelector(IsType(MINION_TYPE.MECH), picker\n            =UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Mech", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -3.957541146841322, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "+2/+2", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.9206051826477051, -4.76837158203125e-05, -1.52587890625e-05, -5.340576171875e-05, -0.000423431396484375, -0.39401817321777344, -0.011124849319458008, -1.52587890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.0371723175048828, -0.0185597725212574, -0.1357269287109375, -9.5367431640625e-06, -0.033768653869628906, -5.53131103515625e-05, 0.0, -0.0006389617919921875, -6.496906280517578e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0004749298095703125, -0.0006160736083984375, -3.4332275390625e-05, 0.0, -0.00019788742065429688, -3.0875205993652344e-05, 0.0, -2.6702880859375e-05, -0.000988006591796875, -3.814697265625e-06, -0.00049591064453125, 0.0, -0.0001125335693359375, -2.110004425048828e-05, -0.0008840560913085938, -5.7220458984375e-06, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.0002862215042114258, -3.814697265625e-06, -0.0019321441650390625, -4.57763671875e-05, -0.0028706789016723633, -0.00017452239990234375, -1.9073486328125e-06, -6.103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.000156402587890625, -0.000171661376953125, -0.0001392364501953125, -0.00023719829914625734, 0.0, -1.8835065930034034e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(+2/+2())]), MinionSelector(IsType(MINION_TYPE.MECH),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "+2/+2", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.069199046631184, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.9206051826477051, -4.76837158203125e-05, -1.52587890625e-05, -5.340576171875e-05, -0.000423431396484375, -1.1243553161621094, -0.03543376922607422, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -0.00012791156768798828, -0.04011988639831543, -1.9073486328125e-06, -9.5367431640625e-06, -7.82012939453125e-05, -0.0013027191162109375, -0.26094627380371094, -0.08115458488464355, -5.841255187988281e-06, -3.814697265625e-06, 0.0, -0.00016796588897705078, -0.04853808879852295, 0.0, -3.62396240234375e-05, -0.0001697540283203125, -0.048130035400390625, -0.09870624542236328, -0.0001811981201171875, 0.0, -0.000728607177734375, -0.00011265277862548828, -7.62939453125e-06, -3.814697265625e-06, -0.0005359649658203125, -0.0007781982421875, -2.6702880859375e-05, 0.0, -0.00028502941131591797, -3.4689903259277344e-05, 0.0, -1.52587890625e-05, -0.00038909912109375, -3.814697265625e-06, -0.0006847381591796875, 0.0, -0.00011444091796875, -2.110004425048828e-05, -0.0008335113525390625, -7.62939453125e-06, -0.000133514404296875, -1.9073486328125e-06, -3.814697265625e-06, -0.0006028413772583008, -5.7220458984375e-06, -0.0033779144287109375, -3.814697265625e-05, -0.0037404298782348633, -0.00016450881958007812, -5.7220458984375e-06, -0.0001544952392578125, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001506805419921875, -0.0001983642578125, -0.00016021728515625, -0.00023326530936174095, 0.0, -1.8715856640483253e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.239910653735933, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Clunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -1.1952872276306152, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5167269706726074, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.00125885009765625, -0.12436294555664062, -0.02311253547668457, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.5200471878051758, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.001293182373046875, -0.13529205322265625, -0.022348523139953613, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.167194366455078e-05, -0.1144566535949707, 0.0, -1.1444091796875e-05, -8.392333984375e-05, -0.06926727294921875, -0.4646739959716797, -0.0001697540283203125, 0.0, -0.0024967193603515625, -0.0004254579544067383, -5.7220458984375e-06, -1.9073486328125e-06, -0.000701904296875, -0.000545501708984375, -4.1961669921875e-05, 0.0, -0.0003345012664794922, -3.266334533691406e-05, 0.0, -1.71661376953125e-05, -0.0003376007080078125, -1.9073486328125e-06, -0.00067138671875, 0.0, -0.000102996826171875, -1.919269561767578e-05, -0.0007772445678710938, -7.62939453125e-06, -0.00014495849609375, -1.9073486328125e-06, -3.814697265625e-06, -0.0006848573684692383, -5.7220458984375e-06, -0.0038919448852539062, -4.00543212890625e-05, -0.004188656806945801, -0.00017976760864257812, -5.7220458984375e-06, -0.0001506805419921875, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000152587890625, -0.0001983642578125, -0.0001583099365234375, -0.0002317159523954615, 0.0, -1.8835065930034034e-05, 0.0], "inferred_code": "class <UNK>Clunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "<UNK>", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.3116129257705325, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -2.0840673446655273, -3.814697265625e-05, -9.5367431640625e-06, -6.866455078125e-05, -0.000164031982421875, -0.07236480712890625, -0.019659876823425293, -3.814697265625e-06, -3.814697265625e-06, 0.0, -9.72747802734375e-05, -0.12507033348083496, 0.0, -3.814697265625e-06, -7.82012939453125e-05, -0.001682281494140625, -0.1371288299560547, -0.03138399124145508, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -0.00010311603546142578, -0.07010376453399658, 0.0, -1.71661376953125e-05, -8.20159912109375e-05, -0.00116729736328125, -0.2549419403076172, -0.07892966270446777, -5.841255187988281e-06, -3.814697265625e-06, 0.0, -0.00015652179718017578, -0.04512190818786621, 0.0, -3.0517578125e-05, -0.00016021728515625, -0.04795074462890625, -0.09117794036865234, -0.00018310546875, 0.0, -0.0007343292236328125, -0.00012981891632080078, -7.62939453125e-06, -3.814697265625e-06, -0.0005321502685546875, -0.0007839202880859375, -2.6702880859375e-05, 0.0, -0.0002791881561279297, -3.4689903259277344e-05, 0.0, -1.33514404296875e-05, -0.0003871917724609375, -3.814697265625e-06, -0.0006914138793945312, 0.0, -0.00011444091796875, -2.110004425048828e-05, -0.0008363723754882812, -7.62939453125e-06, -0.000133514404296875, -1.9073486328125e-06, -3.814697265625e-06, -0.0006219148635864258, -5.7220458984375e-06, -0.0034475326538085938, -4.00543212890625e-05, -0.003944516181945801, -0.00017213821411132812, -5.7220458984375e-06, -0.000152587890625, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000152587890625, -0.000202178955078125, -0.00016021728515625, -0.00023028577561490238, 0.0, -1.8835065930034034e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.400498948061795, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -1.4788837432861328, -5.7220458984375e-06, -0.000274658203125, -4.9591064453125e-05, -0.0004730224609375, -0.0004597902297973633, -7.62939453125e-06, -0.0024538040161132812, -0.0001163482666015625, -2.288818359375e-05, -0.007378339767456055, 0.0, -5.14984130859375e-05, -5.7220458984375e-06, -0.0001544952392578125, 0.0, -0.0001506805419921875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0002613067626953125, -5.7220458984375e-06, -0.00019073486328125, -0.0065250396728515625, -0.0001392364501953125, -3.814697265625e-06, -1.9073486328125e-06, -0.00041127201984636486, -0.0002982582082040608, -3.4332275390625e-05, -0.07901763916015625, -0.0026292800903320312, -0.022287368774414062, -0.1852550506591797, -0.0029821395874023438, -0.06841588020324707, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13658463954925537, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.001560211181640625, -0.008373260498046875, -0.012125372886657715, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.29425048828125e-05, -0.5162276029586792, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.001251220703125, -0.12446212768554688, -0.023404955863952637, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010693073272705078, -0.5187811851501465, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.0012874603271484375, -0.1351165771484375, -0.022361159324645996, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.357929229736328e-05, -0.11605823040008545, 0.0, -1.1444091796875e-05, -8.58306884765625e-05, -0.06922149658203125, -0.46978759765625, -0.0001678466796875, 0.0, -0.0026025772094726562, -0.0004349946975708008, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007028579711914062, -0.0005435943603515625, -4.1961669921875e-05, 0.0, -0.0003364086151123047, -3.266334533691406e-05, 0.0, -1.71661376953125e-05, -0.0003376007080078125, -1.9073486328125e-06, -0.0006694793701171875, 0.0, -0.000102996826171875, -1.919269561767578e-05, -0.0007753372192382812, -7.62939453125e-06, -0.0001430511474609375, -1.9073486328125e-06, -3.814697265625e-06, -0.0006886720657348633, -5.7220458984375e-06, -0.003911018371582031, -4.00543212890625e-05, -0.004236340522766113, -0.00017976760864257812, -5.7220458984375e-06, -0.0001506805419921875, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000152587890625, -0.0002002716064453125, -0.0001583099365234375, -0.00023147759202402085, 0.0, -1.8835065930034034e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.4413505398279085, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5167269706726074, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.00125885009765625, -0.12436294555664062, -0.02311253547668457, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.9137239456176758, -5.91278076171875e-05, -3.0517578125e-05, -3.814697265625e-05, -0.000461578369140625, -1.198892593383789, -0.03594839572906494, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.00015079975128173828, -0.036589622497558594, -1.9073486328125e-06, -1.33514404296875e-05, -0.000125885009765625, -0.04624176025390625, -0.1345968246459961, -0.000202178955078125, 0.0, -0.000820159912109375, -0.00013172626495361328, -9.5367431640625e-06, -1.9073486328125e-06, -0.000553131103515625, -0.000701904296875, -2.86102294921875e-05, 0.0, -0.00028312206268310547, -3.2782554626464844e-05, 0.0, -1.52587890625e-05, -0.00040435791015625, -3.814697265625e-06, -0.0006437301635742188, 0.0, -0.00011444091796875, -1.919269561767578e-05, -0.0008096694946289062, -5.7220458984375e-06, -0.0001316070556640625, -1.9073486328125e-06, -3.814697265625e-06, -0.0006104707717895508, -5.7220458984375e-06, -0.0034589767456054688, -4.00543212890625e-05, -0.0036832094192504883, -0.00016260147094726562, -5.7220458984375e-06, -0.000156402587890625, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001506805419921875, -0.0001964569091796875, -0.0001583099365234375, -0.00023684075858909637, 0.0, -1.8715856640483253e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.4927450805571425, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.9206051826477051, -4.76837158203125e-05, -1.52587890625e-05, -5.340576171875e-05, -0.000423431396484375, -0.39401817321777344, -0.011124849319458008, -1.52587890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.5723762512207031, -0.0185597725212574, -0.1357269287109375, -9.5367431640625e-06, -0.033768653869628906, -5.53131103515625e-05, 0.0, -0.0006389617919921875, -6.496906280517578e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.0004749298095703125, -0.0006160736083984375, -3.4332275390625e-05, 0.0, -0.00019788742065429688, -3.0875205993652344e-05, 0.0, -2.6702880859375e-05, -0.000988006591796875, -3.814697265625e-06, -0.00049591064453125, 0.0, -0.0001125335693359375, -2.110004425048828e-05, -0.0008840560913085938, -5.7220458984375e-06, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.0002862215042114258, -3.814697265625e-06, -0.0019321441650390625, -4.57763671875e-05, -0.0028706789016723633, -0.00017452239990234375, -1.9073486328125e-06, -6.103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.000156402587890625, -0.000171661376953125, -0.0001392364501953125, -0.00023719829914625734, 0.0, -1.8835065930034034e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(<UNK>())]), MinionSelector(IsType(MINION_TYPE.MECH),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.701045621022331, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5167269706726074, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.00125885009765625, -0.12436294555664062, -0.02311253547668457, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.5200471878051758, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.001293182373046875, -0.13529205322265625, -0.022348523139953613, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.167194366455078e-05, -0.1144566535949707, 0.0, -1.1444091796875e-05, -8.392333984375e-05, -0.06926727294921875, -1.0160341262817383, 0.0, -1.9073486328125e-06, -0.05615997314453125, -0.0005884170532226562, -7.748603820800781e-06, -0.6675910949707031, -0.004715919494628906, -0.0003719329833984375, -0.00014495849609375, 0.0, -0.00034236907958984375, -0.0004140138626098633, 0.0, -1.33514404296875e-05, -0.0004863739013671875, -5.7220458984375e-06, -0.0022172927856445312, 0.0, -9.72747802734375e-05, -1.3470649719238281e-05, -0.0009889602661132812, -5.7220458984375e-06, -5.91278076171875e-05, 0.0, -2.7179718017578125e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.02687835693359375, -0.0002117156982421875, -3.933898824470816e-06, -2.0265579223632812e-06, -5.841255187988281e-06, -3.814697265625e-06], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.774741238887145, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -1.9077386856079102, -1.9073486328125e-06, -3.0517578125e-05, -3.814697265625e-06, -0.000377655029296875, -0.00033986568450927734, -5.841255187988281e-06, -0.0011148452758789062, -5.91278076171875e-05, -1.33514404296875e-05, -0.003477334976196289, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.000186920166015625, 0.0, -0.0001506805419921875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0002651214599609375, -5.7220458984375e-06, -0.0001926422119140625, -0.0073490142822265625, -0.000133514404296875, -3.814697265625e-06, -3.814697265625e-06, -0.00041353696724399924, -0.00030052318470552564, -3.62396240234375e-05, -0.07009029388427734, -0.0024290084838867188, -0.020069122314453125, -0.17216110229492188, -0.0028848648071289062, -0.06459832191467285, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.914138793945312e-05, -0.13552044332027435, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.001506805419921875, -0.008296966552734375, -0.01211094856262207, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5144352912902832, 0.0, -3.814697265625e-06, -8.20159912109375e-05, -0.001190185546875, -0.12359809875488281, -0.023006677627563477, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.5164632797241211, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.0012302398681640625, -0.13469886779785156, -0.022211074829101562, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.167194366455078e-05, -0.11268472671508789, 0.0, -1.1444091796875e-05, -8.58306884765625e-05, -0.06923675537109375, -0.45924854278564453, -0.000171661376953125, 0.0, -0.00246429443359375, -0.0004273653030395508, -5.7220458984375e-06, -1.9073486328125e-06, -0.0007076263427734375, -0.000545501708984375, -4.00543212890625e-05, 0.0, -0.0003364086151123047, -3.266334533691406e-05, 0.0, -1.71661376953125e-05, -0.000339508056640625, -1.9073486328125e-06, -0.0006694793701171875, 0.0, -0.000102996826171875, -1.919269561767578e-05, -0.0007762908935546875, -7.62939453125e-06, -0.0001430511474609375, -1.9073486328125e-06, -3.814697265625e-06, -0.0006886720657348633, -5.7220458984375e-06, -0.00390625, -4.00543212890625e-05, -0.004247784614562988, -0.00017976760864257812, -5.7220458984375e-06, -0.0001506805419921875, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000152587890625, -0.0002002716064453125, -0.0001583099365234375, -0.00023147759202402085, 0.0, -1.8835065930034034e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.904045036573734, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Clunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -1.1952872276306152, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.9206051826477051, -4.76837158203125e-05, -1.52587890625e-05, -5.340576171875e-05, -0.000423431396484375, -1.1243553161621094, -0.03543376922607422, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -0.00012791156768798828, -0.04011988639831543, -1.9073486328125e-06, -9.5367431640625e-06, -7.82012939453125e-05, -0.0013027191162109375, -0.26094627380371094, -0.08115458488464355, -5.841255187988281e-06, -3.814697265625e-06, 0.0, -0.00016796588897705078, -0.04853808879852295, 0.0, -3.62396240234375e-05, -0.0001697540283203125, -0.048130035400390625, -0.09870624542236328, -0.0001811981201171875, 0.0, -0.000728607177734375, -0.00011265277862548828, -7.62939453125e-06, -3.814697265625e-06, -0.0005359649658203125, -0.0007781982421875, -2.6702880859375e-05, 0.0, -0.00028502941131591797, -3.4689903259277344e-05, 0.0, -1.52587890625e-05, -0.00038909912109375, -3.814697265625e-06, -0.0006847381591796875, 0.0, -0.00011444091796875, -2.110004425048828e-05, -0.0008335113525390625, -7.62939453125e-06, -0.000133514404296875, -1.9073486328125e-06, -3.814697265625e-06, -0.0006028413772583008, -5.7220458984375e-06, -0.0033779144287109375, -3.814697265625e-05, -0.0037404298782348633, -0.00016450881958007812, -5.7220458984375e-06, -0.0001544952392578125, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001506805419921875, -0.0001983642578125, -0.00016021728515625, -0.00023326530936174095, 0.0, -1.8715856640483253e-05, 0.0], "inferred_code": "class <UNK>Clunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "<UNK>", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -4.908376082308678, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, {"_type": "Template25", "hole0": "BothPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5167269706726074, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.00125885009765625, -0.12436294555664062, -0.02311253547668457, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.5200471878051758, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.001293182373046875, -0.13529205322265625, -0.022348523139953613, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.167194366455078e-05, -0.1144566535949707, 0.0, -1.1444091796875e-05, -8.392333984375e-05, -0.06926727294921875, -1.0160341262817383, 0.0, -1.9073486328125e-06, -0.05615997314453125, -0.0005884170532226562, -7.748603820800781e-06, -0.7210845947265625, -0.003818511962890625, -0.000213623046875, -0.000202178955078125, 0.0, -0.0013689994812011719, -0.04154050350189209, 0.0, -1.71661376953125e-05, -0.001251220703125, -3.814697265625e-06, -0.00424957275390625, 0.0, -0.0001983642578125, -9.655952453613281e-06, -0.0014019012451171875, -3.814697265625e-06, -0.11110591888427734, -7.62939453125e-06, -0.023361563682556152, -7.486343383789062e-05, -0.000324249267578125, -0.000110626220703125, 0.0, -1.9073486328125e-06, 0.0, -0.0001811981201171875, -0.0010986328125, -0.0002079010009765625, -8.976055687526241e-05, 0.0, -1.800060272216797e-05, -1.9073486328125e-06], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 63, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -8.160914170064643, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, {"_type": "NameConstant", "value": true}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5167269706726074, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.00125885009765625, -0.12436294555664062, -0.02311253547668457, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.5200471878051758, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.001293182373046875, -0.13529205322265625, -0.022348523139953613, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.167194366455078e-05, -0.1144566535949707, 0.0, -1.1444091796875e-05, -8.392333984375e-05, -0.06926727294921875, -1.0160341262817383, 0.0, -1.9073486328125e-06, -0.05615997314453125, -0.0005884170532226562, -7.748603820800781e-06, -0.7210845947265625, -0.003818511962890625, -0.000213623046875, -0.000202178955078125, 0.0, -0.0013689994812011719, -0.04154050350189209, 0.0, -1.71661376953125e-05, -0.001251220703125, -3.814697265625e-06, -0.00424957275390625, 0.0, -0.0001983642578125, -9.655952453613281e-06, -0.0014019012451171875, -3.814697265625e-06, -3.297104835510254, -0.0003204345703125, -0.09003829956054688, -1.9073486328125e-06, -0.000766754150390625, 0.0, -2.0265579223632812e-06, 0.0, -9.1552734375e-05, -0.000614166259765625, -0.0001068115234375, -5.030505417380482e-05, 0.0, -2.3245811462402344e-05, -1.9073486328125e-06], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), True)))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}, {"score": -10.778288311057622, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ScrewjankClunker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "+2/+2", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-4.76837158203125e-05, -2.09808349609375e-05, -0.3604412376880646, -0.003108599688857794, -4.6967445086920634e-05, -7.733702659606934e-06, -4.172325134277344e-06, -2.1457672119140625e-06, -2.6702880859375e-05, -3.4332275390625e-05, -1.71661376953125e-05, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.9591064453125e-05, -1.9073486328125e-06, -3.9457496313843876e-05, -3.921983443433419e-05, -2.384185791015625e-06, -2.09808349609375e-05, -0.0006389617919921875, -0.00243377685546875, -1.71661376953125e-05, -0.0001773834228515625, 0.0, -5.3882598876953125e-05, -1.9073486328125e-06, -0.4982614517211914, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -0.00030517578125, -0.001085519790649414, -1.9073486328125e-05, -0.004178047180175781, -0.0001678466796875, -1.33514404296875e-05, -0.006410717964172363, 0.0, -4.57763671875e-05, -3.814697265625e-06, -0.0001735687255859375, 0.0, -0.000148773193359375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.000255584716796875, -5.7220458984375e-06, -0.0001888275146484375, -0.0070743560791015625, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.00040745732258073986, -0.00030231132404878736, -3.4332275390625e-05, -0.0744161605834961, -0.0025415420532226562, -0.02228260040283203, -0.17932510375976562, -0.0029344558715820312, -0.06757473945617676, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -6.902217864990234e-05, -0.13698196411132812, 0.0, -1.9073486328125e-05, -8.20159912109375e-05, -0.0015811920166015625, -0.00836944580078125, -0.012157797813415527, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -6.103515625e-05, -0.5167269706726074, 0.0, -3.814697265625e-06, -8.392333984375e-05, -0.00125885009765625, -0.12436294555664062, -0.02311253547668457, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.00010502338409423828, -0.5200471878051758, 0.0, -3.814697265625e-06, -7.62939453125e-05, -0.001293182373046875, -0.13529205322265625, -0.022348523139953613, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.167194366455078e-05, -0.1144566535949707, 0.0, -1.1444091796875e-05, -8.392333984375e-05, -0.06926727294921875, -1.0160341262817383, 0.0, -1.9073486328125e-06, -0.05615997314453125, -0.0005884170532226562, -7.748603820800781e-06, -0.7210845947265625, -0.003818511962890625, -0.000213623046875, -0.000202178955078125, 0.0, -0.0013689994812011719, -0.04154050350189209, 0.0, -1.71661376953125e-05, -0.001251220703125, -3.814697265625e-06, -0.00424957275390625, 0.0, -0.0001983642578125, -9.655952453613281e-06, -0.0014019012451171875, -3.814697265625e-06, -2.8985185623168945, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.28182220458984375, -0.0001087188720703125, -3.814697265625e-06, -1.71661376953125e-05, -0.008680343627929688, -0.00037384033203125, -3.814697265625e-06, -3.814697265625e-06, -0.056873440742492676, -5.924679499003105e-05, 0.0, -0.09147930145263672, -0.001941680908203125, -0.025160789489746094, -0.1176605224609375, -0.000682830810546875, -0.017761945724487305, -2.110004425048828e-05, -3.814697265625e-06, 0.0, -4.661082857637666e-05, -0.21954892575740814, 0.0, -3.814697265625e-06, -0.0001850128173828125, -0.0001659393310546875, -0.0068206787109375, -0.004624364897608757, -3.933906555175781e-06, -3.814697265625e-06, 0.0, -6.532669067382812e-05, -0.6911786794662476, -4.57763671875e-05, -1.1444091796875e-05, -5.14984130859375e-05, -0.0001983642578125, -0.49346923828125, -0.010433673858642578, -5.841255187988281e-06, -3.814697265625e-06, -7.62939453125e-06, -0.701458752155304, -0.07599669694900513, -0.21603012084960938, -0.000213623046875, -0.06495857238769531, -5.340576171875e-05, 0.0, -0.007418632507324219, -5.733966827392578e-05, -0.0001163482666015625, -1.9073486328125e-06, -0.0013875961303710938, -0.0007495880126953125, -2.47955322265625e-05, 0.0, -0.0001653432846069336, -3.4689903259277344e-05, 0.0, -4.57763671875e-05, -0.001338958740234375, -3.814697265625e-06, -0.0004405975341796875, 0.0, -0.0001087188720703125, -2.110004425048828e-05, -0.0009613037109375, -5.7220458984375e-06, -0.0001373291015625, -3.814697265625e-06, -3.814697265625e-06, -0.0003300905227661133, -3.814697265625e-06, -0.0020074844360351562, -4.57763671875e-05, -0.0033152103424072266, -0.00020706653594970703, -3.814697265625e-06, -6.103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0001544952392578125, -0.00018310546875, -0.0001392364501953125, -0.00022349238861352205, 0.0, -1.8715856640483253e-05, 0.0], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), ActionTag(Give([Buff(ChangeHealth(2)),\n            Buff(ChangeAttack(2)), Buff(+2/+2())]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [77, 145, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Screwjank", " ", "Clunker", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 213, 75, 164, "MECH", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "+2/+2", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"score": -0.9165419986766139, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -0.40214329957962036, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -0.12230682373046875, -1.9073486328125e-06, -0.00021015893435105681, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -1.6214458992999354, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sneed Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -1.107047200202942, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -0.12230682373046875, -1.9073486328125e-06, -0.00021015893435105681, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -2.603708239476866, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Old", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -1.8984744548797607, -1.944601535797119e-05, -4.291534423828125e-06, 0.0, 0.0, -0.000179290771484375, -3.814697265625e-06, -1.33514404296875e-05, -1.52587890625e-05, -0.0001201629638671875, -1.9073486328125e-05, -0.0001983642578125, 0.0, -0.3822287619113922, -2.944469088106416e-05, -0.0003392685030121356, -0.0015974044799804688, -0.00031113624572753906, -8.07046890258789e-05, -0.018018722534179688, -9.5367431640625e-06, -0.0016556978225708008, -1.1801716937043238e-05, -0.000152587890625, -5.53131103515625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010073180601466447, -1.0371197276981547e-05, -0.0009975433349609375, -0.002552032470703125, 0.0, -0.0006724593695253134, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.004444122314453125, -0.0006618499755859375, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.000882267951965332, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004601478576660156, -0.004019827116280794, -0.00022839002485852689, -0.000675201416015625, -5.7220458984375e-06, -0.009028738364577293, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.003688214346766472, -1.5497207641601562e-05, -0.034232139587402344, -0.0002593994140625, -1.9073486328125e-05, -0.014441490173339844, -0.0005855560302734375, -0.01935863494873047, -0.009065628051757812, -1.9073486328125e-06, -0.012298008427023888, -9.5367431640625e-05, -0.00251007080078125, -0.023439407348632812, -0.0018270015716552734, -0.003702402114868164, -0.0018454790115356445, -0.0002002716064453125, -0.005382537841796875, -0.12247180938720703, -1.9073486328125e-06, -0.0002102781436406076, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK>Old(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [77, 145, "<UNK>", "Old", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -3.3325316408827206, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -0.40214329957962036, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -2.1701622009277344, -0.000408172607421875, -3.4332275390625e-05, 0.0, -0.0005204655462875962, -2.1457672119140625e-05, 0.0, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00859689712524414, -1.1920928244535389e-07, -0.000217437744140625, -1.9073486328125e-06, -0.35851311683654785, -1.33514404296875e-05, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector(players=\n            BothPlayer())))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>"]}, {"score": -3.37024969069261, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Old", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sneed Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -1.8984744548797607, -1.944601535797119e-05, -4.291534423828125e-06, 0.0, 0.0, -0.000179290771484375, -3.814697265625e-06, -1.33514404296875e-05, -1.52587890625e-05, -0.0001201629638671875, -1.9073486328125e-05, -0.0001983642578125, 0.0, -1.1487702131271362, -2.944469088106416e-05, -0.0003392685030121356, -0.0015974044799804688, -0.00031113624572753906, -8.07046890258789e-05, -0.018018722534179688, -9.5367431640625e-06, -0.0016556978225708008, -1.1801716937043238e-05, -0.000152587890625, -5.53131103515625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010073180601466447, -1.0371197276981547e-05, -0.0009975433349609375, -0.002552032470703125, 0.0, -0.0006724593695253134, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.004444122314453125, -0.0006618499755859375, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.000882267951965332, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004601478576660156, -0.004019827116280794, -0.00022839002485852689, -0.000675201416015625, -5.7220458984375e-06, -0.009028738364577293, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.003688214346766472, -1.5497207641601562e-05, -0.034232139587402344, -0.0002593994140625, -1.9073486328125e-05, -0.014441490173339844, -0.0005855560302734375, -0.01935863494873047, -0.009065628051757812, -1.9073486328125e-06, -0.012298008427023888, -9.5367431640625e-05, -0.00251007080078125, -0.023439407348632812, -0.0018270015716552734, -0.003702402114868164, -0.0018454790115356445, -0.0002002716064453125, -0.005382537841796875, -0.12247180938720703, -1.9073486328125e-06, -0.0002102781436406076, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK>Old(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [77, 145, "<UNK>", "Old", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -4.037435541506042, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sneed Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -1.107047200202942, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -2.1701622009277344, -0.000408172607421875, -3.4332275390625e-05, 0.0, -0.0005204655462875962, -2.1457672119140625e-05, 0.0, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00859689712524414, -1.1920928244535389e-07, -0.000217437744140625, -1.9073486328125e-06, -0.35851311683654785, -1.33514404296875e-05, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector(players=\n            BothPlayer())))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>"]}, {"score": -4.349629114027252, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -0.40214329957962036, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -2.1701622009277344, -0.000408172607421875, -3.4332275390625e-05, 0.0, -0.0005204655462875962, -2.1457672119140625e-05, 0.0, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00859689712524414, -1.1920928244535389e-07, -0.000217437744140625, -1.9073486328125e-06, -1.3755953311920166, -2.86102294921875e-05, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector(players=\n            EnemyPlayer())))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>"]}, {"score": -4.361839150480584, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Old<UNK>", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -3.6429860591888428, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -0.40214329957962036, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -0.12230682373046875, -1.9073486328125e-06, -0.00021015893435105681, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK>Old<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [77, 145, "<UNK>", "Old", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -4.639452769364645, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsWeapon"}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -0.40214329957962036, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -3.5213756561279297, -0.1251678466796875, -0.0011305809020996094, -0.03510129451751709, -8.082387648755684e-05, -7.62939453125e-06, -0.003147125244140625, -0.006337165832519531, -0.0012264251708984375, -3.814697265625e-06, -1.9073486328125e-06, -0.00040376183460466564, -1.52587890625e-05, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.011623144149780273, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -0.26903367042541504, -9.5367431640625e-06, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsWeapon()])), PlayerSelector(players=BothPlayer())))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Weapon", "<EOS>", 205, 71, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>"]}, {"score": -5.018242336257558, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Old", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -1.8984744548797607, -1.944601535797119e-05, -4.291534423828125e-06, 0.0, 0.0, -0.000179290771484375, -3.814697265625e-06, -1.33514404296875e-05, -1.52587890625e-05, -0.0001201629638671875, -1.9073486328125e-05, -0.0001983642578125, 0.0, -0.3822287619113922, -2.944469088106416e-05, -0.0003392685030121356, -0.0015974044799804688, -0.00031113624572753906, -8.07046890258789e-05, -0.018018722534179688, -9.5367431640625e-06, -0.0016556978225708008, -1.1801716937043238e-05, -0.000152587890625, -5.53131103515625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010073180601466447, -1.0371197276981547e-05, -0.0009975433349609375, -0.002552032470703125, 0.0, -0.0006724593695253134, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.004444122314453125, -0.0006618499755859375, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.000882267951965332, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004601478576660156, -0.004019827116280794, -0.00022839002485852689, -0.000675201416015625, -5.7220458984375e-06, -0.009028738364577293, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.003688214346766472, -1.5497207641601562e-05, -0.034232139587402344, -0.0002593994140625, -1.9073486328125e-05, -0.014441490173339844, -0.0005855560302734375, -0.01935863494873047, -0.009065628051757812, -1.9073486328125e-06, -0.012298008427023888, -9.5367431640625e-05, -0.00251007080078125, -0.023439407348632812, -0.0018270015716552734, -0.003702402114868164, -0.0018454790115356445, -0.0002002716064453125, -0.005382537841796875, -2.1688804626464844, -0.000408172607421875, -3.4332275390625e-05, 0.0, -0.0005203463369980454, -2.1457672119140625e-05, 0.0, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00861215591430664, -1.1920928244535389e-07, -0.000217437744140625, -1.9073486328125e-06, -0.3584892749786377, -1.33514404296875e-05, 0.0], "inferred_code": "class <UNK>Old(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector(players=\n            BothPlayer())))\n", "choice_history": [77, 145, "<UNK>", "Old", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>"]}, {"score": -5.054533014650573, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sneed Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -1.107047200202942, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -2.1701622009277344, -0.000408172607421875, -3.4332275390625e-05, 0.0, -0.0005204655462875962, -2.1457672119140625e-05, 0.0, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00859689712524414, -1.1920928244535389e-07, -0.000217437744140625, -1.9073486328125e-06, -1.3755953311920166, -2.86102294921875e-05, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector(players=\n            EnemyPlayer())))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>"]}, {"score": -5.066743051103906, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Old<UNK>", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sneed Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -3.6429860591888428, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -1.107047200202942, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -0.03433799743652344, -0.0002593994140625, -1.9073486328125e-05, -0.014209747314453125, -0.00058746337890625, -0.019507408142089844, -0.009077906608581543, -1.9073486328125e-06, -0.012275455519557, -9.5367431640625e-05, -0.00251007080078125, -0.02344226837158203, -0.001832723617553711, -0.003694772720336914, -0.0018531084060668945, -0.0002002716064453125, -0.0053958892822265625, -0.12230682373046875, -1.9073486328125e-06, -0.00021015893435105681, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK>Old<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [77, 145, "<UNK>", "Old", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -5.261441457536812, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "<UNK> Old Shredder"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -0.40214329957962036, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -4.358201026916504, -0.0001392364501953125, -0.000812530517578125, 0.0, -1.1444091796875e-05, -0.0008567571640014648, -1.3113020031596534e-05, -0.001178741455078125, -0.002391815185546875, 0.0, -0.0011669396189972758, -8.344646857949556e-07, -1.9073486328125e-06, -7.62939453125e-06, -9.536738616588991e-07, 0.0, -0.0025615692138671875, -0.0011386871337890625, -5.14984130859375e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -1.3828268492943607e-05, 0.0, -0.0008211135864257812, -2.3841855067985307e-07, -0.000110626220703125, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022733211517333984, -7.152555099310121e-07, -7.43865966796875e-05, -0.0001506805419921875, -0.0047130584716796875, -0.0040097348392009735, -0.0002254099672427401, -0.00067901611328125, -5.7220458984375e-06, -0.009048746898770332, -0.0004433392605278641, -8.344646857949556e-07, -0.0031871795654296875, -7.62939453125e-06, -9.5367431640625e-06, -0.0036768894642591476, -1.5497207641601562e-05, -0.03428936004638672, -0.0002593994140625, -1.9073486328125e-05, -0.016015052795410156, -0.00057220458984375, -0.017971515655517578, -0.008970260620117188, -1.9073486328125e-06, -0.012301754206418991, -9.34600830078125e-05, -0.002567291259765625, -0.023466110229492188, -0.0017985105514526367, -0.003758668899536133, -0.0017845630645751953, -0.00020599365234375, -0.0052947998046875, -0.12310791015625, -1.9073486328125e-06, -0.00021456938702613115, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 72, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -5.344356669987967, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sneed Old Shredder"}, {"_type": "Num", "n": 8}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsWeapon"}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -1.107047200202942, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -0.013761520385742188, -9.5367431640625e-06, -0.0015947818756103516, -1.1682508556987159e-05, -0.000152587890625, -5.340576171875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.00010323519381927326, -1.2755381249007769e-05, -0.000827789306640625, -0.0018100738525390625, 0.0, -0.0008615253027528524, -1.4305104514278355e-06, -3.814697265625e-06, -3.814697265625e-06, -4.768370445162873e-07, 0.0, -0.0045757293701171875, -0.00066375732421875, -4.1961669921875e-05, -1.1920928244535389e-07, -3.576278118089249e-07, -1.3828268492943607e-05, 0.0, -0.0008764266967773438, -3.576278118089249e-07, -0.00011444091796875, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022161006927490234, -7.152555099310121e-07, -7.2479248046875e-05, -0.0001506805419921875, -0.004597663879394531, -0.004024101421236992, -0.00022827083012089133, -0.000675201416015625, -5.7220458984375e-06, -0.009020581841468811, -0.0004433392605278641, -8.344646857949556e-07, -0.003231048583984375, -7.62939453125e-06, -9.5367431640625e-06, -0.0037199240177869797, -1.5497207641601562e-05, -3.5213756561279297, -0.1251678466796875, -0.0011305809020996094, -0.03510129451751709, -8.082387648755684e-05, -7.62939453125e-06, -0.003147125244140625, -0.006337165832519531, -0.0012264251708984375, -3.814697265625e-06, -1.9073486328125e-06, -0.00040376183460466564, -1.52587890625e-05, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.011623144149780273, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -0.26903367042541504, -9.5367431640625e-06, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsWeapon()])), PlayerSelector(players=BothPlayer())))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", 55, 138, "8", "<EOS>", 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Weapon", "<EOS>", 205, 71, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>"]}, {"score": -5.966345358160133, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>OldShredder", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sneed Old Shredder"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.00014495849609375, -0.005188200622797012, -0.005936306901276112, -0.19768890738487244, -2.5987379558500834e-05, -6.157904863357544e-06, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0003204345703125, -3.814697265625e-06, -1.9073486328125e-05, -1.33514404296875e-05, -0.000171661376953125, -2.288818359375e-05, -0.0002040863037109375, 0.0, -1.107047200202942, -2.7656551537802443e-05, -0.00018191221170127392, -0.00023543834686279297, -0.0003260374069213867, -9.02414321899414e-05, -4.358201026916504, -0.0001392364501953125, -0.000812530517578125, 0.0, -1.1444091796875e-05, -0.0008567571640014648, -1.3113020031596534e-05, -0.001178741455078125, -0.002391815185546875, 0.0, -0.0011669396189972758, -8.344646857949556e-07, -1.9073486328125e-06, -7.62939453125e-06, -9.536738616588991e-07, 0.0, -0.0025615692138671875, -0.0011386871337890625, -5.14984130859375e-05, -1.1920928244535389e-07, -2.3841855067985307e-07, -1.3828268492943607e-05, 0.0, -0.0008211135864257812, -2.3841855067985307e-07, -0.000110626220703125, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00022733211517333984, -7.152555099310121e-07, -7.43865966796875e-05, -0.0001506805419921875, -0.0047130584716796875, -0.0040097348392009735, -0.0002254099672427401, -0.00067901611328125, -5.7220458984375e-06, -0.009048746898770332, -0.0004433392605278641, -8.344646857949556e-07, -0.0031871795654296875, -7.62939453125e-06, -9.5367431640625e-06, -0.0036768894642591476, -1.5497207641601562e-05, -0.03428936004638672, -0.0002593994140625, -1.9073486328125e-05, -0.016015052795410156, -0.00057220458984375, -0.017971515655517578, -0.008970260620117188, -1.9073486328125e-06, -0.012301754206418991, -9.34600830078125e-05, -0.002567291259765625, -0.023466110229492188, -0.0017985105514526367, -0.003758668899536133, -0.0017845630645751953, -0.00020599365234375, -0.0052947998046875, -0.12310791015625, -1.9073486328125e-06, -0.00021456938702613115, -3.814697265625e-06, 0.0], "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [77, 145, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", 72, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Summon", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 63, 171, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"score": -0.6168052936430399, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}, {"_type": "keyword", "value": {"id": "spare_part_list", "_type": "Name"}, "arg": "source_list"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -0.0819082260131836, -0.2566843032836914, -0.023758355528116226, -0.006991386413574219, -1.9073486328125e-06, -0.0032978057861328125, -4.76837158203125e-05, -0.0010573851177468896, -0.0003186464309692383, -5.245203283266164e-06, -0.0038661956787109375, -6.866455078125e-05, -3.62396240234375e-05, -0.0033271312713623047, -0.00022137165069580078, -0.0002803802490234375, -1.9073486328125e-06, -4.76837158203125e-05, -1.9073486328125e-06, -0.002675175666809082, -5.245207830739673e-06, -0.006628990173339844, 0.0, -0.0001220703125, -0.0009441375732421875, -0.004078865051269531, 0.0, -0.004852294921875, -1.1444091796875e-05, -0.036833763122558594, 0.0, -0.004422187805175781, -7.62939453125e-06, -1.3470649719238281e-05, -9.918212890625e-05, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 213, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 76, 195, "source_list", "<EOS>", 25, 133, "spare_part_list", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -2.521529291386571, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Part", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -0.0819082260131836, -1.5226564407348633, -0.0016927712131291628, -3.6238969187252223e-05, -0.000141143798828125, -7.62939453125e-05, -0.12714165449142456, -0.5784250497817993, -0.03395652770996094, -7.62939453125e-06, -8.189643267542124e-05, -0.0012151002883911133, -1.9073486328125e-06], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(Part()),\n            PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Part", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -2.9016714403072115, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "PartPart", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -0.0819082260131836, -1.5226564407348633, -0.0016927712131291628, -3.6238969187252223e-05, -0.000141143798828125, -7.62939453125e-05, -0.12714165449142456, -0.9403502345085144, -0.04613268002867699, -0.005721092224121094, -1.1444091796875e-05, -2.5987612389144488e-05, -0.0015888214111328125, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(PartPart()),\n            PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Part", "Part", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -4.066370148403728, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}, {"_type": "keyword", "value": {"id": "spare_part_list", "_type": "Name"}, "arg": "source_list"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}], "hole2": 7, "hole1": 5, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -1.9544649124145508, -0.0001354217529296875, -0.0001844465732574463, -7.641315460205078e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0009276866912841797, 0.0, -0.5196304321289062, -0.0011348724365234375, -4.00543212890625e-05, -0.21258068084716797, -0.0010814666748046875, -0.0002593994140625, -0.000133514404296875, -8.249282836914062e-05, 0.0, -0.000118255615234375, -0.0001220703125, -1.0590811967849731, 0.0, -9.34600830078125e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.005144238471984863, -5.841255187988281e-06, -0.0001983642578125, -0.01600360870361328, -0.16431045532226562, -0.011359408497810364, -0.013891689479351044, -3.814697265625e-06, -0.009346961975097656, -3.62396240234375e-05, -0.006212352309376001, -0.0003352165222167969, -5.364412118069595e-06, -0.005695343017578125, -0.0002384185791015625, -7.05718994140625e-05, -0.005348563194274902, -0.00012969970703125, -0.000324249267578125, -1.9073486328125e-06, -0.000110626220703125, -1.9073486328125e-06, -0.002575993537902832, -8.344646857949556e-07, -0.011161208152770996, 0.0, -0.0001506805419921875, -0.001018524169921875, -0.005324363708496094, 0.0, -0.011460304260253906, -1.52587890625e-05, -0.034890174865722656, 0.0, -0.002040863037109375, -9.5367431640625e-06, -1.3470649719238281e-05, -0.0001277923583984375, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, charge=True, deathrattle=Deathrattle(AddCard(\n            CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)\n            ), PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 213, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 76, 195, "source_list", "<EOS>", 25, 133, "spare_part_list", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -4.21806780102753, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -2.881991386413574, -5.7220458984375e-06, -0.6198115348815918, -0.22919392585754395, -0.09856319427490234, -0.0001888275146484375, -0.007030487060546875, -2.09808349609375e-05, -0.005419254302978516, -0.0013217926025390625, -5.7220458984375e-06, -0.0002593994140625, -2.09808349609375e-05, -7.2479248046875e-05, -0.06402254104614258, 0.0, -4.9591064453125e-05, -8.392333984375e-05, -0.13575279712677002, -6.4849853515625e-05, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(<UNK>(), PlayerSelector\n            (players=BothPlayer())))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "<UNK>", "<EOS>", 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>"]}, {"score": -4.84982148411774, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -2.881991386413574, -5.7220458984375e-06, -0.8662590980529785, -8.976459503173828e-05, -0.7392740249633789, -0.00199127197265625, -0.013353347778320312, -7.43865966796875e-05, -0.0015624761581420898, -0.004337310791015625, -1.1444091796875e-05, -0.0003108978271484375, -1.71661376953125e-05, -0.0001468658447265625, -0.06128263473510742, 0.0, -4.38690185546875e-05, -7.2479248046875e-05, -0.10474216938018799, -6.67572021484375e-05, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Draw(), PlayerSelector(\n            players=BothPlayer())))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>"]}, {"score": -4.991770220653045, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "divine_shield"}], "hole2": 7, "hole1": 5, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -1.9544649124145508, -0.0001354217529296875, -0.0001844465732574463, -7.641315460205078e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0009276866912841797, 0.0, -0.5196304321289062, -0.0011348724365234375, -4.00543212890625e-05, -0.21258068084716797, -0.0010814666748046875, -0.0002593994140625, -0.000133514404296875, -8.249282836914062e-05, 0.0, -0.000118255615234375, -0.0001220703125, -2.2817630767822266, 0.0, -0.009188652038574219, -0.001148223876953125, -5.1975250244140625e-05, -1.9073486328125e-06], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, charge=True, divine_shield=True)\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "divine_shield", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.017818761722076, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}], "hole2": 7, "hole1": 5, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -1.9544649124145508, -0.0001354217529296875, -0.0001844465732574463, -7.641315460205078e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0009276866912841797, 0.0, -0.5196304321289062, -0.0011348724365234375, -4.00543212890625e-05, -0.21258068084716797, -0.0010814666748046875, -0.0002593994140625, -0.000133514404296875, -8.249282836914062e-05, 0.0, -0.000118255615234375, -0.0001220703125, -2.310948371887207, -1.1444091796875e-05, -0.0065364837646484375, -0.0006351470947265625, -6.902217864990234e-05, -1.9073486328125e-06], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, charge=True, charge=True)\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.064669110858006, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}, {"_type": "keyword", "value": {"id": "<UNK>", "_type": "Name"}, "arg": "source_list"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -0.0819082260131836, -0.2566843032836914, -0.023758355528116226, -0.006991386413574219, -1.9073486328125e-06, -0.0032978057861328125, -4.76837158203125e-05, -0.0010573851177468896, -0.0003186464309692383, -5.245203283266164e-06, -0.0038661956787109375, -6.866455078125e-05, -3.62396240234375e-05, -0.0033271312713623047, -0.00022137165069580078, -0.0002803802490234375, -1.9073486328125e-06, -4.76837158203125e-05, -1.9073486328125e-06, -0.002675175666809082, -5.245207830739673e-06, -0.006628990173339844, 0.0, -0.0001220703125, -0.0009441375732421875, -0.004078865051269531, 0.0, -0.004852294921875, -1.1444091796875e-05, -4.473418712615967, -0.013013124465942383, -0.0024280548095703125, -1.9073486328125e-06, -6.318092346191406e-06, -0.000370025634765625, -1.9073486328125e-06], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=<UNK>)), PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 213, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 76, 195, "source_list", "<EOS>", 25, 133, "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -5.080651915089504, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -2.881991386413574, -5.7220458984375e-06, -0.8662590980529785, -8.976459503173828e-05, -1.157973289489746, -1.33514404296875e-05, -1.6450869225081988e-05, -0.0001125335693359375, -1.9073486328125e-06], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Draw(), PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -5.315779958612723, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Add", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -0.0819082260131836, -1.5226564407348633, -0.0016927712131291628, -3.6238969187252223e-05, -0.000141143798828125, -7.62939453125e-05, -2.9242897033691406, -0.5958274602890015, -0.01390838623046875, -1.9073486328125e-06, -4.9590846174396574e-05, -0.0010033845901489258, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(Add()),\n            PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Add", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -5.444972016893928, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}, {"_type": "keyword", "value": {"id": "CARD_SOURCE", "_type": "Name"}, "arg": "source_list"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -0.0819082260131836, -0.2566843032836914, -0.023758355528116226, -0.006991386413574219, -1.9073486328125e-06, -0.0032978057861328125, -4.76837158203125e-05, -0.0010573851177468896, -0.0003186464309692383, -5.245203283266164e-06, -0.0038661956787109375, -6.866455078125e-05, -3.62396240234375e-05, -0.0033271312713623047, -0.00022137165069580078, -0.0002803802490234375, -1.9073486328125e-06, -4.76837158203125e-05, -1.9073486328125e-06, -0.002675175666809082, -5.245207830739673e-06, -0.006628990173339844, 0.0, -0.0001220703125, -0.0009441375732421875, -0.004078865051269531, 0.0, -0.004852294921875, -1.1444091796875e-05, -4.866627216339111, -2.861022494471399e-06, -0.0028076171875, -3.814697265625e-06, -7.987022399902344e-06, -9.34600830078125e-05, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=CARD_SOURCE)),\n            PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 213, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 76, 195, "source_list", "<EOS>", 25, 133, "CARD_SOURCE", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -5.504569032272968, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}, {"_type": "keyword", "value": {"id": "deathrattle", "_type": "Name"}, "arg": "source_list"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -0.0038803815841674805, 0.0, -0.006870269775390625, -0.0001316070556640625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0004578828811645508, 0.0, -0.0002307891845703125, -0.0819082260131836, -0.2566843032836914, -0.023758355528116226, -0.006991386413574219, -1.9073486328125e-06, -0.0032978057861328125, -4.76837158203125e-05, -0.0010573851177468896, -0.0003186464309692383, -5.245203283266164e-06, -0.0038661956787109375, -6.866455078125e-05, -3.62396240234375e-05, -0.0033271312713623047, -0.00022137165069580078, -0.0002803802490234375, -1.9073486328125e-06, -4.76837158203125e-05, -1.9073486328125e-06, -0.002675175666809082, -5.245207830739673e-06, -0.006628990173339844, 0.0, -0.0001220703125, -0.0009441375732421875, -0.004078865051269531, 0.0, -0.004852294921875, -1.1444091796875e-05, -4.925554275512695, -5.960462203802308e-06, -0.0034418106079101562, -3.814697265625e-06, -2.7298927307128906e-05, -0.0001068115234375, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=deathrattle)),\n            PlayerSelector()))\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 213, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 76, 195, "source_list", "<EOS>", 25, 133, "deathrattle", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -6.650619661836856, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "card", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -0.1536874771118164, -7.62939453125e-06, -9.536738616588991e-07, -5.960462772236497e-07, -0.00026523388805799186, 0.0, -5.986550331115723, 0.0, -0.5013065338134766, -8.20159912109375e-05, -7.665157318115234e-05, 0.0], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, card=True)\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "card", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.665453982024999, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Toshley", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ALL", "hole1": 6, "hole0": "Toshley"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}, {"_type": "keyword", "value": {"id": "spare_part_list", "_type": "Name"}, "arg": "source_list"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 7, "hole1": 5, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-1.33514404296875e-05, -9.5367431640625e-06, -0.0005207725334912539, -0.00434041628614068, -6.16908073425293e-06, -7.152543730626348e-06, -7.62939453125e-06, -1.1444091796875e-05, -0.0013942718505859375, -2.09808349609375e-05, -1.5735626220703125e-05, -5.7220458984375e-06, -8.392333984375e-05, -3.933906555175781e-06, -0.00016176700592041016, 0.0, -0.0005853176116943359, 0.0, -3.4332275390625e-05, 0.0, -1.0251977982989047e-05, 0.0, -0.0014095306396484375, -1.9544649124145508, -0.0001354217529296875, -0.0001844465732574463, -7.641315460205078e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0009276866912841797, 0.0, -2.1273117065429688, -6.67572021484375e-05, -1.33514404296875e-05, -0.29909825325012207, -0.000701904296875, -0.00018310546875, -0.00019073486328125, -0.0001246929168701172, 0.0, -6.4849853515625e-05, -5.91278076171875e-05, -0.8668844699859619, -1.1920928244535389e-07, -0.0001735687255859375, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0036298036575317383, -3.933906555175781e-06, -0.0002288818359375, -0.04381847381591797, -0.16876697540283203, -0.02726692706346512, -0.009017701260745525, -5.7220458984375e-06, -0.010759353637695312, -5.340576171875e-05, -0.0037766059394925833, -0.0003255605697631836, -7.033334895822918e-06, -0.005253791809082031, -0.0001926422119140625, -5.53131103515625e-05, -0.005117535591125488, -0.00012600421905517578, -0.000446319580078125, -1.9073486328125e-06, -0.0001163482666015625, -1.9073486328125e-06, -0.004285097122192383, -1.4305104514278355e-06, -0.011303305625915527, 0.0, -0.000152587890625, -0.0010204315185546875, -0.006047248840332031, 0.0, -0.012848854064941406, -1.52587890625e-05, -0.03255748748779297, 0.0, -0.0026264190673828125, -7.62939453125e-06, -1.3470649719238281e-05, -0.00012969970703125, 0.0, -0.07605171203613281, -0.000278472900390625, -0.8584108352661133, 0.0, -0.12108802795410156, -6.29425048828125e-05, -0.00025773048400878906, -2.3841855067985307e-07], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, charge=True, deathrattle=Deathrattle(AddCard(\n            CardQuery(source=CARD_SOURCE.LIST, source_list=spare_part_list)\n            ), PlayerSelector()), taunt=True)\n", "choice_history": [77, 145, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Toshley", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 214, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 213, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 76, 195, "source_list", "<EOS>", 25, 133, "spare_part_list", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"score": -2.494266295257482, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -0.7521600723266602, -0.000461578369140625, -0.06966107338666916, -7.748603820800781e-06, 0.0, -7.62939453125e-06, -0.9376230239868164], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), SelfSelector())])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -2.6154370469552006, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template19", "hole1": {"id": "Adjacent", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -1.3623924255371094, -0.4785575866699219, -0.0001850128173828125, -0.0009292364120483398, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-06, -0.010069534182548523, -1.0251946150674485e-05, -7.2479248046875e-05, -0.028856277465820312], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), MinionSelector(\n            Adjacent()))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Adjacent", "<EOS>", 205, 71]}, {"score": -3.345285297754451, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -1.3428277969360352, -0.19821834564208984, -3.0517578125e-05, -0.0001316070556640625, -0.1967003345489502, -4.017353057861328e-05, 0.0, -0.4945793151855469, -4.00543212890625e-05, -1.9073486328125e-06, -0.3319838047027588, -7.152555099310121e-07, -8.7738037109375e-05, -1.9073486328125e-05, -0.009351760149002075, -2.1696090698242188e-05, 0.0, -1.9073486328125e-06, -0.03690338134765625], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), CharacterSelector\n            (players=BothPlayer()))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 205, 71]}, {"score": -3.658397806259096, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -0.7521600723266602, -0.000461578369140625, -0.06966107338666916, -7.748603820800781e-06, 0.0, -7.62939453125e-06, -0.4979743957519531, -0.000492095947265625, -0.02235567569732666, -1.2993811651540454e-05, -0.0002117156982421875, -0.22577667236328125, -1.71661376953125e-05, -0.018655840307474136, -0.12086918950080872, -3.814697265625e-06, -0.222565159201622, -2.622604142743512e-06, -0.8571062088012695, -0.0001354217529296875, -0.13545289635658264, -7.987022399902344e-06, -2.3841855067985307e-07, -3.24249267578125e-05, -8.20159912109375e-05], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Aura(ChangeAttack(2), SelfSelector())])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.7605317545943464, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template19", "hole2": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -1.3623924255371094, -0.9916057586669922, -2.6702880859375e-05, -0.0009137392044067383, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.000225067138671875, -9.584424697095528e-05, 0.0, -5.7220458984375e-06, -2.86102294921875e-05, 0.0, -0.0001163482666015625, -1.9073486328125e-06, -7.2479248046875e-05, 0.0, -0.6702289581298828, -1.9073486328125e-06, -1.9073486328125e-06, -0.0004634857177734375], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), MinionSelector(\n            IsType(MINION_TYPE.MECH)))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 205, 71]}, {"score": -3.835756630998155, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template19", "hole2": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -1.3623924255371094, -0.9916057586669922, -2.6702880859375e-05, -0.0009137392044067383, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.000225067138671875, -9.584424697095528e-05, 0.0, -5.7220458984375e-06, -2.86102294921875e-05, 0.0, -0.0001163482666015625, -1.9073486328125e-06, -7.2479248046875e-05, 0.0, -0.745610237121582, 0.0, -2.09808349609375e-05, -0.0002899169921875], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 205, 71]}, {"score": -3.9170739932782155, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -1.3428277969360352, -0.19821834564208984, -3.0517578125e-05, -0.0001316070556640625, -0.1967003345489502, -4.017353057861328e-05, 0.0, -1.1182355880737305, -0.003204345703125, -2.288818359375e-05, -0.042383790016174316, -1.311301275563892e-06, -7.82012939453125e-05, -1.71661376953125e-05, -0.012681004591286182, -2.3126602172851562e-05, 0.0, -9.5367431640625e-06, -0.0001773834228515625, -0.0052089691162109375, 0.0, -0.000125885009765625, -1.1444091796875e-05, -0.2536996006965637, -0.0006009339122101665, 0.0, -0.00037384033203125, -0.007925033569335938], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), CharacterSelector\n            (players=BothPlayer(), picker=RandomPicker()))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.9367417706074477, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 1, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -1.8927807807922363, -3.159043990308419e-05, -0.3662862777709961, -0.0003185272216796875, -0.18561998009681702, -0.0001163482666015625, 0.0, -2.47955322265625e-05, -1.2939825057983398], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "1", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.348628965238724, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -1.3428277969360352, -0.19821834564208984, -3.0517578125e-05, -0.0001316070556640625, -0.1967003345489502, -4.017353057861328e-05, 0.0, -0.4945793151855469, -4.00543212890625e-05, -1.9073486328125e-06, -1.3180248737335205, -4.768370445162873e-07, -9.5367431640625e-06, -1.1444091796875e-05, -0.05290186032652855, -0.0006281133973971009, -1.7881377516459906e-06, -0.0006008148193359375, -0.009534835815429688], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), CharacterSelector\n            (picker=UserPicker()))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 205, 71]}, {"score": -4.391805083824117, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 1, "hole0": "ChangeAttack"}, {"_type": "Template19", "hole2": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -1.8927807807922363, -3.159043990308419e-05, -1.6989421844482422, -0.1214141845703125, -2.288818359375e-05, -0.0032807588577270508, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001430511474609375, -0.0001440047926735133, 0.0, -5.7220458984375e-06, -2.86102294921875e-05, 0.0, -9.1552734375e-05, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -0.4769458770751953, 0.0, -1.71661376953125e-05, -0.0002880096435546875], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST)))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "1", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 205, 71]}, {"score": -4.453105714380563, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -1.3428277969360352, -0.19821834564208984, -3.0517578125e-05, -0.0001316070556640625, -1.7807623147964478, -7.43865966796875e-05, 0.0, -0.16510772705078125, -0.001041412353515625, -5.7220458984375e-06, -0.052690859884023666, -5.960462772236497e-07, -7.62939453125e-05, -2.86102294921875e-05, -0.004542945884168148, -3.2782554626464844e-05, 0.0, -1.1444091796875e-05, -0.0002536773681640625, -0.0037689208984375, 0.0, -9.918212890625e-05, -1.33514404296875e-05, -0.163957417011261, -0.0005699394387193024, 0.0, -0.0004425048828125, -0.0040721893310546875], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), MinionSelector(\n            players=BothPlayer(), picker=RandomPicker()))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -4.501598206561873, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 0, "hole0": "ChangeAttack"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -2.086230993270874, -1.4305060176411644e-05, -0.3632211685180664, -0.41937732696533203, -0.0004482269287109375, -9.72747802734375e-05, -0.5759449005126953, -0.0004750490188598633, 0.0, -0.000141143798828125, -0.5054750442504883, -0.0009708404541015625, -0.008606314659118652, 0.0, -0.0011615753173828125, -0.0007457733154296875, -1.9073486328125e-06, -0.003916263580322266, 0.0, -0.0001583099365234375, -2.47955322265625e-05, -0.3303453326225281, -0.0007269344059750438, 0.0, -0.0005168914794921875, -0.0054168701171875], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(0), MinionSelector(\n            Null, picker=RandomPicker()))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "0", "<EOS>", 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 54, 135, "Null", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -4.729810816530623, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template19", "hole2": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSelector"}], "hole0": "Aura"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -0.7521600723266602, -0.000461578369140625, -0.06966107338666916, -7.748603820800781e-06, 0.0, -7.62939453125e-06, -0.4979743957519531, -0.000492095947265625, -0.02235567569732666, -1.2993811651540454e-05, -0.0002117156982421875, -0.22577667236328125, -1.71661376953125e-05, -0.018655840307474136, -0.12086918950080872, -3.814697265625e-06, -0.222565159201622, -2.622604142743512e-06, -1.6632184982299805, -0.06043243408203125, -1.9073486328125e-05, -0.0008282661437988281, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00011444091796875, -0.00011610976071096957, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, 0.0, -0.0001354217529296875, -3.814697265625e-06, -9.72747802734375e-05, 0.0, -0.3367643356323242, 0.0, -0.00226593017578125, -0.00019073486328125], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.MECH)))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 205, 71]}, {"score": -4.799287610776098, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -4.583400726318359, -0.000362396240234375, -0.04089471325278282, -3.2186455882765586e-06], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=True)\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.103019246106776, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Warbot", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "MECH"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "hole0": "Aura"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.340576171875e-05, -1.52587890625e-05, -9.977809531847015e-05, -3.5404915252001956e-05, -4.470348358154297e-07, -6.675708846159978e-06, -2.741813204920618e-06, -3.814697265625e-06, -7.2479248046875e-05, -9.5367431640625e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.10336971282958984, -1.1444091796875e-05, -1.9073486328125e-06, -6.318072337307967e-06, 0.0, -0.000148773193359375, -0.000705718994140625, -0.0012359619140625, -0.0005168914794921875, -1.71661376953125e-05, -0.00040364215965382755, -1.311301275563892e-06, -0.000621795654296875, -8.20159912109375e-05, -0.0002040863037109375, -0.0404512882232666, -9.894352842820808e-06, -8.678435551701114e-05, -3.814697265625e-06, -0.00017893243057187647, -1.1920928244535389e-07, -0.003170013427734375, -0.00142669677734375, -7.62939453125e-06, -1.0728830375228426e-06, -5.054373468738049e-05, -6.031979501130991e-05, -1.3709068298339844e-05, -0.021489858627319336, 0.0, -0.015336036682128906, -0.0001735687255859375, -0.0028028031811118126, -7.033347174001392e-06, -0.000102996826171875, -0.0007534027099609375, -5.7220458984375e-06, -0.0029391595162451267, -0.0008317779866047204, -1.9073486328125e-06, -0.536759078502655, -5.125998541188892e-06, -0.7521600723266602, -0.000461578369140625, -0.06966107338666916, -7.748603820800781e-06, 0.0, -7.62939453125e-06, -0.4979743957519531, -0.000492095947265625, -0.02235567569732666, -1.2993811651540454e-05, -0.0002117156982421875, -0.22577667236328125, -1.71661376953125e-05, -0.018655840307474136, -0.12086918950080872, -3.814697265625e-06, -0.222565159201622, -2.622604142743512e-06, -1.052363395690918, -0.22681808471679688, -3.24249267578125e-05, -0.000335693359375, -0.192405104637146, -4.971027374267578e-05, 0.0, -0.6106338500976562, -0.0019474029541015625, -2.47955322265625e-05, -0.04597890377044678, -1.311301275563892e-06, -7.05718994140625e-05, -1.1444091796875e-05, -0.01710331067442894, -2.6941299438476562e-05, 0.0, -9.5367431640625e-06, -0.0001983642578125, -0.0055065155029296875, 0.0, -0.0001316070556640625, -1.33514404296875e-05, -0.28270938992500305, -0.000649213616270572, 0.0, -0.000270843505859375, -0.0001468658447265625], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Aura(ChangeAttack(2), CharacterSelector(players=BothPlayer(),\n            picker=RandomPicker()))])\n", "choice_history": [77, 145, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Warbot", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"score": -2.971443863304266, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -2.5649402141571045, 0.0, -0.0002574920654296875, -1.71661376953125e-05, -2.586841583251953e-05, -2.0265579223632812e-06], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, taunt=True)\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.7898767136271587, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Call", "func": {"id": "Character<UNK>", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "player"}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "enrage"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -0.6863925457000732, 0.0, -0.0023212432861328125, -1.9073486328125e-05, -0.04859936237335205, -4.768370445162873e-07, -1.9073486328125e-06, -0.2077617645263672, -0.2200946807861328, -3.814697265625e-06, -1.71661376953125e-05, -0.06723833084106445, -0.6821353435516357, -0.0005617141723632812, -0.1609039306640625, -1.33514404296875e-05, -3.814697265625e-06, -0.0006562471389770508, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.03516829013824463, -4.00543212890625e-05, 0.0, -7.62939453125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0001316070556640625, -7.987022399902344e-06, 0.0, -7.62939453125e-06, -0.007907867431640625, -0.1429004669189453, -9.5367431640625e-06, -1.9073486328125e-06, -0.03658229857683182, -2.1695992472814396e-05, -2.47955322265625e-05, -0.00145721435546875, -1.9073486328125e-05, -0.09489059448242188, -3.814697265625e-05, -0.0015735626220703125, -0.0008151531219482422, -1.728534698486328e-05, -3.814697265625e-06, 0.0, -9.357848466606811e-05, -0.043488480150699615, -1.9073486328125e-06, -0.0017604827880859375, -0.06908035278320312, -0.00562286376953125, -0.0001201629638671875, -0.0007419586181640625, -6.115436553955078e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0015333890914916992, -0.0017848005518317223, -1.9073486328125e-06, -8.58306884765625e-05, -0.6528291702270508, -0.0021228790283203125, -0.0002040863037109375, -1.9073486328125e-06, -0.007525085937231779, -3.933906555175781e-06, -3.814697265625e-06, -3.814697265625e-06, -0.19812488555908203], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, enrage=[Effect(Character<UNK>(\n            player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(1))]), SelfSelector()))])\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "enrage", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 48, 110, 25, 133, "Character", "<UNK>", "<EOS>", 212, 76, 195, "player", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.155655670630651, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "puts"}, {"_type": "Template33"}], "func": {"id": "Summon", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -2.0184977054595947, 0.0, -0.000263214111328125, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.00021386146545410156, -4.0531158447265625e-06, -7.62939453125e-06, -0.03805828094482422, -0.0001220703125, -1.71661376953125e-05, -1.9073486328125e-06, -0.4067728519439697, -0.023809092119336128, -0.001468658447265625, -9.1552734375e-05, -9.5367431640625e-06, -0.16231507062911987, -0.36844179034233093, -0.020944595336914062, -0.7332220077514648, -1.33514404296875e-05, -0.036463141441345215, -3.814697265625e-06, -1.9073486328125e-06, -0.0011425018310546875, -3.0517578125e-05, -0.10876941680908203, -1.1920928244535389e-07, -0.13068580627441406, -3.814697265625e-06, -0.0874735414981842, -0.00016033649444580078, 0.0], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(puts(), 2),\n            PlayerSelector()), picker=RandomPicker())\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Summon", "<EOS>", 206, 63, 171, "puts", "<EOS>", 68, 63, 171, "Player", "Selector", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>"]}, {"score": -4.158899515756772, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}], "func": {"id": "<UNK>opponent", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -1.1987550258636475, -1.1920928244535389e-07, -0.00014495849609375, 0.0, 0.0, -3.4332275390625e-05, -0.000484466552734375, -5.7220458984375e-06, -1.9073486328125e-06, -0.0758829116821289, -4.9591064453125e-05, -7.62939453125e-06, -7.62939453125e-06, -0.6227825880050659, -1.2047574520111084, -6.007979027344845e-05, -0.030477523803710938, -0.5704145431518555, -5.7220458984375e-06, -0.0016002655029296875, 0.0, -0.04494428634643555, -4.768370445162873e-07, -0.0021533966064453125, -3.814697265625e-06, -6.103515625e-05, -1.9073486328125e-06, -5.7220458984375e-05, -3.814697265625e-06, 0.0], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, deathrattle=Deathrattle(\n            <UNK>opponent(CARD_SOURCE.<UNK>), PlayerSelector()))\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "<UNK>", "opponent", "<EOS>", 205, 45, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -4.169971318632328, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -3.7634780406951904, -1.1920928244535389e-07, -0.0002384185791015625, -3.0517578125e-05, -2.3007391064311378e-05, -1.1920928244535389e-07], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, charge=True)\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.238261714321702, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Call", "func": {"id": "Character<UNK>", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "player"}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "enrage"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -0.6863925457000732, 0.0, -0.0023212432861328125, -1.9073486328125e-05, -0.04859936237335205, -4.768370445162873e-07, -1.9073486328125e-06, -0.2077617645263672, -0.2200946807861328, -3.814697265625e-06, -1.71661376953125e-05, -0.06723833084106445, -0.6821353435516357, -0.0005617141723632812, -0.1609039306640625, -1.33514404296875e-05, -3.814697265625e-06, -0.0006562471389770508, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.03516829013824463, -4.00543212890625e-05, 0.0, -7.62939453125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0001316070556640625, -7.987022399902344e-06, 0.0, -7.62939453125e-06, -0.007907867431640625, -0.1429004669189453, -9.5367431640625e-06, -1.9073486328125e-06, -0.03658229857683182, -2.1695992472814396e-05, -2.47955322265625e-05, -0.00145721435546875, -1.9073486328125e-05, -0.09489059448242188, -3.814697265625e-05, -0.0015735626220703125, -0.0008151531219482422, -1.728534698486328e-05, -3.814697265625e-06, 0.0, -9.357848466606811e-05, -0.043488480150699615, -1.9073486328125e-06, -0.0017604827880859375, -0.06908035278320312, -0.00562286376953125, -0.0001201629638671875, -0.0007419586181640625, -6.115436553955078e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0015333890914916992, -0.0017848005518317223, -1.9073486328125e-06, -8.58306884765625e-05, -0.9093971252441406, -0.0005092620849609375, -7.2479248046875e-05, 0.0, -0.014510393142700195, -3.933906555175781e-06, -3.933906555175781e-06, -1.9073486328125e-06, -0.3847055435180664], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, enrage=[Effect(Character<UNK>(\n            player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(2))]), SelfSelector()))])\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "enrage", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 48, 110, 25, 133, "Character", "<UNK>", "<EOS>", 212, 76, 195, "player", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.2450828270017595, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "card"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -3.837695360183716, 0.0, -0.0011501312255859375, -1.1444091796875e-05, -2.4557111828471534e-05, -2.3841855067985307e-07], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, card=True)\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "card", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.29613110571124, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "divine_shield"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -1.9242023229599, -1.9073486328125e-06, -0.0001354217529296875, -2.86102294921875e-05, -2.753724402282387e-05, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -2.354750156402588, 0.0, -0.0002841949462890625, -1.52587890625e-05, -2.586841583251953e-05, -1.1920928244535389e-07], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, divine_shield=True, taunt=True)\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "divine_shield", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.530288098098637, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "putsWithHand"}, {"_type": "Template33"}], "func": {"id": "Summon", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -1.1987550258636475, -1.1920928244535389e-07, -0.00014495849609375, 0.0, 0.0, -3.4332275390625e-05, -0.000484466552734375, -5.7220458984375e-06, -1.9073486328125e-06, -0.0758829116821289, -4.9591064453125e-05, -7.62939453125e-06, -7.62939453125e-06, -0.9078797101974487, -0.011201407760381699, -0.0007991790771484375, -3.24249267578125e-05, -7.62939453125e-06, -0.1785997599363327, -0.8851219415664673, -0.21055860817432404, -0.0008189678192138672, -0.2949333190917969, -0.35721397399902344, -3.814697265625e-06, -0.001540064811706543, -1.9073486328125e-06, 0.0], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, deathrattle=Deathrattle(Summon(\n            putsWithHand(), 2), PlayerSelector()))\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Summon", "<EOS>", 206, 63, 171, "puts", "With", "Hand", "<EOS>", 68, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -4.81134192431152, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "puts"}, {"_type": "Template33"}], "func": {"id": "Summon", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -1.1987550258636475, -1.1920928244535389e-07, -0.00014495849609375, 0.0, 0.0, -3.4332275390625e-05, -0.000484466552734375, -5.7220458984375e-06, -1.9073486328125e-06, -0.0758829116821289, -4.9591064453125e-05, -7.62939453125e-06, -7.62939453125e-06, -0.9078797101974487, -0.011201407760381699, -0.0007991790771484375, -3.24249267578125e-05, -7.62939453125e-06, -0.1785997599363327, -1.4681411981582642, -0.020089149475097656, -0.48090171813964844, -1.1444091796875e-05, -0.06209909915924072, -3.814697265625e-06, 0.0], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, deathrattle=Deathrattle(Summon(\n            puts(), 2), PlayerSelector()))\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 48, 111, 25, 133, "Summon", "<EOS>", 206, 63, 171, "puts", "<EOS>", 68, 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -4.89282617125189, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "Player"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -4.046302795410156, 0.0, -0.4391794204711914, -0.0004711151123046875, -0.0006707906140945852, -9.536738616588991e-07], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, Player=True)\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "Player", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.080015579294518, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "UsedPower"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "enrage"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -0.6863925457000732, 0.0, -0.0023212432861328125, -1.9073486328125e-05, -0.04859936237335205, -4.768370445162873e-07, -1.9073486328125e-06, -1.674637794494629, 0.0, -0.9438714385032654, -0.026639938354492188, -8.7738037109375e-05, -0.001186370849609375, -2.288818359375e-05, 0.0, 0.0, -0.001644134521484375, -1.0848044439626392e-05, 0.0, -3.62396240234375e-05, -0.2571401596069336, -0.0013866424560546875, -7.62939453125e-06, -1.9073486328125e-06, -0.06502848118543625, -2.741800926742144e-05, -2.288818359375e-05, -0.0014781951904296875, -1.1444091796875e-05, -0.09658622741699219, -3.814697265625e-05, -0.00405120849609375, -0.0009733438491821289, -1.728534698486328e-05, -3.814697265625e-06, 0.0, -0.00013077131006866693, -0.060665566474199295, -1.9073486328125e-06, -0.0020198822021484375, -0.09291839599609375, -0.0057964324951171875, -0.0001220703125, -0.000705718994140625, -7.259845733642578e-05, -3.4332275390625e-05, 0.0, -0.001550436019897461, -0.0017650116933509707, -1.9073486328125e-06, -7.43865966796875e-05, -0.4942750930786133, -0.002330780029296875, -0.00017547607421875, -1.9073486328125e-06, -0.008252977393567562, -3.933906555175781e-06, -3.814697265625e-06, -3.814697265625e-06, -0.1906604766845703], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, enrage=[Effect(UsedPower(),\n            ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(1))]),\n            SelfSelector()))])\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "enrage", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Used", "Power", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -5.402782411861736, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "divine_shield"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -1.9242023229599, -1.9073486328125e-06, -0.0001354217529296875, -2.86102294921875e-05, -2.753724402282387e-05, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -3.4615163803100586, -2.3841855067985307e-07, -0.0001621246337890625, -2.6702880859375e-05, -2.133846101060044e-05, -1.1920928244535389e-07], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, divine_shield=True, charge=True)\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "divine_shield", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.7956468869947955, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}], "hole1": [{"_type": "Call", "func": {"id": "Character<UNK>", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "player"}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "enrage"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -0.6863925457000732, 0.0, -0.0023212432861328125, -1.9073486328125e-05, -0.04859936237335205, -4.768370445162873e-07, -1.9073486328125e-06, -0.2077617645263672, -0.2200946807861328, -3.814697265625e-06, -1.71661376953125e-05, -0.06723833084106445, -0.6821353435516357, -0.0005617141723632812, -0.1609039306640625, -1.33514404296875e-05, -3.814697265625e-06, -0.0006562471389770508, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.03516829013824463, -4.00543212890625e-05, 0.0, -7.62939453125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0001316070556640625, -7.987022399902344e-06, 0.0, -7.62939453125e-06, -0.007907867431640625, -0.1429004669189453, -9.5367431640625e-06, -1.9073486328125e-06, -0.03658229857683182, -2.1695992472814396e-05, -2.47955322265625e-05, -0.00145721435546875, -1.9073486328125e-05, -0.09489059448242188, -3.814697265625e-05, -0.0015735626220703125, -0.0008151531219482422, -1.728534698486328e-05, -3.814697265625e-06, 0.0, -9.357848466606811e-05, -0.043488480150699615, -1.9073486328125e-06, -0.0017604827880859375, -0.06908035278320312, -0.00562286376953125, -0.0001201629638671875, -0.0007419586181640625, -6.115436553955078e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0015333890914916992, -0.0017848005518317223, -1.9073486328125e-06, -8.58306884765625e-05, -0.9093971252441406, -0.0005092620849609375, -7.2479248046875e-05, 0.0, -0.014510393142700195, -3.933906555175781e-06, -3.933906555175781e-06, -1.9073486328125e-06, -1.1451606750488281, -0.0005016326904296875, -0.08360922336578369, -1.919269561767578e-05, -4.9591064453125e-05, -0.03723716735839844, 0.0, -0.4808950126171112, -0.01947927474975586, -7.867813110351562e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.026500701904296875, -4.00543212890625e-05, 0.0, -1.33514404296875e-05, -0.6050224304199219, -9.5367431640625e-06, -0.789927065372467, -5.0187089073006064e-05, -0.7003297805786133, -3.814697265625e-06, -0.04659658297896385, -7.62939453125e-06, -1.9073486328125e-06, -0.0001544952392578125, -0.0064182281494140625], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, enrage=[Effect(Character<UNK>(\n            player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(2))]), SelfSelector())), Effect(TurnEnded(),\n            ActionTag(Kill(), SelfSelector()))])\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "enrage", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 48, 110, 25, 133, "Character", "<UNK>", "<EOS>", 212, 76, 195, "player", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -9.023367269290752, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Deathlord", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Deathlord"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "MinionHasdeck"}, {"_type": "Template33"}], "func": {"id": "AddCard", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}], "hole1": [{"_type": "Call", "func": {"id": "Character<UNK>", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "player"}]}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "enrage"}], "hole2": 8, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [0.0, -1.9073486328125e-05, -1.668928234721534e-05, -0.0001790456153685227, -1.1548399925231934e-07, -2.0980718545615673e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000518798828125, -1.9073486328125e-05, -5.960462772236497e-07, -2.0265579223632812e-06, -5.841255187988281e-06, -2.1457672119140625e-06, -0.00015413761138916016, 0.0, -0.00023853778839111328, 0.0, -4.57763671875e-05, 0.0, -0.00019286452152300626, 0.0, -9.5367431640625e-06, -0.009073257446289062, -0.00020599365234375, -3.0979281291365623e-06, -2.384185791015625e-06, -1.9073486328125e-06, 0.0, -0.0028249025344848633, -1.1920928244535389e-07, -0.0030918121337890625, -7.62939453125e-06, 0.0, -0.3892558813095093, -0.0002498626708984375, -1.9073486328125e-05, -9.5367431640625e-06, -1.2755393072438892e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -0.6863925457000732, 0.0, -0.0023212432861328125, -1.9073486328125e-05, -0.04859936237335205, -4.768370445162873e-07, -1.9073486328125e-06, -0.2077617645263672, -0.2200946807861328, -3.814697265625e-06, -1.71661376953125e-05, -0.06723833084106445, -0.6821353435516357, -0.0005617141723632812, -0.1609039306640625, -1.33514404296875e-05, -3.814697265625e-06, -0.0006562471389770508, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.03516829013824463, -4.00543212890625e-05, 0.0, -7.62939453125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.0001316070556640625, -7.987022399902344e-06, 0.0, -7.62939453125e-06, -0.007907867431640625, -0.1429004669189453, -9.5367431640625e-06, -1.9073486328125e-06, -0.03658229857683182, -2.1695992472814396e-05, -2.47955322265625e-05, -0.00145721435546875, -1.9073486328125e-05, -0.09489059448242188, -3.814697265625e-05, -0.0015735626220703125, -0.0008151531219482422, -1.728534698486328e-05, -3.814697265625e-06, 0.0, -9.357848466606811e-05, -0.043488480150699615, -1.9073486328125e-06, -0.0017604827880859375, -0.06908035278320312, -0.00562286376953125, -0.0001201629638671875, -0.0007419586181640625, -6.115436553955078e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0015333890914916992, -0.0017848005518317223, -1.9073486328125e-06, -8.58306884765625e-05, -0.9093971252441406, -0.0005092620849609375, -7.2479248046875e-05, 0.0, -0.014510393142700195, -3.933906555175781e-06, -3.933906555175781e-06, -1.9073486328125e-06, -1.1451606750488281, -0.0005016326904296875, -0.08360922336578369, -1.919269561767578e-05, -4.9591064453125e-05, -0.03723716735839844, 0.0, -0.4808950126171112, -0.01947927474975586, -7.867813110351562e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.026500701904296875, -4.00543212890625e-05, 0.0, -1.33514404296875e-05, -0.8519268035888672, -0.008172988891601562, -1.1444091796875e-05, 0.0, -0.4635956287384033, -0.0002677432494238019, -0.0033082962036132812, -0.17998504638671875, -0.0016765594482421875, -5.7220458984375e-06, -0.3245980441570282, -0.6055406332015991, -0.4682716429233551, -0.0019814965780824423, -0.4139289855957031, -0.04615211486816406, -1.1444091796875e-05, -0.003502011066302657, -3.814697265625e-06, -9.5367431640625e-06, -0.0001220703125, -0.003170013427734375], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, enrage=[Effect(Character<UNK>(\n            player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(2)),\n            Buff(ChangeHealth(2))]), SelfSelector())), Effect(TurnEnded(),\n            ActionTag(AddCard(MinionHasdeck(), 2), PlayerSelector()))])\n", "choice_history": [77, 145, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "enrage", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 48, 110, 25, 133, "Character", "<UNK>", "<EOS>", 212, 76, 195, "player", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 48, 111, 25, 133, "Add", "Card", "<EOS>", 206, 63, 171, "Minion", "Has", "deck", "<EOS>", 68, 63, 171, "Player", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"score": -1.3677530080525386, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template19", "hole1": {"id": "<UNK>Windfury", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}, "hole2": "buffs", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8278708457946777, 0.0, -0.005473136901855469, -0.0006008148193359375, -0.0002613067626953125, -0.09901905059814453, -0.008512496948242188, -0.005721970461308956, -1.5497195136049413e-06, -3.814697265625e-06, -7.62939453125e-06, -0.2721008360385895, -0.1376817524433136, -2.0265579223632812e-06, -0.007877349853515625], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(<UNK>Windfury())])\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "Windfury", "<EOS>", 71]}, {"score": -1.5697250316377307, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8802456855773926, 0.0, -0.0035076141357421875, -9.5367431640625e-05, -0.6832578182220459, -1.1920928244535389e-07], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=True)\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -1.596630210661452, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8802456855773926, 0.0, -0.0035076141357421875, -9.5367431640625e-05, -0.710162878036499, -2.3841855067985307e-07], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=True)\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 26, 134, "False", "<EOS>"]}, {"score": -3.474108453040337, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Call", "args": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "func": {"id": "ManaChange", "_type": "Name"}}, {"_type": "Call", "func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "IsSpell"}, "arg": "condition"}]}], "hole0": "Aura"}, "hole2": "auras", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -2.135833263397217, 0.0, -0.000522613525390625, -2.86102294921875e-05, -0.004570364486426115, -4.0531158447265625e-06, -1.71661376953125e-05, -0.0201416015625, -0.000469207763671875, -7.62939453125e-06, 0.0, -0.026035169139504433, -0.006924152374267578, -4.649158654501662e-06, -0.0065670013427734375, -0.004389762878417969, -0.0002155303955078125, -0.000659942626953125, -0.6890239715576172, -1.1444091796875e-05, -0.021863937377929688, -4.38690185546875e-05, -1.9073486328125e-06, -2.741813295870088e-05, -0.0002671480178833008, 0.0, -0.00119781494140625, 0.0, 0.0, -0.006228923797607422, 0.0, -0.5152063369750977, 0.0, -0.019473128020763397, -0.011437504552304745, -0.0002605915069580078, -3.814697265625e-06, -5.14984130859375e-05], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-3), CardSelector(\n            condition=IsSpell()))])\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 48, 111, 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 48, 110, 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 34, 171, "Is", "Spell", "<EOS>", 205, 71]}, {"score": -3.5187257022110927, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template19", "hole1": {"id": "moreWindfury", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}, "hole2": "buffs", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8278708457946777, 0.0, -0.005473136901855469, -0.0006008148193359375, -0.0002613067626953125, -0.09901905059814453, -0.008512496948242188, -0.005721970461308956, -1.5497195136049413e-06, -3.814697265625e-06, -7.62939453125e-06, -2.4230735301971436, -0.1376817524433136, -2.0265579223632812e-06, -0.007877349853515625], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(moreWindfury())])\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 59, 155, "Buff", "<EOS>", 25, 133, "more", "Windfury", "<EOS>", 71]}, {"score": -3.5817328106102124, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Call", "args": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}], "func": {"id": "ManaChange", "_type": "Name"}}, {"_type": "Call", "func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "IsSpell"}, "arg": "condition"}]}], "hole0": "Aura"}, "hole2": "auras", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -2.135833263397217, 0.0, -0.000522613525390625, -2.86102294921875e-05, -0.004570364486426115, -4.0531158447265625e-06, -1.71661376953125e-05, -0.0201416015625, -0.000469207763671875, -7.62939453125e-06, 0.0, -0.026035169139504433, -0.006924152374267578, -4.649158654501662e-06, -0.0065670013427734375, -0.004389762878417969, -0.0002155303955078125, -0.000659942626953125, -0.8635282516479492, -0.0002880096435546875, -0.0003032684326171875, -7.05718994140625e-05, -3.814697265625e-06, -0.00036454200744628906, -4.76837158203125e-05, 0.0, -0.0005092620849609375, 0.0, 0.0, -0.005482792854309082, 0.0, -0.4687843322753906, 0.0, -0.020130056887865067, -0.012843676842749119, -0.0003063678741455078, -3.814697265625e-06, -5.7220458984375e-05], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-1), CardSelector(\n            condition=IsSpell()))])\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 48, 111, 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 38, 48, 110, 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 34, 171, "Is", "Spell", "<EOS>", 205, 71]}, {"score": -3.991552689716052, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template19", "hole1": {"id": "CantAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}, "hole2": "buffs", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8278708457946777, 0.0, -0.005473136901855469, -0.0006008148193359375, -0.0002613067626953125, -0.09901905059814453, -0.008512496948242188, -0.005721970461308956, -1.5497195136049413e-06, -3.814697265625e-06, -7.62939453125e-06, -2.214597225189209, -0.7067257761955261, -6.198883056640625e-06, -0.1201324462890625], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(CantAttack())])\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 59, 155, "Buff", "<EOS>", 25, 133, "Cant", "Attack", "<EOS>", 71]}, {"score": -4.620122070097516, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template34"}, "hole2": "spell_damage", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -4.458766460418701, 0.0, -0.1587371826171875], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=1)\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 38]}, {"score": -4.896445670710243, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template19", "hole1": {"id": "Cant<UNK>", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}, "hole2": "buffs", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8278708457946777, 0.0, -0.005473136901855469, -0.0006008148193359375, -0.0002613067626953125, -0.09901905059814453, -0.008512496948242188, -0.005721970461308956, -1.5497195136049413e-06, -3.814697265625e-06, -7.62939453125e-06, -2.214597225189209, -1.6639915704727173, -0.0006023644818924367, -0.06716346740722656], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(Cant<UNK>())])\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 59, 155, "Buff", "<EOS>", 25, 133, "Cant", "<UNK>", "<EOS>", 71]}, {"score": -4.984654970139097, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template19", "hole1": {"id": "<UNK>more", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}, "hole2": "buffs", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8278708457946777, 0.0, -0.005473136901855469, -0.0006008148193359375, -0.0002613067626953125, -0.09901905059814453, -0.008512496948242188, -0.005721970461308956, -1.5497195136049413e-06, -3.814697265625e-06, -7.62939453125e-06, -0.2721008360385895, -3.7071352005004883, -0.00895070843398571, -0.04637718200683594], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[Buff(<UNK>more())])\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "more", "<EOS>", 71]}, {"score": -5.340481514715734, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -5.30050802230835, -3.814697265625e-06, -0.0001068115234375, -3.62396240234375e-05, -0.03720808029174805, -1.1920928244535389e-07], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, charge=True)\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.845961327337811, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "NameConstant", "value": true}, {"_type": "Template36_expr_seq"}]}, "hole2": "buffs", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -0.8278708457946777, 0.0, -0.005473136901855469, -0.0006008148193359375, -0.0002613067626953125, -4.676647186279297, -0.000423431396484375, -0.019628167152404785, -1.9073486328125e-06, -0.3124361038208008], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, buffs=[True])\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 54, 134, "False", "<EOS>", 71]}, {"score": -6.6465452859636045, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_damage", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -4.458766460418701, 0.0, -2.036886215209961, -2.6702880859375e-05, -0.14824748039245605, 0.0], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, spell_damage=True)\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "spell_damage", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.145579094671795, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "divine_shield", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -0.00170135498046875, -3.814697265625e-06, -2.0265579223632812e-06, -1.1920928244535389e-07, -0.00012409687042236328, 0.0, -7.089967727661133, -1.9073486328125e-06, -5.14984130859375e-05, -1.9073486328125e-05, -0.05292046070098877, 0.0], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, divine_shield=True)\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "4", "<EOS>", "divine_shield", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -9.437234039091656, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Nerub'arWeblord", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -1.52587890625e-05, -6.9141146923357155e-06, -3.2305197237292305e-05, -1.4066597032069694e-05, -4.169531166553497e-06, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0002269744873046875, -1.71661376953125e-05, -2.50339189733495e-06, -3.516674041748047e-05, 0.0, -3.814697265625e-06, -5.936622619628906e-05, -2.1457672119140625e-06, -0.00016617660003248602, 0.0, -0.00012195075396448374, 0.0, -2.6702880859375e-05, 0.0, -4.5776323531754315e-05, 0.0, -1.9073486328125e-06, -9.38382625579834, -0.00038909912109375, -1.9073486328125e-06, -4.5299530029296875e-06, -0.05222511291503906, -1.1920928244535389e-07], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "choice_history": [77, 145, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"score": -0.23763223502370323, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_targetable", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -0.2154982089996338, 0.0, -0.0002422332763671875, -1.33514404296875e-05, -0.0012133121490478516, -2.3841855067985307e-07], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 26, 134, "False", "<EOS>"]}, {"score": -3.161999066803183, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -3.1210529804229736, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.02024853229522705, -2.3841855067985307e-07], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, taunt=True)\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "taunt", "<EOS>", 26, 134, "False", "<EOS>"]}, {"score": -4.290273685159711, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 6, "hole0": "ManaChange"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -2.2638227939605713, 0.0, -0.0022525787353515625, -3.24249267578125e-05, -0.000413535803090781, -5.364418029785156e-05, -0.0012722015380859375, -0.23300552368164062, -3.0517578125e-05, -0.3509538173675537, -0.023903250694274902, -0.0026339292526245117, -0.61688631772995, -2.6702880859375e-05, -0.016941070556640625, -3.814697265625e-06, -0.7571887969970703, -4.768371127283899e-06, 0.0, 0.0, -0.00018310546875], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, auras=[Aura(ManaChange(6), HeroSelector())])\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Mana", "Change", "<EOS>", "6", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.4754796811966955, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 1, "hole0": "ManaChange"}, {"_type": "Template25", "hole0": "MinionSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -2.2638227939605713, 0.0, -0.0022525787353515625, -3.24249267578125e-05, -0.000413535803090781, -5.364418029785156e-05, -0.0012722015380859375, -0.23300552368164062, -3.0517578125e-05, -0.3509538173675537, -0.023903250694274902, -0.0026339292526245117, -1.3786137104034424, -1.1444091796875e-05, -0.003177642822265625, -1.9073486328125e-06, -0.19358432292938232, -0.0003286600112915039, 0.0, -1.9073486328125e-06, -0.000720977783203125], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, auras=[Aura(ManaChange(1), MinionSelector())])\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Mana", "Change", "<EOS>", "1", "<EOS>", 63, 171, "Minion", "Selector", "<EOS>", 205, 71]}, {"score": -4.849473018351084, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 6, "hole0": "ManaChange"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -2.2638227939605713, 0.0, -0.0022525787353515625, -3.24249267578125e-05, -0.000413535803090781, -5.364418029785156e-05, -0.0012722015380859375, -0.23300552368164062, -3.0517578125e-05, -0.3509538173675537, -0.023903250694274902, -0.0026339292526245117, -0.61688631772995, -2.6702880859375e-05, -0.016941070556640625, -3.814697265625e-06, -1.3160419464111328, -1.9073486328125e-06, 0.0, 0.0, -0.0005321502685546875], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, auras=[Aura(ManaChange(6), PlayerSelector())])\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Mana", "Change", "<EOS>", "6", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.858493050071921, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -4.830684661865234, 0.0, -3.0517578125e-05, -3.814697265625e-06, -0.007108926773071289, -2.3841855067985307e-07], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, charge=True)\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "charge", "<EOS>", 26, 134, "False", "<EOS>"]}, {"score": -4.9450328239827215, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -2.2638227939605713, 0.0, -0.0022525787353515625, -3.24249267578125e-05, -0.000413535803090781, -5.364418029785156e-05, -0.0012722015380859375, -0.23300552368164062, -3.0517578125e-05, -1.2952487468719482, -0.020502686500549316, -7.82012939453125e-05, -0.1274578869342804, -2.86102294921875e-05, -0.002094268798828125, -1.9073486328125e-06, -0.9764702320098877, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.001598358154296875], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, auras=[Aura(ChangeAttack(2), PlayerSelector())])\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -5.3782393822102605, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -2.2638227939605713, 0.0, -0.0022525787353515625, -3.24249267578125e-05, -0.000413535803090781, -5.364418029785156e-05, -0.0012722015380859375, -0.23300552368164062, -3.0517578125e-05, -1.2952487468719482, -0.020502686500549316, -7.82012939453125e-05, -0.1274578869342804, -2.86102294921875e-05, -0.002094268798828125, -1.9073486328125e-06, -1.411149263381958, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.0001220703125], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, auras=[Aura(ChangeAttack(2), WeaponSelector())])\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -5.4286588022141515, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 4, "hole0": "ManaChange"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -2.2638227939605713, 0.0, -0.0022525787353515625, -3.24249267578125e-05, -0.000413535803090781, -5.364418029785156e-05, -0.0012722015380859375, -0.23300552368164062, -3.0517578125e-05, -0.3509538173675537, -0.023903250694274902, -0.0026339292526245117, -1.8187001943588257, 0.0, -0.02693939208984375, -9.5367431640625e-06, -0.6835958957672119, -8.463859558105469e-06, 0.0, 0.0, -0.0003662109375], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, auras=[Aura(ManaChange(4), HeroSelector())])\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Mana", "Change", "<EOS>", "4", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -5.4948899349901055, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "Minion", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -5.463698387145996, -1.33514404296875e-05, -0.007830619812011719, -2.288818359375e-05, -0.002659440040588379, -3.576278118089249e-07], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, Minion=True)\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "Minion", "<EOS>", 26, 134, "False", "<EOS>"]}, {"score": -5.616972793045527, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -2.2638227939605713, 0.0, -0.0022525787353515625, -3.24249267578125e-05, -0.000413535803090781, -5.364418029785156e-05, -0.0012722015380859375, -0.23300552368164062, -3.0517578125e-05, -1.2952487468719482, -0.020502686500549316, -7.82012939453125e-05, -0.1274578869342804, -2.86102294921875e-05, -0.002094268798828125, -1.9073486328125e-06, -1.649735689163208, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -0.0002727508544921875], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, auras=[Aura(ChangeAttack(2), HeroSelector())])\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -6.222668369743523, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "create_minion", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -6.188561916351318, 0.0, -0.007167816162109375, -4.9591064453125e-05, -0.006223797798156738, -3.576278118089249e-07], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, create_minion=True)\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "create_minion", "<EOS>", 26, 134, "False", "<EOS>"]}, {"score": -6.273778398964048, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "DREAM", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -6.216549873352051, 0.0, -0.031195640563964844, -1.52587890625e-05, -0.0053522586822509766, -4.768370445162873e-07], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, DREAM=True)\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "DREAM", "<EOS>", 26, 134, "False", "<EOS>"]}, {"score": -6.373899897072064, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "p", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -0.008777618408203125, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -0.00010192393528996035, 0.0, -6.313211917877197, 0.0, -0.035796165466308594, -3.814697265625e-05, -0.004188656806945801, -1.1920928244535389e-07], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, p=True)\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "4", "<EOS>", "6", "<EOS>", "p", "<EOS>", 26, 134, "False", "<EOS>"]}, {"score": -9.193032701936545, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SpectralKnight", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.0005565524916164577, -0.00010239714902127162, -2.2411095415009186e-05, -1.3232231140136719e-05, -1.919269561767578e-05, 0.0, 0.0, -0.00933837890625, -9.5367431640625e-06, -8.22540732769994e-06, -8.940696716308594e-05, -3.540515899658203e-05, 0.0, -0.0010131597518920898, 0.0, -0.0004024505615234375, 0.0, -0.00013625621795654297, 0.0, -1.9073486328125e-06, 0.0, -1.9550323486328125e-05, 0.0, -1.9073486328125e-06, -9.179059982299805, -0.0016155242919921875, -2.622600504764705e-06, -4.410734163684538e-06, -0.0005645751953125, -2.2649765014648438e-06], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6)\n", "choice_history": [77, 145, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "6", "<EOS>"]}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"score": -0.9511073915707229, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -0.5219993591308594, -0.0002899169921875, -0.0196075439453125, -0.0008220672607421875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0005327463150024414, -0.0015039442805573344, 0.0, -9.72747802734375e-05, -0.008609771728515625, -0.00537109375, -0.11672401428222656, -2.09808349609375e-05, -0.0002407810534350574, -1.3589859008789062e-05, 0.0, -3.814697265625e-06, 0.0, -0.00016473690629936755, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001430511474609375, -2.6702880859375e-05, -1.1920928244535389e-07, -2.7418097943154862e-06, -3.4332275390625e-05, -1.1920928244535389e-07], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -2.530901191384565, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -2.0990657806396484, -0.0015964508056640625, -0.0017337799072265625, -0.0002422332763671875, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.001513838768005371, -0.0026291608810424805, 0.0, -0.00018310546875, -0.05557727813720703, -0.0044231414794921875, -0.08835697174072266, -1.9073486328125e-05, -0.0002905979345086962, -1.1563301086425781e-05, 0.0, -3.814697265625e-06, 0.0, -0.00015234059537760913, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001373291015625, -2.86102294921875e-05, -1.1920928244535389e-07, -2.861018856492592e-06, -3.4332275390625e-05, -1.1920928244535389e-07], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -2.613107265263359, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -1.6492547988891602, -5.7220458984375e-06, -0.5474197864532471, -4.756337511935271e-05, -0.000156402587890625, -0.005748748779296875, -3.814697265625e-05, -2.09808349609375e-05, -4.208087921142578e-05, -8.20159912109375e-05, -1.1920928244535389e-07, -0.40326499938964844, 0.0, -2.288818359375e-05, -0.0006583929061889648, -1.1920922133867862e-06, -4.00543212890625e-05, -1.9073486328125e-06, -0.0005762576474808156, -2.872943878173828e-05, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -0.00014495849609375, -0.000179290771484375, -2.47955322265625e-05, -3.5762769812208717e-07, -2.3841855067985307e-07, -1.9073486328125e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Kill(), MinionSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -3.603596489740582, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -0.5219993591308594, -0.0002899169921875, -0.0196075439453125, -0.0008220672607421875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0005327463150024414, -0.0015039442805573344, 0.0, -9.72747802734375e-05, -0.008609771728515625, -0.00537109375, -2.74160099029541, -0.0059528350830078125, -1.9073486328125e-06, -2.09808349609375e-05, -7.450580596923828e-05, -2.5033950805664062e-05, -2.0265579223632812e-06, -0.002071380615234375, -1.9073486328125e-06, -7.62939453125e-06, -0.01879894733428955, -1.4305104514278355e-06, -0.0001583099365234375, -1.9073486328125e-06, -0.0008399486541748047, -3.445148468017578e-05, 0.0, -1.9073486328125e-06, 0.0, -5.9604644775390625e-06, 0.0, -0.000133514404296875, -0.000110626220703125, -1.9073486328125e-05, -3.5762769812208717e-07, -4.768370445162873e-07, -1.9073486328125e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -3.9915226823895935, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Replace"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -1.6492547988891602, -5.7220458984375e-06, -1.9334867000579834, -0.014296482317149639, -0.0010700225830078125, -0.000568389892578125, -5.340576171875e-05, -3.0517578125e-05, -5.924701690673828e-05, -6.103515625e-05, -1.1920928244535389e-07, -0.3854398727416992, -1.9073486328125e-06, -4.76837158203125e-05, -0.0008128881454467773, -1.1920922133867862e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.0005577802076004446, -3.063678741455078e-05, 0.0, -3.814697265625e-06, 0.0, -2.0265579223632812e-06, 0.0, -0.0001583099365234375, -0.000179290771484375, -2.288818359375e-05, -3.5762769812208717e-07, -2.3841855067985307e-07, -2.09808349609375e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Replace(), MinionSelector\n            (players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Replace", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -4.1376236093917385, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -1.6492547988891602, -5.7220458984375e-06, -0.5474197864532471, -4.756337511935271e-05, -0.000156402587890625, -0.005748748779296875, -3.814697265625e-05, -2.09808349609375e-05, -4.208087921142578e-05, -8.20159912109375e-05, -1.1920928244535389e-07, -1.1158790588378906, -7.62939453125e-06, -2.86102294921875e-05, -0.00301206111907959, -9.536738616588991e-07, -0.00260162353515625, -3.814697265625e-06, -0.005130410194396973, -1.3470649719238281e-05, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, -0.010447502136230469, 0.0, -0.17657852172851562, -1.1444091796875e-05, -0.6153432130813599, -0.00030362606048583984, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, 0.0, -2.86102294921875e-05, -3.62396240234375e-05, -1.52587890625e-05, -5.960457656328799e-07, -1.1920928244535389e-07, -1.728534698486328e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Kill(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -4.190710677059961, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template37"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -3.784487724304199, -0.0002307891845703125, -0.001483917236328125, -0.00042724609375, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.0009250640287064016, -0.0013171433238312602, 0.0, -0.0001506805419921875, -0.03337669372558594, -0.005184173583984375, -0.08759784698486328, -2.09808349609375e-05, -0.00022624153643846512, -1.5497207641601562e-05, 0.0, -3.814697265625e-06, 0.0, -0.0001630684855626896, -1.1920928244535389e-07, -1.9073486328125e-05, -0.0001392364501953125, -2.6702880859375e-05, -1.1920928244535389e-07, -2.50339189733495e-06, -3.24249267578125e-05, -1.1920928244535389e-07], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(4\n            )), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 72, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -4.336553992120315, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -1.6492547988891602, -5.7220458984375e-06, -0.5474197864532471, -4.756337511935271e-05, -0.000156402587890625, -0.005748748779296875, -3.814697265625e-05, -2.09808349609375e-05, -4.208087921142578e-05, -8.20159912109375e-05, -1.1920928244535389e-07, -1.1158790588378906, -7.62939453125e-06, -2.86102294921875e-05, -0.00301206111907959, -9.536738616588991e-07, -0.00260162353515625, -3.814697265625e-06, -0.005130410194396973, -1.3470649719238281e-05, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, -0.010447502136230469, 0.0, -0.17657852172851562, -1.1444091796875e-05, -0.8139725923538208, -0.0005990266799926758, 0.0, -5.7220458984375e-06, 0.0, -2.1457672119140625e-06, 0.0, -3.24249267578125e-05, -3.62396240234375e-05, -1.52587890625e-05, -5.960457656328799e-07, -1.1920928244535389e-07, -1.728534698486328e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Kill(), MinionSelector(\n            players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -4.382980641576623, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "HasSilence"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}, {"_type": "Template25", "hole0": "RandomPicker"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -1.385634422302246, -0.016141891479492188, -0.052066922187805176, 0.0, -5.7220458984375e-05, 0.0, -0.017162561416625977, -0.00037789344787597656, -1.7762111383490264e-05, -0.021254539489746094, -0.000659942626953125, -3.62396240234375e-05, -0.8350109457969666, -0.13873328268527985, -0.000399033073335886, -0.0016326904296875, -4.1961669921875e-05, -0.6868773102760315, -1.990794771700166e-05, 0.0, -0.7998056411743164, -0.027727127075195312, -0.000156402587890625, -0.09694540500640869, -0.0013842543121427298, 0.0, -0.022058486938476562, -1.1444091796875e-05, -0.00369843328371644, -1.0728831512096804e-05, -2.0265579223632812e-06, -7.62939453125e-06, 0.0, -2.1457672119140625e-06, 0.0, -2.86102294921875e-05, -0.0001087188720703125, -2.47955322265625e-05, -4.768368739860307e-07, -3.576278118089249e-07, -1.537799835205078e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(HasSilence(), SelfSelector())))),\n            RandomPicker()]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Has", "Silence", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 71, 63, 171, "Random", "Picker", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -4.495330990320333, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Bounce"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -1.6492547988891602, -5.7220458984375e-06, -2.7074968814849854, -5.7695844589034095e-05, -8.20159912109375e-05, -0.000431060791015625, -2.86102294921875e-05, -1.33514404296875e-05, -5.924701690673828e-05, -3.62396240234375e-05, -1.1920928244535389e-07, -0.1307353973388672, 0.0, -2.288818359375e-05, -0.0007671117782592773, -1.1920922133867862e-06, -4.1961669921875e-05, -1.9073486328125e-06, -0.0005599260330200195, -2.872943878173828e-05, 0.0, -3.814697265625e-06, 0.0, -2.0265579223632812e-06, 0.0, -0.00016021728515625, -0.0001735687255859375, -2.288818359375e-05, -3.5762769812208717e-07, -2.3841855067985307e-07, -2.09808349609375e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Bounce(), MinionSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Bounce", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -4.55150166641382, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "HasSilence"}, {"_type": "Template25", "hole0": "BothPlayer"}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -1.385634422302246, -0.016141891479492188, -0.052066922187805176, 0.0, -5.7220458984375e-05, 0.0, -0.017162561416625977, -0.00037789344787597656, -1.7762111383490264e-05, -0.021254539489746094, -0.000659942626953125, -3.62396240234375e-05, -0.8350109457969666, -0.13873328268527985, -0.000399033073335886, -0.0016326904296875, -4.1961669921875e-05, -1.1212615966796875, -0.00034499168395996094, -1.1444091796875e-05, -0.17591285705566406, -0.27368831634521484, -0.031891822814941406, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -0.001826167106628418, -0.005341887474060059, 0.0, -0.008380889892578125, -0.1307086944580078, -0.0098419189453125, -0.04708099365234375, -1.33514404296875e-05, -0.0008115763776004314, -2.491474151611328e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.863676804234274e-05, 0.0, -1.33514404296875e-05, -0.0001373291015625, -3.814697265625e-05, -1.1920926823449918e-07, -4.768370445162873e-07, -1.71661376953125e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(HasSilence(), BothPlayer())))), Buff(\n            ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Has", "Silence", "<EOS>", 63, 171, "Both", "Player", "<EOS>", 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -4.673888932778723, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template19", "hole1": {"id": "EnemyPlayer", "_type": "Name"}, "hole0": "MinionSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -0.5219993591308594, -0.0002899169921875, -0.0196075439453125, -0.0008220672607421875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0005327463150024414, -0.0015039442805573344, 0.0, -9.72747802734375e-05, -0.008609771728515625, -0.00537109375, -3.169539451599121, -0.17979717254638672, -0.04774963855743408, -0.0003299713134765625, 0.0, -2.6702880859375e-05, 0.0, -0.43248042464256287, -0.00978398323059082, 0.0, -4.1961669921875e-05, 0.0, -0.00022351741790771484, 0.0, -1.1444091796875e-05, -0.0001049041748046875, -4.38690185546875e-05, -3.576277265437966e-07, -3.576278118089249e-07, -4.38690185546875e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), MinionSelector(EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -4.765344894807491, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "MinionHasSilence"}, {"_type": "Template25", "hole0": "BothPlayer"}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -1.385634422302246, -0.016141891479492188, -0.052066922187805176, 0.0, -5.7220458984375e-05, 0.0, -0.017162561416625977, -0.00037789344787597656, -1.7762111383490264e-05, -0.021254539489746094, -0.000659942626953125, -3.62396240234375e-05, -1.2796118259429932, -0.013244079425930977, -0.5538182854652405, -0.0007670617778785527, -0.000560760498046875, -6.67572021484375e-05, -0.6934866309165955, -0.00039529797504656017, -1.1444091796875e-05, -0.07863807678222656, -0.16329574584960938, -0.026915550231933594, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -0.0019339323043823242, -0.0057146549224853516, 0.0, -0.008632659912109375, -0.11115455627441406, -0.008508682250976562, -0.04920005798339844, -1.33514404296875e-05, -0.0008158680866472423, -2.491474151611328e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.2914849473163486e-05, 0.0, -1.33514404296875e-05, -0.0001354217529296875, -3.814697265625e-05, -1.1920926823449918e-07, -4.768370445162873e-07, -1.71661376953125e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasSilence(), BothPlayer())))), Buff\n            (ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Minion", "Has", "Silence", "<EOS>", 63, 171, "Both", "Player", "<EOS>", 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -5.492228893857465, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Wailing Soul"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "HasSilence"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Silence", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.0007476806640625, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -1.4185804502631072e-05, -4.768370126839727e-05, -2.0265579223632812e-06, -2.6702880859375e-05, -0.0001621246337890625, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, -0.0009310245513916016, -9.655952453613281e-06, -0.0001087188720703125, -5.7220458984375e-06, -0.000110626220703125, -0.0001010894775390625, -1.1920928244535389e-07, -0.002185821533203125, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -9.34600830078125e-05, -9.5367431640625e-06, -0.0001239776611328125, -0.2153787612915039, -0.001861572265625, -1.9073486328125e-06, -1.9073486328125e-06, -0.005714757833629847, -3.480863233562559e-05, -0.00089263916015625, -0.0001125335693359375, -0.0023202896118164062, -0.009523391723632812, -0.000347137451171875, -0.02289104461669922, -0.0004830360412597656, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.00025093500153161585, -0.008308406919240952, 0.0, -0.0014190673828125, -1.385634422302246, -0.016141891479492188, -0.052066922187805176, 0.0, -5.7220458984375e-05, 0.0, -0.017162561416625977, -0.00037789344787597656, -1.7762111383490264e-05, -0.021254539489746094, -0.000659942626953125, -3.62396240234375e-05, -0.8350109457969666, -0.13873328268527985, -0.000399033073335886, -0.0016326904296875, -4.1961669921875e-05, -0.6868773102760315, -1.990794771700166e-05, 0.0, -0.6222753524780273, -0.6906013488769531, -0.08920001983642578, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -0.2967097759246826, -0.004655532538890839, -0.2345438003540039, -0.0039539337158203125, -1.9073486328125e-06, -0.11894571781158447, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -4.088870991836302e-05, 0.0, -2.86102294921875e-05, -0.0001621246337890625, -4.1961669921875e-05, -1.1920928244535389e-07, -8.344646857949556e-07, -2.47955322265625e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(HasSilence(), SelfSelector())))), Buff(\n            Silence())]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Wailing", " ", "Soul", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Has", "Silence", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 59, 155, "Buff", "<EOS>", 25, 133, "Silence", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}, {"score": -9.326566162171467, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WailingSoul", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 4, "hole0": "Wailing Soul"}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-2.86102294921875e-05, -5.7220458984375e-06, -6.401333666872233e-05, -5.0782527978299186e-05, -0.0003231247828807682, -2.3562461137771606e-07, -3.3378591979271732e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.430047035217285, -9.5367431640625e-06, -2.50339189733495e-06, -3.7670135498046875e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.00017750263214111328, -2.3841855067985307e-07, -0.0013352632522583008, 0.0, -7.62939453125e-05, -1.1444091796875e-05, -5.340576171875e-05, 0.0, -2.372257222305052e-05, 0.0, -2.6702880859375e-05, -1.89410400390625, -8.96453857421875e-05, 0.0, -1.7881377516459906e-06, -8.20159912109375e-05, 0.0], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [77, 145, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"score": -0.7174929465097648, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -0.38502591848373413, -1.537799835205078e-05, -0.0016269683837890625, -0.0001049041748046875, -0.024177828803658485, -6.079673767089844e-06, 0.0, -1.9073486328125e-06, -0.24027061462402344], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), SelfSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -1.6906763448776019, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 3, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -1.4299860000610352, -1.9073486328125e-05, -0.0042552947998046875, -0.0001544952392578125, -0.0036843859124928713, -1.1563301086425781e-05, 0.0, -1.71661376953125e-05, -0.18628501892089844], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "3", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.6500754524884087, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 6, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -3.336886167526245, -9.5367431640625e-06, -0.000946044921875, -7.43865966796875e-05, -0.0032791970297694206, -2.682209014892578e-05, 0.0, -1.9073486328125e-05, -0.2425708770751953], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(6), SelfSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "6", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.9060077779856783, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 1, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -3.322462797164917, -1.3589859008789062e-05, -0.000186920166015625, -5.14984130859375e-05, -0.0065562548115849495, -4.208087921142578e-05, 0.0, -9.5367431640625e-06, -0.5104217529296875], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "1", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.336078446365484, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 3, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "arg": "enrage"}], "hole2": 3, "hole1": 2, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -3.507762908935547, -0.0002193450927734375, -2.2260122932493687e-05, -5.841255187988281e-06, 0.0, -1.1920928244535389e-07, -0.0004316568374633789, 0.0, -0.0010929107666015625, -0.0001125335693359375, -3.814697265625e-06, -0.20958209037780762, -2.491474151611328e-05, -0.0012645721435546875, -5.340576171875e-05, -0.000301122636301443, -7.152555099310121e-07, -0.00020599365234375, -5.7220458984375e-06, -0.0028156042098999023, 0.0, -0.0007572174072265625, -0.0004329681396484375, -0.00766276940703392, -4.3869011278729886e-05, -0.0012073516845703125, -0.003139495849609375, -1.9073486328125e-05, -0.0033258351031690836, -0.00029288307996466756, -5.841255187988281e-06, -0.5200717449188232, -8.046627044677734e-05, -0.003566741943359375, -0.0002498626708984375, -0.007501821033656597, -9.655952453613281e-06, 0.0, -2.09808349609375e-05, -0.05929374694824219], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, charge=True, enrage=[Aura(ChangeAttack(3),\n            SelfSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "3", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.419160605490788, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "+3+3"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -0.38502591848373413, -1.537799835205078e-05, -0.0016269683837890625, -0.0001049041748046875, -0.024177828803658485, -6.079673767089844e-06, 0.0, -1.9073486328125e-06, -1.5456371307373047, -0.0002727508544921875, -0.3337358236312866, -1.3709068298339844e-05, -0.000774383544921875, -0.20801734924316406, -7.62939453125e-05, -0.3262128233909607, -1.2715973854064941, -0.16417448222637177, -0.06856441497802734, -5.7220458984375e-06, -0.02266419678926468, -2.7775760827353224e-05, 0.0, -1.9073486328125e-05, -0.00014495849609375], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Aura(+3+3(), SelfSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Aura", "<EOS>", 206, 63, 171, "+3", "+3", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.438490002502249, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -0.38502591848373413, -1.537799835205078e-05, -0.0016269683837890625, -0.0001049041748046875, -3.9793055057525635, -8.225440979003906e-06, 0.0, -7.62939453125e-06, -0.0061321258544921875], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), WeaponSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -4.472010561305751, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "+3Attack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -0.38502591848373413, -1.537799835205078e-05, -0.0016269683837890625, -0.0001049041748046875, -0.024177828803658485, -6.079673767089844e-06, 0.0, -1.9073486328125e-06, -1.5456371307373047, -0.0002727508544921875, -0.3337358236312866, -1.3709068298339844e-05, -0.000774383544921875, -0.20801734924316406, -7.62939453125e-05, -0.3262128233909607, -1.5725677013397217, -2.0146331735304557e-05, -0.0025920867919921875, -3.814697265625e-06, -0.004727005958557129, -2.8491012926679105e-05, 0.0, -3.24249267578125e-05, -7.62939453125e-05], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Aura(+3Attack(), SelfSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Aura", "<EOS>", 206, 63, 171, "+3", "Attack", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.975028012498797, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -0.38502591848373413, -1.537799835205078e-05, -0.0016269683837890625, -0.0001049041748046875, -0.024177828803658485, -6.079673767089844e-06, 0.0, -1.9073486328125e-06, -1.5456371307373047, -0.0002727508544921875, -0.3337358236312866, -1.3709068298339844e-05, -0.000774383544921875, -1.6933679580688477, -1.1444091796875e-05, -0.0029332158155739307, -0.21866914629936218, -3.814697265625e-06, -0.6931337714195251, -1.0013580322265625e-05, -0.001373291015625, -7.43865966796875e-05, -0.007629497908055782, -7.033347174001392e-06, 0.0, -6.103515625e-05, -9.72747802734375e-05], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Aura(ChangeAttack(2), SelfSelector())])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -6.024656748674261, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -5.987222671508789, 0.0, -0.0015668869018554688, -3.0517578125e-05, -0.000305771769490093, -7.152555099310121e-07], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, charge=True)\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.165469621175362, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -6.109684944152832, -6.67572021484375e-05, -0.005057214293628931, -1.1920922133867862e-06], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=True)\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.288513278922096, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "create_minion", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -6.952287197113037, 0.0, -0.3001890182495117, -3.814697265625e-05, -0.00046825408935546875, -4.768370445162873e-07], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, create_minion=True)\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "create_minion", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.4501489161471, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -7.409881591796875, 0.0, -0.0043926239013671875, -7.82012939453125e-05, -0.0002655982389114797, -7.152555099310121e-07], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, windfury=True)\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.414393967222956, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "AmaniBerserker"}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template25", "hole0": "MinionHasAttack"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "hole0": "Choice"}], "hole1": [{"_type": "Template21", "hole1": 2, "hole0": "ChangeAttack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole2": "enrage", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -0.03086090087890625, -5.7220458984375e-06, -1.1920922133867862e-06, -6.556510470545618e-06, -0.00015938282012939453, -5.841255187988281e-06, -0.015129327774047852, 0.0, -0.006039619445800781, -0.0003032684326171875, -0.00797134730964899, -0.00011777877807617188, -0.00048065185546875, -0.00028228759765625, -9.5367431640625e-06, -0.00021754925546701998, -0.0001779794692993164, -3.814697265625e-06, -0.38502591848373413, -1.537799835205078e-05, -0.0016269683837890625, -0.0001049041748046875, -0.024177828803658485, -6.079673767089844e-06, 0.0, -1.9073486328125e-06, -1.5456371307373047, -0.0002727508544921875, -1.2859843969345093, -1.5139563402044587e-05, -0.0047168731689453125, -3.62396240234375e-05, -5.7220458984375e-06, -0.3667612671852112, -0.7789050340652466, -0.2469378113746643, -0.005451202392578125, -4.76837158203125e-05, -0.6394752264022827, -0.0007479956257157028, -1.1920928244535389e-07, -0.0009822845458984375, -0.49709224700927734, -3.62396240234375e-05, 0.0, -0.001407623291015625, -0.0005116462707519531, 0.0, -1.1444091796875e-05, -0.00508880615234375, -0.0166778564453125, -0.13163137435913086, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0044708251953125, -7.2479248046875e-05, 0.0, -0.0992889404296875, -0.5850229263305664, -3.814697265625e-06, -0.07065166532993317, -0.7182641625404358, -0.4314177334308624, -2.264974000354414e-06, -0.0004119873046875, -1.9073486328125e-06, -0.007511640898883343, -8.7738037109375e-05, -1.9073486328125e-06, -0.0002498626708984375, -5.7220458984375e-06, -1.9073486328125e-06, -0.021577835083007812, 0.0, -0.0001888275146484375, -5.7220458984375e-06, -0.4690975844860077, -7.534023461630568e-05, -4.768370445162873e-07, -0.0002346038818359375, -6.67572021484375e-05], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), SelfSelector()),\n            Choice(AmaniBerserker(), SelfSelector(), GreaterThan(Count(\n            MinionSelector(MinionHasAttack(), EnemyPlayer())), picker=\n            UserPicker()))])\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 60, 163, "Change", "Attack", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 205, 62, 170, "Choice", "<EOS>", 207, 63, 171, "Amani", "Berserker", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Minion", "Has", "Attack", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 205, 71]}, {"score": -10.085425591429605, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "AmaniBerserker", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -4.9591064453125e-05, -5.960446742392378e-06, -1.1801670552813448e-05, -2.7418097943154862e-06, -6.92903995513916e-07, -2.503394853192731e-06, -2.1457672119140625e-06, 0.0, -0.0003185272216796875, -5.7220458984375e-06, -9.536697689327411e-06, -4.9233436584472656e-05, -1.9073486328125e-06, 0.0, -0.0036749825812876225, 0.0, -0.00012218952178955078, 0.0, -6.377696990966797e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -9.679792856331915e-05, 0.0, -2.86102294921875e-05, -10.07795524597168, -0.002960205078125, -1.1920928244535389e-07, -3.4570680327306036e-06, -1.1444091796875e-05, -4.5299530029296875e-06], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"score": -4.505578204993611, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ROGUE", "hole1": 5, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -1.0522736310958862, -4.6967757953098044e-05, -0.07714176177978516, -1.9073486328125e-06, -0.02201700210571289, -1.9073486328125e-06, -0.007228851318359375, -7.62939453125e-06, -1.0728830375228426e-06, 0.0, -1.1444091796875e-05, -0.003398895263671875, -1.71661376953125e-05, -7.152555099310121e-07, -2.145764938177308e-06, -6.175033922772855e-05, -2.3841855067985307e-07, -0.010609626770019531, 0.0, -1.71661376953125e-05, -9.72747802734375e-05, -0.0003014802932739258, 0.0, -7.62939453125e-06, -0.028383255004882812, -0.06022834777832031, -1.7600245475769043, -0.018352150917053223, 0.0, -7.62939453125e-05, 0.0, -0.32044893503189087, -0.26539692282676697, -0.09649256616830826, -0.00061798095703125, -0.000152587890625, 0.0, 0.0, -0.011238336563110352, -0.00023210015206132084, 0.0, -7.62939453125e-06, -0.0031108856201171875, -0.11765289306640625, -0.0007994612096808851, -0.00021516175183933228, -7.62939453125e-06, -0.00025177001953125, 0.0, -0.0001821422338252887, -0.00022709369659423828, -9.536738616588991e-07, -0.0019893646240234375, -7.2479248046875e-05, -3.814697265625e-06, -0.09636867046356201, -2.110004425048828e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0008487701416015625, -1.33514404296875e-05, -0.007747650146484375, -2.1457672119140625e-06, -0.5341761112213135, -2.1457672119140625e-06, -0.0027112960815429688, -1.9073486328125e-06, -8.82148651726311e-06, -0.00016021728515625, -1.9073486328125e-06, 0.0, -0.0019435882568359375], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(TurnEnded(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Turn", "Ended", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.523633573703563, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.5188016891479492, -7.62939453125e-06, -0.18546223640441895, -5.7220458984375e-06, -0.0035915374755859375, -5.7220458984375e-06, -9.298297300119884e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0037641525268554688, -2.09808349609375e-05, -2.503394853192731e-06, -2.264974000354414e-06, -6.377689715009183e-05, -2.3841855067985307e-07, -0.010283589363098145, 0.0, -1.52587890625e-05, -8.58306884765625e-05, -0.0003377199172973633, 0.0, -7.62939453125e-06, -0.029573440551757812, -0.05485725402832031, -1.7866311073303223, -0.01695120334625244, 0.0, -7.43865966796875e-05, 0.0, -0.3261823058128357, -0.2633304297924042, -0.09134763479232788, -0.0006046295166015625, -0.000141143798828125, 0.0, 0.0, -0.011755228042602539, -0.00023400750069413334, 0.0, -7.62939453125e-06, -0.00313568115234375, -0.1215810775756836, -0.0008080400875769556, -0.00021420822304207832, -7.62939453125e-06, -0.0002536773681640625, 0.0, -0.00018035434186458588, -0.00022709369659423828, -9.536738616588991e-07, -0.0019893646240234375, -7.2479248046875e-05, -5.7220458984375e-06, -0.09719550609588623, -2.110004425048828e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0009021759033203125, -1.33514404296875e-05, -0.007755279541015625, -2.1457672119140625e-06, -0.5486376285552979, -2.1457672119140625e-06, -0.0026712417602539062, -1.9073486328125e-06, -8.82148651726311e-06, -0.00016021728515625, -1.9073486328125e-06, 0.0, -0.00193023681640625], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(TurnEnded(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Turn", "Ended", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.543072791367052, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ROGUE", "hole1": 5, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "SpellCast"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -1.0522736310958862, -4.6967757953098044e-05, -0.07714176177978516, -1.9073486328125e-06, -0.02201700210571289, -1.9073486328125e-06, -0.007228851318359375, -7.62939453125e-06, -1.0728830375228426e-06, 0.0, -1.1444091796875e-05, -0.003398895263671875, -1.71661376953125e-05, -7.152555099310121e-07, -2.145764938177308e-06, -6.175033922772855e-05, -2.3841855067985307e-07, -0.010609626770019531, 0.0, -1.71661376953125e-05, -9.72747802734375e-05, -0.0003014802932739258, 0.0, -7.62939453125e-06, -0.028383255004882812, -0.06022834777832031, -1.3492655754089355, -0.31653308868408203, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.4742017686367035, -0.18755243718624115, -0.005142710171639919, -0.0007076263427734375, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.004295468330383301, -0.0002360343059990555, 0.0, -9.5367431640625e-06, -0.0024280548095703125, -0.17839431762695312, -0.0009478834108449519, -0.00017916665819939226, -7.62939453125e-06, -0.000247955322265625, 0.0, -0.000167483784025535, -0.00022721290588378906, -7.152555099310121e-07, -0.0016536712646484375, -7.2479248046875e-05, -5.7220458984375e-06, -0.09633207321166992, -1.919269561767578e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.000804901123046875, -1.1444091796875e-05, -0.008585929870605469, -2.1457672119140625e-06, -0.6470720767974854, -2.1457672119140625e-06, -0.00183868408203125, -1.9073486328125e-06, -8.940695806813892e-06, -0.00017547607421875, -1.9073486328125e-06, 0.0, -0.0018520355224609375], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Spell", "Cast", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.5901624414302375, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "SpellCast"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.5188016891479492, -7.62939453125e-06, -0.18546223640441895, -5.7220458984375e-06, -0.0035915374755859375, -5.7220458984375e-06, -9.298297300119884e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0037641525268554688, -2.09808349609375e-05, -2.503394853192731e-06, -2.264974000354414e-06, -6.377689715009183e-05, -2.3841855067985307e-07, -0.010283589363098145, 0.0, -1.52587890625e-05, -8.58306884765625e-05, -0.0003377199172973633, 0.0, -7.62939453125e-06, -0.029573440551757812, -0.05485725402832031, -1.4257683753967285, -0.30961132049560547, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.4726300835609436, -0.1871064454317093, -0.004901175387203693, -0.0006580352783203125, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.004427075386047363, -0.00023448458523489535, 0.0, -9.5367431640625e-06, -0.0023784637451171875, -0.18118953704833984, -0.0009459760622121394, -0.00017868986469693482, -7.62939453125e-06, -0.000247955322265625, 0.0, -0.0001665301970206201, -0.00022721290588378906, -7.152555099310121e-07, -0.001667022705078125, -7.2479248046875e-05, -5.7220458984375e-06, -0.09637784957885742, -1.919269561767578e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.00081634521484375, -1.1444091796875e-05, -0.008564949035644531, -2.1457672119140625e-06, -0.6493990421295166, -2.1457672119140625e-06, -0.0018415451049804688, -1.9073486328125e-06, -8.940695806813892e-06, -0.00017547607421875, -1.9073486328125e-06, 0.0, -0.0018405914306640625], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Spell", "Cast", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.649975775949514, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "<UNK>spell", "_type": "Name"}, "hole0": "CardPlayed"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.5188016891479492, -7.62939453125e-06, -0.18546223640441895, -5.7220458984375e-06, -0.0035915374755859375, -5.7220458984375e-06, -9.298297300119884e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0037641525268554688, -2.09808349609375e-05, -2.503394853192731e-06, -2.264974000354414e-06, -6.377689715009183e-05, -2.3841855067985307e-07, -0.010283589363098145, 0.0, -1.52587890625e-05, -8.58306884765625e-05, -0.0003377199172973633, 0.0, -7.62939453125e-06, -0.029573440551757812, -0.05485725402832031, -0.989692211151123, -0.012935638427734375, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.23978781700134277, -0.5726394057273865, -0.7074627876281738, -0.02326488494873047, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.005113840103149414, -0.00024938577553257346, 0.0, -7.62939453125e-06, -0.02866649627685547, -0.08014202117919922, -0.0017360156634822488, -0.0002367379784118384, -7.62939453125e-06, -0.0003757476806640625, 0.0, -0.00014554994413629174, -0.00022125244140625, -7.152555099310121e-07, -0.0012454986572265625, -7.43865966796875e-05, -5.7220458984375e-06, -0.09650087356567383, -1.919269561767578e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0012035369873046875, -1.1444091796875e-05, -0.007493019104003906, -2.1457672119140625e-06, -0.6386854648590088, -2.1457672119140625e-06, -0.0014219284057617188, -1.9073486328125e-06, -1.0848044439626392e-05, -0.00018310546875, -1.9073486328125e-06, 0.0, -0.00177764892578125], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(CardPlayed(<UNK>spell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Played", "<EOS>", 25, 133, "<UNK>", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.676819892174393, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ROGUE", "hole1": 5, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "SpellCast"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -1.0522736310958862, -4.6967757953098044e-05, -0.07714176177978516, -1.9073486328125e-06, -0.02201700210571289, -1.9073486328125e-06, -0.007228851318359375, -7.62939453125e-06, -1.0728830375228426e-06, 0.0, -1.1444091796875e-05, -0.003398895263671875, -1.71661376953125e-05, -7.152555099310121e-07, -2.145764938177308e-06, -6.175033922772855e-05, -2.3841855067985307e-07, -0.010609626770019531, 0.0, -1.71661376953125e-05, -9.72747802734375e-05, -0.0003014802932739258, 0.0, -7.62939453125e-06, -0.028383255004882812, -0.06022834777832031, -1.3492655754089355, -0.31653308868408203, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.4742017686367035, -0.18755243718624115, -0.005142710171639919, -0.0007076263427734375, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.004295468330383301, -0.0002360343059990555, 0.0, -9.5367431640625e-06, -0.0024280548095703125, -0.17839431762695312, -0.0009478834108449519, -0.00017916665819939226, -7.62939453125e-06, -0.000247955322265625, 0.0, -0.000167483784025535, -0.00022721290588378906, -7.152555099310121e-07, -0.0016536712646484375, -7.2479248046875e-05, -5.7220458984375e-06, -0.09633207321166992, -1.919269561767578e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.000804901123046875, -1.1444091796875e-05, -0.008585929870605469, -2.1457672119140625e-06, -0.7558319568634033, -1.2636161045520566e-05, -0.02495861053466797, -1.9073486328125e-06, -7.987022399902344e-06, -0.0001010894775390625, -1.9073486328125e-06, 0.0, -0.0037841796875], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Spell", "Cast", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.695898099239315, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ROGUE", "hole1": 5, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "<UNK>spell", "_type": "Name"}, "hole0": "CardPlayed"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -1.0522736310958862, -4.6967757953098044e-05, -0.07714176177978516, -1.9073486328125e-06, -0.02201700210571289, -1.9073486328125e-06, -0.007228851318359375, -7.62939453125e-06, -1.0728830375228426e-06, 0.0, -1.1444091796875e-05, -0.003398895263671875, -1.71661376953125e-05, -7.152555099310121e-07, -2.145764938177308e-06, -6.175033922772855e-05, -2.3841855067985307e-07, -0.010609626770019531, 0.0, -1.71661376953125e-05, -9.72747802734375e-05, -0.0003014802932739258, 0.0, -7.62939453125e-06, -0.028383255004882812, -0.06022834777832031, -0.9985575675964355, -0.011682510375976562, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.24018490314483643, -0.5671284198760986, -0.729993462562561, -0.02332019805908203, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.0051462650299072266, -0.00025141233345493674, 0.0, -7.62939453125e-06, -0.027936935424804688, -0.07925701141357422, -0.0017266127979382873, -0.00023399628116749227, -7.62939453125e-06, -0.000377655029296875, 0.0, -0.00014650353114120662, -0.00022125244140625, -7.152555099310121e-07, -0.0012569427490234375, -7.43865966796875e-05, -5.7220458984375e-06, -0.09647703170776367, -1.919269561767578e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0011844635009765625, -1.1444091796875e-05, -0.00754547119140625, -2.1457672119140625e-06, -0.63564133644104, -2.1457672119140625e-06, -0.0014362335205078125, -1.9073486328125e-06, -8.940695806813892e-06, -0.00018310546875, -1.9073486328125e-06, 0.0, -0.00179290771484375], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(CardPlayed(<UNK>spell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Played", "<EOS>", 25, 133, "<UNK>", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.719128772889434, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "SpellCast"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.5188016891479492, -7.62939453125e-06, -0.18546223640441895, -5.7220458984375e-06, -0.0035915374755859375, -5.7220458984375e-06, -9.298297300119884e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0037641525268554688, -2.09808349609375e-05, -2.503394853192731e-06, -2.264974000354414e-06, -6.377689715009183e-05, -2.3841855067985307e-07, -0.010283589363098145, 0.0, -1.52587890625e-05, -8.58306884765625e-05, -0.0003377199172973633, 0.0, -7.62939453125e-06, -0.029573440551757812, -0.05485725402832031, -1.4257683753967285, -0.30961132049560547, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.4726300835609436, -0.1871064454317093, -0.004901175387203693, -0.0006580352783203125, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.004427075386047363, -0.00023448458523489535, 0.0, -9.5367431640625e-06, -0.0023784637451171875, -0.18118953704833984, -0.0009459760622121394, -0.00017868986469693482, -7.62939453125e-06, -0.000247955322265625, 0.0, -0.0001665301970206201, -0.00022721290588378906, -7.152555099310121e-07, -0.001667022705078125, -7.2479248046875e-05, -5.7220458984375e-06, -0.09637784957885742, -1.919269561767578e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.00081634521484375, -1.1444091796875e-05, -0.008564949035644531, -2.1457672119140625e-06, -0.7532150745391846, -1.2636161045520566e-05, -0.025116920471191406, -1.9073486328125e-06, -7.987022399902344e-06, -0.0001010894775390625, -1.9073486328125e-06, 0.0, -0.003780364990234375], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Spell", "Cast", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.795086979119532, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "<UNK>spell", "_type": "Name"}, "hole0": "CardPlayed"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.5188016891479492, -7.62939453125e-06, -0.18546223640441895, -5.7220458984375e-06, -0.0035915374755859375, -5.7220458984375e-06, -9.298297300119884e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0037641525268554688, -2.09808349609375e-05, -2.503394853192731e-06, -2.264974000354414e-06, -6.377689715009183e-05, -2.3841855067985307e-07, -0.010283589363098145, 0.0, -1.52587890625e-05, -8.58306884765625e-05, -0.0003377199172973633, 0.0, -7.62939453125e-06, -0.029573440551757812, -0.05485725402832031, -0.989692211151123, -0.012935638427734375, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.23978781700134277, -0.5726394057273865, -0.7074627876281738, -0.02326488494873047, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.005113840103149414, -0.00024938577553257346, 0.0, -7.62939453125e-06, -0.02866649627685547, -0.08014202117919922, -0.0017360156634822488, -0.0002367379784118384, -7.62939453125e-06, -0.0003757476806640625, 0.0, -0.00014554994413629174, -0.00022125244140625, -7.152555099310121e-07, -0.0012454986572265625, -7.43865966796875e-05, -5.7220458984375e-06, -0.09650087356567383, -1.919269561767578e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0012035369873046875, -1.1444091796875e-05, -0.007493019104003906, -2.1457672119140625e-06, -0.7651760578155518, -1.4662718058389146e-05, -0.018320083618164062, -1.9073486328125e-06, -7.987022399902344e-06, -9.918212890625e-05, -1.9073486328125e-06, 0.0, -0.003574371337890625], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(CardPlayed(<UNK>spell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Played", "<EOS>", 25, 133, "<UNK>", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.8145482366576005, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ROGUE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.9739503860473633, 0.0, -0.02199244499206543, -1.9073486328125e-06, -0.0034351348876953125, -7.62939453125e-06, -5.125993993715383e-06, -1.9073486328125e-06, -2.288818359375e-05, -0.003993988037109375, -2.09808349609375e-05, -2.741813204920618e-06, -1.9073468138230965e-06, -6.330003816401586e-05, -2.3841855067985307e-07, -0.010458946228027344, 0.0, -1.52587890625e-05, -8.7738037109375e-05, -0.00033211708068847656, 0.0, -7.62939453125e-06, -0.029474258422851562, -0.06008720397949219, -1.7777849435806274, -0.01804506778717041, 0.0, -7.62939453125e-05, 0.0, -0.33084723353385925, -0.2638570964336395, -0.09446612745523453, -0.0006237030029296875, -0.0001506805419921875, 0.0, 0.0, -0.011198282241821289, -0.00023007359413895756, 0.0, -7.62939453125e-06, -0.00301361083984375, -0.11886215209960938, -0.0008045840077102184, -0.00021516175183933228, -7.62939453125e-06, -0.00025177001953125, 0.0, -0.00018083110626321286, -0.00022709369659423828, -9.536738616588991e-07, -0.00201416015625, -7.2479248046875e-05, -5.7220458984375e-06, -0.0973595380783081, -2.110004425048828e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0008907318115234375, -1.33514404296875e-05, -0.007755279541015625, -2.1457672119140625e-06, -0.5451147556304932, -2.1457672119140625e-06, -0.002681732177734375, -1.9073486328125e-06, -8.82148651726311e-06, -0.00016021728515625, -1.9073486328125e-06, 0.0, -0.0019378662109375], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(TurnEnded(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Turn", "Ended", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.816266026964257, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ROGUE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "SpellCast"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.9739503860473633, 0.0, -0.02199244499206543, -1.9073486328125e-06, -0.0034351348876953125, -7.62939453125e-06, -5.125993993715383e-06, -1.9073486328125e-06, -2.288818359375e-05, -0.003993988037109375, -2.09808349609375e-05, -2.741813204920618e-06, -1.9073468138230965e-06, -6.330003816401586e-05, -2.3841855067985307e-07, -0.010458946228027344, 0.0, -1.52587890625e-05, -8.7738037109375e-05, -0.00033211708068847656, 0.0, -7.62939453125e-06, -0.029474258422851562, -0.06008720397949219, -1.3632961511611938, -0.3064746856689453, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.46964913606643677, -0.1869322657585144, -0.0048928894102573395, -0.000701904296875, -5.7220458984375e-05, -1.9073486328125e-06, 0.0, -0.004274487495422363, -0.000234126957366243, 0.0, -9.5367431640625e-06, -0.0023555755615234375, -0.17845916748046875, -0.0009490730590187013, -0.0001790474634617567, -7.62939453125e-06, -0.000247955322265625, 0.0, -0.0001665301970206201, -0.00022721290588378906, -7.152555099310121e-07, -0.001667022705078125, -7.2479248046875e-05, -5.7220458984375e-06, -0.09654855728149414, -1.919269561767578e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.00081634521484375, -1.1444091796875e-05, -0.008575439453125, -2.1457672119140625e-06, -0.6499035358428955, -2.1457672119140625e-06, -0.0018253326416015625, -1.9073486328125e-06, -8.940695806813892e-06, -0.0001773834228515625, -1.9073486328125e-06, 0.0, -0.0018444061279296875], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Spell", "Cast", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.847604913981598, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ROGUE", "hole1": 5, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "<UNK>spell", "_type": "Name"}, "hole0": "CardPlayed"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -1.0522736310958862, -4.6967757953098044e-05, -0.07714176177978516, -1.9073486328125e-06, -0.02201700210571289, -1.9073486328125e-06, -0.007228851318359375, -7.62939453125e-06, -1.0728830375228426e-06, 0.0, -1.1444091796875e-05, -0.003398895263671875, -1.71661376953125e-05, -7.152555099310121e-07, -2.145764938177308e-06, -6.175033922772855e-05, -2.3841855067985307e-07, -0.010609626770019531, 0.0, -1.71661376953125e-05, -9.72747802734375e-05, -0.0003014802932739258, 0.0, -7.62939453125e-06, -0.028383255004882812, -0.06022834777832031, -0.9985575675964355, -0.011682510375976562, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.24018490314483643, -0.5671284198760986, -0.729993462562561, -0.02332019805908203, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.0051462650299072266, -0.00025141233345493674, 0.0, -7.62939453125e-06, -0.027936935424804688, -0.07925701141357422, -0.0017266127979382873, -0.00023399628116749227, -7.62939453125e-06, -0.000377655029296875, 0.0, -0.00014650353114120662, -0.00022125244140625, -7.152555099310121e-07, -0.0012569427490234375, -7.43865966796875e-05, -5.7220458984375e-06, -0.09647703170776367, -1.919269561767578e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0011844635009765625, -1.1444091796875e-05, -0.00754547119140625, -2.1457672119140625e-06, -0.7686789035797119, -1.4662718058389146e-05, -0.018384933471679688, -1.9073486328125e-06, -7.987022399902344e-06, -9.918212890625e-05, -1.9073486328125e-06, 0.0, -0.0035858154296875], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(CardPlayed(<UNK>spell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Played", "<EOS>", 25, 133, "<UNK>", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.8869836074408965, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Hasspell", "_type": "Name"}, "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.5188016891479492, -7.62939453125e-06, -0.18546223640441895, -5.7220458984375e-06, -0.0035915374755859375, -5.7220458984375e-06, -9.298297300119884e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0037641525268554688, -2.09808349609375e-05, -2.503394853192731e-06, -2.264974000354414e-06, -6.377689715009183e-05, -2.3841855067985307e-07, -0.010283589363098145, 0.0, -1.52587890625e-05, -8.58306884765625e-05, -0.0003377199172973633, 0.0, -7.62939453125e-06, -0.029573440551757812, -0.05485725402832031, -1.7866311073303223, -0.01695120334625244, 0.0, -7.43865966796875e-05, 0.0, -0.3261823058128357, -0.2633304297924042, -0.09134763479232788, -0.0006046295166015625, -0.000141143798828125, 0.0, 0.0, -0.011755228042602539, -0.00023400750069413334, 0.0, -7.62939453125e-06, -0.00313568115234375, -0.1215810775756836, -0.0008080400875769556, -0.00021420822304207832, -7.62939453125e-06, -0.0002536773681640625, 0.0, -0.00018035434186458588, -0.00022709369659423828, -9.536738616588991e-07, -0.0019893646240234375, -7.2479248046875e-05, -5.7220458984375e-06, -0.09719550609588623, -2.110004425048828e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0009021759033203125, -1.33514404296875e-05, -0.007755279541015625, -2.1457672119140625e-06, -0.878852128982544, -1.2636161045520566e-05, -0.03399467468261719, -1.9073486328125e-06, -7.987022399902344e-06, -9.34600830078125e-05, -1.9073486328125e-06, 0.0, -0.0037994384765625], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(TurnEnded(Hasspell()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.<UNK>)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Turn", "Ended", "<EOS>", 25, 133, "Has", "spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -5.042548799098967, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "<UNK>spell5", "_type": "Name"}, "hole0": "CardPlayed"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.42951229214668274, -1.8477332559996285e-05, -0.5188016891479492, -7.62939453125e-06, -0.18546223640441895, -5.7220458984375e-06, -0.0035915374755859375, -5.7220458984375e-06, -9.298297300119884e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0037641525268554688, -2.09808349609375e-05, -2.503394853192731e-06, -2.264974000354414e-06, -6.377689715009183e-05, -2.3841855067985307e-07, -0.010283589363098145, 0.0, -1.52587890625e-05, -8.58306884765625e-05, -0.0003377199172973633, 0.0, -7.62939453125e-06, -0.029573440551757812, -0.05485725402832031, -0.989692211151123, -0.012935638427734375, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.23978781700134277, -0.5726394057273865, -0.9767385721206665, -7.212132186396047e-05, -0.02320384979248047, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.016371846199035645, -0.0002411602617939934, 0.0, -9.5367431640625e-06, -0.015883445739746094, -0.1488208770751953, -0.0021128614898771048, -0.00022648608137387782, -5.7220458984375e-06, -0.0004520416259765625, 0.0, -0.00015401295968331397, -0.00023281574249267578, -7.152555099310121e-07, -0.0012664794921875, -8.0108642578125e-05, -5.7220458984375e-06, -0.12178003787994385, -2.110004425048828e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.001251220703125, -1.33514404296875e-05, -0.008212089538574219, -2.1457672119140625e-06, -0.6684935092926025, -2.1457672119140625e-06, -0.001220703125, -1.9073486328125e-06, -1.0967253729177173e-05, -0.000186920166015625, -1.9073486328125e-06, 0.0, -0.0018024444580078125], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(CardPlayed(<UNK>spell5()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Played", "<EOS>", 25, 133, "<UNK>", "spell", "5", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -5.046849667782993, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ArchmageAntonidas", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "ROGUE", "hole1": 5, "hole0": "Archmage Antonidas"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "<UNK>spell5", "_type": "Name"}, "hole0": "CardPlayed"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}, "arg": "source"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "AddCard"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 7, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [0.0, -2.86102294921875e-05, -0.0017030035378411412, -4.0649618313182145e-05, -4.7682835429441184e-05, -1.3209879398345947e-05, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001926422119140625, -6.103515625e-05, -4.410734163684538e-06, -4.422663914738223e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -1.0522736310958862, -4.6967757953098044e-05, -0.07714176177978516, -1.9073486328125e-06, -0.02201700210571289, -1.9073486328125e-06, -0.007228851318359375, -7.62939453125e-06, -1.0728830375228426e-06, 0.0, -1.1444091796875e-05, -0.003398895263671875, -1.71661376953125e-05, -7.152555099310121e-07, -2.145764938177308e-06, -6.175033922772855e-05, -2.3841855067985307e-07, -0.010609626770019531, 0.0, -1.71661376953125e-05, -9.72747802734375e-05, -0.0003014802932739258, 0.0, -7.62939453125e-06, -0.028383255004882812, -0.06022834777832031, -0.9985575675964355, -0.011682510375976562, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.24018490314483643, -0.5671284198760986, -0.9540838003158569, -8.261161565314978e-05, -0.024053573608398438, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.01699650287628174, -0.0002412794710835442, 0.0, -9.5367431640625e-06, -0.015171051025390625, -0.14715576171875, -0.002109173219650984, -0.00022755880490876734, -5.7220458984375e-06, -0.0004520416259765625, 0.0, -0.0001560392847750336, -0.00023472309112548828, -7.152555099310121e-07, -0.0012798309326171875, -8.0108642578125e-05, -5.7220458984375e-06, -0.1225658655166626, -2.110004425048828e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0012359619140625, -1.33514404296875e-05, -0.008266448974609375, -2.1457672119140625e-06, -0.6675522327423096, -2.1457672119140625e-06, -0.0012359619140625, -1.9073486328125e-06, -1.0967253729177173e-05, -0.000186920166015625, -1.9073486328125e-06, 0.0, -0.0018157958984375], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(CardPlayed(<UNK>spell5()),\n            ActionTag(AddCard(CardQuery(source=CARD_SOURCE.LIST)),\n            PlayerSelector()))])\n", "choice_history": [77, 145, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Archmage", " ", "Antonidas", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Played", "<EOS>", 25, 133, "<UNK>", "spell", "5", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 156, "Add", "Card", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "source", "<EOS>", 17, 104, 25, 133, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"score": -2.450347293525425, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.7092142105102539, -0.023357391357421875, -2.288818359375e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -4.38690185546875e-05, -1.1444091796875e-05, -1.9073486328125e-05, 0.0, -5.340576171875e-05, 0.0, -0.0005283355712890625, -1.9073486328125e-06, -0.00034332275390625, 0.0, -0.3047984838485718, 0.0, -9.953975677490234e-05, 0.0, -8.03451839601621e-05, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -2.6702880859375e-05, -0.00083160400390625, -2.3841855067985307e-07, -0.0009679794311523438, -9.5367431640625e-06, -6.29425048828125e-05, -0.000438690185546875, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.724761962890625e-05, -5.7220458984375e-06, -0.00010418891906738281, 0.0, -0.27600860595703125, 0.0, -1.52587890625e-05, -0.0025043487548828125, -0.16532230377197266, -0.0007860660552978516, -5.960462772236497e-07, -0.0004253387451171875, -1.9073486328125e-06, -0.14937977492809296, -0.0003393357037566602], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}, {"score": -2.5116008982519418, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.6866064071655273, -7.62939453125e-06, -9.5367431640625e-06, -0.0010226964950561523, 0.0, -0.003902435302734375, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -4.38690185546875e-05, -2.09808349609375e-05, -3.24249267578125e-05, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000827789306640625, -1.9073486328125e-06, -0.00048828125, 0.0, -0.4074615240097046, 0.0, -9.393692016601562e-05, 0.0, -0.0001121716049965471, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -2.47955322265625e-05, -0.0008945465087890625, -2.3841855067985307e-07, -0.0009212493896484375, -1.1444091796875e-05, -6.29425048828125e-05, -0.00042724609375, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.0001062154769897461, 0.0, -0.27581024169921875, 0.0, -1.52587890625e-05, -0.0025310516357421875, -0.1642618179321289, -0.0008051395416259766, -5.960462772236497e-07, -0.000423431396484375, -1.9073486328125e-06, -0.14966855943202972, -0.0003395740350242704], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}, {"score": -2.6627929700532604, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -1.346466064453125, -0.0001392364501953125, -1.9073486328125e-05, -2.3841830625315197e-06, -6.79492904964718e-06, -0.0010776519775390625, -0.0001678466796875, -0.0003204345703125, -0.0014019012451171875, -5.7220458984375e-06, -8.153914677677676e-05, -3.576278118089249e-07, -0.0001068115234375, -0.000209808349609375, -1.9073486328125e-06, -0.0001544952392578125, 0.0, -0.000141143798828125, -3.24249267578125e-05, -3.4332275390625e-05, -1.9073486328125e-05, -0.0003509521484375, -1.9073486328125e-06, -0.0004253387451171875, -1.9073486328125e-06, -0.000316619873046875, 0.0, -0.6762096881866455, 0.0, -8.83340835571289e-05, 0.0, -8.010543388081715e-05, 0.0, -5.340576171875e-05, -1.52587890625e-05, -5.53131103515625e-05, -0.000118255615234375, -3.933906555175781e-06, -0.00180816650390625, -5.7220458984375e-06, -7.43865966796875e-05, -0.0007152557373046875, -7.82012939453125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -8.296966552734375e-05, -5.7220458984375e-06, -8.785724639892578e-05, 0.0, -0.26819705963134766, 0.0, -1.33514404296875e-05, -0.0028839111328125, -0.17246627807617188, -0.0008680820465087891, -5.960462772236497e-07, -0.0005817413330078125, -1.9073486328125e-06, -0.16274569928646088, -0.0003364762233104557], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Bananas", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}, {"score": -2.677573831803471, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -1.1985580921173096, 0.0, -0.12974262237548828, -0.0003910064697265625, -0.0001049041748046875, -0.0010187625885009766, -1.9073486328125e-06, -0.008747100830078125, 0.0, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-05, -3.0517578125e-05, -7.62939453125e-06, -7.2479248046875e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-06, -0.0005626678466796875, 0.0, -0.3948272466659546, 0.0, -9.763240814208984e-05, 0.0, -0.00010966844274662435, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -2.47955322265625e-05, -0.000896453857421875, -2.3841855067985307e-07, -0.0009145736694335938, -1.1444091796875e-05, -6.29425048828125e-05, -0.00043487548828125, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.00010609626770019531, 0.0, -0.2758331298828125, 0.0, -1.52587890625e-05, -0.0025386810302734375, -0.16440963745117188, -0.0008070468902587891, -5.960462772236497e-07, -0.0004253387451171875, -1.9073486328125e-06, -0.14992663264274597, -0.00033921655267477036], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_minion_spell_target\n            )\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}, {"score": -2.800663072599235, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -1.346466064453125, -0.0001392364501953125, -1.9073486328125e-05, -2.3841830625315197e-06, -6.79492904964718e-06, -0.0010776519775390625, -0.0001678466796875, -0.0003204345703125, -0.0014019012451171875, -5.7220458984375e-06, -8.153914677677676e-05, -3.576278118089249e-07, -0.0001068115234375, -0.000209808349609375, -1.9073486328125e-06, -0.0001544952392578125, 0.0, -0.000141143798828125, -3.24249267578125e-05, -3.4332275390625e-05, -1.9073486328125e-05, -0.0003509521484375, -1.9073486328125e-06, -0.0004253387451171875, -1.9073486328125e-06, -0.000316619873046875, 0.0, -0.8307754993438721, 0.0, -0.00012612342834472656, 0.0, -7.486165850423276e-05, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -3.0517578125e-05, -0.0007724761962890625, -2.3841855067985307e-07, -0.0010328292846679688, -7.62939453125e-06, -5.7220458984375e-05, -0.0004119873046875, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.915496826171875e-05, -5.7220458984375e-06, -0.00010418891906738281, 0.0, -0.2750701904296875, 0.0, -1.52587890625e-05, -0.0025920867919921875, -0.16292953491210938, -0.0007860660552978516, -5.960462772236497e-07, -0.00043487548828125, -1.9073486328125e-06, -0.14967407286167145, -0.0003407657495699823], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Bananas", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}, {"score": -3.493465063577645, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.7092142105102539, -0.023357391357421875, -2.288818359375e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -4.38690185546875e-05, -1.1444091796875e-05, -1.9073486328125e-05, 0.0, -5.340576171875e-05, 0.0, -0.0005283355712890625, -1.9073486328125e-06, -0.00034332275390625, 0.0, -0.3047984838485718, 0.0, -9.953975677490234e-05, 0.0, -8.03451839601621e-05, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -2.6702880859375e-05, -0.00083160400390625, -2.3841855067985307e-07, -0.0009679794311523438, -9.5367431640625e-06, -6.29425048828125e-05, -0.000438690185546875, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.724761962890625e-05, -5.7220458984375e-06, -0.00010418891906738281, 0.0, -1.6284399032592773, 0.0, -1.9073486328125e-06, -0.009459495544433594], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -3.5547987174294065, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.6866064071655273, -7.62939453125e-06, -9.5367431640625e-06, -0.0010226964950561523, 0.0, -0.003902435302734375, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -4.38690185546875e-05, -2.09808349609375e-05, -3.24249267578125e-05, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000827789306640625, -1.9073486328125e-06, -0.00048828125, 0.0, -0.4074615240097046, 0.0, -9.393692016601562e-05, 0.0, -0.0001121716049965471, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -2.47955322265625e-05, -0.0008945465087890625, -2.3841855067985307e-07, -0.0009212493896484375, -1.1444091796875e-05, -6.29425048828125e-05, -0.00042724609375, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.0001062154769897461, 0.0, -1.6278018951416016, 0.0, -1.9073486328125e-06, -0.009251594543457031], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -3.6266701542705846, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.6866064071655273, -7.62939453125e-06, -9.5367431640625e-06, -0.0010226964950561523, 0.0, -0.003902435302734375, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -4.38690185546875e-05, -2.09808349609375e-05, -3.24249267578125e-05, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000827789306640625, -1.9073486328125e-06, -0.00048828125, 0.0, -1.50702702999115, -1.9073486328125e-06, -0.00010395050048828125, 0.0, -0.00010847477824427187, 0.0, -5.53131103515625e-05, -1.71661376953125e-05, -7.05718994140625e-05, -0.0001277923583984375, -2.0265579223632812e-06, -0.0014629364013671875, -9.5367431640625e-06, -8.7738037109375e-05, -0.0006389617919921875, -7.82012939453125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -8.106231689453125e-05, -5.7220458984375e-06, -8.594989776611328e-05, 0.0, -0.2646217346191406, 0.0, -1.33514404296875e-05, -0.0028095245361328125, -0.17474079132080078, -0.0008680820465087891, -5.960462772236497e-07, -0.00058746337890625, -1.9073486328125e-06, -0.16529878973960876, -0.0003349269973114133], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}, {"score": -3.651446034877779, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.7092142105102539, -0.023357391357421875, -2.288818359375e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -4.38690185546875e-05, -1.1444091796875e-05, -1.9073486328125e-05, 0.0, -5.340576171875e-05, 0.0, -0.0005283355712890625, -1.9073486328125e-06, -0.00034332275390625, 0.0, -1.4898771047592163, -2.0265579223632812e-06, -9.799003601074219e-05, 0.0, -7.688718324061483e-05, 0.0, -5.340576171875e-05, -1.52587890625e-05, -6.29425048828125e-05, -0.0001201629638671875, -3.933906555175781e-06, -0.0016202926635742188, -7.62939453125e-06, -8.58306884765625e-05, -0.00069427490234375, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -8.296966552734375e-05, -5.7220458984375e-06, -8.594989776611328e-05, 0.0, -0.26689910888671875, 0.0, -1.33514404296875e-05, -0.002777099609375, -0.1746206283569336, -0.0008623600006103516, -5.960462772236497e-07, -0.000583648681640625, -1.9073486328125e-06, -0.16444383561611176, -0.00033445030567236245], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}, {"score": -3.7202144815172176, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -1.1985580921173096, 0.0, -0.12974262237548828, -0.0003910064697265625, -0.0001049041748046875, -0.0010187625885009766, -1.9073486328125e-06, -0.008747100830078125, 0.0, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-05, -3.0517578125e-05, -7.62939453125e-06, -7.2479248046875e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-06, -0.0005626678466796875, 0.0, -0.3948272466659546, 0.0, -9.763240814208984e-05, 0.0, -0.00010966844274662435, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -2.47955322265625e-05, -0.000896453857421875, -2.3841855067985307e-07, -0.0009145736694335938, -1.1444091796875e-05, -6.29425048828125e-05, -0.00043487548828125, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.00010609626770019531, 0.0, -1.627680778503418, 0.0, -1.9073486328125e-06, -0.009255409240722656], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.find_minion_spell_target\n            )\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -3.7272671423906445, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -1.346466064453125, -0.0001392364501953125, -1.9073486328125e-05, -2.3841830625315197e-06, -6.79492904964718e-06, -0.0010776519775390625, -0.0001678466796875, -0.0003204345703125, -0.0014019012451171875, -5.7220458984375e-06, -8.153914677677676e-05, -3.576278118089249e-07, -0.0001068115234375, -0.000209808349609375, -1.9073486328125e-06, -0.0001544952392578125, 0.0, -0.000141143798828125, -3.24249267578125e-05, -3.4332275390625e-05, -1.9073486328125e-05, -0.0003509521484375, -1.9073486328125e-06, -0.0004253387451171875, -1.9073486328125e-06, -0.000316619873046875, 0.0, -0.6762096881866455, 0.0, -8.83340835571289e-05, 0.0, -8.010543388081715e-05, 0.0, -5.340576171875e-05, -1.52587890625e-05, -5.53131103515625e-05, -0.000118255615234375, -3.933906555175781e-06, -0.00180816650390625, -5.7220458984375e-06, -7.43865966796875e-05, -0.0007152557373046875, -7.82012939453125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -8.296966552734375e-05, -5.7220458984375e-06, -8.785724639892578e-05, 0.0, -1.6633844375610352, 0.0, -1.9073486328125e-06, -0.009182929992675781], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Bananas", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -3.813081655491885, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_friendly_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Give", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -1.1985580921173096, 0.0, -0.12974262237548828, -0.0003910064697265625, -0.0001049041748046875, -0.0010187625885009766, -1.9073486328125e-06, -0.008747100830078125, 0.0, -1.9073486328125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-05, -3.0517578125e-05, -7.62939453125e-06, -7.2479248046875e-05, 0.0, -0.0009212493896484375, -1.9073486328125e-06, -0.0005626678466796875, 0.0, -1.5143226385116577, -1.9073486328125e-06, -0.00010585784912109375, 0.0, -9.846220928011462e-05, 0.0, -5.7220458984375e-05, -1.71661376953125e-05, -7.05718994140625e-05, -0.0001316070556640625, -2.0265579223632812e-06, -0.0014486312866210938, -9.5367431640625e-06, -8.7738037109375e-05, -0.0006504058837890625, -7.82012939453125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -8.106231689453125e-05, -5.7220458984375e-06, -8.594989776611328e-05, 0.0, -0.2649507522583008, 0.0, -1.33514404296875e-05, -0.00279998779296875, -0.1749429702758789, -0.0008699893951416016, -5.960462772236497e-07, -0.0005893707275390625, -1.9073486328125e-06, -0.1657298505306244, -0.00033611932303756475], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY\n            .FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Give()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Give", "<EOS>"]}, {"score": -3.853980300524114, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -1.346466064453125, -0.0001392364501953125, -1.9073486328125e-05, -2.3841830625315197e-06, -6.79492904964718e-06, -0.0010776519775390625, -0.0001678466796875, -0.0003204345703125, -0.0014019012451171875, -5.7220458984375e-06, -8.153914677677676e-05, -3.576278118089249e-07, -0.0001068115234375, -0.000209808349609375, -1.9073486328125e-06, -0.0001544952392578125, 0.0, -0.000141143798828125, -3.24249267578125e-05, -3.4332275390625e-05, -1.9073486328125e-05, -0.0003509521484375, -1.9073486328125e-06, -0.0004253387451171875, -1.9073486328125e-06, -0.000316619873046875, 0.0, -0.8307754993438721, 0.0, -0.00012612342834472656, 0.0, -7.486165850423276e-05, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -3.0517578125e-05, -0.0007724761962890625, -2.3841855067985307e-07, -0.0010328292846679688, -7.62939453125e-06, -5.7220458984375e-05, -0.0004119873046875, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.915496826171875e-05, -5.7220458984375e-06, -0.00010418891906738281, 0.0, -1.6353912353515625, 0.0, -1.9073486328125e-06, -0.009769439697265625], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Bananas", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -4.787451202799872, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "<UNK>", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.6866064071655273, -7.62939453125e-06, -9.5367431640625e-06, -0.0010226964950561523, 0.0, -0.003902435302734375, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -4.38690185546875e-05, -2.09808349609375e-05, -3.24249267578125e-05, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000827789306640625, -1.9073486328125e-06, -0.00048828125, 0.0, -0.4074615240097046, 0.0, -9.393692016601562e-05, 0.0, -0.0001121716049965471, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -2.47955322265625e-05, -0.0008945465087890625, -2.3841855067985307e-07, -0.0009212493896484375, -1.1444091796875e-05, -6.29425048828125e-05, -0.00042724609375, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.0001062154769897461, 0.0, -0.27581024169921875, 0.0, -1.52587890625e-05, -0.0025310516357421875, -0.1642618179321289, -0.0008051395416259766, -5.960462772236497e-07, -0.000423431396484375, -1.9073486328125e-06, -2.3071725368499756, -0.11868590116500854], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "<UNK>", "<EOS>"]}, {"score": -5.771269912417523, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Bananas", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Template34"}, {"attr": "PRIEST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "SpellAttack", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-0.0002841949462890625, -0.0033550262451171875, -8.940656698541716e-06, -3.933898824470816e-06, -2.5271918275393546e-05, -2.312660035386216e-05, -3.814697265625e-06, -5.7220458984375e-06, -4.76837158203125e-05, -4.57763671875e-05, -3.62396240234375e-05, -0.0197601318359375, -0.0001087188720703125, -0.3079051971435547, -2.288818359375e-05, -2.288818359375e-05, -4.768370445162873e-07, -2.9802317840221804e-06, -0.00012969970703125, -0.012553215026855469, -0.000850677490234375, -8.0108642578125e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.46900486946105957, 0.0, -0.6866064071655273, -7.62939453125e-06, -9.5367431640625e-06, -0.0010226964950561523, 0.0, -0.003902435302734375, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -4.38690185546875e-05, -2.09808349609375e-05, -3.24249267578125e-05, -9.5367431640625e-06, -6.29425048828125e-05, 0.0, -0.000827789306640625, -1.9073486328125e-06, -0.00048828125, 0.0, -0.4074615240097046, 0.0, -9.393692016601562e-05, 0.0, -0.0001121716049965471, 0.0, -3.814697265625e-05, -5.7220458984375e-06, -2.47955322265625e-05, -0.0008945465087890625, -2.3841855067985307e-07, -0.0009212493896484375, -1.1444091796875e-05, -6.29425048828125e-05, -0.00042724609375, -7.43865966796875e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, -0.0001062154769897461, 0.0, -0.27581024169921875, 0.0, -1.52587890625e-05, -0.0025310516357421875, -1.9160728454589844, -0.002710819011554122, -0.00010001659393310547, -4.38690185546875e-05, -1.9073486328125e-06, -0.546125054359436, -1.1097416877746582, -1.52587890625e-05, -0.000118255615234375, -0.000240325927734375], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.\n            FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(SpellAttack(1)))\n", "choice_history": [77, 147, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Bananas", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Spell", "Attack", "<EOS>", 205, 69]}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"score": -3.2312767328082472, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -0.11579036712646484, -0.004111289978027344, -0.0035867691040039062, -0.0001373291015625, -0.0008544921875, 0.0, -0.16384470462799072, -1.9073486328125e-06, -4.1961669921875e-05, -0.06091117858886719, -3.814697265625e-06, -0.03967094421386719, -0.00016021728515625, -0.0005332072032615542, -0.00011086463928222656, -0.0022125244140625, -0.0034084320068359375, -8.0108642578125e-05, -0.11180782318115234, -3.814697265625e-06, -7.2479248046875e-05, 0.0, -0.00010085105168400332, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026048898696899414, 0.0, -0.0006198883056640625, -0.0031251907348632812, -6.67572021484375e-05, -9.989738464355469e-05, -6.67572021484375e-05, -0.05584144592285156, -0.0024700164794921875, -0.06275177001953125, -0.0015106201171875, 0.0, -0.000316619873046875, 0.0, -4.589557647705078e-05, -1.9073486328125e-06, -1.597404116182588e-05, -1.9073486328125e-06, -0.006022453308105469, -3.814697265625e-06, -1.9073486328125e-06, -0.0042209625244140625, 0.0, -0.002051115036010742, -1.7642923921812326e-05, -0.017900466918945312, -0.0017299652099609375, -0.0034275054931640625, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -1.4393081665039062, -1.9073486328125e-06, -3.0517578125e-05, -0.0002040863037109375, -1.9073486328125e-06, -0.03701519966125488, -1.1563283806026448e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.<UNK>(<UNK>)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>"]}, {"score": -3.3455810369484524, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "temp_attack", "_type": "Name"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -0.11579036712646484, -0.004111289978027344, -0.0035867691040039062, -0.0001373291015625, -0.0008544921875, 0.0, -0.16384470462799072, -1.9073486328125e-06, -4.1961669921875e-05, -0.06091117858886719, -3.814697265625e-06, -0.03967094421386719, -0.00016021728515625, -0.0005332072032615542, -0.00011086463928222656, -0.0022125244140625, -0.0034084320068359375, -8.0108642578125e-05, -0.11180782318115234, -3.814697265625e-06, -7.2479248046875e-05, 0.0, -0.00010085105168400332, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026048898696899414, 0.0, -0.0006198883056640625, -0.0031251907348632812, -6.67572021484375e-05, -9.989738464355469e-05, -6.67572021484375e-05, -0.05584144592285156, -0.0024700164794921875, -0.06275177001953125, -0.0015106201171875, 0.0, -0.000316619873046875, 0.0, -4.589557647705078e-05, -1.9073486328125e-06, -1.597404116182588e-05, -1.9073486328125e-06, -0.006022453308105469, -3.814697265625e-06, -1.9073486328125e-06, -0.0042209625244140625, 0.0, -0.002051115036010742, -1.7642923921812326e-05, -0.017900466918945312, -0.0017299652099609375, -0.0034275054931640625, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -0.7901163101196289, 0.0, -1.71661376953125e-05, -0.000911712646484375, 0.0, -0.7998286485671997, -3.814697265625e-06], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.set_health_to(temp_attack)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 53, 133, "temp_attack", "<EOS>"]}, {"score": -3.587311607639741, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -0.11579036712646484, -0.004111289978027344, -0.0035867691040039062, -0.0001373291015625, -0.0008544921875, 0.0, -0.16384470462799072, -1.9073486328125e-06, -4.1961669921875e-05, -0.06091117858886719, -3.814697265625e-06, -0.03967094421386719, -0.00016021728515625, -0.0005332072032615542, -0.00011086463928222656, -0.0022125244140625, -0.0034084320068359375, -8.0108642578125e-05, -0.11180782318115234, -3.814697265625e-06, -7.2479248046875e-05, 0.0, -0.00010085105168400332, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026048898696899414, 0.0, -0.0006198883056640625, -0.0031251907348632812, -6.67572021484375e-05, -9.989738464355469e-05, -6.67572021484375e-05, -0.05584144592285156, -0.0024700164794921875, -0.06275177001953125, -0.0015106201171875, 0.0, -0.000316619873046875, 0.0, -4.589557647705078e-05, -1.9073486328125e-06, -1.597404116182588e-05, -1.9073486328125e-06, -0.006022453308105469, -3.814697265625e-06, -1.9073486328125e-06, -0.0042209625244140625, 0.0, -0.002051115036010742, -1.7642923921812326e-05, -0.017900466918945312, -0.0017299652099609375, -0.0034275054931640625, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -0.7901163101196289, 0.0, -1.71661376953125e-05, -0.000911712646484375, 0.0, -1.0414897203445435, -7.331361121032387e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.set_health_to(<UNK>)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>"]}, {"score": -3.7817482770912747, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -0.11579036712646484, -0.004111289978027344, -0.0035867691040039062, -0.0001373291015625, -0.0008544921875, 0.0, -0.16384470462799072, -1.9073486328125e-06, -4.1961669921875e-05, -0.06091117858886719, -3.814697265625e-06, -0.03967094421386719, -0.00016021728515625, -0.0005332072032615542, -0.00011086463928222656, -0.0022125244140625, -0.0034084320068359375, -8.0108642578125e-05, -0.11180782318115234, -3.814697265625e-06, -7.2479248046875e-05, 0.0, -0.00010085105168400332, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026048898696899414, 0.0, -0.0006198883056640625, -0.0031251907348632812, -6.67572021484375e-05, -9.989738464355469e-05, -6.67572021484375e-05, -0.05584144592285156, -0.0024700164794921875, -0.06275177001953125, -0.0015106201171875, 0.0, -0.000316619873046875, 0.0, -4.589557647705078e-05, -1.9073486328125e-06, -1.597404116182588e-05, -1.9073486328125e-06, -0.006022453308105469, -3.814697265625e-06, -1.9073486328125e-06, -0.0042209625244140625, 0.0, -0.002051115036010742, -1.7642923921812326e-05, -0.017900466918945312, -0.0017299652099609375, -0.0034275054931640625, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -1.6124310493469238, 0.0, -0.0004634857177734375, -0.04913806915283203, -3.814697265625e-06, -0.36499321460723877, -1.52587890625e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.die(self)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 53, 133, "self", "<EOS>"]}, {"score": -4.095164297282928, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -2.3773117065429688, -0.652888298034668, -0.001224517822265625, -7.43865966796875e-05, -3.24249267578125e-05, 0.0, -0.0007305145263671875, 0.0, -2.9325485229492188e-05, 0.0, -0.0042438507080078125, -2.0265579223632812e-06], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.1507716123339335, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"right": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "_type": "BinOp", "left": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -2.4678258895874023, -0.0002384185791015625, -0.0004673004150390625, 0.0, -0.0029325485229492188, 0.0, -0.005840301513671875, -1.9073486328125e-06, -5.924701690673828e-05, -9.5367431640625e-06, -1.0013580322265625e-05, -1.9073486328125e-06, -0.07086312770843506, -1.1920928244535389e-07, -0.0207672119140625, -0.00067901611328125, -0.004180908203125, -5.7220458984375e-06, -1.9073486328125e-06, -0.02425384521484375, 0.0, -0.004711151123046875, -3.814697265625e-06, -0.0058155059814453125, -3.814697265625e-06, -0.0002338886260986328, -1.1920928244535389e-07, -0.019530292600393295, -8.666505164001137e-05, -0.5671472549438477, -4.00543212890625e-05, -1.9073486328125e-06, -0.0061798095703125, -3.814697265625e-06, -0.038585782051086426, -1.8358230590820312e-05, -0.03136253356933594, -0.000164031982421875, -0.000152587890625, -5.7220458984375e-06, -0.000705718994140625, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -1.2040138244628906e-05, -1.9073486328125e-06, -0.07493054866790771, 0.0], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health - self.target.calculate_attack()\n        <UNK> = self.target.health\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 79, 20, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -4.22036420713421, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -2.3929529190063477, -0.0004978179931640625, -9.5367431640625e-06, -0.000125885009765625, -3.814697265625e-06, 0.0, -0.013027191162109375, -1.9073486328125e-06, -0.10551261901855469, -1.1444091796875e-05, -0.00273740291595459, -2.0265579223632812e-06, -0.0001301765296375379, -1.1920928244535389e-07, -0.6661210060119629, -7.510183422709815e-06, -0.059938665479421616, -3.159007610520348e-05, -0.029569625854492188, -3.814697265625e-05, -1.9073486328125e-06, -0.0001583099365234375, -5.7220458984375e-06, -0.029760360717773438, -2.5510787963867188e-05, -0.049948692321777344, -0.0001735687255859375, -0.0001544952392578125, -7.62939453125e-06, -0.0006275177001953125, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -1.2159347534179688e-05, -1.9073486328125e-06, -0.06582975387573242, 0.0], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>"]}, {"score": -4.920282732507893, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -2.1047887802124023, -7.62939453125e-06, -0.0012700557708740234, -8.34464663057588e-06, -4.6372340875677764e-05, -4.88758041683468e-06, -0.009697174653410912, -2.181519812438637e-05, -0.011310577392578125, -1.33514404296875e-05, -1.9073486328125e-06, -0.000263214111328125, -1.1444091796875e-05, -0.004465579986572266, -3.135203951387666e-05, -0.12662124633789062, -0.0019283294677734375, -7.43865966796875e-05, -1.9073486328125e-06, -0.0005626678466796875, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05414414405822754, 0.0, -0.114959716796875, -0.0037717819213867188, -0.0029649734497070312, -0.0001373291015625, -0.00067138671875, 0.0, -0.159767746925354, -1.9073486328125e-06, -4.1961669921875e-05, -0.06204032897949219, -3.814697265625e-06, -0.03596305847167969, -0.000152587890625, -0.0005458367522805929, -0.00010514259338378906, -0.002368927001953125, -0.0036649703979492188, -8.20159912109375e-05, -0.11275386810302734, -3.814697265625e-06, -7.43865966796875e-05, 0.0, -0.00012922285532113165, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026398897171020508, 0.0, -0.000675201416015625, -0.0032262802124023438, -6.866455078125e-05, -9.894371032714844e-05, -6.67572021484375e-05, -0.04934406280517578, -0.0024738311767578125, -0.05956745147705078, -0.001560211181640625, 0.0, -0.00031280517578125, 0.0, -4.684925079345703e-05, -1.9073486328125e-06, -1.58548318722751e-05, -1.9073486328125e-06, -0.006030082702636719, -3.814697265625e-06, -1.9073486328125e-06, -0.0041351318359375, 0.0, -0.0020825862884521484, -1.7762133211363107e-05, -0.017966270446777344, -0.001712799072265625, -0.003475189208984375, -1.9073486328125e-06, -0.000118255615234375, 0.0, -9.059906005859375e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -1.4381332397460938, -1.9073486328125e-06, -3.0517578125e-05, -0.00020599365234375, -1.9073486328125e-06, -0.03706097602844238, -1.1563283806026448e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.<UNK>(<UNK>)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>"]}, {"score": -5.032907616176907, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "temp_attack", "_type": "Name"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -2.1047887802124023, -7.62939453125e-06, -0.0012700557708740234, -8.34464663057588e-06, -4.6372340875677764e-05, -4.88758041683468e-06, -0.009697174653410912, -2.181519812438637e-05, -0.011310577392578125, -1.33514404296875e-05, -1.9073486328125e-06, -0.000263214111328125, -1.1444091796875e-05, -0.004465579986572266, -3.135203951387666e-05, -0.12662124633789062, -0.0019283294677734375, -7.43865966796875e-05, -1.9073486328125e-06, -0.0005626678466796875, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05414414405822754, 0.0, -0.114959716796875, -0.0037717819213867188, -0.0029649734497070312, -0.0001373291015625, -0.00067138671875, 0.0, -0.159767746925354, -1.9073486328125e-06, -4.1961669921875e-05, -0.06204032897949219, -3.814697265625e-06, -0.03596305847167969, -0.000152587890625, -0.0005458367522805929, -0.00010514259338378906, -0.002368927001953125, -0.0036649703979492188, -8.20159912109375e-05, -0.11275386810302734, -3.814697265625e-06, -7.43865966796875e-05, 0.0, -0.00012922285532113165, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026398897171020508, 0.0, -0.000675201416015625, -0.0032262802124023438, -6.866455078125e-05, -9.894371032714844e-05, -6.67572021484375e-05, -0.04934406280517578, -0.0024738311767578125, -0.05956745147705078, -0.001560211181640625, 0.0, -0.00031280517578125, 0.0, -4.684925079345703e-05, -1.9073486328125e-06, -1.58548318722751e-05, -1.9073486328125e-06, -0.006030082702636719, -3.814697265625e-06, -1.9073486328125e-06, -0.0041351318359375, 0.0, -0.0020825862884521484, -1.7762133211363107e-05, -0.017966270446777344, -0.001712799072265625, -0.003475189208984375, -1.9073486328125e-06, -0.000118255615234375, 0.0, -9.059906005859375e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -0.7888250350952148, 0.0, -1.71661376953125e-05, -0.00090789794921875, 0.0, -0.7983170747756958, -3.814697265625e-06], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.set_health_to(temp_attack)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 53, 133, "temp_attack", "<EOS>"]}, {"score": -5.050326222546268, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"right": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "_type": "BinOp", "left": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -2.4678258895874023, -0.0002384185791015625, -0.0004673004150390625, 0.0, -0.0029325485229492188, 0.0, -0.005840301513671875, -1.9073486328125e-06, -5.924701690673828e-05, -9.5367431640625e-06, -1.0013580322265625e-05, -1.9073486328125e-06, -0.07086312770843506, -1.1920928244535389e-07, -0.0207672119140625, -0.00067901611328125, -0.004180908203125, -5.7220458984375e-06, -1.9073486328125e-06, -0.02425384521484375, 0.0, -0.004711151123046875, -3.814697265625e-06, -0.0058155059814453125, -3.814697265625e-06, -0.0002338886260986328, -1.1920928244535389e-07, -0.019530292600393295, -8.666505164001137e-05, -0.8786411285400391, -0.012953758239746094, -0.014802932739257812, -0.0001201629638671875, -0.001811981201171875, 0.0, -0.007829666137695312, -3.814697265625e-06, -0.00029850006103515625, -1.9073486328125e-06, -0.675370454788208, -2.3841855067985307e-07, -7.62939453125e-06, -0.0026464462280273438, -5.7220458984375e-06, -0.024369239807128906, -1.6450841940240934e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health - self.target.calculate_attack()\n        self.target.change_attack(<UNK>)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 79, 20, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>"]}, {"score": -5.279073368485932, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -2.1047887802124023, -7.62939453125e-06, -0.0012700557708740234, -8.34464663057588e-06, -4.6372340875677764e-05, -4.88758041683468e-06, -0.009697174653410912, -2.181519812438637e-05, -0.011310577392578125, -1.33514404296875e-05, -1.9073486328125e-06, -0.000263214111328125, -1.1444091796875e-05, -0.004465579986572266, -3.135203951387666e-05, -0.12662124633789062, -0.0019283294677734375, -7.43865966796875e-05, -1.9073486328125e-06, -0.0005626678466796875, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05414414405822754, 0.0, -0.114959716796875, -0.0037717819213867188, -0.0029649734497070312, -0.0001373291015625, -0.00067138671875, 0.0, -0.159767746925354, -1.9073486328125e-06, -4.1961669921875e-05, -0.06204032897949219, -3.814697265625e-06, -0.03596305847167969, -0.000152587890625, -0.0005458367522805929, -0.00010514259338378906, -0.002368927001953125, -0.0036649703979492188, -8.20159912109375e-05, -0.11275386810302734, -3.814697265625e-06, -7.43865966796875e-05, 0.0, -0.00012922285532113165, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026398897171020508, 0.0, -0.000675201416015625, -0.0032262802124023438, -6.866455078125e-05, -9.894371032714844e-05, -6.67572021484375e-05, -0.04934406280517578, -0.0024738311767578125, -0.05956745147705078, -0.001560211181640625, 0.0, -0.00031280517578125, 0.0, -4.684925079345703e-05, -1.9073486328125e-06, -1.58548318722751e-05, -1.9073486328125e-06, -0.006030082702636719, -3.814697265625e-06, -1.9073486328125e-06, -0.0041351318359375, 0.0, -0.0020825862884521484, -1.7762133211363107e-05, -0.017966270446777344, -0.001712799072265625, -0.003475189208984375, -1.9073486328125e-06, -0.000118255615234375, 0.0, -9.059906005859375e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -0.7888250350952148, 0.0, -1.71661376953125e-05, -0.00090789794921875, 0.0, -1.044411301612854, -7.534016913268715e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.set_health_to(<UNK>)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>"]}, {"score": -5.388367635154019, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "frog", "_type": "Name"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -0.11579036712646484, -0.004111289978027344, -0.0035867691040039062, -0.0001373291015625, -0.0008544921875, 0.0, -0.16384470462799072, -1.9073486328125e-06, -4.1961669921875e-05, -0.06091117858886719, -3.814697265625e-06, -0.03967094421386719, -0.00016021728515625, -0.0005332072032615542, -0.00011086463928222656, -0.0022125244140625, -0.0034084320068359375, -8.0108642578125e-05, -0.11180782318115234, -3.814697265625e-06, -7.2479248046875e-05, 0.0, -0.00010085105168400332, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026048898696899414, 0.0, -0.0006198883056640625, -0.0031251907348632812, -6.67572021484375e-05, -9.989738464355469e-05, -6.67572021484375e-05, -0.05584144592285156, -0.0024700164794921875, -0.06275177001953125, -0.0015106201171875, 0.0, -0.000316619873046875, 0.0, -4.589557647705078e-05, -1.9073486328125e-06, -1.597404116182588e-05, -1.9073486328125e-06, -0.006022453308105469, -3.814697265625e-06, -1.9073486328125e-06, -0.0042209625244140625, 0.0, -0.002051115036010742, -1.7642923921812326e-05, -0.017900466918945312, -0.0017299652099609375, -0.0034275054931640625, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -3.361701965332031e-05, -5.7220458984375e-06, -0.7901163101196289, 0.0, -1.71661376953125e-05, -0.000911712646484375, 0.0, -2.842336416244507, -0.00028264522552490234], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.set_health_to(frog)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 53, 133, "frog", "<EOS>"]}, {"score": -5.43044042410795, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -2.3773117065429688, -0.8325424194335938, -0.1499471664428711, -5.14984130859375e-05, -0.000164031982421875, 0.0, -0.00010776519775390625, -5.7220458984375e-06, -0.00023424625396728516, -2.0265579223632812e-06, -0.9927197694778442, -5.960462772236497e-07, -5.7220458984375e-06, -0.0007076263427734375, -7.62939453125e-06, -0.01798713207244873, -1.811977563193068e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        self.target.change_attack(<UNK>)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>"]}, {"score": -5.683456045580634, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}}, "targets": [{"id": "temp_attack", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -0.20855720341205597, -2.384185791015625e-06, -0.008800506591796875, -0.0008792877197265625, -1.9073486328125e-05, -0.0004062652587890625, -1.1444091796875e-05, 0.0, -0.1315603256225586, 0.0, -0.0045318603515625, -1.1444091796875e-05, -0.0004067420959472656, -2.1457672119140625e-06, -5.793566378997639e-05, -5.960462772236497e-07, -0.16517697274684906, -4.41074053014745e-06, -0.029264166951179504, -1.585470999998506e-05, -0.004245758056640625, -2.86102294921875e-05, -1.9073486328125e-06, -0.000148773193359375, -1.1444091796875e-05, -0.017641663551330566, -3.5881996154785156e-05, -0.2008819580078125, -0.003055572509765625, -6.29425048828125e-05, -1.9073486328125e-06, -0.000865936279296875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.106231689453125e-06, -1.9073486328125e-06, -0.05081164836883545, 0.0, -0.11579036712646484, -0.004111289978027344, -0.0035867691040039062, -0.0001373291015625, -0.0008544921875, 0.0, -0.16384470462799072, -1.9073486328125e-06, -4.1961669921875e-05, -0.06091117858886719, -3.814697265625e-06, -0.03967094421386719, -0.00016021728515625, -0.0005332072032615542, -0.00011086463928222656, -0.0022125244140625, -0.0034084320068359375, -8.0108642578125e-05, -0.11180782318115234, -3.814697265625e-06, -7.2479248046875e-05, 0.0, -0.00010085105168400332, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.026048898696899414, 0.0, -0.0006198883056640625, -0.0031251907348632812, -6.67572021484375e-05, -9.989738464355469e-05, -6.67572021484375e-05, -2.9422531127929688, -0.0005664825439453125, -0.6839056015014648, -0.04508686065673828, -1.9073486328125e-06, -8.392333984375e-05, -1.9073486328125e-06, -3.0755993066122755e-05, -1.9073486328125e-06, -2.622604188218247e-05, 0.0, -0.40679073333740234, 0.0, -9.34600830078125e-05, -0.008209228515625, -5.53131103515625e-05, -0.0001405477523803711, -8.58306884765625e-05], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        temp_attack = self.target.calculate_attack.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.die(Null)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "temp_attack", "<EOS>", 20, 109, 17, 104, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>"]}, {"score": -6.715968446427141, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "BlessedChampion", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "_type": "BinOp", "left": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Assign", "value": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"id": "temp_attack", "_type": "Name"}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"id": "temp_attack", "_type": "Name"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-7.2479248046875e-05, -0.007968902587890625, -2.145764938177308e-06, -0.00014316037413664162, -1.8715816622716375e-05, -2.3466709535568953e-05, -2.7179718017578125e-05, -1.1920928955078125e-05, 0.0, -0.0001049041748046875, -2.6702880859375e-05, -1.9073486328125e-05, -0.000759124755859375, -5.7220458984375e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -1.0371154530730564e-05, -8.582996088080108e-05, -2.384185791015625e-06, -2.3841855067985307e-07, -0.0001468658447265625, -3.814697265625e-06, -2.50339189733495e-06, -1.2993807104066946e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.33514404296875e-05, -0.002108335494995117, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.00016021728515625, -0.0015755891799926758, -1.9073486328125e-06, -0.00011444091796875, -1.71661376953125e-05, -6.4849853515625e-05, -6.103515625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.0004253387451171875, -4.76837158203125e-05, -1.9073486328125e-06, -0.00308990478515625, -1.9073486328125e-06, -0.00029754638671875, -1.9073486328125e-06, -0.002277374267578125, -1.1920928244535389e-07, -0.006139039993286133, -3.576278118089249e-07, -7.176389044616371e-05, 0.0, -0.0011264205677434802, 0.0, -4.1961669921875e-05, -4.00543212890625e-05, -0.0005588531494140625, -0.00013637542724609375, -1.6689286894688848e-06, -0.17966938018798828, -0.006709098815917969, -0.014072418212890625, -0.001468658447265625, -2.6702880859375e-05, -0.00067138671875, -0.0001220703125, -3.8416755199432373, -5.018643423682079e-05, -0.04547309875488281, -9.918212890625e-05, -0.0751504898071289, 0.0, -0.0024394989013671875, 0.0, -0.0007762908935546875, -1.9073486328125e-06, -1.9550323486328125e-05, -3.814697265625e-06, -1.3470647900248878e-05, -1.1920928244535389e-07, -0.03233157470822334, -2.3841855067985307e-07, -0.05115795135498047, -0.00022125244140625, -0.0012226104736328125, -3.814697265625e-06, 0.0, -0.013887405395507812, 0.0, -0.006832122802734375, -3.814697265625e-06, -0.0021371841430664062, -9.5367431640625e-06, -0.0001767873764038086, -2.0265579223632812e-06, -0.010842307470738888, -5.1021401304751635e-05, -0.058887481689453125, -2.09808349609375e-05, -1.9073486328125e-06, -0.0027923583984375, -5.7220458984375e-06, -0.018465638160705566, -2.4199485778808594e-05, -0.03171730041503906, -0.0001659393310546875, -0.0001354217529296875, -3.814697265625e-06, -0.0006084442138671875, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -1.2040138244628906e-05, -1.9073486328125e-06, -0.07276713848114014, 0.0, -0.11439323425292969, -0.0039653778076171875, -0.0034379959106445312, -0.000194549560546875, -0.000492095947265625, 0.0, -0.15260422229766846, 0.0, -4.38690185546875e-05, -0.058821678161621094, -3.814697265625e-06, -0.031011581420898438, -0.0001239776611328125, -0.0005010378081351519, -0.00010514259338378906, -0.0027217864990234375, -0.0047931671142578125, -7.05718994140625e-05, -0.08633899688720703, -3.814697265625e-06, -6.866455078125e-05, 0.0, -0.0001307725760852918, -2.1457672119140625e-06, -1.8477439880371094e-05, -1.9073486328125e-06, -0.02485489845275879, 0.0, -0.00060272216796875, -0.00305938720703125, -6.67572021484375e-05, -0.00010180473327636719, -7.43865966796875e-05, -0.04171180725097656, -0.002414703369140625, -0.05967998504638672, -0.0015659332275390625, 0.0, -0.0003032684326171875, 0.0, -4.875659942626953e-05, -1.9073486328125e-06, -1.58548318722751e-05, -1.9073486328125e-06, -0.0060672760009765625, -3.814697265625e-06, -1.9073486328125e-06, -0.0040531158447265625, 0.0, -0.002077817916870117, -1.8000548152485862e-05, -0.018602371215820312, -0.0016880035400390625, -0.0034885406494140625, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -8.96453857421875e-05, -1.9073486328125e-06, -3.349781036376953e-05, -5.7220458984375e-06, -0.7852964401245117, 0.0, -1.71661376953125e-05, -0.00090789794921875, 0.0, -0.7978345155715942, -3.814697265625e-06], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = self.target.health - self.target.calculate_attack()\n        <UNK> = self.target.health\n        if temp_attack == 0:\n            self.target.die(Null)\n        else:\n            self.target.<UNK>(<UNK>)\n            self.target.set_health_to(temp_attack)\n", "choice_history": [77, 147, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blessed", " ", "Champion", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 79, 20, 109, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 89, 122, 21, 114, 25, 133, "temp_attack", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>", 218, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 53, 133, "temp_attack", "<EOS>"]}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"score": -1.5196984839153345, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Attack<UNK>Than<UNK>EqualTo"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -0.30246502161026, -0.00013147969730198383, -1.1444091796875e-05, -0.0009517669677734375, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.07765674591064453, -0.35234928131103516, -8.20159912109375e-05, -0.05139278620481491, -0.10866820812225342, -0.04014897346496582, -0.0041065216064453125, -0.1384258270263672, -0.00990605354309082, -0.00024890899658203125, -0.008228187449276447, -0.0003032684326171875, -6.103515625e-05, -1.9073486328125e-06, -0.0006296633509919047, -3.635883331298828e-05, 0.0, -0.0002422332763671875, -9.5367431640625e-06, -0.0015354149509221315, -0.0008507853490300477, -7.152555099310121e-07, -0.0001952648162841797, 0.0, -1.7285345165873878e-05, 0.0, -1.1444091796875e-05, -3.62396240234375e-05, -1.71661376953125e-05, -0.0007865543011575937, -2.3841855067985307e-07, -3.945756543544121e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>EqualTo(2), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 60, 163, "Attack", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", "2", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -3.067975576834641, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Attack<UNK>Than<UNK>EqualTo"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -1.825745940208435, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -6.866455078125e-05, -1.3589859008789062e-05, -0.000553131103515625, -7.62939453125e-06, -2.86102294921875e-05, -0.006117820739746094, 0.0, -3.24249267578125e-05, 0.0, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0008106231689453125, -0.02933502197265625, -7.62939453125e-06, -0.28201884031295776, -0.00012110953684896231, -1.1444091796875e-05, -0.000972747802734375, -9.5367431640625e-06, -1.9073486328125e-06, -3.1828854844206944e-05, -4.38690185546875e-05, -1.9073486328125e-06, -0.07260799407958984, -0.33042144775390625, -8.0108642578125e-05, -0.050392035394907, -0.10503542423248291, -0.04063558578491211, -0.004048347473144531, -0.13824570178985596, -0.009947061538696289, -0.00024700164794921875, -0.008342327550053596, -0.000301361083984375, -6.29425048828125e-05, -1.9073486328125e-06, -0.0006304974085651338, -3.635883331298828e-05, 0.0, -0.0002460479736328125, -9.5367431640625e-06, -0.001546024694107473, -0.0008520967094227672, -7.152555099310121e-07, -0.0001952648162841797, 0.0, -1.7285345165873878e-05, 0.0, -1.1444091796875e-05, -3.62396240234375e-05, -1.71661376953125e-05, -0.0007825048523955047, -2.3841855067985307e-07, -3.945756543544121e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>EqualTo(2), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 60, 163, "Attack", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", "2", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -3.1323226446495127, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Replace"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -1.7875733375549316, -0.05958525836467743, -2.47955322265625e-05, -0.00121307373046875, -1.71661376953125e-05, -1.9073486328125e-06, -2.09808349609375e-05, -3.814697265625e-05, -5.7220458984375e-06, -0.22030925750732422, -5.7220458984375e-06, 0.0, -0.6263872385025024, 0.0, -0.006524085998535156, -0.00038909912109375, -6.306171417236328e-05, -4.792213439941406e-05, -6.866455078125e-05, -9.5367431640625e-06, -0.00044286251068115234, -1.1920928244535389e-07, -0.000156402587890625, -3.814697265625e-06, -0.00901949405670166, -5.7220458984375e-06, 0.0, -2.6702880859375e-05, 0.0, -2.384185791015625e-06, 0.0, -3.0517578125e-05, -0.000164031982421875, -1.33514404296875e-05, -9.917694114847109e-05, -2.3841855067985307e-07, -5.364412118069595e-06, -3.814697265625e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Replace(), MinionSelector\n            (condition=Null, players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Replace", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -3.323454869186776, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"id": "<UNK>", "_type": "Name"}], "func": {"id": "Has<UNK>", "_type": "Name"}}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -0.30246502161026, -0.00013147969730198383, -1.1444091796875e-05, -0.0009517669677734375, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.07765674591064453, -1.258169174194336, -4.00543212890625e-05, -4.1961669921875e-05, 0.0, -0.22096167504787445, -0.05301383510231972, -2.3841830625315197e-06, -0.000133514404296875, -0.08443737030029297, -0.0002803802490234375, -0.8063093423843384, -0.00010990611917804927, -0.000293731689453125, -3.814697265625e-06, -0.005442239344120026, -4.7683708544354886e-05, 0.0, -0.0003719329833984375, -3.814697265625e-06, -0.08763366937637329, -0.0010883857030421495, -4.768370445162873e-07, -0.00010192394256591797, 0.0, -7.6293927122605965e-06, 0.0, -7.62939453125e-06, -0.0002002716064453125, -2.288818359375e-05, -0.0033414054196327925, 0.0, -2.0623032469302416e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Has<UNK>(<UNK>), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 48, 111, 25, 133, "Has", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -3.4241519267950054, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Replace"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -1.7875733375549316, -0.05958525836467743, -2.47955322265625e-05, -0.00121307373046875, -1.71661376953125e-05, -1.9073486328125e-06, -2.09808349609375e-05, -3.814697265625e-05, -5.7220458984375e-06, -0.22030925750732422, -5.7220458984375e-06, 0.0, -0.7807337045669556, -1.1920928244535389e-07, -9.1552734375e-05, -7.62939453125e-06, -0.016652941703796387, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -0.004650115966796875, 0.0, -0.0001201629638671875, -3.814697265625e-06, -0.13217496871948242, -0.0002790689468383789, -1.1920928244535389e-07, -0.0001035928726196289, 0.0, -2.2649765014648438e-06, 0.0, -2.47955322265625e-05, -4.76837158203125e-05, -7.62939453125e-06, -0.0003530276007950306, -2.3841855067985307e-07, -2.8013839255436324e-05, -3.814697265625e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Replace(), MinionSelector\n            (players=EnemyPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Replace", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -3.766425195085816, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowShadow", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Attack<UNK>Than<UNK>EqualTo"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -2.3762447834014893, -0.0018573319539427757, -1.8134713172912598e-05, -6.675719760096399e-06, -1.5497195136049413e-06, -8.392333984375e-05, -1.33514404296875e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013076403411105275, -2.8491018383647315e-05, -0.00012099742889404297, -0.011004328727722168, -0.00252532958984375, -8.96453857421875e-05, -6.31808916295995e-06, -1.025199526338838e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0005702972412109375, -1.9073486328125e-06, -0.2330765724182129, 0.0, -1.1444091796875e-05, 0.0, -2.09808349609375e-05, -0.0003185272216796875, -1.1920928955078125e-05, -0.000438690185546875, -5.7220458984375e-06, -1.71661376953125e-05, -0.0051364898681640625, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.00067138671875, -0.02647113800048828, -5.7220458984375e-06, -0.3000248372554779, -0.00012981098552700132, -1.1444091796875e-05, -0.0009403228759765625, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.0780029296875, -0.35194873809814453, -8.20159912109375e-05, -0.05133270472288132, -0.10916507244110107, -0.0401003360748291, -0.0041027069091796875, -0.13839054107666016, -0.00990605354309082, -0.00024890899658203125, -0.00822664238512516, -0.0003032684326171875, -6.103515625e-05, -1.9073486328125e-06, -0.0006299016531556845, -3.635883331298828e-05, 0.0, -0.0002422332763671875, -9.5367431640625e-06, -0.0015372030902653933, -0.0008506661397404969, -7.152555099310121e-07, -0.0001952648162841797, 0.0, -1.7285345165873878e-05, 0.0, -1.1444091796875e-05, -3.62396240234375e-05, -1.71661376953125e-05, -0.000786077871453017, -2.3841855067985307e-07, -3.945756543544121e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>EqualTo(2), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 60, 163, "Attack", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", "2", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -3.871075491046888, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "AttackGreaterThan"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -0.30246502161026, -0.00013147969730198383, -1.1444091796875e-05, -0.0009517669677734375, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -2.604336738586426, -0.023985862731933594, -5.7220458984375e-05, -0.11097466945648193, -0.014200412668287754, -0.0053253173828125, -0.0035152435302734375, -0.3610188663005829, -8.022785186767578e-05, -0.020234107971191406, 0.0, -0.0028581563383340836, -2.300739288330078e-05, 0.0, -2.288818359375e-05, 0.0, -3.933906555175781e-06, 0.0, -0.0001068115234375, -4.00543212890625e-05, -1.52587890625e-05, -0.0005474734352901578, -1.1920928244535389e-07, -1.871571657829918e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            AttackGreaterThan(2), EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 60, 163, "Attack", "Greater", "Than", "<EOS>", "2", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.068477315271245, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "AttackGreaterThan"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -0.30246502161026, -0.00013147969730198383, -1.1444091796875e-05, -0.0009517669677734375, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.07765674591064453, -0.35234928131103516, -8.20159912109375e-05, -0.05139278620481491, -2.3545987606048584, -0.012528777122497559, -0.18936920166015625, -0.3016211986541748, -0.000385284423828125, -0.000156402587890625, -3.814697265625e-06, -0.0015432457439601421, -5.9485435485839844e-05, 0.0, -0.0005645751953125, -2.47955322265625e-05, -0.0007362350588664412, -0.0004686060710810125, -4.768370445162873e-07, -0.0001703500747680664, 0.0, -1.2755393072438892e-05, 0.0, -1.33514404296875e-05, -3.4332275390625e-05, -1.71661376953125e-05, -0.0009370928164571524, -1.1920928244535389e-07, -4.0053590055322275e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            AttackGreaterThan(2), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 60, 163, "Attack", "Greater", "Than", "<EOS>", "2", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.173285114169943, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Attack<UNK>Than<UNK>Than<UNK>EqualTo"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -0.30246502161026, -0.00013147969730198383, -1.1444091796875e-05, -0.0009517669677734375, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.07765674591064453, -0.35234928131103516, -8.20159912109375e-05, -0.05139278620481491, -0.10866820812225342, -0.04014897346496582, -0.0041065216064453125, -2.676359176635742, -0.009243011474609375, -0.10671913623809814, -0.009542584419250488, -0.0002523660659790039, -0.008232266642153263, -0.0001926422119140625, -6.103515625e-05, -1.9073486328125e-06, -0.0005375538021326065, -3.635883331298828e-05, 0.0, -0.000217437744140625, -9.5367431640625e-06, -0.001733421697281301, -0.0008606799528934062, -8.344646857949556e-07, -0.0001971721649169922, 0.0, -1.740455445542466e-05, 0.0, -1.1444091796875e-05, -3.62396240234375e-05, -1.71661376953125e-05, -0.0008499122341163456, -2.3841855067985307e-07, -4.064961103722453e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>Than<UNK>EqualTo(2), EnemyPlayer(),\n            RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 60, 163, "Attack", "<UNK>", "Than", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", "2", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.534757710324328, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow Priest"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Attack<UNK>Than<UNK>EqualTo"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -3.13608455657959, -0.03672373294830322, -2.491474151611328e-05, -0.0022335052490234375, -2.288818359375e-05, -7.6293927122605965e-06, -6.43729799776338e-06, -9.918212890625e-05, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -0.0005359649658203125, -1.9073486328125e-06, -0.12469911575317383, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.0003108978271484375, -1.1920928955078125e-05, -0.0003986358642578125, -7.62939453125e-06, -2.86102294921875e-05, -0.0030574798583984375, 0.0, -3.4332275390625e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.00077056884765625, -0.027273178100585938, -5.7220458984375e-06, -0.2865990698337555, -0.0001301683223573491, -1.1444091796875e-05, -0.000980377197265625, -7.62939453125e-06, -1.9073486328125e-06, -3.1948064133757725e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.0737457275390625, -0.36659717559814453, -8.20159912109375e-05, -0.05254947021603584, -0.10459232330322266, -0.040340304374694824, -0.0041065216064453125, -0.14050281047821045, -0.009907960891723633, -0.00024509429931640625, -0.008125098422169685, -0.000301361083984375, -6.103515625e-05, -1.9073486328125e-06, -0.0006276368512772024, -3.635883331298828e-05, 0.0, -0.000244140625, -9.5367431640625e-06, -0.0015445940662175417, -0.0008582955342717469, -7.152555099310121e-07, -0.0001952648162841797, 0.0, -1.7285345165873878e-05, 0.0, -1.1444091796875e-05, -3.62396240234375e-05, -1.71661376953125e-05, -0.0007864353246986866, -2.3841855067985307e-07, -3.945756543544121e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>EqualTo(2), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 60, 163, "Attack", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", "2", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.6688711038229584, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Bounce"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -3.174858570098877, -0.001007925602607429, -9.5367431640625e-06, -0.115386962890625, -3.814697265625e-06, -1.9073486328125e-06, -3.24249267578125e-05, -2.288818359375e-05, -3.814697265625e-06, -0.2979736328125, -7.62939453125e-06, 0.0, -0.6424529552459717, 0.0, -0.0055675506591796875, -0.000461578369140625, -6.306171417236328e-05, -4.792213439941406e-05, -6.29425048828125e-05, -9.5367431640625e-06, -0.00047910213470458984, -1.1920928244535389e-07, -0.000164031982421875, -3.814697265625e-06, -0.009845614433288574, -5.7220458984375e-06, 0.0, -2.86102294921875e-05, 0.0, -2.2649765014648438e-06, 0.0, -3.4332275390625e-05, -0.00012969970703125, -1.1444091796875e-05, -0.00011824795365100726, -2.3841855067985307e-07, -5.722038622479886e-06, -3.814697265625e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Bounce(), MinionSelector(\n            condition=Null, players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Bounce", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.77068660568716, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Replace"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -1.7875733375549316, -0.05958525836467743, -2.47955322265625e-05, -0.00121307373046875, -1.71661376953125e-05, -1.9073486328125e-06, -2.09808349609375e-05, -3.814697265625e-05, -5.7220458984375e-06, -1.6614933013916016, -2.288818359375e-05, -5.7220458984375e-06, -0.006451249122619629, -4.768370445162873e-07, -0.0001926422119140625, -3.814697265625e-06, -0.0024503469467163086, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, 0.0, -0.033031463623046875, 0.0, -0.0001201629638671875, -3.814697265625e-06, -0.187644362449646, -0.00023031234741210938, -2.3841855067985307e-07, -9.5367431640625e-06, 0.0, -0.2516956329345703, 0.0, -0.0001773834228515625, -5.7220458984375e-06, -0.35797786712646484, -0.00034677982330322266, -2.3841855067985307e-07, -0.00011134147644042969, 0.0, -2.503394853192731e-06, 0.0, -4.00543212890625e-05, -2.86102294921875e-05, -9.5367431640625e-06, -4.792083927895874e-05, -3.576278118089249e-07, -2.4914475943660364e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Replace(), MinionSelector\n            (players=EnemyPlayer(), picker=UserPicker(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Replace", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.920172797381092, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"id": "Adjacent", "_type": "Name"}], "func": {"id": "Has<UNK>", "_type": "Name"}}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -0.30246502161026, -0.00013147969730198383, -1.1444091796875e-05, -0.0009517669677734375, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.07765674591064453, -1.258169174194336, -4.00543212890625e-05, -4.1961669921875e-05, 0.0, -0.22096167504787445, -0.05301383510231972, -2.3841830625315197e-06, -0.000133514404296875, -0.08443737030029297, -0.0002803802490234375, -2.464826822280884, -0.00010656742961145937, -0.0003948211669921875, 0.0, -0.0037586346734315157, -5.4120995628181845e-05, 0.0, -0.001125335693359375, -5.7220458984375e-06, -0.02680201083421707, -0.0006576502346433699, -3.576278118089249e-07, -0.00010561943054199219, 0.0, -7.748602001811378e-06, 0.0, -9.5367431640625e-06, -0.0001811981201171875, -2.09808349609375e-05, -0.003646354889497161, -1.1920928244535389e-07, -2.1695894247386605e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Has<UNK>(Adjacent), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 48, 111, 25, 133, "Has", "<UNK>", "<EOS>", 205, 53, 133, "Adjacent", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -4.935034061104602, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"id": "<UNK>", "_type": "Name"}], "func": {"id": "Has<UNK>", "_type": "Name"}}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -1.825745940208435, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -6.866455078125e-05, -1.3589859008789062e-05, -0.000553131103515625, -7.62939453125e-06, -2.86102294921875e-05, -0.006117820739746094, 0.0, -3.24249267578125e-05, 0.0, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0008106231689453125, -0.02933502197265625, -7.62939453125e-06, -0.28201884031295776, -0.00012110953684896231, -1.1444091796875e-05, -0.000972747802734375, -9.5367431640625e-06, -1.9073486328125e-06, -3.1828854844206944e-05, -4.38690185546875e-05, -1.9073486328125e-06, -0.07260799407958984, -1.3104724884033203, -4.1961669921875e-05, -4.38690185546875e-05, 0.0, -0.20961390435695648, -0.05323905870318413, -2.50339189733495e-06, -0.0001316070556640625, -0.08188915252685547, -0.0002727508544921875, -0.8036302328109741, -0.00011360142525518313, -0.0002899169921875, -3.814697265625e-06, -0.005445586517453194, -4.780291783390567e-05, 0.0, -0.0003681182861328125, -3.814697265625e-06, -0.08885771036148071, -0.0010916028404608369, -4.768370445162873e-07, -0.00010192394256591797, 0.0, -7.6293927122605965e-06, 0.0, -7.62939453125e-06, -0.0002002716064453125, -2.288818359375e-05, -0.0033196755684912205, 0.0, -2.0623032469302416e-05, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Has<UNK>(<UNK>), EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 48, 111, 25, 133, "Has", "<UNK>", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}, {"score": -8.711986166323697, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "CabalShadowPriest", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Take"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "And", "_type": "Name"}}, {"_type": "Template25", "hole0": "MinionPlaced"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 5, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -1.1205610462639015e-05, -0.009771031327545643, -0.0985385850071907, -6.48477507638745e-05, -1.7452985048294067e-06, -8.58306884765625e-06, -7.152555099310121e-07, -0.0001220703125, -1.71661376953125e-05, -1.33514404296875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.00013136000779923052, -2.8729436962748878e-05, -0.00011920928955078125, -0.044547080993652344, -0.002895355224609375, -9.1552734375e-05, -6.556507287314162e-06, -1.2278553185751662e-05, -1.52587890625e-05, -5.7220458984375e-05, -3.814697265625e-06, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.2303546667098999, 0.0, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, -0.00032806396484375, -1.0013580322265625e-05, -0.000423431396484375, -5.7220458984375e-06, -1.71661376953125e-05, -0.00490570068359375, 0.0, -3.24249267578125e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0006732940673828125, -0.0260467529296875, -7.62939453125e-06, -0.30246502161026, -0.00013147969730198383, -1.1444091796875e-05, -0.0009517669677734375, -7.62939453125e-06, -1.9073486328125e-06, -3.170964919263497e-05, -4.1961669921875e-05, -1.9073486328125e-06, -0.07765674591064453, -1.258169174194336, -4.00543212890625e-05, -4.1961669921875e-05, 0.0, -1.8448773622512817, -0.0011571644572541118, -0.0001125335693359375, -0.11614131927490234, -0.0001392364501953125, -0.013285444118082523, -0.4605638086795807, -0.09565353393554688, -0.2190074920654297, -1.33514404296875e-05, 0.0, -0.0008983612060546875, -0.000179290771484375, 0.0, -0.6058664321899414, -5.7220458984375e-06, -5.7220458984375e-06, -0.0027452707290649414, -4.768370445162873e-07, -0.0002727508544921875, -3.814697265625e-06, -0.002356886863708496, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -0.018487930297851562, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -0.236242413520813, -0.00023615360260009766, -2.3841855067985307e-07, -9.5367431640625e-06, 0.0, -0.22464346885681152, 0.0, -0.000209808349609375, -5.7220458984375e-06, -0.32553744316101074, -0.00033533573150634766, -2.3841855067985307e-07, -0.03567981719970703, 0.0, -1.1780630350112915, -0.16260313987731934, -0.22637617588043213, -0.0009059906005859375, 0.0, -0.8596943020820618, -0.0001375669817207381, -1.9073486328125e-06, -2.491474151611328e-05, 0.0, -3.933906555175781e-06, 0.0, -0.0002613067626953125, -0.0001373291015625, -1.71661376953125e-05, -0.019158948212862015, 0.0, -0.00013827343354932964, -1.9073486328125e-06], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            And(Take(), MinionSelector(players=EnemyPlayer(), picker=\n            UserPicker(), picker=UserPicker())), MinionPlaced(),\n            EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [77, 145, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cabal", " ", "Shadow", "<EOS>", 55, 138, "6", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 48, 111, 25, 133, "And", "<EOS>", 206, 63, 171, "Take", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 63, 171, "Minion", "Placed", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"score": -4.560388185502688, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -2.7839736938476562, -1.9073486328125e-06, -0.005832672119140625, -2.6702880859375e-05, -3.4332275390625e-05, 0.0, -4.1961669921875e-05, 0.0, -0.00021469593048095703, -1.9073486328125e-06, -2.3484230041503906e-05, 0.0, -1.232050895690918, 0.0, 0.0, -0.07469558715820312], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -5.006948210717837, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -2.0173797607421875, -3.24249267578125e-05, -0.012285232543945312, -1.9073486328125e-06, -0.00597381591796875, 0.0, -0.046708106994628906, 0.0, -1.71661376953125e-05, -7.62939453125e-06, -1.1444091796875e-05, -7.82012939453125e-05, 0.0, -0.000339508056640625, -1.9073486328125e-06, -0.0016269683837890625, 0.0, -0.09251689910888672, -7.867813110351562e-06, -0.01746046543121338, 0.0], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        targets.append(game.other_player.hero)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>"]}, {"score": -5.273406483651797, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "check_delayed", "hole0": {"id": "game", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -2.2501931190490723, -4.9591064453125e-05, -0.002338409423828125, -2.09808349609375e-05, -6.67572021484375e-05, 0.0, -2.288818359375e-05, 0.0, -6.127357482910156e-05, -3.814697265625e-06, -4.2438507080078125e-05, 0.0, -0.4624767303466797, 0.0, -2.6702880859375e-05, -0.01742839813232422, -1.9073486328125e-06, -0.0014104843139648438, 0.0, -0.17444896697998047, -0.016908645629882812, -0.009807586669921875, -3.814697265625e-06, -0.0003389120101928711, 0.0, -0.014580845832824707, 0.0, -0.01418304443359375, -0.0001010894775390625, -0.06923484802246094, 0.0, -0.028131484985351562, 0.0, -0.038379549980163574, -1.9073486328125e-06, -8.344650268554688e-06, 0.0, -1.2123768329620361, 0.0, -5.53131103515625e-05, -0.4791116714477539, -1.9073486328125e-06, -0.018097877502441406, 0.0], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        game.check_delayed()\n        self.target.die(self)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 53, 133, "self", "<EOS>", 97, 165, 25, 133, "game", "<EOS>", "check_delayed", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 53, 133, "self", "<EOS>"]}, {"score": -5.294531323434512, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "check_delayed", "hole0": {"id": "game", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -2.2501931190490723, -4.9591064453125e-05, -0.002338409423828125, -2.09808349609375e-05, -6.67572021484375e-05, 0.0, -2.288818359375e-05, 0.0, -6.127357482910156e-05, -3.814697265625e-06, -4.2438507080078125e-05, 0.0, -0.4624767303466797, 0.0, -2.6702880859375e-05, -0.01742839813232422, -1.9073486328125e-06, -0.0014104843139648438, 0.0, -0.17444896697998047, -0.016908645629882812, -0.009807586669921875, -3.814697265625e-06, -0.0003389120101928711, 0.0, -0.014580845832824707, 0.0, -0.01418304443359375, -0.0001010894775390625, -0.06923484802246094, 0.0, -0.028131484985351562, 0.0, -0.038379549980163574, -1.9073486328125e-06, -8.344650268554688e-06, 0.0, -0.9995682239532471, 0.0, -7.62939453125e-06, -0.7311925888061523], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        game.check_delayed()\n        self.target.change_attack(2)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 53, 133, "self", "<EOS>", 97, 165, 25, 133, "game", "<EOS>", "check_delayed", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -5.424470164300601, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -2.2063913345336914, 0.0, -0.000213623046875, -5.7220458984375e-06, 0.0, -0.021055221557617188, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.00124359130859375, 0.0, -0.2604886293411255, -3.933906555175781e-06, -0.05372905731201172, -5.7220458984375e-06, -0.1866006851196289, -2.09808349609375e-05, -0.002780914306640625, -1.9073486328125e-06, -0.0010051727294921875, 0.0, -0.053623199462890625, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -7.62939453125e-06, -0.00012969970703125, 0.0, -0.000213623046875, -1.9073486328125e-06, -0.001659393310546875, 0.0, -0.10805797576904297, -7.867813110351562e-06, -0.021158814430236816, 0.0], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>"]}, {"score": -5.5152821318010865, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"test": {"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"id": "targets", "_type": "Name"}, "ops": [{"_type": "IsNot"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -0.3128185272216797, -0.041263580322265625, -0.62188720703125, -1.1444091796875e-05, -0.08911800384521484, -1.1444091796875e-05, -0.08812153339385986, 0.0, -0.00045013427734375, -0.06444358825683594, -0.00020599365234375, -0.000644683837890625, -0.000339508056640625, -9.72747802734375e-05, -1.9073486328125e-06, -0.000759124755859375, -0.00327301025390625, -1.9073486328125e-05, -0.017732620239257812, 0.0, -0.19071435928344727, 0.0, -0.27788448333740234, 0.0, -3.814697265625e-06, -0.0050640106201171875, -0.00018310546875, -2.47955322265625e-05, -8.20159912109375e-05, -1.33514404296875e-05, -0.0008587833726778626, 0.0, -0.0004863739013671875, -0.00034332275390625, -0.0001201629638671875, -7.62939453125e-06, -0.0013554096221923828, -1.9073486328125e-06, -1.9073486328125e-06, -0.6217927932739258, -0.00032806396484375, -0.027860641479492188, -7.62939453125e-06, -4.57763671875e-05, 0.0, -0.0011894702911376953, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.21911239624023438, 0.0, -1.9073486328125e-06, -0.11408710479736328], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        if targets is not Null:\n            target.damage(player.effective_spell_damage(1), self)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 89, 122, 21, 114, 25, 133, "targets", "<EOS>", 202, 13, 205, 54, 135, "Null", "<EOS>", 217, 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -5.782111861230533, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -2.9728970527648926, -0.07298851013183594, -0.0918121337890625, -3.4332275390625e-05, -3.0517578125e-05, -0.002368927001953125, -3.62396240234375e-05, -0.0017524957656860352, -4.0531158447265625e-06, -0.0025091171264648438, -7.82012939453125e-05, -0.0001506805419921875, 0.0, -0.000270843505859375, -1.9073486328125e-06, -0.0014123916625976562, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.0007114410400390625, -3.814697265625e-06, -5.91278076171875e-05, 0.0, -0.00011074542999267578, -4.9591064453125e-05, -0.0001283884048461914, 0.0, -0.0006046295166015625, -5.91278076171875e-05, -0.00234222412109375, -3.814697265625e-06, -0.005332231521606445, 0.0, -0.004311323165893555, 0.0, -5.340576171875e-05, -3.814697265625e-06, 0.0, -0.027158737182617188, 0.0, -0.000102996826171875, -5.7220458984375e-06, -0.00077056884765625, 0.0, -0.16556322574615479, -4.172325134277344e-06, -0.008900761604309082, -5.7220458984375e-06, -0.01274871826171875, -5.53131103515625e-05, -0.0003757476806640625, -3.814697265625e-06, -0.0010347366333007812, 0.0, -0.22915756702423096, 0.0, -2.47955322265625e-05, -7.62939453125e-06, -1.71661376953125e-05, -0.0001239776611328125, -1.9073486328125e-06, -9.1552734375e-05, -1.9073486328125e-06, -0.00124359130859375, 0.0, -0.1892404556274414, -7.867813110351562e-06, -0.011701226234436035, 0.0, -0.5078039169311523, -0.0001220703125, -0.000690460205078125, -3.814697265625e-06, -0.0050716400146484375, 0.0, -0.10297417640686035, 0.0, -2.86102294921875e-05, -1.71661376953125e-05, -1.71661376953125e-05, -0.0001068115234375, -1.9073486328125e-06, -0.0001354217529296875, -1.9073486328125e-06, -0.0013637542724609375, 0.0, -0.12186527252197266, -7.867813110351562e-06, -0.006555318832397461, 0.0, -0.5424623489379883, -0.0001354217529296875, -0.00070953369140625, -3.814697265625e-06, -0.006397366523742676, 0.0, -0.0854027271270752, 0.0, -2.6702880859375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -0.0001068115234375, -1.9073486328125e-06, -0.0001354217529296875, -1.9073486328125e-06, -0.001373291015625, 0.0, -0.12018013000488281, -7.867813110351562e-06, -0.006239652633666992, 0.0], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        targets.append(game.other_player.hero)\n        targets.append(game.other_player.hero)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 222, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>"]}, {"score": -6.325855948449771, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template37"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}}, {"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.3572158813476562, -0.5706090927124023, -0.8571577072143555, -2.288818359375e-05, -5.340576171875e-05, -3.814697265625e-06, -9.918212890625e-05, -1.9073486328125e-06, -4.780292510986328e-05, 0.0, -3.1113624572753906e-05, 0.0, -0.2321786880493164, 0.0, -3.814697265625e-06, -0.4569730758666992, -0.0009555816650390625, -3.814697265625e-06, -0.0018367767333984375, -3.814697265625e-06, -0.1266498565673828, -0.000354766845703125, -3.814697265625e-06, -1.9073486328125e-06, -0.007801055908203125, 0.0, -0.00347900390625, -1.9073486328125e-06, -0.03608894348144531, 0.0, -0.0032501220703125, -1.1444091796875e-05, -0.0006961822509765625, 0.0, -8.0108642578125e-05, -3.814697265625e-06, -0.0001722574234008789, 0.0, -0.000701904296875, -0.02490234375, -1.71661376953125e-05, -0.0026988983154296875, -1.9073486328125e-06, -0.0002884864807128906, 0.0, -0.05858421325683594, 0.0, -1.9073486328125e-06, -0.007198333740234375, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.00031757354736328125, 0.0, -0.0003948211669921875, -0.00045013427734375, -0.000164031982421875, -3.814697265625e-06, -0.001161813735961914, -1.9073486328125e-06, -0.3733253479003906, -0.0034847259521484375, -3.24249267578125e-05, -1.9073486328125e-06, -9.72747802734375e-05, -1.9073486328125e-06, -0.028079986572265625, 0.0, -0.009499549865722656, -9.5367431640625e-06, -3.4332275390625e-05, -1.9073486328125e-06, -0.0002689361572265625, 0.0, -0.005808830261230469, 0.0, -0.0004425048828125, 0.0, -1.71661376953125e-05, -7.43865966796875e-05, -2.47955322265625e-05, -1.52587890625e-05, 0.0, -0.0012149810791015625, -3.814697265625e-06, -0.0004138946533203125, 0.0, -0.00019466876983642578, -5.7220458984375e-06, -0.0013842582702636719, -3.814697265625e-06, -0.0045909881591796875, -0.0001583099365234375, -0.0001468658447265625, -1.33514404296875e-05, -0.0006885528564453125, 0.0, -0.3288031816482544, 0.0, -2.09808349609375e-05, -7.62939453125e-06, -2.288818359375e-05, -0.000102996826171875, -1.9073486328125e-06, -0.0002117156982421875, -1.9073486328125e-06, -0.00130462646484375, 0.0, -0.15632343292236328, -7.867813110351562e-06, -0.01232302188873291, 0.0, -0.9027490615844727, -9.72747802734375e-05, -0.001354217529296875, -7.62939453125e-06, -0.004364013671875, 0.0, -0.15290284156799316, 0.0, -2.09808349609375e-05, -1.1444091796875e-05, -2.47955322265625e-05, -8.20159912109375e-05, -1.9073486328125e-06, -0.000255584716796875, -1.9073486328125e-06, -0.001667022705078125, 0.0, -0.10190010070800781, -7.867813110351562e-06, -0.015010476112365723, 0.0], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n        for minion in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.append(game.other_player.hero)\n        targets.append(game.other_player.hero)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 223, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 72, 53, 133, "self", "<EOS>", 87, 117, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 217, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>"]}, {"score": -6.542236648394919, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"test": {"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"id": "targets", "_type": "Name"}, "ops": [{"_type": "IsNot"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}], "orelse": [{"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}], "target": {"id": "target", "_type": "Name"}, "iter": {"id": "targets", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -0.3128185272216797, -0.041263580322265625, -0.62188720703125, -1.1444091796875e-05, -0.08911800384521484, -1.1444091796875e-05, -0.08812153339385986, 0.0, -0.00045013427734375, -0.06444358825683594, -0.00020599365234375, -0.000644683837890625, -0.000339508056640625, -9.72747802734375e-05, -1.9073486328125e-06, -0.000759124755859375, -0.00327301025390625, -1.9073486328125e-05, -0.017732620239257812, 0.0, -0.19071435928344727, 0.0, -0.27788448333740234, 0.0, -3.814697265625e-06, -0.0050640106201171875, -0.00018310546875, -2.47955322265625e-05, -8.20159912109375e-05, -1.33514404296875e-05, -0.0008587833726778626, 0.0, -0.0004863739013671875, -0.00034332275390625, -0.0001201629638671875, -7.62939453125e-06, -0.0013554096221923828, -1.9073486328125e-06, -1.9073486328125e-06, -0.8904571533203125, -0.0008525848388671875, -1.52587890625e-05, -1.9073486328125e-06, -0.7107137441635132, 0.0, -0.0037355422973632812, 0.0, -0.0042133331298828125, 0.0, -0.0004482269287109375, -1.52587890625e-05, -4.9591064453125e-05, -0.033802032470703125, -5.7220458984375e-06, -0.16512487828731537, 0.0, -0.1864185333251953, 0.0, -3.814697265625e-06, -0.012681007385253906, -1.52587890625e-05, -1.1444091796875e-05, -2.288818359375e-05, -2.47955322265625e-05, -0.0007557867211289704, 0.0, -0.0002994537353515625, -0.0003662109375, -0.0001506805419921875, -7.62939453125e-06, -0.0011990070343017578, -1.9073486328125e-06], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        if targets is not Null:\n            target.damage(player.effective_spell_damage(1), self)\n        else:\n            for target in targets:\n                target.damage(player.effective_spell_damage(1), self)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 89, 122, 21, 114, 25, 133, "targets", "<EOS>", 202, 13, 205, 54, 135, "Null", "<EOS>", 217, 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 217, 87, 117, 25, 133, "target", "<EOS>", 25, 133, "targets", "<EOS>", 217, 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>"]}, {"score": -6.635923124918918, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"test": {"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"id": "targets", "_type": "Name"}, "ops": [{"_type": "IsNot"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -1.4958816766738892, -4.768371127283899e-06, -0.03513753414154053, -3.24249267578125e-05, -0.059433937072753906, -1.52587890625e-05, -0.0024623870849609375, -1.9073486328125e-06, -0.00197601318359375, 0.0, -0.15951740741729736, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -0.0001506805419921875, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.001312255859375, 0.0, -0.14763450622558594, -7.867813110351562e-06, -0.030311107635498047, 0.0, -0.3124580383300781, -0.04273414611816406, -0.6289892196655273, -1.1444091796875e-05, -0.0944986343383789, -1.1444091796875e-05, -0.07819855213165283, 0.0, -0.0004558563232421875, -0.06328201293945312, -0.000209808349609375, -0.0006732940673828125, -0.00034332275390625, -9.72747802734375e-05, -1.9073486328125e-06, -0.0007610321044921875, -0.003292083740234375, -1.9073486328125e-05, -0.01772785186767578, 0.0, -0.1909865140914917, 0.0, -0.27825927734375, 0.0, -3.814697265625e-06, -0.00505828857421875, -0.00018310546875, -2.47955322265625e-05, -8.20159912109375e-05, -1.33514404296875e-05, -0.0008568760240450501, 0.0, -0.0004863739013671875, -0.0003452301025390625, -0.0001201629638671875, -7.62939453125e-06, -0.0013554096221923828, -1.9073486328125e-06, -1.9073486328125e-06, -0.6149578094482422, -0.0003299713134765625, -0.027791976928710938, -7.62939453125e-06, -4.57763671875e-05, 0.0, -0.0011866092681884766, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.21859455108642578, 0.0, -1.9073486328125e-06, -0.11392402648925781], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.other_player.minions)\n        targets.append(game.other_player.hero)\n        if targets is not Null:\n            target.damage(player.effective_spell_damage(1), self)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 89, 122, 21, 114, 25, 133, "targets", "<EOS>", 202, 13, 205, 54, 135, "Null", "<EOS>", 217, 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -6.64134965133826, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Assign", "value": {"_type": "Template38"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -2.033571243286133, -0.0001678466796875, -1.52587890625e-05, -0.6344833374023438, -8.392333984375e-05, -0.00070953369140625, -1.33514404296875e-05, -0.06249809265136719, 0.0, -0.40576744079589844, -7.62939453125e-06, -0.000110626220703125, -1.9073486328125e-06, -0.010079383850097656, -1.9073486328125e-06, -0.6813392639160156], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        self.target.player = player\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 82, 103, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "player", "<EOS>", 42]}, {"score": -6.981017924914795, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"test": {"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"id": "targets", "_type": "Name"}, "ops": [{"_type": "IsNot"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}], "orelse": [{"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}], "target": {"id": "minion", "_type": "Name"}, "iter": {"id": "targets", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -0.3128185272216797, -0.041263580322265625, -0.62188720703125, -1.1444091796875e-05, -0.08911800384521484, -1.1444091796875e-05, -0.08812153339385986, 0.0, -0.00045013427734375, -0.06444358825683594, -0.00020599365234375, -0.000644683837890625, -0.000339508056640625, -9.72747802734375e-05, -1.9073486328125e-06, -0.000759124755859375, -0.00327301025390625, -1.9073486328125e-05, -0.017732620239257812, 0.0, -0.19071435928344727, 0.0, -0.27788448333740234, 0.0, -3.814697265625e-06, -0.0050640106201171875, -0.00018310546875, -2.47955322265625e-05, -8.20159912109375e-05, -1.33514404296875e-05, -0.0008587833726778626, 0.0, -0.0004863739013671875, -0.00034332275390625, -0.0001201629638671875, -7.62939453125e-06, -0.0013554096221923828, -1.9073486328125e-06, -1.9073486328125e-06, -0.8904571533203125, -0.0008525848388671875, -1.52587890625e-05, -1.9073486328125e-06, -0.6922277212142944, 0.0, -0.013676643371582031, -1.9073486328125e-06, -0.0005846023559570312, 0.0, -0.002246856689453125, -5.53131103515625e-05, -7.2479248046875e-05, -0.06141185760498047, -7.62939453125e-06, -0.4922041893005371, 0.0, -0.2896556854248047, 0.0, -3.814697265625e-06, -0.003631591796875, -3.62396240234375e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -0.0006403923034667969, 0.0, -0.0003871917724609375, -0.0004749298095703125, -0.0001430511474609375, -5.7220458984375e-06, -0.0013573169708251953, -1.9073486328125e-06], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        if targets is not Null:\n            target.damage(player.effective_spell_damage(1), self)\n        else:\n            for minion in targets:\n                minion.damage(player.effective_spell_damage(1), self)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 89, 122, 21, 114, 25, 133, "targets", "<EOS>", 202, 13, 205, 54, 135, "Null", "<EOS>", 217, 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 217, 87, 117, 25, 133, "minion", "<EOS>", 25, 133, "targets", "<EOS>", 217, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>"]}, {"score": -7.870302058971447, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -0.3128185272216797, -0.041263580322265625, -0.7880086898803711, -0.0003871917724609375, -0.000377655029296875, -0.00025177001953125, -0.03423881530761719, -1.33514404296875e-05, -0.05320453643798828, -2.6702880859375e-05, -0.000637054443359375, -1.9073486328125e-06, -0.06405830383300781, -1.9073486328125e-05, -0.06643009185791016, 0.0, -1.919269561767578e-05, 0.0, -0.11895191669464111, 0.0, -2.09808349609375e-05, -0.04244422912597656, -7.2479248046875e-05, -0.001804351806640625, -3.814697265625e-06, -0.012151718139648438, 0.0, -0.0004787445068359375, 0.0, -0.19565296173095703, 0.0, -0.0032224655151367188, -0.0001468658447265625, -0.00045013427734375, 0.0, -0.00238037109375, -3.814697265625e-06, -0.01669025421142578, -3.814697265625e-06, -1.3470649719238281e-05, -5.7220458984375e-06, -2.09808349609375e-05, -1.3398332595825195, -5.53131103515625e-05, -0.000370025634765625, -5.7220458984375e-06, -0.08586311340332031, -1.9073486328125e-06, -0.011281013488769531, 0.0, -0.18715190887451172, 0.0, -0.023828506469726562, -0.10889720916748047, -9.5367431640625e-06, -0.2829904556274414, -1.9073486328125e-06, -0.0001125335693359375, -2.288818359375e-05, -0.058338165283203125, -1.1444091796875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.15084362030029297, 0.0, -1.9073486328125e-06, -0.07055473327636719, -0.0028705596923828125, -0.000186920166015625, -0.0001773834228515625, -0.01148223876953125, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.0027599334716796875, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.8614444732666016, 0.0, -3.814697265625e-06, -0.09987068176269531, -7.43865966796875e-05, -9.5367431640625e-05, -2.288818359375e-05, -1.33514404296875e-05, -0.00048494318616576493, 0.0, -0.00083160400390625, -0.000232696533203125, -0.0001392364501953125, -3.814697265625e-06, -0.0005913972854614258, -1.9073486328125e-06], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        if (self.target.minion_type is MINION_TYPE.DEMON and self.target ==\n            MINION_TYPE.DEMON):\n            self.target.change_attack(2)\n        else:\n            self.target.damage(player.effective_spell_damage(1), self)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 8, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>"]}, {"score": -8.718168475152652, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -0.3128185272216797, -0.041263580322265625, -0.7880086898803711, -0.0003871917724609375, -0.000377655029296875, -0.00025177001953125, -0.03423881530761719, -1.33514404296875e-05, -0.05320453643798828, -2.6702880859375e-05, -0.000637054443359375, -1.9073486328125e-06, -0.06405830383300781, -1.9073486328125e-05, -0.06643009185791016, 0.0, -1.919269561767578e-05, 0.0, -0.11895191669464111, 0.0, -2.09808349609375e-05, -0.04244422912597656, -7.2479248046875e-05, -0.001804351806640625, -3.814697265625e-06, -0.012151718139648438, 0.0, -0.0004787445068359375, 0.0, -0.19565296173095703, 0.0, -0.0032224655151367188, -0.0001468658447265625, -0.00045013427734375, 0.0, -0.00238037109375, -3.814697265625e-06, -0.01669025421142578, -3.814697265625e-06, -1.3470649719238281e-05, -5.7220458984375e-06, -2.09808349609375e-05, -1.3398332595825195, -5.53131103515625e-05, -0.000370025634765625, -5.7220458984375e-06, -0.08586311340332031, -1.9073486328125e-06, -0.011281013488769531, 0.0, -0.18715190887451172, 0.0, -0.023828506469726562, -0.10889720916748047, -9.5367431640625e-06, -0.2829904556274414, -1.9073486328125e-06, -0.0001125335693359375, -2.288818359375e-05, -0.058338165283203125, -1.1444091796875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.15084362030029297, 0.0, -1.9073486328125e-06, -0.07055473327636719, -0.0028705596923828125, -0.000186920166015625, -0.0001773834228515625, -0.01148223876953125, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.0027599334716796875, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.466867446899414, 0.0, -1.9073486328125e-06, -0.34480762481689453], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        if (self.target.minion_type is MINION_TYPE.DEMON and self.target ==\n            MINION_TYPE.DEMON):\n            self.target.change_attack(2)\n        else:\n            self.target.increase_health(2)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 8, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 68]}, {"score": -8.96698532219716, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "ConeOfCold", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Cone of Cold"}, {"_type": "Template37"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "targets", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "extend", "hole0": {"id": "targets", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole1": "append", "hole0": {"id": "targets", "_type": "Name"}}, {"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"id": "targets", "_type": "Name"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "In"}]}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}], "orelse": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0105438232421875, -8.225110650528222e-05, -0.0012305337004363537, -0.00592126464471221, -3.6954811548639555e-06, -0.00015368754975497723, -1.5616416931152344e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.013071060180664062, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.51792984677013e-05, -8.594989776611328e-05, -8.118096593534574e-05, -3.814697265625e-05, -1.5020368664409034e-05, -3.0517578125e-05, -0.0004558563232421875, -0.000392913818359375, -0.0001068115234375, -0.0003032684326171875, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -0.10019981861114502, -1.9073486328125e-06, -0.0001316070556640625, -0.0003147125244140625, -7.62939453125e-05, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -4.1961669921875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -0.3297961950302124, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.6450841940240934e-05, 0.0, -3.0517578125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.0371208190917969e-05, -1.9073468138230965e-06, -1.2538084983825684, -1.52587890625e-05, -0.13036727905273438, -2.6702880859375e-05, -3.814697265625e-06, -0.0021114349365234375, -3.814697265625e-06, -0.02262747287750244, 0.0, -0.010098457336425781, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -0.0022020339965820312, 0.0, -0.000118255615234375, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, -0.000926971435546875, -3.814697265625e-06, -5.340576171875e-05, 0.0, -0.00011074542999267578, -5.7220458984375e-05, -0.0001266002655029297, -1.9073486328125e-06, -0.045098304748535156, -1.71661376953125e-05, -0.025693893432617188, -3.814697265625e-06, -0.0177994966506958, 0.0, -0.008144259452819824, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, 0.0, -0.019357681274414062, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005931854248046875, 0.0, -0.25531160831451416, -2.384185791015625e-06, -0.004440426826477051, -3.814697265625e-06, -0.23910999298095703, -1.9073486328125e-05, -0.002834320068359375, -1.9073486328125e-06, -0.0007839202880859375, 0.0, -0.13875484466552734, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -0.0001239776611328125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.001399993896484375, 0.0, -0.13506507873535156, -7.867813110351562e-06, -0.031013011932373047, 0.0, -0.3128185272216797, -0.041263580322265625, -0.7880086898803711, -0.0003871917724609375, -0.000377655029296875, -0.00025177001953125, -0.03423881530761719, -1.33514404296875e-05, -0.05320453643798828, -2.6702880859375e-05, -0.000637054443359375, -1.9073486328125e-06, -0.06405830383300781, -1.9073486328125e-05, -0.06643009185791016, 0.0, -1.919269561767578e-05, 0.0, -0.11895191669464111, 0.0, -2.09808349609375e-05, -0.04244422912597656, -7.2479248046875e-05, -0.001804351806640625, -3.814697265625e-06, -0.012151718139648438, 0.0, -0.0004787445068359375, 0.0, -0.19565296173095703, 0.0, -0.0032224655151367188, -0.0001468658447265625, -0.00045013427734375, 0.0, -0.00238037109375, -3.814697265625e-06, -0.01669025421142578, -3.814697265625e-06, -1.3470649719238281e-05, -5.7220458984375e-06, -2.09808349609375e-05, -0.5726709365844727, -0.000461578369140625, -0.027914047241210938, -0.0003509521484375, -0.0012922286987304688, 0.0, -0.22255611419677734, -0.0021514892578125, -3.24249267578125e-05, -0.008878707885742188, -9.5367431640625e-06, -0.028049468994140625, 0.0, -0.9883022308349609, 0.0, -3.814697265625e-06, -0.00848388671875, -0.000377655029296875, -9.5367431640625e-06, -7.62939453125e-06, -3.0517578125e-05, -0.0008251659455709159, 0.0, -0.0014171600341796875, -0.000202178955078125, -0.0002613067626953125, -3.814697265625e-06, -0.0007421970367431641, -1.9073486328125e-06, -0.3634014129638672, -0.06707572937011719, -0.4363241195678711, -1.71661376953125e-05, -0.013499140739440918, 0.0, -0.13134098052978516, 0.0, -5.7220458984375e-06, -0.4191608428955078, -0.0001087188720703125, -0.0022411346435546875, -0.0002841949462890625, -0.22959136962890625, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.0032749176025390625, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.7443571090698242, 0.0, -9.5367431640625e-06, -0.12243843078613281], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        targets.append(game.other_player.hero)\n        if (self.target.minion_type is MINION_TYPE.DEMON and self.target in\n            targets):\n            target.damage(player.effective_spell_damage(1), self)\n            target.increase_health(1)\n        else:\n            self.target.change_attack(2)\n", "choice_history": [77, 147, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Cone", " ", "of", " ", "Cold", "<EOS>", 72, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "targets", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "extend", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "targets", "<EOS>", "append", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 89, 122, 19, 107, 6, 206, 49, 114, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 49, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 11, 205, 53, 133, "targets", "<EOS>", 218, 97, 166, 25, 133, "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 69, 217, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score": -1.0557571777823966, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -0.12298781424760818, 0.0, -7.62939453125e-06, -0.3369932174682617, -0.0003147125244140625, -0.00063323974609375, -0.000990152359008789, -4.172325134277344e-06, -9.5367431640625e-06, 0.0, -0.0020517075899988413, -0.0020649356301873922, -2.3841855067985307e-07, -6.866455078125e-05, -0.016397476196289062, -0.019983291625976562, -0.0670318603515625, -0.03996849060058594, -7.62939453125e-06, -1.33514404296875e-05, -0.000301957072224468, -1.5497207641601562e-05, -1.9073486328125e-06, -0.000274658203125, -5.7220458984375e-06, -7.62939453125e-06, -0.05456399917602539, -2.741813204920618e-06, -0.000164031982421875, -1.33514404296875e-05, -0.0018963813781738281, -0.0003762245178222656, -3.063678741455078e-05, -1.9073486328125e-06, 0.0, -2.384185791015625e-06, 0.0, -1.52587890625e-05, -4.9591064453125e-05, -1.33514404296875e-05, -2.9802276912960224e-06, -7.510157047363464e-06, -2.5033950805664062e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -2.1055575728437077, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -0.12298781424760818, 0.0, -7.62939453125e-06, -1.411604881286621, -0.0005016326904296875, -0.0046749114990234375, -0.003440260887145996, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0013608909212052822, -0.0014005801640450954, -2.3841855067985307e-07, -6.67572021484375e-05, -0.008327484130859375, -0.021173477172851562, -0.049338340759277344, -0.047931671142578125, -9.5367431640625e-06, -1.52587890625e-05, -0.00033056733082048595, -1.9311904907226562e-05, -1.9073486328125e-06, -0.00032806396484375, -3.814697265625e-06, -7.62939453125e-06, -0.04133737087249756, -2.503394853192731e-06, -0.000125885009765625, -1.33514404296875e-05, -0.0015681982040405273, -0.00036275386810302734, -2.491474151611328e-05, -1.9073486328125e-06, 0.0, -2.2649765014648438e-06, 0.0, -1.52587890625e-05, -5.340576171875e-05, -1.33514404296875e-05, -2.861018856492592e-06, -7.867782187531702e-06, -2.5033950805664062e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.152287406033544, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -2.2313709259033203, -1.1920928244535389e-07, -1.9073486328125e-06, -0.14824676513671875, -0.003582000732421875, -0.0026607513427734375, -0.014547467231750488, -2.2649765014648438e-06, -1.1444091796875e-05, 0.0, -0.0002617810678202659, -0.021975485607981682, -1.1920928244535389e-07, -2.288818359375e-05, -0.0061626434326171875, -0.10637664794921875, -0.04268360137939453, -0.08449649810791016, -1.1444091796875e-05, -7.62939453125e-06, -0.0004894733428955078, -1.728534698486328e-05, 0.0, -0.0003643035888671875, -3.814697265625e-06, -3.814697265625e-06, -0.09752130508422852, -2.622604142743512e-06, -0.0001888275146484375, -1.33514404296875e-05, -0.002289414405822754, -0.0003648996353149414, -2.1219253540039062e-05, -1.9073486328125e-06, 0.0, -2.384185791015625e-06, 0.0, -1.52587890625e-05, -5.7220458984375e-05, -1.52587890625e-05, -3.2186455882765586e-06, -6.079655122448457e-06, -2.6941299438476562e-05, -1.1920928244535389e-07], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeHealth(1\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.4835593455585396, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}], "func": {"id": "Taunt", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -2.6084277629852295, -0.001155853271484375, -0.0062713623046875, -0.12887859344482422, 0.0, -0.03892326354980469, 0.0, -0.6452633142471313, -4.768370445162873e-07, -0.002739548683166504, -1.1920928244535389e-07, -0.016231536865234375, -5.7220458984375e-06, -0.0014972686767578125, -1.52587890625e-05, 0.0, 0.0, 0.0, -2.0265579223632812e-06, 0.0, -2.6702880859375e-05, -0.0002155303955078125, -4.57763671875e-05, -7.867782187531702e-06, -1.1920922133867862e-06, -1.537799835205078e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Taunt(CARD_SOURCE.<UNK>),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Taunt", "<EOS>", 205, 45, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.994229578983493, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -0.12298781424760818, 0.0, -7.62939453125e-06, -0.3369932174682617, -0.0003147125244140625, -0.00063323974609375, -0.000990152359008789, -4.172325134277344e-06, -9.5367431640625e-06, 0.0, -0.0020517075899988413, -0.0020649356301873922, -2.3841855067985307e-07, -6.866455078125e-05, -0.016397476196289062, -0.019983291625976562, -3.0786828994750977, -7.43865966796875e-05, -0.02396060712635517, -4.7325913328677416e-05, -1.9073486328125e-06, -3.933906555175781e-06, 0.0, -0.0002814475155901164, 0.0, -1.71661376953125e-05, -5.7220458984375e-05, -0.000118255615234375, -3.576272320060525e-06, -9.775130820344202e-06, -7.748603820800781e-06, -2.3841855067985307e-07], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.018874407941382, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -1.793217658996582, -0.02074718475341797, -0.031350135803222656, -0.002795696258544922, -1.5497207641601562e-05, -5.7220458984375e-06, 0.0, -0.0012017596745863557, -0.20137198269367218, 0.0, -3.814697265625e-06, -0.2129688262939453, -0.00054931640625, -0.12200736999511719, -0.0020508766174316406, -3.933906555175781e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0011936398223042488, -0.0018651433056220412, -2.3841855067985307e-07, -7.05718994140625e-05, -0.0038347244262695312, -0.015246391296386719, -0.4357938766479492, -0.006525874137878418, -1.1682510375976562e-05, -3.814697265625e-06, 0.0, -0.0013831342803314328, -0.002387873362749815, -3.576278118089249e-07, -0.0001659393310546875, -0.00376129150390625, -0.008023262023925781, -0.5211811065673828, -0.010385631583631039, -5.125998541188892e-06, -1.9073486328125e-06, 0.0, -0.0009614424780011177, -0.00211917981505394, -2.3841855067985307e-07, -0.00032806396484375, -0.0033168792724609375, -8.20159912109375e-05, -0.18292999267578125, -0.0006847381591796875, 0.0, -0.00610661506652832, -3.063678741455078e-05, -7.62939453125e-06, -3.814697265625e-06, -0.0048580169677734375, -3.814697265625e-06, -2.47955322265625e-05, -2.6702880859375e-05, -0.0011096000671386719, -3.635883331298828e-05, 0.0, -3.814697265625e-05, -1.1444091796875e-05, 0.0, -0.0001087188720703125, -3.814697265625e-06, -4.780292510986328e-05, -4.291534423828125e-06, -0.2742873430252075, -0.00031566619873046875, -0.00250244140625, 0.0, -0.0001678466796875, -0.012302398681640625, 0.0, -0.000240325927734375, -0.0010089874267578125, -0.0007762908935546875, -0.00033032894134521484, -9.655952453613281e-06, 0.0, 0.0, -2.2649765014648438e-06, 0.0, -1.33514404296875e-05, -0.000213623046875, -2.09808349609375e-05, -8.106198947643861e-06, -5.960462772236497e-07, -3.266334533691406e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1)), Buff(ChangeHealth(1)), Buff(\n            ChangeHealth(1))]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.305120483906613, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -0.12298781424760818, 0.0, -7.62939453125e-06, -3.614715576171875, -0.0008411407470703125, -0.0002117156982421875, -0.0022298097610473633, -1.1920928244535389e-07, -1.33514404296875e-05, 0.0, -0.0015202732756733894, -0.001430029165931046, -2.3841855067985307e-07, -5.91278076171875e-05, -0.01331329345703125, -0.017557144165039062, -0.05327033996582031, -0.0386505126953125, -1.33514404296875e-05, -1.71661376953125e-05, -0.00036621090839616954, -2.491474151611328e-05, -1.9073486328125e-06, -0.0003223419189453125, -5.7220458984375e-06, -7.62939453125e-06, -0.04678380489349365, -2.622604142743512e-06, -0.0001354217529296875, -1.33514404296875e-05, -0.0016444921493530273, -0.00037038326263427734, -2.872943878173828e-05, -1.9073486328125e-06, 0.0, -2.384185791015625e-06, 0.0, -1.52587890625e-05, -5.14984130859375e-05, -1.33514404296875e-05, -2.9802276912960224e-06, -7.510157047363464e-06, -2.3126602172851562e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(3\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.359665121625625, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}], "func": {"id": "Taunt", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -2.6084277629852295, -0.001155853271484375, -0.0062713623046875, -0.12887859344482422, 0.0, -0.03892326354980469, 0.0, -1.5170484781265259, -1.0728830375228426e-06, -0.014224162325263023, -2.3841855067985307e-07, -0.008899688720703125, -5.7220458984375e-06, -0.0016578435897827148, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.0265579223632812e-06, 0.0, -3.62396240234375e-05, -0.0002079010009765625, -4.76837158203125e-05, -6.198863957251888e-06, -1.7881377516459906e-06, -1.919269561767578e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Taunt(minion.<UNK>),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Taunt", "<EOS>", 205, 45, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.704292580705641, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -1.793217658996582, -0.02074718475341797, -0.031350135803222656, -0.002795696258544922, -1.5497207641601562e-05, -5.7220458984375e-06, 0.0, -0.0012017596745863557, -0.20137198269367218, 0.0, -3.814697265625e-06, -0.2129688262939453, -0.00054931640625, -0.12200736999511719, -0.0020508766174316406, -3.933906555175781e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0011936398223042488, -0.0018651433056220412, -2.3841855067985307e-07, -7.05718994140625e-05, -0.0038347244262695312, -0.015246391296386719, -1.0419559478759766, -0.10000193119049072, 0.0, -7.62939453125e-06, 0.0, -0.001182222506031394, -0.0005624050972983241, -0.07933235168457031, -0.00038909912109375, -0.5356998443603516, -0.001171112060546875, 0.0, -0.0017337799072265625, -2.1219253540039062e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.0059947967529296875, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, -0.0013900995254516602, -2.872943878173828e-05, 0.0, -4.38690185546875e-05, -9.5367431640625e-06, 0.0, -9.918212890625e-05, -1.9073486328125e-06, -8.785724639892578e-05, -2.2649765014648438e-06, -0.3770555257797241, -0.000274658203125, -0.0009517669677734375, -1.9073486328125e-06, -0.000110626220703125, -0.01797771453857422, 0.0, -0.0003376007080078125, -0.0022029876708984375, -0.0009309053421020508, -0.00033986568450927734, -2.0265579223632812e-06, 0.0, 0.0, -4.172325134277344e-06, 0.0, -1.1444091796875e-05, -9.34600830078125e-05, -1.71661376953125e-05, -4.0531076592742465e-06, -1.311301275563892e-06, -5.173683166503906e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1)), Buff(Taunt())]), MinionSelector(\n            IsType(MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Taunt", "<EOS>", 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.785813582935106, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -0.12298781424760818, 0.0, -7.62939453125e-06, -0.3369932174682617, -0.0003147125244140625, -0.00063323974609375, -0.000990152359008789, -4.172325134277344e-06, -9.5367431640625e-06, 0.0, -0.0020517075899988413, -0.0020649356301873922, -2.3841855067985307e-07, -6.866455078125e-05, -0.016397476196289062, -0.019983291625976562, -0.0670318603515625, -3.2829160690307617, -0.001834869384765625, -1.9073486328125e-06, -0.006199240684509277, -1.52587890625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.007237434387207031, -3.814697265625e-06, -2.47955322265625e-05, -1.52587890625e-05, -0.000769495964050293, -3.254413604736328e-05, 0.0, -1.52587890625e-05, -9.5367431640625e-06, 0.0, -0.00014495849609375, -1.9073486328125e-06, -6.878376007080078e-05, -2.503394853192731e-06, -0.5097382068634033, -0.000202178955078125, -0.0026569366455078125, 0.0, -6.866455078125e-05, -0.013407707214355469, 0.0, -0.0002422332763671875, -0.000885009765625, -0.0008069276809692383, -0.00033605098724365234, -2.0265579223632812e-06, 0.0, 0.0, -4.291534423828125e-06, 0.0, -1.1444091796875e-05, -8.58306884765625e-05, -1.9073486328125e-05, -2.861018856492592e-06, -1.9073468138230965e-06, -4.601478576660156e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(IsType(MINION_TYPE.\n            BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.82630260070178, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -1.793217658996582, -0.02074718475341797, -0.031350135803222656, -0.002795696258544922, -1.5497207641601562e-05, -5.7220458984375e-06, 0.0, -0.0012017596745863557, -0.20137198269367218, 0.0, -3.814697265625e-06, -0.2129688262939453, -0.00054931640625, -0.12200736999511719, -0.0020508766174316406, -3.933906555175781e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0011936398223042488, -0.0018651433056220412, -2.3841855067985307e-07, -7.05718994140625e-05, -0.0038347244262695312, -0.015246391296386719, -0.4357938766479492, -0.006525874137878418, -1.1682510375976562e-05, -3.814697265625e-06, 0.0, -0.0013831342803314328, -0.002387873362749815, -3.576278118089249e-07, -0.0001659393310546875, -0.00376129150390625, -0.008023262023925781, -0.9021415710449219, -0.06065690517425537, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0010552298044785857, -0.0005659805028699338, -0.0008449554443359375, -0.07937049865722656, -3.814697265625e-06, -1.9073486328125e-06, -0.0007017880561761558, -8.70227722771233e-06, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.7841070890426636, -2.9802317840221804e-06, -0.0006227493286132812, -1.33514404296875e-05, -0.0033059120178222656, -0.0003876686096191406, -5.733966827392578e-05, -1.9073486328125e-06, 0.0, -2.2649765014648438e-06, 0.0, -1.71661376953125e-05, -8.0108642578125e-05, -1.33514404296875e-05, -1.2874520507466514e-05, -4.053113570989808e-06, -2.5033950805664062e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1)), Buff(ChangeHealth(1)), Buff(Taunt())\n            ]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Taunt", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -5.112254776311289, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -1.793217658996582, -0.02074718475341797, -0.031350135803222656, -0.002795696258544922, -1.5497207641601562e-05, -5.7220458984375e-06, 0.0, -0.0012017596745863557, -0.20137198269367218, 0.0, -3.814697265625e-06, -0.2129688262939453, -0.00054931640625, -0.12200736999511719, -0.0020508766174316406, -3.933906555175781e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0011936398223042488, -0.0018651433056220412, -2.3841855067985307e-07, -7.05718994140625e-05, -0.0038347244262695312, -0.015246391296386719, -0.4357938766479492, -0.006525874137878418, -1.1682510375976562e-05, -3.814697265625e-06, 0.0, -0.0013831342803314328, -0.002387873362749815, -3.576278118089249e-07, -0.0001659393310546875, -0.00376129150390625, -0.008023262023925781, -0.9021415710449219, -0.06065690517425537, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0010552298044785857, -0.0005659805028699338, -0.0008449554443359375, -0.07937049865722656, -3.814697265625e-06, -1.9073486328125e-06, -0.0007017880561761558, -8.70227722771233e-06, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.0344198942184448, -3.6954811548639555e-06, -0.0025787353515625, -1.71661376953125e-05, -0.036951541900634766, -0.0001201629638671875, 0.0, -1.9073486328125e-06, 0.0, -3.933906555175781e-06, 0.0, -2.86102294921875e-05, -0.0001506805419921875, -4.00543212890625e-05, -0.00026401368086226285, -2.384185791015625e-06, -2.3245811462402344e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1)), Buff(ChangeHealth(1)), Buff(Taunt())\n            ]), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Taunt", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -5.295316211457212, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -0.12298781424760818, 0.0, -7.62939453125e-06, -0.3369932174682617, -0.0003147125244140625, -0.00063323974609375, -0.000990152359008789, -4.172325134277344e-06, -9.5367431640625e-06, 0.0, -0.0020517075899988413, -0.0020649356301873922, -2.3841855067985307e-07, -6.866455078125e-05, -0.016397476196289062, -3.9319839477539062, -0.028139114379882812, -0.009119391441345215, -4.291534423828125e-06, -3.814697265625e-06, 0.0, -0.0006223742966540158, -0.001411434612236917, -1.1920928244535389e-07, -0.0003185272216796875, -0.007798194885253906, -4.38690185546875e-05, -0.10469245910644531, -0.0005588531494140625, 0.0, -0.0050917863845825195, -1.9073486328125e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0038242340087890625, -3.814697265625e-06, -1.52587890625e-05, -2.288818359375e-05, -0.001092076301574707, -3.254413604736328e-05, 0.0, -3.0517578125e-05, -1.1444091796875e-05, 0.0, -0.000125885009765625, -3.814697265625e-06, -4.9591064453125e-05, -4.410743713378906e-06, -0.31055939197540283, -0.0003070831298828125, -0.00244140625, 0.0, -0.00014495849609375, -0.013325691223144531, 0.0, -0.0002422332763671875, -0.0009517669677734375, -0.0007877349853515625, -0.00033414363861083984, -9.655952453613281e-06, 0.0, 0.0, -2.2649765014648438e-06, 0.0, -1.1444091796875e-05, -0.0001163482666015625, -1.9073486328125e-05, -4.529942543740617e-06, -1.1920922133867862e-06, -4.4226646423339844e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1)), Buff(ChangeHealth(1))]),\n            MinionSelector(IsType(MINION_TYPE.BEAST), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -5.476432943097208, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -1.793217658996582, -0.02074718475341797, -0.031350135803222656, -0.002795696258544922, -1.5497207641601562e-05, -5.7220458984375e-06, 0.0, -0.0012017596745863557, -1.7320736646652222, -1.1920928244535389e-07, -1.9073486328125e-06, -0.05085182189941406, -0.0007724761962890625, -0.012250900268554688, -0.005801200866699219, -7.987022399902344e-06, -9.5367431640625e-06, 0.0, -0.00025367335183545947, -0.18867023289203644, -1.1920928244535389e-07, -1.52587890625e-05, -0.0026454925537109375, -0.011971473693847656, -0.47245025634765625, -0.0067441463470458984, -1.3589859008789062e-05, -5.7220458984375e-06, 0.0, -0.0009889202192425728, -0.007058602757751942, -3.576278118089249e-07, -5.14984130859375e-05, -0.0034503936767578125, -0.008753776550292969, -0.4724540710449219, -0.012131213210523129, -5.125998541188892e-06, -3.814697265625e-06, 0.0, -0.0009607453248463571, -0.002657170407474041, -3.576278118089249e-07, -0.0001926422119140625, -0.0032777786254882812, -7.62939453125e-05, -0.16794109344482422, -0.0007343292236328125, 0.0, -0.005215883255004883, -2.682209014892578e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.0046749114990234375, -3.814697265625e-06, -2.6702880859375e-05, -2.6702880859375e-05, -0.0010651350021362305, -3.445148468017578e-05, 0.0, -3.24249267578125e-05, -1.33514404296875e-05, 0.0, -0.0001163482666015625, -1.9073486328125e-06, -4.76837158203125e-05, -4.291534423828125e-06, -0.3088819980621338, -0.000286102294921875, -0.00246429443359375, 0.0, -0.0001583099365234375, -0.012425422668457031, 0.0, -0.000244140625, -0.0009899139404296875, -0.0007801055908203125, -0.00033032894134521484, -7.748603820800781e-06, 0.0, 0.0, -2.2649765014648438e-06, 0.0, -1.33514404296875e-05, -0.0002155303955078125, -2.09808349609375e-05, -8.106198947643861e-06, -5.960462772236497e-07, -3.266334533691406e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeHealth(1\n            )), Buff(ChangeHealth(1)), Buff(ChangeHealth(1)), Buff(\n            ChangeHealth(1))]), MinionSelector(IsType(MINION_TYPE.BEAST),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -5.562111390628587, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DefenderOfArgus", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Defender of Argus"}, {"_type": "Template37"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -0.0012416280806064606, -0.010368767194449902, -0.001184447086416185, -0.003275864291936159, -5.918554961681366e-07, -4.29153169534402e-06, -5.9604644775390625e-06, -3.814697265625e-06, -0.0003833770751953125, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, -5.14984130859375e-05, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -8.21318244561553e-05, -4.8160552978515625e-05, -0.00018906593322753906, -0.0031740665435791016, -1.1920928955078125e-05, -2.86102294921875e-05, -0.0020885467529296875, -0.0011997222900390625, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -0.0015567541122436523, -3.6597251892089844e-05, -0.00028228759765625, -3.814697265625e-06, -0.0001049041748046875, -5.14984130859375e-05, -3.099440846199286e-06, -0.000148773193359375, -9.5367431640625e-06, -0.000232696533203125, -3.814697265625e-06, -0.0011348724365234375, -0.0002155303955078125, -0.0001964569091796875, -0.0060710906982421875, -0.000286102294921875, -3.24249267578125e-05, -3.814697265625e-06, -0.08854832500219345, -0.0006586014060303569, -5.7220458984375e-05, -0.000263214111328125, -0.0002956390380859375, -0.19058704376220703, -0.051117897033691406, -0.019013404846191406, -0.0019614696502685547, -4.172325134277344e-06, -1.9073486328125e-06, 0.0, -0.0021126160863786936, -0.12298781424760818, 0.0, -7.62939453125e-06, -0.3369932174682617, -0.0003147125244140625, -0.00063323974609375, -0.000990152359008789, -4.172325134277344e-06, -9.5367431640625e-06, 0.0, -0.0020517075899988413, -0.0020649356301873922, -2.3841855067985307e-07, -6.866455078125e-05, -0.016397476196289062, -0.019983291625976562, -0.0670318603515625, -3.2829160690307617, -0.001834869384765625, -1.9073486328125e-06, -0.006199240684509277, -1.52587890625e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.007237434387207031, -3.814697265625e-06, -2.47955322265625e-05, -1.52587890625e-05, -0.000769495964050293, -3.254413604736328e-05, 0.0, -1.52587890625e-05, -9.5367431640625e-06, 0.0, -0.00014495849609375, -1.9073486328125e-06, -6.878376007080078e-05, -2.503394853192731e-06, -1.290177583694458, -0.000377655029296875, -0.000293731689453125, 0.0, -4.76837158203125e-05, -0.011178970336914062, 0.0, -0.0001678466796875, -0.001129150390625, -0.0009862184524536133, -0.0002884864807128906, -2.0265579223632812e-06, 0.0, 0.0, -4.410743713378906e-06, 0.0, -1.1444091796875e-05, -8.20159912109375e-05, -1.71661376953125e-05, -2.7418097943154862e-06, -2.0265558760002023e-06, -4.601478576660156e-05, 0.0], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(IsType(MINION_TYPE.\n            MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Defender", " ", "of", " ", "Argus", "<EOS>", 72, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"score": -0.1494184294688239, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -0.0703573226928711, -0.028415679931640625, -9.5367431640625e-06, -2.384184699621983e-05, 0.0, -0.0003204345703125, -0.0030908584594726562, -0.0030879974365234375, -7.510156137868762e-06, -3.1232637411449105e-05, 0.0, 0.0, -0.0005553960800170898, -3.4570634852570947e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -3.722335890544173, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -0.0703573226928711, -3.5988292694091797, 0.0, -0.00010573863255558535, 0.0, -0.00440216064453125, -0.0003833770751953125, -0.0038604736328125, -9.536694960843306e-06, -8.511493069818243e-05, -1.9073486328125e-06, 0.0, -0.0007827281951904297, -3.099436753473128e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -3.921968416331083, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template35"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -3.3038949966430664, -0.5677471160888672, -3.4332275390625e-05, -3.0040726414881647e-05, 0.0, -0.0007419586181640625, -0.0011615753173828125, -0.0042514801025390625, -7.152530997700524e-06, -3.0159775633364916e-05, 0.0, 0.0, -0.0005517005920410156, -2.7418097943154862e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=3)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 39, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -4.27464778790727, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -4.159634590148926, -0.057000160217285156, 0.0, -0.0004630088806152344, 0.0, -0.0072765350341796875, -0.0004138946533203125, -0.0054759979248046875, -6.437280262616696e-06, -7.402851770166308e-05, -1.9073486328125e-06, 0.0, -0.000783085823059082, -2.9802276912960224e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=1)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 38, "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -4.4896559040339525, "model_output": {"hole4": "create_weapon", "_type": "Template0", "hole3": "", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template35"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -3.3038949966430664, -1.0398530960083008, -0.09152138233184814, 0.0, -0.0020503997802734375, -0.0031452178955078125, -0.00458526611328125, -0.0002132424560841173, -0.00041735073318704963, -3.814697265625e-06, 0.0, -0.0004519224166870117, -4.0531076592742465e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=3)\n\n    def (self, create_weapon):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 39, "<EOS>", "create_weapon", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -5.022566036233684, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -4.855903625488281, -7.62939453125e-06, -0.0023174285888671875, -1.9073486328125e-06, -3.814697265625e-06, -0.002933502197265625, 0.0, -0.0964956283569336, -0.03214073181152344, -1.1444091796875e-05, -3.1709656468592584e-05, 0.0, -0.0003452301025390625, -0.0028085708618164062, -0.0054149627685546875, -6.198863957251888e-06, -3.9457983803004026e-05, 0.0, 0.0, -0.0004184246063232422, -2.264974000354414e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.LEGENDARY, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -5.222172812547797, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -5.106705665588379, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.005367279052734375, -9.5367431640625e-06, -0.00099945068359375, 0.0, -3.814697265625e-06, -0.005389213562011719, 0.0, -0.07075023651123047, -0.0214996337890625, -9.5367431640625e-06, -2.765654426184483e-05, 0.0, -0.0003147125244140625, -0.0042629241943359375, -0.0029773712158203125, -6.794905402784934e-06, -3.3974436519201845e-05, 0.0, 0.0, -0.0005002021789550781, -2.9802276912960224e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -5.386792496749877, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "ROGUE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -5.167390823364258, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -1.1444091796875e-05, -0.09904861450195312, -9.5367431640625e-06, -0.001255035400390625, 0.0, -1.9073486328125e-06, -0.005734443664550781, 0.0, -0.0729522705078125, -0.027158737182617188, -1.33514404296875e-05, -2.610682167869527e-05, 0.0, -0.0003108978271484375, -0.005988121032714844, -0.0029697418212890625, -6.794905402784934e-06, -3.457046841504052e-05, 0.0, 0.0, -0.0005363225936889648, -3.3378546504536644e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -5.604676072551399, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -5.387866497039795, -2.09808349609375e-05, -0.0013995061162859201, -5.960462772236497e-07, -0.14624285697937012, 0.0, -3.361688504810445e-05, 0.0, -8.392333984375e-05, -0.022983551025390625, -0.001922607421875, -1.883488948806189e-05, -2.694120667001698e-05, 0.0, 0.0, -0.0005595684051513672, -1.4305104514278355e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=0)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -5.6354312458909135, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -5.518610000610352, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0055179595947265625, -9.5367431640625e-06, -0.000560760498046875, 0.0, -5.7220458984375e-06, -0.0065860748291015625, 0.0, -0.06993389129638672, -0.022855758666992188, -9.5367431640625e-06, -2.5153151000267826e-05, 0.0, -0.0003185272216796875, -0.0038022994995117188, -0.0033016204833984375, -7.3909477578126825e-06, -3.373602157807909e-05, 0.0, 0.0, -0.0005173683166503906, -3.099436753473128e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -5.66193516637577, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -5.467918395996094, 0.0, -0.0002498626708984375, 0.0, -3.814697265625e-06, -0.00394439697265625, 0.0, -0.12693500518798828, -0.031490325927734375, -7.62939453125e-06, -2.5153141905320808e-05, 0.0, -0.0001125335693359375, -0.001941680908203125, -0.0050449371337890625, -8.344614798261318e-06, -3.802750143222511e-05, 0.0, 0.0, -0.0005286931991577148, -2.861018856492592e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -6.026714877045833, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template35"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -3.3038949966430664, -2.6634902954101562, -1.9073486328125e-06, -0.0003695487976074219, 0.0, -0.00719451904296875, -0.0005321502685546875, -0.0068817138671875, -7.510156137868762e-06, -5.638560833176598e-05, -1.9073486328125e-06, 0.0, -0.0007658004760742188, -2.9802276912960224e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=3)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 39, "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -7.520656639762024, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "WeaponWeapon", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -5.33907413482666, -8.96453857421875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -9.179115295410156e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.6535396575927734, -0.019512176513671875, -0.1646662950515747, -1.3470647900248878e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0030775829218328, -0.8933894038200378, -3.170933268847875e-05, -0.0007152557373046875, 0.0, -0.3697759807109833, -1.62123869813513e-05, -3.099436753473128e-06, -0.025531888008117676, 0.0, -0.0015951425302773714, 0.0, -0.0001735687255859375, -0.00203704833984375, -0.0025787353515625, -0.0005106819444335997, -1.823896491259802e-05, -1.9073486328125e-06, 0.0, -0.0006639957427978516, -1.4305104514278355e-06], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=Battlecry(Give(WeaponWeapon()),\n            SelfSelector()))\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Weapon", "Weapon", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}, {"score": -8.688391285909319, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template33"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "windfury"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Weapon", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "arg": "deathrattle"}], "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -0.0703573226928711, -0.028415679931640625, -9.5367431640625e-06, -2.384184699621983e-05, 0.0, -0.0003204345703125, -0.0030908584594726562, -5.876584053039551, -3.433168603805825e-05, -2.276871418871451e-05, -7.62939453125e-06, 0.0, -0.0004712343215942383, -9.536738616588991e-07, -0.41152477264404297, -7.62939453125e-06, -7.62939453125e-06, -0.1523723602294922, -1.71661376953125e-05, -0.0001621246337890625, -1.1444091796875e-05, -9.775161743164062e-06, -2.3841855067985307e-07, -7.62939453125e-06, -7.62939453125e-05, -0.7952553033828735, 0.0, -0.009969711303710938, -2.47955322265625e-05, -3.814697265625e-06, -0.0004940032958984375, -0.018877267837524414, 0.0, -1.52587890625e-05, -0.0545654296875, -0.0056324005126953125, -0.519149661064148, -3.242446109652519e-05, -5.7220458984375e-06, 0.0, -0.001893523265607655, -0.12205284833908081, -0.0001220703125, 0.0, -0.5732442736625671, -1.9073486328125e-06, 0.0], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, windfury=True, deathrattle=Deathrattle(Summon(\n            Weapon()), PlayerSelector()))\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 37, "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 213, 76, 195, "windfury", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Weapon", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -8.740395055296034, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Doomhammer", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole1": {"id": "WeaponAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Weapon", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "overload"}]}}], "hole6": [{"_type": "Template20", "hole2": 8, "hole1": 2, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [-3.62396240234375e-05, -0.0003490447998046875, -1.7881382518680766e-05, -0.001254279282875359, -6.496695277746767e-05, -4.1246334149036556e-05, -9.536738616588991e-07, -3.814697265625e-06, -8.20159912109375e-05, -7.62939453125e-06, -3.814697265625e-06, -7.62939453125e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -4.482268923311494e-05, -0.0001430511474609375, -0.0005664825439453125, -3.814697265625e-06, -0.0005575413815677166, -4.291534423828125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9311904907226562e-05, 0.0, -0.02037358283996582, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0145416259765625, -5.7220458984375e-06, -0.0006122589111328125, 0.0, -1.9073486328125e-06, -0.004670143127441406, 0.0, -5.33907413482666, -8.96453857421875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -9.179115295410156e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.9186248779296875, -0.0001697540283203125, -5.7220458984375e-06, 0.0, -0.04406680911779404, -0.0009118315065279603, -0.009843826293945312, -0.000476837158203125, -0.0001678466796875, -0.1915445327758789, -0.0005283355712890625, -0.20257186889648438, -0.0007289645727723837, -2.3841855067985307e-07, -1.9073486328125e-06, -2.47955322265625e-05, -0.0013247758615761995, -0.42607998847961426, -3.576278118089249e-07, -0.41005897521972656, -0.10069084167480469, -0.000614166259765625, -2.3841855067985307e-07, -3.814697265625e-06, -3.814697265625e-06, -0.0030003758147358894, -0.4878186881542206, -0.055370330810546875, -0.1663494110107422, 0.0, -0.08185213804244995, -3.218649908376392e-06, -9.536738616588991e-07, -0.24857819080352783, 0.0, -0.0004267017066013068, 0.0, -0.0003414154052734375, -0.0033512115478515625, -0.0008945465087890625, -0.00038378016324713826, -9.536735888104886e-06, -1.9073486328125e-06, 0.0, -0.0007698535919189453, -2.3841855067985307e-07], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=Battlecry(Give([Buff(WeaponAttack()),\n            Buff(Weapon())]), SelfSelector()))\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "choice_history": [77, 145, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Doomhammer", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 45, 104, 35, "EPIC", "<EOS>", 212, 76, 195, "overload", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 155, "Buff", "<EOS>", 25, 133, "Weapon", "Attack", "<EOS>", 59, 155, "Buff", "<EOS>", 25, 133, "Weapon", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 161, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>"]}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"score": -0.3975713208681313, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -0.17481613159179688, 0.0, -0.00011444091796875, -0.08981513977050781, -5.7220458984375e-05, -1.9073486328125e-06, -3.0517578125e-05, -8.392333984375e-05, -0.0001506804837845266, -5.960462772236497e-07, -0.00612640380859375, -9.918212890625e-05, -0.0004596710205078125, -3.814697265625e-06, -0.0002772808074951172, 0.0], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>"]}, {"score": -2.8000808910428177, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole1": "bounce", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -2.622309684753418, -0.00018310546875, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0001220703125, -1.9073486328125e-06, -2.3365011657006107e-05, -1.9073486328125e-06, -0.1335887908935547, 0.0], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.bounce()\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "bounce", "<EOS>"]}, {"score": -2.8496159271353108, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -2.710374355316162, 0.0, 0.0, -0.013707160949707031], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -3.0197538093679768, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -0.17481613159179688, 0.0, -0.00011444091796875, -2.719172477722168, -5.91278076171875e-05, -3.814697265625e-06, -4.76837158203125e-05, -5.7220458984375e-06], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(1, self)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 69, 53, 133, "self", "<EOS>"]}, {"score": -4.095690126811824, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -3.897122383117676, 0.0, 0.0, -0.07303333282470703], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 205, 69]}, {"score": -4.221063013469539, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -3.814647674560547, 0.0, -2.288818359375e-05, -0.255523681640625, 0.0, -0.02533245086669922, -1.9073486328125e-06], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 53, 133, "self", "<EOS>"]}, {"score": -4.364203806316219, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template37"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -0.17481613159179688, 0.0, -0.00011444091796875, -4.062497138977051, -0.00112152099609375, -1.33514404296875e-05, -0.000102996826171875, -3.814697265625e-06], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(4, self)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 72, 53, 133, "self", "<EOS>"]}, {"score": -4.8390914157925735, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole1": "<UNK>", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -2.622309684753418, -0.00018310546875, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0001220703125, -1.9073486328125e-06, -2.3365011657006107e-05, -1.9073486328125e-06, -2.1725993156433105, 0.0], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.<UNK>()\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 165, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.9399853900993875, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -4.294527053833008, 0.0, -7.62939453125e-06, -0.000499725341796875, -0.0072040557861328125, -0.0001201629638671875, -4.768370445162873e-07, -2.288818359375e-05, -1.9073486328125e-06, -0.5120646953582764, -2.3841830625315197e-06], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Frozen", "<EOS>"]}, {"score": -5.142486448680721, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template34"}], "hole1": "set_health_to", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -4.927892208099365, 0.0, 0.0, -0.08905982971191406], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.set_health_to(1)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "set_health_to", "<EOS>", 205, 69]}, {"score": -5.539759034733514, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_enemy_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -5.175386905670166, -0.0002105236053466797, -1.71661376953125e-05, 0.0, -5.9364985645515844e-05, 0.0, -2.09808349609375e-05, -1.33514404296875e-05, -3.814697265625e-06, -1.1444091796875e-05, -8.344646857949556e-07, -0.018110275268554688, -3.814697265625e-06, -0.000217437744140625, -0.07272052764892578, -0.0002231597900390625, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -2.4199480321840383e-05, 0.0, -0.16829967498779297, 0.0, -0.00011444091796875, -0.08821868896484375, -5.91278076171875e-05, -1.9073486328125e-06, -2.86102294921875e-05, -8.392333984375e-05, -0.00015270702715497464, -5.960462772236497e-07, -0.005863189697265625, -0.0001010894775390625, -0.000453948974609375, -3.814697265625e-06, -0.0002772808074951172, 0.0], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_enemy_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_enemy_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>"]}, {"score": -6.059327225248886, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "then", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -4.294527053833008, 0.0, -7.62939453125e-06, -0.000499725341796875, -0.0072040557861328125, -0.0001201629638671875, -4.768370445162873e-07, -2.288818359375e-05, -1.9073486328125e-06, -1.630427360534668, -0.0009815541561692953], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(then()))\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "then", "<EOS>"]}, {"score": -6.174108143129125, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -3.814647674560547, 0.0, -2.288818359375e-05, -2.112201690673828, -0.12060165405273438, -0.001080751302652061, -1.9073486328125e-05], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(Null)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 54, 135, "Null", "<EOS>"]}, {"score": -7.287083025371395, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"attr": "immune", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole1": "divine_shield", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.01976299285888672, -3.814697265625e-06, -0.000286102294921875, -0.08141040802001953, -0.00018310546875, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.3961063561728224e-05, 0.0, -4.979518413543701, 0.0, -2.288818359375e-05, -0.7604436874389648, -2.09808349609375e-05, -0.0060863494873046875, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0006198883056640625, -1.71661376953125e-05, -5.5789947509765625e-05, -3.814697265625e-06, -1.4147405624389648, 0.0], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.divine_shield(self.target.immune)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "divine_shield", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "immune", "<EOS>"]}, {"score": -9.231389070883516, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "EarthShock", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Earth Shock"}, {"_type": "Template34"}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"test": {"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "Is"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}, {"test": {"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}, "ops": [{"_type": "Is"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template34"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-4.38690185546875e-05, -0.0017547607421875, -7.152555099310121e-07, -8.237038127845153e-05, -3.8146954466355965e-06, -3.218541678506881e-06, -2.0265579223632812e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0001373291015625, -9.5367431640625e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.33514404296875e-05, -0.0015087127685546875, -2.288818359375e-05, -7.62939453125e-06, -3.0040289857424796e-05, -5.4836247727507725e-05, -2.741813204920618e-06, -1.1920928244535389e-07, -3.0517578125e-05, -0.0001201629638671875, -0.0002498626708984375, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0021115541458129883, 0.0, -0.000186920166015625, -0.0020236968994140625, -1.52587890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.52587890625e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.0002918243408203125, 0.0, -0.00011444091796875, -2.3841855067985307e-07, -0.014675736427307129, 0.0, -1.3470649719238281e-05, 0.0, -4.255717067280784e-05, 0.0, -1.9073486328125e-05, -1.71661376953125e-05, -3.814697265625e-06, -1.33514404296875e-05, -7.152555099310121e-07, -4.7637200355529785, -0.000423431396484375, -0.000457763671875, -0.0003185272216796875, -5.340576171875e-05, 0.0, -1.33514404296875e-05, 0.0, -2.1338462829589844e-05, -5.7220458984375e-06, -4.684925079345703e-05, -1.9073486328125e-06, -0.07037734985351562, 0.0, -1.71661376953125e-05, -0.6774473190307617, -4.38690185546875e-05, -3.814697265625e-06, -1.33514404296875e-05, -4.76837158203125e-05, -0.0001335143460892141, -3.576278118089249e-07, -0.0033740997314453125, -0.0001277923583984375, -0.0004825592041015625, -1.9073486328125e-06, -0.0002766847610473633, -1.9073486328125e-06, -0.01953125, -8.0108642578125e-05, -0.000843048095703125, -5.7220458984375e-06, -0.011275291442871094, -0.000125885009765625, -0.3423032760620117, -1.9073486328125e-06, -0.5432416200637817, -9.5367431640625e-06, -0.0002963542938232422, 0.0, -5.7220458984375e-06, -0.5003194808959961, -1.52587890625e-05, -0.021772384643554688, -0.000396728515625, -0.0005418062210083008, -1.9073486328125e-06, -5.340576171875e-05, -0.0001811981201171875, -0.0052928924560546875, -0.0003910064697265625, 0.0, -0.3698834478855133, 0.0, -0.000225067138671875, 0.0, -3.814697265625e-06, -0.0004482269287109375, -8.0108642578125e-05, -7.62939453125e-06, 0.0, -8.0108642578125e-05, -0.00039207926602102816, -3.576278118089249e-07, -0.002223968505859375, -0.003376007080078125, -0.0001010894775390625, -1.9073486328125e-06, -0.000765681266784668, 0.0, -0.01790142059326172, -9.5367431640625e-05, -0.000324249267578125, -7.62939453125e-06, -0.03546428680419922, -0.0002613067626953125, -0.040480613708496094, -1.9073486328125e-06, -0.7951651811599731, -1.1444091796875e-05, -0.00016987323760986328, 0.0, -7.62939453125e-06, -0.41043663024902344, -1.33514404296875e-05, -0.011996269226074219, -0.0005397796630859375, -0.0004216432571411133, -1.9073486328125e-06, -5.53131103515625e-05, -0.0001468658447265625, -0.00559234619140625, -0.0010395050048828125, 0.0, -0.5380667448043823, 0.0, -0.000244140625, 0.0, -3.814697265625e-06, -0.0004425048828125, -8.0108642578125e-05, -5.7220458984375e-06, 0.0, -7.43865966796875e-05, -0.0004315375117585063, -4.768370445162873e-07, -0.0020427703857421875, -0.0035076141357421875, -9.918212890625e-05, -1.9073486328125e-06, -0.000777125358581543, 0.0], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target is Null:\n            minion.damage(player.effective_spell_damage(1), self)\n        if self.target is Null:\n            minion.damage(player.effective_spell_damage(1), self)\n", "choice_history": [77, 147, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Earth", " ", "Shock", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 89, 121, 21, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 217, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>", 89, 121, 21, 114, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 217, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 69, 53, 133, "self", "<EOS>"]}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"score": -7.457601650326943, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -0.48533937335014343, 0.0, -0.13136577606201172, -0.2999105453491211, -0.0041713714599609375, -0.000843048095703125, -0.0024814605712890625, 0.0, -0.07565736770629883, 0.0, -0.0016069412231445312, 0.0, 0.0, -0.20056915283203125, -1.9073486328125e-05, -0.0001277923583984375, -7.62939453125e-06, -0.001674652099609375, -0.0102001978084445, -4.172325134277344e-06, -4.1961669921875e-05, -0.0002899169921875, -4.1961669921875e-05, -1.52587890625e-05, -0.0002442598342895508, 0.0, -5.7220458984375e-05, -0.0012722015380859375, -0.0001125335693359375, -0.0009138534660451114, 0.0, -0.00067138671875, -1.33514404296875e-05, -0.0020294189453125, -8.58306884765625e-05, -0.0038394927978515625, -0.0001201629638671875, -0.0023860931396484375, -3.814697265625e-06, -0.001415252685546875, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.06255054473876953, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.006649971008300781, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007172822952270508, 0.0, -0.00030517578125, -3.0517578125e-05, -0.0002231597900390625, -0.19698810577392578, -5.7220458984375e-06, -0.022974014282226562, 0.0, -0.0033369064331054688, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007092925952747464, -3.814697265625e-06, -1.9073486328125e-06, -0.9361305236816406, -1.71661376953125e-05, -0.0106201171875, -1.1444091796875e-05, -0.0013062938814982772, -1.1920928244535389e-07], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) < 7\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -7.764451661379972, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.6868076324462891, -0.0002422332763671875, -0.1002044677734375, 0.0, -0.15659046173095703, -3.814697265625e-06, -0.3039466142654419, -1.9073486328125e-06, -0.009415149688720703, 0.0, -0.0017086267471313477, -3.814697265625e-06, -0.0017753801075741649, 0.0, -0.813145637512207, 0.0, -0.5075960159301758, -0.18734359741210938, -0.010526657104492188, -0.0009632110595703125, -0.001827239990234375, 0.0, -0.09250092506408691, 0.0, -0.0016326904296875, 0.0, 0.0, -0.04434394836425781, -2.47955322265625e-05, -0.0001220703125, -7.62939453125e-06, -0.000518798828125, -0.008298003114759922, -4.172325134277344e-06, -3.814697265625e-05, -0.0002536773681640625, -4.00543212890625e-05, -1.71661376953125e-05, -0.00022995471954345703, 0.0, -5.53131103515625e-05, -0.001194000244140625, -0.0001049041748046875, -0.0009285168489441276, 0.0, -0.00066375732421875, -1.33514404296875e-05, -0.0021305084228515625, -8.58306884765625e-05, -0.0037841796875, -0.0001239776611328125, -0.0023860931396484375, -3.814697265625e-06, -0.00140380859375, -9.1552734375e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.0009860992431640625, 0.0, -3.62396240234375e-05, 0.0, -0.062114715576171875, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.0066204071044921875, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007153749465942383, 0.0, -0.0003032684326171875, -3.0517578125e-05, -0.0002231597900390625, -0.19685935974121094, -5.7220458984375e-06, -0.023052215576171875, 0.0, -0.0033397674560546875, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007091733859851956, -3.814697265625e-06, -1.9073486328125e-06, -0.9367256164550781, -1.71661376953125e-05, -0.010631561279296875, -1.1444091796875e-05, -0.0013062938814982772, -1.1920928244535389e-07], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero.minion_type += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) < 7\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "minion_type", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -7.893367254931917, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Gt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -0.48533937335014343, 0.0, -0.13136577606201172, -0.2999105453491211, -0.0041713714599609375, -0.000843048095703125, -0.0024814605712890625, 0.0, -0.07565736770629883, 0.0, -0.0016069412231445312, 0.0, 0.0, -0.20056915283203125, -1.9073486328125e-05, -0.0001277923583984375, -7.62939453125e-06, -0.001674652099609375, -0.0102001978084445, -4.172325134277344e-06, -4.1961669921875e-05, -0.0002899169921875, -4.1961669921875e-05, -1.52587890625e-05, -0.0002442598342895508, 0.0, -5.7220458984375e-05, -0.0012722015380859375, -0.0001125335693359375, -0.0009138534660451114, 0.0, -0.00067138671875, -1.33514404296875e-05, -0.0020294189453125, -8.58306884765625e-05, -0.0038394927978515625, -0.0001201629638671875, -0.0023860931396484375, -3.814697265625e-06, -0.001415252685546875, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.06255054473876953, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.006649971008300781, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007172822952270508, 0.0, -0.00030517578125, -3.0517578125e-05, -0.0002231597900390625, -0.19698810577392578, -5.7220458984375e-06, -0.022974014282226562, 0.0, -0.0033369064331054688, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007092925952747464, -3.814697265625e-06, -1.9073486328125e-06, -1.3760919570922852, -0.00267791748046875, -0.000141143798828125, -7.62939453125e-06, -0.004932621028274298, 0.0], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) > 0\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 9, 205, 55, 138, "0", "<EOS>"]}, {"score": -7.999575838737627, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -0.48533937335014343, 0.0, -0.13136577606201172, -0.2999105453491211, -0.0041713714599609375, -0.000843048095703125, -0.0024814605712890625, 0.0, -0.07565736770629883, 0.0, -0.0016069412231445312, 0.0, 0.0, -0.20056915283203125, -1.9073486328125e-05, -0.0001277923583984375, -7.62939453125e-06, -0.001674652099609375, -0.0102001978084445, -4.172325134277344e-06, -4.1961669921875e-05, -0.0002899169921875, -4.1961669921875e-05, -1.52587890625e-05, -0.0002442598342895508, 0.0, -5.7220458984375e-05, -0.0012722015380859375, -0.0001125335693359375, -0.0009138534660451114, 0.0, -0.00067138671875, -1.33514404296875e-05, -0.0020294189453125, -8.58306884765625e-05, -0.0038394927978515625, -0.0001201629638671875, -0.0023860931396484375, -3.814697265625e-06, -0.001415252685546875, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.06255054473876953, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.006649971008300781, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007172822952270508, 0.0, -0.00030517578125, -3.0517578125e-05, -0.0002231597900390625, -0.19698810577392578, -5.7220458984375e-06, -0.022974014282226562, 0.0, -0.0033369064331054688, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007092925952747464, -3.814697265625e-06, -1.9073486328125e-06, -1.324305534362793, -0.007928848266601562, -0.15782546997070312], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -8.011449920777494, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -0.48533937335014343, 0.0, -0.13136577606201172, -0.2999105453491211, -0.0041713714599609375, -0.000843048095703125, -0.0024814605712890625, 0.0, -0.07565736770629883, 0.0, -0.0016069412231445312, 0.0, 0.0, -0.20056915283203125, -1.9073486328125e-05, -0.0001277923583984375, -7.62939453125e-06, -0.001674652099609375, -0.0102001978084445, -4.172325134277344e-06, -4.1961669921875e-05, -0.0002899169921875, -4.1961669921875e-05, -1.52587890625e-05, -0.0002442598342895508, 0.0, -5.7220458984375e-05, -0.0012722015380859375, -0.0001125335693359375, -0.0009138534660451114, 0.0, -0.00067138671875, -1.33514404296875e-05, -0.0020294189453125, -8.58306884765625e-05, -0.0038394927978515625, -0.0001201629638671875, -0.0023860931396484375, -3.814697265625e-06, -0.001415252685546875, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.06255054473876953, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.006649971008300781, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007172822952270508, 0.0, -0.00030517578125, -3.0517578125e-05, -0.0002231597900390625, -1.7222824096679688, -8.165810868376866e-05, 0.0, -1.9073486328125e-06, -0.0025091171264648438, -9.5367431640625e-06, -0.000732421875, -2.47955322265625e-05, -0.0004241465649101883, 0.0], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -8.199813265702659, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Gt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.6868076324462891, -0.0002422332763671875, -0.1002044677734375, 0.0, -0.15659046173095703, -3.814697265625e-06, -0.3039466142654419, -1.9073486328125e-06, -0.009415149688720703, 0.0, -0.0017086267471313477, -3.814697265625e-06, -0.0017753801075741649, 0.0, -0.813145637512207, 0.0, -0.5075960159301758, -0.18734359741210938, -0.010526657104492188, -0.0009632110595703125, -0.001827239990234375, 0.0, -0.09250092506408691, 0.0, -0.0016326904296875, 0.0, 0.0, -0.04434394836425781, -2.47955322265625e-05, -0.0001220703125, -7.62939453125e-06, -0.000518798828125, -0.008298003114759922, -4.172325134277344e-06, -3.814697265625e-05, -0.0002536773681640625, -4.00543212890625e-05, -1.71661376953125e-05, -0.00022995471954345703, 0.0, -5.53131103515625e-05, -0.001194000244140625, -0.0001049041748046875, -0.0009285168489441276, 0.0, -0.00066375732421875, -1.33514404296875e-05, -0.0021305084228515625, -8.58306884765625e-05, -0.0037841796875, -0.0001239776611328125, -0.0023860931396484375, -3.814697265625e-06, -0.00140380859375, -9.1552734375e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.0009860992431640625, 0.0, -3.62396240234375e-05, 0.0, -0.062114715576171875, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.0066204071044921875, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007153749465942383, 0.0, -0.0003032684326171875, -3.0517578125e-05, -0.0002231597900390625, -0.19685935974121094, -5.7220458984375e-06, -0.023052215576171875, 0.0, -0.0033397674560546875, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007091733859851956, -3.814697265625e-06, -1.9073486328125e-06, -1.3763227462768555, -0.0026721954345703125, -0.000141143798828125, -7.62939453125e-06, -0.0049100904725492, 0.0], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero.minion_type += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) > 0\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "minion_type", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 9, 205, 55, 138, "0", "<EOS>"]}, {"score": -8.204827714594977, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -1.15556001663208, 0.0, -0.4639406204223633, -0.17268753051757812, -0.005435943603515625, -0.001537322998046875, -0.0008182525634765625, 0.0, -0.07740271091461182, 0.0, -0.0016689300537109375, 0.0, 0.0, -0.07274818420410156, -2.86102294921875e-05, -0.0001583099365234375, -5.7220458984375e-06, -0.000576019287109375, -0.008920043706893921, -4.172325134277344e-06, -4.38690185546875e-05, -0.000213623046875, -3.4332275390625e-05, -1.71661376953125e-05, -0.00024330615997314453, 0.0, -5.340576171875e-05, -0.001270294189453125, -0.0001068115234375, -0.0009140920592471957, 0.0, -0.0006694793701171875, -1.33514404296875e-05, -0.0020809173583984375, -8.58306884765625e-05, -0.00382232666015625, -0.0001201629638671875, -0.002384185791015625, -3.814697265625e-06, -0.0014133453369140625, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.062424659729003906, 0.0, -0.0005702972412109375, -9.5367431640625e-06, -0.006676673889160156, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007153749465942383, 0.0, -0.0003032684326171875, -3.0517578125e-05, -0.0002231597900390625, -0.1964588165283203, -5.7220458984375e-06, -0.023036956787109375, 0.0, -0.0033369064331054688, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007083389209583402, -3.814697265625e-06, -1.9073486328125e-06, -0.9364690780639648, -1.71661376953125e-05, -0.01062774658203125, -1.1444091796875e-05, -0.0013043865328654647, -1.1920928244535389e-07], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.minion_type += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) < 7\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "minion_type", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -8.206003292172646, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye an Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -1.1362297534942627, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -0.48533937335014343, 0.0, -0.13136577606201172, -0.2999105453491211, -0.0041713714599609375, -0.000843048095703125, -0.0024814605712890625, 0.0, -0.07565736770629883, 0.0, -0.0016069412231445312, 0.0, 0.0, -0.20056915283203125, -1.9073486328125e-05, -0.0001277923583984375, -7.62939453125e-06, -0.001674652099609375, -0.0102001978084445, -4.172325134277344e-06, -4.1961669921875e-05, -0.0002899169921875, -4.1961669921875e-05, -1.52587890625e-05, -0.0002442598342895508, 0.0, -5.7220458984375e-05, -0.0012722015380859375, -0.0001125335693359375, -0.0009138534660451114, 0.0, -0.00067138671875, -1.33514404296875e-05, -0.0020294189453125, -8.58306884765625e-05, -0.0038394927978515625, -0.0001201629638671875, -0.0023860931396484375, -3.814697265625e-06, -0.001415252685546875, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.06255054473876953, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.006649971008300781, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007172822952270508, 0.0, -0.00030517578125, -3.0517578125e-05, -0.0002231597900390625, -0.19698810577392578, -5.7220458984375e-06, -0.022974014282226562, 0.0, -0.0033369064331054688, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007092925952747464, -3.814697265625e-06, -1.9073486328125e-06, -0.9361305236816406, -1.71661376953125e-05, -0.0106201171875, -1.1444091796875e-05, -0.0013062938814982772, -1.1920928244535389e-07], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) < 7\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "an", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -8.30501822649964, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.6868076324462891, -0.0002422332763671875, -0.1002044677734375, 0.0, -0.15659046173095703, -3.814697265625e-06, -0.3039466142654419, -1.9073486328125e-06, -0.009415149688720703, 0.0, -0.0017086267471313477, -3.814697265625e-06, -0.0017753801075741649, 0.0, -0.813145637512207, 0.0, -0.5075960159301758, -0.18734359741210938, -0.010526657104492188, -0.0009632110595703125, -0.001827239990234375, 0.0, -0.09250092506408691, 0.0, -0.0016326904296875, 0.0, 0.0, -0.04434394836425781, -2.47955322265625e-05, -0.0001220703125, -7.62939453125e-06, -0.000518798828125, -0.008298003114759922, -4.172325134277344e-06, -3.814697265625e-05, -0.0002536773681640625, -4.00543212890625e-05, -1.71661376953125e-05, -0.00022995471954345703, 0.0, -5.53131103515625e-05, -0.001194000244140625, -0.0001049041748046875, -0.0009285168489441276, 0.0, -0.00066375732421875, -1.33514404296875e-05, -0.0021305084228515625, -8.58306884765625e-05, -0.0037841796875, -0.0001239776611328125, -0.0023860931396484375, -3.814697265625e-06, -0.00140380859375, -9.1552734375e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.0009860992431640625, 0.0, -3.62396240234375e-05, 0.0, -0.062114715576171875, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.0066204071044921875, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007153749465942383, 0.0, -0.0003032684326171875, -3.0517578125e-05, -0.0002231597900390625, -0.19685935974121094, -5.7220458984375e-06, -0.023052215576171875, 0.0, -0.0033397674560546875, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007091733859851956, -3.814697265625e-06, -1.9073486328125e-06, -1.323033332824707, -0.00791168212890625, -0.15831375122070312], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero.minion_type += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "minion_type", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -8.318328661269305, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.6868076324462891, -0.0002422332763671875, -0.1002044677734375, 0.0, -0.15659046173095703, -3.814697265625e-06, -0.3039466142654419, -1.9073486328125e-06, -0.009415149688720703, 0.0, -0.0017086267471313477, -3.814697265625e-06, -0.0017753801075741649, 0.0, -0.813145637512207, 0.0, -0.5075960159301758, -0.18734359741210938, -0.010526657104492188, -0.0009632110595703125, -0.001827239990234375, 0.0, -0.09250092506408691, 0.0, -0.0016326904296875, 0.0, 0.0, -0.04434394836425781, -2.47955322265625e-05, -0.0001220703125, -7.62939453125e-06, -0.000518798828125, -0.008298003114759922, -4.172325134277344e-06, -3.814697265625e-05, -0.0002536773681640625, -4.00543212890625e-05, -1.71661376953125e-05, -0.00022995471954345703, 0.0, -5.53131103515625e-05, -0.001194000244140625, -0.0001049041748046875, -0.0009285168489441276, 0.0, -0.00066375732421875, -1.33514404296875e-05, -0.0021305084228515625, -8.58306884765625e-05, -0.0037841796875, -0.0001239776611328125, -0.0023860931396484375, -3.814697265625e-06, -0.00140380859375, -9.1552734375e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.0009860992431640625, 0.0, -3.62396240234375e-05, 0.0, -0.062114715576171875, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.0066204071044921875, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007153749465942383, 0.0, -0.0003032684326171875, -3.0517578125e-05, -0.0002231597900390625, -1.7228727340698242, -8.165810868376866e-05, 0.0, -1.9073486328125e-06, -0.0025081634521484375, -9.5367431640625e-06, -0.000732421875, -2.47955322265625e-05, -0.0004222392162773758, 0.0], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero.minion_type += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "minion_type", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -8.336464355344447, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Template37"}, {"_type": "NameConstant", "value": "Null"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}], "args": {"_type": "arguments", "args": [{"_type": "Template28"}, {"_type": "arg", "arg": "minion"}]}, "name": "_reveal"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Num", "n": 0}, "target": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.6868076324462891, -0.0002422332763671875, -0.1002044677734375, 0.0, -0.15659046173095703, -3.814697265625e-06, -0.3039466142654419, -1.9073486328125e-06, -0.009415149688720703, 0.0, -0.0017086267471313477, -3.814697265625e-06, -0.0017753801075741649, 0.0, -1.1476202011108398, 0.0, -0.059513092041015625, -0.41993236541748047, -0.000438690185546875, -0.07849378883838654, -4.148481821175665e-05, -0.0009784698486328125, -0.034163475036621094, -0.04310417175292969, -1.33514404296875e-05, -0.0003389059565961361, -1.0728830375228426e-06, -0.01252293586730957, 0.0, -0.03993988037109375, -0.0001068115234375, -3.24249267578125e-05, -0.07156014442443848, 0.0, -0.001941680908203125, -9.5367431640625e-06, -2.288818359375e-05, -4.38690185546875e-05, -0.1615467071533203, -9.5367431640625e-06, -0.015790939331054688, -0.09803657978773117, -2.4080271032289602e-05, -0.12139809131622314, -9.5367431640625e-06, -0.000125885009765625, -0.0003871917724609375, -3.62396240234375e-05, -0.1265629380941391, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.001155853271484375, 0.0, -0.0002193450927734375, -1.9073486328125e-06, -0.0012388229370117188, 0.0, -5.7220458984375e-05, -2.47955322265625e-05, -0.20970916748046875, 0.0, -0.0034513473510742188, -0.0018377304077148438, -0.15845680236816406, -0.01885223388671875, -0.000141143798828125, -0.014858245849609375, -0.03431522846221924, 0.0, -0.11833572387695312, -0.000629425048828125, -9.5367431640625e-05, -5.7220458984375e-05, 0.0, -0.0055152177810668945, 0.0, -0.0018157958984375, 0.0, 0.0, -0.16587162017822266, -0.28331947326660156, -0.0008449554443359375, -0.00011932849884033203, 0.0, -0.000732421875, -0.00315093994140625, -0.0001964569091796875, -5.7220458984375e-06, -0.00021326515707187355, -2.0265579223632812e-06, -0.038931965827941895, 0.0], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero.<UNK> += 0\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def _reveal(self, minion):\n        minion.damage(4, Null)\n        super().reveal()\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "<UNK>", "<EOS>", 78, 27, 138, "much", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 17, 104, 42, "opponent", "<EOS>", "bind", "<EOS>", 206, 56, 142, "character_attack", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "_reveal", "<EOS>", 5, 193, 200, 0, 1, 192, "minion", "<EOS>", 218, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 72, 54, 135, "Null", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>"]}, {"score": -8.745349457021774, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -1.15556001663208, 0.0, -0.4639406204223633, -0.17268753051757812, -0.005435943603515625, -0.001537322998046875, -0.0008182525634765625, 0.0, -0.07740271091461182, 0.0, -0.0016689300537109375, 0.0, 0.0, -0.07274818420410156, -2.86102294921875e-05, -0.0001583099365234375, -5.7220458984375e-06, -0.000576019287109375, -0.008920043706893921, -4.172325134277344e-06, -4.38690185546875e-05, -0.000213623046875, -3.4332275390625e-05, -1.71661376953125e-05, -0.00024330615997314453, 0.0, -5.340576171875e-05, -0.001270294189453125, -0.0001068115234375, -0.0009140920592471957, 0.0, -0.0006694793701171875, -1.33514404296875e-05, -0.0020809173583984375, -8.58306884765625e-05, -0.00382232666015625, -0.0001201629638671875, -0.002384185791015625, -3.814697265625e-06, -0.0014133453369140625, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.062424659729003906, 0.0, -0.0005702972412109375, -9.5367431640625e-06, -0.006676673889160156, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007153749465942383, 0.0, -0.0003032684326171875, -3.0517578125e-05, -0.0002231597900390625, -0.1964588165283203, -5.7220458984375e-06, -0.023036956787109375, 0.0, -0.0033369064331054688, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007083389209583402, -3.814697265625e-06, -1.9073486328125e-06, -1.323267936706543, -0.007907867431640625, -0.15777587890625], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.minion_type += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "minion_type", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -8.74797748058333, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Template33"}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "GtE"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye an Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -1.1362297534942627, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -0.48533937335014343, 0.0, -0.13136577606201172, -0.2999105453491211, -0.0041713714599609375, -0.000843048095703125, -0.0024814605712890625, 0.0, -0.07565736770629883, 0.0, -0.0016069412231445312, 0.0, 0.0, -0.20056915283203125, -1.9073486328125e-05, -0.0001277923583984375, -7.62939453125e-06, -0.001674652099609375, -0.0102001978084445, -4.172325134277344e-06, -4.1961669921875e-05, -0.0002899169921875, -4.1961669921875e-05, -1.52587890625e-05, -0.0002442598342895508, 0.0, -5.7220458984375e-05, -0.0012722015380859375, -0.0001125335693359375, -0.0009138534660451114, 0.0, -0.00067138671875, -1.33514404296875e-05, -0.0020294189453125, -8.58306884765625e-05, -0.0038394927978515625, -0.0001201629638671875, -0.0023860931396484375, -3.814697265625e-06, -0.001415252685546875, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.06255054473876953, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.006649971008300781, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007172822952270508, 0.0, -0.00030517578125, -3.0517578125e-05, -0.0002231597900390625, -0.19698810577392578, -5.7220458984375e-06, -0.022974014282226562, 0.0, -0.0033369064331054688, 0.0, -0.00010836124420166016, -3.933906555175781e-06, -0.0007092925952747464, -3.814697265625e-06, -1.9073486328125e-06, -1.324305534362793, -0.007928848266601562, -0.15782546997070312], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "an", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 10, 205, 68]}, {"score": -8.759851562623197, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye an Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -1.1362297534942627, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -0.48533937335014343, 0.0, -0.13136577606201172, -0.2999105453491211, -0.0041713714599609375, -0.000843048095703125, -0.0024814605712890625, 0.0, -0.07565736770629883, 0.0, -0.0016069412231445312, 0.0, 0.0, -0.20056915283203125, -1.9073486328125e-05, -0.0001277923583984375, -7.62939453125e-06, -0.001674652099609375, -0.0102001978084445, -4.172325134277344e-06, -4.1961669921875e-05, -0.0002899169921875, -4.1961669921875e-05, -1.52587890625e-05, -0.0002442598342895508, 0.0, -5.7220458984375e-05, -0.0012722015380859375, -0.0001125335693359375, -0.0009138534660451114, 0.0, -0.00067138671875, -1.33514404296875e-05, -0.0020294189453125, -8.58306884765625e-05, -0.0038394927978515625, -0.0001201629638671875, -0.0023860931396484375, -3.814697265625e-06, -0.001415252685546875, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.06255054473876953, 0.0, -0.000568389892578125, -9.5367431640625e-06, -0.006649971008300781, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007172822952270508, 0.0, -0.00030517578125, -3.0517578125e-05, -0.0002231597900390625, -1.7222824096679688, -8.165810868376866e-05, 0.0, -1.9073486328125e-06, -0.0025091171264648438, -9.5367431640625e-06, -0.000732421875, -2.47955322265625e-05, -0.0004241465649101883, 0.0], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.hero += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "an", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -8.761236719794368, "model_output": {"hole4": "attacker", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Eyean", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole6": [{"test": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}, "_type": "If", "body": [{"_type": "AugAssign", "value": {"_type": "Template34"}, "target": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}}]}], "hole5": [{"_type": "arg", "arg": "target"}], "hole1": "SecretCard"}, "score_history": [-1.9073486328125e-06, -0.0027742385864257812, -0.0013479468179866672, -0.3032873570919037, -0.035589102655649185, -0.005164570175111294, -0.0002983802987728268, -5.0663944421103224e-05, -7.62939453125e-06, -0.00019073486328125, -8.58306884765625e-05, -2.3245658667292446e-05, -0.00010645383736118674, -0.38782811164855957, -0.002598881721496582, -0.006549835670739412, -9.5367431640625e-06, -3.814697265625e-06, -8.34464663057588e-06, -0.008983850479125977, 0.0, -0.0005767345428466797, -3.814697265625e-06, -0.019481658935546875, 0.0, -0.5022780895233154, 0.0, -0.0001468658447265625, -3.814697265625e-06, -1.33514404296875e-05, -0.4891204833984375, 0.0, -6.103515625e-05, -0.000400543212890625, -0.0001544952392578125, -0.06901931762695312, -3.814697265625e-05, -0.001071929931640625, -0.003021240234375, -0.3020486831665039, -1.71661376953125e-05, -0.006299018859863281, -6.29425048828125e-05, -0.013677835464477539, 0.0, -0.0001010894775390625, -0.015340805053710938, -1.71661376953125e-05, -0.014389991760253906, -1.33514404296875e-05, -0.0016851425170898438, 0.0, -0.000102996826171875, 0.0, -0.07368850708007812, -1.9073486328125e-06, -0.3282766342163086, -1.9073486328125e-06, -0.04526996612548828, 0.0, -0.003681182861328125, -0.0002536773681640625, -0.0056285858154296875, -0.007201194763183594, -1.9073486328125e-06, -0.000888824462890625, 0.0, -0.04026150703430176, 0.0, -0.021061062812805176, 0.0, -0.5789833068847656, -0.07872867584228516, -0.0030498504638671875, -0.004471778869628906, -0.00070953369140625, -8.7738037109375e-05, -0.000118255615234375, -0.005337715148925781, -0.000110626220703125, -0.18483924865722656, -0.000133514404296875, -0.7286052703857422, -1.9073486328125e-06, -0.08889007568359375, -1.9073486328125e-06, -0.5642043352127075, -1.9073486328125e-06, -0.022100090980529785, 0.0, -0.004921674728393555, 0.0, -1.15556001663208, 0.0, -0.4639406204223633, -0.17268753051757812, -0.005435943603515625, -0.001537322998046875, -0.0008182525634765625, 0.0, -0.07740271091461182, 0.0, -0.0016689300537109375, 0.0, 0.0, -0.07274818420410156, -2.86102294921875e-05, -0.0001583099365234375, -5.7220458984375e-06, -0.000576019287109375, -0.008920043706893921, -4.172325134277344e-06, -4.38690185546875e-05, -0.000213623046875, -3.4332275390625e-05, -1.71661376953125e-05, -0.00024330615997314453, 0.0, -5.340576171875e-05, -0.001270294189453125, -0.0001068115234375, -0.0009140920592471957, 0.0, -0.0006694793701171875, -1.33514404296875e-05, -0.0020809173583984375, -8.58306884765625e-05, -0.00382232666015625, -0.0001201629638671875, -0.002384185791015625, -3.814697265625e-06, -0.0014133453369140625, -8.96453857421875e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.830687925685197e-05, -2.3841855067985307e-07, -0.000980377197265625, 0.0, -3.62396240234375e-05, 0.0, -0.062424659729003906, 0.0, -0.0005702972412109375, -9.5367431640625e-06, -0.006676673889160156, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0007153749465942383, 0.0, -0.0003032684326171875, -3.0517578125e-05, -0.0002231597900390625, -1.724715232849121, -8.177731797331944e-05, 0.0, -1.9073486328125e-06, -0.0025119781494140625, -9.5367431640625e-06, -0.0007343292236328125, -2.47955322265625e-05, -0.0004241465649101883, 0.0], "inferred_code": "class Eyean(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            attacker.player.game.other_player.minion_type += 1\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Eye", "an", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 199, 1, 192, "target", "<EOS>", 217, 89, 121, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>", 218, 83, 105, 17, 104, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "minion_type", "<EOS>", 78, 38, 97, 166, 25, 133, "minion", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"score": -3.792061577583773, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5904130339622498, -0.0006252095336094499, -0.11522579193115234, -0.0017528533935546875, -0.03144264221191406, -9.5367431640625e-06, -0.022777557373046875, -3.814697265625e-06, -0.13092289865016937, -4.1961669921875e-05, -0.0009918212890625, -0.10266780853271484, -7.62939453125e-06, -0.39818286895751953, -0.0036493532825261354, 0.0, -0.20277881622314453, -0.0023365020751953125, -0.0008487701416015625, -0.0015735626220703125, 0.0, -0.0013943910598754883, -2.288818359375e-05, -8.392333984375e-05, -0.6496496200561523, 0.0, -0.35829785466194153, -2.3841855067985307e-07, -0.000461578369140625, -0.00868988037109375, -0.0001811981201171875, -0.0007654428482055664, 0.0, -1.71661376953125e-05, -0.0026073455810546875, -7.62939453125e-06, -0.001503586769104004, 0.0, -5.7220458984375e-05, -0.0029954910278320312, -3.814697265625e-06, -0.0029435157775878906, -1.9073486328125e-06], "inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.minions) - len(targets)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -3.973410470370652, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -1.056291103363037, -0.004071225877851248, -2.837150896084495e-05, -5.364416665543104e-06, -9.5367431640625e-06, -0.00023651123046875, -0.000118255615234375, -2.753696753643453e-05, -2.1457672119140625e-05, -2.3841855067985307e-07, -3.3378591979271732e-06, -0.0021746158599853516, -1.9073486328125e-06, -0.006608009338378906, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.0003824701998382807, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.2254373410251e-06, -2.062299427052494e-05, -0.21720409393310547, -0.0001468658447265625, -0.01830577850341797, -0.0016918182373046875, -4.9591064453125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.6256617903709412, -0.0006168684922158718, -0.1154794692993164, -0.001766204833984375, -0.031177520751953125, -7.62939453125e-06, -0.02105426788330078, -3.814697265625e-06, -0.12920449674129486, -4.00543212890625e-05, -0.0009937286376953125, -0.1033792495727539, -7.62939453125e-06, -0.3885927200317383, -0.003626960562542081, 0.0, -0.20521259307861328, -0.0023488998413085938, -0.0009479522705078125, -0.0015392303466796875, 0.0, -0.0013695955276489258, -2.288818359375e-05, -8.58306884765625e-05, -0.6517210006713867, 0.0, -0.35920220613479614, -2.3841855067985307e-07, -0.000453948974609375, -0.008776664733886719, -0.000179290771484375, -0.0007692575454711914, 0.0, -1.71661376953125e-05, -0.0026197433471679688, -7.62939453125e-06, -0.0015054941177368164, 0.0, -5.53131103515625e-05, -0.0030193328857421875, -3.814697265625e-06, -0.0029578208923339844, -1.9073486328125e-06], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.minions) - len(targets)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.463126391065536, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "amount", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.4124764204025269, -6.794906312279636e-06, -0.18066978454589844, -0.005947113037109375, -7.62939453125e-05, -5.7220458984375e-06, -0.03964519500732422, -5.7220458984375e-06, -0.009912963025271893, 0.0, -0.0028229951858520508, 0.0, -2.288818359375e-05, -0.1297588348388672, -3.814697265625e-06, -1.222433090209961, -0.0021921347361057997, 0.0, -0.0056934356689453125, -0.14645957946777344, -0.012051582336425781, -0.12314510345458984, 0.0, -0.0002956390380859375, -0.0033054351806640625, -1.52587890625e-05, -0.004448294639587402, -2.0265579223632812e-06, -0.000858306884765625, -0.0015697479248046875, -5.7220458984375e-06, -0.0031682252883911133, -3.814697265625e-06], "inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        amount = copy.copy(player.minions)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "amount", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.573269138980294, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "amount", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -1.056291103363037, -0.004071225877851248, -2.837150896084495e-05, -5.364416665543104e-06, -9.5367431640625e-06, -0.00023651123046875, -0.000118255615234375, -2.753696753643453e-05, -2.1457672119140625e-05, -2.3841855067985307e-07, -3.3378591979271732e-06, -0.0021746158599853516, -1.9073486328125e-06, -0.006608009338378906, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.0003824701998382807, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.2254373410251e-06, -2.062299427052494e-05, -0.21720409393310547, -0.0001468658447265625, -0.01830577850341797, -0.0016918182373046875, -4.9591064453125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3716754913330078, -6.794906312279636e-06, -0.1810140609741211, -0.005782127380371094, -8.0108642578125e-05, -5.7220458984375e-06, -0.03925514221191406, -7.62939453125e-06, -0.009204025380313396, 0.0, -0.002434849739074707, 0.0, -2.288818359375e-05, -0.12458038330078125, -3.814697265625e-06, -1.2248716354370117, -0.0021667431574314833, 0.0, -0.005672454833984375, -0.14793682098388672, -0.012066841125488281, -0.12384414672851562, 0.0, -0.0002880096435546875, -0.00327301025390625, -1.52587890625e-05, -0.004439711570739746, -2.0265579223632812e-06, -0.0008525848388671875, -0.001583099365234375, -5.7220458984375e-06, -0.003193974494934082, -3.814697265625e-06], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        amount = copy.copy(player.minions)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "amount", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.594426903673558, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5904130339622498, -0.0006252095336094499, -0.11522579193115234, -0.0017528533935546875, -0.03144264221191406, -9.5367431640625e-06, -0.022777557373046875, -3.814697265625e-06, -0.13092289865016937, -4.1961669921875e-05, -0.0009918212890625, -0.10266780853271484, -7.62939453125e-06, -1.115473747253418, 0.0, -0.6171836853027344, -1.33514404296875e-05, -0.0032826662063598633, 0.0, -0.0011879205703735352, -2.3841855067985307e-07, -0.022982843220233917, -1.33514404296875e-05, -0.05336475372314453, -0.0021066665649414062, -7.62939453125e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.0030492544174194336, -2.09808349609375e-05, -0.0001659393310546875, -0.25667762756347656, -0.0001068115234375, -0.032187461853027344, -0.12299470603466034, 0.0, -0.16634273529052734, -0.010718345642089844, -0.010394096374511719, -0.0139923095703125, 0.0, -0.0002117156982421875, -0.0028362274169921875, -3.62396240234375e-05, -0.0009005069732666016, 0.0, -0.0004634857177734375, -0.001613616943359375, -1.52587890625e-05, -0.0029135942459106445, -1.9073486328125e-06], "inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(game.other_player.minions) - len(player.minions)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.796419684501814, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -1.056291103363037, -0.004071225877851248, -2.837150896084495e-05, -5.364416665543104e-06, -9.5367431640625e-06, -0.00023651123046875, -0.000118255615234375, -2.753696753643453e-05, -2.1457672119140625e-05, -2.3841855067985307e-07, -3.3378591979271732e-06, -0.0021746158599853516, -1.9073486328125e-06, -0.006608009338378906, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.0003824701998382807, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.2254373410251e-06, -2.062299427052494e-05, -0.21720409393310547, -0.0001468658447265625, -0.01830577850341797, -0.0016918182373046875, -4.9591064453125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.6256617903709412, -0.0006168684922158718, -0.1154794692993164, -0.001766204833984375, -0.031177520751953125, -7.62939453125e-06, -0.02105426788330078, -3.814697265625e-06, -0.12920449674129486, -4.00543212890625e-05, -0.0009937286376953125, -0.1033792495727539, -7.62939453125e-06, -1.135467529296875, 0.0, -0.6133852005004883, -1.33514404296875e-05, -0.0033864974975585938, 0.0, -0.001206040382385254, -2.3841855067985307e-07, -0.023440362885594368, -1.33514404296875e-05, -0.053127288818359375, -0.0021076202392578125, -7.62939453125e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.003052234649658203, -2.09808349609375e-05, -0.0001659393310546875, -0.2587318420410156, -0.0001068115234375, -0.032138824462890625, -0.12339118868112564, 0.0, -0.16387271881103516, -0.010843276977539062, -0.010364532470703125, -0.014028549194335938, 0.0, -0.0002079010009765625, -0.0028400421142578125, -3.62396240234375e-05, -0.0009014606475830078, 0.0, -0.0004558563232421875, -0.0016241073608398438, -1.52587890625e-05, -0.0029317140579223633, -1.9073486328125e-06], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(game.other_player.minions) - len(player.minions)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.796856771255982, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5904130339622498, -0.0006252095336094499, -0.11522579193115234, -0.0017528533935546875, -0.03144264221191406, -9.5367431640625e-06, -0.022777557373046875, -3.814697265625e-06, -0.13092289865016937, -4.1961669921875e-05, -0.0009918212890625, -0.10266780853271484, -7.62939453125e-06, -0.39818286895751953, -0.0036493532825261354, 0.0, -0.20277881622314453, -0.0023365020751953125, -0.0008487701416015625, -0.0015735626220703125, 0.0, -0.0013943910598754883, -2.288818359375e-05, -8.392333984375e-05, -0.7405385971069336, -1.52587890625e-05, -0.4719276428222656, -0.4464847147464752, 0.0, -0.3324708938598633, -0.02153301239013672, -0.0029287338256835938, -0.005737423896789551, 0.0, -0.000209808349609375, -0.0013885498046875, -3.0517578125e-05, -0.002073526382446289, -1.9073486328125e-06, -0.00058746337890625, -0.0009937286376953125, -7.62939453125e-06, -0.006047368049621582, -1.9073486328125e-06], "inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.minions) - len(player.minions)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.909003676527355, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>Stealth", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -1.5903562307357788, -0.0010243370197713375, -6.401533028110862e-05, -9.846274770097807e-05, -5.841253368998878e-06, -5.7220458984375e-06, -0.000118255615234375, -4.9591064453125e-05, -1.1801660548371729e-05, -1.800060272216797e-05, -1.1920928244535389e-07, -6.43729799776338e-06, -0.005223751068115234, -2.47955322265625e-05, -0.009521484375, -1.52587890625e-05, -0.00011301040649414062, 0.0, -0.000465404853457585, 0.0, -9.5367431640625e-06, -7.62939453125e-06, -5.7220458984375e-06, -8.583065209677443e-06, -2.3364747903542593e-05, -0.21283340454101562, -0.00016021728515625, -0.035320281982421875, -0.001476287841796875, -6.29425048828125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5633734464645386, -0.0006330739124678075, -0.11586189270019531, -0.00173187255859375, -0.03170967102050781, -9.5367431640625e-06, -0.02380084991455078, -3.814697265625e-06, -0.13429974019527435, -4.38690185546875e-05, -0.0009937286376953125, -0.1032400131225586, -5.7220458984375e-06, -0.40889549255371094, -0.003772091120481491, 0.0, -0.20006370544433594, -0.0023298263549804688, -0.0007534027099609375, -0.001617431640625, 0.0, -0.0014382600784301758, -2.288818359375e-05, -8.20159912109375e-05, -0.6462345123291016, 0.0, -0.35802456736564636, -2.3841855067985307e-07, -0.0004711151123046875, -0.008573532104492188, -0.00018310546875, -0.0007606744766235352, 0.0, -1.71661376953125e-05, -0.0026073455810546875, -7.62939453125e-06, -0.001495957374572754, 0.0, -5.7220458984375e-05, -0.0029811859130859375, -3.814697265625e-06, -0.0029091835021972656, -1.9073486328125e-06], "inferred_code": "class Flare<UNK>Stealth(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.minions) - len(targets)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "Stealth", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.965210122947127, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -1.056291103363037, -0.004071225877851248, -2.837150896084495e-05, -5.364416665543104e-06, -9.5367431640625e-06, -0.00023651123046875, -0.000118255615234375, -2.753696753643453e-05, -2.1457672119140625e-05, -2.3841855067985307e-07, -3.3378591979271732e-06, -0.0021746158599853516, -1.9073486328125e-06, -0.006608009338378906, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.0003824701998382807, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.2254373410251e-06, -2.062299427052494e-05, -0.21720409393310547, -0.0001468658447265625, -0.01830577850341797, -0.0016918182373046875, -4.9591064453125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.6256617903709412, -0.0006168684922158718, -0.1154794692993164, -0.001766204833984375, -0.031177520751953125, -7.62939453125e-06, -0.02105426788330078, -3.814697265625e-06, -0.12920449674129486, -4.00543212890625e-05, -0.0009937286376953125, -0.1033792495727539, -7.62939453125e-06, -0.3885927200317383, -0.003626960562542081, 0.0, -0.20521259307861328, -0.0023488998413085938, -0.0009479522705078125, -0.0015392303466796875, 0.0, -0.0013695955276489258, -2.288818359375e-05, -8.58306884765625e-05, -0.7382831573486328, -1.52587890625e-05, -0.47374820709228516, -0.4447122812271118, 0.0, -0.324249267578125, -0.022050857543945312, -0.002880096435546875, -0.005764126777648926, 0.0, -0.0002079010009765625, -0.00139617919921875, -3.24249267578125e-05, -0.002081155776977539, -1.9073486328125e-06, -0.000576019287109375, -0.0010013580322265625, -7.62939453125e-06, -0.006080746650695801, -1.9073486328125e-06], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.minions) - len(player.minions)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.199570042296692, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK><UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"id": "targets", "_type": "Name"}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -1.8701623678207397, -0.021825391799211502, -0.00031590452999807894, -4.2318697524024174e-05, -1.2397755199344829e-05, -9.5367431640625e-06, -0.000118255615234375, -7.43865966796875e-05, -1.6093139493023045e-05, -2.562999725341797e-05, -1.1920928244535389e-07, -3.933904736186378e-06, -0.00583803653717041, -2.6702880859375e-05, -0.009530782699584961, -1.33514404296875e-05, -0.00010013579594669864, 0.0, -0.0005142568261362612, 0.0, -9.5367431640625e-06, -7.62939453125e-06, -5.7220458984375e-06, -8.702273589733522e-06, -2.372236667724792e-05, -0.20124244689941406, -0.0001583099365234375, -0.031200408935546875, -0.001659393310546875, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5669116377830505, -0.000647013250272721, -0.11431121826171875, -0.0017299652099609375, -0.031317710876464844, -9.5367431640625e-06, -0.023932456970214844, -3.814697265625e-06, -0.13448451459407806, -4.38690185546875e-05, -0.000988006591796875, -0.10222244262695312, -5.7220458984375e-06, -0.41037654876708984, -0.003753933822736144, 0.0, -0.19997787475585938, -0.0023221969604492188, -0.0007381439208984375, -0.001617431640625, 0.0, -0.0014344453811645508, -2.288818359375e-05, -8.20159912109375e-05, -0.6489543914794922, 0.0, -0.3577355444431305, -2.3841855067985307e-07, -0.00048065185546875, -0.008517265319824219, -0.000186920166015625, -0.0007587671279907227, 0.0, -1.71661376953125e-05, -0.0025882720947265625, -7.62939453125e-06, -0.001495957374572754, 0.0, -5.7220458984375e-05, -0.0029497146606445312, -3.814697265625e-06, -0.0029091835021972656, -1.9073486328125e-06], "inferred_code": "class Flare<UNK><UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.minions) - len(targets)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 53, 133, "targets", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.637149666096313, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "amount", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "hole1": "extend", "hole0": {"id": "game", "_type": "Name"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.4124764204025269, -6.794906312279636e-06, -0.18066978454589844, -0.005947113037109375, -7.62939453125e-05, -5.7220458984375e-06, -0.03964519500732422, -5.7220458984375e-06, -0.009912963025271893, 0.0, -0.0028229951858520508, 0.0, -2.288818359375e-05, -0.1297588348388672, -3.814697265625e-06, -0.3490447998046875, 0.0, -0.06827163696289062, -1.0818696022033691, 0.0, -0.0010073184967041016, -1.9073486328125e-06, -0.0047321319580078125, -0.00847625732421875, -0.00048065185546875, 0.0, -0.2911940813064575, 0.0, -0.44916367530822754, 0.0, -1.33514404296875e-05, -0.010921478271484375, 0.0, -0.0005512237548828125, -0.005757808219641447, 0.0, -0.0660562515258789, -0.2467660903930664, -0.0022306442260742188, -0.09359931945800781, 0.0, -0.00380706787109375, -0.003444671630859375, -3.0517578125e-05, -0.01224815845489502, -2.0265579223632812e-06], "inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        amount = copy.copy(player.minions.minions)\n        game.extend(player.minions)\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "amount", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "minions", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "game", "<EOS>", "extend", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.732419386209557, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "copy", "_type": "Name"}}}, "targets": [{"id": "amount", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "hole1": "extend", "hole0": {"id": "game", "_type": "Name"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -1.056291103363037, -0.004071225877851248, -2.837150896084495e-05, -5.364416665543104e-06, -9.5367431640625e-06, -0.00023651123046875, -0.000118255615234375, -2.753696753643453e-05, -2.1457672119140625e-05, -2.3841855067985307e-07, -3.3378591979271732e-06, -0.0021746158599853516, -1.9073486328125e-06, -0.006608009338378906, -5.7220458984375e-06, -0.000141143798828125, 0.0, -0.0003824701998382807, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.2254373410251e-06, -2.062299427052494e-05, -0.21720409393310547, -0.0001468658447265625, -0.01830577850341797, -0.0016918182373046875, -4.9591064453125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3716754913330078, -6.794906312279636e-06, -0.1810140609741211, -0.005782127380371094, -8.0108642578125e-05, -5.7220458984375e-06, -0.03925514221191406, -7.62939453125e-06, -0.009204025380313396, 0.0, -0.002434849739074707, 0.0, -2.288818359375e-05, -0.12458038330078125, -3.814697265625e-06, -0.34802818298339844, 0.0, -0.07023239135742188, -1.0637304782867432, 0.0, -0.0009968280792236328, -1.9073486328125e-06, -0.0046672821044921875, -0.008405685424804688, -0.00048828125, 0.0, -0.29411613941192627, 0.0, -0.4493906497955322, 0.0, -1.33514404296875e-05, -0.0109100341796875, 0.0, -0.00054931640625, -0.005725502502173185, 0.0, -0.06561088562011719, -0.25087738037109375, -0.0022325515747070312, -0.0937957763671875, 0.0, -0.0038347244262695312, -0.0034770965576171875, -3.0517578125e-05, -0.012249112129211426, -2.0265579223632812e-06], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        amount = copy.copy(player.minions.minions)\n        game.extend(player.minions)\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "amount", "<EOS>", 20, 111, 17, 104, 25, 133, "copy", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 42, "minions", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "game", "<EOS>", "extend", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -6.539954329567955, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"id": "<UNK>", "_type": "Name"}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5904130339622498, -0.0006252095336094499, -0.11522579193115234, -0.0017528533935546875, -0.03144264221191406, -9.5367431640625e-06, -0.022777557373046875, -3.814697265625e-06, -0.13092289865016937, -4.1961669921875e-05, -0.0009918212890625, -0.10266780853271484, -7.62939453125e-06, -1.115473747253418, 0.0, -0.6171836853027344, -1.33514404296875e-05, -0.0032826662063598633, 0.0, -0.0011879205703735352, -2.3841855067985307e-07, -0.022982843220233917, -1.33514404296875e-05, -0.05336475372314453, -0.0021066665649414062, -7.62939453125e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.0030492544174194336, -2.09808349609375e-05, -0.0001659393310546875, -1.4873542785644531, -1.9073486328125e-06, -0.6703954339027405, -0.000224567178520374, -0.3968048095703125, -0.00101470947265625, -0.0006809234619140625, -0.0006812808569520712, 0.0, -3.24249267578125e-05, -0.000873565673828125, -7.62939453125e-06, -0.0012712478637695312, 0.0, -4.57763671875e-05, -0.0026416778564453125, -3.814697265625e-06, -0.005896210670471191, -3.814697265625e-06], "inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(game.other_player.minions) - len(<UNK>)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 53, 133, "<UNK>", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -7.513502679451413, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Template25", "hole0": "Stealth"}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5904130339622498, -0.0006252095336094499, -0.11522579193115234, -0.0017528533935546875, -0.03144264221191406, -9.5367431640625e-06, -0.022777557373046875, -3.814697265625e-06, -0.13092289865016937, -4.1961669921875e-05, -0.0009918212890625, -0.10266780853271484, -7.62939453125e-06, -1.115473747253418, 0.0, -0.6171836853027344, -1.33514404296875e-05, -0.0032826662063598633, 0.0, -0.0011879205703735352, -2.3841855067985307e-07, -0.022982843220233917, -1.33514404296875e-05, -0.05336475372314453, -0.0021066665649414062, -7.62939453125e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.0030492544174194336, -2.09808349609375e-05, -0.0001659393310546875, -0.25667762756347656, -0.0001068115234375, -0.032187461853027344, -0.12299470603466034, 0.0, -2.055276870727539, -9.34600830078125e-05, -7.05718994140625e-05, -0.0003185272216796875, 0.0, -0.8314132690429688, -1.3708998267247807e-05, -0.11075210571289062, -1.33514404296875e-05, -0.05868138372898102, -0.04620901122689247, -0.0046062469482421875, -0.00579833984375, -0.009792327880859375, -0.00018692012235987931, -1.9073486328125e-06, -0.0031147003173828125, -0.0011577606201171875, -7.62939453125e-06, -0.002003908157348633, -3.814697265625e-06], "inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(game.other_player.minions) - len(player.minions)\n        <UNK> = Stealth()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 34, 171, "Stealth", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -8.133075396563065, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Flare<UNK>", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "HUNTER", "hole1": 2, "hole0": "Flare"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"right": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"id": "len", "_type": "Name"}}, "_type": "BinOp", "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "op": {"_type": "Sub"}}, "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "hole1": "extend", "hole0": {"id": "game", "_type": "Name"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.0012149810791015625, -0.00018094333063345402, -0.43155622482299805, -0.4720824658870697, -0.0005751842400059104, -2.1815138097736053e-05, -9.179109838441946e-06, -7.62939453125e-06, -0.000125885009765625, -8.392333984375e-05, -1.9907771275029518e-05, -2.1696090698242188e-05, -1.1920928244535389e-07, -5.7220440794480965e-06, -0.003571033477783203, -5.7220458984375e-06, -0.007356047630310059, -7.62939453125e-06, -0.00013017654418945312, 0.0, -0.0004313262179493904, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.34464663057588e-06, -2.1934269170742482e-05, -0.21250629425048828, -0.0001506805419921875, -0.024343490600585938, -0.0016002655029296875, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.5904130339622498, -0.0006252095336094499, -0.11522579193115234, -0.0017528533935546875, -0.03144264221191406, -9.5367431640625e-06, -0.022777557373046875, -3.814697265625e-06, -0.13092289865016937, -4.1961669921875e-05, -0.0009918212890625, -0.10266780853271484, -7.62939453125e-06, -0.39818286895751953, -0.0036493532825261354, 0.0, -0.20277881622314453, -0.0023365020751953125, -0.0008487701416015625, -0.0015735626220703125, 0.0, -0.0013943910598754883, -2.288818359375e-05, -8.392333984375e-05, -0.7405385971069336, -1.52587890625e-05, -0.9791154861450195, -1.9073486328125e-06, -0.05270957946777344, -0.8397291302680969, 0.0, -0.003214240074157715, -1.9073486328125e-06, -0.0056247711181640625, -0.036479949951171875, -0.0014743804931640625, 0.0, -1.1971089839935303, 0.0, -0.9756892919540405, 0.0, -9.5367431640625e-06, -0.053139686584472656, -1.9073486328125e-06, -0.0001277923583984375, -0.0068656206130981445, 0.0, -0.1233835220336914, -0.2965402603149414, -0.0017824172973632812, -0.045764923095703125, 0.0, -0.004549980163574219, -0.0018711090087890625, -1.33514404296875e-05, -0.0034418106079101562, -1.9073486328125e-06], "inferred_code": "class Flare<UNK>(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = len(player.minions) - len(player.minions.minions)\n        game.extend(player.minions)\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Flare", "<UNK>", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "<UNK>", "<EOS>", 18, 106, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 79, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 42, "minions", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "game", "<EOS>", "extend", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"score": -2.6955944138492143, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -0.1355101615190506, -3.576278118089249e-07, -0.7688140869140625, -1.52587890625e-05, -0.0001506805419921875, -0.07051301002502441, 0.0, -0.004116058349609375, -0.02146148681640625, -5.507469177246094e-05, -5.125998541188892e-06, -6.103515625e-05, -0.004288673400878906, -0.038062453269958496, 0.0, -0.0047740936279296875, -7.82012939453125e-05, -0.0006058200960978866, -2.2649765014648438e-06, -1.9073486328125e-06, -0.00482177734375, -5.7220458984375e-06, -0.057207830250263214, -0.43694305419921875, -4.6133995056152344e-05, -0.00011444091796875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -9.655952453613281e-06, 0.0, -9.918212890625e-05, -0.0071277618408203125, -3.0517578125e-05, -0.30981484055519104, -0.07500387728214264, -0.0001549603621242568, -0.0007991790771484375, -1.33514404296875e-05, -0.08358408510684967, -7.271730282809585e-05, 0.0, -1.9073486328125e-06, -0.0014171600341796875], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True, effects=[Effect(MinionDied(),\n            ActionTag(IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 213, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -2.7763016968713004, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -0.1355101615190506, -3.576278118089249e-07, -0.6668319702148438, -0.0008144378662109375, -0.0009593963623046875, -0.08389294147491455, 0.0, -0.0011997222900390625, -6.29425048828125e-05, -0.0006258432404138148, -1.1920928244535389e-07, -1.1444091796875e-05, -0.0021457672119140625, -5.7220458984375e-06, -0.07790590822696686, -0.666786789894104, -6.902217864990234e-05, -0.0001583099365234375, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -7.748603820800781e-06, 0.0, -9.5367431640625e-05, -0.006671905517578125, -3.24249267578125e-05, -0.3032403290271759, -0.07529113441705704, -0.0001687864278210327, -0.000705718994140625, -1.33514404296875e-05, -0.08186306804418564, -7.581671525258571e-05, 0.0, -1.9073486328125e-06, -0.001338958740234375], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionDied(), ActionTag(\n            IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 212, 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -2.908366740044798, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -0.1355101615190506, -3.576278118089249e-07, -0.6668319702148438, -0.0008144378662109375, -0.0009593963623046875, -0.08389294147491455, 0.0, -0.0011997222900390625, -6.29425048828125e-05, -0.0006258432404138148, -1.1920928244535389e-07, -1.1444091796875e-05, -0.0021457672119140625, -5.7220458984375e-06, -0.07790590822696686, -0.8465286493301392, -1.430511474609375e-05, -4.76837158203125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, -7.748603820800781e-06, 0.0, -7.05718994140625e-05, -0.007122039794921875, -3.814697265625e-05, -0.2641752362251282, -0.07205671072006226, -0.0002070454938802868, -0.000518798828125, -1.33514404296875e-05, -0.07643880695104599, -8.01082351244986e-05, 0.0, -1.9073486328125e-06, -0.001251220703125], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 212, 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Summoned", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -3.375793220994403, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -0.1355101615190506, -3.576278118089249e-07, -0.7688140869140625, -1.52587890625e-05, -0.0001506805419921875, -0.07051301002502441, 0.0, -0.004116058349609375, -0.02146148681640625, -5.507469177246094e-05, -5.125998541188892e-06, -6.103515625e-05, -0.004288673400878906, -0.038062453269958496, 0.0, -0.0047740936279296875, -7.82012939453125e-05, -0.0006058200960978866, -2.2649765014648438e-06, -1.9073486328125e-06, -0.00482177734375, -5.7220458984375e-06, -0.057207830250263214, -1.164297103881836, -6.556510470545618e-06, -4.1961669921875e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.24249267578125e-05, -7.748603820800781e-06, 0.0, -7.43865966796875e-05, -0.00823974609375, -3.62396240234375e-05, -0.27079537510871887, -0.07108429074287415, -0.00017832154117058963, -0.0005950927734375, -1.1444091796875e-05, -0.0786304697394371, -7.86777600296773e-05, 0.0, -1.9073486328125e-06, -0.0013427734375], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True, effects=[Effect(MinionSummoned(),\n            ActionTag(IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 213, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Summoned", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -3.5617932592606323, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -1.458589792251587, -2.6702880859375e-05, -0.0002480745315551758, 0.0, -0.007320404052734375, 0.0, -6.389449117705226e-05, 0.0, -9.5367431640625e-06, -0.0003719329833984375, -0.0065975189208984375, -0.003122385125607252, -1.3232143828645349e-05, -2.6702880859375e-05, -4.172316494077677e-06, -0.135039284825325, -3.576278118089249e-07, -0.7906856536865234, -1.71661376953125e-05, -0.0001583099365234375, -0.06848835945129395, 0.0, -0.0044708251953125, -0.022586822509765625, -5.507469177246094e-05, -5.125998541188892e-06, -5.91278076171875e-05, -0.0042781829833984375, -0.0389178991317749, 0.0, -0.0048236846923828125, -7.82012939453125e-05, -0.0006099923048168421, -2.2649765014648438e-06, -1.9073486328125e-06, -0.0047607421875, -5.7220458984375e-06, -0.057647015899419785, -0.44149887561798096, -4.6133995056152344e-05, -0.00011444091796875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -9.655952453613281e-06, 0.0, -9.918212890625e-05, -0.0071315765380859375, -3.0517578125e-05, -0.31037452816963196, -0.07494284957647324, -0.00015507955686189234, -0.0007991790771484375, -1.33514404296875e-05, -0.08352698385715485, -7.462465146090835e-05, 0.0, -1.9073486328125e-06, -0.001415252685546875], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True, effects=[Effect(MinionDied(),\n            ActionTag(IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 213, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -3.626883972905702, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -1.458589792251587, -2.6702880859375e-05, -0.0002480745315551758, 0.0, -0.007320404052734375, 0.0, -6.389449117705226e-05, 0.0, -9.5367431640625e-06, -0.0003719329833984375, -0.0065975189208984375, -0.003122385125607252, -1.3232143828645349e-05, -2.6702880859375e-05, -4.172316494077677e-06, -0.135039284825325, -3.576278118089249e-07, -0.6461448669433594, -0.000904083251953125, -0.0009326934814453125, -0.10104584693908691, 0.0, -0.0012359619140625, -6.103515625e-05, -0.0006229823338799179, -1.1920928244535389e-07, -1.1444091796875e-05, -0.00214385986328125, -5.7220458984375e-06, -0.07746638357639313, -0.6820149421691895, -6.902217864990234e-05, -0.0001544952392578125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -7.748603820800781e-06, 0.0, -9.5367431640625e-05, -0.0067043304443359375, -3.24249267578125e-05, -0.303756982088089, -0.07526681572198868, -0.00016854805289767683, -0.0007076263427734375, -1.33514404296875e-05, -0.08198787271976471, -7.581671525258571e-05, 0.0, -1.9073486328125e-06, -0.0013408660888671875], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionDied(), ActionTag(\n            IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 212, 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -3.726196986510544, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -1.458589792251587, -2.6702880859375e-05, -0.0002480745315551758, 0.0, -0.007320404052734375, 0.0, -6.389449117705226e-05, 0.0, -9.5367431640625e-06, -0.0003719329833984375, -0.0065975189208984375, -0.003122385125607252, -1.3232143828645349e-05, -2.6702880859375e-05, -4.172316494077677e-06, -0.135039284825325, -3.576278118089249e-07, -0.6461448669433594, -0.000904083251953125, -0.0009326934814453125, -0.10104584693908691, 0.0, -0.0012359619140625, -6.103515625e-05, -0.0006229823338799179, -1.1920928244535389e-07, -1.1444091796875e-05, -0.00214385986328125, -5.7220458984375e-06, -0.07746638357639313, -0.8289704322814941, -1.430511474609375e-05, -4.57763671875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, -7.748603820800781e-06, 0.0, -7.05718994140625e-05, -0.0071353912353515625, -3.814697265625e-05, -0.26479703187942505, -0.0720171332359314, -0.0002066879387712106, -0.000522613525390625, -1.33514404296875e-05, -0.07652344554662704, -8.01082351244986e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 212, 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Summoned", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -4.222288334937943, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -2.1188127994537354, -0.0001010894775390625, -9.34600830078125e-05, 0.0, -0.0047435760498046875, 0.0, -5.543108272831887e-05, 0.0, -1.1444091796875e-05, -0.000164031982421875, -0.0069561004638671875, -0.002671055030077696, -1.3232143828645349e-05, -2.6702880859375e-05, -3.4570634852570947e-06, -0.14259584248065948, -3.576278118089249e-07, -0.5982465744018555, -0.0008602142333984375, -0.0008907318115234375, -0.0777970552444458, 0.0, -0.0013141632080078125, -6.866455078125e-05, -0.0005869816523045301, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002227783203125, -5.7220458984375e-06, -0.07853865623474121, -0.6832767724990845, -7.092952728271484e-05, -0.0001544952392578125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -7.748603820800781e-06, 0.0, -9.5367431640625e-05, -0.0067806243896484375, -3.24249267578125e-05, -0.3035074770450592, -0.07513746619224548, -0.0001648531761020422, -0.00070953369140625, -1.33514404296875e-05, -0.08164907991886139, -7.569750596303493e-05, 0.0, -1.9073486328125e-06, -0.0013370513916015625], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionDied(), ActionTag(\n            IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 212, 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -4.228798116290584, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -1.458589792251587, -2.6702880859375e-05, -0.0002480745315551758, 0.0, -0.007320404052734375, 0.0, -6.389449117705226e-05, 0.0, -9.5367431640625e-06, -0.0003719329833984375, -0.0065975189208984375, -0.003122385125607252, -1.3232143828645349e-05, -2.6702880859375e-05, -4.172316494077677e-06, -0.135039284825325, -3.576278118089249e-07, -0.7906856536865234, -1.71661376953125e-05, -0.0001583099365234375, -0.06848835945129395, 0.0, -0.0044708251953125, -0.022586822509765625, -5.507469177246094e-05, -5.125998541188892e-06, -5.91278076171875e-05, -0.0042781829833984375, -0.0389178991317749, 0.0, -0.0048236846923828125, -7.82012939453125e-05, -0.0006099923048168421, -2.2649765014648438e-06, -1.9073486328125e-06, -0.0047607421875, -5.7220458984375e-06, -0.057647015899419785, -1.1555033922195435, -6.556510470545618e-06, -4.1961669921875e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -3.24249267578125e-05, -7.748603820800781e-06, 0.0, -7.43865966796875e-05, -0.008237838745117188, -3.62396240234375e-05, -0.2715286314487457, -0.07101660221815109, -0.00017867909627966583, -0.0005950927734375, -1.1444091796875e-05, -0.0785694345831871, -7.86777600296773e-05, 0.0, -1.9073486328125e-06, -0.0013408660888671875], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True, effects=[Effect(MinionSummoned(),\n            ActionTag(IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 213, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Summoned", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -4.271768003300387, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -2.1188127994537354, -0.0001010894775390625, -9.34600830078125e-05, 0.0, -0.0047435760498046875, 0.0, -5.543108272831887e-05, 0.0, -1.1444091796875e-05, -0.000164031982421875, -0.0069561004638671875, -0.002671055030077696, -1.3232143828645349e-05, -2.6702880859375e-05, -3.4570634852570947e-06, -0.14259584248065948, -3.576278118089249e-07, -0.8450593948364258, -1.52587890625e-05, -0.0001697540283203125, -0.06671273708343506, 0.0, -0.005352020263671875, -0.023883819580078125, -5.710124969482422e-05, -5.006789251638111e-06, -6.29425048828125e-05, -0.0043697357177734375, -0.03960549831390381, 0.0, -0.005069732666015625, -8.0108642578125e-05, -0.0006084425840526819, -2.2649765014648438e-06, -1.9073486328125e-06, -0.004657745361328125, -5.7220458984375e-06, -0.0572214275598526, -0.4316798448562622, -4.8041343688964844e-05, -0.00011444091796875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -9.655952453613281e-06, 0.0, -9.918212890625e-05, -0.0071125030517578125, -3.0517578125e-05, -0.31025782227516174, -0.07488466799259186, -0.00015400683332700282, -0.0007991790771484375, -1.33514404296875e-05, -0.08340884745121002, -7.271730282809585e-05, 0.0, -1.9073486328125e-06, -0.0014190673828125], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True, effects=[Effect(MinionDied(),\n            ActionTag(IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 213, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -4.31602850104467, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "WARRIOR", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -2.1188127994537354, -0.0001010894775390625, -9.34600830078125e-05, 0.0, -0.0047435760498046875, 0.0, -5.543108272831887e-05, 0.0, -1.1444091796875e-05, -0.000164031982421875, -0.0069561004638671875, -0.002671055030077696, -1.3232143828645349e-05, -2.6702880859375e-05, -3.4570634852570947e-06, -0.14259584248065948, -3.576278118089249e-07, -0.5982465744018555, -0.0008602142333984375, -0.0008907318115234375, -0.0777970552444458, 0.0, -0.0013141632080078125, -6.866455078125e-05, -0.0005869816523045301, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002227783203125, -5.7220458984375e-06, -0.07853865623474121, -0.8243356943130493, -1.430511474609375e-05, -4.76837158203125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, -7.748603820800781e-06, 0.0, -7.05718994140625e-05, -0.00713348388671875, -3.814697265625e-05, -0.2648058533668518, -0.07191598415374756, -0.0002010862372117117, -0.00052642822265625, -1.33514404296875e-05, -0.07630004733800888, -7.998902583494782e-05, 0.0, -1.9073486328125e-06, -0.0012493133544921875], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 212, 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Summoned", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -4.61711495113763, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -0.1355101615190506, -3.576278118089249e-07, -0.6668319702148438, -0.0008144378662109375, -0.0009593963623046875, -3.11940860748291, 0.0, -0.02201080322265625, -0.0016231536865234375, -0.00017023083637468517, -3.933904736186378e-06], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True)\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 212, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.698376787633855, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 7, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -2.2804603576660156, -3.6954811548639555e-06, -0.6176071166992188, -2.6702880859375e-05, -0.00028228759765625, -0.09895384311676025, 0.0, -0.0039768218994140625, -0.026315689086914062, -5.91278076171875e-05, -6.79492904964718e-06, -5.53131103515625e-05, -0.004276275634765625, -0.06283318996429443, 0.0, -0.0041522979736328125, -7.82012939453125e-05, -0.0006310921162366867, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0048999786376953125, -5.7220458984375e-06, -0.053803473711013794, -0.38343727588653564, -4.2319297790527344e-05, -0.0001354217529296875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -9.655952453613281e-06, 0.0, -0.0001010894775390625, -0.0068111419677734375, -3.0517578125e-05, -0.31786420941352844, -0.07485374808311462, -0.00015805932343937457, -0.0008106231689453125, -1.33514404296875e-05, -0.08436741679906845, -7.462465146090835e-05, 0.0, -1.9073486328125e-06, -0.0014247894287109375], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 7, stealth=True, effects=[Effect(MinionDied(),\n            ActionTag(IncreaseDurability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "7", "<EOS>", 213, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -4.707176147752072, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>Durability"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -0.1355101615190506, -3.576278118089249e-07, -0.7688140869140625, -1.52587890625e-05, -0.0001506805419921875, -0.07051301002502441, 0.0, -0.004116058349609375, -0.02146148681640625, -5.507469177246094e-05, -5.125998541188892e-06, -6.103515625e-05, -0.004288673400878906, -0.038062453269958496, 0.0, -0.0047740936279296875, -7.82012939453125e-05, -0.0006058200960978866, -2.2649765014648438e-06, -1.9073486328125e-06, -0.00482177734375, -5.7220458984375e-06, -0.057207830250263214, -0.43694305419921875, -4.6133995056152344e-05, -0.00011444091796875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -9.655952453613281e-06, 0.0, -9.918212890625e-05, -0.0071277618408203125, -3.0517578125e-05, -2.225729465484619, -0.055073872208595276, -0.002288374351337552, -0.003692626953125, -7.62939453125e-06, -0.19405122101306915, -3.08750823023729e-05, 0.0, -1.9073486328125e-06, -0.001567840576171875], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True, effects=[Effect(MinionDied(),\n            ActionTag(<UNK>Durability(), WeaponSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 213, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "<UNK>", "Durability", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 205, 71]}, {"score": -5.359196372405897, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_weapon", "hole0": "Gorehowl", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "HUNTER", "hole1": 7, "hole0": "Gorehowl"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "stealth"}, {"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseDurability"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "arg": "effects"}], "hole2": 1, "hole1": 7, "hole0": "Weapon"}], "hole1": "WeaponCard"}, "score_history": [0.0, -0.0016918182373046875, -0.004473014269024134, -0.00022004646598361433, -1.3351351299206726e-05, -4.9590656999498606e-05, -4.768370445162873e-07, 0.0, -0.025574684143066406, -0.000186920166015625, -0.00018274784088134766, -1.1920928244535389e-07, -5.131307989358902e-05, -3.576278118089249e-07, -0.6171963214874268, -0.0001010894775390625, -0.00013971328735351562, 0.0, -0.0093841552734375, 0.0, -3.921923052985221e-05, 0.0, -9.5367431640625e-06, -0.000213623046875, -0.0076656341552734375, -0.0025462042540311813, -1.3351351299206726e-05, -2.491474151611328e-05, -3.6954811548639555e-06, -0.1355101615190506, -3.576278118089249e-07, -0.7688140869140625, -1.52587890625e-05, -0.0001506805419921875, -0.07051301002502441, 0.0, -0.004116058349609375, -0.02146148681640625, -5.507469177246094e-05, -5.125998541188892e-06, -6.103515625e-05, -0.004288673400878906, -0.038062453269958496, 0.0, -0.0047740936279296875, -7.82012939453125e-05, -0.0006058200960978866, -2.2649765014648438e-06, -1.9073486328125e-06, -0.00482177734375, -5.7220458984375e-06, -0.057207830250263214, -0.43694305419921875, -4.6133995056152344e-05, -0.00011444091796875, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -9.655952453613281e-06, 0.0, -9.918212890625e-05, -0.0071277618408203125, -3.0517578125e-05, -0.30981484055519104, -0.07500387728214264, -0.0001549603621242568, -0.0007991790771484375, -1.33514404296875e-05, -2.745812177658081, -0.002093174494802952, 0.0, -3.814697265625e-06, -0.0007686614990234375], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True, effects=[Effect(MinionDied(),\n            ActionTag(IncreaseDurability(), HeroSelector()))])\n", "choice_history": [77, 145, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 217, 98, 185, "Gorehowl", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 217, 96, 162, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 213, 76, 195, "stealth", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Minion", "Died", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 63, 171, "Increase", "Durability", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"score": -1.675776984375915, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -0.24448081851005554, -1.1682510375976562e-05, -0.002399444580078125, -3.814697265625e-06, -4.9591064453125e-05, -3.0517578125e-05, -0.0070667266845703125, 0.0, -0.0018601416377350688, 0.0, -0.029867172241210938, -0.0002536773681640625, -0.2303018569946289, -0.0001049041748046875, -0.21644210815429688, 0.0, -0.5543030500411987, -1.9073486328125e-06, -0.0033435821533203125, -0.00045013427734375, -0.021610260009765625, -0.00022149085998535156, -1.52587890625e-05, -0.004329681396484375, -1.1444091796875e-05, -6.115436553955078e-05, -9.5367431640625e-06, -0.000637054443359375, 0.0, -0.00702512264251709, 0.0, -8.20159912109375e-05, -0.025115966796875, -6.29425048828125e-05, -2.3841830625315197e-06, -5.960462772236497e-07, -0.0007890629931353033, -2.3841855067985307e-07, -0.002564549446105957, -3.0517578125e-05, -8.96453857421875e-05, -1.71661376953125e-05, -0.00021266937255859375, -1.9073486328125e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER,\n            CHARACTER_CLASS.BEAST, CARD_RARITY.FREE, True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "1", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "BEAST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -1.7561174286879506, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -1.4924030303955078, 0.0, -0.001979827880859375, -3.814697265625e-06, 0.0, -2.264974000354414e-06, -0.0005540504935197532, -0.04665565490722656, -0.027475357055664062, -0.14491844177246094, -3.814697265625e-06, -0.0005588531494140625, -0.008509159088134766, -8.225440979003906e-06, -0.0142059326171875, -1.33514404296875e-05, -2.205371856689453e-05, -1.33514404296875e-05, -7.2479248046875e-05, -7.43865966796875e-05, -9.5367431640625e-06, -0.00021207332611083984, 0.0, -2.205370765295811e-05, 0.0, -0.010086285881698132, 0.0, -0.0006008148193359375, -0.0029020309448242188, -8.20159912109375e-05, -5.960462772236497e-07, -2.145764938177308e-06, -0.0002594295656308532, -1.1920928244535389e-07, -0.0034987926483154297, -1.33514404296875e-05, -9.34600830078125e-05, -1.33514404296875e-05, -0.00024330615997314453, -2.09808349609375e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Hound", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -2.252500553274075, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -0.24448081851005554, -1.1682510375976562e-05, -0.002399444580078125, -3.814697265625e-06, -4.9591064453125e-05, -3.0517578125e-05, -0.0070667266845703125, 0.0, -0.0018601416377350688, 0.0, -0.029867172241210938, -0.0002536773681640625, -0.2303018569946289, -0.0001049041748046875, -0.21644210815429688, 0.0, -0.9415444135665894, -1.9073486328125e-06, -0.03352165222167969, -0.0001964569091796875, -0.1780405044555664, -0.0005397796630859375, -5.7220458984375e-06, -0.0048465728759765625, -1.33514404296875e-05, -4.1961669921875e-05, -1.71661376953125e-05, -0.0006237030029296875, 0.0, -0.006123542785644531, 0.0, -8.7738037109375e-05, -0.028324127197265625, -6.29425048828125e-05, -2.3841830625315197e-06, -5.960462772236497e-07, -0.000794063089415431, -2.3841855067985307e-07, -0.0025740861892700195, -2.86102294921875e-05, -8.96453857421875e-05, -1.71661376953125e-05, -0.00021266937255859375, -1.9073486328125e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER,\n            CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "1", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -2.579135338201894, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -0.24448081851005554, -1.1682510375976562e-05, -0.002399444580078125, -3.814697265625e-06, -4.9591064453125e-05, -3.0517578125e-05, -0.0070667266845703125, 0.0, -0.0018601416377350688, 0.0, -0.029867172241210938, -0.0002536773681640625, -0.2303018569946289, -0.0001049041748046875, -1.643758773803711, 0.0, -0.004942774772644043, -1.9073486328125e-06, -0.03809165954589844, -0.0008487701416015625, -0.016414642333984375, -0.00027871131896972656, -1.1444091796875e-05, -0.0039730072021484375, -1.33514404296875e-05, -7.069110870361328e-05, -9.5367431640625e-06, -0.00072479248046875, 0.0, -0.0053102970123291016, 0.0, -8.392333984375e-05, -0.02248668670654297, -6.29425048828125e-05, -2.264974000354414e-06, -5.960462772236497e-07, -0.0007787053473293781, -2.3841855067985307e-07, -0.002572178840637207, -3.0517578125e-05, -8.96453857421875e-05, -1.71661376953125e-05, -0.00021266937255859375, -1.9073486328125e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, MINION_TYPE.\n            BEAST, CARD_RARITY.FREE, True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "1", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -2.6719908338647542, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -0.24448081851005554, -1.1682510375976562e-05, -0.002399444580078125, -3.814697265625e-06, -4.9591064453125e-05, -3.0517578125e-05, -0.0070667266845703125, 0.0, -0.0018601416377350688, 0.0, -0.029867172241210938, -0.0002536773681640625, -2.0119333267211914, -0.0034619569778442383, -3.814697265625e-06, -0.004070281982421875, -1.71661376953125e-05, -3.075599670410156e-05, -2.09808349609375e-05, -3.62396240234375e-05, -2.6702880859375e-05, -0.0009613037109375, -9.5367431640625e-06, -0.0006198883056640625, 0.0, -0.0021210908889770508, -3.814697265625e-06, -0.000148773193359375, 0.0, -0.0043555498123168945, 0.0, -5.340576171875e-05, -0.03327369689941406, -5.91278076171875e-05, -2.145764938177308e-06, -5.960462772236497e-07, -0.0004624852736014873, -3.576278118089249e-07, -0.0019910335540771484, -6.866455078125e-05, -9.34600830078125e-05, -1.9073486328125e-05, -0.00019538402557373047, -2.86102294921875e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            FREE, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "1", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.1340891693903643, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 0}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -1.5401577949523926, -9.536738616588991e-07, -0.00847625732421875, -1.9073486328125e-06, -1.52587890625e-05, -1.33514404296875e-05, -0.004138946533203125, 0.0, -0.006711363792419434, 0.0, -0.042926788330078125, -0.0001850128173828125, -0.3717613220214844, -8.96453857421875e-05, -0.16658592224121094, 0.0, -0.6074072122573853, -1.9073486328125e-06, -0.0030841827392578125, -0.0004367828369140625, -0.021787643432617188, -0.00021755695343017578, -1.33514404296875e-05, -0.003879547119140625, -1.1444091796875e-05, -5.733966827392578e-05, -9.5367431640625e-06, -0.0006275177001953125, 0.0, -0.007539868354797363, 0.0, -8.0108642578125e-05, -0.022177696228027344, -6.103515625e-05, -2.622600959512056e-06, -4.768370445162873e-07, -0.0007950247381813824, -2.3841855067985307e-07, -0.002564549446105957, -3.0517578125e-05, -9.1552734375e-05, -1.71661376953125e-05, -0.00021266937255859375, -1.9073486328125e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.HUNTER,\n            CHARACTER_CLASS.BEAST, CARD_RARITY.FREE, True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "0", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "BEAST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.4833923547780614, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 0}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -1.5401577949523926, -9.536738616588991e-07, -0.00847625732421875, -1.9073486328125e-06, -1.52587890625e-05, -1.33514404296875e-05, -0.004138946533203125, 0.0, -0.006711363792419434, 0.0, -0.042926788330078125, -0.0001850128173828125, -1.505864143371582, -0.006889462471008301, -3.814697265625e-06, -0.0031375885009765625, -1.71661376953125e-05, -3.075599670410156e-05, -2.6702880859375e-05, -3.24249267578125e-05, -2.6702880859375e-05, -0.00093841552734375, -9.5367431640625e-06, -0.00061798095703125, 0.0, -0.0022355318069458008, -1.9073486328125e-06, -0.000152587890625, 0.0, -0.004368782043457031, 0.0, -5.340576171875e-05, -0.03151512145996094, -5.91278076171875e-05, -2.264974000354414e-06, -4.768370445162873e-07, -0.0004709537315648049, -3.576278118089249e-07, -0.002004384994506836, -7.05718994140625e-05, -9.34600830078125e-05, -1.9073486328125e-05, -0.00019538402557373047, -2.86102294921875e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            FREE, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "0", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.592498982720997, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Template34"}, {"_type": "Template27"}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -1.4924030303955078, 0.0, -0.001979827880859375, -3.814697265625e-06, 0.0, -2.264974000354414e-06, -0.0005540504935197532, -0.04665565490722656, -0.027475357055664062, -2.0045204162597656, -3.4332275390625e-05, -7.62939453125e-06, -3.290174572612159e-05, 0.0, -7.2479248046875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -0.00026285648345947266, 0.0, -2.7894950108020566e-05, 0.0, -0.010212655179202557, 0.0, -0.0005092620849609375, -0.0030975341796875, -7.82012939453125e-05, -5.960462772236497e-07, -2.622600959512056e-06, -0.0002340299979550764, -3.576278118089249e-07, -0.0033026933670043945, -2.288818359375e-05, -0.000102996826171875, -1.52587890625e-05, -0.00022995471954345703, -2.86102294921875e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Hound", "<EOS>", 69, 65, 64, 54, 134, "False", "<EOS>", 212, 75, 164, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.6082196762504566, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 0}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -1.5401577949523926, -9.536738616588991e-07, -0.00847625732421875, -1.9073486328125e-06, -1.52587890625e-05, -1.33514404296875e-05, -0.004138946533203125, 0.0, -0.006711363792419434, 0.0, -0.042926788330078125, -0.0001850128173828125, -0.3717613220214844, -8.96453857421875e-05, -0.16658592224121094, 0.0, -0.8778797388076782, 0.0, -0.03562355041503906, -0.0001544952392578125, -0.19261455535888672, -0.0006200075149536133, -5.7220458984375e-06, -0.004238128662109375, -1.33514404296875e-05, -4.1961669921875e-05, -1.9073486328125e-05, -0.000629425048828125, 0.0, -0.006113767623901367, 0.0, -8.0108642578125e-05, -0.02341747283935547, -6.103515625e-05, -2.622600959512056e-06, -4.768370445162873e-07, -0.0008001463138498366, -2.3841855067985307e-07, -0.002572178840637207, -3.0517578125e-05, -9.1552734375e-05, -1.71661376953125e-05, -0.00021076202392578125, -1.9073486328125e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.HUNTER,\n            CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "0", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.862599006454616, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Template34"}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -3.459321975708008, -0.0028591156005859375, -1.9073486328125e-06, -3.4332275390625e-05, -2.47955322265625e-05, -0.0010242462158203125, 0.0, -0.008299708366394043, 0.0, -0.03317451477050781, -0.00055694580078125, -0.024099349975585938, -0.0008240938186645508, -3.814697265625e-06, -0.00319671630859375, -1.33514404296875e-05, -4.57763671875e-05, -1.33514404296875e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.000614166259765625, -5.7220458984375e-06, -0.00022125244140625, 0.0, -0.00263214111328125, -1.9073486328125e-06, -0.00012969970703125, 0.0, -0.0036652088165283203, 0.0, -5.91278076171875e-05, -0.029104232788085938, -6.29425048828125e-05, -2.264974000354414e-06, -7.152555099310121e-07, -0.00047082878882065415, -3.576278118089249e-07, -0.001985311508178711, -7.62939453125e-05, -9.72747802734375e-05, -1.9073486328125e-05, -0.00019538402557373047, -2.86102294921875e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            FREE, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.15444174855611, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -3.513962745666504, -5.14984130859375e-05, 0.0, -2.9802317840221804e-06, -0.0002585315378382802, -0.044231414794921875, -0.0062160491943359375, -0.2657184600830078, 0.0, -0.0005512237548828125, -0.004861235618591309, -6.079673767089844e-06, -0.009784698486328125, -3.814697265625e-06, -1.609325408935547e-05, -1.9073486328125e-05, -0.001966714859008789, 0.0, -0.00898110680282116, 0.0, -0.0001373291015625, -0.03823661804199219, -5.7220458984375e-05, -3.576272320060525e-06, -1.1920922133867862e-06, -0.0005887431907467544, -5.960462772236497e-07, -0.001997828483581543, -4.57763671875e-05, -9.1552734375e-05, -1.9073486328125e-05, -0.0002243518829345703, -1.9073486328125e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 209, 56, 142, "Hound", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.168330879308485, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -0.24448081851005554, -1.1682510375976562e-05, -0.002399444580078125, -3.814697265625e-06, -4.9591064453125e-05, -3.0517578125e-05, -0.0070667266845703125, 0.0, -0.0018601416377350688, 0.0, -3.5338287353515625, -0.002384185791015625, -7.62939453125e-06, -3.135204315185547e-05, -7.62939453125e-06, -1.33514404296875e-05, -9.5367431640625e-06, -0.000823974609375, -9.5367431640625e-06, -0.00061798095703125, 0.0, -0.0006295442581176758, -1.9073486328125e-06, -5.7220458984375e-05, 0.0, -0.009744763374328613, 0.0, -4.1961669921875e-05, -0.03940582275390625, -5.91278076171875e-05, -2.0265558760002023e-06, -5.960462772236497e-07, -0.000477395486086607, -3.576278118089249e-07, -0.0019512176513671875, -7.82012939453125e-05, -9.918212890625e-05, -2.09808349609375e-05, -0.00020110607147216797, -2.47955322265625e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "1", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 64, 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.266283824756357, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 0}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -1.5401577949523926, -9.536738616588991e-07, -0.00847625732421875, -1.9073486328125e-06, -1.52587890625e-05, -1.33514404296875e-05, -0.004138946533203125, 0.0, -0.006711363792419434, 0.0, -0.042926788330078125, -0.0001850128173828125, -0.3717613220214844, -8.96453857421875e-05, -1.8834247589111328, 0.0, -0.006617188453674316, -1.9073486328125e-06, -0.03081512451171875, -0.000774383544921875, -0.015239715576171875, -0.00028824806213378906, -1.1444091796875e-05, -0.003559112548828125, -1.33514404296875e-05, -6.67572021484375e-05, -9.5367431640625e-06, -0.0007228851318359375, 0.0, -0.0055141448974609375, 0.0, -7.82012939453125e-05, -0.018980026245117188, -6.103515625e-05, -2.3841830625315197e-06, -4.768370445162873e-07, -0.0007831209222786129, -2.3841855067985307e-07, -0.0025740861892700195, -3.0517578125e-05, -8.96453857421875e-05, -1.71661376953125e-05, -0.00021266937255859375, -1.9073486328125e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 0, CHARACTER_CLASS.HUNTER, MINION_TYPE.\n            BEAST, CARD_RARITY.FREE, True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "0", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.622892623130973, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -0.24448081851005554, -1.1682510375976562e-05, -0.002399444580078125, -3.814697265625e-06, -4.9591064453125e-05, -3.0517578125e-05, -0.0070667266845703125, 0.0, -0.0018601416377350688, 0.0, -0.029867172241210938, -0.0002536773681640625, -0.2303018569946289, -0.0001049041748046875, -0.21644210815429688, 0.0, -0.9415444135665894, -1.9073486328125e-06, -0.03352165222167969, -0.0001964569091796875, -2.051767349243164, -9.1552734375e-05, -0.2296733856201172, 0.0, -0.0006123781204223633, -1.9073486328125e-06, -0.025379180908203125, -0.0003719329833984375, -0.12288665771484375, -0.0003548860549926758, -1.9073486328125e-05, -0.0002593994140625, 0.0, -0.15355420112609863, 0.0, -3.0517578125e-05, -0.0045146942138671875, -6.103515625e-05, -3.6954811548639555e-06, -2.3841855067985307e-07, -0.000672097725328058, -1.1920928244535389e-07, -0.0022516250610351562, -3.62396240234375e-05, -7.82012939453125e-05, -1.71661376953125e-05, -0.00018393993377685547, -3.62396240234375e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER,\n            CHARACTER_CLASS.HUNTER, MINION_TYPE.BEAST, CARD_RARITY.FREE)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "1", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 45, 104, 35, "FREE", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.883729483590486, "model_output": {"hole4": "p", "_type": "Template0", "hole3": "create_minion", "hole0": "Hound", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [0.0, -4.00543212890625e-05, -5.0424307119101286e-05, -0.00024223129730671644, -3.7997961044311523e-06, -5.9246951423119754e-05, -3.576278118089249e-07, 0.0, -0.0001735687255859375, -5.7220458984375e-06, -7.62939453125e-06, -0.25566864013671875, -0.0001354217529296875, -0.03282451629638672, -0.000110626220703125, -5.7220458984375e-06, -1.0848005331354216e-05, -0.00035172473872080445, -0.032207489013671875, 0.0, -0.24448081851005554, -1.1682510375976562e-05, -0.002399444580078125, -3.814697265625e-06, -4.9591064453125e-05, -3.0517578125e-05, -0.0070667266845703125, 0.0, -0.0018601416377350688, 0.0, -0.029867172241210938, -0.0002536773681640625, -0.2303018569946289, -0.0001049041748046875, -0.21644210815429688, 0.0, -3.6757428646087646, -1.9073486328125e-06, -0.0996246337890625, -0.0008068084716796875, -0.014650344848632812, -0.0002766847610473633, -9.5367431640625e-06, -0.0053615570068359375, -1.52587890625e-05, -3.814697265625e-05, -1.71661376953125e-05, -0.000698089599609375, 0.0, -0.005177974700927734, 0.0, -8.20159912109375e-05, -0.0225982666015625, -6.4849853515625e-05, -2.50339189733495e-06, -5.960462772236497e-07, -0.0007929967250674963, -2.3841855067985307e-07, -0.002629399299621582, -2.86102294921875e-05, -8.392333984375e-05, -1.71661376953125e-05, -0.00022029876708984375, -1.71661376953125e-05], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER,\n            CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, True)\n\n    def create_minion(self, p):\n        return Minion(1, 1, charge=True)\n", "choice_history": [77, 145, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 111, 30, 210, 56, 142, "Hound", "<EOS>", 55, 138, "1", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"score": -1.275265562887732, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.5838661193847656, -7.62939453125e-06, -3.814697265625e-06, -0.007171390578150749, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.6008157730102539, -0.023729324340820312, -7.2479248046875e-05, -6.4373016357421875e-06, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.001623510499484837, -5.340576171875e-05, -2.6702880859375e-05, -6.29425048828125e-05, -7.62939453125e-06, -0.003946661949157715, -0.005095243453979492, -1.9073486328125e-06, -3.266334533691406e-05, 0.0, -3.647804260253906e-05, 0.0, -2.86102294921875e-05, -8.0108642578125e-05, -5.14984130859375e-05, -3.6954643292119727e-06, -9.536738616588991e-07, -0.00043392181396484375, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 54, 135, "Null", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -1.3393152856418666, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.8534450531005859, -2.47955322265625e-05, -1.9073486328125e-06, -0.21173763275146484, -9.72747802734375e-05, 0.0, -0.12683582305908203, -4.38690185546875e-05, -1.52587890625e-05, -0.0002651214599609375, -1.1920928244535389e-07, -0.000377655029296875, -5.7220458984375e-06, -0.04544699192047119, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.009340286254882812, 0.0, -0.029516220092773438, -2.09808349609375e-05, -0.012457609176635742, -0.0007445812225341797, -4.0531158447265625e-06, -5.364416665543104e-06, -1.9073486328125e-06, -3.457069396972656e-05, 0.0, -3.62396240234375e-05, -5.91278076171875e-05, -8.96453857421875e-05, -3.0159240850480273e-05, -1.311301275563892e-06, -0.0006308555603027344, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -2.3363799738216002, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Has4"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.5838661193847656, -7.62939453125e-06, -3.814697265625e-06, -0.007171390578150749, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.7981500625610352, -0.22191715240478516, -7.82012939453125e-05, -0.5221697092056274, -0.04119513928890228, -1.0013547580456361e-05, -0.0088653564453125, -1.9073486328125e-06, -0.10409927368164062, -7.62939453125e-06, -3.24249267578125e-05, -3.814697265625e-06, 0.0, -3.4332275390625e-05, 0.0, -2.288818359375e-05, -4.9591064453125e-05, -0.0001201629638671875, -9.297787619289011e-05, -2.3841855067985307e-07, -0.0004020929045509547, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Has4(), EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Has", "4", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -2.9626625681079233, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.8534450531005859, -2.47955322265625e-05, -1.9073486328125e-06, -1.763490915298462, -6.496906280517578e-05, 0.0, -0.1652688980102539, -4.57763671875e-05, -3.4332275390625e-05, -0.0003604888916015625, -1.1920928244535389e-07, -0.00043487548828125, -3.814697265625e-06, -0.07575500011444092, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.009765625, 0.0, -0.03159046173095703, -1.9073486328125e-05, -0.012688398361206055, -0.0007444620132446289, -4.0531158447265625e-06, -5.364416665543104e-06, -1.9073486328125e-06, -3.266334533691406e-05, 0.0, -3.62396240234375e-05, -5.91278076171875e-05, -8.96453857421875e-05, -2.8728785764542408e-05, -1.311301275563892e-06, -0.0006155967712402344, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -3.4309557555223904, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.5838661193847656, -7.62939453125e-06, -3.814697265625e-06, -0.007171390578150749, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.7981500625610352, -1.8638172149658203, -0.00154876708984375, -2.4795530407573096e-05, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.12753081321716309, -1.33514404296875e-05, -1.71661376953125e-05, -5.7220458984375e-06, 0.0, -2.86102294921875e-05, 0.0, -3.24249267578125e-05, -0.0002269744873046875, -6.67572021484375e-05, -4.744391844724305e-05, -1.1920928244535389e-07, -0.0002727508544921875, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 54, 135, "Null", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -4.196395496979527, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "TargetAdjacent"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.5838661193847656, -7.62939453125e-06, -3.814697265625e-06, -0.007171390578150749, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.7981500625610352, -0.22191715240478516, -7.82012939453125e-05, -2.0617129802703857, -0.41782987117767334, -3.09939932776615e-05, -0.0026702880859375, 0.0, -0.054109930992126465, -5.7220458984375e-06, -1.52587890625e-05, -3.814697265625e-06, 0.0, -2.288818359375e-05, 0.0, -2.47955322265625e-05, -4.57763671875e-05, -0.00012969970703125, -0.00011836661724373698, -2.3841855067985307e-07, -0.0004024505033157766, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (TargetAdjacent(), EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Target", "Adjacent", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -4.327436438216409, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -4.162572860717773, -3.24249267578125e-05, -0.1321324110031128, -9.97781753540039e-05, 0.0, -2.6702880859375e-05, 0.0, -1.0967249181703664e-05, 0.0, -5.7220458984375e-05, -3.62396240234375e-05, -4.00543212890625e-05, -4.410718247527257e-06, -1.5497195136049413e-06, -0.00023436543415300548, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -4.431706418561809, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.8534450531005859, -2.47955322265625e-05, -1.9073486328125e-06, -0.21173763275146484, -9.72747802734375e-05, 0.0, -0.12683582305908203, -4.38690185546875e-05, -1.52587890625e-05, -0.0002651214599609375, -1.1920928244535389e-07, -0.000377655029296875, -5.7220458984375e-06, -3.120434284210205, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -0.010741233825683594, 0.0, -0.042189598083496094, -1.71661376953125e-05, -0.015677332878112793, -0.0009087324142456055, -4.0531158447265625e-06, -5.245207830739673e-06, -1.9073486328125e-06, -4.017353057861328e-05, 0.0, -3.62396240234375e-05, -8.96453857421875e-05, -9.72747802734375e-05, -3.993401332991198e-05, -1.0728830375228426e-06, -0.0005271434783935547, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (players=EnemyPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -4.552810860816287, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 7, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -4.116092205047607, -7.748596544843167e-06, -0.16497421264648438, -0.0009174346923828125, -9.5367431640625e-06, -7.62939453125e-06, -0.0480121374130249, -1.537799835205078e-05, 0.0, -0.09213924407958984, -7.62939453125e-05, -1.9073486328125e-05, -0.000560760498046875, -1.1920928244535389e-07, -0.000293731689453125, -3.814697265625e-06, -0.05232799053192139, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.010905265808105469, 0.0, -0.03913593292236328, -1.9073486328125e-05, -0.013085126876831055, -0.0007731914520263672, -4.0531158447265625e-06, -5.602834789897315e-06, -1.9073486328125e-06, -3.075599670410156e-05, 0.0, -3.62396240234375e-05, -5.340576171875e-05, -7.82012939453125e-05, -2.2291711502475664e-05, -1.311301275563892e-06, -0.0006191730499267578, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(7),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "7", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -4.807968467801224, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Has4"}, {"_type": "Template25", "hole0": "BothPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.5838661193847656, -7.62939453125e-06, -3.814697265625e-06, -0.007171390578150749, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.7981500625610352, -0.22191715240478516, -7.82012939453125e-05, -0.5221697092056274, -0.04119513928890228, -1.0013547580456361e-05, -0.0088653564453125, -1.9073486328125e-06, -2.5755558013916016, -0.0001125335693359375, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -3.0517578125e-05, -4.00543212890625e-05, -0.00012969970703125, -7.485970854759216e-05, -3.576278118089249e-07, -0.0004547833523247391, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Has4(), BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Has", "4", "<EOS>", 63, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -5.1085840011197945, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.8534450531005859, -2.47955322265625e-05, -1.9073486328125e-06, -0.21173763275146484, -9.72747802734375e-05, 0.0, -2.177556037902832, -0.0056285858154296875, -0.000240325927734375, -5.91278076171875e-05, -2.3841855067985307e-07, -0.0002899169921875, -1.33514404296875e-05, -0.0351945161819458, -1.9073486328125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.06894397735595703, 0.0, -0.02772045135498047, -2.47955322265625e-05, -0.015452265739440918, -0.000989079475402832, -4.0531158447265625e-06, -9.34600830078125e-05, -1.9073486328125e-06, -0.2944812774658203, -5.960462772236497e-07, -0.039938926696777344, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0009307861328125, -0.0001392364501953125, -4.76837158203125e-05, -0.00687408447265625, -0.0002269744873046875, -0.0033618176821619272, -6.735110946465284e-05, -0.15915080904960632, -7.152555099310121e-07, -0.0023288726806640625, -0.569676399230957, -9.5367431640625e-06, 0.0, -0.3572273254394531, -6.103515625e-05, 0.0, -0.12508678436279297, -3.814697265625e-05, -2.09808349609375e-05, -0.0003070831298828125, 0.0, -0.0003662109375, -5.7220458984375e-06, -0.050484299659729004, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.008223533630371094, 0.0, -0.02855396270751953, -1.9073486328125e-05, -0.013643860816955566, -0.0007673501968383789, -4.0531158447265625e-06, -5.125998541188892e-06, -1.9073486328125e-06, -4.208087921142578e-05, 0.0, -3.4332275390625e-05, -5.7220458984375e-05, -8.96453857421875e-05, -3.480817031231709e-05, -1.1920922133867862e-06, -0.0006787776947021484, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (players=BothPlayer(), picker=UserPicker(), battlecry=Battlecry\n            (Damage(4), MinionSelector(players=BothPlayer(), picker=\n            UserPicker())))))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -5.228698303380803, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "MinionIsTarget"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.5838661193847656, -7.62939453125e-06, -3.814697265625e-06, -0.007171390578150749, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.7981500625610352, -0.22191715240478516, -7.82012939453125e-05, -2.8707525730133057, -0.21493025124073029, -0.46275952458381653, -0.00039860745891928673, -0.0041828155517578125, -1.52587890625e-05, -0.015590186230838299, -5.7220458984375e-06, -2.86102294921875e-05, -5.7220458984375e-06, 0.0, -3.0517578125e-05, 0.0, -2.6702880859375e-05, -4.1961669921875e-05, -0.0001468658447265625, -0.00013457657769322395, -2.3841855067985307e-07, -0.0003757476224564016, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (MinionIsTarget(), EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Minion", "Is", "Target", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -5.274197769514835, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.5838661193847656, -7.62939453125e-06, -3.814697265625e-06, -0.007171390578150749, -4.9948692321777344e-05, -1.1920928244535389e-07, -0.7981500625610352, -0.22191715240478516, -7.82012939453125e-05, -3.244903802871704, -0.0018573976121842861, -0.010516166687011719, -3.814697265625e-06, -0.3569466769695282, -5.733966827392578e-05, 0.0, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, 0.0, -3.4332275390625e-05, -4.1961669921875e-05, -6.4849853515625e-05, -7.807769725332037e-05, -3.576278118089249e-07, -0.0004053114971611649, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Kill(), SelfSelector())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -5.278154483501446, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.8534450531005859, -2.47955322265625e-05, -1.9073486328125e-06, -0.21173763275146484, -9.72747802734375e-05, 0.0, -0.12683582305908203, -4.38690185546875e-05, -1.52587890625e-05, -0.0002651214599609375, -1.1920928244535389e-07, -0.000377655029296875, -5.7220458984375e-06, -0.04544699192047119, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.009340286254882812, 0.0, -3.946462631225586, -0.03318023681640625, -0.0006706714630126953, -3.814697265625e-06, -0.0004749298095703125, 0.0, -0.00033414363861083984, 0.0, -0.000171661376953125, -0.0007152557373046875, -0.0001316070556640625, -3.3378491934854537e-06, -2.0265579223632812e-06, -0.00032150745391845703, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (players=BothPlayer(), picker=Null)))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 26, 135, "Null", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}, {"score": -5.511835410722512, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "InjuredBlademaster", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Injured Blademaster"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template21", "hole1": 4, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 7, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-5.91278076171875e-05, -2.86102294921875e-05, -0.0004624251159839332, -0.0009475050610490143, -3.075552376685664e-05, -5.9371814131736755e-06, -5.006785613659304e-06, -4.768370445162873e-07, -3.814697265625e-06, -0.000186920166015625, -1.1444091796875e-05, -6.866455078125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -1.9073486328125e-06, -6.556489552167477e-06, -3.457068669376895e-05, -2.1457672119140625e-06, -5.543231964111328e-05, -0.0008487701416015625, -2.09808349609375e-05, -6.4849853515625e-05, -1.9073486328125e-06, -1.52587890625e-05, -0.0005744695663452148, -7.62939453125e-06, -0.0009098052978515625, -1.9073486328125e-06, -7.62939453125e-06, -8.58306884765625e-05, -5.7220458984375e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0057220458984375, -7.62939453125e-06, -0.00023651123046875, -7.82012939453125e-05, -0.0001621246337890625, -0.0003528594970703125, -4.38690185546875e-05, -0.0010428379755467176, -0.00036162164178676903, -0.01962081342935562, -3.6954811548639555e-06, -0.015840530395507812, -0.8534450531005859, -2.47955322265625e-05, -1.9073486328125e-06, -0.21173763275146484, -9.72747802734375e-05, 0.0, -2.177556037902832, -0.0056285858154296875, -0.000240325927734375, -5.91278076171875e-05, -2.3841855067985307e-07, -0.0002899169921875, -1.33514404296875e-05, -0.0351945161819458, -1.9073486328125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.06894397735595703, 0.0, -0.02772045135498047, -2.47955322265625e-05, -0.015452265739440918, -0.000989079475402832, -4.0531158447265625e-06, -9.34600830078125e-05, -1.9073486328125e-06, -0.2944812774658203, -5.960462772236497e-07, -0.039938926696777344, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.0009307861328125, -0.0001392364501953125, -4.76837158203125e-05, -0.00687408447265625, -0.0002269744873046875, -0.0033618176821619272, -6.735110946465284e-05, -0.15915080904960632, -7.152555099310121e-07, -0.0023288726806640625, -0.8713569641113281, -3.814697265625e-06, -1.9073486328125e-06, -0.003983736038208008, -1.3470649719238281e-05, 0.0, -0.6466083526611328, -0.025970458984375, -6.29425048828125e-05, -8.58306884765625e-06, -9.5367431640625e-06, -2.09808349609375e-05, 0.0, -0.001494883676059544, -5.53131103515625e-05, -2.6702880859375e-05, -5.91278076171875e-05, -7.62939453125e-06, -0.00338900089263916, -0.004858255386352539, -1.9073486328125e-06, -3.457069396972656e-05, 0.0, -4.589557647705078e-05, 0.0, -3.24249267578125e-05, -8.20159912109375e-05, -5.91278076171875e-05, -6.437245247070678e-06, -9.536738616588991e-07, -0.0005140304565429688, 0.0], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (players=BothPlayer(), picker=UserPicker(), battlecry=Battlecry\n            (Damage(4), MinionSelector(Null, EnemyPlayer(), RandomPicker())))))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [77, 145, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Injured", " ", "Blademaster", "<EOS>", 70, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "4", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 54, 135, "Null", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"score": -2.4560375174837503, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardUsed"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -0.0007534027099609375, -1.52587890625e-05, -2.503394853192731e-06, -4.5536911784438416e-05, -6.318082796497038e-06, -4.053113570989808e-06, -8.738040196476504e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.71661376953125e-05, -0.00035427045077085495, -2.6702815375756472e-05, -9.5367431640625e-06, -0.012628555297851562, -0.0809030532836914, -0.2746272087097168, -0.1982710361480713, -0.00016427040100097656, -2.47955322265625e-05, -1.9073486328125e-06, -0.0025909915566444397, -0.036297757178545, -1.0251998901367188e-05, -2.09808349609375e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.00048089027404785156, -6.461142766056582e-05, -3.814697265625e-06, -0.002262115478515625, -0.01617908477783203, -6.67572021484375e-05, -0.008040552027523518, -0.0006179092451930046, -0.027057886123657227, -1.4066597032069694e-05, -0.0001163482666015625, -0.3538379669189453, -7.62939453125e-06, 0.0, -0.4874753952026367, -0.0004469156265258789, 0.0, -0.09197521209716797, -0.0001926422119140625, -9.5367431640625e-05, -0.014834403991699219, -4.768370445162873e-07, -0.0023965835571289062, -2.6702880859375e-05, -0.001014825887978077, -2.86102294921875e-05, -1.9073486328125e-06, -4.57763671875e-05, -7.62939453125e-06, -0.11974918842315674, -1.9073486328125e-06, -0.0025186538696289062, -5.14984130859375e-05, -0.0013008107198402286, -0.0003815889358520508, 0.0, -3.814697265625e-06, 0.0, -0.05177140235900879, 0.0, -0.00452423095703125, -0.00469970703125, -1.20401346066501e-05, -3.933906555175781e-06, -0.000820159912109375, -0.0010128021240234375], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Used", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -2.616034811193309, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardUsed"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.7378206253051758, -4.768370445162873e-07, -0.010620594024658203, 0.0, -0.00014507770538330078, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -5.996118488837965e-05, -2.3841855067985307e-07, 0.0, -0.0012416839599609375, -1.33514404296875e-05, -2.503394853192731e-06, -5.2689116273541003e-05, -6.437291176553117e-06, -4.41074053014745e-06, -9.560584294376895e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-05, -0.00036833382910117507, -2.777568624878768e-05, -9.5367431640625e-06, -0.010969161987304688, -0.10183143615722656, -0.33742043375968933, -0.18705964088439941, -0.00017189979553222656, -2.6702880859375e-05, -1.9073486328125e-06, -0.00266661262139678, -0.035695839673280716, -1.0251998901367188e-05, -2.288818359375e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.00047898292541503906, -6.449221837101504e-05, -3.814697265625e-06, -0.0022182464599609375, -0.016046524047851562, -6.67572021484375e-05, -0.007982466369867325, -0.0006211258587427437, -0.027002036571502686, -1.4185804502631072e-05, -0.000118255615234375, -0.3461284637451172, -7.62939453125e-06, 0.0, -0.4897385835647583, -0.0004469156265258789, 0.0, -0.09201526641845703, -0.0001926422119140625, -9.34600830078125e-05, -0.014731407165527344, -4.768370445162873e-07, -0.0023965835571289062, -2.6702880859375e-05, -0.0010168524459004402, -2.86102294921875e-05, -1.9073486328125e-06, -4.57763671875e-05, -9.5367431640625e-06, -0.12013638019561768, -1.9073486328125e-06, -0.002521514892578125, -5.14984130859375e-05, -0.001302718068473041, -0.0003815889358520508, 0.0, -3.814697265625e-06, 0.0, -0.051993727684020996, 0.0, -0.004517555236816406, -0.0046939849853515625, -1.20401346066501e-05, -3.933906555175781e-06, -0.000823974609375, -0.001018524169921875], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Used", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -2.7376878852625026, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardUsed"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "CharacterSelector", "_type": "Name"}}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -0.0007534027099609375, -1.52587890625e-05, -2.503394853192731e-06, -4.5536911784438416e-05, -6.318082796497038e-06, -4.053113570989808e-06, -8.738040196476504e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.71661376953125e-05, -0.00035427045077085495, -2.6702815375756472e-05, -9.5367431640625e-06, -0.012628555297851562, -0.0809030532836914, -0.2746272087097168, -0.1982710361480713, -0.00016427040100097656, -2.47955322265625e-05, -1.9073486328125e-06, -0.0025909915566444397, -0.036297757178545, -1.0251998901367188e-05, -2.09808349609375e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.00048089027404785156, -6.461142766056582e-05, -3.814697265625e-06, -0.002262115478515625, -0.01617908477783203, -6.67572021484375e-05, -0.008040552027523518, -0.0006179092451930046, -0.027057886123657227, -1.4066597032069694e-05, -0.0001163482666015625, -1.2170801162719727, -1.9073486328125e-06, 0.0, -0.1993931531906128, -0.0002486705780029297, 0.0, -0.0003509521484375, -0.0006046295166015625, -4.00543212890625e-05, -5.841255187988281e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0015131828840821981, -6.306171417236328e-05, 0.0, -0.0005016326904296875, -0.0001316070556640625, -0.0007479189080186188, -7.963174721226096e-05, 0.0, -1.9073486328125e-05, -5.7220458984375e-05], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(Null, EnemyPlayer(), RandomPicker(\n            ))))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Used", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 111, 25, 133, "Character", "Selector", "<EOS>", 207, 54, 135, "Null", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -2.920995006055783, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardUsed"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "args": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template25", "hole0": "EnemyPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "CharacterSelector", "_type": "Name"}}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.7378206253051758, -4.768370445162873e-07, -0.010620594024658203, 0.0, -0.00014507770538330078, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -5.996118488837965e-05, -2.3841855067985307e-07, 0.0, -0.0012416839599609375, -1.33514404296875e-05, -2.503394853192731e-06, -5.2689116273541003e-05, -6.437291176553117e-06, -4.41074053014745e-06, -9.560584294376895e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-05, -0.00036833382910117507, -2.777568624878768e-05, -9.5367431640625e-06, -0.010969161987304688, -0.10183143615722656, -0.33742043375968933, -0.18705964088439941, -0.00017189979553222656, -2.6702880859375e-05, -1.9073486328125e-06, -0.00266661262139678, -0.035695839673280716, -1.0251998901367188e-05, -2.288818359375e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.00047898292541503906, -6.449221837101504e-05, -3.814697265625e-06, -0.0022182464599609375, -0.016046524047851562, -6.67572021484375e-05, -0.007982466369867325, -0.0006211258587427437, -0.027002036571502686, -1.4185804502631072e-05, -0.000118255615234375, -1.235586166381836, -1.9073486328125e-06, 0.0, -0.19930553436279297, -0.0002505779266357422, 0.0, -0.0003490447998046875, -0.000598907470703125, -4.1961669921875e-05, -5.841255187988281e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0015106797218322754, -6.306171417236328e-05, 0.0, -0.0005016326904296875, -0.0001316070556640625, -0.0007479189080186188, -7.963174721226096e-05, 0.0, -1.9073486328125e-05, -5.91278076171875e-05], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(Null, EnemyPlayer(), RandomPicker(\n            ))))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Used", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 111, 25, 133, "Character", "Selector", "<EOS>", 207, 54, 135, "Null", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.0991997640445135, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardUsed"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -0.0007534027099609375, -1.52587890625e-05, -2.503394853192731e-06, -4.5536911784438416e-05, -6.318082796497038e-06, -4.053113570989808e-06, -8.738040196476504e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.71661376953125e-05, -0.00035427045077085495, -2.6702815375756472e-05, -9.5367431640625e-06, -0.012628555297851562, -0.0809030532836914, -0.2746272087097168, -0.1982710361480713, -0.00016427040100097656, -2.47955322265625e-05, -1.9073486328125e-06, -0.0025909915566444397, -0.036297757178545, -1.0251998901367188e-05, -2.09808349609375e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.00048089027404785156, -6.461142766056582e-05, -3.814697265625e-06, -0.002262115478515625, -0.01617908477783203, -6.67572021484375e-05, -0.008040552027523518, -0.0006179092451930046, -0.027057886123657227, -1.4066597032069694e-05, -0.0001163482666015625, -0.3538379669189453, -7.62939453125e-06, 0.0, -0.9712516069412231, -0.0003719329833984375, 0.0, -0.18187904357910156, -0.0001316070556640625, -7.62939453125e-06, -0.05208694934844971, -2.3841855067985307e-07, -0.0036535263061523438, -4.1961669921875e-05, -0.0023306547664105892, -2.09808349609375e-05, -1.9073486328125e-06, -4.57763671875e-05, -9.5367431640625e-06, -0.14181053638458252, -1.9073486328125e-06, -0.0023698806762695312, -5.53131103515625e-05, -0.0014364701928570867, -0.0003987550735473633, 0.0, -5.7220458984375e-06, 0.0, -0.06053483486175537, 0.0, -0.00360107421875, -0.004673004150390625, -1.20401346066501e-05, -3.933906555175781e-06, -0.000820159912109375, -0.00099945068359375], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), MinionSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Used", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -3.253761710197004, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardUsed"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.7378206253051758, -4.768370445162873e-07, -0.010620594024658203, 0.0, -0.00014507770538330078, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -5.996118488837965e-05, -2.3841855067985307e-07, 0.0, -0.0012416839599609375, -1.33514404296875e-05, -2.503394853192731e-06, -5.2689116273541003e-05, -6.437291176553117e-06, -4.41074053014745e-06, -9.560584294376895e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-05, -0.00036833382910117507, -2.777568624878768e-05, -9.5367431640625e-06, -0.010969161987304688, -0.10183143615722656, -0.33742043375968933, -0.18705964088439941, -0.00017189979553222656, -2.6702880859375e-05, -1.9073486328125e-06, -0.00266661262139678, -0.035695839673280716, -1.0251998901367188e-05, -2.288818359375e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.00047898292541503906, -6.449221837101504e-05, -3.814697265625e-06, -0.0022182464599609375, -0.016046524047851562, -6.67572021484375e-05, -0.007982466369867325, -0.0006211258587427437, -0.027002036571502686, -1.4185804502631072e-05, -0.000118255615234375, -0.3461284637451172, -7.62939453125e-06, 0.0, -0.9678345918655396, -0.000377655029296875, 0.0, -0.18224811553955078, -0.0001316070556640625, -7.62939453125e-06, -0.051764607429504395, -2.3841855067985307e-07, -0.0036611557006835938, -4.1961669921875e-05, -0.0023363768123090267, -2.09808349609375e-05, -1.9073486328125e-06, -4.57763671875e-05, -9.5367431640625e-06, -0.1423569917678833, -1.9073486328125e-06, -0.0023708343505859375, -5.53131103515625e-05, -0.0014383775414898992, -0.0003987550735473633, 0.0, -5.7220458984375e-06, 0.0, -0.060714125633239746, 0.0, -0.0035963058471679688, -0.0046710968017578125, -1.20401346066501e-05, -3.933906555175781e-06, -0.000823974609375, -0.001003265380859375], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), MinionSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Used", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -4.268405948880478, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.7378206253051758, -4.768370445162873e-07, -0.010620594024658203, 0.0, -0.00014507770538330078, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -5.996118488837965e-05, -2.3841855067985307e-07, 0.0, -0.0012416839599609375, -1.33514404296875e-05, -2.503394853192731e-06, -5.2689116273541003e-05, -6.437291176553117e-06, -4.41074053014745e-06, -9.560584294376895e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-05, -0.00036833382910117507, -2.777568624878768e-05, -9.5367431640625e-06, -0.010969161987304688, -0.10183143615722656, -1.4329261779785156, -0.05472588539123535, -9.536738616588991e-07, -1.1444091796875e-05, -1.9073486328125e-06, -0.5968303680419922, -0.06761859357357025, -1.6689275071257725e-05, -1.33514404296875e-05, -4.57763671875e-05, -3.814697265625e-06, 0.0, -0.00043582916259765625, -7.784365880070254e-05, -3.814697265625e-06, -0.002147674560546875, -0.012666702270507812, -5.91278076171875e-05, -0.006926332600414753, -0.000631848000921309, -0.026566296815872192, -1.9907753085135482e-05, -0.000118255615234375, -0.30518245697021484, -7.62939453125e-06, 0.0, -0.58393394947052, -0.0004526376724243164, 0.0, -0.09759712219238281, -0.000179290771484375, -8.58306884765625e-05, -0.00986635684967041, -4.768370445162873e-07, -0.0024566650390625, -2.86102294921875e-05, -0.0010292495135217905, -3.0517578125e-05, -1.9073486328125e-06, -4.76837158203125e-05, -9.5367431640625e-06, -0.1292659044265747, -1.9073486328125e-06, -0.0026378631591796875, -6.103515625e-05, -0.0013042676728218794, -0.0003815889358520508, 0.0, -3.814697265625e-06, 0.0, -0.05716264247894287, 0.0, -0.0043354034423828125, -0.0046558380126953125, -1.20401346066501e-05, -3.933906555175781e-06, -0.00081634521484375, -0.0010318756103515625], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsSpell()),\n            ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(),\n            picker=RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -4.298835144454628, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -0.0007534027099609375, -1.52587890625e-05, -2.503394853192731e-06, -4.5536911784438416e-05, -6.318082796497038e-06, -4.053113570989808e-06, -8.738040196476504e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.71661376953125e-05, -0.00035427045077085495, -2.6702815375756472e-05, -9.5367431640625e-06, -0.012628555297851562, -0.0809030532836914, -1.6197853088378906, -0.05544877052307129, -9.536738616588991e-07, -1.1444091796875e-05, -1.9073486328125e-06, -0.5514862537384033, -0.06912855058908463, -1.6808484360808507e-05, -1.1444091796875e-05, -4.57763671875e-05, -3.814697265625e-06, 0.0, -0.00044155120849609375, -7.796286809025332e-05, -3.814697265625e-06, -0.0022182464599609375, -0.012701988220214844, -5.91278076171875e-05, -0.006914361380040646, -0.0006294653285294771, -0.02664593607187271, -1.966933996300213e-05, -0.000118255615234375, -0.31118297576904297, -7.62939453125e-06, 0.0, -0.5791053771972656, -0.0004507303237915039, 0.0, -0.09745025634765625, -0.0001811981201171875, -8.58306884765625e-05, -0.010013103485107422, -4.768370445162873e-07, -0.0024538040161132812, -2.86102294921875e-05, -0.001027342164888978, -3.0517578125e-05, -1.9073486328125e-06, -4.76837158203125e-05, -9.5367431640625e-06, -0.1288996934890747, -1.9073486328125e-06, -0.0026350021362304688, -5.91278076171875e-05, -0.0013042676728218794, -0.0003815889358520508, 0.0, -3.814697265625e-06, 0.0, -0.056989073753356934, 0.0, -0.004340171813964844, -0.0046596527099609375, -1.20401346066501e-05, -3.933906555175781e-06, -0.0008106231689453125, -0.001026153564453125], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsSpell()),\n            ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(),\n            picker=RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -4.3516106192823685, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardPlayed"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -0.0007534027099609375, -1.52587890625e-05, -2.503394853192731e-06, -4.5536911784438416e-05, -6.318082796497038e-06, -4.053113570989808e-06, -8.738040196476504e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.71661376953125e-05, -0.00035427045077085495, -2.6702815375756472e-05, -9.5367431640625e-06, -0.012628555297851562, -0.0809030532836914, -0.2746272087097168, -1.795595407485962, 0.0, -2.47955322265625e-05, -1.52587890625e-05, -0.07519090175628662, -0.1387537121772766, -2.5987612389144488e-05, -1.71661376953125e-05, -4.57763671875e-05, -1.9073486328125e-06, 0.0, -0.0003668069839477539, -7.653235661564395e-05, -3.814697265625e-06, -0.002796173095703125, -0.012827873229980469, -6.67572021484375e-05, -0.006562788970768452, -0.0005926521262153983, -0.02774905040860176, -1.4781842764932662e-05, -0.0001239776611328125, -0.4211559295654297, -9.5367431640625e-06, 0.0, -0.5363999605178833, -0.0004469156265258789, 0.0, -0.09778690338134766, -0.0001888275146484375, -8.96453857421875e-05, -0.012230873107910156, -4.768370445162873e-07, -0.0024442672729492188, -2.86102294921875e-05, -0.0010129180736839771, -3.0517578125e-05, -1.9073486328125e-06, -4.57763671875e-05, -9.5367431640625e-06, -0.1245957612991333, -1.9073486328125e-06, -0.002597808837890625, -5.7220458984375e-05, -0.0012905587209388614, -0.0003796815872192383, 0.0, -3.814697265625e-06, 0.0, -0.054514288902282715, 0.0, -0.004403114318847656, -0.0046901702880859375, -1.20401346066501e-05, -3.933906555175781e-06, -0.0008144378662109375, -0.0010242462158203125], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardPlayed(IsSpell()),\n            ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(),\n            picker=RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Played", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -4.62352880592092, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "MinionHas,", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.7378206253051758, -4.768370445162873e-07, -0.010620594024658203, 0.0, -0.00014507770538330078, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -5.996118488837965e-05, -2.3841855067985307e-07, 0.0, -0.0012416839599609375, -1.33514404296875e-05, -2.503394853192731e-06, -5.2689116273541003e-05, -6.437291176553117e-06, -4.41074053014745e-06, -9.560584294376895e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-05, -0.00036833382910117507, -2.777568624878768e-05, -9.5367431640625e-06, -0.010969161987304688, -0.10183143615722656, -1.4329261779785156, -0.05472588539123535, -9.536738616588991e-07, -1.1444091796875e-05, -1.9073486328125e-06, -0.8169856667518616, -0.13548210263252258, -0.37610241770744324, -9.655923349782825e-05, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, 0.0, -0.0006753206253051758, -6.830692291259766e-05, -9.5367431640625e-06, -0.001964569091796875, -0.006434440612792969, -5.7220458984375e-05, -0.0025586190167814493, -0.00033909291960299015, -0.03161965683102608, -9.417489309271332e-06, -0.000102996826171875, -0.11028385162353516, -7.62939453125e-06, 0.0, -0.4457552433013916, -0.0005214214324951172, 0.0, -0.11394214630126953, -0.00019073486328125, -7.82012939453125e-05, -0.006964325904846191, -4.768370445162873e-07, -0.0025300979614257812, -3.0517578125e-05, -0.0011109082261100411, -3.0517578125e-05, -1.9073486328125e-06, -4.76837158203125e-05, -9.5367431640625e-06, -0.14012062549591064, -1.9073486328125e-06, -0.002613067626953125, -7.05718994140625e-05, -0.0013967741979286075, -0.0003815889358520508, 0.0, -3.814697265625e-06, 0.0, -0.06255853176116943, 0.0, -0.004238128662109375, -0.00457763671875, -1.20401346066501e-05, -3.933906555175781e-06, -0.000812530517578125, -0.001056671142578125], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(MinionHas,()),\n            ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(),\n            picker=RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Minion", "Has", ",", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -4.694595746944138, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole2": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.7378206253051758, -4.768370445162873e-07, -0.010620594024658203, 0.0, -0.00014507770538330078, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -5.996118488837965e-05, -2.3841855067985307e-07, 0.0, -0.0012416839599609375, -1.33514404296875e-05, -2.503394853192731e-06, -5.2689116273541003e-05, -6.437291176553117e-06, -4.41074053014745e-06, -9.560584294376895e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-05, -0.00036833382910117507, -2.777568624878768e-05, -9.5367431640625e-06, -0.010969161987304688, -2.346743583679199, -0.0004978179931640625, -0.17068016529083252, -1.9073486328125e-06, -0.00116729736328125, -7.62939453125e-06, -0.005834698677062988, -0.0020483725238591433, -1.9073486328125e-06, -0.0001220703125, -0.0004119873046875, -1.9073486328125e-06, -0.0001220703125, 0.0, -0.0001964569091796875, -1.9073486328125e-06, -0.36522865295410156, -1.9073486328125e-06, -0.0006504058837890625, 0.0, -1.1444091796875e-05, 0.0, -0.0003376007080078125, -2.09808349609375e-05, -5.7220458984375e-06, -0.000385284423828125, -0.00650787353515625, -3.24249267578125e-05, -0.0027960215229541063, -0.00043418517452664673, -0.03410481661558151, -4.6491513785440475e-06, -3.62396240234375e-05, -0.3547382354736328, -9.5367431640625e-06, 0.0, -0.36969804763793945, -0.0005077123641967773, 0.0, -0.09695053100585938, -0.0002193450927734375, -0.0001087188720703125, -0.01714646816253662, -4.768370445162873e-07, -0.0023279190063476562, -2.09808349609375e-05, -0.0009883622406050563, -3.0517578125e-05, -1.9073486328125e-06, -4.57763671875e-05, -7.62939453125e-06, -0.10352146625518799, -3.814697265625e-06, -0.0022268295288085938, -3.0517578125e-05, -0.0013226264854893088, -0.00039124488830566406, 0.0, -3.814697265625e-06, 0.0, -0.031093835830688477, 0.0, -0.0062255859375, -0.0045948028564453125, -1.215934389620088e-05, -3.933906555175781e-06, -0.0008563995361328125, -0.0009670257568359375], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.MECH)), ActionTag(Damage(1), CharacterSelector(\n            players=EnemyPlayer(), picker=RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 157, "Minion", "Summoned", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -4.77211468692802, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "MinionHas,", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -0.0007534027099609375, -1.52587890625e-05, -2.503394853192731e-06, -4.5536911784438416e-05, -6.318082796497038e-06, -4.053113570989808e-06, -8.738040196476504e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.71661376953125e-05, -0.00035427045077085495, -2.6702815375756472e-05, -9.5367431640625e-06, -0.012628555297851562, -0.0809030532836914, -1.6197853088378906, -0.05544877052307129, -9.536738616588991e-07, -1.1444091796875e-05, -1.9073486328125e-06, -0.876342236995697, -0.13218536972999573, -0.39619624614715576, -9.787050657905638e-05, -5.7220458984375e-06, -1.52587890625e-05, -9.5367431640625e-06, 0.0, -0.0006734132766723633, -6.842613220214844e-05, -9.5367431640625e-06, -0.002010345458984375, -0.006481170654296875, -5.7220458984375e-05, -0.0025590944569557905, -0.00033885458833537996, -0.031694039702415466, -9.179073458653875e-06, -0.000102996826171875, -0.11016559600830078, -7.62939453125e-06, 0.0, -0.4453420639038086, -0.0005195140838623047, 0.0, -0.1138467788696289, -0.00019073486328125, -7.82012939453125e-05, -0.007115006446838379, -4.768370445162873e-07, -0.00252532958984375, -3.0517578125e-05, -0.0011126963654533029, -3.0517578125e-05, -1.9073486328125e-06, -4.76837158203125e-05, -9.5367431640625e-06, -0.13960468769073486, -1.9073486328125e-06, -0.0026082992553710938, -7.05718994140625e-05, -0.0013967741979286075, -0.0003815889358520508, 0.0, -3.814697265625e-06, 0.0, -0.062360167503356934, 0.0, -0.004244804382324219, -0.0045757293701171875, -1.20401346066501e-05, -3.933906555175781e-06, -0.0008087158203125, -0.0010528564453125], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(MinionHas,()),\n            ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(),\n            picker=RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Minion", "Has", ",", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -4.974185225515143, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsSpell", "_type": "Name"}, "hole0": "CardUsed"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -0.0007534027099609375, -1.52587890625e-05, -2.503394853192731e-06, -4.5536911784438416e-05, -6.318082796497038e-06, -4.053113570989808e-06, -8.738040196476504e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.71661376953125e-05, -0.00035427045077085495, -2.6702815375756472e-05, -9.5367431640625e-06, -0.012628555297851562, -0.0809030532836914, -0.2746272087097168, -0.1982710361480713, -0.00016427040100097656, -2.47955322265625e-05, -1.9073486328125e-06, -0.0025909915566444397, -0.036297757178545, -1.0251998901367188e-05, -2.09808349609375e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -0.00048089027404785156, -6.461142766056582e-05, -3.814697265625e-06, -0.002262115478515625, -0.01617908477783203, -6.67572021484375e-05, -0.008040552027523518, -0.0006179092451930046, -0.027057886123657227, -1.4066597032069694e-05, -0.0001163482666015625, -0.3538379669189453, -7.62939453125e-06, 0.0, -0.4874753952026367, -0.0004469156265258789, 0.0, -0.09197521209716797, -0.0001926422119140625, -9.5367431640625e-05, -0.014834403991699219, -4.768370445162873e-07, -0.0023965835571289062, -2.6702880859375e-05, -0.001014825887978077, -2.86102294921875e-05, -1.9073486328125e-06, -4.57763671875e-05, -7.62939453125e-06, -2.195528030395508, 0.0, -0.004535675048828125, -0.00913238525390625, -9.059900548891164e-06, -1.9073486328125e-06, -0.00373077392578125, -7.62939453125e-06, -0.47387027740478516, 0.0, -0.010732650756835938, -0.001491546630859375, -0.004607200622558594, -0.0004253387451171875, 0.0, -6.29425048828125e-05, -0.0008640289306640625], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), condition=\n            Null, picker=RandomPicker())))])\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Card", "Used", "<EOS>", 25, 133, "Is", "Spell", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -7.816609715880119, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 3, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.7378206253051758, -4.768370445162873e-07, -0.010620594024658203, 0.0, -0.00014507770538330078, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -5.996118488837965e-05, -2.3841855067985307e-07, 0.0, -7.061490058898926, -0.005794525146484375, -3.576277265437966e-07, -1.1920928244535389e-07, -1.4662661669717636e-05, 0.0], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}, {"score": -8.286201985743716, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "KnifeJuggler", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler"}], "hole6": [{"_type": "Template16", "hole1": 2, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -5.340576171875e-05, -4.6491513785440475e-06, -8.344629350176547e-06, -0.00021419614495243877, 0.0, -2.3126376618165523e-05, -3.8146954466355965e-06, 0.0, -3.62396240234375e-05, -0.00022125244140625, -1.0728830375228426e-06, -6.246566772460938e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.6529309153556824, -9.536738616588991e-07, -0.0012549159582704306, 0.0, -4.112720489501953e-05, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.00010346942872274667, -1.1920928244535389e-07, 0.0, -7.625741958618164, -0.0054569244384765625, -2.3841852225814364e-07, -2.0265579223632812e-06, -1.3947414117865264e-05, 0.0], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [77, 145, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"score": -1.876213776659597, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -0.4803178012371063, -2.2649765014648438e-06, -0.0013179779052734375, -0.0001583099365234375, -2.09808349609375e-05, -1.9073486328125e-06, -0.06981086730957031, -2.86102294921875e-05, 0.0, -0.5426607131958008, -0.0001125335693359375, -7.82012939453125e-05, -0.03125190734863281, 0.0, -0.0003681182861328125, -1.9073486328125e-06, -0.016290664672851562, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.02761077880859375, 0.0, -0.00054931640625, -1.9073486328125e-06, -0.11321640014648438, -0.00032448768615722656, 0.0, -0.002750396728515625, -0.0011272430419921875], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (2), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker())))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -2.436781949862734, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -2.0242223739624023, -0.009911537170410156, -0.00037086009979248047, -4.00543212890625e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.022930670529603958, -2.1100042431498878e-05, -0.001373291015625, -5.7220458984375e-06, -0.12397909164428711, -3.457069396972656e-05, 0.0, -1.9073486328125e-06, -0.000400543212890625], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Give(\n            Frozen()), TargetSelector()))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Frozen", "<EOS>", 63, 171, "Target", "Selector", "<EOS>", 205, 71]}, {"score": -2.6123050328012596, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -0.4803178012371063, -2.2649765014648438e-06, -0.0013179779052734375, -0.0001583099365234375, -2.09808349609375e-05, -1.9073486328125e-06, -0.06981086730957031, -2.86102294921875e-05, 0.0, -1.004805564880371, -0.0004596710205078125, -7.2479248046875e-05, -0.0004749298095703125, 0.0, -0.0002574920654296875, -3.814697265625e-06, -0.11355900764465332, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -0.047924041748046875, 0.0, -0.0004177093505859375, 0.0, -0.08762180805206299, -0.0003148317337036133, 0.0, -1.1444091796875e-05, 0.0, -0.2072925567626953, 0.0, -0.0024156570434570312, -0.0006237030029296875, -4.3272972106933594e-05, 0.0, -0.0004730224609375, -0.0056610107421875], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (2), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -2.9432640250437316, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -1.2821869850158691, -8.344646857949556e-07, -0.003124237060546875, -0.00014495849609375, -1.1444091796875e-05, -1.9073486328125e-06, -0.26126670837402344, -3.4332275390625e-05, 0.0, -0.6121797561645508, -0.0001010894775390625, -6.29425048828125e-05, -0.034984588623046875, 0.0, -0.0003662109375, -1.9073486328125e-06, -0.016399383544921875, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.02788543701171875, 0.0, -0.000553131103515625, -1.9073486328125e-06, -0.11167335510253906, -0.00031876564025878906, 0.0, -0.0026569366455078125, -0.0010967254638671875], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (1), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker())))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.5073820527308044, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -1.2821869850158691, -8.344646857949556e-07, -0.003124237060546875, -0.00014495849609375, -1.1444091796875e-05, -1.9073486328125e-06, -0.26126670837402344, -3.4332275390625e-05, 0.0, -0.9164905548095703, -0.000453948974609375, -0.000102996826171875, -0.000438690185546875, 0.0, -0.0001983642578125, -1.9073486328125e-06, -0.10971474647521973, -1.33514404296875e-05, 0.0, -1.1444091796875e-05, 0.0, -0.04764747619628906, 0.0, -0.000423431396484375, 0.0, -0.08739674091339111, -0.0003110170364379883, 0.0, -1.33514404296875e-05, 0.0, -0.19965839385986328, 0.0, -0.0023813247680664062, -0.000629425048828125, -4.1365623474121094e-05, 0.0, -0.00049591064453125, -0.0059947967529296875], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (1), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker(), condition=Null)))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -3.8183118279688415, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -1.2821869850158691, -8.344646857949556e-07, -0.003124237060546875, -0.00014495849609375, -1.1444091796875e-05, -1.9073486328125e-06, -1.4779891967773438, -9.5367431640625e-06, 0.0, -0.20933818817138672, -3.0517578125e-05, -4.38690185546875e-05, -0.09531593322753906, 0.0, -0.0004425048828125, -3.814697265625e-06, -0.028667569160461426, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.028263092041015625, 0.0, -0.0004730224609375, -1.9073486328125e-06, -0.09922027587890625, -0.00030922889709472656, 0.0, -0.0034637451171875, -0.0010623931884765625], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (1), MinionSelector(players=BothPlayer(), picker=RandomPicker())))]\n            )\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -3.8978717713096103, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -2.426297187805176, -6.67572021484375e-05, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, 0.0, -8.7738037109375e-05, -1.1444091796875e-05, 0.0, -2.47955322265625e-05, -0.08237457275390625, -4.76837158203125e-05, -0.021749012172222137, -6.627841503359377e-05, -0.3756461441516876, -2.2649765014648438e-06, -0.0014667510986328125, -0.0002231597900390625, -2.6702880859375e-05, 0.0, -0.06714439392089844, -2.47955322265625e-05, 0.0, -0.5725975036621094, -0.0001220703125, -7.82012939453125e-05, -0.030353546142578125, 0.0, -0.0003643035888671875, -1.9073486328125e-06, -0.016284942626953125, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.027692794799804688, 0.0, -0.0005588531494140625, -1.9073486328125e-06, -0.11284637451171875, -0.00032448768615722656, 0.0, -0.0027332305908203125, -0.0011234283447265625], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2\n            ), CharacterSelector(players=BothPlayer(), picker=RandomPicker(\n            ))))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -4.048577057909597, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -0.4803178012371063, -2.2649765014648438e-06, -0.0013179779052734375, -0.0001583099365234375, -2.09808349609375e-05, -1.9073486328125e-06, -0.06981086730957031, -2.86102294921875e-05, 0.0, -0.5426607131958008, -0.0001125335693359375, -7.82012939453125e-05, -0.03125190734863281, 0.0, -0.0003681182861328125, -1.9073486328125e-06, -0.016290664672851562, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.02761077880859375, 0.0, -0.00054931640625, -1.9073486328125e-06, -2.280017852783203, -0.0001888275146484375, -7.867813110351562e-06, -0.00732421875, -0.0022430419921875], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (2), CharacterSelector(players=BothPlayer(), picker=UserPicker(\n            ))))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 205, 71]}, {"score": -4.184179264618933, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 1, "hole0": "Heal"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -2.127328634262085, -0.0010867118835449219, -0.5672360062599182, -2.3841830625315197e-06, -0.0009479522705078125, -0.00011444091796875, -9.5367431640625e-06, -3.814697265625e-06, -0.46396827697753906, -2.288818359375e-05, 0.0, -0.2833671569824219, -3.24249267578125e-05, -3.24249267578125e-05, -0.11928081512451172, 0.0, -0.000469207763671875, -3.814697265625e-06, -0.0154343843460083, -7.62939453125e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.02822113037109375, 0.0, -0.0004825592041015625, -1.9073486328125e-06, -0.11180877685546875, -0.00031495094299316406, 0.0, -0.003902435302734375, -0.0010623931884765625], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(1\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Heal", "<EOS>", "1", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -4.2263983364816795, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -0.4803178012371063, -2.2649765014648438e-06, -0.0013179779052734375, -0.0001583099365234375, -2.09808349609375e-05, -1.9073486328125e-06, -2.720952033996582, -3.814697265625e-06, 0.0, -0.1963205337524414, -3.24249267578125e-05, -4.76837158203125e-05, -0.07397079467773438, 0.0, -0.000453948974609375, -3.814697265625e-06, -0.03259289264678955, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.028791427612304688, 0.0, -0.0004730224609375, -1.9073486328125e-06, -0.09804344177246094, -0.00031113624572753906, 0.0, -0.003253936767578125, -0.0011196136474609375], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (2), MinionSelector(players=BothPlayer(), picker=RandomPicker())))]\n            )\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -4.276098268818487, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 3, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -2.5130107402801514, -3.8743019104003906e-05, -0.0004825592041015625, -0.000171661376953125, -2.288818359375e-05, -1.9073486328125e-06, -0.4178142547607422, -4.1961669921875e-05, 0.0, -0.5525445938110352, -6.4849853515625e-05, -5.14984130859375e-05, -0.04269599914550781, 0.0, -0.0003986358642578125, -1.9073486328125e-06, -0.014780044555664062, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.027374267578125, 0.0, -0.0005245208740234375, -1.9073486328125e-06, -0.11368370056152344, -0.00031876564025878906, 0.0, -0.0027675628662109375, -0.0010929107666015625], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (3), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker())))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "3", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -4.462244259905447, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "player"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -0.09568321704864502, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2055063247680664, -4.38690185546875e-05, -0.12912261486053467, -4.172253102296963e-05, -0.4803178012371063, -2.2649765014648438e-06, -0.0013179779052734375, -0.0001583099365234375, -2.09808349609375e-05, -1.9073486328125e-06, -0.06981086730957031, -2.86102294921875e-05, 0.0, -1.004805564880371, -0.0004596710205078125, -7.2479248046875e-05, -0.0004749298095703125, 0.0, -0.0002574920654296875, -3.814697265625e-06, -0.11355900764465332, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -0.047924041748046875, 0.0, -0.0004177093505859375, 0.0, -0.08762180805206299, -0.0003148317337036133, 0.0, -1.1444091796875e-05, 0.0, -1.784703254699707, 0.0, -0.09519100189208984, -1.9073486328125e-06, -0.06199479103088379, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -0.12453842163085938], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (2), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker(), player=BothPlayer())))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "player", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 205, 71]}, {"score": -4.565371909592386, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -0.008166909217834473, -7.62939453125e-06, -0.000347137451171875, -0.0008907318115234375, -2.6941299438476562e-05, -6.29425048828125e-05, -5.14984130859375e-05, -0.0010929107666015625, -2.86102294921875e-05, -0.00021910626674070954, -2.426297187805176, -6.67572021484375e-05, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, 0.0, -8.7738037109375e-05, -1.1444091796875e-05, 0.0, -2.47955322265625e-05, -0.08237457275390625, -4.76837158203125e-05, -0.021749012172222137, -6.627841503359377e-05, -0.3756461441516876, -2.2649765014648438e-06, -0.0014667510986328125, -0.0002231597900390625, -2.6702880859375e-05, 0.0, -0.06714439392089844, -2.47955322265625e-05, 0.0, -0.9697504043579102, -0.0004520416259765625, -7.82012939453125e-05, -0.000457763671875, 0.0, -0.0002460479736328125, -3.814697265625e-06, -0.10061001777648926, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -0.04773712158203125, 0.0, -0.0004253387451171875, 0.0, -0.09029781818389893, -0.0003167390823364258, 0.0, -1.1444091796875e-05, 0.0, -0.21306324005126953, 0.0, -0.0023956298828125, -0.0006275177001953125, -4.3272972106933594e-05, 0.0, -0.000469207763671875, -0.0055942535400390625], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2\n            ), CharacterSelector(players=BothPlayer(), picker=RandomPicker(\n            ), condition=Null)))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 205, 71]}, {"score": -4.610711353603847, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "WARRIOR", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnStarted"}, {"_type": "Call", "args": [{"_type": "Template21", "hole1": 2, "hole0": "Damage"}, {"_type": "Call", "func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -2.840027093887329, 0.0, -0.00031316280364990234, 0.0, -4.38690185546875e-05, 0.0, -0.0004190206527709961, 0.0, -3.814697265625e-06, -0.0024585723876953125, -1.52587890625e-05, -2.0265558760002023e-06, -3.814689989667386e-06, -4.768360213347478e-06, -1.9073486328125e-06, -0.007476210594177246, -7.62939453125e-06, -0.00037384033203125, -0.0008792877197265625, -2.7060508728027344e-05, -6.103515625e-05, -5.14984130859375e-05, -0.0010890960693359375, -2.86102294921875e-05, -0.00021958308934699744, -0.09563076496124268, -7.43865966796875e-05, -4.00543212890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.000141143798828125, -0.2049398422241211, -4.38690185546875e-05, -0.12905895709991455, -4.1603329009376466e-05, -0.47986388206481934, -2.2649765014648438e-06, -0.0013179779052734375, -0.0001583099365234375, -2.09808349609375e-05, -1.9073486328125e-06, -0.06982040405273438, -2.86102294921875e-05, 0.0, -0.5427389144897461, -0.0001125335693359375, -7.82012939453125e-05, -0.03125762939453125, 0.0, -0.0003681182861328125, -1.9073486328125e-06, -0.01630401611328125, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.027616500854492188, 0.0, -0.00054931640625, -1.9073486328125e-06, -0.11321640014648438, -0.00032448768615722656, 0.0, -0.0027446746826171875, -0.0011425018310546875], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Damage\n            (2), CharacterSelector(players=BothPlayer(), picker=\n            RandomPicker())))])\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Started", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 60, 163, "Damage", "<EOS>", "2", "<EOS>", 48, 110, 25, 133, "Character", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -6.351627845294161, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Lightwell", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template34"}, "hole2": "spell_damage", "hole1": 5, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -5.91278076171875e-05, -0.026611048728227615, -0.002202749252319336, -2.2113323211669922e-05, -6.198883056640625e-06, 0.0, 0.0, -0.000682830810546875, -5.14984130859375e-05, -1.3113021850585938e-06, 0.0, -0.009796977043151855, -2.3841830625315197e-06, -0.10131287574768066, 0.0, -0.0016634464263916016, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.00025331974029541016, 0.0, -5.7220458984375e-06, -0.0037822723388671875, -1.71661376953125e-05, -2.0265558760002023e-06, -3.933898824470816e-06, -4.529942543740617e-06, -1.9073486328125e-06, -5.670582294464111, 0.0, -0.5344972610473633], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, spell_damage=1)\n", "choice_history": [77, 145, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "5", "<EOS>", "spell_damage", "<EOS>", 38]}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"score": -1.65561203084291, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "MinionHasAttack", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.7534778118133545, -0.4202086925506592, -0.09546320140361786, -1.2278545909794047e-05, -4.76837158203125e-05, -0.000209808349609375, -2.288818359375e-05, 0.0, -0.0018203258514404297, -0.00022149043797980994, 0.0, -0.00048828125, -8.7738037109375e-05, -0.00067901611328125, -0.00023293463164009154, -2.8490801923908293e-05, -0.000392913818359375, 0.0, -0.00045031693298369646, -0.002293109428137541, -2.861022494471399e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.0002956390380859375, -1.52587890625e-05, -0.001019861432723701, -2.5868412194540724e-05, 0.0, -7.62939453125e-06, -0.027570724487304688], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasAttack(\n            )), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Minion", "Has", "Attack", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -1.6771564252500042, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.8830654621124268, -0.40813907980918884, -1.1920928244535389e-07, -8.96453857421875e-05, -8.96453857421875e-05, -4.76837158203125e-05, -3.814697265625e-06, -0.0001614093780517578, -0.0001989576267078519, 0.0, -0.0004520416259765625, -0.0001392364501953125, -0.0012836456298828125, -0.00017678587755654007, -3.7073892599437386e-05, -0.001392364501953125, 0.0, -0.0005165818147361279, -0.0018352263141423464, -2.741813204920618e-06, -3.814697265625e-06, -7.62939453125e-06, -0.00038909912109375, -1.52587890625e-05, -0.001002011587843299, -2.7775760827353224e-05, 0.0, -7.62939453125e-06, -0.027545928955078125], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(IsMinion()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -2.751914774780623, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsHero", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.8830654621124268, -1.4871160984039307, -1.5139465176616795e-05, -0.000194549560546875, -0.00016021728515625, -2.288818359375e-05, -1.9073486328125e-06, -0.001259922981262207, -0.00025701429694890976, 0.0, -0.0001735687255859375, -0.00017547607421875, -0.000843048095703125, -0.00022101376089267433, -2.181522359023802e-05, -0.000621795654296875, 0.0, -0.000446631689555943, -0.002339243423193693, -2.503394853192731e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0003681182861328125, -1.1444091796875e-05, -0.001220283331349492, -2.944469088106416e-05, 0.0, -9.5367431640625e-06, -0.02280426025390625], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(IsHero()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Is", "Hero", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.1158757960139383, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsHero", "_type": "Name"}, "hole0": "MinionPlaced"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -2.6214544773101807, 0.0, -3.0517578125e-05, 0.0, -0.1253071427345276, -0.22439533472061157, -1.2874520507466514e-05, -0.0001583099365234375, -5.91278076171875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0006489753723144531, -0.0002574904356151819, 0.0, -0.0001621246337890625, -0.0002193450927734375, -0.0010089874267578125, -0.0002607103087939322, -2.02655210159719e-05, -0.000637054443359375, 0.0, -0.00038597200182266533, -0.0024669163394719362, -2.384185791015625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.0003795623779296875, -9.5367431640625e-06, -0.0012111272662878036, -3.123283022432588e-05, 0.0, -9.5367431640625e-06, -0.022092819213867188], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionPlaced(IsHero()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Placed", "<EOS>", 25, 133, "Is", "Hero", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.1288471461465335, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Adjacent", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -2.7178852558135986, -0.0030833641067147255, -3.0517578125e-05, -3.62396240234375e-05, -1.1444091796875e-05, 0.0, -0.02409529685974121, -0.00022077327594161034, 0.0, -0.000171661376953125, -0.0001087188720703125, -0.0008754730224609375, -0.00030505505856126547, -2.7775560738518834e-05, -0.0004673004150390625, 0.0, -0.0005493598873727024, -0.003360509406775236, -2.503394853192731e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.0003662109375, -1.1444091796875e-05, -0.0012561711482703686, -3.135203951387666e-05, 0.0, -9.5367431640625e-06, -0.0254058837890625], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(Adjacent()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Adjacent", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.3450026936487802, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsHero", "_type": "Name"}, "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -2.485856294631958, -2.622604142743512e-06, -1.52587890625e-05, 0.0, -0.24055224657058716, -0.4733974039554596, -1.2159273865108844e-05, -0.00019073486328125, -7.43865966796875e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.000536799430847168, -0.00025534466840326786, 0.0, -0.0002269744873046875, -0.0001888275146484375, -0.00096893310546875, -0.0002079005935229361, -2.1576808649115264e-05, -0.00092315673828125, 0.0, -0.00037166292895562947, -0.0019974703900516033, -2.384185791015625e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.0003757476806640625, -1.1444091796875e-05, -0.0010970449075102806, -2.92062723019626e-05, 0.0, -9.5367431640625e-06, -0.023023605346679688], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionDied(IsHero()), ActionTag\n            (Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Died", "<EOS>", 25, 133, "Is", "Hero", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.4019681962671413, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "MinionCount", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.7534778118133545, -2.244244337081909, -0.00109957717359066, -0.0003147125244140625, -0.0001277923583984375, -7.62939453125e-06, 0.0, -0.015736699104309082, -0.000391949201002717, 0.0, -0.000316619873046875, -0.0001163482666015625, -0.0008602142333984375, -0.0001754749391693622, -3.707371070049703e-05, -0.0005702972412109375, 0.0, -0.0006425611209124327, -0.0027866356540471315, -2.622604142743512e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0003261566162109375, -1.33514404296875e-05, -0.0010585079435259104, -2.8014177587465383e-05, 0.0, -9.5367431640625e-06, -0.029087066650390625], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionCount()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Minion", "Count", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -3.8581448477071945, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole2": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "MinionPlaced"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -3.047304153442383, -4.660990089178085e-05, -0.2788684368133545, 0.0, -5.340576171875e-05, 0.0, -0.04605364799499512, -0.024998784065246582, 0.0, -8.20159912109375e-05, -0.0031585693359375, -1.9073486328125e-06, -7.62939453125e-05, 0.0, -0.0001087188720703125, 0.0, -0.3648338317871094, 0.0, -0.0010986328125, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -0.0002727508544921875, -0.00010395050048828125, 0.0, -0.000164031982421875, -0.0001125335693359375, -0.0044708251953125, -8.785651880316436e-05, -3.2067124266177416e-05, -0.0005035400390625, -1.9073486328125e-06, -0.00020968529861420393, -0.001048683887347579, -3.933906555175781e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.0006008148193359375, -2.09808349609375e-05, -0.0007128221914172173, -2.741813295870088e-05, 0.0, -5.7220458984375e-06, -0.02155303955078125], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionPlaced(IsType(MINION_TYPE\n            .MECH)), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 157, "Minion", "Placed", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.046823130389036, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Minion<UNK>", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.7534778118133545, -2.8341004848480225, -0.05583050847053528, -9.5367431640625e-05, -9.918212890625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.012453556060791016, -0.00019001921464223415, 0.0, -0.0001964569091796875, -7.2479248046875e-05, -0.000675201416015625, -0.0001791710965335369, -3.015969559783116e-05, -0.000354766845703125, 0.0, -0.0005500672850757837, -0.002668976318091154, -2.741813204920618e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.000335693359375, -1.33514404296875e-05, -0.0010441704653203487, -2.9802316930727102e-05, 0.0, -7.62939453125e-06, -0.03386688232421875], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(Minion<UNK>()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Minion", "<UNK>", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.182382236669461, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Attack", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -3.524606466293335, -0.26068732142448425, -5.91278076171875e-05, -0.0003070831298828125, -3.814697265625e-06, 0.0, -0.01572883129119873, -0.00029838053160347044, 0.0, -0.0004520416259765625, -6.103515625e-05, -0.00069427490234375, -0.00030398269882425666, -3.5285567719256505e-05, -0.00042724609375, 0.0, -0.0004813011910300702, -0.002851366763934493, -2.622604142743512e-06, -1.9073486328125e-06, -7.62939453125e-06, -0.0002841949462890625, -1.52587890625e-05, -0.000944935658480972, -2.753734224825166e-05, 0.0, -5.7220458984375e-06, -0.023569107055664062], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(Attack()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Attack", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.353156087510449, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "IsMinion", "_type": "Name"}, "hole0": "MinionDied"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -2.485856294631958, -2.622604142743512e-06, -1.52587890625e-05, 0.0, -0.24055224657058716, -1.4795829057693481, -1.1920928244535389e-07, -5.53131103515625e-05, -4.9591064453125e-05, -5.14984130859375e-05, -1.9073486328125e-06, -7.11679458618164e-05, -0.00018369973986409605, -1.9073486328125e-06, -0.000492095947265625, -0.000156402587890625, -0.001293182373046875, -0.00019562116358429193, -3.266322528361343e-05, -0.0014057159423828125, 0.0, -0.00038619906990788877, -0.0015674824826419353, -2.503394853192731e-06, -3.814697265625e-06, -7.62939453125e-06, -0.0003833770751953125, -1.52587890625e-05, -0.0009616166353225708, -2.944469088106416e-05, 0.0, -7.62939453125e-06, -0.025178909301757812], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionDied(IsMinion()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Died", "<EOS>", 25, 133, "Is", "Minion", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.354286972455036, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Isplayer", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.8830654621124268, -3.0861752033233643, -2.2411095415009186e-05, -0.0006427764892578125, -0.0003910064697265625, -4.00543212890625e-05, -1.9073486328125e-06, -0.0002243518829345703, -0.00024664236116223037, 0.0, -0.0006961822509765625, -0.0001163482666015625, -0.0009555816650390625, -0.00019323764718137681, -2.968294757010881e-05, -0.000797271728515625, 0.0, -0.00042850503814406693, -0.0015686745755374432, -2.622604142743512e-06, -3.814697265625e-06, -7.62939453125e-06, -0.000377655029296875, -1.33514404296875e-05, -0.0011312703136354685, -2.9683109460165724e-05, 0.0, -7.62939453125e-06, -0.026592254638671875], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(Isplayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Is", "player", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.610411092387601, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "MinionHasWyrm", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.7534778118133545, -0.4202086925506592, -3.0472683906555176, -0.00015162411727942526, -8.20159912109375e-05, -7.62939453125e-05, -2.86102294921875e-05, 0.0, -0.0048334598541259766, -0.00012743455590680242, 0.0, -0.000164031982421875, -9.1552734375e-05, -0.00079345703125, -0.00022375564731191844, -2.1099953301018104e-05, -0.0002384185791015625, 0.0, -0.00042779993964359164, -0.002634525066241622, -2.741813204920618e-06, -1.9073486328125e-06, -7.62939453125e-06, -0.0003337860107421875, -1.1444091796875e-05, -0.0012363914866000414, -3.0040735509828664e-05, 0.0, -9.5367431640625e-06, -0.027402877807617188], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(MinionHasWyrm()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Minion", "Has", "Wyrm", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -4.644188549400376, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template19", "hole1": {"id": "Minion", "_type": "Name"}, "hole0": "MinionSummoned"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -0.0021152496337890625, -2.288818359375e-05, -4.410743713378906e-05, -1.6689286894688848e-06, -0.00010752252273960039, -6.377696263371035e-05, -0.0002142190933227539, 0.0, -5.7220458984375e-06, -7.82012939453125e-05, -0.0001884683733806014, -3.6954811548639555e-06, -5.14984130859375e-05, -0.00091552734375, -0.04889869689941406, -0.004220368340611458, -0.23589646816253662, -1.1920928244535389e-07, -1.52587890625e-05, -1.9073486328125e-06, -0.7534778118133545, -3.4918181896209717, -2.47955322265625e-05, -7.62939453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.001232743263244629, -0.0002947991597466171, 0.0, -0.0002307891845703125, -0.00014495849609375, -0.0010662078857421875, -0.0002685741928871721, -5.102093564346433e-05, -0.00109100341796875, 0.0, -0.000564727874007076, -0.0033342833630740643, -2.503394853192731e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.0003337860107421875, -1.71661376953125e-05, -0.0008747357642278075, -3.1590458092978224e-05, 0.0, -7.62939453125e-06, -0.0386962890625], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(Minion()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 59, 155, "Minion", "Summoned", "<EOS>", 25, 133, "Minion", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 63, 171, "Self", "Selector", "<EOS>", 205, 71]}, {"score": -6.74711717015191, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ManaWyrm", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm"}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-5.7220458984375e-06, -0.0021762847900390625, -4.2914423829643056e-05, -3.3855139918159693e-05, -0.0010432521812617779, -2.7213245630264282e-06, -9.536726793157868e-06, -1.0728830375228426e-06, 0.0, -0.000125885009765625, -3.62396240234375e-05, -2.7418097943154862e-06, -0.00021612606360577047, -6.413459777832031e-05, 0.0, -0.00016272063658107072, -3.2544045097893104e-05, -0.05337822437286377, 0.0, -0.00022518634796142578, -1.9073486328125e-06, -0.000102996826171875, -1.9073486328125e-06, -1.2516951755969785e-05, 0.0, -1.9073486328125e-06, -6.686040878295898, -0.0019683837890625, -7.152530088205822e-06, -0.00021384059800766408, -3.290163658675738e-05, -0.0011736154556274414], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3)\n", "choice_history": [77, 145, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"score": -0.05239161929397085, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -0.03720724582672119, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -0.0006017684936523438, -1.1920928244535389e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.5290647455146527, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -3.5138421058654785, 0.0, -0.0001201629638671875, -1.71661376953125e-05, -0.0005807876586914062, -2.3841855067985307e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, charge=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -4.643144220966619, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 1, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -4.599844932556152, 0.0, -0.00016069412231445312, 0.0, -0.00011277198791503906, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -5.650509774568491e-05, 0.0, -5.7220458984375e-06, -0.003055572509765625, -5.7220458984375e-06, -2.264974000354414e-06, -4.398822784423828e-05, -0.0005003190017305315, -1.1920928244535389e-07, -0.03744184970855713, 0.0, -7.2479248046875e-05, -9.5367431640625e-06, -0.0006093978881835938, -1.1920928244535389e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.616791457741542, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "divine_shield", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -5.600623607635498, 0.0, -0.001129150390625, -1.71661376953125e-05, -0.0005171298980712891, -1.1920928244535389e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, divine_shield=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "divine_shield", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.519054117981106, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template20", "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "charge"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "taunt"}], "hole2": 7, "hole1": 1, "hole0": "Minion"}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -6.362936019897461, -0.0005950927734375, -0.002945035696029663, -3.099440846199286e-06, -1.9073486328125e-06, 0.0, -0.018082618713378906, 0.0, -0.010745048522949219, -2.288818359375e-05, -1.9073486328125e-06, -0.047286033630371094, -0.000102996826171875, -7.05718994140625e-05, -7.62939453125e-06, -0.0005742311477661133, -1.1920928244535389e-07, -0.0038967132568359375, -1.9073486328125e-06, -0.059583425521850586, 0.0, -9.72747802734375e-05, -9.5367431640625e-06, -0.00039041039417497814, -2.0265579223632812e-06], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, charge=True, taunt=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 96, 162, "Minion", "<EOS>", "1", "<EOS>", "7", "<EOS>", 213, 76, 195, "charge", "<EOS>", 26, 134, "True", "<EOS>", 76, 195, "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.782915327162975, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -7.756086826324463, -2.0265579223632812e-06, -0.012270092964172363, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -0.0005047321319580078, -1.1920928244535389e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1, taunt=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.912455291359656, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "find_spell_target", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -7.832398414611816, 0.0, -0.06438255310058594, -1.52587890625e-05, -0.0011544227600097656, -3.576278118089249e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, find_spell_target=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "find_spell_target", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.104770393032332, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 1, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -4.599844932556152, 0.0, -0.00016069412231445312, 0.0, -0.00011277198791503906, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -5.650509774568491e-05, 0.0, -5.7220458984375e-06, -0.003055572509765625, -5.7220458984375e-06, -2.264974000354414e-06, -4.398822784423828e-05, -0.0005003190017305315, -1.1920928244535389e-07, -3.4990200996398926, 0.0, -0.0001277923583984375, -1.71661376953125e-05, -0.0005942583084106445, -2.3841855067985307e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, charge=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.646717519371741, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "3", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -8.580099105834961, 0.0, -0.05100727081298828, -1.1444091796875e-05, -0.0010950565338134766, -3.576278118089249e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, 3=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "3", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.75797711279641, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "<UNK>Warden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -8.705751419067383, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -0.03720724582672119, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -0.0006017684936523438, -1.1920928244535389e-07], "inferred_code": "class <UNK>Warden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "choice_history": [77, 145, "<UNK>", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.797944648631287, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shan<UNK>", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "taunt", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -8.74571418762207, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -0.03720724582672119, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -0.0006017684936523438, -1.1920928244535389e-07], "inferred_code": "class Mogu'shan<UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "choice_history": [77, 145, "Mogu'shan", "<UNK>", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.801740560625824, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "Summon"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Deathrattle", "_type": "Name"}}, "hole2": "deathrattle", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -7.382502555847168, 0.0, -0.0003719329833984375, -1.9073486328125e-06, -5.7220458984375e-06, -0.000102996826171875, -0.009621739387512207, 0.0, -0.5333347320556641, -0.41669178009033203, -0.02998638153076172, -0.11813506484031677, -0.0003270567976869643, -0.000331878662109375, -9.5367431640625e-06, -0.29504016041755676, -4.982833343092352e-05, -0.0001125335693359375, -1.9073486328125e-06, -0.0006066539790481329, -1.9073486328125e-06, 0.0], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, deathrattle=Deathrattle(Summon(Taunt()),\n            PlayerSelector()))\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 20, 111, 25, 133, "Deathrattle", "<EOS>", 206, 59, 155, "Summon", "<EOS>", 25, 133, "Taunt", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -9.002624721138758, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spare_part_list", "hole1": 7, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -0.0003566741943359375, -0.00016592556494288146, -0.00016115828475449234, -6.079665126890177e-06, -6.794929504394531e-06, -3.4570680327306036e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002536773681640625, -8.20159912109375e-05, -2.861018856492592e-06, -4.6133995056152344e-05, -2.0265579223632812e-06, -1.1444091796875e-05, -0.010144591331481934, -3.4570634852570947e-06, -0.00013697147369384766, 0.0, -0.00013875961303710938, 0.0, -3.814697265625e-06, 0.0, -4.971012458554469e-05, 0.0, -5.7220458984375e-06, -0.002262115478515625, -5.7220458984375e-06, -2.0265558760002023e-06, -4.208087921142578e-05, -0.000494596955832094, -1.1920928244535389e-07, -8.980340003967285, 0.0, -0.006775856018066406, -7.62939453125e-06, -0.0009968280792236328, -1.1920928244535389e-07], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, spare_part_list=True)\n", "choice_history": [77, 145, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "7", "<EOS>", "spare_part_list", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -9.105329806076952, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template10"}, {"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Template38"}, {"id": "game", "_type": "Name"}, {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}], "hole1": "summon", "hole0": {"_type": "Template25", "hole0": "Mogu'shanWarden"}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -8.01209545135498, -5.4596363042946905e-05, -0.00015567637456115335, -4.768370445162873e-07, -0.09645140171051025, -7.271765298355604e-06, 0.0, -3.24249267578125e-05, -7.05718994140625e-05, -0.0012798309326171875, -3.933898824470816e-06, -0.0002086162567138672, -2.0265579223632812e-06, -1.33514404296875e-05, -0.0052078962326049805, -9.298280929215252e-06, -0.0007755756378173828, 0.0, -0.00015354156494140625, 0.0, -0.0006275177001953125, 0.0, -6.198883056640625e-06, 0.0, -3.0517578125e-05, -3.814697265625e-05, -1.71661376953125e-05, -5.91278076171875e-05, 0.0, -0.059830665588378906, -6.4849853515625e-05, -0.0011844635009765625, -0.00040435791015625, -2.288818359375e-05, -5.7220458984375e-06, -0.0008801210788078606, -0.00032455421751365066, -6.67572021484375e-05, -1.52587890625e-05, -3.814697265625e-05, -0.0004177093505859375, -0.007094263564795256, -8.344646857949556e-07, -0.0008754730224609375, -0.0007991790771484375, -5.7220458984375e-05, -0.02861640602350235, -9.536738616588991e-07, -0.02507781982421875, -0.0093994140625, -0.001331329345703125, -0.005053520202636719, -0.0018253326416015625, -0.00186920166015625, -0.0097885113209486, -0.22563977539539337, -0.040518391877412796, -0.2336425632238388, -1.4066597032069694e-05, -0.043023109436035156, -0.01980113983154297, -0.005537986755371094, -7.05718994140625e-05, -0.0004825592041015625, 0.0, -0.14710330963134766, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -0.00015866756439208984, -1.33514404296875e-05, -1.9073486328125e-06, -0.0002651214599609375, -2.288818359375e-05, -2.6702880859375e-05, -0.0016574859619140625, 0.0, -6.866455078125e-05, -0.0050182342529296875, -0.0001392364501953125, -0.00033235547016374767, 0.0, -0.0008640289306640625, -0.0005645751953125, -0.0011348724365234375, -0.0001220703125, -0.03254127502441406, -7.82012939453125e-05, -0.001430511474609375, -7.2479248046875e-05, -0.000492095947265625, -0.000896453857421875, -0.0005893707275390625, -0.000110626220703125, -0.028413057327270508, -1.2755369425576646e-05, -0.0018845796585083008, 0.0, -5.340576171875e-05, -1.9073486328125e-06, -0.014685392379760742, 0.0, -0.011224746704101562, -7.62939453125e-06, -0.0005645751953125, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -0.0002315044403076172, 0.0, -2.6702880859375e-05, -2.09808349609375e-05, -0.0002231597900390625, -0.0002918243408203125, -0.00031208799919113517, 0.0, -3.814697265625e-05, -0.00266265869140625, -8.392333984375e-05, -0.0002269744873046875, 0.0, -0.009429076686501503, 0.0], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            Mogu'shanWarden().summon(player, game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 217, 97, 166, 34, 171, "Mogu'shan", "Warden", "<EOS>", "summon", "<EOS>", 207, 73, 53, 133, "game", "<EOS>", 48, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -10.642491882757895, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Mogu'shanWarden", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole6": [{"_type": "Template10"}, {"_type": "For", "body": [{"_type": "Template23", "hole2": [{"_type": "Template38"}, {"id": "game", "_type": "Name"}, {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}], "hole1": "summon", "hole0": {"_type": "Template25", "hole0": "Mogu'shan"}}], "target": {"id": "i", "_type": "Name"}, "iter": {"_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Template33"}], "func": {"id": "range", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "MinionCard"}, "score_history": [-0.0001125335693359375, -8.01209545135498, -5.4596363042946905e-05, -0.00015567637456115335, -4.768370445162873e-07, -0.09645140171051025, -7.271765298355604e-06, 0.0, -3.24249267578125e-05, -7.05718994140625e-05, -0.0012798309326171875, -3.933898824470816e-06, -0.0002086162567138672, -2.0265579223632812e-06, -1.33514404296875e-05, -0.0052078962326049805, -9.298280929215252e-06, -0.0007755756378173828, 0.0, -0.00015354156494140625, 0.0, -0.0006275177001953125, 0.0, -6.198883056640625e-06, 0.0, -3.0517578125e-05, -3.814697265625e-05, -1.71661376953125e-05, -5.91278076171875e-05, 0.0, -0.059830665588378906, -6.4849853515625e-05, -0.0011844635009765625, -0.00040435791015625, -2.288818359375e-05, -5.7220458984375e-06, -0.0008801210788078606, -0.00032455421751365066, -6.67572021484375e-05, -1.52587890625e-05, -3.814697265625e-05, -0.0004177093505859375, -0.007094263564795256, -8.344646857949556e-07, -0.0008754730224609375, -0.0007991790771484375, -5.7220458984375e-05, -0.02861640602350235, -9.536738616588991e-07, -0.02507781982421875, -0.0093994140625, -0.001331329345703125, -0.005053520202636719, -0.0018253326416015625, -0.00186920166015625, -0.0097885113209486, -1.857521414756775, -0.22407810389995575, -1.1920858014491387e-05, -0.053055763244628906, -0.02024078369140625, -0.004609107971191406, -2.6702880859375e-05, -0.00022518634796142578, 0.0, -0.0942678451538086, -3.814697265625e-06, -1.33514404296875e-05, -5.7220458984375e-06, -0.00012421607971191406, -1.71661376953125e-05, -1.9073486328125e-06, -0.0002918243408203125, -2.47955322265625e-05, -2.47955322265625e-05, -0.0015769004821777344, 0.0, -7.62939453125e-05, -0.0048885345458984375, -0.0001373291015625, -0.0003297328657936305, 0.0, -0.0008106231689453125, -0.0004940032958984375, -0.001110076904296875, -0.0001239776611328125, -0.032622337341308594, -7.62939453125e-05, -0.0014591217041015625, -7.2479248046875e-05, -0.000484466552734375, -0.0008411407470703125, -0.0005645751953125, -0.0001087188720703125, -0.027828404679894447, -1.2755369425576646e-05, -0.001861572265625, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -0.014670133590698242, 0.0, -0.011260032653808594, -7.62939453125e-06, -0.0005512237548828125, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -0.0002219676971435547, 0.0, -2.6702880859375e-05, -2.09808349609375e-05, -0.0002231597900390625, -0.000293731689453125, -0.000310299830744043, 0.0, -3.814697265625e-05, -0.0026531219482421875, -8.392333984375e-05, -0.0002288818359375, 0.0, -0.009351417422294617, 0.0], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            Mogu'shan().summon(player, game, len(player.minions))\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 87, 117, 25, 133, "i", "<EOS>", 20, 111, 25, 133, "range", "<EOS>", 206, 55, 138, "0", "<EOS>", 68, 217, 97, 166, 34, 171, "Mogu'shan", "<EOS>", "summon", "<EOS>", 207, 73, 53, 133, "game", "<EOS>", 48, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"score": -4.677762257661584, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -1.215999722480774, 0.0, -5.7220458984375e-06, -0.6159076690673828, -0.11398124694824219, -7.62939453125e-06, -0.0009670257568359375, 0.0, -0.4960308074951172, -0.35951995849609375, -0.0034875869750976562, -0.0020514726638793945, 0.0, -0.00311279296875, -0.0029096603393554688, -0.0010814666748046875, -0.0004150867462158203, 0.0, -0.0006084442138671875, -0.0076770782470703125, -0.002655029296875, -0.0004972219467163086, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2, self)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.739093290204039, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "bind", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -0.39417076110839844, -2.508453845977783, -7.748603820800781e-06, -0.026914596557617188, -0.20504379272460938, -0.00466156005859375, -0.9000968933105469, -0.0056438446044921875, -0.0015342209953814745, -3.576278118089249e-07, -5.340576171875e-05, -0.02611541748046875, -0.00110626220703125, -0.0003688335418701172, 0.0, -8.20159912109375e-05, -0.016466140747070312, -0.0029811859130859375, -0.0004309415817260742, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.bind(2)\n        player.draw()\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 42, "bind", "<EOS>", 205, 68, 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.943701166918913, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -0.39417076110839844, -2.1095542907714844, -4.768370445162873e-07, -1.1444091796875e-05, -0.09168148040771484, -0.0007476806640625, -0.15537738800048828, -0.2173595428466797, -3.814697265625e-06, -0.0050106048583984375, -0.11280520260334015, 0.0, -0.022397398948669434, -1.0728830375228426e-06, -0.000148773193359375, -0.13422203063964844, -0.00533294677734375, -0.24933433532714844, -0.04429054260253906, -7.62939453125e-06, -0.004810333251953125, -0.14792142808437347, 0.0, -0.02362847328186035, -9.536738616588991e-07, -0.0002536773681640625, -0.027597427368164062, -0.00658416748046875, -0.2946643829345703, -0.035388946533203125, -5.7220458984375e-06, -0.00273895263671875, -0.1738891303539276, 0.0, -0.02409231662750244, -7.152555099310121e-07, -8.392333984375e-05, -0.014621734619140625], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 42, "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -5.6418519655979935, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -0.39417076110839844, -2.1095542907714844, -4.768370445162873e-07, -1.1444091796875e-05, -0.09168148040771484, -0.0007476806640625, -0.15537738800048828, -0.2173595428466797, -3.814697265625e-06, -0.0050106048583984375, -0.11280520260334015, 0.0, -0.022397398948669434, -1.0728830375228426e-06, -0.000148773193359375, -0.13422203063964844, -0.00533294677734375, -1.524362564086914, -0.19989776611328125, -0.001824498176574707, 0.0, -0.00023651123046875, -0.012603759765625, -0.00860595703125, -0.0005345344543457031, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 42, "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.894523936118503, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -2.7225794792175293, 0.0, -0.000335693359375, -0.003841400146484375, -0.010457992553710938, -0.1720895767211914, -0.0019083023071289062, 0.0, -0.021635055541992188, -0.013544559478759766, 0.0, -0.04248917102813721, -3.576278118089249e-07, -7.43865966796875e-05, -0.009332656860351562, -0.022708892822265625, -0.31843090057373047, -0.009899139404296875, -1.9073486328125e-06, -0.0020198822021484375, -0.08415519446134567, 0.0, -0.035835981369018555, -4.768370445162873e-07, -8.7738037109375e-05, -0.01450347900390625, -0.0120849609375, -0.3587474822998047, -0.02467823028564453, -3.814697265625e-06, -0.0026416778564453125, -0.11693153530359268, 0.0, -0.02725684642791748, -5.960462772236497e-07, -0.0001220703125, -0.015277862548828125], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -5.946686316541104, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -0.39417076110839844, -2.1095542907714844, -4.768370445162873e-07, -1.1444091796875e-05, -0.09168148040771484, -0.0007476806640625, -0.15537738800048828, -0.2173595428466797, -3.814697265625e-06, -0.0050106048583984375, -0.11280520260334015, 0.0, -0.022397398948669434, -1.0728830375228426e-06, -0.000148773193359375, -0.13422203063964844, -0.00533294677734375, -0.24933433532714844, -0.04429054260253906, -7.62939453125e-06, -0.004810333251953125, -0.14792142808437347, 0.0, -0.02362847328186035, -9.536738616588991e-07, -0.0002536773681640625, -0.027597427368164062, -0.00658416748046875, -1.3821535110473633, -0.164276123046875, -0.002041339874267578, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.draw()\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 42, "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 165, 42, "draw", "<EOS>"]}, {"score": -6.359252440538114, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -2.7225794792175293, 0.0, -0.000335693359375, -0.003841400146484375, -0.010457992553710938, -0.1720895767211914, -0.0019083023071289062, 0.0, -0.021635055541992188, -0.013544559478759766, 0.0, -0.04248917102813721, -3.576278118089249e-07, -7.43865966796875e-05, -0.009332656860351562, -0.022708892822265625, -1.3101692199707031, -0.15184783935546875, -0.0014461278915405273, 0.0, -0.00020599365234375, -0.00628662109375, -0.01693439483642578, -0.0005180835723876953, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.draw()\n        player.draw()\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 165, 42, "draw", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -6.817009906079363, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -2.7225794792175293, 0.0, -0.000335693359375, -0.003841400146484375, -0.010457992553710938, -0.1720895767211914, -0.0019083023071289062, 0.0, -0.021635055541992188, -0.013544559478759766, 0.0, -0.04248917102813721, -3.576278118089249e-07, -7.43865966796875e-05, -0.009332656860351562, -0.022708892822265625, -0.31843090057373047, -0.009899139404296875, -1.9073486328125e-06, -0.0020198822021484375, -0.08415519446134567, 0.0, -0.035835981369018555, -4.768370445162873e-07, -8.7738037109375e-05, -0.01450347900390625, -0.0120849609375, -1.213404655456543, -0.2529029846191406, -0.0018384456634521484, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.draw()\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 165, 42, "draw", "<EOS>"]}, {"score": -7.770593917720021, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template35"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Assign", "value": {"_type": "Num", "n": 0}, "targets": [{"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Template38"}}]}, {"_type": "AugAssign", "value": {"_type": "Template35"}, "target": {"attr": "mana", "_type": "Attribute", "value": {"_type": "Template38"}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "chosen_card", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -1.215999722480774, 0.0, -5.7220458984375e-06, -1.2027044296264648, -0.0013914108276367188, 0.0, -0.000881195068359375, 0.0, -0.3048543930053711, -0.0007228851318359375, -1.33514404296875e-05, -3.814697265625e-05, -7.62939453125e-06, -0.45679759979248047, -0.11990022659301758, 0.0, -0.25563812255859375, -1.52587890625e-05, -0.14234526455402374, -2.3841830625315197e-06, -0.034325599670410156, -0.0007171630859375, -5.53131103515625e-05, 0.0, -1.33514404296875e-05, -0.036761317402124405, -3.218649908376392e-06, -0.03410053253173828, -0.43158912658691406, -0.02143096923828125, -0.02384662628173828, -0.22696208953857422, -0.030399799346923828, -3.814697265625e-06, -0.001079559326171875, -0.0001354217529296875, -1.9073486328125e-05, -0.3130940794944763, -3.814697265625e-06, -0.04338264465332031, -1.9073486328125e-06, -1.020504117012024, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(3, self)\n        player.<UNK> = 0\n        player.mana += 3\n        player.trigger('card_drawn', chosen_card)\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 70, 53, 133, "self", "<EOS>", 82, 103, 205, 45, 104, 42, "<UNK>", "<EOS>", 27, 138, "0", "<EOS>", 83, 105, 17, 104, 42, "mana", "<EOS>", 78, 39, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "chosen_card", "<EOS>"]}, {"score": -7.927266462496959, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Assign", "value": {"_type": "Num", "n": 0}, "targets": [{"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Template38"}}]}, {"_type": "AugAssign", "value": {"_type": "Template35"}, "target": {"attr": "mana", "_type": "Attribute", "value": {"_type": "Template38"}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "chosen_card", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -1.215999722480774, 0.0, -5.7220458984375e-06, -0.6159076690673828, -0.11398124694824219, -7.62939453125e-06, -0.0009670257568359375, 0.0, -1.093008041381836, -0.000995635986328125, -1.9073486328125e-05, -4.00543212890625e-05, -1.33514404296875e-05, -0.3359966278076172, -0.13857126235961914, 0.0, -0.227294921875, -1.52587890625e-05, -0.14024409651756287, -2.50339189733495e-06, -0.038990020751953125, -0.00069427490234375, -6.103515625e-05, 0.0, -1.52587890625e-05, -0.03783198818564415, -3.3378591979271732e-06, -0.03517913818359375, -0.41556549072265625, -0.023555755615234375, -0.024801254272460938, -0.21471118927001953, -0.03106832504272461, -3.814697265625e-06, -0.00109100341796875, -0.0001354217529296875, -1.9073486328125e-05, -0.30752116441726685, -3.814697265625e-06, -0.043048858642578125, -1.9073486328125e-06, -1.0190478563308716, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2, self)\n        player.<UNK> = 0\n        player.mana += 3\n        player.trigger('card_drawn', chosen_card)\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 68, 53, 133, "self", "<EOS>", 82, 103, 205, 45, 104, 42, "<UNK>", "<EOS>", 27, 138, "0", "<EOS>", 83, 105, 17, 104, 42, "mana", "<EOS>", 78, 39, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "chosen_card", "<EOS>"]}, {"score": -8.387512958399952, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template35"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Assign", "value": {"_type": "Num", "n": 0}, "targets": [{"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Template38"}}]}, {"_type": "AugAssign", "value": {"_type": "Template35"}, "target": {"attr": "mana", "_type": "Attribute", "value": {"_type": "Template38"}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "mirror", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -1.215999722480774, 0.0, -5.7220458984375e-06, -1.2027044296264648, -0.0013914108276367188, 0.0, -0.000881195068359375, 0.0, -0.3048543930053711, -0.0007228851318359375, -1.33514404296875e-05, -3.814697265625e-05, -7.62939453125e-06, -0.45679759979248047, -0.11990022659301758, 0.0, -0.25563812255859375, -1.52587890625e-05, -0.14234526455402374, -2.3841830625315197e-06, -0.034325599670410156, -0.0007171630859375, -5.53131103515625e-05, 0.0, -1.33514404296875e-05, -0.036761317402124405, -3.218649908376392e-06, -0.03410053253173828, -0.43158912658691406, -0.02143096923828125, -0.02384662628173828, -0.22696208953857422, -0.030399799346923828, -3.814697265625e-06, -0.001079559326171875, -0.0001354217529296875, -1.9073486328125e-05, -0.3130940794944763, -3.814697265625e-06, -0.04338264465332031, -1.9073486328125e-06, -1.6374231576919556, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(3, self)\n        player.<UNK> = 0\n        player.mana += 3\n        player.trigger('card_drawn', mirror)\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 70, 53, 133, "self", "<EOS>", 82, 103, 205, 45, 104, 42, "<UNK>", "<EOS>", 27, 138, "0", "<EOS>", 83, 105, 17, 104, 42, "mana", "<EOS>", 78, 39, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "mirror", "<EOS>"]}, {"score": -8.551619394473278, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Assign", "value": {"_type": "Num", "n": 0}, "targets": [{"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Template38"}}]}, {"_type": "AugAssign", "value": {"_type": "Template35"}, "target": {"attr": "mana", "_type": "Attribute", "value": {"_type": "Template38"}}, "op": {"_type": "Add"}}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "mirror", "_type": "Name"}], "hole1": "trigger", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -1.215999722480774, 0.0, -5.7220458984375e-06, -0.6159076690673828, -0.11398124694824219, -7.62939453125e-06, -0.0009670257568359375, 0.0, -1.093008041381836, -0.000995635986328125, -1.9073486328125e-05, -4.00543212890625e-05, -1.33514404296875e-05, -0.3359966278076172, -0.13857126235961914, 0.0, -0.227294921875, -1.52587890625e-05, -0.14024409651756287, -2.50339189733495e-06, -0.038990020751953125, -0.00069427490234375, -6.103515625e-05, 0.0, -1.52587890625e-05, -0.03783198818564415, -3.3378591979271732e-06, -0.03517913818359375, -0.41556549072265625, -0.023555755615234375, -0.024801254272460938, -0.21471118927001953, -0.03106832504272461, -3.814697265625e-06, -0.00109100341796875, -0.0001354217529296875, -1.9073486328125e-05, -0.30752116441726685, -3.814697265625e-06, -0.043048858642578125, -1.9073486328125e-06, -1.64340078830719, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(2, self)\n        player.<UNK> = 0\n        player.mana += 3\n        player.trigger('card_drawn', mirror)\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 68, 53, 133, "self", "<EOS>", 82, 103, 205, 45, 104, 42, "<UNK>", "<EOS>", 27, 138, "0", "<EOS>", 83, 105, 17, 104, 42, "mana", "<EOS>", 78, 39, 97, 166, 42, "trigger", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "mirror", "<EOS>"]}, {"score": -9.186898569370946, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -2.7225794792175293, 0.0, -0.000335693359375, -0.003841400146484375, -0.010457992553710938, -0.1720895767211914, -0.0019083023071289062, 0.0, -0.021635055541992188, -0.013544559478759766, 0.0, -0.04248917102813721, -3.576278118089249e-07, -7.43865966796875e-05, -0.009332656860351562, -0.022708892822265625, -0.31843090057373047, -0.009899139404296875, -1.9073486328125e-06, -0.0020198822021484375, -0.08415519446134567, 0.0, -0.035835981369018555, -4.768370445162873e-07, -8.7738037109375e-05, -0.01450347900390625, -0.0120849609375, -0.3587474822998047, -0.02467823028564453, -3.814697265625e-06, -0.0026416778564453125, -2.3925700187683105, -8.344646857949556e-07, -1.0501075983047485, -1.1920928244535389e-07, -0.000164031982421875, -0.009120941162109375], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hand.increase_armor(2)\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hand", "<EOS>", "increase_armor", "<EOS>", 205, 68]}, {"score": -9.673494387677117, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole1": {"id": "Mana", "_type": "Name"}, "hole0": "Buff"}], "hole1": "append", "hole0": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -0.39417076110839844, -2.1095542907714844, -4.768370445162873e-07, -1.1444091796875e-05, -0.09168148040771484, -0.0007476806640625, -0.15537738800048828, -0.2173595428466797, -3.814697265625e-06, -0.0050106048583984375, -0.11280520260334015, 0.0, -0.022397398948669434, -1.0728830375228426e-06, -0.000148773193359375, -0.13422203063964844, -0.00533294677734375, -0.24933433532714844, -0.04429054260253906, -7.62939453125e-06, -0.004810333251953125, -0.14792142808437347, 0.0, -0.02362847328186035, -9.536738616588991e-07, -0.0002536773681640625, -0.027597427368164062, -0.00658416748046875, -0.2946643829345703, -0.035388946533203125, -5.7220458984375e-06, -0.00273895263671875, -2.1989707946777344, -9.536738616588991e-07, -0.6336960792541504, 0.0, -9.5367431640625e-06, -0.31443214416503906, -0.16947650909423828, -0.0029975175857543945, -1.1920928244535389e-07, -0.00031280517578125, -1.9073486328125e-05, -1.5544445514678955, -0.06812095642089844], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hero.increase_armor(2)\n        player.hand.append(Buff(Mana()))\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 42, "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hero", "<EOS>", "increase_armor", "<EOS>", 205, 68, 97, 166, 17, 104, 42, "hand", "<EOS>", "append", "<EOS>", 205, 59, 155, "Buff", "<EOS>", 25, 133, "Mana", "<EOS>"]}, {"score": -10.56862745644861, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Nourish", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Nourish"}, {"_type": "Num", "n": 5}, {"attr": "DRUID", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "2"}, {"_type": "Template25", "hole0": "WeaponSelector"}], "func": {"id": "BuffUntil", "_type": "Name"}}], "hole1": "add_effect", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template25", "hole0": "ExcessMana"}], "hole1": "append", "hole0": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "target", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}]}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-1.9073486328125e-06, -0.015003204345703125, -2.3722410332993604e-05, -3.29013928421773e-05, -1.9073484054388246e-06, -5.125998541188892e-06, -8.344646857949556e-07, -1.9073486328125e-06, -0.0760498046875, -7.62939453125e-06, -3.814697265625e-06, -0.000133514404296875, -1.71661376953125e-05, -1.1444091796875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.0609622222546022e-05, -8.20159912109375e-05, -0.0001697540283203125, 0.0, -3.933898824470816e-06, -0.00023567135212942958, -1.9073486328125e-05, -1.9073486328125e-06, -0.0001201629638671875, 0.0, -6.079673767089844e-06, -5.7220458984375e-06, -0.000109548527689185, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-06, -0.025167465209960938, -3.814697265625e-06, -7.43865966796875e-05, -3.814697265625e-06, 0.0, -0.2514514923095703, -1.9073486328125e-06, -0.0016336441040039062, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -0.000545501708984375, 0.0, -0.0013828277587890625, 0.0, -0.001981973648071289, 0.0, -0.1319509744644165, 0.0, -6.115436553955078e-05, 0.0, -2.6345191145082936e-05, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.659724825411104e-05, -2.7418097943154862e-06, -0.044921875, -0.00241851806640625, -0.0825033187866211, -0.008596420288085938, -1.1977720260620117, 0.0, -0.00179290771484375, 0.0, -0.0003151893615722656, 0.0, -0.006005047354847193, 0.0, -1.4887806177139282, 0.0, 0.0, -0.000537872314453125, -1.33514404296875e-05, -0.0002593994140625, 0.0, -0.1667344570159912, -0.39449799060821533, -7.867813110351562e-06, -3.62396240234375e-05, -0.000946044921875, -1.52587890625e-05, -1.4558876752853394, -0.013113795779645443, -0.01796436309814453, -3.814697265625e-06, -0.1477220058441162, -0.0001351833197986707, 0.0, -0.4884605407714844, -0.11038970947265625, -0.22762298583984375, -1.9073486328125e-06, -0.4082145690917969, -0.010027945972979069, -3.576278118089249e-07, -0.008021831512451172, 0.0, -2.86102294921875e-05, -0.6345977783203125, -0.00084686279296875, -0.08525930345058441, -0.29826298356056213, -0.0103069469332695, -0.0028352737426757812, -0.00025177001953125, -5.340576171875e-05, -0.08217430114746094, -1.9073486328125e-06, -0.0917654037475586, -1.9073486328125e-06, -0.8553481101989746, 0.0, -0.7719041109085083, 0.0, -0.049986839294433594, -6.866455078125e-05, -0.000965118408203125, 0.0, -0.8309049606323242, -0.034893035888671875, -0.025518417358398438, -0.000400543212890625, -0.0010403241030871868, -1.0728830375228426e-06, -0.0009673833847045898, 0.0], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(BuffUntil(2(), WeaponSelector()))\n        player.hand.append(ExcessMana())\n        card.target = True\n        super().reveal()\n", "choice_history": [77, 147, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Nourish", "<EOS>", 55, 138, "5", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 205, 48, 111, 25, 133, "Buff", "Until", "<EOS>", 206, 63, 171, "2", "<EOS>", 63, 171, "Weapon", "Selector", "<EOS>", 97, 166, 17, 104, 42, "hand", "<EOS>", "append", "<EOS>", 205, 63, 171, "Excess", "Mana", "<EOS>", 82, 103, 205, 45, 104, 25, 133, "card", "<EOS>", "target", "<EOS>", 26, 134, "True", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>"]}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"score": -3.356545038417032, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"id": "new_minon", "_type": "Name"}], "hole1": "append", "hole0": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.753046989440918, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.028288841247558594, -5.91278076171875e-05, -0.001010894775390625, -3.814697265625e-06, -0.30702662467956543, 0.0, -0.07437896728515625, -1.9073486328125e-06, -0.000110626220703125, -0.0016651153564453125, -0.0034275054931640625, -0.0009920597076416016, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010121583938598633, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013684272766113281, -0.0042057037353515625, -0.01633739471435547, -0.0012340545654296875, -0.07556724548339844, 0.0, -0.0002574920654296875, -0.02594626322388649, -2.3841830625315197e-06, -0.0041457414627075195, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0006809234619140625, -1.9073486328125e-05, -0.175376296043396, 0.0], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.hand.append(new_minon)\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 17, 104, 42, "hand", "<EOS>", "append", "<EOS>", 205, 53, 133, "new_minon", "<EOS>"]}, {"score": -3.4975530931090972, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"id": "new_minon", "_type": "Name"}], "hole1": "append", "hole0": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.7975397109985352, 0.0, -2.6702880859375e-05, 0.0, -3.838539123535156e-05, -0.000118255615234375, -0.0005412391037680209, 0.0, -9.5367431640625e-06, -0.0001316070556640625, 0.0, -0.00015091896057128906, -7.987019671418238e-06, -0.1072702407836914, -0.0062007904052734375, -0.001277923583984375, -0.0016345977783203125, -6.29425048828125e-05, -0.0001068115234375, -7.62939453125e-06, -0.301660418510437, -5.841255187988281e-06, -0.010053634643554688, -0.027258872985839844, -0.0019292831420898438, -1.9073486328125e-06, -0.00020157989638391882, -0.002074599266052246, 0.0, -0.000156402587890625, -3.814697265625e-06, -3.814697265625e-06, -0.016969799995422363, -1.9431114196777344e-05, -0.05225944519042969, -0.0025777816772460938, -0.013226866722106934, -0.001051187515258789, -1.9073486328125e-06, -0.002712249755859375, -0.010140419006347656, -0.033538818359375, -6.67572021484375e-05, -1.33514404296875e-05, -0.0012340545654296875, -1.9073486328125e-06, -0.30285918712615967, -1.1444091796875e-05, -0.0025262832641601562, -0.0001239776611328125, -8.58306884765625e-05, -1.71661376953125e-05, -0.00177764892578125, 0.0, -0.06778812408447266, -7.62939453125e-06, -0.00035893917083740234, -0.0005952119827270508, -0.1922597885131836, -0.011774063110351562, -0.0018548965454101562, -0.7529001235961914, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.027640342712402344, -5.91278076171875e-05, -0.00101470947265625, -3.814697265625e-06, -0.3060939311981201, 0.0, -0.07402324676513672, -1.9073486328125e-06, -0.000110626220703125, -0.001667022705078125, -0.0034389495849609375, -0.000990152359008789, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010117769241333008, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013683319091796875, -0.004204750061035156, -0.015959739685058594, -0.0012226104736328125, -0.07564926147460938, 0.0, -0.0002574920654296875, -0.02594495378434658, -2.3841830625315197e-06, -0.004132390022277832, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0006809234619140625, -2.09808349609375e-05, -0.17513787746429443, 0.0], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.hand.append(new_minon)\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 17, 104, 42, "hand", "<EOS>", "append", "<EOS>", 205, 53, 133, "new_minon", "<EOS>"]}, {"score": -4.077475971186118, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "card", "_type": "Name"}}], "args": {"_type": "Template13", "hole0": "card"}, "name": "reduce_cost"}, {"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "reduce_cost", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -2.9319591522216797, -0.041828155517578125, -0.0002269744873046875, -0.006992220412939787, -9.226798283634707e-05, -0.000728607177734375, -0.0021953582763671875, -0.03098595142364502, 0.0, -0.0013217926025390625, -0.1756887435913086, -0.0023555755615234375, -0.005893707275390625, -1.9073486328125e-06, -0.02889835834503174, 0.0, -0.007672309875488281, 0.0, -0.0003662109375, -0.0013370513916015625, -0.00077056884765625, -0.0029107332229614258, -3.933906555175781e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.002902984619140625, -0.0010967254638671875, -1.9073486328125e-06, -0.0001888275146484375, -0.00070953369140625, -0.001010894775390625, -0.01377105712890625, -0.0035200119018554688, -0.00110626220703125, -3.0517578125e-05, -0.000507354736328125, -0.0006999969482421875, -0.03366434574127197, -0.000118255615234375, -0.04643821716308594, -0.0011138916015625, -3.4332275390625e-05, -0.012867331504821777, -1.9073486328125e-06, -0.0002155303955078125, -1.9073486328125e-06, -0.02390766143798828, -1.9073486328125e-05, -0.0014438629150390625, -0.0011577606201171875, -1.33514404296875e-05, -0.008783340454101562, -2.6702880859375e-05], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 88, 118, "reduce_cost", "<EOS>", 2, 150, "card", "<EOS>", 217, 97, 166, 25, 133, "card", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 92, 97, 166, 42, "<UNK>", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "reduce_cost", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.228070835073936, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "card", "_type": "Name"}}], "args": {"_type": "Template13", "hole0": "card"}, "name": "reduce_cost"}, {"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_drawn"}, {"id": "reduce_cost", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"_type": "Template38"}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.7975397109985352, 0.0, -2.6702880859375e-05, 0.0, -3.838539123535156e-05, -0.000118255615234375, -0.0005412391037680209, 0.0, -9.5367431640625e-06, -0.0001316070556640625, 0.0, -0.00015091896057128906, -7.987019671418238e-06, -2.952803611755371, -0.042926788330078125, -0.000213623046875, -0.007051705848425627, -9.810923074837774e-05, -0.00070953369140625, -0.00212860107421875, -0.0315934419631958, 0.0, -0.0012874603271484375, -0.16094970703125, -0.00223541259765625, -0.005184173583984375, -1.9073486328125e-06, -0.027925610542297363, 0.0, -0.007687568664550781, 0.0, -0.000362396240234375, -0.001323699951171875, -0.000774383544921875, -0.0028973817825317383, -3.933906555175781e-06, -1.71661376953125e-05, -7.62939453125e-06, -0.0028858184814453125, -0.001094818115234375, -1.9073486328125e-06, -0.0001850128173828125, -0.000713348388671875, -0.00101470947265625, -0.01372528076171875, -0.0035190582275390625, -0.0011138916015625, -3.0517578125e-05, -0.0005054473876953125, -0.0007038116455078125, -0.03350412845611572, -0.0001201629638671875, -0.046733856201171875, -0.0011157989501953125, -3.4332275390625e-05, -0.012856841087341309, -1.9073486328125e-06, -0.0002155303955078125, -1.9073486328125e-06, -0.023940086364746094, -1.9073486328125e-05, -0.00144195556640625, -0.00115203857421875, -1.33514404296875e-05, -0.008803367614746094, -2.6702880859375e-05], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            card.add_buff(Buff(ManaChange(-3)))\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 220, 88, 118, "reduce_cost", "<EOS>", 2, 150, "card", "<EOS>", 217, 97, 166, 25, 133, "card", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 92, 97, 166, 42, "<UNK>", "<EOS>", 206, 56, 142, "card_drawn", "<EOS>", 53, 133, "reduce_cost", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -6.191508714008137, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"_type": "Template38"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.6642494201660156, -0.07229137420654297, -4.57763671875e-05, -5.7220458984375e-06, -0.0009098052978515625, -3.814697265625e-06, -1.3600132465362549, -1.9073486328125e-06, -0.00046634674072265625, -0.0002040863037109375, -8.392333984375e-05, -1.9073486328125e-06, -0.0029773712158203125, 0.0, -0.11073589324951172, -1.1444091796875e-05, -0.0003521442413330078, -0.0003204345703125, -0.6865119934082031, -0.04895782470703125, -0.0017461776733398438, -0.8418092727661133, -5.7220458984375e-06, -8.857250213623047e-05, -1.9073486328125e-06, -0.01736736297607422, -7.43865966796875e-05, -0.000713348388671875, -5.7220458984375e-06, -0.41467368602752686, 0.0, -0.07212352752685547, -1.9073486328125e-06, -0.0001087188720703125, -0.001781463623046875, -0.003833770751953125, -0.0008510351181030273, -4.220008850097656e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.010915994644165039, -0.0008069276809692383, 0.0, -5.340576171875e-05, -0.000339508056640625, -0.0008716583251953125, -0.014307022094726562, -0.004279136657714844], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, player)\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 73, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39]}, {"score": -6.338950372985323, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"_type": "Template38"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.7975397109985352, 0.0, -2.6702880859375e-05, 0.0, -3.838539123535156e-05, -0.000118255615234375, -0.0005412391037680209, 0.0, -9.5367431640625e-06, -0.0001316070556640625, 0.0, -0.00015091896057128906, -7.987019671418238e-06, -0.1072702407836914, -0.0062007904052734375, -0.001277923583984375, -0.0016345977783203125, -6.29425048828125e-05, -0.0001068115234375, -7.62939453125e-06, -0.301660418510437, -5.841255187988281e-06, -0.010053634643554688, -0.027258872985839844, -0.0019292831420898438, -1.9073486328125e-06, -0.00020157989638391882, -0.002074599266052246, 0.0, -0.000156402587890625, -3.814697265625e-06, -3.814697265625e-06, -0.016969799995422363, -1.9431114196777344e-05, -0.05225944519042969, -0.0025777816772460938, -0.013226866722106934, -0.001051187515258789, -1.9073486328125e-06, -0.002712249755859375, -0.010140419006347656, -0.033538818359375, -6.67572021484375e-05, -1.33514404296875e-05, -0.0012340545654296875, -1.9073486328125e-06, -0.30285918712615967, -1.1444091796875e-05, -0.0025262832641601562, -0.0001239776611328125, -8.58306884765625e-05, -1.71661376953125e-05, -0.00177764892578125, 0.0, -0.06778812408447266, -7.62939453125e-06, -0.00035893917083740234, -0.0005952119827270508, -0.1922597885131836, -0.011774063110351562, -0.0018548965454101562, -0.6644124984741211, -0.07621097564697266, -4.38690185546875e-05, -5.7220458984375e-06, -0.00090789794921875, -3.814697265625e-06, -1.3622794151306152, -1.9073486328125e-06, -0.00046253204345703125, -0.0002040863037109375, -8.392333984375e-05, -1.9073486328125e-06, -0.0029773712158203125, 0.0, -0.11087226867675781, -1.1444091796875e-05, -0.0003521442413330078, -0.0003204345703125, -0.6861715316772461, -0.04890632629394531, -0.00174713134765625, -0.8409566879272461, -5.7220458984375e-06, -8.857250213623047e-05, -1.9073486328125e-06, -0.016996383666992188, -7.43865966796875e-05, -0.0007171630859375, -5.7220458984375e-06, -0.41394269466400146, 0.0, -0.07177448272705078, -1.9073486328125e-06, -0.0001087188720703125, -0.0017833709716796875, -0.00384521484375, -0.0008510351181030273, -4.220008850097656e-05, -1.9073486328125e-05, -5.7220458984375e-06, -0.010914087295532227, -0.0008069276809692383, 0.0, -5.340576171875e-05, -0.0003414154052734375, -0.0008716583251953125, -0.014308929443359375, -0.0042781829833984375], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, player)\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 73, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39]}, {"score": -6.714369602397078, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"id": "chosen_card", "_type": "Name"}], "hole1": "append", "hole0": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.753046989440918, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.028288841247558594, -5.91278076171875e-05, -0.001010894775390625, -3.814697265625e-06, -0.30702662467956543, 0.0, -0.07437896728515625, -1.9073486328125e-06, -0.000110626220703125, -0.0016651153564453125, -0.0034275054931640625, -0.0009920597076416016, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010121583938598633, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013684272766113281, -0.0042057037353515625, -0.01633739471435547, -0.0012340545654296875, -0.07556724548339844, 0.0, -0.0002574920654296875, -0.02594626322388649, -2.3841830625315197e-06, -0.0041457414627075195, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0006809234619140625, -1.9073486328125e-05, -3.53320050239563, -3.576278118089249e-07], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.hand.append(chosen_card)\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 17, 104, 42, "hand", "<EOS>", "append", "<EOS>", 205, 53, 133, "chosen_card", "<EOS>"]}, {"score": -6.8583252259825755, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"id": "chosen_card", "_type": "Name"}], "hole1": "append", "hole0": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.7975397109985352, 0.0, -2.6702880859375e-05, 0.0, -3.838539123535156e-05, -0.000118255615234375, -0.0005412391037680209, 0.0, -9.5367431640625e-06, -0.0001316070556640625, 0.0, -0.00015091896057128906, -7.987019671418238e-06, -0.1072702407836914, -0.0062007904052734375, -0.001277923583984375, -0.0016345977783203125, -6.29425048828125e-05, -0.0001068115234375, -7.62939453125e-06, -0.301660418510437, -5.841255187988281e-06, -0.010053634643554688, -0.027258872985839844, -0.0019292831420898438, -1.9073486328125e-06, -0.00020157989638391882, -0.002074599266052246, 0.0, -0.000156402587890625, -3.814697265625e-06, -3.814697265625e-06, -0.016969799995422363, -1.9431114196777344e-05, -0.05225944519042969, -0.0025777816772460938, -0.013226866722106934, -0.001051187515258789, -1.9073486328125e-06, -0.002712249755859375, -0.010140419006347656, -0.033538818359375, -6.67572021484375e-05, -1.33514404296875e-05, -0.0012340545654296875, -1.9073486328125e-06, -0.30285918712615967, -1.1444091796875e-05, -0.0025262832641601562, -0.0001239776611328125, -8.58306884765625e-05, -1.71661376953125e-05, -0.00177764892578125, 0.0, -0.06778812408447266, -7.62939453125e-06, -0.00035893917083740234, -0.0005952119827270508, -0.1922597885131836, -0.011774063110351562, -0.0018548965454101562, -0.7529001235961914, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.027640342712402344, -5.91278076171875e-05, -0.00101470947265625, -3.814697265625e-06, -0.3060939311981201, 0.0, -0.07402324676513672, -1.9073486328125e-06, -0.000110626220703125, -0.001667022705078125, -0.0034389495849609375, -0.000990152359008789, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010117769241333008, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013683319091796875, -0.004204750061035156, -0.015959739685058594, -0.0012226104736328125, -0.07564926147460938, 0.0, -0.0002574920654296875, -0.02594495378434658, -2.3841830625315197e-06, -0.004132390022277832, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0006809234619140625, -2.09808349609375e-05, -3.535909652709961, -3.576278118089249e-07], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.hand.append(chosen_card)\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 17, 104, 42, "hand", "<EOS>", "append", "<EOS>", 205, 53, 133, "chosen_card", "<EOS>"]}, {"score": -7.418771453097513, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"id": "demon_card", "_type": "Name"}], "hole1": "append", "hole0": {"attr": "hand", "_type": "Attribute", "value": {"_type": "Template38"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.753046989440918, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.028288841247558594, -5.91278076171875e-05, -0.001010894775390625, -3.814697265625e-06, -0.30702662467956543, 0.0, -0.07437896728515625, -1.9073486328125e-06, -0.000110626220703125, -0.0016651153564453125, -0.0034275054931640625, -0.0009920597076416016, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010121583938598633, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013684272766113281, -0.0042057037353515625, -0.01633739471435547, -0.0012340545654296875, -0.07556724548339844, 0.0, -0.0002574920654296875, -0.02594626322388649, -2.3841830625315197e-06, -0.0041457414627075195, -1.1920928244535389e-07, -3.24249267578125e-05, -0.0006809234619140625, -1.9073486328125e-05, -4.237602710723877, 0.0], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.hand.append(demon_card)\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 17, 104, 42, "hand", "<EOS>", "append", "<EOS>", 205, 53, 133, "demon_card", "<EOS>"]}, {"score": -8.14295286302547, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "minions", "_type": "Attribute", "value": {"attr": "cards", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}}}], "hole1": "<UNK>", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.753046989440918, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.028288841247558594, -5.91278076171875e-05, -0.001010894775390625, -3.814697265625e-06, -0.30702662467956543, 0.0, -0.07437896728515625, -1.9073486328125e-06, -0.000110626220703125, -0.0016651153564453125, -0.0034275054931640625, -0.0009920597076416016, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010121583938598633, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013684272766113281, -0.0042057037353515625, -0.01633739471435547, -0.0012340545654296875, -2.6321372985839844, -0.03728151321411133, -3.0517578125e-05, -0.0001049041748046875, -0.19428539276123047, -0.10616874694824219, -0.04207038879394531, -0.000102996826171875, -0.00054931640625, -3.814697265625e-06, -0.36240386962890625, 0.0, -0.0021877288818359375, -3.62396240234375e-05, -0.5755348205566406, 0.0, -0.7975064516067505, 0.0, -0.004447817802429199, 0.0, -0.31356096267700195, -2.300739288330078e-05], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.<UNK>(hearthbreaker.cards.minions.<UNK>())\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 42, "<UNK>", "<EOS>", 205, 48, 109, 17, 104, 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -8.193158212947651, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"id": "new_minon", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.753046989440918, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.028288841247558594, -5.91278076171875e-05, -0.001010894775390625, -3.814697265625e-06, -0.30702662467956543, 0.0, -0.07437896728515625, -1.9073486328125e-06, -0.000110626220703125, -0.0016651153564453125, -0.0034275054931640625, -0.0009920597076416016, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010121583938598633, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013684272766113281, -0.0042057037353515625, -0.01633739471435547, -0.0012340545654296875, -2.6321372985839844, -0.03728151321411133, -3.0517578125e-05, -0.0001049041748046875, -1.7472496032714844, -2.09808349609375e-05, -0.7018163204193115, 0.0], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.<UNK>(new_minon)\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 42, "<UNK>", "<EOS>", 205, 53, 133, "new_minon", "<EOS>"]}, {"score": -8.281284786513766, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "minions", "_type": "Attribute", "value": {"attr": "cards", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}}}], "hole1": "<UNK>", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.7975397109985352, 0.0, -2.6702880859375e-05, 0.0, -3.838539123535156e-05, -0.000118255615234375, -0.0005412391037680209, 0.0, -9.5367431640625e-06, -0.0001316070556640625, 0.0, -0.00015091896057128906, -7.987019671418238e-06, -0.1072702407836914, -0.0062007904052734375, -0.001277923583984375, -0.0016345977783203125, -6.29425048828125e-05, -0.0001068115234375, -7.62939453125e-06, -0.301660418510437, -5.841255187988281e-06, -0.010053634643554688, -0.027258872985839844, -0.0019292831420898438, -1.9073486328125e-06, -0.00020157989638391882, -0.002074599266052246, 0.0, -0.000156402587890625, -3.814697265625e-06, -3.814697265625e-06, -0.016969799995422363, -1.9431114196777344e-05, -0.05225944519042969, -0.0025777816772460938, -0.013226866722106934, -0.001051187515258789, -1.9073486328125e-06, -0.002712249755859375, -0.010140419006347656, -0.033538818359375, -6.67572021484375e-05, -1.33514404296875e-05, -0.0012340545654296875, -1.9073486328125e-06, -0.30285918712615967, -1.1444091796875e-05, -0.0025262832641601562, -0.0001239776611328125, -8.58306884765625e-05, -1.71661376953125e-05, -0.00177764892578125, 0.0, -0.06778812408447266, -7.62939453125e-06, -0.00035893917083740234, -0.0005952119827270508, -0.1922597885131836, -0.011774063110351562, -0.0018548965454101562, -0.7529001235961914, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.027640342712402344, -5.91278076171875e-05, -0.00101470947265625, -3.814697265625e-06, -0.3060939311981201, 0.0, -0.07402324676513672, -1.9073486328125e-06, -0.000110626220703125, -0.001667022705078125, -0.0034389495849609375, -0.000990152359008789, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010117769241333008, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013683319091796875, -0.004204750061035156, -0.015959739685058594, -0.0012226104736328125, -2.6312026977539062, -0.03764963150024414, -3.0517578125e-05, -0.0001049041748046875, -0.1940603256225586, -0.10624504089355469, -0.042018890380859375, -0.000102996826171875, -0.0005435943603515625, -3.814697265625e-06, -0.35920238494873047, 0.0, -0.0021877288818359375, -3.62396240234375e-05, -0.5763869285583496, 0.0, -0.7979556322097778, 0.0, -0.0044411420822143555, 0.0, -0.31339502334594727, -2.300739288330078e-05], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.<UNK>(hearthbreaker.cards.minions.<UNK>())\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 42, "<UNK>", "<EOS>", 205, 48, 109, 17, 104, 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -8.72729832296352, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"id": "self", "_type": "Name"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template35"}}], "hole1": {"id": "ManaChange", "_type": "Name"}, "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"id": "new_minon", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "card", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}}}], "hole1": "<UNK>", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.753046989440918, -3.814697265625e-06, -0.0002442598342895508, 0.0, -0.028288841247558594, -5.91278076171875e-05, -0.001010894775390625, -3.814697265625e-06, -0.30702662467956543, 0.0, -0.07437896728515625, -1.9073486328125e-06, -0.000110626220703125, -0.0016651153564453125, -0.0034275054931640625, -0.0009920597076416016, -3.826618194580078e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.010121583938598633, -0.0007783174514770508, -1.9073486328125e-06, -5.340576171875e-05, -0.00035858154296875, -0.0008831024169921875, -0.013684272766113281, -0.0042057037353515625, -0.01633739471435547, -0.0012340545654296875, -2.6321372985839844, -0.03728151321411133, -3.0517578125e-05, -0.0001049041748046875, -0.19428539276123047, -0.10616874694824219, -0.04207038879394531, -0.000102996826171875, -0.00054931640625, -3.814697265625e-06, -0.36240386962890625, 0.0, -0.0021877288818359375, -3.62396240234375e-05, -1.4238557815551758, -1.9073486328125e-06, -0.010352134704589844, -1.9073486328125e-06, -0.23402392864227295, -3.814697265625e-05, -0.6071351766586304, -9.5367431640625e-06], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, self)\n        new_minon.add_buff(Buff(ManaChange(-3)))\n        player.<UNK>(attacker.card.minion_type.<UNK>())\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 53, 133, "self", "<EOS>", 97, 166, 25, 133, "new_minon", "<EOS>", "add_buff", "<EOS>", 205, 59, 157, "Buff", "<EOS>", 25, 133, "Mana", "Change", "<EOS>", 205, 74, 190, 100, 39, 97, 166, 42, "<UNK>", "<EOS>", 205, 48, 109, 17, 104, 17, 104, 17, 104, 25, 133, "attacker", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -10.959155153147748, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"_type": "Template38"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Spell<UNK>"}, {"_type": "Call", "func": {"id": "TurnEnded", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "player"}]}], "func": {"id": "BuffUntil", "_type": "Name"}}], "hole1": "trigger", "hole0": {"id": "self", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.6642494201660156, -0.07229137420654297, -4.57763671875e-05, -5.7220458984375e-06, -0.0009098052978515625, -3.814697265625e-06, -1.3600132465362549, -1.9073486328125e-06, -0.00046634674072265625, -0.0002040863037109375, -8.392333984375e-05, -1.9073486328125e-06, -0.0029773712158203125, 0.0, -0.11073589324951172, -1.1444091796875e-05, -0.0003521442413330078, -0.0003204345703125, -0.7327451705932617, -0.2619161605834961, -0.3583087921142578, -0.00106048583984375, -5.7220458984375e-06, -0.000782012939453125, 0.0, -0.30501091480255127, -1.9073486328125e-06, -0.06009054183959961, -1.4305104514278355e-06, -0.0005397796630859375, -0.43538951873779297, -1.9073486328125e-06, -0.05099010467529297, 0.0, -0.0070323944091796875, -0.06466574221849442, 0.0, -0.31411290168762207, 0.0, -0.011888504028320312, -1.71661376953125e-05, -0.0037384033203125, 0.0, -0.32282257080078125, 0.0, -0.24198532104492188, 0.0, -0.03771018981933594, -0.5264606475830078, -6.103515625e-05, -0.08063507080078125, 0.0, -0.06166422367095947, -0.02868497371673584, -3.814697265625e-06, -0.04975605010986328, -0.0045490264892578125, -2.47955322265625e-05, -0.4129400849342346, -1.583802580833435, -0.0020314452704042196, -0.11255455017089844, -0.005054473876953125, -0.0008068084716796875, -5.7220458984375e-06, -0.5125552415847778, -0.0239715576171875, -9.5367431640625e-06, -0.000102996826171875, -3.814697265625e-06, 0.0, -0.020394086837768555, -2.3841855067985307e-07, -0.00041103363037109375, 0.0, -0.2524837255477905, -0.0001583099365234375, 0.0], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, player)\n        new_minon = query.<UNK>(game.random_choice(player.opponent.minions))\n        self.trigger(BuffUntil(Spell<UNK>(), TurnEnded(player=EnemyPlayer())))\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 73, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 205, 48, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "self", "<EOS>", "trigger", "<EOS>", 205, 48, 111, 25, 133, "Buff", "Until", "<EOS>", 206, 63, 171, "Spell", "<UNK>", "<EOS>", 48, 110, 25, 133, "Turn", "Ended", "<EOS>", 212, 76, 195, "player", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>"]}, {"score": -12.365684937350323, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Preparation", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "ROGUE", "hole1": 0, "hole0": "Preparation"}], "hole6": [{"_type": "Template10"}, {"_type": "Assign", "value": {"_type": "Call", "func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}, "arg": "conditions"}]}, "targets": [{"id": "query", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Template38"}, {"_type": "Template38"}, {"_type": "Template38"}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Assign", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "func": {"attr": "random_choice", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "query", "_type": "Name"}}}, "targets": [{"id": "new_minon", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Spell<UNK>"}, {"_type": "Call", "func": {"id": "TurnEnded", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "CurrentPlayer"}, "arg": "player"}]}], "func": {"id": "BuffUntil", "_type": "Name"}}], "hole1": "trigger", "hole0": {"id": "self", "_type": "Name"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-3.814697265625e-06, -0.01445770263671875, -0.0007133323233574629, -1.049041748046875e-05, -1.8462655134499073e-05, -4.172325134277344e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.01035308837890625, -5.91278076171875e-05, -0.00018761781393550336, -9.655952453613281e-06, -1.0728830375228426e-06, -1.6093199519673362e-05, -0.6532402038574219, 0.0, -1.9073486328125e-05, 0.0, -3.063678741455078e-05, -0.00023651123046875, -0.00015353711205534637, 0.0, -7.62939453125e-06, -0.000202178955078125, 0.0, -0.00012230873107910156, -7.987019671418238e-06, -0.11026573181152344, -0.00716400146484375, -0.00093841552734375, -0.001888275146484375, -6.29425048828125e-05, -0.000110626220703125, -7.62939453125e-06, -0.2995600700378418, -5.841255187988281e-06, -0.009974479675292969, -0.027670860290527344, -0.001918792724609375, -1.9073486328125e-06, -0.00020348724501673132, -0.002062201499938965, 0.0, -0.0001583099365234375, -3.814697265625e-06, -3.814697265625e-06, -0.0170670747756958, -1.9431114196777344e-05, -0.052155494689941406, -0.0025768280029296875, -0.013222098350524902, -0.001051187515258789, -1.9073486328125e-06, -0.0027103424072265625, -0.010146141052246094, -0.03226757049560547, -6.67572021484375e-05, -1.33514404296875e-05, -0.00122833251953125, -1.9073486328125e-06, -0.30305755138397217, -1.1444091796875e-05, -0.0025234222412109375, -0.000125885009765625, -8.58306884765625e-05, -1.71661376953125e-05, -0.0017795562744140625, 0.0, -0.06775379180908203, -7.62939453125e-06, -0.0003598928451538086, -0.0005952119827270508, -0.19220829010009766, -0.011757850646972656, -0.0018558502197265625, -0.6642494201660156, -0.07229137420654297, -4.57763671875e-05, -5.7220458984375e-06, -0.0009098052978515625, -3.814697265625e-06, -1.3600132465362549, -1.9073486328125e-06, -0.00046634674072265625, -0.0002040863037109375, -8.392333984375e-05, -1.9073486328125e-06, -0.0029773712158203125, 0.0, -0.11073589324951172, -1.1444091796875e-05, -0.0003521442413330078, -0.0003204345703125, -0.7327451705932617, -0.2619161605834961, -0.3583087921142578, -0.00106048583984375, -5.7220458984375e-06, -0.000782012939453125, 0.0, -0.30501091480255127, -1.9073486328125e-06, -0.06009054183959961, -1.4305104514278355e-06, -0.0005397796630859375, -0.43538951873779297, -1.9073486328125e-06, -0.05099010467529297, 0.0, -0.0070323944091796875, -0.06466574221849442, 0.0, -0.31411290168762207, 0.0, -0.011888504028320312, -1.71661376953125e-05, -0.0037384033203125, 0.0, -0.32282257080078125, 0.0, -0.24198532104492188, 0.0, -0.03771018981933594, -0.5264606475830078, -6.103515625e-05, -0.08063507080078125, 0.0, -0.06166422367095947, -0.02868497371673584, -3.814697265625e-06, -0.04975605010986328, -0.0045490264892578125, -2.47955322265625e-05, -0.4129400849342346, -1.583802580833435, -0.0020314452704042196, -0.11255455017089844, -0.005054473876953125, -0.0008068084716796875, -5.7220458984375e-06, -0.5125552415847778, -0.0239715576171875, -9.5367431640625e-06, -0.000102996826171875, -3.814697265625e-06, 0.0, -0.020394086837768555, -2.3841855067985307e-07, -0.00041103363037109375, 0.0, -1.658704161643982, -0.00046765804290771484, 0.0], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        query = CardQuery(conditions=[IsMinion()])\n        new_minon = query.<UNK>(player, player, player)\n        new_minon = query.<UNK>(game.random_choice(player.opponent.minions))\n        self.trigger(BuffUntil(Spell<UNK>(), TurnEnded(player=CurrentPlayer()))\n            )\n", "choice_history": [77, 147, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 217, 98, 185, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 221, 92, 82, 103, 205, 53, 133, "query", "<EOS>", 20, 110, 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 33, 167, "Is", "Minion", "<EOS>", 205, 71, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 207, 73, 73, 73, 82, 103, 205, 53, 133, "new_minon", "<EOS>", 20, 111, 17, 104, 25, 133, "query", "<EOS>", "<UNK>", "<EOS>", 205, 48, 111, 17, 104, 25, 133, "game", "<EOS>", "random_choice", "<EOS>", 205, 45, 104, 17, 104, 42, "opponent", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "self", "<EOS>", "trigger", "<EOS>", 205, 48, 111, 25, 133, "Buff", "Until", "<EOS>", 206, 63, 171, "Spell", "<UNK>", "<EOS>", 48, 110, 25, 133, "Turn", "Ended", "<EOS>", 212, 76, 195, "player", "<EOS>", 34, 171, "Current", "Player", "<EOS>"]}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"score": -5.169847679886679, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Is"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -1.3227767944335938, -0.0010814666748046875, -0.06290912628173828, 0.0, -0.015277862548828125, -7.62939453125e-06, -0.14441299438476562, 0.0, -0.009100079536437988, 0.0, -0.4742927551269531, -0.19602584838867188, -0.0029888153076171875, -3.4332275390625e-05, 0.0, -0.02976965717971325, 0.0, -0.6969270706176758, 0.0, -0.000598907470703125, -0.1388082504272461, -0.001102447509765625, -0.1180257797241211, -0.0009527206420898438, -0.0002117156982421875, -0.0017455634661018848, -1.5497195136049413e-06, -0.0026532411575317383, 0.0, -0.010712623596191406, -7.2479248046875e-05, -3.24249267578125e-05, -0.0008667707443237305, -1.9073486328125e-06, -0.00054168701171875, -0.000171661376953125, -1.9073486328125e-05, -0.0002193450927734375, -0.07512664794921875, -0.01170969009399414, -2.47955322265625e-05, -2.288818359375e-05, -0.0003070831298828125, -3.814697265625e-05, -0.20807145535945892, -7.62939453125e-06, -0.0003299713134765625, -0.0002288818359375, -0.0012340545654296875, 0.0, -0.0001964569091796875, 0.0, -0.00054931640625, 0.0, -8.392333984375e-05, -2.288818359375e-05, -0.015416860580444336, 0.0, -0.00029754638671875, -2.288818359375e-05, -5.7220458984375e-05, -0.0001678466796875, -0.07348823547363281, -0.0012691019801422954, -6.4849853515625e-05, -1.52587890625e-05, -0.0006771087646484375, -1.9073486328125e-06, -0.3713996112346649, -5.7220458984375e-06, -0.0002899169921875, -0.0004558563232421875, -0.0019397735595703125, 0.0, -0.000102996826171875, 0.0, -0.0005092620849609375, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) is self.player:\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", 218, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -5.78443753212462, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "change_attack", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -0.8217868804931641, -1.52587890625e-05, -0.1036224365234375, -7.62939453125e-06, -0.001942353555932641, -1.1444091796875e-05, -0.4681415557861328, -0.012575149536132812, -2.09808349609375e-05, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.18617308139801025, 0.0, -0.00016021728515625, -0.0005931854248046875, -3.0517578125e-05, 0.0, -0.3967323303222656, 0.0, -0.16139602661132812, 0.0, -0.005312681198120117, -0.00033926963806152344, -0.013453483581542969, -4.0531158447265625e-06, -0.011199473403394222, 0.0, -0.05254936218261719, -0.08823204040527344, 0.0, -0.0036020278930664062, 0.0, -0.0003509521484375, 0.0, -0.0005341768264770508, -5.7220458984375e-06, -0.00022220601385924965, -1.9073486328125e-06, -0.004950761329382658, 0.0, -0.00220489501953125, -0.00689697265625, -0.0001354217529296875, 0.0, -0.005907893180847168, 0.0, -0.9591512680053711, 0.0, -9.5367431640625e-06, -0.36070919036865234, -3.0517578125e-05, -0.07123947143554688, -0.0051670074462890625, -4.38690185546875e-05, -0.0100175142288208, 0.0, -0.046581268310546875, 0.0, -0.003265380859375, -0.04313945770263672, -0.0001163482666015625, -0.000392913818359375, -0.0001735687255859375, -3.62396240234375e-05, -0.0002451900509186089, -1.0728830375228426e-06, -0.0012551546096801758, 0.0, -0.0043048858642578125, -0.000110626220703125, -4.00543212890625e-05, -0.0009603500366210938, -1.9073486328125e-06, -0.000530242919921875, -0.000804901123046875, -2.6702880859375e-05, -0.0002651214599609375, -0.12920761108398438, -0.006896257400512695, -6.115436553955078e-05, -2.288818359375e-05, -0.000339508056640625, -3.24249267578125e-05, -0.2100277990102768, -7.62939453125e-06, -0.0003204345703125, -0.00019073486328125, -0.00104522705078125, 0.0, -0.0002040863037109375, 0.0, -0.0006380081176757812, 0.0, -8.392333984375e-05, -1.9073486328125e-05, -0.021802663803100586, 0.0, -0.000324249267578125, -2.09808349609375e-05, -9.918212890625e-05, -0.0001983642578125, -0.0476531982421875, -0.0012822150019928813, -0.0001621246337890625, -1.52587890625e-05, -0.0006809234619140625, -1.9073486328125e-06, -0.3285984396934509, -7.62939453125e-06, -0.0002727508544921875, -0.000377655029296875, -0.002079010009765625, 0.0, -0.00010395050048828125, 0.0, -0.0004825592041015625, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) == 0:\n            target = self.player.game(self.player.minions)\n            target.change_attack(3)\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "change_attack", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.037451975596063, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -0.8217868804931641, -1.52587890625e-05, -0.1036224365234375, -7.62939453125e-06, -0.001942353555932641, -1.1444091796875e-05, -0.4681415557861328, -0.012575149536132812, -2.09808349609375e-05, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.18617308139801025, 0.0, -0.00016021728515625, -0.0005931854248046875, -3.0517578125e-05, 0.0, -0.3967323303222656, 0.0, -0.16139602661132812, 0.0, -0.005312681198120117, -0.00033926963806152344, -0.013453483581542969, -4.0531158447265625e-06, -0.011199473403394222, 0.0, -0.05254936218261719, -0.08823204040527344, 0.0, -0.0036020278930664062, 0.0, -0.0003509521484375, 0.0, -0.0005341768264770508, -5.7220458984375e-06, -0.00022220601385924965, -1.9073486328125e-06, -0.004950761329382658, 0.0, -0.00220489501953125, -0.00689697265625, -0.0001354217529296875, 0.0, -0.005907893180847168, 0.0, -0.869929313659668, 0.0, -5.7220458984375e-06, -0.3889045715332031, -7.2479248046875e-05, -0.33089160919189453, -0.012095451354980469, -5.340576171875e-05, -0.005394935607910156, 0.0, -0.08352184295654297, 0.0, -0.00281524658203125, -0.03849983215332031, -0.0001316070556640625, -0.000400543212890625, -0.0001735687255859375, -3.4332275390625e-05, -0.0002535328676458448, -9.536738616588991e-07, -0.0012875795364379883, 0.0, -0.004246711730957031, -0.0001087188720703125, -3.814697265625e-05, -0.0009698867797851562, -1.9073486328125e-06, -0.0005359649658203125, -0.000850677490234375, -2.288818359375e-05, -0.000263214111328125, -0.1401510238647461, -0.007056474685668945, -5.161762237548828e-05, -2.47955322265625e-05, -0.000331878662109375, -3.24249267578125e-05, -0.2107832282781601, -7.62939453125e-06, -0.000316619873046875, -0.0002079010009765625, -0.001064300537109375, 0.0, -0.0002079010009765625, 0.0, -0.0007295608520507812, 0.0, -7.62939453125e-05, -1.9073486328125e-05, -0.02242457866668701, 0.0, -0.0003337860107421875, -2.09808349609375e-05, -9.1552734375e-05, -0.0001964569091796875, -0.04938030242919922, -0.0012882946757599711, -0.000148773193359375, -1.52587890625e-05, -0.00067138671875, -1.9073486328125e-06, -0.3343469500541687, -7.62939453125e-06, -0.000270843505859375, -0.0003833770751953125, -0.0021572113037109375, 0.0, -0.00010395050048828125, 0.0, -0.00048542022705078125, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) == 0:\n            target = self.player.game(self.player.minions)\n            target.increase_health(3)\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.089444663022611, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "activate", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "deactivate"}, {"_type": "FunctionDef", "body": [{"test": {"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "taunt", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}]}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "args": {"_type": "arguments", "args": [{"_type": "Template28"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "target"}]}, "name": "_reveal"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -1.604970932006836, -5.030523971072398e-05, -0.0006423329468816519, -0.0006610149284824729, -0.0006972421542741358, -2.3365020751953125e-05, -9.1552734375e-05, -7.05718994140625e-05, -5.7220458984375e-06, -3.647804260253906e-05, -1.9073486328125e-06, 2.3841855067985307e-07, -4.768370445162873e-07, -0.0030651092529296875, 0.0, -0.00013375282287597656, 0.0, -0.0011119842529296875, 0.0, -6.73532485961914e-05, 0.0, -1.71661376953125e-05, -0.0002307891845703125, -1.33514404296875e-05, -0.0635223388671875, -1.52587890625e-05, -0.019807815551757812, -1.9073486328125e-06, -8.20159912109375e-05, -0.0008498055394738913, 0.0, -0.017067790031433105, -0.00022876262664794922, -0.005706191062927246, -5.7220458984375e-06, -1.52587890625e-05, -7.05718994140625e-05, -1.9073486328125e-06, -0.3024839758872986, -1.9073486328125e-06, -0.00022125244140625, -7.62939453125e-06, -1.71661376953125e-05, 0.0, -0.00020122528076171875, 0.0, -0.00031280517578125, 0.0, -0.0063915252685546875, -0.000133514404296875, -4.38690185546875e-05, -0.0009733438491821289, 0.0, -9.918212890625e-05, -4.76837158203125e-05, -7.2479248046875e-05, -1.9073486328125e-05, -0.031897544860839844, -3.62396240234375e-05, -0.3482046127319336, -7.62939453125e-06, -6.866455078125e-05, -0.0009365860605612397, 0.0, -0.007467332296073437, -0.0004128216824028641, -0.004299163352698088, -9.5367431640625e-06, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.38525959849357605, -1.9073486328125e-06, -0.000213623046875, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -0.00026035308837890625, 0.0, -0.000308990478515625, 0.0, -6.67572021484375e-05, -1.33514404296875e-05, -0.06977534294128418, 0.0, -0.0015430450439453125, -0.00251007080078125, -0.4578418731689453, -0.007348060607910156, -2.09808349609375e-05, -2.86102294921875e-05, -0.029758453369140625, 0.0, -0.00077056884765625, -1.9073486328125e-05, -0.005066037178039551, 0.0, -0.0011615753173828125, -0.0003719329833984375, -0.0004119873046875, -0.47698307037353516, -0.11254405975341797, -0.0012531280517578125, -1.71661376953125e-05, -0.000499725341796875, 0.0, -0.19466769695281982, -9.655952453613281e-06, -0.2068493366241455, -7.748603820800781e-06, -0.5277185440063477, -0.0015239715576171875, -0.0001049041748046875, -1.9073486328125e-06, -0.0001239776611328125, -1.71661376953125e-05, -0.0008716583251953125, -1.9073486328125e-06, -0.7660666704177856, 0.0, -0.40827083587646484, -1.9073486328125e-06, -0.000263214111328125, -1.33514404296875e-05, -2.47955322265625e-05, -1.1920928244535389e-07, -0.0001277923583984375, -0.0024700164794921875, -0.0012607574462890625, -2.47955322265625e-05, -0.0004966201377101243, -2.3841855067985307e-07, -0.0007985830307006836, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n\n    def _reveal(self, attacker, target):\n        if card.<UNK>():\n            target.taunt = True\n            super().reveal()\n", "choice_history": [77, 146, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 218, 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "_reveal", "<EOS>", 5, 193, 201, 0, 1, 192, "attacker", "<EOS>", 1, 192, "target", "<EOS>", 217, 89, 121, 20, 109, 17, 104, 25, 133, "card", "<EOS>", "<UNK>", "<EOS>", 218, 82, 103, 205, 45, 104, 25, 133, "target", "<EOS>", "taunt", "<EOS>", 26, 134, "True", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>"]}, {"score": -6.188302384146532, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}, "targets": [{"id": "mirror", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "change_attack", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -1.8557958602905273, -1.9073486328125e-05, -0.000652313232421875, -5.7220458984375e-06, -0.0006961822509765625, 0.0, -0.0023490190505981445, -3.814697265625e-06, -0.00015163421630859375, 0.0, -0.0005906820297241211, 0.0, -1.9073486328125e-06, -0.0026464462280273438, -5.340576171875e-05, -0.0001850128173828125, 0.0, -0.0025074256118386984, -4.88758041683468e-06, -0.15093326568603516, -0.00019073486328125, -0.0004367828369140625, -9.5367431640625e-06, -0.0004100799560546875, -3.814697265625e-06, -0.18817377090454102, -1.1920928244535389e-07, -0.000919342041015625, -0.000415802001953125, -0.00034618377685546875, -1.9073486328125e-06, -0.13767433166503906, 0.0, -0.0009282816317863762, -2.0265579223632812e-06, -0.02635645866394043, 0.0, -1.1444091796875e-05, -5.53131103515625e-05, 0.0, -0.005344390869140625, 0.0, -2.86102294921875e-05, 0.0, -0.0028295516967773438, -3.814697265625e-06, -0.0001891846623038873, -1.9073486328125e-06, -0.0007644886500202119, 0.0, -0.0027675628662109375, -0.000133514404296875, -0.004680633544921875, 0.0, -0.21673142910003662, 0.0, -1.0195770263671875, 0.0, -5.7220458984375e-06, -0.34122562408447266, -2.09808349609375e-05, -0.011652946472167969, -0.0005950927734375, -3.814697265625e-06, -0.003743290901184082, 0.0, -0.019445419311523438, 0.0, -0.0028076171875, -0.019422531127929688, -0.000354766845703125, -0.1573343276977539, -0.0006275177001953125, -0.00034332275390625, -0.0011925657745450735, -7.152555099310121e-07, -0.0018340349197387695, 0.0, -0.0020351409912109375, -0.13558578491210938, -0.001079559326171875, -5.7220458984375e-06, -0.00015806833107490093, -2.2649765014648438e-06, -0.0009995698928833008, 0.0, -0.004689216613769531, -0.0001964569091796875, -4.00543212890625e-05, -0.0010936260223388672, -5.7220458984375e-06, -0.0005664825439453125, -0.00054168701171875, -7.62939453125e-06, -0.000804901123046875, -0.4662923812866211, -0.005134224891662598, -5.161762237548828e-05, -3.814697265625e-05, -0.0003833770751953125, -2.86102294921875e-05, -0.26650938391685486, -7.62939453125e-06, -0.0002689361572265625, -0.000232696533203125, -0.001056671142578125, 0.0, -0.00022125244140625, 0.0, -0.00096893310546875, 0.0, -7.62939453125e-05, -2.288818359375e-05, -0.020056605339050293, 0.0, -0.0003757476806640625, -1.9073486328125e-05, -6.103515625e-05, -0.00019073486328125, -0.06900596618652344, -0.001333594205789268, -7.2479248046875e-05, -1.52587890625e-05, -0.0006237030029296875, -1.9073486328125e-06, -0.3710668683052063, -7.62939453125e-06, -0.00026702880859375, -0.0004291534423828125, -0.0023784637451171875, 0.0, -0.000102996826171875, 0.0, -0.0004968643188476562, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player.minions)\n            target.change_attack(3)\n            target.increase_health(2)\n            super().reveal()\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 221, 82, 103, 205, 53, 133, "mirror", "<EOS>", 20, 111, 17, 104, 25, 133, "minion", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "change_attack", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.446453393898132, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}, "targets": [{"id": "mirror", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -1.8557958602905273, -1.9073486328125e-05, -0.000652313232421875, -5.7220458984375e-06, -0.0006961822509765625, 0.0, -0.0023490190505981445, -3.814697265625e-06, -0.00015163421630859375, 0.0, -0.0005906820297241211, 0.0, -1.9073486328125e-06, -0.0026464462280273438, -5.340576171875e-05, -0.0001850128173828125, 0.0, -0.0025074256118386984, -4.88758041683468e-06, -0.15093326568603516, -0.00019073486328125, -0.0004367828369140625, -9.5367431640625e-06, -0.0004100799560546875, -3.814697265625e-06, -0.18817377090454102, -1.1920928244535389e-07, -0.000919342041015625, -0.000415802001953125, -0.00034618377685546875, -1.9073486328125e-06, -0.13767433166503906, 0.0, -0.0009282816317863762, -2.0265579223632812e-06, -0.02635645866394043, 0.0, -1.1444091796875e-05, -5.53131103515625e-05, 0.0, -0.005344390869140625, 0.0, -2.86102294921875e-05, 0.0, -0.0028295516967773438, -3.814697265625e-06, -0.0001891846623038873, -1.9073486328125e-06, -0.0007644886500202119, 0.0, -0.0027675628662109375, -0.000133514404296875, -0.004680633544921875, 0.0, -0.21673142910003662, 0.0, -0.6551284790039062, 0.0, -3.814697265625e-06, -0.4063911437988281, -0.000244140625, -0.29907894134521484, -0.24399089813232422, -1.52587890625e-05, -0.005061745643615723, 0.0, -0.0635833740234375, 0.0, -0.000583648681640625, -0.03190040588378906, -0.000331878662109375, -0.12142658233642578, -0.0005397796630859375, -0.0003643035888671875, -0.0011322008213028312, -7.152555099310121e-07, -0.0013915300369262695, 0.0, -0.002132415771484375, -0.13153553009033203, -0.00107574462890625, -3.814697265625e-06, -0.0001563998230267316, -2.2649765014648438e-06, -0.0009900331497192383, 0.0, -0.0046634674072265625, -0.000194549560546875, -4.00543212890625e-05, -0.0010936260223388672, -5.7220458984375e-06, -0.000545501708984375, -0.00054168701171875, -7.62939453125e-06, -0.0007457733154296875, -0.47690582275390625, -0.005078792572021484, -5.733966827392578e-05, -3.814697265625e-05, -0.0003871917724609375, -2.86102294921875e-05, -0.2656749188899994, -7.62939453125e-06, -0.00026702880859375, -0.000232696533203125, -0.0010433197021484375, 0.0, -0.00022125244140625, 0.0, -0.0009212493896484375, 0.0, -7.43865966796875e-05, -2.288818359375e-05, -0.019140005111694336, 0.0, -0.0003681182861328125, -1.9073486328125e-05, -6.103515625e-05, -0.0001888275146484375, -0.0717153549194336, -0.0013278721598908305, -7.05718994140625e-05, -1.52587890625e-05, -0.000629425048828125, -1.9073486328125e-06, -0.3709293007850647, -7.62939453125e-06, -0.000270843505859375, -0.000438690185546875, -0.002300262451171875, 0.0, -0.000102996826171875, 0.0, -0.0004968643188476562, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player.minions)\n            target.increase_health(2)\n            target.increase_health(2)\n            super().reveal()\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 221, 82, 103, 205, 53, 133, "mirror", "<EOS>", 20, 111, 17, 104, 25, 133, "minion", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.512043932128158, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Gt"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "change_attack", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -1.8721446990966797, -4.76837158203125e-05, -0.0002956390380859375, -1.9073486328125e-06, -0.00042205629870295525, -2.86102294921875e-05, -0.11248016357421875, -0.003452301025390625, -2.47955322265625e-05, -3.814697265625e-06, -8.58306884765625e-05, -1.1444091796875e-05, -0.37745368480682373, 0.0, -0.0001087188720703125, -0.0008373260498046875, -4.1961669921875e-05, 0.0, -0.36850833892822266, 0.0, -0.06981277465820312, 0.0, -0.005134105682373047, -0.00028252601623535156, -0.012357115745544434, -4.0531158447265625e-06, -0.0130577078089118, 0.0, -0.05944633483886719, -0.09734821319580078, 0.0, -0.0032825469970703125, 0.0, -9.1552734375e-05, 0.0, -0.00045311450958251953, -5.7220458984375e-06, -0.0002012252080021426, -1.9073486328125e-06, -0.004576205741614103, 0.0, -0.002040863037109375, -0.008482933044433594, -0.00012969970703125, 0.0, -0.00561976432800293, 0.0, -0.9788045883178711, 0.0, -9.5367431640625e-06, -0.3858308792114258, -2.288818359375e-05, -0.05546760559082031, -0.003681182861328125, -5.91278076171875e-05, -0.009364843368530273, 0.0, -0.04070854187011719, 0.0, -0.0033550262451171875, -0.043610572814941406, -0.0001430511474609375, -0.000385284423828125, -0.0001697540283203125, -3.4332275390625e-05, -0.00021670444402843714, -9.536738616588991e-07, -0.0012017488479614258, 0.0, -0.004023551940917969, -0.000118255615234375, -4.00543212890625e-05, -0.0009737014770507812, -1.9073486328125e-06, -0.0005340576171875, -0.0009021759033203125, -2.288818359375e-05, -0.0002689361572265625, -0.1520099639892578, -0.0069408416748046875, -4.971027374267578e-05, -2.47955322265625e-05, -0.0003337860107421875, -3.4332275390625e-05, -0.21343325078487396, -7.62939453125e-06, -0.000316619873046875, -0.000213623046875, -0.0010700225830078125, 0.0, -0.00020885467529296875, 0.0, -0.000644683837890625, 0.0, -8.20159912109375e-05, -1.9073486328125e-05, -0.021010279655456543, 0.0, -0.000324249267578125, -2.09808349609375e-05, -8.7738037109375e-05, -0.00019073486328125, -0.053096771240234375, -0.0012904404429718852, -0.0001392364501953125, -1.52587890625e-05, -0.0006809234619140625, -1.9073486328125e-06, -0.33482903242111206, -7.62939453125e-06, -0.000274658203125, -0.0003986358642578125, -0.002094268798828125, 0.0, -0.00010395050048828125, 0.0, -0.0004892349243164062, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) > 0:\n            target = self.player.game(self.player.minions)\n            target.change_attack(3)\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 9, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "change_attack", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.644484736224676, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Gt"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -1.8721446990966797, -4.76837158203125e-05, -0.0002956390380859375, -1.9073486328125e-06, -0.00042205629870295525, -2.86102294921875e-05, -0.11248016357421875, -0.003452301025390625, -2.47955322265625e-05, -3.814697265625e-06, -8.58306884765625e-05, -1.1444091796875e-05, -0.37745368480682373, 0.0, -0.0001087188720703125, -0.0008373260498046875, -4.1961669921875e-05, 0.0, -0.36850833892822266, 0.0, -0.06981277465820312, 0.0, -0.005134105682373047, -0.00028252601623535156, -0.012357115745544434, -4.0531158447265625e-06, -0.0130577078089118, 0.0, -0.05944633483886719, -0.09734821319580078, 0.0, -0.0032825469970703125, 0.0, -9.1552734375e-05, 0.0, -0.00045311450958251953, -5.7220458984375e-06, -0.0002012252080021426, -1.9073486328125e-06, -0.004576205741614103, 0.0, -0.002040863037109375, -0.008482933044433594, -0.00012969970703125, 0.0, -0.00561976432800293, 0.0, -0.8583307266235352, 0.0, -5.7220458984375e-06, -0.3679676055908203, -4.9591064453125e-05, -0.26935482025146484, -0.008161544799804688, -7.82012939453125e-05, -0.005008220672607422, 0.0, -0.07911872863769531, 0.0, -0.003204345703125, -0.04148578643798828, -0.000164031982421875, -0.0003871917724609375, -0.0001697540283203125, -3.4332275390625e-05, -0.00022361724404618144, -8.344646857949556e-07, -0.0012322664260864258, 0.0, -0.0039806365966796875, -0.00011444091796875, -4.00543212890625e-05, -0.0009794235229492188, -1.9073486328125e-06, -0.000537872314453125, -0.0009613037109375, -1.9073486328125e-05, -0.000270843505859375, -0.1609354019165039, -0.007082700729370117, -4.208087921142578e-05, -2.47955322265625e-05, -0.0003299713134765625, -3.4332275390625e-05, -0.21447156369686127, -7.62939453125e-06, -0.0003147125244140625, -0.0002288818359375, -0.001079559326171875, 0.0, -0.0002117156982421875, 0.0, -0.000743865966796875, 0.0, -7.62939453125e-05, -1.9073486328125e-05, -0.02190101146697998, 0.0, -0.000335693359375, -2.09808349609375e-05, -8.20159912109375e-05, -0.00019073486328125, -0.055451393127441406, -0.0013003348140046, -0.0001239776611328125, -1.52587890625e-05, -0.0006694793701171875, -1.9073486328125e-06, -0.3417951464653015, -7.62939453125e-06, -0.000274658203125, -0.0004062652587890625, -0.0021800994873046875, 0.0, -0.00010395050048828125, 0.0, -0.000492095947265625, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) > 0:\n            target = self.player.game(self.player.minions)\n            target.increase_health(3)\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 9, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.769981603613921, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}, "targets": [{"id": "mirror", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -1.8557958602905273, -1.9073486328125e-05, -0.000652313232421875, -5.7220458984375e-06, -0.0006961822509765625, 0.0, -0.0023490190505981445, -3.814697265625e-06, -0.00015163421630859375, 0.0, -0.0005906820297241211, 0.0, -1.9073486328125e-06, -0.0026464462280273438, -5.340576171875e-05, -0.0001850128173828125, 0.0, -0.0025074256118386984, -4.88758041683468e-06, -0.15093326568603516, -0.00019073486328125, -0.0004367828369140625, -9.5367431640625e-06, -0.0004100799560546875, -3.814697265625e-06, -0.18817377090454102, -1.1920928244535389e-07, -0.000919342041015625, -0.000415802001953125, -0.00034618377685546875, -1.9073486328125e-06, -0.13767433166503906, 0.0, -0.0009282816317863762, -2.0265579223632812e-06, -0.02635645866394043, 0.0, -1.1444091796875e-05, -5.53131103515625e-05, 0.0, -0.005344390869140625, 0.0, -2.86102294921875e-05, 0.0, -0.0028295516967773438, -3.814697265625e-06, -0.0001891846623038873, -1.9073486328125e-06, -0.0007644886500202119, 0.0, -0.0027675628662109375, -0.000133514404296875, -0.004680633544921875, 0.0, -0.21673142910003662, 0.0, -0.6551284790039062, 0.0, -3.814697265625e-06, -1.3104429244995117, -0.000743865966796875, -0.018140792846679688, -0.0007572174072265625, -7.62939453125e-06, -0.0023565292358398438, 0.0, -0.025119781494140625, 0.0, -0.00258636474609375, -0.015468597412109375, -0.000377655029296875, -0.1262798309326172, -0.0005645751953125, -0.000316619873046875, -0.0010749014327302575, -5.960462772236497e-07, -0.0017911195755004883, 0.0, -0.002254486083984375, -0.13163471221923828, -0.0010929107666015625, -5.7220458984375e-06, -0.00016665067232679576, -2.2649765014648438e-06, -0.0009976625442504883, 0.0, -0.004742622375488281, -0.00019073486328125, -4.00543212890625e-05, -0.0010974407196044922, -5.7220458984375e-06, -0.0005645751953125, -0.0005435943603515625, -7.62939453125e-06, -0.000782012939453125, -0.4692983627319336, -0.005118012428283691, -5.543231964111328e-05, -3.814697265625e-05, -0.000385284423828125, -2.86102294921875e-05, -0.267077773809433, -7.62939453125e-06, -0.00026702880859375, -0.000232696533203125, -0.0010528564453125, 0.0, -0.00022125244140625, 0.0, -0.0009765625, 0.0, -7.43865966796875e-05, -2.288818359375e-05, -0.0202406644821167, 0.0, -0.000377655029296875, -1.9073486328125e-05, -6.103515625e-05, -0.00019073486328125, -0.0688009262084961, -0.0013334749964997172, -7.2479248046875e-05, -1.52587890625e-05, -0.000621795654296875, -1.9073486328125e-06, -0.3719000220298767, -7.62939453125e-06, -0.00026702880859375, -0.00042724609375, -0.0023937225341796875, 0.0, -0.000102996826171875, 0.0, -0.00049591064453125, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player.minions)\n            target.increase_health(3)\n            target.increase_health(2)\n            super().reveal()\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 221, 82, 103, 205, 53, 133, "mirror", "<EOS>", 20, 111, 17, 104, 25, 133, "minion", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.788373820755787, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "change_attack", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -0.8217868804931641, -1.52587890625e-05, -0.1036224365234375, -7.62939453125e-06, -0.001942353555932641, -1.1444091796875e-05, -0.4681415557861328, -0.012575149536132812, -2.09808349609375e-05, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.18617308139801025, 0.0, -0.00016021728515625, -0.0005931854248046875, -3.0517578125e-05, 0.0, -1.1179323196411133, 0.0, -0.7624188661575317, -1.9073486328125e-06, -0.019215822219848633, 0.0, -1.52587890625e-05, -5.14984130859375e-05, 0.0, -0.012248992919921875, 0.0, -9.5367431640625e-06, 0.0, -0.0008726119995117188, -5.7220458984375e-06, -0.00012361991684883833, -1.9073486328125e-06, -0.0010902879294008017, 0.0, -0.0019359588623046875, -0.008214950561523438, -0.000110626220703125, 0.0, -0.009892821311950684, 0.0, -1.0189247131347656, 0.0, -9.5367431640625e-06, -0.14614295959472656, -2.47955322265625e-05, -0.058300018310546875, -0.0031986236572265625, -4.57763671875e-05, -0.010980606079101562, 0.0, -0.03738594055175781, 0.0, -0.0028839111328125, -0.04331016540527344, -0.0001163482666015625, -0.0004711151123046875, -0.000164031982421875, -4.9591064453125e-05, -0.00026366423116996884, -8.344646857949556e-07, -0.0014058351516723633, 0.0, -0.004216194152832031, -0.000118255615234375, -4.00543212890625e-05, -0.000937342643737793, -1.9073486328125e-06, -0.0005340576171875, -0.000743865966796875, -2.86102294921875e-05, -0.0002613067626953125, -0.13162899017333984, -0.00672602653503418, -6.878376007080078e-05, -2.288818359375e-05, -0.0003452301025390625, -3.24249267578125e-05, -0.2121865600347519, -7.62939453125e-06, -0.0003204345703125, -0.00018310546875, -0.0010242462158203125, 0.0, -0.0002040863037109375, 0.0, -0.0006666183471679688, 0.0, -8.20159912109375e-05, -1.9073486328125e-05, -0.021939992904663086, 0.0, -0.00032806396484375, -2.09808349609375e-05, -0.000102996826171875, -0.0002002716064453125, -0.04587364196777344, -0.0012800692347809672, -0.0001697540283203125, -1.52587890625e-05, -0.0006771087646484375, -1.9073486328125e-06, -0.3276835083961487, -7.62939453125e-06, -0.000270843505859375, -0.0003681182861328125, -0.002101898193359375, 0.0, -0.0001049041748046875, 0.0, -0.00047969818115234375, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) == 0:\n            target = minion.copy(self.player.minions)\n            target.change_attack(3)\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 25, 133, "minion", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "change_attack", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.965421436051251, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -0.8217868804931641, -1.52587890625e-05, -0.1036224365234375, -7.62939453125e-06, -0.001942353555932641, -1.1444091796875e-05, -0.4681415557861328, -0.012575149536132812, -2.09808349609375e-05, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.18617308139801025, 0.0, -0.00016021728515625, -0.0005931854248046875, -3.0517578125e-05, 0.0, -0.3967323303222656, 0.0, -0.16139602661132812, 0.0, -0.005312681198120117, -0.00033926963806152344, -0.013453483581542969, -4.0531158447265625e-06, -0.011199473403394222, 0.0, -0.05254936218261719, -0.08823204040527344, 0.0, -0.0036020278930664062, 0.0, -0.0003509521484375, 0.0, -0.0005341768264770508, -5.7220458984375e-06, -0.00022220601385924965, -1.9073486328125e-06, -0.004950761329382658, 0.0, -0.00220489501953125, -0.00689697265625, -0.0001354217529296875, 0.0, -0.005907893180847168, 0.0, -0.869929313659668, 0.0, -5.7220458984375e-06, -0.3889045715332031, -7.2479248046875e-05, -1.2904043197631836, -0.00237274169921875, -3.4332275390625e-05, -0.0015953817637637258, -3.6954811548639555e-06, -0.0015537738800048828, 0.0, -2.86102294921875e-05, -0.008235931396484375, -0.0005054473876953125, -2.09808349609375e-05, -0.0002704614889807999, -3.576277322281385e-06, -0.0005953311920166016, 0.0, -0.006157875061035156, -7.43865966796875e-05, -3.4332275390625e-05, -0.0009698867797851562, -3.814697265625e-06, -0.0007076263427734375, -0.000362396240234375, -1.33514404296875e-05, -0.001262664794921875, -0.19818496704101562, -0.007476925849914551, -2.288818359375e-05, -3.24249267578125e-05, -0.00031280517578125, -3.0517578125e-05, -0.23125730454921722, -9.5367431640625e-06, -0.000308990478515625, -0.0002288818359375, -0.0012569427490234375, 0.0, -0.00020503997802734375, 0.0, -0.0009002685546875, 0.0, -6.29425048828125e-05, -2.47955322265625e-05, -0.0203092098236084, 0.0, -0.0003528594970703125, -2.09808349609375e-05, -7.82012939453125e-05, -0.0002002716064453125, -0.05328559875488281, -0.0013082026271149516, -0.0001201629638671875, -1.52587890625e-05, -0.00063323974609375, -1.9073486328125e-06, -0.3485040068626404, -7.62939453125e-06, -0.0002689361572265625, -0.0003986358642578125, -0.00232696533203125, 0.0, -0.00010395050048828125, 0.0, -0.0004892349243164062, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) == 0:\n            target = self.player.game(self.player.minions)\n            target.increase_health(3)\n            super().reveal()\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 70, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.981059239325809, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -0.8217868804931641, -1.52587890625e-05, -0.1036224365234375, -7.62939453125e-06, -0.001942353555932641, -1.1444091796875e-05, -0.4681415557861328, -0.012575149536132812, -2.09808349609375e-05, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.18617308139801025, 0.0, -0.00016021728515625, -0.0005931854248046875, -3.0517578125e-05, 0.0, -0.3967323303222656, 0.0, -0.16139602661132812, 0.0, -0.005312681198120117, -0.00033926963806152344, -0.013453483581542969, -4.0531158447265625e-06, -0.011199473403394222, 0.0, -0.05254936218261719, -0.08823204040527344, 0.0, -0.0036020278930664062, 0.0, -0.0003509521484375, 0.0, -0.0005341768264770508, -5.7220458984375e-06, -0.00022220601385924965, -1.9073486328125e-06, -0.004950761329382658, 0.0, -0.00220489501953125, -0.00689697265625, -0.0001354217529296875, 0.0, -0.005907893180847168, 0.0, -0.869929313659668, 0.0, -5.7220458984375e-06, -1.592259407043457, -0.0001220703125, -0.0054378509521484375, -0.000476837158203125, -2.288818359375e-05, -0.0008395113400183618, -2.264974000354414e-06, -0.0006830692291259766, 0.0, -2.6702880859375e-05, -0.021363258361816406, -0.0005168914794921875, -1.1444091796875e-05, -0.00022672387422062457, -3.218649908376392e-06, -0.0005248785018920898, 0.0, -0.006145477294921875, -7.82012939453125e-05, -3.62396240234375e-05, -0.0010461807250976562, -3.814697265625e-06, -0.000652313232421875, -0.0004062652587890625, -1.1444091796875e-05, -0.0008697509765625, -0.2643280029296875, -0.006727814674377441, -2.86102294921875e-05, -3.4332275390625e-05, -0.0003376007080078125, -3.0517578125e-05, -0.23478160798549652, -7.62939453125e-06, -0.0002918243408203125, -0.0002384185791015625, -0.0011692047119140625, 0.0, -0.0002117156982421875, 0.0, -0.0008287429809570312, 0.0, -6.29425048828125e-05, -2.47955322265625e-05, -0.019030332565307617, 0.0, -0.000339508056640625, -2.09808349609375e-05, -6.866455078125e-05, -0.0001926422119140625, -0.06420326232910156, -0.001322150113992393, -9.1552734375e-05, -1.52587890625e-05, -0.000637054443359375, -1.9073486328125e-06, -0.35817617177963257, -7.62939453125e-06, -0.000274658203125, -0.000431060791015625, -0.002285003662109375, 0.0, -0.000102996826171875, 0.0, -0.0004949569702148438, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) == 0:\n            target = self.player.game(self.player.minions)\n            target.increase_health(2)\n            super().reveal()\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -6.994649639072286, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "copy", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -0.8217868804931641, -1.52587890625e-05, -0.1036224365234375, -7.62939453125e-06, -0.001942353555932641, -1.1444091796875e-05, -0.4681415557861328, -0.012575149536132812, -2.09808349609375e-05, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.18617308139801025, 0.0, -0.00016021728515625, -0.0005931854248046875, -3.0517578125e-05, 0.0, -1.1179323196411133, 0.0, -0.7624188661575317, -1.9073486328125e-06, -0.019215822219848633, 0.0, -1.52587890625e-05, -5.14984130859375e-05, 0.0, -0.012248992919921875, 0.0, -9.5367431640625e-06, 0.0, -0.0008726119995117188, -5.7220458984375e-06, -0.00012361991684883833, -1.9073486328125e-06, -0.0010902879294008017, 0.0, -0.0019359588623046875, -0.008214950561523438, -0.000110626220703125, 0.0, -0.009892821311950684, 0.0, -0.8544988632202148, 0.0, -7.62939453125e-06, -0.2505378723144531, -5.91278076171875e-05, -0.26456642150878906, -0.0076236724853515625, -5.53131103515625e-05, -0.00609433650970459, 0.0, -0.0783853530883789, 0.0, -0.002330780029296875, -0.040261268615722656, -0.000133514404296875, -0.0004711151123046875, -0.0001621246337890625, -4.76837158203125e-05, -0.00027188725653104484, -8.344646857949556e-07, -0.0014382600784301758, 0.0, -0.0041332244873046875, -0.00011444091796875, -3.814697265625e-05, -0.0009506940841674805, -1.9073486328125e-06, -0.00054168701171875, -0.0007877349853515625, -2.47955322265625e-05, -0.0002593994140625, -0.14506912231445312, -0.0068863630294799805, -5.733966827392578e-05, -2.47955322265625e-05, -0.0003376007080078125, -3.24249267578125e-05, -0.21284626424312592, -7.62939453125e-06, -0.000316619873046875, -0.0002040863037109375, -0.0010471343994140625, 0.0, -0.0002079010009765625, 0.0, -0.0007505416870117188, 0.0, -7.62939453125e-05, -1.9073486328125e-05, -0.022481799125671387, 0.0, -0.0003376007080078125, -2.09808349609375e-05, -9.34600830078125e-05, -0.0001983642578125, -0.04792308807373047, -0.001286148908548057, -0.000152587890625, -1.52587890625e-05, -0.000667572021484375, -1.9073486328125e-06, -0.33370548486709595, -7.62939453125e-06, -0.0002689361572265625, -0.000377655029296875, -0.0021724700927734375, 0.0, -0.0001049041748046875, 0.0, -0.00048351287841796875, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) == 0:\n            target = minion.copy(self.player.minions)\n            target.increase_health(3)\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('minion_died', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 25, 133, "minion", "<EOS>", "copy", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -7.061827880892615, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "<UNK>"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Is"}]}, "_type": "If", "body": [{"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -1.3227767944335938, -0.0010814666748046875, -0.06290912628173828, 0.0, -0.015277862548828125, -7.62939453125e-06, -0.14441299438476562, 0.0, -0.009100079536437988, 0.0, -0.4742927551269531, -0.19602584838867188, -0.0029888153076171875, -3.4332275390625e-05, 0.0, -0.02976965717971325, 0.0, -0.6969270706176758, 0.0, -0.000598907470703125, -0.1388082504272461, -0.001102447509765625, -0.1180257797241211, -0.0009527206420898438, -0.0002117156982421875, -0.0017455634661018848, -1.5497195136049413e-06, -0.0026532411575317383, 0.0, -0.010712623596191406, -7.2479248046875e-05, -3.24249267578125e-05, -0.0008667707443237305, -1.9073486328125e-06, -0.00054168701171875, -0.000171661376953125, -1.9073486328125e-05, -0.0002193450927734375, -0.07512664794921875, -0.01170969009399414, -2.47955322265625e-05, -2.288818359375e-05, -0.0003070831298828125, -3.814697265625e-05, -0.20807145535945892, -7.62939453125e-06, -0.0003299713134765625, -0.0002288818359375, -0.0012340545654296875, 0.0, -0.0001964569091796875, 0.0, -0.00054931640625, 0.0, -8.392333984375e-05, -2.288818359375e-05, -0.015416860580444336, 0.0, -0.00029754638671875, -2.288818359375e-05, -5.7220458984375e-05, -0.0001678466796875, -0.07348823547363281, -0.0012691019801422954, -6.4849853515625e-05, -1.52587890625e-05, -0.0006771087646484375, -1.9073486328125e-06, -2.2639882564544678, 0.0, -0.0010833740234375, -8.20159912109375e-05, -0.0008945465087890625, 0.0, -0.00018978118896484375, 0.0, -0.00044536590576171875, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) is self.player:\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('<UNK>', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", 218, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "<UNK>", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -7.792014057335955, "model_output": {"hole4": "<UNK>", "_type": "Template0", "hole3": "_reveal", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "minion_died"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "<UNK>"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"_type": "Template38"}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Repentance", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole6": [{"test": {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"_type": "ListComp", "generators": [{"ifs": [{"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}}], "_type": "comprehension", "target": {"id": "minion", "_type": "Name"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}], "elt": {"id": "minion", "_type": "Name"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}}, "targets": [{"id": "target", "_type": "Name"}]}, {"_type": "Template23", "hole2": [{"_type": "Template35"}], "hole1": "change_attack", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "increase_health", "hole0": {"id": "target", "_type": "Name"}}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "hole5": [{"_type": "arg", "arg": "attacker"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.22899246215820312, -2.479533213772811e-05, -7.677004032302648e-05, -0.0005779245402663946, -0.00010931118595181033, -6.186962127685547e-05, -2.288818359375e-05, -0.0009136199951171875, -3.0517578125e-05, -2.0623207092285156e-05, -1.52587890625e-05, 3.576278118089249e-07, -2.622604142743512e-06, -0.0046225786209106445, 0.0, -4.410743713378906e-05, 0.0, -0.0022602081298828125, 0.0, -0.06308233737945557, -1.9073486328125e-06, -0.0004215240478515625, -1.33514404296875e-05, -3.814697265625e-06, -0.17036819458007812, 0.0, -1.33514404296875e-05, -0.0005321502685546875, -0.000324249267578125, -0.014215469360351562, -5.53131103515625e-05, -0.15420055389404297, -4.76837158203125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.004770870320498943, 0.0, -0.00064849853515625, -0.1880321502685547, -0.01685619354248047, -0.0032520294189453125, 0.0, -0.04748346656560898, -1.1920928244535389e-07, -0.016739845275878906, -0.0013093948364257812, -1.52587890625e-05, 0.0, -0.08390796929597855, -4.768370445162873e-07, -0.013797760009765625, -1.52587890625e-05, -0.000186920166015625, 0.0, -0.0010700225830078125, -1.9073486328125e-06, -0.13083553314208984, -9.5367431640625e-06, -0.0002371072769165039, 0.0, -0.0012453794479370117, 0.0, -0.004329681396484375, -0.006129264831542969, -0.0016689300537109375, -0.0035333633422851562, -0.0003204345703125, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -0.0007462501525878906, 0.0, -0.005118608009070158, -4.768370445162873e-07, -3.814697265625e-06, -0.8217868804931641, -1.52587890625e-05, -0.1036224365234375, -7.62939453125e-06, -0.001942353555932641, -1.1444091796875e-05, -0.4681415557861328, -0.012575149536132812, -2.09808349609375e-05, -1.9073486328125e-06, -6.866455078125e-05, -5.7220458984375e-06, -0.18617308139801025, 0.0, -0.00016021728515625, -0.0005931854248046875, -3.0517578125e-05, 0.0, -0.3967323303222656, 0.0, -0.16139602661132812, 0.0, -0.005312681198120117, -0.00033926963806152344, -0.013453483581542969, -4.0531158447265625e-06, -0.011199473403394222, 0.0, -0.05254936218261719, -0.08823204040527344, 0.0, -0.0036020278930664062, 0.0, -0.0003509521484375, 0.0, -0.0005341768264770508, -5.7220458984375e-06, -0.00022220601385924965, -1.9073486328125e-06, -0.004950761329382658, 0.0, -0.00220489501953125, -0.00689697265625, -0.0001354217529296875, 0.0, -0.005907893180847168, 0.0, -0.9591512680053711, 0.0, -9.5367431640625e-06, -0.36070919036865234, -3.0517578125e-05, -0.07123947143554688, -0.0051670074462890625, -4.38690185546875e-05, -0.0100175142288208, 0.0, -0.046581268310546875, 0.0, -0.003265380859375, -0.04313945770263672, -0.0001163482666015625, -0.000392913818359375, -0.0001735687255859375, -3.62396240234375e-05, -0.0002451900509186089, -1.0728830375228426e-06, -0.0012551546096801758, 0.0, -0.0043048858642578125, -0.000110626220703125, -4.00543212890625e-05, -0.0009603500366210938, -1.9073486328125e-06, -0.000530242919921875, -0.000804901123046875, -2.6702880859375e-05, -0.0002651214599609375, -0.12920761108398438, -0.006896257400512695, -6.115436553955078e-05, -2.288818359375e-05, -0.000339508056640625, -3.24249267578125e-05, -0.2100277990102768, -7.62939453125e-06, -0.0003204345703125, -0.00019073486328125, -0.00104522705078125, 0.0, -0.0002040863037109375, 0.0, -0.0006380081176757812, 0.0, -8.392333984375e-05, -1.9073486328125e-05, -0.021802663803100586, 0.0, -0.000324249267578125, -2.09808349609375e-05, -9.918212890625e-05, -0.0001983642578125, -0.0476531982421875, -0.0012822150019928813, -0.0001621246337890625, -1.52587890625e-05, -0.0006809234619140625, -1.9073486328125e-06, -2.336918830871582, 0.0, -0.0009555816650390625, -8.20159912109375e-05, -0.0008983612060546875, 0.0, -0.00020694732666015625, 0.0, -0.0004367828369140625, 0.0], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, <UNK>, attacker):\n        if len([minion for minion in self.player.minions if not minion.<UNK>]\n            ) == 0:\n            target = self.player.game(self.player.minions)\n            target.change_attack(3)\n            target.increase_health(2)\n            super().reveal()\n\n    def activate(self, player):\n        player.bind('minion_died', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('<UNK>', self._reveal)\n", "choice_history": [77, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "_reveal", "<EOS>", "<UNK>", "<EOS>", 199, 1, 192, "attacker", "<EOS>", 217, 89, 121, 21, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 52, 130, 25, 133, "minion", "<EOS>", 203, 194, 25, 133, "minion", "<EOS>", 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 74, 190, 99, 17, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 202, 8, 205, 55, 138, "0", "<EOS>", 220, 82, 103, 205, 53, 133, "target", "<EOS>", 20, 111, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 97, 166, 25, 133, "target", "<EOS>", "change_attack", "<EOS>", 205, 70, 97, 166, 25, 133, "target", "<EOS>", "increase_health", "<EOS>", 205, 68, 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 218, 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 42, "bind", "<EOS>", 206, 56, 142, "minion_died", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 42, "unbind", "<EOS>", 206, 56, 142, "<UNK>", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"score": -1.505397847777651, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK>Damage"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -0.8151758909225464, -2.2888067178428173e-05, -0.018085479736328125, -5.7220458984375e-05, -0.11987364292144775, -0.0001285076141357422, -3.4928321838378906e-05, -1.71661376953125e-05, -0.0477447509765625], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK>Damage(), PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -2.591728261334076, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK><UNK>Damage"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -1.1585181951522827, -0.7736469507217407, -3.135166480205953e-05, -0.01709747314453125, -8.7738037109375e-05, -0.07594192028045654, -0.00014734268188476562, -1.3947486877441406e-05, -9.5367431640625e-06, -0.06197643280029297], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK><UNK>Damage(),\n            PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -2.7340507870944677, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK>Deathrattle"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -1.948071837425232, -0.011802077293395996, -0.07765674591064453, -1.33514404296875e-05, -0.16011379659175873, -0.00013744831085205078, -3.0994415283203125e-05, -9.5367431640625e-06, -0.03195762634277344], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK>Deathrattle(),\n            PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "Deathrattle", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -3.277442416296701, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK>Deathrattle<UNK>Damage"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -2.108647584915161, -0.6251206398010254, -0.060545921325683594, -6.031904922565445e-05, -0.010945320129394531, -6.866455078125e-05, -0.10353291034698486, -0.00016260147094726562, -3.707408905029297e-05, -2.09808349609375e-05, -0.040294647216796875], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle<UNK>Damage(),\n            PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "Deathrattle", "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -3.4523835396798788, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK>Deathrattle"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -2.108647584915161, -0.7827811241149902, -0.033577919006347656, -7.62939453125e-06, -0.18732613325119019, -0.00033354759216308594, -0.00028836727142333984, -5.7220458984375e-06, -0.011409759521484375], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "Deathrattle", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -3.581783583777444, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK>Damage"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -0.8151758909225464, -2.2888067178428173e-05, -0.018085479736328125, -5.7220458984375e-05, -2.2064223289489746, -0.001272797118872404, -2.491474151611328e-05, -5.7220458984375e-06, -0.03645896911621094], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK>Damage(), HeroSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "Damage", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.2863980113002, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Minion<UNK>Deathrattle"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -2.6540215015411377, -0.0491550974547863, -1.0539628267288208, -0.12060117721557617, -0.06472206115722656, -1.33514404296875e-05, -0.06682239472866058, -0.00035822391510009766, -3.8623809814453125e-05, -3.814697265625e-06, -0.028154373168945312], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(Minion<UNK>Deathrattle(),\n            PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "Minion", "<UNK>", "Deathrattle", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.39963240885708, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "LEGENDARY", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK>Damage"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -2.959947347640991, -3.814697265625e-06, -0.0002994537353515625, 0.0, -0.014497756958007812, -1.1920928244535389e-07, -3.814697265625e-06, -0.008497238159179688, -8.7738037109375e-05, -9.775112630450167e-06, -0.00010442353232065216, -0.00011431601888034493, -6.79492904964718e-06, -0.0026707476936280727, -1.9073486328125e-06, -0.007876396179199219, -0.0004444122314453125, -0.014807004481554031, -4.6491601096931845e-05, -0.0001087188720703125, -0.021839141845703125, -0.000335693359375, -0.09378977864980698, -0.167811319231987, -0.8080693483352661, -2.2888067178428173e-05, -0.019875526428222656, -5.14984130859375e-05, -0.1525658369064331, -0.00014197826385498047, -4.4465065002441406e-05, -1.9073486328125e-05, -0.04323768615722656], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK>Damage(), PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.559881260659033, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK>Deathrattle"}, {"_type": "Template25", "hole0": "HeroSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -1.948071837425232, -0.011802077293395996, -0.07765674591064453, -1.33514404296875e-05, -1.9767489433288574, -0.005977152846753597, -2.682209014892578e-05, -1.1444091796875e-05, -0.035315513610839844], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK>Deathrattle(),\n            HeroSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "Deathrattle", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -4.601473780272947, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "Minion<UNK><UNK>Damage"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -2.6540215015411377, -0.0491550974547863, -0.7035214304924011, -0.7104350924491882, -4.768266808241606e-05, -0.06748676300048828, -4.76837158203125e-05, -0.08388495445251465, -0.0002046823501586914, -1.5974044799804688e-05, -9.5367431640625e-06, -0.08409881591796875], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(Minion<UNK><UNK>Damage(),\n            PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "Minion", "<UNK>", "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -4.746126062874275, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -4.519783020019531, -0.037425994873046875, -0.00011884480773005635, -0.0032206762116402388, -0.00020062903058715165, -4.410743713378906e-06], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "0", "<EOS>", "1", "<EOS>"]}, {"score": -5.020884662560547, "model_output": {"hole4": "Minion", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK>Damage"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -3.279844284057617, -0.17618465423583984, -1.9073486328125e-06, -0.032677650451660156, -0.0001678466796875, -1.800043901312165e-05, -0.00013958834460936487, -0.00011312462447676808, -5.364416665543104e-06, -0.007137891836464405, -1.9073486328125e-06, -0.008374214172363281, -0.0002422332763671875, -0.01338198222219944, -4.220007031108253e-05, -0.000152587890625, -0.014924049377441406, -0.00032806396484375, -0.08221295475959778, -0.2954372465610504, -0.7982847094535828, -2.312648211955093e-05, -0.025895118713378906, -5.53131103515625e-05, -0.08412361145019531, -0.00016105175018310547, -2.3484230041503906e-05, -1.9073486328125e-05, -0.0605316162109375], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, Minion):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK>Damage(), PlayerSelector())])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "Minion", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71]}, {"score": -7.035997390158165, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"id": "<UNK>", "_type": "Name"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK><UNK>"}, {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK>Damage"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "ActionTag"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -1.1585181951522827, -0.8751951456069946, -2.075592041015625, -0.004048347473144531, -0.1262904405593872, -0.012608528137207031, -5.7578086853027344e-05, -0.08950138092041016, -0.04172515869140625, -5.340576171875e-05, -0.014083477668464184, -1.1308999061584473, -7.569517765659839e-05, -0.004467010498046875, -8.58306884765625e-05, -0.0067869252525269985, -5.567073458223604e-05, -0.0007379055023193359, -0.00016021728515625, -0.26241302490234375, -0.008915901184082031, -0.6718101501464844, -0.0010166168212890625, -0.04648911952972412, -0.0001523445826023817], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK><UNK>(), [ActionTag(\n            <UNK>Damage(), PlayerSelector())]), <UNK>])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "<UNK>", "<EOS>", 61, 168, "Action", "Tag", "<EOS>", 206, 63, 171, "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71, 205, 53, 133, "<UNK>", "<EOS>"]}, {"score": -7.076983336934511, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK><UNK>"}, {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "<UNK>Damage"}, {"_type": "Template25", "hole0": "PlayerSelector"}], "hole0": "ActionTag"}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -1.1585181951522827, -0.8751951456069946, -2.075592041015625, -0.004048347473144531, -0.1262904405593872, -0.012608528137207031, -5.7578086853027344e-05, -0.08950138092041016, -0.04172515869140625, -5.340576171875e-05, -0.014083477668464184, -1.1308999061584473, -7.569517765659839e-05, -0.004467010498046875, -8.58306884765625e-05, -0.0067869252525269985, -5.567073458223604e-05, -0.0007379055023193359, -0.00016021728515625, -0.26241302490234375, -0.008915901184082031, -0.7604541778564453], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK><UNK>(), [ActionTag(\n            <UNK>Damage(), PlayerSelector())])])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "<UNK>", "<EOS>", 61, 168, "Action", "Tag", "<EOS>", 206, 63, 171, "<UNK>", "Damage", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", 205, 71, 205, 71]}, {"score": -7.938677242997521, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "ShadowOfNothing", "hole2": [{"_type": "Template6", "hole3": "EPIC", "hole2": "PRIEST", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": [{"_type": "Template25", "hole0": "<UNK><UNK><UNK>"}, {"attr": "powers", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}], "hole0": "Aura"}, "hole2": "auras", "hole1": 1, "hole0": 0}], "hole1": "MinionCard"}, "score_history": [-8.7738037109375e-05, -0.00054931640625, -0.0028547984547913074, -0.007560537662357092, -0.0011730215046554804, -0.011024481616914272, -3.2842159271240234e-05, -2.479548675182741e-05, -6.794924956921022e-06, -1.9073486328125e-06, -0.00101470947265625, -0.0001697540283203125, -7.152531907195225e-06, -8.797604095889255e-05, -0.0002228021330665797, -8.20159912109375e-05, -0.00021088089852128178, -0.0004444122314453125, -1.619966860744171e-05, -1.62123869813513e-05, -0.05668485164642334, -2.6702880859375e-05, -0.057812515646219254, -3.933906555175781e-06, -0.00026345252990722656, 0.0, -0.0449906550347805, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019388198852539062, -0.0001392364501953125, -1.2755311217915732e-05, -0.00012123063061153516, -9.131081606028602e-05, -5.364416665543104e-06, -0.0028023505583405495, -1.9073486328125e-06, -0.008287429809570312, -0.00063323974609375, -0.011154300533235073, -4.220007031108253e-05, -0.0001010894775390625, -0.020084381103515625, -0.0003070831298828125, -0.07946118712425232, -0.176251620054245, -1.1585181951522827, -0.8751951456069946, -1.1563920974731445, -3.814697265625e-06, -0.07411956787109375, 0.0, -0.1522771120071411, 0.0, -1.593917727470398, -3.814697265625e-06, -6.4849853515625e-05, -0.4916572570800781, 0.0, -0.5303583145141602, 0.0, -0.321444034576416, 0.0, -1.080458402633667, -9.5367431640625e-06], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK><UNK><UNK>(), CHARACTER_CLASS.\n            powers), MINION_TYPE.DEMON])\n", "choice_history": [77, 145, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 33, 168, "Aura", "<EOS>", 206, 63, 171, "<UNK>", "<UNK>", "<UNK>", "<EOS>", 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "powers", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>"]}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"score": -4.2101004103608375, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -2.2280492782592773, -2.47955322265625e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -2.47955322265625e-05, -7.62939453125e-06, 0.0, -2.86102294921875e-05, -3.814697265625e-06, -0.0001010894775390625, 0.0, -7.05718994140625e-05, 0.0, -0.0006238222122192383, 0.0, -8.58306884765625e-05, 0.0, -1.4066675248614047e-05, 0.0, -7.2479248046875e-05, -3.814697265625e-06, 0.0, -7.748603820800781e-06, -7.152555099310121e-07, -0.18563175201416016, -2.47955322265625e-05, -0.008359909057617188, -4.00543212890625e-05, -4.1961669921875e-05, -3.814697265625e-06, -6.103515625e-05, 0.0, -1.1444089977885596e-05, -1.9073486328125e-06, -0.0001447198010282591, 0.0, -0.10628402233123779, 0.0, -8.58306884765625e-05, -0.49762725830078125, -9.1552734375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0002651214599609375, -0.0014127477770671248, -2.0265579223632812e-06, -2.09808349609375e-05, -0.00092315673828125, -5.7220458984375e-06, -1.33514404296875e-05, -0.0008624792098999023, 0.0, -0.5587244033813477, -0.2966632843017578, -0.2298269271850586, -0.07613480091094971, -8.106231689453125e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 212, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -4.52662443523991, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Template34"}, "arg": "overload"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -3.205183982849121, 0.0, -0.4609527587890625, -2.682209014892578e-05, -8.96453857421875e-05, -5.698132008546963e-05, 0.0, -4.38690185546875e-05, -3.814697265625e-06, -1.1444091796875e-05, -7.748603820800781e-06, -2.503394853192731e-06, -0.5649204254150391, -1.9073486328125e-06, -0.036765098571777344, -0.0015659332275390625, -0.0001201629638671875, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -1.0251998901367188e-05, -3.933906555175781e-06, -0.00012886129843536764, 0.0, -0.0491790771484375, 0.0, -5.14984130859375e-05, -0.06622695922851562, -5.7220458984375e-05, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001316070556640625, -0.000985621358267963, -2.0265579223632812e-06, -2.09808349609375e-05, -0.00164031982421875, -3.814697265625e-06, -1.33514404296875e-05, -0.000614166259765625, 0.0], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "overload", "<EOS>", 38, "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -4.690189574799199, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Template25", "hole0": "PlayerSelector"}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -2.0051136016845703, -1.9073486328125e-06, -0.00214803172275424, -0.0002574920654296875, 0.0, -0.0007382631301879883, 0.0, -0.00022302167781163007, 0.0, -7.43865966796875e-05, -1.52587890625e-05, -3.814697265625e-06, -5.9604644775390625e-06, -1.1920928244535389e-07, -0.705988883972168, -9.5367431640625e-06, -0.00194549560546875, -0.00099945068359375, -8.0108642578125e-05, 0.0, -2.09808349609375e-05, 0.0, -3.6597251892089844e-05, -1.9073486328125e-06, -0.00013684757868759334, 0.0, -0.44378530979156494, 0.0, -2.6702880859375e-05, -0.33929443359375, -8.392333984375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.00012969970703125, -0.0013694753870368004, -2.0265579223632812e-06, -2.288818359375e-05, -0.000720977783203125, -5.7220458984375e-06, -1.33514404296875e-05, -0.0010167360305786133, 0.0], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and PlayerSelector())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 218, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>"]}, {"score": -4.831242083242152, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"id": "self", "_type": "Name"}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -1.350234031677246, -0.0001392364501953125, -0.3685750961303711, -1.9073486328125e-06, -0.13952064514160156, -5.7220458984375e-06, -0.0003533363342285156, 0.0, -0.00020599365234375, -1.1444091796875e-05, -3.814697265625e-06, -2.6702880859375e-05, -1.1920928244535389e-07, -0.2262887954711914, -0.000179290771484375, -0.0012493133544921875, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.000110626220703125, 0.0, -2.014636993408203e-05, 0.0, -0.00011539423576323316, 0.0, -0.32508742809295654, 0.0, -3.814697265625e-05, -0.48224925994873047, -8.392333984375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.00014495849609375, -0.001079558627679944, -2.0265579223632812e-06, -2.47955322265625e-05, -0.0007781982421875, -7.62939453125e-06, -1.33514404296875e-05, -0.001124739646911621, 0.0, -0.18636226654052734, -0.3323478698730469, -0.1454019546508789, -0.08346104621887207, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and self)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 53, 133, "self", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.017715691335496, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "Template35"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "LtE"}]}, {"_type": "Call", "func": {"attr": "spell_targetable", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -2.063182830810547, -0.0003833770751953125, -0.4324989318847656, -0.0012912750244140625, -0.0004405975341796875, -5.7220458984375e-06, -2.6702880859375e-05, -0.00046539306640625, -5.7220458984375e-06, -0.0732431411743164, 0.0, -0.0051326751708984375, 0.0, -0.000762939453125, -1.9073486328125e-06, -0.0001436471939086914, 0.0, -0.000125885009765625, -7.62939453125e-06, -1.9073486328125e-06, -7.450580596923828e-05, -2.3841855067985307e-07, -0.14213275909423828, -0.00012969970703125, -0.0012493133544921875, -6.67572021484375e-05, -1.9073486328125e-05, 0.0, -7.05718994140625e-05, 0.0, -1.20401346066501e-05, 0.0, -0.00013446791854221374, 0.0, -0.38190925121307373, 0.0, -5.14984130859375e-05, -0.5131387710571289, -9.34600830078125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001583099365234375, -0.001182078500278294, -2.0265579223632812e-06, -2.288818359375e-05, -0.0007171630859375, -7.62939453125e-06, -1.52587890625e-05, -0.0010972023010253906, 0.0, -0.199066162109375, -0.3319873809814453, -0.14951324462890625, -0.0836939811706543, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 15, 205, 70, 48, 109, 17, 104, 25, 133, "target", "<EOS>", "spell_targetable", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.201091288335618, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Call", "func": {"attr": "spell_targetable", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -0.9797086715698242, -0.024244308471679688, -1.33514404296875e-05, -1.9073486328125e-06, -0.7475595474243164, -1.9073486328125e-06, -0.4331626892089844, 0.0, -0.003101348876953125, 0.0, -0.000499725341796875, -1.9073486328125e-06, -2.6941299438476562e-05, 0.0, -0.0001392364501953125, -5.7220458984375e-06, -1.9073486328125e-06, -3.635883331298828e-05, -2.3841855067985307e-07, -0.12018108367919922, -0.0001068115234375, -0.0011959075927734375, -6.866455078125e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-05, 0.0, -1.215934389620088e-05, 0.0, -0.00013434870925266296, 0.0, -0.3955773115158081, 0.0, -5.14984130859375e-05, -0.5296297073364258, -9.34600830078125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001621246337890625, -0.001175045152194798, -2.0265579223632812e-06, -2.288818359375e-05, -0.00072479248046875, -7.62939453125e-06, -1.52587890625e-05, -0.0010819435119628906, 0.0, -0.2047882080078125, -0.3312673568725586, -0.1553812026977539, -0.08488988876342773, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 48, 109, 17, 104, 25, 133, "target", "<EOS>", "spell_targetable", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.415976046376699, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -1.5567951202392578, -8.96453857421875e-05, -8.20159912109375e-05, 0.0, -0.000682830810546875, 0.0, -0.042156219482421875, -2.47955322265625e-05, -0.0008707046508789062, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -0.22348475456237793, -1.9073486328125e-06, -3.814697265625e-05, -0.15936660766601562, -0.0001049041748046875, -0.00037384033203125, -3.814697265625e-06, -0.0004215240478515625, -3.814697265625e-06, -0.00104522705078125, 0.0, -0.4714031219482422, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.463859558105469e-06, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.655952453613281e-06, -2.3841855067985307e-07, -0.1255054473876953, -8.20159912109375e-05, -0.0011577606201171875, -5.91278076171875e-05, -1.71661376953125e-05, 0.0, -9.1552734375e-05, 0.0, -1.3351438610698096e-05, 0.0, -0.00012922263704240322, 0.0, -0.3879716396331787, 0.0, -4.9591064453125e-05, -0.5221281051635742, -8.96453857421875e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001583099365234375, -0.0011161558795720339, -2.0265579223632812e-06, -2.288818359375e-05, -0.000759124755859375, -7.62939453125e-06, -1.33514404296875e-05, -0.0010676383972167969, 0.0, -0.19443416595458984, -0.2975339889526367, -0.15659236907958984, -0.0838242769241333, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and self.target.minion_type is\n            MINION_TYPE.BEAST)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 49, 114, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.49355886291368, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Template25", "hole0": "PlayerSelector"}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -2.0051136016845703, -1.9073486328125e-06, -0.00214803172275424, -0.0002574920654296875, 0.0, -0.0007382631301879883, 0.0, -0.00022302167781163007, 0.0, -7.43865966796875e-05, -1.52587890625e-05, -3.814697265625e-06, -5.9604644775390625e-06, -1.1920928244535389e-07, -0.7106876373291016, -0.0001888275146484375, -0.00090789794921875, -7.62939453125e-05, -1.9073486328125e-05, 0.0, -5.340576171875e-05, 0.0, -4.076957702636719e-05, 0.0, -0.00013649438915308565, 0.0, -0.34141600131988525, 0.0, -4.57763671875e-05, -0.5406131744384766, -9.72747802734375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001811981201171875, -0.0012431135401129723, -2.0265579223632812e-06, -2.288818359375e-05, -0.000736236572265625, -5.7220458984375e-06, -1.52587890625e-05, -0.0010514259338378906, 0.0, -0.19295597076416016, -0.3141613006591797, -0.11615371704101562, -0.07824468612670898, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and PlayerSelector())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.629137037999925, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "Template35"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "GtE"}]}, {"_type": "Call", "func": {"attr": "spell_targetable", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -2.9148731231689453, -0.000377655029296875, -0.2155132293701172, -0.009316444396972656, -0.00075531005859375, -1.1444091796875e-05, -1.71661376953125e-05, -0.0017223358154296875, -3.814697265625e-06, -0.05963134765625, 0.0, -0.004731178283691406, 0.0, -0.000652313232421875, -1.9073486328125e-06, -0.0001475811004638672, 0.0, -0.0001354217529296875, -7.62939453125e-06, -1.9073486328125e-06, -9.357929229736328e-05, -2.3841855067985307e-07, -0.11322212219238281, -0.000141143798828125, -0.001430511474609375, -6.866455078125e-05, -1.9073486328125e-05, 0.0, -7.2479248046875e-05, 0.0, -1.215934389620088e-05, 0.0, -0.00013434870925266296, 0.0, -0.3867586851119995, 0.0, -5.340576171875e-05, -0.5036220550537109, -9.34600830078125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001583099365234375, -0.0011860124068334699, -2.0265579223632812e-06, -2.288818359375e-05, -0.0007152557373046875, -7.62939453125e-06, -1.52587890625e-05, -0.001105666160583496, 0.0, -0.2073040008544922, -0.34154701232910156, -0.14629268646240234, -0.08370888233184814, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() >= 3 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 10, 205, 70, 48, 109, 17, 104, 25, 133, "target", "<EOS>", "spell_targetable", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.7655671829319814, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"id": "self", "_type": "Name"}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -1.350234031677246, -0.0001392364501953125, -0.3685750961303711, -1.9073486328125e-06, -0.13952064514160156, -5.7220458984375e-06, -0.0003533363342285156, 0.0, -0.00020599365234375, -1.1444091796875e-05, -3.814697265625e-06, -2.6702880859375e-05, -1.1920928244535389e-07, -0.2262887954711914, -0.000179290771484375, -0.0012493133544921875, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.000110626220703125, 0.0, -2.014636993408203e-05, 0.0, -0.00011539423576323316, 0.0, -1.7624691724777222, 0.0, -9.5367431640625e-05, -0.00028228759765625, 0.0, -0.003893136978149414, -1.9073486328125e-06, -0.03941917419433594, -0.034915924072265625, -0.012935638427734375, -3.814697265625e-06, -0.0001316070556640625, 0.0, -0.5187503099441528, 0.0, -0.0027036666870117188, -3.576278118089249e-07, -0.11694931983947754, -1.9073486328125e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and self)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        game.other_player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 53, 133, "self", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 205, 53, 133, "self", "<EOS>", 97, 165, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "draw", "<EOS>"]}, {"score": -5.765839933174988, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "Call", "func": {"attr": "calculate_max_health", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}], "left": {"attr": "health", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}, "ops": [{"_type": "NotEq"}]}, {"_type": "Call", "func": {"attr": "spell_targetable", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -2.205118179321289, -0.0005702972412109375, -0.004451751708984375, -0.0004730224609375, -0.0828787088394165, 0.0, -0.011557340621948242, 0.0, -1.9073486328125e-06, -0.8908758163452148, -0.00069427490234375, -0.0007953643798828125, -9.72747802734375e-05, -0.00014495849609375, -5.53131103515625e-05, -0.0067291259765625, -3.814697265625e-06, -0.05053305625915527, 0.0, -0.04411721229553223, -8.344646857949556e-07, -0.005698204040527344, -0.0003299713134765625, -3.0517578125e-05, -7.62939453125e-06, -0.1165008544921875, -7.62939453125e-06, -0.04726600646972656, -1.9073486328125e-06, -0.0012407302856445312, 0.0, -0.0006237030029296875, -1.9073486328125e-06, -7.271766662597656e-05, 0.0, -0.0001277923583984375, -5.7220458984375e-06, -1.9073486328125e-06, -4.971027374267578e-05, -2.3841855067985307e-07, -0.13167095184326172, -0.00011444091796875, -0.0010547637939453125, -6.866455078125e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-05, 0.0, -1.2278553185751662e-05, 0.0, -0.00013315661635715514, 0.0, -0.3923567533493042, 0.0, -5.340576171875e-05, -0.529754638671875, -9.34600830078125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.000164031982421875, -0.0011845818953588605, -2.0265579223632812e-06, -2.288818359375e-05, -0.0007152557373046875, -7.62939453125e-06, -1.52587890625e-05, -0.0011010169982910156, 0.0, -0.19891643524169922, -0.35093116760253906, -0.15034103393554688, -0.08719742298126221, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health != target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 17, 104, 25, 133, "target", "<EOS>", "health", "<EOS>", 202, 16, 205, 48, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_max_health", "<EOS>", 48, 109, 17, 104, 25, 133, "target", "<EOS>", "spell_targetable", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -5.810704110879158, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "Call", "func": {"attr": "calculate_max_health", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}], "left": {"attr": "health", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}, "ops": [{"_type": "Eq"}]}, {"_type": "Call", "func": {"attr": "spell_targetable", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -2.205118179321289, -0.0005702972412109375, -0.004451751708984375, -0.0004730224609375, -0.0828787088394165, 0.0, -0.011557340621948242, 0.0, -1.9073486328125e-06, -0.907231330871582, -6.4849853515625e-05, -0.010785102844238281, -0.000141143798828125, -7.05718994140625e-05, -5.7220458984375e-05, -0.0030689239501953125, -3.814697265625e-06, -0.024968981742858887, 0.0, -0.09614670276641846, -2.3841855067985307e-07, -0.006451606750488281, -0.000362396240234375, -2.6702880859375e-05, -7.62939453125e-06, -0.09532546997070312, -5.7220458984375e-06, -0.06624221801757812, -1.9073486328125e-06, -0.00115966796875, 0.0, -0.00058746337890625, -1.9073486328125e-06, -6.127357482910156e-05, 0.0, -0.0001239776611328125, -5.7220458984375e-06, -1.9073486328125e-06, -4.398822784423828e-05, -2.3841855067985307e-07, -0.1250448226928711, -0.00011444091796875, -0.0010547637939453125, -6.866455078125e-05, -1.9073486328125e-05, 0.0, -7.62939453125e-05, 0.0, -1.2397762475302443e-05, 0.0, -0.00013303740706760436, 0.0, -0.3951348066329956, 0.0, -5.340576171875e-05, -0.5310859680175781, -9.5367431640625e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.000164031982421875, -0.0011904231505468488, -2.0265579223632812e-06, -2.288818359375e-05, -0.000713348388671875, -7.62939453125e-06, -1.52587890625e-05, -0.0011000633239746094, 0.0, -0.20275020599365234, -0.34839916229248047, -0.1503000259399414, -0.08637821674346924, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            health == target.calculate_max_health() and target.\n            spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 17, 104, 25, 133, "target", "<EOS>", "health", "<EOS>", 202, 8, 205, 48, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_max_health", "<EOS>", 48, 109, 17, 104, 25, 133, "target", "<EOS>", "spell_targetable", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -6.024090169586536, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"id": "self", "_type": "Name"}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -1.350234031677246, -0.0001392364501953125, -0.3685750961303711, -1.9073486328125e-06, -0.13952064514160156, -5.7220458984375e-06, -0.0003533363342285156, 0.0, -0.00020599365234375, -1.1444091796875e-05, -3.814697265625e-06, -2.6702880859375e-05, -1.1920928244535389e-07, -0.2262887954711914, -0.000179290771484375, -0.0012493133544921875, -6.29425048828125e-05, -9.5367431640625e-06, 0.0, -0.000110626220703125, 0.0, -2.014636993408203e-05, 0.0, -0.00011539423576323316, 0.0, -0.32508742809295654, 0.0, -3.814697265625e-05, -0.48224925994873047, -8.392333984375e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.00014495849609375, -0.001079558627679944, -2.0265579223632812e-06, -2.47955322265625e-05, -0.0007781982421875, -7.62939453125e-06, -1.33514404296875e-05, -0.001124739646911621, 0.0, -0.18636226654052734, -1.273284912109375, -0.0001049041748046875, -3.814697265625e-06, -0.068389892578125, 0.0, -0.0002614259719848633, -1.9073486328125e-06, -2.4080263756331988e-05, -1.9073486328125e-06, -0.3696538209915161, 0.0, -1.9073486328125e-06, -0.042336463928222656], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and self)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.change_attack(2)\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 53, 133, "self", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}, {"score": -6.046908139057905, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole1": "draw", "hole0": {"_type": "Template38"}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -1.5567951202392578, -8.96453857421875e-05, -8.20159912109375e-05, 0.0, -0.000682830810546875, 0.0, -0.042156219482421875, -2.47955322265625e-05, -0.0008707046508789062, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -0.22348475456237793, -1.9073486328125e-06, -3.814697265625e-05, -0.15936660766601562, -0.0001049041748046875, -0.00037384033203125, -3.814697265625e-06, -0.0004215240478515625, -3.814697265625e-06, -0.00104522705078125, 0.0, -1.044816017150879, 0.0, -8.392333984375e-05, -1.1444091796875e-05, -2.562999725341797e-05, 0.0, -5.14984130859375e-05, -3.814697265625e-06, -3.814697265625e-06, -7.748603820800781e-06, -2.2649765014648438e-06, -0.1413726806640625, -7.05718994140625e-05, -0.0011615753173828125, -5.91278076171875e-05, -1.71661376953125e-05, 0.0, -8.96453857421875e-05, 0.0, -1.1682508556987159e-05, 0.0, -0.00013637520896736532, 0.0, -0.4143350124359131, 0.0, -5.14984130859375e-05, -0.5352392196655273, -8.96453857421875e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001583099365234375, -0.0011241429019719362, -2.0265579223632812e-06, -2.288818359375e-05, -0.000751495361328125, -7.62939453125e-06, -1.33514404296875e-05, -0.0010533332824707031, 0.0, -0.1925516128540039, -0.3032827377319336, -0.15642929077148438, -0.08220779895782471, -6.079673767089844e-06], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and self.target.minion_type is\n            MINION_TYPE.DEMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 49, 114, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 165, 42, "draw", "<EOS>"]}, {"score": -6.71170902136825, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole0": "Slam", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Slam"}, {"_type": "Template33"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"id": "hearthbreaker", "_type": "Name"}}}, "arg": "target_func"}, {"_type": "keyword", "value": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"_type": "NameConstant", "value": "Null"}], "left": {"_type": "Call", "func": {"attr": "calculate_attack", "_type": "Attribute", "value": {"id": "target", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}, {"_type": "Compare", "comparators": [{"attr": "BEAST", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "left": {"attr": "minion_type", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, "ops": [{"_type": "Is"}]}], "op": {"_type": "And"}}, "args": {"_type": "Template13", "hole0": "target"}}, "arg": "filter_func"}]}}], "hole6": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Call", "args": [{"_type": "Template33"}], "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Template38"}}}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}, {"_type": "Template23", "hole2": [{"_type": "Template33"}], "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SpellCard"}, "score_history": [-2.86102294921875e-05, -0.0023059844970703125, -8.22540732769994e-06, -2.026544461841695e-05, -5.960209819022566e-07, -3.099440846199286e-06, -2.110004425048828e-05, 0.0, -0.0004596710205078125, -9.5367431640625e-06, -4.1961669921875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -5.7220458984375e-06, -2.145766529793036e-06, -2.86102294921875e-05, -2.6702880859375e-05, -4.38690185546875e-05, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -1.3470649719238281e-05, -1.9073486328125e-06, -0.014530301094055176, 0.0, -4.76837158203125e-05, -0.11900997161865234, -6.67572021484375e-05, -7.62939453125e-06, -4.9591064453125e-05, 0.0, -3.814697265625e-06, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.29425048828125e-05, 0.0, -0.0007058382034301758, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -0.07793235778808594, 0.0, -0.0024003982543945312, -0.0016307830810546875, -0.0002994537353515625, -2.6702880859375e-05, -0.044370055198669434, 0.0, -0.001125335693359375, -0.0012493133544921875, -0.0003032684326171875, -0.0018520355224609375, -0.17973804473876953, -6.866455078125e-05, -0.11762809753417969, -0.0052356719970703125, -0.000171661376953125, -0.0001735687255859375, -0.006099700927734375, -0.000152587890625, -0.027123093605041504, 0.0, -0.028065919876098633, -1.811980109778233e-05, -1.33514404296875e-05, -0.2992267608642578, -0.000244140625, -0.25116634368896484, -0.0009784698486328125, -0.0008535385131835938, -1.9073486328125e-06, -1.5567951202392578, -8.96453857421875e-05, -8.20159912109375e-05, 0.0, -0.000682830810546875, 0.0, -0.042156219482421875, -2.47955322265625e-05, -0.0008707046508789062, -3.814697265625e-06, -0.00019073486328125, -1.9073486328125e-06, -0.22348475456237793, -1.9073486328125e-06, -3.814697265625e-05, -0.15936660766601562, -0.0001049041748046875, -0.00037384033203125, -3.814697265625e-06, -0.0004215240478515625, -3.814697265625e-06, -0.00104522705078125, 0.0, -0.4714031219482422, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -8.463859558105469e-06, 0.0, -4.1961669921875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.655952453613281e-06, -2.3841855067985307e-07, -0.1255054473876953, -8.20159912109375e-05, -0.0011577606201171875, -5.91278076171875e-05, -1.71661376953125e-05, 0.0, -9.1552734375e-05, 0.0, -1.3351438610698096e-05, 0.0, -0.00012922263704240322, 0.0, -0.3879716396331787, 0.0, -4.9591064453125e-05, -0.5221281051635742, -8.96453857421875e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0001583099365234375, -0.0011161558795720339, -2.0265579223632812e-06, -2.288818359375e-05, -0.000759124755859375, -7.62939453125e-06, -1.33514404296875e-05, -0.0010676383972167969, 0.0, -0.19443416595458984, -1.3676996231079102, -0.0001068115234375, -3.814697265625e-06, -0.07298088073730469, 0.0, -0.0002595186233520508, -1.9073486328125e-06, -2.455709909554571e-05, -1.9073486328125e-06, -0.3497859239578247, 0.0, -1.9073486328125e-06, -0.042822837829589844], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() is Null and self.target.minion_type is\n            MINION_TYPE.BEAST)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.change_attack(2)\n", "choice_history": [77, 147, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Slam", "<EOS>", 68, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 76, 195, "target_func", "<EOS>", 17, 104, 17, 104, 25, 133, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 76, 195, "filter_func", "<EOS>", 22, 128, 2, 150, "target", "<EOS>", 19, 107, 6, 206, 49, 114, 20, 109, 17, 104, 25, 133, "target", "<EOS>", "calculate_attack", "<EOS>", 202, 12, 205, 54, 135, "Null", "<EOS>", 49, 114, 17, 104, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "minion_type", "<EOS>", 202, 12, 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 219, 92, 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 206, 48, 111, 17, 104, 42, "effective_spell_damage", "<EOS>", 205, 68, 53, 133, "self", "<EOS>", 97, 166, 17, 104, 25, 133, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 205, 68]}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score": -0.7552944491280869, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Silence"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -0.6967530846595764, -0.000658177537843585, -0.0003452301025390625, -0.0001354217529296875, -2.288818359375e-05, -5.7220458984375e-06, -0.00019466876983642578, -0.00014495849609375, 0.0, -0.0030307769775390625, -1.1444091796875e-05, -1.9073486328125e-06, -0.01977360248565674, 0.0, -8.20159912109375e-05, -1.9073486328125e-06, -0.00011658668518066406, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.000453948974609375, -1.9073486328125e-06, -0.0001678466796875, -5.7220458984375e-06, -0.00039899349212646484, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -7.450580596923828e-05, 0.0, -0.0002384185791015625, -0.0002040863037109375, -4.76837158203125e-05, -8.821421943139285e-06, -1.9073468138230965e-06, -0.0010753836249932647, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Silence", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -1.4026202389150058, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -1.338724136352539, -4.0649541915627196e-05, -7.62939453125e-06, -0.009118080139160156, -1.9073486328125e-06, 0.0, -2.3126602172851562e-05, -6.67572021484375e-05, -1.9073486328125e-06, -0.0024204254150390625, -1.33514404296875e-05, -1.9073486328125e-06, -0.017870068550109863, 0.0, -7.2479248046875e-05, -3.814697265625e-06, -0.00010311603546142578, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.0004730224609375, -1.9073486328125e-06, -0.0001735687255859375, -5.7220458984375e-06, -0.00043129920959472656, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -8.213520050048828e-05, 0.0, -0.000240325927734375, -0.0002536773681640625, -5.14984130859375e-05, -8.225384590332396e-06, -1.9073468138230965e-06, -0.0010907615069299936, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -2.3431432444619986, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Bounce"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -2.2280654907226562, -0.00022611531312577426, -1.52587890625e-05, -0.0001735687255859375, -1.9073486328125e-06, 0.0, -3.635883331298828e-05, -2.288818359375e-05, 0.0, -0.00244140625, -1.33514404296875e-05, -1.9073486328125e-06, -0.07796382904052734, 0.0, -7.2479248046875e-05, -1.9073486328125e-06, -0.00014340877532958984, -1.52587890625e-05, -1.9073486328125e-06, 0.0, 0.0, -0.0004673004150390625, -1.9073486328125e-06, -0.0001583099365234375, -5.7220458984375e-06, -0.00038754940032958984, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -7.450580596923828e-05, 0.0, -0.0002460479736328125, -0.000179290771484375, -4.38690185546875e-05, -7.5101379479747266e-06, -2.0265558760002023e-06, -0.0010544037213549018, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Bounce", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -2.5197600249384777, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Replace"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -2.448256492614746, -0.005175082013010979, -0.000110626220703125, -5.53131103515625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0003548860549926758, -5.14984130859375e-05, 0.0, -0.0033473968505859375, -1.33514404296875e-05, -1.9073486328125e-06, -0.028230786323547363, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.00010883808135986328, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.000461578369140625, -1.9073486328125e-06, -0.000164031982421875, -5.7220458984375e-06, -0.00039517879486083984, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -7.450580596923828e-05, 0.0, -0.000244140625, -0.00017547607421875, -4.38690185546875e-05, -8.463799531455152e-06, -1.9073468138230965e-06, -0.0010544032556936145, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Replace(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Replace", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.7282507982409285, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Silence"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -3.692995071411133, -0.0004863739013671875, -8.7738037109375e-05, -0.4534914493560791, -3.576278118089249e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.0005365610122680664, -1.1920928244535389e-07, -1.9073486328125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.0001621246337890625, -0.0005588531494140625, -6.29425048828125e-05, -0.5527092814445496, -0.0005735919694416225, -0.0004100799560546875, -0.0001392364501953125, -1.9073486328125e-05, -5.7220458984375e-06, -0.00019466876983642578, -0.000141143798828125, 0.0, -0.00263214111328125, -1.33514404296875e-05, -1.9073486328125e-06, -0.015035748481750488, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -0.00011086463928222656, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.000476837158203125, 0.0, -0.0001621246337890625, -5.7220458984375e-06, -0.00041234493255615234, -7.283687591552734e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -0.00011837482452392578, 0.0, -0.00023651123046875, -0.0003604888916015625, -5.14984130859375e-05, -1.430496104148915e-05, -1.5497195136049413e-06, -0.0009704758413136005, -7.152555099310121e-07], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 213, 75, 164, "BEAST", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Silence", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -4.965749784459831, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Draw"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -4.883059978485107, -2.682172998902388e-05, -0.0001468658447265625, -0.000347137451171875, -2.86102294921875e-05, -3.814697265625e-06, -0.0012116432189941406, -0.0002155303955078125, 0.0, -0.0036716461181640625, -9.5367431640625e-06, -1.9073486328125e-06, -0.042850494384765625, 0.0, -8.0108642578125e-05, -1.9073486328125e-06, -0.000141143798828125, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.000457763671875, -1.9073486328125e-06, -0.0001659393310546875, -3.814697265625e-06, -0.00038945674896240234, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -7.069110870361328e-05, 0.0, -0.0002460479736328125, -0.000179290771484375, -4.38690185546875e-05, -7.748553798592184e-06, -2.0265558760002023e-06, -0.0010472509311512113, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Draw", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.003097054577324, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Silence"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -0.6967530846595764, -0.000658177537843585, -0.0003452301025390625, -0.0001354217529296875, -2.288818359375e-05, -5.7220458984375e-06, -0.00019466876983642578, -0.00014495849609375, 0.0, -0.0030307769775390625, -1.1444091796875e-05, -1.9073486328125e-06, -3.952289581298828, 0.0, -8.392333984375e-05, -7.62939453125e-06, -0.0023919343948364258, -0.00011074542999267578, -7.867813110351562e-06, 0.0, 0.0, -0.31200695037841797, 0.0, -0.000102996826171875, -5.7220458984375e-06, -0.00034797191619873047, -8.821487426757812e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.0019626617431640625, -0.0002384185791015625, -0.00018310546875, -1.5497168988076737e-06, -1.1920922133867862e-06, -0.0006847250042483211, -1.4305104514278355e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(),\n            MinionSelector(picker=UserPicker(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Silence", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.099581022715029, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -5.018815040588379, -0.02206251583993435, -2.86102294921875e-05, -0.000213623046875, -1.1444091796875e-05, -1.9073486328125e-06, -1.537799835205078e-05, -3.62396240234375e-05, 0.0, -0.0025691986083984375, -1.1444091796875e-05, -1.9073486328125e-06, -0.02158939838409424, 0.0, -8.20159912109375e-05, -1.9073486328125e-06, -0.00010311603546142578, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.00046539306640625, -1.9073486328125e-06, -0.00017547607421875, -5.7220458984375e-06, -0.00042366981506347656, -7.486343383789062e-05, -6.079673767089844e-06, -1.9073486328125e-06, 0.0, -7.259845733642578e-05, 0.0, -0.000244140625, -0.0001888275146484375, -4.57763671875e-05, -8.702214472577907e-06, -1.9073468138230965e-06, -0.001066323951818049, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Give", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.298806677455673, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Bounce"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -2.2280654907226562, -0.00022611531312577426, -1.52587890625e-05, -0.0001735687255859375, -1.9073486328125e-06, 0.0, -3.635883331298828e-05, -2.288818359375e-05, 0.0, -0.00244140625, -1.33514404296875e-05, -1.9073486328125e-06, -2.603329658508301, 0.0, -6.4849853515625e-05, -7.62939453125e-06, -0.0022927522659301758, -0.00010311603546142578, -7.867813110351562e-06, 0.0, 0.0, -0.42672252655029297, 0.0, -0.0001010894775390625, -5.7220458984375e-06, -0.0003666877746582031, -9.381771087646484e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -3.635883331298828e-05, 0.0, -0.0023212432861328125, -0.0002307891845703125, -0.0001983642578125, -1.5497168988076737e-06, -1.1920922133867862e-06, -0.0006799576804041862, -1.4305104514278355e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Bounce", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.658514483802719, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Resurrect"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -5.2170634269714355, -0.3875001072883606, -2.86102294921875e-05, -0.000102996826171875, -1.1444091796875e-05, -3.814697265625e-06, -0.0004639625549316406, -0.0001850128173828125, 0.0, -0.0045318603515625, -1.33514404296875e-05, -1.9073486328125e-06, -0.014425396919250488, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -9.930133819580078e-05, -1.71661376953125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0004329681396484375, -1.9073486328125e-06, -0.00018310546875, -3.814697265625e-06, -0.00041985511779785156, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -7.641315460205078e-05, 0.0, -0.0002422332763671875, -0.0001926422119140625, -4.57763671875e-05, -8.583007911511231e-06, -1.9073468138230965e-06, -0.0010552374878898263, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Resurrect(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Resurrect", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.66151670602067, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -3.692995071411133, -0.0004863739013671875, -8.7738037109375e-05, -0.4534914493560791, -3.576278118089249e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.0005365610122680664, -1.1920928244535389e-07, -1.9073486328125e-05, -9.5367431640625e-06, -5.7220458984375e-06, -9.5367431640625e-06, -5.7220458984375e-05, -1.9073486328125e-06, -0.0001621246337890625, -0.0005588531494140625, -6.29425048828125e-05, -1.4810163974761963, -5.519237674889155e-05, -7.62939453125e-06, -0.006037712097167969, -1.9073486328125e-06, 0.0, -2.8848648071289062e-05, -6.866455078125e-05, -1.9073486328125e-06, -0.00238037109375, -1.52587890625e-05, -1.9073486328125e-06, -0.015461087226867676, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -0.00010693073272705078, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.0004978179931640625, 0.0, -0.0001678466796875, -5.7220458984375e-06, -0.00043320655822753906, -7.283687591552734e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -0.00012028217315673828, 0.0, -0.0002460479736328125, -0.0003604888916015625, -5.14984130859375e-05, -1.204002728627529e-05, -1.6689286894688848e-06, -0.0009881200967356563, -8.344646857949556e-07], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Kill(), MinionSelector(players=BothPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 213, 75, 164, "BEAST", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.677028186371217, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -5.499609470367432, -0.04978366941213608, -9.918212890625e-05, -0.0001068115234375, -5.7220458984375e-06, -1.9073486328125e-06, -0.003109455108642578, -0.000354766845703125, 0.0, -0.011266708374023438, -2.09808349609375e-05, -1.9073486328125e-06, -0.07850182056427002, 0.0, -7.82012939453125e-05, -1.9073486328125e-06, -0.00014495849609375, -1.52587890625e-05, -1.9073486328125e-06, 0.0, 0.0, -0.000469207763671875, -1.9073486328125e-06, -0.00016021728515625, -3.814697265625e-06, -0.00038182735443115234, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -7.259845733642578e-05, 0.0, -0.0002460479736328125, -0.0001773834228515625, -4.1961669921875e-05, -7.5101384027220774e-06, -2.0265558760002023e-06, -0.0010412906995043159, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(<UNK>(), MinionSelector\n            (players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "<UNK>", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -5.730637106945892, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -1.338724136352539, -4.0649541915627196e-05, -7.62939453125e-06, -0.009118080139160156, -1.9073486328125e-06, 0.0, -2.3126602172851562e-05, -6.67572021484375e-05, -1.9073486328125e-06, -0.0024204254150390625, -1.33514404296875e-05, -1.9073486328125e-06, -4.051496505737305, 0.0, -6.103515625e-05, -7.62939453125e-06, -0.0034142732620239258, -0.00011646747589111328, -5.9604644775390625e-06, 0.0, 0.0, -0.2903118133544922, 0.0, -0.0001125335693359375, -3.814697265625e-06, -0.0003669261932373047, -8.809566497802734e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -0.0018405914306640625, -0.000244140625, -0.00017547607421875, -1.5497168988076737e-06, -1.1920922133867862e-06, -0.0006897322600707412, -1.4305104514278355e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Kill(), MinionSelector(\n            picker=UserPicker(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Kill", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -6.009553505387885, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "IncreaseSilence"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -5.736771583557129, -0.21988192200660706, -1.025196434056852e-05, -9.72747802734375e-05, -0.0001964569091796875, -8.96453857421875e-05, -5.7220458984375e-06, -0.00021374225616455078, -4.76837158203125e-05, 0.0, -0.0030193328857421875, -1.33514404296875e-05, -1.9073486328125e-06, -0.014919400215148926, 0.0, -8.0108642578125e-05, -3.814697265625e-06, -0.00011265277862548828, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.0004711151123046875, -1.9073486328125e-06, -0.000171661376953125, -5.7220458984375e-06, -0.00040650367736816406, -7.474422454833984e-05, -6.198883056640625e-06, -1.9073486328125e-06, 0.0, -7.641315460205078e-05, 0.0, -0.00023651123046875, -0.0002269744873046875, -4.9591064453125e-05, -8.940630323195364e-06, -1.9073468138230965e-06, -0.001094575971364975, -1.1920922133867862e-06], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(IncreaseSilence(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Increase", "Silence", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}, {"score": -6.022288104865424, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Spellbreaker", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Spellbreaker"}, {"_type": "Template37"}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Bounce"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 4}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -0.00024459234555251896, -0.00014102223212830722, -2.2366642951965332e-05, -1.4543453289661556e-05, -2.622604142743512e-06, -2.09808349609375e-05, -0.00012969970703125, -1.33514404296875e-05, -1.33514404296875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.002704620361328125, -5.7220458984375e-06, -3.814697265625e-06, -4.887579052592628e-06, -7.62939453125e-06, -0.000347137451171875, -0.0002727508544921875, -0.0007305145263671875, -0.025571823120117188, -1.1444091796875e-05, -3.24249267578125e-05, -0.00015401840209960938, -2.384185791015625e-06, -2.288818359375e-05, -1.71661376953125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -8.0108642578125e-05, -0.000400543212890625, -7.43865966796875e-05, -2.2280654907226562, -0.00022611531312577426, -1.52587890625e-05, -0.0001735687255859375, -1.9073486328125e-06, 0.0, -3.635883331298828e-05, -2.288818359375e-05, 0.0, -0.00244140625, -1.33514404296875e-05, -1.9073486328125e-06, -2.603329658508301, 0.0, -6.4849853515625e-05, -7.62939453125e-06, -0.0022927522659301758, -0.00010311603546142578, -7.867813110351562e-06, 0.0, 0.0, -1.0909318923950195, 0.0, -0.000247955322265625, -3.814697265625e-06, -0.06085789203643799, -3.0517578125e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -4.00543212890625e-05, 0.0, -0.000698089599609375, -0.0004291534423828125, -6.4849853515625e-05, -1.2636062820092775e-05, -2.264974000354414e-06, -0.0009188639232888818, -8.344646857949556e-07], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(),\n            MinionSelector(picker=UserPicker(), players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [77, 145, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Spellbreaker", "<EOS>", 72, 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 63, 171, "Bounce", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score": -2.4670484764870793, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -0.19174480438232422, -0.010478973388671875, -0.7363557815551758, -0.15817737579345703, -1.52587890625e-05, -5.53131103515625e-05, -0.0004607435839716345, -7.987022399902344e-06, -2.0265579223632812e-06, -0.0009975433349609375, -3.814697265625e-06, -3.814697265625e-06, -0.22312843799591064, -4.053113570989808e-06, -2.6702880859375e-05, -7.62939453125e-06, -0.0016962289810180664, -0.0005650520324707031, -1.6689295080141164e-05, -2.0265579223632812e-06, 0.0, -3.6954863844584906e-06, 0.0, -1.52587890625e-05, -7.43865966796875e-05, -3.814697265625e-06, -8.344646857949556e-07, -3.814689989667386e-06, -7.641315460205078e-05, -1.1920928244535389e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.2545135156409515, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}], "func": {"id": "Taunt", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -2.3716659545898438, -0.012201070785522461, -0.028772354125976562, -0.1292400360107422, 0.0, -0.1024942398071289, 0.0, -0.5085669755935669, -3.8146954466355965e-06, -0.0008078813552856445, -2.503394853192731e-06, -0.0016536712646484375, -3.814697265625e-06, -0.0015984773635864258, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.1457672119140625e-06, 0.0, -2.6702880859375e-05, -0.0004253387451171875, -7.62939453125e-06, -1.4305104514278355e-06, -3.4570634852570947e-06, -9.34600830078125e-05, 0.0], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Taunt(CARD_SOURCE.<UNK>),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Taunt", "<EOS>", 205, 45, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.6533909762647596, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -0.19174480438232422, -0.010478973388671875, -2.2575511932373047, -2.86102294921875e-05, -0.04983694106340408, -5.9127625718247145e-05, -1.1920928244535389e-07, -8.58306884765625e-06, 0.0, -0.0003995444276370108, 0.0, -1.52587890625e-05, -7.62939453125e-05, -1.9073486328125e-05, -5.960462772236497e-07, -1.549708758830093e-05, -3.62396240234375e-05, -2.3841855067985307e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.758874603094874, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "MinionSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -0.19174480438232422, -0.010478973388671875, -0.9011564254760742, -1.0148391723632812, -0.013475418090820312, -5.543231964111328e-05, -1.9073486328125e-06, -8.7738037109375e-05, -1.9073486328125e-06, -0.482632040977478, -0.0002155303373001516, -0.0003625154495239258, 0.0, -0.00044417119352146983, 0.0, -3.814697265625e-06, -0.0001392364501953125, -4.38690185546875e-05, -3.933898824470816e-06, -4.52994936495088e-06, -6.306171417236328e-05, -2.3841855067985307e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(Taunt())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Taunt", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.782929069839433, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "<UNK>", "_type": "Attribute", "value": {"id": "minion", "_type": "Name"}}], "func": {"id": "Taunt", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -2.3716659545898438, -0.012201070785522461, -0.028772354125976562, -0.1292400360107422, 0.0, -0.1024942398071289, 0.0, -1.021596074104309, -5.960462772236497e-07, -0.014268153347074986, -1.6689286894688848e-06, -0.0012874603271484375, -5.7220458984375e-06, -0.00391077995300293, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.2649765014648438e-06, 0.0, -2.47955322265625e-05, -0.0003948211669921875, -5.7220458984375e-06, -1.1920922133867862e-06, -4.768360213347478e-06, -0.000110626220703125, -1.1920928244535389e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Taunt(minion.<UNK>),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Taunt", "<EOS>", 205, 45, 104, 25, 133, "minion", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.86474173042528, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template19", "hole2": [{"_type": "Str", "s": "Taunt Taunt"}], "hole1": {"id": "HasCardName", "_type": "Name"}, "hole0": "MinionSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -0.19174480438232422, -0.010478973388671875, -0.9011564254760742, -0.46045589447021484, -0.0004640811530407518, -0.00018727779388427734, -5.7220458984375e-06, -4.76837158203125e-05, 0.0, -0.012184261344373226, -0.01253337599337101, -0.03472328186035156, -0.0002019404200837016, -0.0001621246337890625, -0.00263214111328125, -0.006916999816894531, -0.6473745107650757, -0.04979705810546875, -0.3795236647129059, -0.010662078857421875, -1.919269561767578e-05, -5.7220458984375e-06, -7.760460721328855e-05, 0.0, -3.814697265625e-06, -0.0001697540283203125, -2.86102294921875e-05, -5.125986263010418e-06, -2.3841830625315197e-06, -5.7220458984375e-05, -1.1920928244535389e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(HasCardName(\n            'Taunt Taunt'))))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Has", "Card", "Name", "<EOS>", 205, 56, 142, "Taunt", " ", "Taunt", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.9301627682952898, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -2.0881729125976562, -0.00023651123046875, -0.011867523193359375, -0.0008450746536254883, -2.0265579223632812e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0038829196710139513, -0.002288667019456625, -1.1920928244535389e-07, -0.00177764892578125, -0.02882671356201172, -0.012302398681640625, -0.5826091766357422, -0.14464569091796875, -1.71661376953125e-05, -5.14984130859375e-05, -0.0006049869698472321, -9.894371032714844e-06, -2.0265579223632812e-06, -0.0013427734375, -1.9073486328125e-06, -5.7220458984375e-06, -0.17831218242645264, -3.4570680327306036e-06, -2.47955322265625e-05, -9.5367431640625e-06, -0.0015263557434082031, -0.0005574226379394531, -1.5020364116935525e-05, -2.0265579223632812e-06, 0.0, -3.6954863844584906e-06, 0.0, -1.52587890625e-05, -7.82012939453125e-05, -5.7220458984375e-06, -9.536738616588991e-07, -3.6954811548639555e-06, -8.022785186767578e-05, -1.1920928244535389e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -3.9540071954886358, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -1.7959232330322266, -0.0012722015380859375, -0.9746170043945312, -1.9073486328125e-05, -0.03846944123506546, -6.699555524392053e-05, -1.1920928244535389e-07, -1.1205671398784034e-05, 0.0, -0.00033220546902157366, 0.0, -1.9073486328125e-05, -8.0108642578125e-05, -3.62396240234375e-05, -9.536738616588991e-07, -8.821448318485636e-06, -3.0517578125e-05, -1.1920928244535389e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 68, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.259290160330792, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -2.60097599029541, -0.0005550384521484375, -0.0004100799560546875, -0.0006886720657348633, -2.0265579223632812e-06, -2.47955322265625e-05, 0.0, -0.00415824493393302, -0.0019533406011760235, -1.1920928244535389e-07, -0.00110626220703125, -0.013553619384765625, -0.015958786010742188, -0.45360374450683594, -0.08165168762207031, -2.09808349609375e-05, -6.103515625e-05, -0.0006641147774644196, -1.3709068298339844e-05, -2.1457672119140625e-06, -0.0011997222900390625, -3.814697265625e-06, -3.814697265625e-06, -0.21032512187957764, -3.6954863844584906e-06, -2.6702880859375e-05, -9.5367431640625e-06, -0.001537919044494629, -0.0005555152893066406, -1.6808504369691946e-05, -2.0265579223632812e-06, 0.0, -3.8146954466355965e-06, 0.0, -1.52587890625e-05, -8.392333984375e-05, -3.814697265625e-06, -1.0728830375228426e-06, -3.099436753473128e-06, -7.259845733642578e-05, -1.1920928244535389e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(3\n            )), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.2750298814042935, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "<UNK>", "_type": "Attribute", "value": {"id": "CARD_SOURCE", "_type": "Name"}}], "func": {"id": "<UNK>Taunt", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -2.9969658851623535, -0.3786052167415619, -2.9802317840221804e-06, -0.00083160400390625, -0.5329647064208984, -3.814697265625e-06, -0.11176872253417969, -1.9073486328125e-06, -0.15415465831756592, -5.006785613659304e-06, -0.0011196136474609375, -4.0531158447265625e-06, -0.0001277923583984375, -1.9073486328125e-06, -0.000885009765625, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, 0.0, -2.2649765014648438e-06, 0.0, -2.47955322265625e-05, -0.0005054473876953125, -7.62939453125e-06, -1.5497195136049413e-06, -3.4570634852570947e-06, -0.00010311603546142578, 0.0], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(<UNK>Taunt(CARD_SOURCE.\n            <UNK>), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "<UNK>", "Taunt", "<EOS>", 205, 45, 104, 25, 133, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.290053400058909, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template19", "hole2": [{"_type": "Str", "s": "Gallywix's Taunt"}], "hole1": {"id": "HasCardName", "_type": "Name"}, "hole0": "MinionSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -0.19174480438232422, -0.010478973388671875, -0.9011564254760742, -0.46045589447021484, -0.0004640811530407518, -0.00018727779388427734, -5.7220458984375e-06, -4.76837158203125e-05, 0.0, -0.012184261344373226, -0.01253337599337101, -0.03472328186035156, -0.0002019404200837016, -0.0001621246337890625, -0.00263214111328125, -0.006916999816894531, -1.2789320945739746, -0.0019170045852661133, -0.22659482061862946, -0.0052738189697265625, -1.1444091796875e-05, -9.5367431640625e-06, -9.322094410890713e-05, 0.0, -5.7220458984375e-06, -0.00012969970703125, -2.09808349609375e-05, -3.576272320060525e-06, -2.50339189733495e-06, -4.398822784423828e-05, -1.1920928244535389e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(HasCardName(\n            \"Gallywix's Taunt\"))))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 59, 157, "Minion", "Selector", "<EOS>", 25, 133, "Has", "Card", "Name", "<EOS>", 205, 56, 142, "Gallywix's", " ", "Taunt", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -4.337809852254267, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "Adjacent"}, "arg": "condition"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -0.19174480438232422, -0.010478973388671875, -0.7363557815551758, -0.15817737579345703, -1.52587890625e-05, -5.53131103515625e-05, -0.0004607435839716345, -7.987022399902344e-06, -2.0265579223632812e-06, -0.0009975433349609375, -3.814697265625e-06, -3.814697265625e-06, -1.833603024482727, -2.0265579223632812e-06, -0.21886253356933594, -2.6702880859375e-05, -0.03526150807738304, -0.008473500609397888, -4.410743713378906e-06, 0.0, -1.64508237503469e-05, 0.0, -1.1444091796875e-05, -4.9591064453125e-05, -3.814697265625e-06, -8.344646857949556e-07, -1.1444026313256472e-05, -5.91278076171875e-05, -1.1920928244535389e-07], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 34, 171, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -5.091849874127028, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -0.2703714370727539, -0.05973529815673828, -0.09818553924560547, -0.0017141103744506836, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.0027014485094696283, -0.12475088983774185, -1.9073486328125e-06, -1.33514404296875e-05, -0.26073551177978516, -0.00029754638671875, -0.0012760162353515625, -0.00030541419982910156, -4.172325134277344e-06, -1.71661376953125e-05, 0.0, -0.004971255548298359, -0.0035040206275880337, -1.1920928244535389e-07, -0.00199127197265625, -0.19174480438232422, -0.010478973388671875, -0.7363557815551758, -1.942901611328125, -0.00817108154296875, -3.814697265625e-06, -0.003728032112121582, -1.728534698486328e-05, -1.9073486328125e-06, -4.38690185546875e-05, -0.002254486083984375, -7.62939453125e-06, -0.0001201629638671875, -0.0001316070556640625, -0.0035152435302734375, -9.59634780883789e-05, 0.0, -1.33514404296875e-05, -1.71661376953125e-05, 0.0, -0.0005092620849609375, -3.814697265625e-06, -0.00013375282287597656, -3.218649908376392e-06, -1.0268175601959229, -0.0002765655517578125, -0.00019073486328125, 0.0, -5.14984130859375e-05, -0.01837921142578125, 0.0, -0.0001239776611328125, -0.0009937286376953125, -0.0011140108108520508, -0.0002770423889160156, -1.7881377516459906e-06, -2.2649765014648438e-06, 0.0, -6.31808916295995e-06, 0.0, -7.62939453125e-06, -0.0001068115234375, -7.62939453125e-06, -3.576278118089249e-07, -5.483612312673358e-06, -0.00011456012725830078, 0.0], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(1))]), MinionSelector(IsType(MINION_TYPE.\n            MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -6.399857386029993, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "MinionSelector"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "MinionSelector"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "HasTaunt"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -1.471200942993164, -0.004302978515625, -1.215921401977539, -0.0008784531964920461, -4.172316494077677e-06, -1.9073486328125e-06, -5.91278076171875e-05, -0.10231279581785202, -0.005004616919904947, -0.0003509521484375, -0.0001239776611328125, -0.00459599494934082, -2.3841855067985307e-07, -3.814697265625e-06, -1.9073486328125e-06, -0.023639081045985222, -0.001335134613327682, -0.10014533996582031, -0.000335693359375, -0.023213505744934082, -0.0002040863037109375, -1.430511474609375e-05, -5.91278076171875e-05, -1.9073486328125e-06, -0.04650392383337021, -8.761836215853691e-05, -0.12880611419677734, -0.0005168914794921875, -0.02498626708984375, -8.58306884765625e-05, -1.7881393432617188e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.04582890123128891, -8.809506834950298e-05, -0.02101898193359375, -0.18456459045410156, 0.0, -0.0003261566162109375, -0.19076812267303467, -1.0609603123157285e-05, -6.437291176553117e-06, -0.0036163330078125, -0.20868682861328125, -4.9591064453125e-05, -0.5776365995407104, -0.03551698103547096, -0.8264314532279968, -0.35137081146240234, -3.814697265625e-06, -0.48558804392814636, -0.0004914997844025493, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -3.576278118089249e-07, 0.0, -2.47955322265625e-05, -0.0003986358642578125, -3.0517578125e-05, -3.4450891689630225e-05, -3.576278118089249e-07, -4.982948303222656e-05, 0.0], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (Taunt()), MinionSelector(Taunt()), MinionSelector(Taunt())]),\n            MinionSelector(HasTaunt(), EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 155, "Buff", "<EOS>", 25, 133, "Taunt", "<EOS>", 59, 155, "Buff", "<EOS>", 25, 133, "Taunt", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Taunt", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Taunt", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Has", "Taunt", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}, {"score": -7.204358840667844, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "SunfuryProtector", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Sunfury Protector"}, {"_type": "Template33"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Taunt", "_type": "Name"}, "hole0": "MinionSelector"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Template25", "hole0": "HasTaunt"}, {"_type": "Template25", "hole0": "EnemyPlayer"}], "func": {"id": "MinionSelector", "_type": "Name"}}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-7.62939453125e-06, -1.71661376953125e-05, -0.048058588057756424, -0.0002674771239981055, -0.006098009645938873, -2.6132911443710327e-06, -4.053113570989808e-06, -2.503394853192731e-06, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -5.7220458984375e-06, -3.4332275390625e-05, -3.24249267578125e-05, -2.09808349609375e-05, -5.7220458984375e-06, 0.0, -9.500529267825186e-05, -6.103515625e-05, -2.2649765014648438e-06, -6.29425048828125e-05, -0.000225067138671875, -4.38690185546875e-05, -1.9073486328125e-06, 0.0, -0.0001220703125, -0.0016366243362426758, -1.3470649719238281e-05, -0.0001316070556640625, -5.7220458984375e-06, -4.57763671875e-05, -5.14984130859375e-05, -3.8146954466355965e-06, -6.4849853515625e-05, -3.814697265625e-06, -8.96453857421875e-05, -1.9073486328125e-06, -0.000614166259765625, -0.00019073486328125, -0.0001735687255859375, -0.03835487365722656, -0.0001678466796875, -2.47955322265625e-05, -1.9073486328125e-06, -0.21466197073459625, -0.0002921671839430928, -0.000125885009765625, -0.0002193450927734375, -0.0003108978271484375, -1.471200942993164, -0.004302978515625, -0.35623931884765625, -0.0021022558212280273, -1.5497207641601562e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.002425609389320016, -0.15578655898571014, 0.0, -1.33514404296875e-05, -0.38701343536376953, -9.5367431640625e-06, -0.5257501602172852, -0.009354948997497559, -1.1920928244535389e-07, -5.7220458984375e-06, -1.9073486328125e-06, -0.016272425651550293, -0.001766007044352591, -0.18076515197753906, -0.000301361083984375, -0.37345051765441895, -5.7220458984375e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.016527533531188965, -0.0033734317403286695, -0.19678306579589844, -0.00054931640625, -0.020899176597595215, -0.00035119056701660156, -1.3589857189799659e-05, -6.67572021484375e-05, -1.9073486328125e-06, -0.033358290791511536, -0.00012218582560308278, -0.013303756713867188, -0.2124176025390625, 0.0, -0.00028228759765625, -0.29183751344680786, -1.1086437552876305e-05, -5.483620952873025e-06, -0.003505706787109375, -0.2086963653564453, -5.53131103515625e-05, -0.6007072925567627, -0.03517155721783638, -0.9079833626747131, -0.35694217681884766, -3.814697265625e-06, -0.5009017586708069, -0.0004172323097009212, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -3.576278118089249e-07, 0.0, -3.4332275390625e-05, -0.000545501708984375, -4.00543212890625e-05, -3.671578815556131e-05, -3.576278118089249e-07, -4.017353057861328e-05, 0.0], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(Taunt()), Buff(Taunt()), MinionSelector(Taunt())]),\n            MinionSelector(HasTaunt(), EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [77, 145, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Sunfury", " ", "Protector", "<EOS>", 68, 65, 45, 104, 35, "RARE", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 208, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 155, "Buff", "<EOS>", 25, 133, "Taunt", "<EOS>", 59, 155, "Buff", "<EOS>", 25, 133, "Taunt", "<EOS>", 59, 155, "Minion", "Selector", "<EOS>", 25, 133, "Taunt", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 206, 63, 171, "Has", "Taunt", "<EOS>", 63, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"score": -2.667417857198245, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.1620436906814575, -0.003307526931166649, -0.010038375854492188, -0.0010852813720703125, -7.62939453125e-05, -0.001041412353515625, -0.000713348388671875, -0.1972332000732422, -0.0003942250623367727, -7.987022399902344e-06, -9.5367431640625e-06, 0.0, -0.00023387875990010798, -0.031257133930921555, -3.814697265625e-06, -0.0569000244140625, -0.8069686889648438, -0.005143165588378906, -0.0035905838012695312, -0.011333703994750977, -7.62939453125e-06, -0.0001220703125, 0.0, -0.001711726188659668, -0.005501482170075178, 0.0, -0.00753021240234375, -0.0074520111083984375, -0.03344917297363281, -0.1903858184814453, -0.0021686553955078125, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001728534698486328, -2.86102294921875e-05, -3.933906555175781e-06, -0.00212860107421875, -1.9073486328125e-06, 0.0, -0.011751890182495117, -1.9073486328125e-06, -0.0001010894775390625, -5.7220458984375e-06, -0.010824203491210938, -0.00014674663543701172, -3.576278118089249e-07, -9.655952453613281e-06, 0.0, -2.741813204920618e-06, 0.0, -0.000316619873046875, -9.34600830078125e-05, -1.9073486328125e-06, -4.7683624870842323e-07, -2.1457672119140625e-06, -3.5762791412707884e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(3)), Buff(ChangeHealth(1))]), MinionSelector(\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -2.7740876831429233, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Transform"}, {"_type": "Template33"}], "func": {"id": "Transform", "_type": "Name"}}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.3576717376708984, -0.014281447045505047, -0.0001850128173828125, -0.054935455322265625, -2.288818359375e-05, -0.14426404237747192, -0.003954944666475058, -0.0833883285522461, -0.10329532623291016, -2.86102294921875e-05, -0.002166748046875, -9.5367431640625e-06, -0.17287802696228027, -0.0002791881561279297, -1.1920928244535389e-07, -0.0007610321044921875, -1.9073486328125e-06, 0.0, -0.22587919235229492, -2.3841855067985307e-07, -0.0003948211669921875, -3.4332275390625e-05, -0.5073612928390503, -2.682209014892578e-05, 0.0, -7.62939453125e-06, 0.0, -2.2649765014648438e-06, 0.0, -4.9591064453125e-05, -0.0001010894775390625, -1.9073486328125e-06, -6.556341759278439e-06, -1.1920928244535389e-07, -3.933906555175781e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(Transform(\n            ), 2), PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Transform", "<EOS>", 206, 63, 171, "Transform", "<EOS>", 68, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -3.268697277637173, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Transform"}, {"_type": "Template33"}], "func": {"id": "Transform", "_type": "Name"}}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.3576717376708984, -0.014281447045505047, -0.0001850128173828125, -0.054935455322265625, -2.288818359375e-05, -0.14426404237747192, -0.003954944666475058, -0.0833883285522461, -0.10329532623291016, -2.86102294921875e-05, -0.002166748046875, -9.5367431640625e-06, -0.17287802696228027, -0.0002791881561279297, -1.1920928244535389e-07, -0.0007610321044921875, -1.9073486328125e-06, 0.0, -0.22587919235229492, -2.3841855067985307e-07, -0.0003948211669921875, -3.4332275390625e-05, -1.001315951347351, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, 0.0, -0.0001373291015625, -0.000675201416015625, -3.814697265625e-06, -2.1457472030306235e-06, -1.1920928244535389e-07, -3.6954879760742188e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(Transform(\n            ), 2), PlayerSelector(players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Transform", "<EOS>", 206, 63, 171, "Transform", "<EOS>", 68, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -3.5920377637801835, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.1620436906814575, -0.003307526931166649, -0.010038375854492188, -0.0010852813720703125, -7.62939453125e-05, -0.001041412353515625, -0.000713348388671875, -0.1972332000732422, -0.0003942250623367727, -7.987022399902344e-06, -9.5367431640625e-06, 0.0, -0.00023387875990010798, -0.031257133930921555, -3.814697265625e-06, -0.0569000244140625, -1.7267990112304688, -0.000225067138671875, -0.0021915435791015625, -0.008827686309814453, -5.7220458984375e-06, -7.82012939453125e-05, 0.0, -0.0021888017654418945, -0.004238214809447527, 0.0, -0.0060787200927734375, -0.006439208984375, -0.028448104858398438, -0.212127685546875, -0.002132415771484375, -1.1444091796875e-05, -3.814697265625e-06, -0.00015211105346679688, -2.09808349609375e-05, -3.933906555175781e-06, -0.002132415771484375, -1.9073486328125e-06, 0.0, -0.011967658996582031, -1.9073486328125e-06, -0.0001010894775390625, -5.7220458984375e-06, -0.010845184326171875, -0.00014662742614746094, -3.576278118089249e-07, -9.655952453613281e-06, 0.0, -2.741813204920618e-06, 0.0, -0.0003108978271484375, -9.1552734375e-05, -1.9073486328125e-06, -4.7683624870842323e-07, -2.1457672119140625e-06, -3.5762791412707884e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -3.640245900808452, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.1620436906814575, -0.003307526931166649, -0.010038375854492188, -0.0010852813720703125, -7.62939453125e-05, -0.001041412353515625, -0.000713348388671875, -0.1972332000732422, -0.0003942250623367727, -7.987022399902344e-06, -9.5367431640625e-06, 0.0, -0.00023387875990010798, -0.031257133930921555, -3.814697265625e-06, -0.0569000244140625, -1.7523183822631836, -0.003627777099609375, -0.0013217926025390625, -0.0008852481842041016, -7.748603820800781e-06, -0.00011444091796875, 0.0, -0.0025082826614379883, -0.005288229789584875, 0.0, -0.0070953369140625, -0.013385772705078125, -0.020147323608398438, -0.23585796356201172, -0.0018978118896484375, -9.5367431640625e-06, -3.814697265625e-06, -0.0001657008979236707, -1.52587890625e-05, -3.933906555175781e-06, -0.0021190643310546875, -1.9073486328125e-06, 0.0, -0.014899015426635742, -1.9073486328125e-06, -0.000102996826171875, -5.7220458984375e-06, -0.011436104774475098, -0.00014889240264892578, -3.576278118089249e-07, -9.655952453613281e-06, 0.0, -2.741813204920618e-06, 0.0, -0.000324249267578125, -9.1552734375e-05, -1.9073486328125e-06, -4.7683624870842323e-07, -2.1457672119140625e-06, -3.5762791412707884e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(2)), Buff(ChangeHealth(1))]), MinionSelector(\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -3.913179413415797, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Transform"}, {"_type": "Template33"}], "func": {"id": "Transform", "_type": "Name"}}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.3576717376708984, -0.014281447045505047, -0.0001850128173828125, -0.054935455322265625, -2.288818359375e-05, -0.14426404237747192, -0.003954944666475058, -0.0833883285522461, -0.10329532623291016, -2.86102294921875e-05, -0.002166748046875, -9.5367431640625e-06, -0.17287802696228027, -0.0002791881561279297, -1.1920928244535389e-07, -0.0007610321044921875, -1.9073486328125e-06, 0.0, -1.7626891136169434, -1.9073486328125e-06, -9.34600830078125e-05, -7.62939453125e-06, -0.1098179817199707, -0.0001971721649169922, -2.3841855067985307e-07, -3.826618194580078e-05, 0.0, -4.88758041683468e-06, 0.0, -5.91278076171875e-05, -4.38690185546875e-05, -1.9073486328125e-06, -1.9073349903919734e-06, -2.0265579223632812e-06, -2.0265579223632812e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(Transform(\n            ), 2), PlayerSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Transform", "<EOS>", 206, 63, 171, "Transform", "<EOS>", 68, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -4.000583545317895, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Transform"}, {"_type": "Template33"}], "func": {"id": "Transform", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.3576717376708984, -0.014281447045505047, -0.0001850128173828125, -0.054935455322265625, -2.288818359375e-05, -0.14426404237747192, -0.003954944666475058, -0.0833883285522461, -0.10329532623291016, -2.86102294921875e-05, -0.002166748046875, -9.5367431640625e-06, -1.849467396736145, -6.699562072753906e-05, -2.2649765014648438e-06, -0.1408100128173828, -3.814697265625e-06, 0.0, -0.1409621238708496, -1.1920928244535389e-07, -0.000286102294921875, -5.7220458984375e-06, -0.0023033618927001953, -0.0002027750015258789, -1.1920928244535389e-07, -1.537799835205078e-05, 0.0, -2.741813204920618e-06, 0.0, -8.392333984375e-05, -6.67572021484375e-05, -1.9073486328125e-06, -4.7683624870842323e-07, -2.1457672119140625e-06, -1.7881393432617188e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(Transform(\n            ), 2), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Transform", "<EOS>", 206, 63, 171, "Transform", "<EOS>", 68, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -4.269121478433242, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Transform"}, {"_type": "Template33"}], "func": {"id": "Summon", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.8348952531814575, -0.13842089474201202, -0.0002689361572265625, -0.00037384033203125, -1.9073486328125e-06, -1.0621379613876343, -0.007955732755362988, -0.03532600402832031, -0.8971443176269531, -7.62939453125e-06, -0.19032010436058044, -3.933906555175781e-06, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -9.894371032714844e-06, 0.0, -6.4849853515625e-05, -5.53131103515625e-05, -1.9073486328125e-06, -1.0490059139556251e-05, -1.1920928244535389e-07, -2.145766984540387e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(Transform(), \n            2), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Summon", "<EOS>", 206, 63, 171, "Transform", "<EOS>", 68, 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -4.715601544261361, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "Transform"}, {"_type": "Template33"}], "func": {"id": "Summon", "_type": "Name"}}, {"_type": "Call", "func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.8348952531814575, -0.13842089474201202, -0.0002689361572265625, -0.00037384033203125, -1.9073486328125e-06, -1.0621379613876343, -0.007955732755362988, -0.03532600402832031, -0.6295137405395508, -3.24249267578125e-05, -0.0015697479248046875, -1.1444091796875e-05, -0.21617937088012695, -0.0002753734588623047, -1.1920928244535389e-07, -0.000843048095703125, -1.9073486328125e-06, 0.0, -0.24106740951538086, -2.3841855067985307e-07, -0.0004100799560546875, -3.24249267578125e-05, -0.44399142265319824, -2.682209014892578e-05, 0.0, -7.62939453125e-06, 0.0, -2.1457672119140625e-06, 0.0, -5.7220458984375e-05, -9.34600830078125e-05, -1.9073486328125e-06, -5.483512723003514e-06, -1.1920928244535389e-07, -3.933906555175781e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(Transform(), \n            2), PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Summon", "<EOS>", 206, 63, 171, "Transform", "<EOS>", 68, 48, 110, 25, 133, "Player", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -4.945390597464488, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Str", "s": "health"}, {"_type": "Str", "s": "attack"}, {"_type": "NameConstant", "value": true}], "func": {"id": "<UNK>Devilsaur", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.4230986833572388, -0.5940490365028381, -0.29993095993995667, -0.11377334594726562, -0.6101665496826172, -0.00238037109375, -0.3449994921684265, -6.4373016357421875e-06, -0.008275985717773438, -0.00014495849609375, -0.10531940311193466, -1.52587890625e-05, -0.5087881088256836, -0.0074615478515625, -0.0023075342178344727, 0.0, -0.11192893981933594, -0.0004138946533203125, -3.814697265625e-06, 0.0, -0.0024472475051879883, -1.1444091796875e-05, 0.0, -0.5661201477050781, -5.7220458984375e-06, 0.0, -0.13002681732177734, -1.1920928244535389e-07, -0.0007781982421875, -6.67572021484375e-05, -0.009472131729125977, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -2.0265579223632812e-06, 0.0, -0.0012073516845703125, -5.91278076171875e-05, -7.62939453125e-06, -5.96045310885529e-07, -3.576278118089249e-07, -2.2649762740911683e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(<UNK>Devilsaur(\n            'health', 'attack', True), MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "<UNK>", "Devilsaur", "<EOS>", 207, 56, 142, "health", "<EOS>", 56, 142, "attack", "<EOS>", 54, 134, "False", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -4.9715031057427765, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Str", "s": "mana"}, {"_type": "Template25", "hole0": "SelfSelector"}], "hole1": {"id": "Attribute", "_type": "Name"}, "hole0": "ManaCost"}, {"_type": "Template24_expr_seq", "hole2": [{"_type": "Template36_expr_seq"}], "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"id": "CardQuery", "_type": "Name"}, "hole0": "Transform"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -2.9134950637817383, -0.4514436721801758, -0.0003286150167696178, -0.0012627089163288474, -0.000377655029296875, -1.9073486328125e-06, -0.007287748623639345, -0.004180908203125, -9.179073458653875e-06, -0.0026721954345703125, -1.71661376953125e-05, -5.7220458984375e-06, -0.0023674943950027227, -0.00044345855712890625, -0.006991386413574219, -0.000457763671875, -4.38690185546875e-05, -0.1250591278076172, -0.0792398452758789, -0.08461928367614746, -0.32094860076904297, -5.7220458984375e-06, -9.5367431640625e-05, -5.7220458984375e-06, -0.01611638069152832, -0.0025053024291992188, -0.0004749298095703125, -6.4849853515625e-05, -0.0001354217529296875, -0.6886817216873169, -7.82012939453125e-05, -0.00101470947265625, -5.14984130859375e-05, -0.0024708500131964684, -2.1219253540039062e-05, -3.576278118089249e-07, -0.043071746826171875, -0.000400543212890625, -0.05810236930847168, -0.006052255630493164, -0.00011491775512695312, -0.0001049041748046875, -0.03453826904296875, -0.0007343292236328125, -0.001804351806640625, -3.814697265625e-06, -1.9073486328125e-06, -0.03384125232696533, -1.9431114196777344e-05, -2.741813204920618e-06, -0.001041412353515625, -1.9073486328125e-06, 0.0, -0.047541022300720215, 0.0, -6.103515625e-05, -3.814697265625e-06, -0.001134037971496582, -0.00024116039276123047, -1.1920928244535389e-07, -9.655952453613281e-06, 0.0, -2.861022494471399e-06, 0.0, -0.0002117156982421875, -8.58306884765625e-05, -1.9073486328125e-06, -3.5762730021815514e-07, -2.1457672119140625e-06, -3.5762791412707884e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaCost(Attribute('mana', SelfSelector())),\n            IsMinion()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 59, 156, "Transform", "<EOS>", 25, 133, "Card", "Query", "<EOS>", 212, 76, 195, "conditions", "<EOS>", 23, 129, 206, 59, 157, "Mana", "Cost", "<EOS>", 25, 133, "Attribute", "<EOS>", 206, 56, 142, "mana", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 62, 169, "Is", "Minion", "<EOS>", 205, 71, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -5.041286388792059, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.1620436906814575, -0.003307526931166649, -0.010038375854492188, -0.0010852813720703125, -7.62939453125e-05, -0.001041412353515625, -0.000713348388671875, -0.1972332000732422, -0.0003942250623367727, -7.987022399902344e-06, -9.5367431640625e-06, 0.0, -0.00023387875990010798, -0.031257133930921555, -3.814697265625e-06, -0.0569000244140625, -0.8069686889648438, -0.005143165588378906, -0.0035905838012695312, -0.011333703994750977, -7.62939453125e-06, -0.0001220703125, 0.0, -0.001711726188659668, -0.005501482170075178, 0.0, -0.00753021240234375, -0.0074520111083984375, -0.03344917297363281, -2.589898109436035, -3.814697265625e-06, -0.0019295880338177085, -7.867813110351562e-06, -3.814697265625e-06, -1.3470649719238281e-05, 0.0, -3.600090349209495e-05, 0.0, -7.05718994140625e-05, -6.29425048828125e-05, -3.814697265625e-06, -9.536720426694956e-07, -2.1457672119140625e-06, -1.5497211052206694e-06, -2.0265579223632812e-06], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(3)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -5.123752490163831, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Str", "s": "health"}, {"_type": "Str", "s": "attack"}, {"_type": "NameConstant", "value": true}], "func": {"id": "<UNK>Devilsaur", "_type": "Name"}}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.4230986833572388, -0.5940490365028381, -0.29993095993995667, -0.11377334594726562, -0.6101665496826172, -0.00238037109375, -0.3449994921684265, -6.4373016357421875e-06, -0.008275985717773438, -0.00014495849609375, -0.10531940311193466, -1.52587890625e-05, -0.5087881088256836, -0.0074615478515625, -0.0023075342178344727, 0.0, -0.11192893981933594, -0.0004138946533203125, -3.814697265625e-06, 0.0, -0.0024472475051879883, -1.1444091796875e-05, 0.0, -0.8516912460327148, -3.814697265625e-06, -1.9073486328125e-06, -0.0012760162353515625, -1.1920928244535389e-07, -0.0004405975341796875, -1.33514404296875e-05, -0.02458786964416504, -2.47955322265625e-05, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.0010890960693359375, 0.0, -0.0032901763916015625, -5.7220458984375e-06, -0.0026569366455078125, -0.00013017654418945312, 0.0, -1.9073486328125e-06, 0.0, -5.006789251638111e-06, 0.0, -0.0008487701416015625, -4.57763671875e-05, -5.7220458984375e-06, -5.960455382592045e-07, -2.384185791015625e-06, -5.960459930065554e-07, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(<UNK>Devilsaur(\n            'health', 'attack', True), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "<UNK>", "Devilsaur", "<EOS>", 207, 56, 142, "health", "<EOS>", 56, 142, "attack", "<EOS>", 54, 134, "False", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Both", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -7.579713936709588, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"_type": "Str", "s": "attack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Attribute", "_type": "Name"}}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "UnaryOp", "op": {"_type": "USub"}, "operand": {"_type": "Template34"}}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.1620436906814575, -0.003307526931166649, -0.010038375854492188, -0.0010852813720703125, -7.62939453125e-05, -0.001041412353515625, -0.000713348388671875, -0.1972332000732422, -0.0003942250623367727, -7.987022399902344e-06, -9.5367431640625e-06, 0.0, -0.00023387875990010798, -0.031257133930921555, -3.814697265625e-06, -0.0569000244140625, -1.763066291809082, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -0.0033538341522216797, -8.7738037109375e-05, -0.0004596710205078125, -1.71661376953125e-05, -0.0003204345703125, -0.27337324619293213, -1.33514404296875e-05, -0.40880870819091797, -1.52587890625e-05, -0.25744545459747314, -2.4080276489257812e-05, -1.1563301086425781e-05, -0.0035114288330078125, -0.5938806533813477, -0.8691989183425903, -9.655952453613281e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.002853989601135254, -0.01614188775420189, 0.0, -0.06085014343261719, -0.7484159469604492, -0.00124359130859375, -0.000751495361328125, -0.4066333770751953, -0.0066699981689453125, -0.4044933319091797, -1.9073486328125e-06, -0.19142627716064453, -1.9073486328125e-06, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -6.628033588640392e-05, 0.0, -2.09808349609375e-05, -4.57763671875e-05, -1.9073486328125e-06, -3.218625352019444e-06, -1.1920928244535389e-07, -1.6689301673977752e-06, -1.9073486328125e-06], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Attribute('attack', SelfSelector()))), Buff(\n            ChangeHealth(-1))]), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 48, 111, 25, 133, "Attribute", "<EOS>", 206, 56, 142, "attack", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 74, 190, 100, 38, 71, 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}, {"score": -7.8626762922539015, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TinkmasterOverspark", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Tinkmaster Overspark"}, {"_type": "Template35"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"_type": "Str", "s": "attack"}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Attribute", "_type": "Name"}}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "EnemyPlayer", "_type": "Name"}, "hole0": "WeaponSelector"}, {"_type": "Template19", "hole1": {"id": "Transform", "_type": "Name"}, "hole0": "Buff"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 3, "hole0": 3}], "hole1": "MinionCard"}, "score_history": [0.0, -3.24249267578125e-05, -3.528532761265524e-05, -2.467606282152701e-05, -0.00025674383505247533, -2.142973244190216e-06, -4.0531158447265625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-05, -7.62939453125e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -1.5139465176616795e-05, -3.457068669376895e-05, -4.768370445162873e-07, -5.924701690673828e-05, -0.0003604888916015625, -4.9591064453125e-05, -8.0108642578125e-05, 0.0, -3.814697265625e-06, -0.0003151893615722656, -1.9073486328125e-06, -8.58306884765625e-05, -9.72747802734375e-05, -0.00011444091796875, -0.0006542205810546875, 0.0, -0.002407073974609375, -2.47955322265625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-05, -1.9073486328125e-06, -0.024532318115234375, -0.07171916961669922, -0.000942230224609375, -3.62396240234375e-05, -3.814697265625e-06, -1.1620436906814575, -0.003307526931166649, -0.010038375854492188, -0.0010852813720703125, -7.62939453125e-05, -0.001041412353515625, -0.000713348388671875, -0.1972332000732422, -0.0003942250623367727, -7.987022399902344e-06, -9.5367431640625e-06, 0.0, -0.00023387875990010798, -0.031257133930921555, -3.814697265625e-06, -0.0569000244140625, -1.763066291809082, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -0.0033538341522216797, -8.7738037109375e-05, -0.0004596710205078125, -1.71661376953125e-05, -0.0003204345703125, -0.27337324619293213, -1.33514404296875e-05, -0.40880870819091797, -1.52587890625e-05, -0.25744545459747314, -2.4080276489257812e-05, -1.1563301086425781e-05, -0.0035114288330078125, -0.8185625076293945, -0.9662284851074219, -0.003908991813659668, 0.0, -0.000576019287109375, -3.814697265625e-06, -0.06693021208047867, -0.0037246940191835165, -1.1920928244535389e-07, -0.5283603668212891, -0.3215360641479492, -0.17876529693603516, 0.0, -0.0003032684326171875, 0.0, -0.023695137351751328, -0.08912709355354309, -0.0017490386962890625, 0.0, -0.5818811058998108, -1.1920928244535389e-07, -2.1457672119140625e-06, -5.7220458984375e-06, 0.0, -4.4226646423339844e-05, 0.0, -4.1961669921875e-05, -0.0002193450927734375, -1.9073486328125e-06, -3.0513831006828696e-05, -1.1920928244535389e-07, -7.6293763413559645e-06, 0.0], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(\n            ChangeAttack(Attribute('attack', SelfSelector()))),\n            WeaponSelector(EnemyPlayer()), Buff(Transform())]),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [77, 145, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Tinkmaster", " ", "Overspark", "<EOS>", 70, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 206, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 48, 111, 25, 133, "Attribute", "<EOS>", 206, 56, 142, "attack", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", 59, 155, "Weapon", "Selector", "<EOS>", 25, 133, "Enemy", "Player", "<EOS>", 59, 155, "Buff", "<EOS>", 25, 133, "Transform", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "3", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"score": -2.5066415422289765, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.5342817306518555, -0.1365814208984375, -0.0027923583984375, -0.006041526794433594, -5.7220458984375e-06, -0.0004367828369140625, -0.00022125244140625, -0.4227790832519531, -0.000408172607421875, -5.7220458984375e-06, -5.7220458984375e-06, -0.0007894032169133425, -1.5497195136049413e-06, -0.0005970001220703125, 0.0, -7.62939453125e-05, 0.0, -0.05777943134307861, 0.0, -0.01574420928955078, -0.0001163482666015625, -0.17210960388183594, -1.1444091796875e-05, 0.0, 0.0, -0.0014336109161376953, -1.9073486328125e-06, -6.103515625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -0.060179710388183594, -5.7220458984375e-06, -0.01377105712890625, 0.0, -0.6746578216552734, -2.86102294921875e-05, -0.0002986192121170461, 0.0, -0.0008064508438110352, 0.0, -3.814697265625e-06, -0.026719093322753906, -9.5367431640625e-06, -0.010571479797363281, -7.05718994140625e-05, -0.0007709263591095805, -3.933906555175781e-06], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n    return super().can_use(player, game) and len(self.player.minions) < 7\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -2.734468464022136, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.5342817306518555, -0.1365814208984375, -0.0027923583984375, -0.006041526794433594, -5.7220458984375e-06, -0.0004367828369140625, -0.00022125244140625, -0.4227790832519531, -0.000408172607421875, -5.7220458984375e-06, -5.7220458984375e-06, -0.0007894032169133425, -1.5497195136049413e-06, -0.0005970001220703125, 0.0, -7.62939453125e-05, 0.0, -0.05777943134307861, 0.0, -0.01574420928955078, -0.0001163482666015625, -0.17210960388183594, -1.1444091796875e-05, 0.0, 0.0, -0.0014336109161376953, -1.9073486328125e-06, -6.103515625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -0.060179710388183594, -5.7220458984375e-06, -0.01377105712890625, 0.0, -0.7253074645996094, 0.0, -0.00029206275939941406, -1.1920928244535389e-07, -0.0019852803088724613, -3.814697265625e-06, 0.0, -0.20160865783691406, -2.47955322265625e-05, -0.01123046875, -0.0002040863037109375, -0.0011070965556427836, -3.933906555175781e-06], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n    return super().can_use(player, game) and len(game.other_player.minions) < 7\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -3.208820498181467, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "Template10"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.5342817306518555, -2.30812931060791], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n    super().use(player, game)\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 217, 92]}, {"score": -3.996185318409516, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"test": {"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "target", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}]}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "args": {"_type": "arguments", "args": [{"_type": "Template28"}, {"_type": "arg", "arg": "index"}, {"_type": "arg", "arg": "index"}]}, "name": "_reveal"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.9063167572021484, -0.008460044860839844, -0.0027303695678710938, -0.03226339817047119, -5.364403477869928e-06, -0.0032863616943359375, -0.001300811767578125, -0.021010398864746094, -0.0022296905517578125, -9.5367431640625e-06, -4.00543212890625e-05, -0.2078239768743515, -7.390974587906385e-06, -0.0003757476806640625, -6.866455078125e-05, -0.373091459274292, -3.9577033021487296e-05, -0.0003223419189453125, -0.0003662109375, -0.000946044921875, -0.7626771926879883, -0.0002593994140625, -0.0005779266357421875, -9.918212890625e-05, -0.0002269744873046875, 0.0, -0.05245542526245117, -4.38690185546875e-05, -0.030181884765625, -2.8848648071289062e-05, -0.02019023895263672, -0.00424957275390625, -1.9073486328125e-05, -1.9073486328125e-06, -0.0002307891845703125, -3.62396240234375e-05, -0.04178905487060547, 0.0, -0.08197128772735596, 0.0, -0.4596099853515625, 0.0, -0.0039501190185546875, -5.14984130859375e-05, -0.0006160736083984375, 0.0, -6.4849853515625e-05, -0.02390766143798828, -0.0039272308349609375, -7.62939453125e-06, -0.0064629316329956055, -3.814697265625e-06, -0.0004616975784301758, 0.0, -0.0040493011474609375, -0.0001220703125, -0.005076408386230469, 0.0, -0.013913154602050781, -0.0002040863037109375, -2.09808349609375e-05, -5.14984130859375e-05, -0.021042823791503906, -5.7220458984375e-06, -0.02942180633544922, -1.9073486328125e-06, -0.002147674560546875, -0.005360602866858244, 0.0, -0.007563948165625334, -9.810924530029297e-05, -0.001320958137512207, -0.0001926422119140625, -0.000518798828125, -7.82012939453125e-05, -3.24249267578125e-05, -0.09005403518676758, -4.1961669921875e-05, -3.814697265625e-05, -4.00543212890625e-05, -0.0001163482666015625, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.0007352828979492188, 0.0, -0.0005321502685546875, -9.72747802734375e-05, -0.015433311462402344, 0.0, -0.0015869140625, -1.9073486328125e-05, -7.05718994140625e-05, -3.0517578125e-05, -0.0025234222412109375, -1.9073486328125e-05, -0.16447734832763672, -2.47955322265625e-05, -0.0002803802490234375, -0.0018106673378497362, -1.9073486328125e-06, -0.004171012435108423, -7.164476119214669e-05, -0.009036660194396973, -0.0001735687255859375, -0.000286102294921875, -0.0002460479736328125, -3.4332275390625e-05, -0.1903759241104126, -7.82012939453125e-05, -2.86102294921875e-05, -3.814697265625e-05, -0.0002155303955078125, 0.0, -0.00014495849609375, -1.9073486328125e-06, -0.0007123947143554688, 0.0], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, index, index):\n        if card.<UNK>():\n            card.target = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 219, 88, 118, "_reveal", "<EOS>", 5, 193, 201, 0, 1, 192, "index", "<EOS>", 1, 192, "index", "<EOS>", 217, 89, 121, 20, 109, 17, 104, 25, 133, "card", "<EOS>", "<UNK>", "<EOS>", 218, 82, 103, 205, 45, 104, 25, 133, "card", "<EOS>", "target", "<EOS>", 26, 134, "True", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -4.220183289242698, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Compare", "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "left": {"id": "target", "_type": "Name"}, "ops": [{"_type": "Is"}]}, {"_type": "UnaryOp", "op": {"_type": "Not"}, "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "attacker", "_type": "Name"}}}], "op": {"_type": "And"}}}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.5342817306518555, -0.1365814208984375, -0.0027923583984375, -0.006041526794433594, -5.7220458984375e-06, -0.0004367828369140625, -0.00022125244140625, -1.7000322341918945, -3.814697265625e-06, -0.9313526153564453, -4.9591064453125e-05, -0.0880814790725708, 0.0, -0.0002918243408203125, -0.025074005126953125, -3.814697265625e-06, -9.5367431640625e-05, -3.814697265625e-06, -0.000835418701171875, 0.0, -1.1444091796875e-05, 0.0, -0.029691696166992188, -1.9073486328125e-06, -0.00020813941955566406, 0.0, -0.1444692611694336, 0.0, -0.0018291473388671875, -0.0011882781982421875, -0.005953788757324219, -0.0002460479736328125, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0325164794921875, -1.9073486328125e-06, -0.21143221855163574, -5.960462772236497e-07], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n    return target is self.player.hero and not attacker.<UNK>\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 217, 91, 140, 19, 107, 6, 206, 49, 114, 25, 133, "target", "<EOS>", 202, 12, 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 74, 190, 99, 17, 104, 25, 133, "attacker", "<EOS>", "<UNK>", "<EOS>"]}, {"score": -4.572657501073195, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Template38"}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.5342817306518555, -0.1365814208984375, -0.0027923583984375, -0.006041526794433594, -5.7220458984375e-06, -0.0004367828369140625, -0.00022125244140625, -0.4227790832519531, -0.000408172607421875, -5.7220458984375e-06, -5.7220458984375e-06, -0.0007894032169133425, -1.5497195136049413e-06, -0.0005970001220703125, 0.0, -7.62939453125e-05, 0.0, -0.05777943134307861, 0.0, -0.01574420928955078, -0.0001163482666015625, -0.17210960388183594, -1.1444091796875e-05, 0.0, 0.0, -0.0014336109161376953, -1.9073486328125e-06, -6.103515625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -2.8500776290893555, -0.0002756117610260844, 0.0, -1.9073486328125e-06, -0.003055572509765625, -1.9073486328125e-06, -0.000209808349609375, -1.52587890625e-05, -0.00026988983154296875, -5.7220458984375e-06], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n    return super().can_use(player, game) and len(player.minions) < 7\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 42, "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -4.75269128482887, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"test": {"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "<UNK>", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}]}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "args": {"_type": "arguments", "args": [{"_type": "Template28"}, {"_type": "arg", "arg": "index"}, {"_type": "arg", "arg": "index"}]}, "name": "_reveal"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.9063167572021484, -0.008460044860839844, -0.0027303695678710938, -0.03226339817047119, -5.364403477869928e-06, -0.0032863616943359375, -0.001300811767578125, -0.021010398864746094, -0.0022296905517578125, -9.5367431640625e-06, -4.00543212890625e-05, -0.2078239768743515, -7.390974587906385e-06, -0.0003757476806640625, -6.866455078125e-05, -0.373091459274292, -3.9577033021487296e-05, -0.0003223419189453125, -0.0003662109375, -0.000946044921875, -0.7626771926879883, -0.0002593994140625, -0.0005779266357421875, -9.918212890625e-05, -0.0002269744873046875, 0.0, -0.05245542526245117, -4.38690185546875e-05, -0.030181884765625, -2.8848648071289062e-05, -0.02019023895263672, -0.00424957275390625, -1.9073486328125e-05, -1.9073486328125e-06, -0.0002307891845703125, -3.62396240234375e-05, -0.04178905487060547, 0.0, -0.08197128772735596, 0.0, -1.1912484169006348, 0.0, -0.0010089874267578125, -7.05718994140625e-05, -0.0007762908935546875, 0.0, -0.000110626220703125, -0.05238151550292969, -0.0024261474609375, -9.5367431640625e-06, -0.0038084981497377157, -3.814697265625e-06, -0.00040078163146972656, 0.0, -0.0035572052001953125, -0.000110626220703125, -0.005229949951171875, 0.0, -0.012156486511230469, -0.00022125244140625, -1.9073486328125e-05, -5.340576171875e-05, -0.025160789489746094, -3.814697265625e-06, -0.03113269805908203, -1.9073486328125e-06, -0.0020771026611328125, -0.005691289436072111, 0.0, -0.007857322692871094, -9.608268737792969e-05, -0.0013066530227661133, -0.000202178955078125, -0.000484466552734375, -7.82012939453125e-05, -3.24249267578125e-05, -0.0893242359161377, -4.1961669921875e-05, -3.62396240234375e-05, -4.00543212890625e-05, -0.00011444091796875, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.0007343292236328125, 0.0, -0.0005321502685546875, -9.72747802734375e-05, -0.015838623046875, 0.0, -0.0015850067138671875, -1.9073486328125e-05, -7.2479248046875e-05, -3.0517578125e-05, -0.0025424957275390625, -2.09808349609375e-05, -0.16386795043945312, -2.47955322265625e-05, -0.0002803802490234375, -0.0018106673378497362, -1.9073486328125e-06, -0.0041708932258188725, -7.152555190259591e-05, -0.009010910987854004, -0.0001735687255859375, -0.000286102294921875, -0.0002460479736328125, -3.4332275390625e-05, -0.19039499759674072, -7.82012939453125e-05, -2.86102294921875e-05, -3.814697265625e-05, -0.0002155303955078125, 0.0, -0.00014495849609375, -1.9073486328125e-06, -0.0007114410400390625, 0.0], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, index, index):\n        if card.<UNK>():\n            card.<UNK> = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 219, 88, 118, "_reveal", "<EOS>", 5, 193, 201, 0, 1, 192, "index", "<EOS>", 1, 192, "index", "<EOS>", 217, 89, 121, 20, 109, 17, 104, 25, 133, "card", "<EOS>", "<UNK>", "<EOS>", 218, 82, 103, 205, 45, 104, 25, 133, "card", "<EOS>", "<UNK>", "<EOS>", 26, 134, "True", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -4.875227473286941, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "args": {"_type": "Template8"}, "name": "use"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -1.5031213760375977, -0.000995635986328125, -0.007143974304199219, -1.1444091796875e-05, -0.0005245208740234375, -0.0002651214599609375, -0.24489116668701172, -0.0005359649658203125, -7.62939453125e-06, -7.62939453125e-06, -0.00090706319315359, -9.536738616588991e-07, -0.001064300537109375, 0.0, -8.0108642578125e-05, 0.0, -0.17024624347686768, 0.0, -0.0191802978515625, -0.000125885009765625, -0.18961143493652344, -9.5367431640625e-06, 0.0, 0.0, -0.001592874526977539, -1.9073486328125e-06, -6.29425048828125e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.04852294921875, -3.814697265625e-06, -0.013088226318359375, 0.0, -0.6221323013305664, -2.6702880859375e-05, -0.0002887248410843313, 0.0, -0.0006548166275024414, 0.0, -3.814697265625e-06, -0.026548385620117188, -1.1444091796875e-05, -0.01027679443359375, -6.866455078125e-05, -0.0007976292399689555, -3.933906555175781e-06, -0.0013027191162109375, -0.0034732818603515625, -0.00025177001953125, -0.2680778503417969, -1.9073486328125e-06, -0.008852958679199219, -0.1878671646118164, -0.0047702789306640625, -0.7549629211425781, -0.0022420883178710938, -0.0013141632080078125, -1.33514404296875e-05, -0.1573963165283203, -1.1444091796875e-05, -0.0010356903076171875, -0.006414404604583979, -1.9073486328125e-06, -0.008849501609802246, -9.894371032714844e-06, -0.0038071870803833008, -2.288818359375e-05, -0.00162506103515625, -0.0002918243408203125, -1.1444091796875e-05, -0.1432098150253296, -4.9591064453125e-05, -6.29425048828125e-05, -2.288818359375e-05, -0.0001583099365234375, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.0007534027099609375, 0.0, -0.017546653747558594, -5.7220458984375e-05, -0.040740013122558594, 0.0, -0.0016651153564453125, -2.09808349609375e-05, -7.62939453125e-05, -3.4332275390625e-05, -0.0020961761474609375, -2.09808349609375e-05, -0.15075397491455078, -2.86102294921875e-05, -0.0002574920654296875, -0.0016583171673119068, -1.9073486328125e-06, -0.004225014243274927, -6.771085463697091e-05, -0.008480429649353027, -0.0001850128173828125, -0.0002841949462890625, -0.00025177001953125, -3.4332275390625e-05, -0.19369053840637207, -7.82012939453125e-05, -2.6702880859375e-05, -3.814697265625e-05, -0.000217437744140625, 0.0, -0.00014400482177734375, -1.9073486328125e-06, -0.0007162094116210938, 0.0], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(self.player.minions) < 7\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.game.current_player.bind('card_played', self._reveal)\n\n        def deactivate(self, player):\n            player.game.current_player.unbind('card_played', self._reveal)\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 217, 88, 118, "use", "<EOS>", 3, 219, 92, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -5.049213648987568, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 0}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Gt"}]}], "op": {"_type": "And"}}}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.5342817306518555, -0.1365814208984375, -0.0027923583984375, -0.006041526794433594, -5.7220458984375e-06, -0.0004367828369140625, -0.00022125244140625, -0.4227790832519531, -0.000408172607421875, -5.7220458984375e-06, -5.7220458984375e-06, -0.0007894032169133425, -1.5497195136049413e-06, -0.0005970001220703125, 0.0, -7.62939453125e-05, 0.0, -0.05777943134307861, 0.0, -0.01574420928955078, -0.0001163482666015625, -0.17210960388183594, -1.1444091796875e-05, 0.0, 0.0, -0.0014336109161376953, -1.9073486328125e-06, -6.103515625e-05, -5.14984130859375e-05, -1.9073486328125e-06, -0.060179710388183594, -5.7220458984375e-06, -0.01377105712890625, 0.0, -0.7253074645996094, 0.0, -0.00029206275939941406, -1.1920928244535389e-07, -0.0019852803088724613, -3.814697265625e-06, 0.0, -2.526339530944824, -0.000576019287109375, -7.62939453125e-05, -9.5367431640625e-06, -0.0019209355814382434, -1.9073486328125e-06], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n    return super().can_use(player, game) and len(game.other_player.minions) > 0\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 9, 205, 55, 138, "0", "<EOS>"]}, {"score": -5.420511991790136, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"test": {"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "target", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}]}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "args": {"_type": "arguments", "args": [{"_type": "Template28"}, {"_type": "arg", "arg": "card"}, {"_type": "arg", "arg": "index"}]}, "name": "_reveal"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.9063167572021484, -0.008460044860839844, -0.0027303695678710938, -0.03226339817047119, -5.364403477869928e-06, -0.0032863616943359375, -0.001300811767578125, -0.021010398864746094, -0.0022296905517578125, -9.5367431640625e-06, -4.00543212890625e-05, -2.085676908493042, -6.747245788574219e-05, -0.00026702880859375, -6.103515625e-05, -0.08440792560577393, -2.682186823221855e-05, -0.0002689361572265625, -0.00026702880859375, -0.0013370513916015625, -0.6490640640258789, -0.0002384185791015625, -0.0005664825439453125, -5.340576171875e-05, -0.000217437744140625, 0.0, -0.06960833072662354, -4.00543212890625e-05, -0.03144645690917969, -2.8848648071289062e-05, -0.025190353393554688, -0.004546165466308594, -2.09808349609375e-05, -1.9073486328125e-06, -0.0001735687255859375, -3.4332275390625e-05, -0.03867816925048828, 0.0, -0.08860576152801514, 0.0, -0.3849973678588867, 0.0, -0.003937721252441406, -5.14984130859375e-05, -0.0006122589111328125, 0.0, -6.29425048828125e-05, -0.022507667541503906, -0.0040740966796875, -5.7220458984375e-06, -0.006032824516296387, -3.814697265625e-06, -0.0004693269729614258, 0.0, -0.004073143005371094, -0.0001239776611328125, -0.005122184753417969, 0.0, -0.014193534851074219, -0.0002079010009765625, -2.09808349609375e-05, -5.14984130859375e-05, -0.020549774169921875, -5.7220458984375e-06, -0.027210235595703125, -1.9073486328125e-06, -0.0022678375244140625, -0.005368113052099943, 0.0, -0.0075820679776370525, -0.00010001659393310547, -0.0013257265090942383, -0.0001926422119140625, -0.0005207061767578125, -7.82012939453125e-05, -3.24249267578125e-05, -0.09003651142120361, -4.1961669921875e-05, -3.814697265625e-05, -4.00543212890625e-05, -0.0001163482666015625, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.000736236572265625, 0.0, -0.0005321502685546875, -9.72747802734375e-05, -0.015416145324707031, 0.0, -0.001590728759765625, -1.9073486328125e-05, -7.05718994140625e-05, -3.0517578125e-05, -0.002513885498046875, -1.9073486328125e-05, -0.16452980041503906, -2.47955322265625e-05, -0.0002803802490234375, -0.0018105481285601854, -1.9073486328125e-06, -0.004170058760792017, -7.164476119214669e-05, -0.009045243263244629, -0.0001735687255859375, -0.000286102294921875, -0.0002460479736328125, -3.4332275390625e-05, -0.19037020206451416, -7.82012939453125e-05, -2.86102294921875e-05, -3.814697265625e-05, -0.0002155303955078125, 0.0, -0.00014495849609375, -1.9073486328125e-06, -0.0007123947143554688, 0.0], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, card, index):\n        if card.<UNK>():\n            card.target = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 219, 88, 118, "_reveal", "<EOS>", 5, 193, 201, 0, 1, 192, "card", "<EOS>", 1, 192, "index", "<EOS>", 217, 89, 121, 20, 109, 17, 104, 25, 133, "card", "<EOS>", "<UNK>", "<EOS>", 218, 82, 103, 205, 45, 104, 25, 133, "card", "<EOS>", "target", "<EOS>", 26, 134, "True", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -5.46417158995245, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Template10"}, {"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "args": {"_type": "Template8"}, "name": "use"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -1.5031213760375977, -0.000995635986328125, -0.007143974304199219, -1.1444091796875e-05, -0.0005245208740234375, -0.0002651214599609375, -0.24489116668701172, -0.0005359649658203125, -7.62939453125e-06, -7.62939453125e-06, -0.00090706319315359, -9.536738616588991e-07, -0.001064300537109375, 0.0, -8.0108642578125e-05, 0.0, -0.17024624347686768, 0.0, -0.0191802978515625, -0.000125885009765625, -0.18961143493652344, -9.5367431640625e-06, 0.0, 0.0, -0.001592874526977539, -1.9073486328125e-06, -6.29425048828125e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.04852294921875, -3.814697265625e-06, -0.013088226318359375, 0.0, -0.7854366302490234, 0.0, -0.00033020973205566406, -1.1920928244535389e-07, -0.0019369517685845494, -3.814697265625e-06, -1.9073486328125e-06, -0.2128744125366211, -2.47955322265625e-05, -0.011384010314941406, -0.000202178955078125, -0.0011473892955109477, -3.933906555175781e-06, -0.0014553070068359375, -0.0020427703857421875, -0.0002079010009765625, -0.39427614212036133, -3.814697265625e-06, -0.00875091552734375, -0.22800350189208984, -0.00598907470703125, -0.8544244766235352, -0.0026674270629882812, -0.0014934539794921875, -1.33514404296875e-05, -0.13185977935791016, -1.33514404296875e-05, -0.0010890960693359375, -0.005527487490326166, -1.9073486328125e-06, -0.009266972541809082, -9.894371032714844e-06, -0.0030748844146728516, -2.47955322265625e-05, -0.0015106201171875, -0.0002689361572265625, -1.33514404296875e-05, -0.13962066173553467, -4.9591064453125e-05, -5.91278076171875e-05, -2.288818359375e-05, -0.000164031982421875, 0.0, -0.0001316070556640625, -1.9073486328125e-06, -0.0007505416870117188, 0.0, -0.017763137817382812, -5.7220458984375e-05, -0.037697792053222656, 0.0, -0.0015354156494140625, -2.288818359375e-05, -7.82012939453125e-05, -3.4332275390625e-05, -0.0021209716796875, -2.09808349609375e-05, -0.15424442291259766, -2.86102294921875e-05, -0.00025177001953125, -0.001634832820855081, -1.9073486328125e-06, -0.0042319283820688725, -6.771085463697091e-05, -0.008415579795837402, -0.000186920166015625, -0.000286102294921875, -0.0002536773681640625, -3.4332275390625e-05, -0.19383108615875244, -7.82012939453125e-05, -2.6702880859375e-05, -3.814697265625e-05, -0.0002193450927734375, 0.0, -0.0001430511474609375, -1.9073486328125e-06, -0.0007143020629882812, 0.0], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) < 7\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.game.current_player.bind('card_played', self._reveal)\n\n        def deactivate(self, player):\n            player.game.current_player.unbind('card_played', self._reveal)\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 217, 88, 118, "use", "<EOS>", 3, 219, 92, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -5.7293359181885535, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"test": {"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "target", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}]}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "args": {"_type": "arguments", "args": [{"_type": "Template28"}, {"_type": "arg", "arg": "index"}, {"_type": "arg", "arg": "index"}]}, "name": "_reveal"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Template38"}}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.9063167572021484, -0.008460044860839844, -0.0027303695678710938, -0.03226339817047119, -5.364403477869928e-06, -0.0032863616943359375, -0.001300811767578125, -0.021010398864746094, -0.0022296905517578125, -9.5367431640625e-06, -4.00543212890625e-05, -0.2078239768743515, -7.390974587906385e-06, -0.0003757476806640625, -6.866455078125e-05, -0.373091459274292, -3.9577033021487296e-05, -0.0003223419189453125, -0.0003662109375, -0.000946044921875, -0.7626771926879883, -0.0002593994140625, -0.0005779266357421875, -9.918212890625e-05, -0.0002269744873046875, 0.0, -0.05245542526245117, -4.38690185546875e-05, -0.030181884765625, -2.8848648071289062e-05, -0.02019023895263672, -0.00424957275390625, -1.9073486328125e-05, -1.9073486328125e-06, -0.0002307891845703125, -3.62396240234375e-05, -0.04178905487060547, 0.0, -0.08197128772735596, 0.0, -0.4596099853515625, 0.0, -0.0039501190185546875, -5.14984130859375e-05, -0.0006160736083984375, 0.0, -6.4849853515625e-05, -0.02390766143798828, -0.0039272308349609375, -7.62939453125e-06, -0.0064629316329956055, -3.814697265625e-06, -0.0004616975784301758, 0.0, -0.0040493011474609375, -0.0001220703125, -0.005076408386230469, 0.0, -0.013913154602050781, -0.0002040863037109375, -2.09808349609375e-05, -5.14984130859375e-05, -0.021042823791503906, -5.7220458984375e-06, -0.02942180633544922, -1.9073486328125e-06, -0.002147674560546875, -0.005360602866858244, 0.0, -0.007563948165625334, -9.810924530029297e-05, -0.001320958137512207, -0.0001926422119140625, -0.000518798828125, -7.82012939453125e-05, -3.24249267578125e-05, -0.09005403518676758, -4.1961669921875e-05, -3.814697265625e-05, -4.00543212890625e-05, -0.0001163482666015625, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.0007352828979492188, 0.0, -0.0005321502685546875, -9.72747802734375e-05, -0.015433311462402344, 0.0, -0.0015869140625, -1.9073486328125e-05, -7.05718994140625e-05, -3.0517578125e-05, -0.0025234222412109375, -1.9073486328125e-05, -1.8887395858764648, -0.023867959156632423, -0.0003091096878051758, -0.0033370256423950195, -5.53131103515625e-05, -0.0007152557373046875, -0.0003681182861328125, -0.00019073486328125, -0.18555080890655518, -0.00015926361083984375, -3.814697265625e-05, -2.47955322265625e-05, -0.00099945068359375, 0.0, -0.0001392364501953125, -3.814697265625e-06, -0.00086212158203125, 0.0], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, index, index):\n        if card.<UNK>():\n            card.target = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('card_played', self._reveal)\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 219, 88, 118, "_reveal", "<EOS>", 5, 193, 201, 0, 1, 192, "index", "<EOS>", 1, 192, "index", "<EOS>", 217, 89, 121, 20, 109, 17, 104, 25, 133, "card", "<EOS>", "<UNK>", "<EOS>", 218, 82, 103, 205, 45, 104, 25, 133, "card", "<EOS>", "target", "<EOS>", 26, 134, "True", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 17, 104, 42, "opponent", "<EOS>", "unbind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}, {"score": -5.763531759333993, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"id": "game", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -1.5031213760375977, -0.000995635986328125, -0.007143974304199219, -1.1444091796875e-05, -0.0005245208740234375, -0.0002651214599609375, -0.24489116668701172, -0.0005359649658203125, -7.62939453125e-06, -7.62939453125e-06, -0.00090706319315359, -9.536738616588991e-07, -0.001064300537109375, 0.0, -8.0108642578125e-05, 0.0, -0.17024624347686768, 0.0, -0.0191802978515625, -0.000125885009765625, -0.18961143493652344, -9.5367431640625e-06, 0.0, 0.0, -0.001592874526977539, -1.9073486328125e-06, -6.29425048828125e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.04852294921875, -3.814697265625e-06, -0.013088226318359375, 0.0, -0.7854366302490234, 0.0, -0.00033020973205566406, -1.1920928244535389e-07, -0.0019369517685845494, -3.814697265625e-06, -1.9073486328125e-06, -0.2128744125366211, -2.47955322265625e-05, -0.011384010314941406, -0.000202178955078125, -0.0011473892955109477, -3.933906555175781e-06, -0.0014553070068359375, -0.0020427703857421875, -0.0002079010009765625, -1.2091307640075684, 0.0, -0.02954864501953125, -0.0040531158447265625, -0.0005855560302734375, -0.000225067138671875, -0.001102447509765625, -4.00543212890625e-05, -0.0001888275146484375, -6.866455078125e-05, -0.3814058303833008, -7.82012939453125e-05, -1.71661376953125e-05, -1.33514404296875e-05, -0.00012016281834803522, -8.106231689453125e-06, -0.0014629364013671875, 0.0, -4.57763671875e-05, 0.0, -0.05314362049102783, 0.0, -0.0031299591064453125, -3.24249267578125e-05, -0.06689167022705078, -3.814697265625e-06, 0.0, 0.0, -0.0018575191497802734, -1.9073486328125e-06, -4.57763671875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.17587852478027344, -1.9073486328125e-06, -0.007877349853515625, 0.0, -0.5348587036132812, -1.52587890625e-05, -0.00044345849892124534, 0.0, -0.001073598861694336, 0.0, -3.814697265625e-06, -0.026851654052734375, -7.62939453125e-06, -0.0114288330078125, -5.340576171875e-05, -0.0007429121760651469, -3.933906555175781e-06], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) < 7\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(self.player.minions) < 7\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -5.785340940372407, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "args": {"_type": "Template8"}, "name": "can_use"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template17", "hole3": "game", "hole2": "player", "hole1": "can_use", "hole0": {"_type": "Template25", "hole0": "super"}}, {"_type": "Compare", "comparators": [{"_type": "Num", "n": 7}], "left": {"_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}}], "func": {"id": "len", "_type": "Name"}}, "ops": [{"_type": "Lt"}]}], "op": {"_type": "And"}}}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -1.5031213760375977, -0.000995635986328125, -0.007143974304199219, -1.1444091796875e-05, -0.0005245208740234375, -0.0002651214599609375, -0.24489116668701172, -0.0005359649658203125, -7.62939453125e-06, -7.62939453125e-06, -0.00090706319315359, -9.536738616588991e-07, -0.001064300537109375, 0.0, -8.0108642578125e-05, 0.0, -0.17024624347686768, 0.0, -0.0191802978515625, -0.000125885009765625, -0.18961143493652344, -9.5367431640625e-06, 0.0, 0.0, -0.001592874526977539, -1.9073486328125e-06, -6.29425048828125e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.04852294921875, -3.814697265625e-06, -0.013088226318359375, 0.0, -0.6221323013305664, -2.6702880859375e-05, -0.0002887248410843313, 0.0, -0.0006548166275024414, 0.0, -3.814697265625e-06, -0.026548385620117188, -1.1444091796875e-05, -0.01027679443359375, -6.866455078125e-05, -0.0007976292399689555, -3.933906555175781e-06, -0.0013027191162109375, -0.0034732818603515625, -0.00025177001953125, -1.553781509399414, 0.0, -0.03743743896484375, -0.004244804382324219, -0.0007190704345703125, -0.0002346038818359375, -0.0012340545654296875, -4.00543212890625e-05, -0.0001983642578125, -6.866455078125e-05, -0.3966083526611328, -7.62939453125e-05, -1.71661376953125e-05, -1.33514404296875e-05, -0.0001287459017476067, -8.106231689453125e-06, -0.0014171600341796875, 0.0, -4.38690185546875e-05, 0.0, -0.056853413581848145, 0.0, -0.00350189208984375, -3.4332275390625e-05, -0.06624889373779297, -3.814697265625e-06, 0.0, 0.0, -0.0018270015716552734, -1.9073486328125e-06, -4.57763671875e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.17512798309326172, -1.9073486328125e-06, -0.00797271728515625, 0.0, -0.5369949340820312, -1.52587890625e-05, -0.00044155115028843284, 0.0, -0.0010602474212646484, 0.0, -3.814697265625e-06, -0.026892662048339844, -7.62939453125e-06, -0.011355400085449219, -5.53131103515625e-05, -0.0007408856181427836, -3.933906555175781e-06], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        return super().can_use(player, game) and len(self.player.minions) < 7\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(self.player.minions) < 7\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>", 217, 88, 118, "can_use", "<EOS>", 3, 217, 91, 140, 19, 107, 6, 206, 58, 153, 34, 171, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 49, 114, 20, 111, 25, 133, "len", "<EOS>", 205, 45, 104, 17, 104, 25, 133, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 202, 14, 205, 55, 138, "7", "<EOS>"]}, {"score": -6.1877836145749825, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "use", "hole7": [{"_type": "FunctionDef", "body": [{"test": {"_type": "Call", "func": {"attr": "<UNK>", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}}, "_type": "If", "body": [{"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "target", "_type": "Attribute", "value": {"id": "card", "_type": "Name"}}]}, {"_type": "Template23", "hole1": "reveal", "hole0": {"_type": "Template25", "hole0": "super"}}]}], "args": {"_type": "arguments", "args": [{"_type": "Template28"}, {"_type": "arg", "arg": "index"}, {"_type": "arg", "arg": "index"}]}, "name": "_reveal"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "card_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "activate"}, {"_type": "FunctionDef", "body": [{"_type": "Template23", "hole2": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"id": "self", "_type": "Name"}}], "hole1": "unbind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Template38"}}}}], "args": {"_type": "Template9"}, "name": "deactivate"}], "hole0": "Vaporize", "hole2": [{"_type": "Template6", "hole3": "RARE", "hole2": "MAGE", "hole1": 3, "hole0": "Vaporize"}], "hole6": [{"_type": "Template10"}], "hole5": [{"_type": "arg", "arg": "game"}], "hole1": "SecretCard"}, "score_history": [-5.7220458984375e-06, -0.0039520263671875, -6.747018051100895e-05, -0.0020297265145927668, -9.989728278014809e-05, -0.00026497154613025486, -2.956380194518715e-05, -4.1961669921875e-05, -0.00011444091796875, -0.0002307891845703125, -6.318092346191406e-06, -5.555152893066406e-05, -2.0265579223632812e-06, -1.7642974853515625e-05, -0.001323699951171875, -1.9073486328125e-06, -0.0017852783203125, -3.62396240234375e-05, -0.015981674194335938, 0.0, -6.437291176553117e-06, 0.0, -3.0517578125e-05, -2.288818359375e-05, -1.1444091796875e-05, -0.00507664680480957, 0.0, -0.0007610321044921875, -0.3344535827636719, -0.9063167572021484, -0.008460044860839844, -0.0027303695678710938, -0.03226339817047119, -5.364403477869928e-06, -0.0032863616943359375, -0.001300811767578125, -0.021010398864746094, -0.0022296905517578125, -9.5367431640625e-06, -4.00543212890625e-05, -0.2078239768743515, -7.390974587906385e-06, -0.0003757476806640625, -6.866455078125e-05, -0.373091459274292, -3.9577033021487296e-05, -0.0003223419189453125, -0.0003662109375, -0.000946044921875, -0.7626771926879883, -0.0002593994140625, -0.0005779266357421875, -9.918212890625e-05, -0.0002269744873046875, 0.0, -0.05245542526245117, -4.38690185546875e-05, -0.030181884765625, -2.8848648071289062e-05, -0.02019023895263672, -0.00424957275390625, -1.9073486328125e-05, -1.9073486328125e-06, -0.0002307891845703125, -3.62396240234375e-05, -0.04178905487060547, 0.0, -0.08197128772735596, 0.0, -0.4596099853515625, 0.0, -0.0039501190185546875, -5.14984130859375e-05, -0.0006160736083984375, 0.0, -6.4849853515625e-05, -0.02390766143798828, -0.0039272308349609375, -7.62939453125e-06, -0.0064629316329956055, -3.814697265625e-06, -0.0004616975784301758, 0.0, -0.0040493011474609375, -0.0001220703125, -0.005076408386230469, 0.0, -0.013913154602050781, -0.0002040863037109375, -2.09808349609375e-05, -5.14984130859375e-05, -0.021042823791503906, -5.7220458984375e-06, -0.02942180633544922, -1.9073486328125e-06, -0.002147674560546875, -0.005360602866858244, 0.0, -0.007563948165625334, -9.810924530029297e-05, -0.001320958137512207, -0.0001926422119140625, -0.000518798828125, -7.82012939453125e-05, -3.24249267578125e-05, -0.09005403518676758, -4.1961669921875e-05, -3.814697265625e-05, -4.00543212890625e-05, -0.0001163482666015625, 0.0, -0.00020599365234375, -1.9073486328125e-06, -0.0007352828979492188, 0.0, -0.0005321502685546875, -9.72747802734375e-05, -0.015433311462402344, 0.0, -0.0015869140625, -1.9073486328125e-05, -7.05718994140625e-05, -3.0517578125e-05, -0.0025234222412109375, -1.9073486328125e-05, -0.16447734832763672, -2.47955322265625e-05, -0.0002803802490234375, -0.0018106673378497362, -1.9073486328125e-06, -0.004171012435108423, -7.164476119214669e-05, -0.009036660194396973, -0.0001735687255859375, -0.000286102294921875, -0.0002460479736328125, -3.4332275390625e-05, -2.3817577362060547, -0.000110626220703125, -1.9073486328125e-05, -6.866455078125e-05, -0.0001316070556640625, 0.0, -0.00013256072998046875, -1.9073486328125e-06, -0.0009717941284179688, 0.0], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, index, index):\n        if card.<UNK>():\n            card.target = True\n            super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n", "choice_history": [77, 148, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 217, 98, 185, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 199, 1, 192, "game", "<EOS>", 217, 92, 219, 88, 118, "_reveal", "<EOS>", 5, 193, 201, 0, 1, 192, "index", "<EOS>", 1, 192, "index", "<EOS>", 217, 89, 121, 20, 109, 17, 104, 25, 133, "card", "<EOS>", "<UNK>", "<EOS>", 218, 82, 103, 205, 45, 104, 25, 133, "card", "<EOS>", "target", "<EOS>", 26, 134, "True", "<EOS>", 97, 165, 34, 171, "super", "<EOS>", "reveal", "<EOS>", 88, 118, "activate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 206, 56, 142, "card_played", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>", 88, 118, "deactivate", "<EOS>", 4, 217, 97, 166, 17, 104, 17, 104, 42, "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 206, 56, 142, "character_attack", "<EOS>", 45, 104, 25, 133, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"score": -0.09351377768069824, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -0.04328453540802002, 0.0, -0.000118255615234375, -1.9073486328125e-05, -0.0003209114074707031, -3.576278118089249e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -3.1235373532530843, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 1, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -3.0734128952026367, -2.741813204920618e-06, -0.0007003545761108398, -1.9073486328125e-06, -7.772444223519415e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0008357762708328664, 0.0, -3.814697265625e-06, -0.000621795654296875, -9.5367431640625e-06, -3.218649908376392e-06, 0.0, -0.0001249235065188259, 0.0, -0.047003865242004395, 0.0, -0.0001277923583984375, -1.71661376953125e-05, -0.0003057718276977539, -3.576278118089249e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.456211021371239, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "player", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -5.390777587890625, 0.0, -0.010190010070800781, -5.53131103515625e-05, -0.005417346954345703, -1.1920928244535389e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, player=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "player", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.708764484353395, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "charge", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -5.658514499664307, 0.0, -0.0003299713134765625, -4.00543212890625e-05, -0.00010907649993896484, -2.3841855067985307e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, charge=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -5.880543520875328, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "divine_shield", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -5.830329895019531, 0.0, -0.0001392364501953125, -4.9591064453125e-05, -0.00025403499603271484, -1.1920928244535389e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, divine_shield=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "divine_shield", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -6.535527935452819, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaChange"}, {"_type": "Template25", "hole0": "SelfSelector"}]}, "hole2": "buffs", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -3.738147735595703, 0.0, -0.02954578399658203, -0.45207691192626953, -0.0014019012451171875, -0.8439540863037109, -0.028804779052734375, -0.34314560890197754, -0.08865785598754883, -1.9073486328125e-06, -0.4663199782371521, -3.814697265625e-06, -0.1413564682006836, -0.0001621246337890625, -0.3521707057952881, -7.62939453125e-06, 0.0], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[ManaChange(2), SelfSelector()])\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Change", "<EOS>", "2", "<EOS>", 63, 171, "Self", "Selector", "<EOS>"]}, {"score": -6.588604500717111, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "auras", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -5.976104259490967, 0.0, -0.5530319213867188, -0.000164031982421875, -0.009531974792480469, -1.6689286894688848e-06], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, auras=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.040200641579979, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 1, "hole0": "ManaChange"}, {"_type": "Template25", "hole0": "SelfSelector"}]}, "hole2": "buffs", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -3.738147735595703, 0.0, -0.02954578399658203, -0.45207691192626953, -0.0014019012451171875, -0.8439540863037109, -0.028804779052734375, -0.34314560890197754, -0.08865785598754883, -1.9073486328125e-06, -1.0898380279541016, -1.1920928244535389e-07, -0.30603981018066406, -5.7220458984375e-05, -0.06874489784240723, -1.33514404296875e-05, 0.0], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[ManaChange(1), SelfSelector()])\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Change", "<EOS>", "1", "<EOS>", 63, 171, "Self", "Selector", "<EOS>"]}, {"score": -7.055714180894199, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "spell_damage", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -6.82407808303833, 0.0, -0.18170452117919922, -2.6702880859375e-05, -0.00013387203216552734, -3.576278118089249e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, spell_damage=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "spell_damage", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.630579343266675, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template19", "hole1": {"id": "Cant", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}, "hole2": "buffs", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -3.738147735595703, 0.0, -0.02954578399658203, -0.45207691192626953, -0.0014019012451171875, -1.2123680114746094, -0.000164031982421875, -0.04812264442443848, -5.960462772236497e-07, -2.6702880859375e-05, -0.0001392364501953125, -0.7311670184135437, -1.3396167755126953, -0.028031349182128906], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[Buff(Cant())])\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 59, 155, "Buff", "<EOS>", 25, 133, "Cant", "<EOS>", 71]}, {"score": -7.700544168951808, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "PRIEST", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "stealth", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -7.604183197021484, -0.0002498626708984375, -0.0003036258276551962, 0.0, -1.33514404296875e-05, 0.0, -0.0008950232295319438, 0.0, -3.814697265625e-06, -0.0006198883056640625, -9.5367431640625e-06, -3.218649908376392e-06, 0.0, -0.00013207517622504383, 0.0, -0.04590713977813721, 0.0, -0.0001277923583984375, -1.71661376953125e-05, -0.0003267526626586914, -3.576278118089249e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.754986515469909, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "List", "elts": [{"_type": "Template21", "hole1": 2, "hole0": "ManaChange"}, {"_type": "Template25", "hole0": "PlayerSelector"}]}, "hole2": "buffs", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -3.738147735595703, 0.0, -0.02954578399658203, -0.45207691192626953, -0.0014019012451171875, -0.8439540863037109, -0.028804779052734375, -0.34314560890197754, -0.08865785598754883, -1.9073486328125e-06, -0.4663199782371521, -3.814697265625e-06, -0.1413564682006836, -0.0001621246337890625, -1.5716311931610107, -5.7220458984375e-06, 0.0], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[ManaChange(2), PlayerSelector()])\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 23, 129, 206, 60, 163, "Mana", "Change", "<EOS>", "2", "<EOS>", 63, 171, "Player", "Selector", "<EOS>"]}, {"score": -7.865835240311974, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "buffs", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -3.738147735595703, 0.0, -4.065106391906738, -4.9591064453125e-05, -0.012760758399963379, -1.1920928244535389e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -7.932717016167992, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template14", "hole3": {"_type": "NameConstant", "value": true}, "hole2": "windfury", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -0.00055694580078125, -9.5367431640625e-06, -3.3378591979271732e-06, 0.0, -0.00012981049076188356, 0.0, -7.882623672485352, 0.0, -6.4849853515625e-05, -4.1961669921875e-05, -0.00021576881408691406, -1.1920928244535389e-07], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, windfury=True)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "2", "<EOS>", "1", "<EOS>", "windfury", "<EOS>", 26, 134, "True", "<EOS>"]}, {"score": -8.436440765169657, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "WorgenInfiltrator", "hole2": [{"_type": "Template6", "hole3": "COMMON", "hole2": "ALL", "hole1": 2, "hole0": "Worgen Infiltrator"}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.52587890625e-05, -2.6702880859375e-05, -1.6689286894688848e-06, -3.170922718709335e-05, -4.529942543740617e-06, -6.002187728881836e-05, -5.960462203802308e-06, -5.841255187988281e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-05, -3.933898824470816e-06, -4.6253204345703125e-05, -1.9073486328125e-06, 0.0, -0.047469496726989746, -3.6954863844584906e-06, -0.0007544754771515727, -1.9073486328125e-06, -7.581709360238165e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00047409525723196566, 0.0, -3.814697265625e-06, -8.387022972106934, -0.000324249267578125, -1.1920922133867862e-06, -1.1920928244535389e-07, -2.121925172104966e-05, 0.0], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 217, 98, 185, "Worgen", " ", "Infiltrator", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"score": -1.7320340044429514, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.8400917053222656, -0.054915428161621094, -0.0007495880126953125, -1.9073486328125e-06, -0.0007572369650006294, -4.6014756662771106e-05, -1.1920928244535389e-07, -0.030498504638671875, -0.0006008148193359375, -0.00037384033203125, 0.0, -0.0010089874267578125, -0.0014505386352539062, -1.9073486328125e-06, -3.4332275390625e-05, -0.000110626220703125, -0.3058452606201172, -0.011486649513244629, -0.0010014772415161133, -0.0002346038818359375, 0.0, -0.00433194637298584, -0.002605438232421875, 0.0, -0.000446319580078125, -3.814697265625e-06, 0.0, -0.019174933433532715, 0.0, -0.0007419586181640625, -0.0001430511474609375, -8.96453857421875e-05, -1.71661376953125e-05, -0.00225830078125, -0.0014047622680664062, 0.0, -0.001293182373046875, -2.86102294921875e-05, -3.814697265625e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.005787849426269531, -2.0265579223632812e-06, -0.017668724060058594, -3.814697265625e-06, -0.0008182525634765625, -1.9073486328125e-06, 0.0, -0.002384185791015625, 0.0, -0.003930091857910156, -0.0008487701416015625, -0.002148811472579837, -3.4332275390625e-05, -1.9073486328125e-06, 0.0, -6.5565000113565475e-06, 0.0, -0.0002422332763671875, -0.0010204315185546875, -1.9073486328125e-05, -6.318082796497038e-06, -9.655950634623878e-06, -0.00023305416107177734, -1.9073468138230965e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3))]), SelfSelector(), GreaterThan(Count(CardSelector(\n            condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 71, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -1.793437897384095, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.5663471221923828, -0.013041496276855469, -0.0015642642974853516, 0.0, -1.52587890625e-05, 0.0, -0.001430511474609375, -0.019644513726234436, -1.1920928244535389e-07, -7.62939453125e-06, -0.34591102600097656, -6.866455078125e-05, -0.0016803741455078125, -1.9073486328125e-06, -0.002002404537051916, -2.133846101060044e-05, 0.0, -0.038353919982910156, -0.00055694580078125, -0.0002536773681640625, 0.0, -0.0008602142333984375, -0.0017528533935546875, -1.9073486328125e-06, -3.62396240234375e-05, -8.58306884765625e-05, -0.30498409271240234, -0.010541677474975586, -0.0006405115127563477, -0.000232696533203125, -1.9073486328125e-06, -0.004733443260192871, -0.001842498779296875, 0.0, -0.000423431396484375, -1.9073486328125e-06, 0.0, -0.018416881561279297, 0.0, -0.0007686614990234375, -0.0001239776611328125, -9.5367431640625e-05, -1.71661376953125e-05, -0.002239227294921875, -0.001373291015625, 0.0, -0.001300811767578125, -3.0517578125e-05, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.005774497985839844, -2.0265579223632812e-06, -0.01803874969482422, -3.814697265625e-06, -0.0007686614990234375, -1.9073486328125e-06, 0.0, -0.0029401779174804688, 0.0, -0.004508018493652344, -0.00083160400390625, -0.0022757502738386393, -2.86102294921875e-05, -1.9073486328125e-06, 0.0, -6.318082796497038e-06, 0.0, -0.0002460479736328125, -0.0012073516845703125, -1.9073486328125e-05, -9.894339200400282e-06, -9.417532055522315e-06, -0.00023877620697021484, -1.6689286894688848e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -2.816811791549256, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.5663471221923828, -0.013041496276855469, -0.0015642642974853516, 0.0, -1.52587890625e-05, 0.0, -0.001430511474609375, -0.019644513726234436, -1.1920928244535389e-07, -7.62939453125e-06, -1.3913688659667969, -0.000667572021484375, -0.0012149810791015625, -3.814697265625e-06, -0.002811197191476822, -2.0027157006552443e-05, 0.0, -0.020359039306640625, -0.0003643035888671875, -0.0002574920654296875, 0.0, -0.0009784698486328125, -0.0014935731887817383, -1.9073486328125e-06, -3.4332275390625e-05, -7.43865966796875e-05, -0.3032112121582031, -0.008833885192871094, -0.0005222558975219727, -0.000232696533203125, -1.9073486328125e-06, -0.004258513450622559, -0.001415252685546875, 0.0, -0.0005054473876953125, -1.9073486328125e-06, 0.0, -0.01786494255065918, 0.0, -0.0008077621459960938, -0.0001468658447265625, -9.918212890625e-05, -1.9073486328125e-05, -0.0022029876708984375, -0.001331329345703125, 0.0, -0.0013904571533203125, -2.86102294921875e-05, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.005562782287597656, -2.0265579223632812e-06, -0.018204689025878906, -3.814697265625e-06, -0.0006847381591796875, -1.9073486328125e-06, 0.0, -0.0032958984375, 0.0, -0.004497528076171875, -0.00084686279296875, -0.0022850236855447292, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -6.318082796497038e-06, 0.0, -0.000244140625, -0.001171112060546875, -1.9073486328125e-05, -9.059880540007725e-06, -9.536741345073096e-06, -0.00024068355560302734, -1.6689286894688848e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -3.3391668412920836, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -1.4464921951293945, -0.0258331298828125, -0.6923646926879883, -0.004329085350036621, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -0.0015854834346100688, -0.017055708914995193, -1.1920928244535389e-07, -9.5367431640625e-06, -0.6077823638916016, -7.43865966796875e-05, -0.00176239013671875, -1.9073486328125e-06, -0.0019123151432722807, -2.15768777707126e-05, 0.0, -0.03603363037109375, -0.0005168914794921875, -0.0002460479736328125, 0.0, -0.000881195068359375, -0.00174713134765625, -1.9073486328125e-06, -3.62396240234375e-05, -8.58306884765625e-05, -0.325347900390625, -0.01025390625, -0.0006977319717407227, -0.000232696533203125, -1.9073486328125e-06, -0.004735350608825684, -0.0016880035400390625, 0.0, -0.000469207763671875, -1.9073486328125e-06, 0.0, -0.018451213836669922, 0.0, -0.0007877349853515625, -0.0001354217529296875, -9.72747802734375e-05, -1.9073486328125e-05, -0.00225830078125, -0.001377105712890625, 0.0, -0.0013408660888671875, -2.86102294921875e-05, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.0056018829345703125, -2.0265579223632812e-06, -0.01800251007080078, -3.814697265625e-06, -0.0007801055908203125, -1.9073486328125e-06, 0.0, -0.0028934478759765625, 0.0, -0.004405021667480469, -0.000835418701171875, -0.0022533840965479612, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -6.318082796497038e-06, 0.0, -0.0002422332763671875, -0.001110076904296875, -1.9073486328125e-05, -7.271752110682428e-06, -9.536741345073096e-06, -0.00023865699768066406, -1.7881377516459906e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -3.418759284839176, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "3", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -1.4464921951293945, -0.0258331298828125, -0.7251501083374023, -0.003638029098510742, -4.768370445162873e-07, -9.5367431640625e-06, 0.0, -0.5507688522338867, -0.00011348596308380365, -0.014780044555664062, -0.0002460479736328125, -1.9073486328125e-06, -0.0015424343291670084, -2.1457672119140625e-05, 0.0, -0.00382232666015625, -0.00070953369140625, -0.0002727508544921875, 0.0, -0.001613616943359375, -0.00141143798828125, -1.9073486328125e-06, -2.47955322265625e-05, -0.000217437744140625, -0.46801280975341797, -0.012017607688903809, -0.00040352344512939453, -2.6702880859375e-05, 0.0, -0.004674315452575684, -0.0012645721435546875, 0.0, -0.0002899169921875, -1.9073486328125e-06, 0.0, -0.018524646759033203, 0.0, -0.0007381439208984375, -4.1961669921875e-05, -7.2479248046875e-05, -2.09808349609375e-05, -0.0030078887939453125, -0.0012464523315429688, 0.0, -0.001049041748046875, -4.76837158203125e-05, -3.814697265625e-06, -3.4332275390625e-05, -3.814697265625e-06, -0.0054798126220703125, -2.0265579223632812e-06, -0.01747894287109375, -3.814697265625e-06, -0.00066375732421875, -1.9073486328125e-06, 0.0, -0.0023593902587890625, 0.0, -0.0038604736328125, -0.0009288787841796875, -0.0022335071116685867, -4.00543212890625e-05, -1.9073486328125e-06, 0.0, -6.198873961693607e-06, 0.0, -0.0002422332763671875, -0.0010547637939453125, -1.9073486328125e-05, -5.9604562920867465e-06, -9.655950634623878e-06, -0.00023877620697021484, -1.9073468138230965e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(3())]), SelfSelector(), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "3", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -3.4398201993466984, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.8400917053222656, -0.054915428161621094, -0.0007495880126953125, -1.9073486328125e-06, -0.0007572369650006294, -4.6014756662771106e-05, -1.1920928244535389e-07, -0.030498504638671875, -0.0006008148193359375, -0.00037384033203125, 0.0, -0.0010089874267578125, -0.0014505386352539062, -1.9073486328125e-06, -3.4332275390625e-05, -0.000110626220703125, -1.9369726181030273, -0.06572949886322021, 0.0, -0.0001468658447265625, -5.7220458984375e-06, -0.0004425048828125, -0.0001468658447265625, -1.0132789611816406e-05, -0.004378318786621094, -0.03843879699707031, -8.392333984375e-05, -0.00025177001953125, 0.0, -5.102156137581915e-05, -0.0003987550735473633, 0.0, -0.0036983489990234375, 0.0, -7.62939453125e-06, -0.0001068115234375, -1.9073486328125e-06, -0.0042133331298828125, 0.0, -0.02926349639892578, 0.0, -0.0004405975341796875, -1.9073486328125e-06, 0.0, -0.001007080078125, 0.0, -0.00391387939453125, -0.000873565673828125, -0.0016368005890399218, -2.288818359375e-05, -3.814697265625e-06, 0.0, -6.437291176553117e-06, 0.0, -0.0002269744873046875, -0.0012340545654296875, -1.9073486328125e-05, -3.445094625931233e-05, -9.417532055522315e-06, -0.00031697750091552734, -1.311301275563892e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3))]), SelfSelector(), GreaterThan(Count(MinionSelector(IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 71, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -3.5520013624186078, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.5663471221923828, -0.013041496276855469, -0.0015642642974853516, 0.0, -1.52587890625e-05, 0.0, -0.001430511474609375, -0.019644513726234436, -1.1920928244535389e-07, -7.62939453125e-06, -0.34591102600097656, -6.866455078125e-05, -0.0016803741455078125, -1.9073486328125e-06, -0.002002404537051916, -2.133846101060044e-05, 0.0, -0.038353919982910156, -0.00055694580078125, -0.0002536773681640625, 0.0, -0.0008602142333984375, -0.0017528533935546875, -1.9073486328125e-06, -3.62396240234375e-05, -8.58306884765625e-05, -2.002375602722168, -0.048316359519958496, 0.0, -0.000156402587890625, -5.7220458984375e-06, -0.00041961669921875, -0.00014495849609375, -1.0132789611816406e-05, -0.003970146179199219, -0.03994178771972656, -8.0108642578125e-05, -0.0002460479736328125, 0.0, -5.340574716683477e-05, -0.00042748451232910156, 0.0, -0.0035915374755859375, 0.0, -9.5367431640625e-06, -0.0001125335693359375, -1.9073486328125e-06, -0.003948211669921875, 0.0, -0.029068946838378906, 0.0, -0.0004482269287109375, -1.9073486328125e-06, 0.0, -0.0011310577392578125, 0.0, -0.0043849945068359375, -0.000823974609375, -0.0016829888336360455, -1.9073486328125e-05, -3.814697265625e-06, 0.0, -6.318082796497038e-06, 0.0, -0.0002307891845703125, -0.0012836456298828125, -1.9073486328125e-05, -3.790789924096316e-05, -9.417532055522315e-06, -0.0003170967102050781, -1.311301275563892e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(MinionSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -3.5692582929620613, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -1.4464921951293945, -0.0258331298828125, -0.6923646926879883, -0.004329085350036621, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -0.0015854834346100688, -0.017055708914995193, -1.1920928244535389e-07, -9.5367431640625e-06, -0.8754119873046875, -0.0007610321044921875, -0.0014495849609375, -3.814697265625e-06, -0.0027156209107488394, -1.8239017663290724e-05, 0.0, -0.0084381103515625, -0.0003261566162109375, -0.0002765655517578125, 0.0, -0.00113677978515625, -0.001422882080078125, -1.9073486328125e-06, -3.4332275390625e-05, -7.82012939453125e-05, -0.3173332214355469, -0.008752107620239258, -0.0006005764007568359, -0.0002346038818359375, -1.9073486328125e-06, -0.004101157188415527, -0.001373291015625, 0.0, -0.0005474090576171875, -3.814697265625e-06, 0.0, -0.01790297031402588, 0.0, -0.0008192062377929688, -0.000156402587890625, -0.0001010894775390625, -1.9073486328125e-05, -0.002223968505859375, -0.0013246536254882812, 0.0, -0.001422882080078125, -2.86102294921875e-05, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.005423545837402344, -2.0265579223632812e-06, -0.01816558837890625, -3.814697265625e-06, -0.000713348388671875, -1.9073486328125e-06, 0.0, -0.0032024383544921875, 0.0, -0.004340171813964844, -0.0008392333984375, -0.002231017453595996, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -6.437291176553117e-06, 0.0, -0.000240325927734375, -0.0010662078857421875, -1.9073486328125e-05, -6.5565000113565475e-06, -9.536741345073096e-06, -0.00023877620697021484, -1.7881377516459906e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))),\n            value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -4.0315963462438305, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "5", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -1.4464921951293945, -0.0258331298828125, -0.7251501083374023, -0.003638029098510742, -4.768370445162873e-07, -9.5367431640625e-06, 0.0, -1.278368592262268, -0.0015615223674103618, -0.0020046234130859375, -0.0005474090576171875, -1.9073486328125e-06, -0.0017130410997197032, -8.82148651726311e-06, -1.1920928244535389e-07, -0.0007266998291015625, -0.0013065338134765625, -0.000438690185546875, 0.0, -0.002887725830078125, -0.00110626220703125, -1.9073486328125e-06, -3.0517578125e-05, -0.000194549560546875, -0.36108970642089844, -0.012514472007751465, -0.0004017353057861328, -2.86102294921875e-05, -1.9073486328125e-06, -0.006232500076293945, -0.001293182373046875, 0.0, -0.0002803802490234375, -1.9073486328125e-06, 0.0, -0.018839478492736816, 0.0, -0.0006847381591796875, -4.1961669921875e-05, -6.67572021484375e-05, -1.9073486328125e-05, -0.002941131591796875, -0.0012416839599609375, 0.0, -0.001003265380859375, -4.57763671875e-05, -3.814697265625e-06, -3.24249267578125e-05, -3.814697265625e-06, -0.005799293518066406, -2.0265579223632812e-06, -0.017922401428222656, -3.814697265625e-06, -0.000652313232421875, -1.9073486328125e-06, 0.0, -0.0029592514038085938, 0.0, -0.0044574737548828125, -0.000873565673828125, -0.0025550995487719774, -4.00543212890625e-05, -1.9073486328125e-06, 0.0, -6.079665126890177e-06, 0.0, -0.0002460479736328125, -0.00103759765625, -1.9073486328125e-05, -5.245203283266164e-06, -9.655950634623878e-06, -0.00023877620697021484, -1.9073468138230965e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(5())]), SelfSelector(), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "5", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -4.480712832753248, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "3", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -1.4464921951293945, -0.0258331298828125, -0.7251501083374023, -0.003638029098510742, -4.768370445162873e-07, -9.5367431640625e-06, 0.0, -0.5507688522338867, -0.00011348596308380365, -0.014780044555664062, -0.0002460479736328125, -1.9073486328125e-06, -0.0015424343291670084, -2.1457672119140625e-05, 0.0, -0.00382232666015625, -0.00070953369140625, -0.0002727508544921875, 0.0, -0.001613616943359375, -0.00141143798828125, -1.9073486328125e-06, -2.47955322265625e-05, -0.000217437744140625, -1.5086698532104492, -0.02367246150970459, 0.0, -0.0001354217529296875, -3.814697265625e-06, -0.0005855560302734375, -0.0001621246337890625, -6.198883056640625e-06, -0.004314422607421875, -0.02521038055419922, -8.20159912109375e-05, -0.00023651123046875, 0.0, -5.304811929818243e-05, -0.0008279085159301758, 0.0, -0.004360198974609375, -1.9073486328125e-06, -7.62939453125e-06, -0.0001888275146484375, -3.814697265625e-06, -0.0029125213623046875, 0.0, -0.02695465087890625, 0.0, -0.000347137451171875, -1.9073486328125e-06, 0.0, -0.0010662078857421875, 0.0, -0.0038213729858398438, -0.0008716583251953125, -0.0015914497198536992, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -6.318082796497038e-06, 0.0, -0.000225067138671875, -0.0013275146484375, -1.9073486328125e-05, -3.445094625931233e-05, -9.417532055522315e-06, -0.00032842159271240234, -1.311301275563892e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(3())]), SelfSelector(), GreaterThan(Count(\n            MinionSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "3", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -4.722950094839192, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.5663471221923828, -0.013041496276855469, -0.0015642642974853516, 0.0, -1.52587890625e-05, 0.0, -0.001430511474609375, -0.019644513726234436, -1.1920928244535389e-07, -7.62939453125e-06, -1.3913688659667969, -0.000667572021484375, -0.0012149810791015625, -3.814697265625e-06, -0.002811197191476822, -2.0027157006552443e-05, 0.0, -0.020359039306640625, -0.0003643035888671875, -0.0002574920654296875, 0.0, -0.0009784698486328125, -0.0014935731887817383, -1.9073486328125e-06, -3.4332275390625e-05, -7.43865966796875e-05, -2.1535167694091797, -0.0353083610534668, 0.0, -0.000152587890625, -5.7220458984375e-06, -0.00042724609375, -0.0001354217529296875, -1.0132789611816406e-05, -0.0039520263671875, -0.04437065124511719, -8.58306884765625e-05, -0.000255584716796875, 0.0, -5.364416210795753e-05, -0.00042748451232910156, 0.0, -0.0034885406494140625, 0.0, -9.5367431640625e-06, -0.00011444091796875, -1.9073486328125e-06, -0.0038890838623046875, 0.0, -0.029308319091796875, 0.0, -0.0004425048828125, -1.9073486328125e-06, 0.0, -0.001224517822265625, 0.0, -0.0044803619384765625, -0.0008373260498046875, -0.001734518213197589, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -6.318082796497038e-06, 0.0, -0.0002307891845703125, -0.001285552978515625, -1.9073486328125e-05, -3.7431076634675264e-05, -9.417532055522315e-06, -0.0003190040588378906, -1.311301275563892e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(\n            Count(MinionSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -4.98877608458902, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "hole1": {"id": "MinionSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -1.4464921951293945, -0.0258331298828125, -0.6923646926879883, -0.004329085350036621, -2.1457672119140625e-06, -1.1444091796875e-05, 0.0, -0.0015854834346100688, -0.017055708914995193, -1.1920928244535389e-07, -9.5367431640625e-06, -0.6077823638916016, -7.43865966796875e-05, -0.00176239013671875, -1.9073486328125e-06, -0.0019123151432722807, -2.15768777707126e-05, 0.0, -0.03603363037109375, -0.0005168914794921875, -0.0002460479736328125, 0.0, -0.000881195068359375, -0.00174713134765625, -1.9073486328125e-06, -3.62396240234375e-05, -8.58306884765625e-05, -1.9162425994873047, -0.04557359218597412, 0.0, -0.000156402587890625, -5.7220458984375e-06, -0.000415802001953125, -0.000141143798828125, -1.0132789611816406e-05, -0.0039272308349609375, -0.03937816619873047, -8.0108642578125e-05, -0.0002422332763671875, 0.0, -5.3524952818406746e-05, -0.00041985511779785156, 0.0, -0.00360107421875, 0.0, -9.5367431640625e-06, -0.0001125335693359375, -1.9073486328125e-06, -0.003978729248046875, 0.0, -0.029369354248046875, 0.0, -0.0004520416259765625, -1.9073486328125e-06, 0.0, -0.001117706298828125, 0.0, -0.004323005676269531, -0.00083160400390625, -0.0016721553402021527, -2.09808349609375e-05, -3.814697265625e-06, 0.0, -6.437291176553117e-06, 0.0, -0.0002269744873046875, -0.001255035400390625, -1.9073486328125e-05, -3.468935756245628e-05, -9.417532055522315e-06, -0.00032079219818115234, -1.311301275563892e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(MinionSelector(IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 157, "Count", "<EOS>", 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -5.336155007390815, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "hole1": {"id": "IsType", "_type": "Name"}, "hole0": "EnemyPlayer"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.5663471221923828, -0.013041496276855469, -0.0015642642974853516, 0.0, -1.52587890625e-05, 0.0, -0.001430511474609375, -0.019644513726234436, -1.1920928244535389e-07, -7.62939453125e-06, -0.34591102600097656, -6.866455078125e-05, -0.0016803741455078125, -1.9073486328125e-06, -0.002002404537051916, -2.133846101060044e-05, 0.0, -0.038353919982910156, -0.00055694580078125, -0.0002536773681640625, 0.0, -0.0008602142333984375, -0.0017528533935546875, -1.9073486328125e-06, -3.62396240234375e-05, -8.58306884765625e-05, -2.388101577758789, -0.846598744392395, -0.21295642852783203, -9.5367431640625e-06, -2.09808349609375e-05, 0.0, -0.12031781673431396, -0.014323830604553223, 0.0, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -6.67572021484375e-05, 0.0, -0.0001430511474609375, 0.0, -0.1126718521118164, 0.0, -0.011095046997070312, -1.9073486328125e-06, 0.0, -0.008500099182128906, 0.0, -0.018800735473632812, -0.0011806488037109375, -0.00690520228818059, -7.62939453125e-06, -0.0068206787109375, -1.33514404296875e-05, 0.0, -0.05333995819091797, 0.0, -0.09105968475341797, -0.0002613067626953125, -0.029557401314377785, -3.635883331298828e-05, -9.5367431640625e-06, 0.0, -7.510183422709815e-06, 0.0, -0.0006198883056640625, -0.0036563873291015625, -2.6702880859375e-05, -7.199991523521021e-05, -6.79492904964718e-06, -0.0002257823944091797, -1.4305104514278355e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            EnemyPlayer(IsType(MINION_TYPE.DRAGON, value=0)), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 158, "Enemy", "Player", "<EOS>", 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -6.54322306342096, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Blackwing Corruptor"}, {"_type": "Num", "n": 5}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template35"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "player"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -0.0006504058837890625, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -9.5367431640625e-06, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -9.536738616588991e-07, -3.7550886190729216e-05, -1.33514404296875e-05, -2.288818359375e-05, -0.0004558563232421875, -0.0001850128173828125, -0.00028027407824993134, -0.0005128383636474609, -0.0002689361572265625, -0.0016040802001953125, -0.0010967254638671875, -0.0012569427490234375, -0.000392913818359375, -0.0002690553665161133, -1.1920928244535389e-07, -2.09808349609375e-05, -0.0001468658447265625, -3.814697265625e-05, 0.0, -9.5367431640625e-05, -7.62939453125e-06, -0.0004024505615234375, -0.05108356475830078, -0.000499725341796875, -0.0002117156982421875, -3.814697265625e-06, -0.0026975139044225216, -9.679586946731433e-05, -3.814697265625e-06, -0.005953788757324219, -2.288818359375e-05, -0.007305145263671875, -0.003849029541015625, -0.000370025634765625, -0.0034735198132693768, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -0.002386331558227539, -0.009035279974341393, -0.00010144710540771484, -3.814697265625e-06, -0.3191089630126953, -0.5663471221923828, -0.013041496276855469, -0.0015642642974853516, 0.0, -1.52587890625e-05, 0.0, -0.001430511474609375, -0.019644513726234436, -1.1920928244535389e-07, -7.62939453125e-06, -0.34591102600097656, -6.866455078125e-05, -0.0016803741455078125, -1.9073486328125e-06, -0.002002404537051916, -2.133846101060044e-05, 0.0, -0.038353919982910156, -0.00055694580078125, -0.0002536773681640625, 0.0, -0.0008602142333984375, -0.0017528533935546875, -1.9073486328125e-06, -3.62396240234375e-05, -8.58306884765625e-05, -0.30498409271240234, -0.010541677474975586, -0.0006405115127563477, -0.000232696533203125, -1.9073486328125e-06, -0.004733443260192871, -0.001842498779296875, 0.0, -0.000423431396484375, -1.9073486328125e-06, 0.0, -4.711832523345947, -1.1920928244535389e-07, -0.000911712646484375, 0.0, -0.00537368468940258, -5.173683166503906e-05, -1.33514404296875e-05, -0.001071929931640625, -1.9073486328125e-06, -1.9073486328125e-06, -0.008931159973144531, 0.0, -0.06637287139892578, -0.000263214111328125, -0.01543348841369152, -3.254413604736328e-05, -3.814697265625e-06, 0.0, -3.218649908376392e-06, 0.0, -0.000278472900390625, -0.000308990478515625, -1.71661376953125e-05, -4.41074053014745e-06, -7.987019671418238e-06, -0.00018346309661865234, -1.9073468138230965e-06], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (3)), Buff(ChangeHealth(3))]), SelfSelector(), GreaterThan(\n            Count(CardSelector(player=EnemyPlayer())), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Blackwing", " ", "Corruptor", "<EOS>", 55, 138, "5", "<EOS>", 65, 64, 212, 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 70, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 70, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "player", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}, {"score": -9.169915191816926, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "BlackwingCorruptor", "hole2": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole6": [{"_type": "Template16", "hole1": 4, "hole0": 5}], "hole1": "MinionCard"}, "score_history": [-1.9073486328125e-06, -0.00030517578125, -0.0003844952443614602, -2.825225419655908e-05, -0.00026425207033753395, -1.6167759895324707e-05, -4.768367489305092e-06, -8.225431884056889e-06, 0.0, -7.625720024108887, -0.06492424011230469, -5.14984130859375e-05, -0.00047194547369144857, -0.11044025421142578, -0.0001318370341323316, -0.04571591317653656, -0.0007457733154296875, -0.01498348917812109, -0.00026500190142542124, -7.62939453125e-06, -1.3001365661621094, -0.0011425018310546875, -5.006789251638111e-06, -0.00024294003378599882, -0.0037717819213867188, -0.00014554450171999633], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        return Minion(5, 4)\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [77, 145, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "5", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"score": -3.1015618554313207, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "PIRATE"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -0.1473550796508789, -1.1444091796875e-05, -0.7467462420463562, -0.08365392684936523, -0.0004634857177734375, -0.024271011352539062, -5.7220458984375e-05, 0.0, -0.0817575454711914, -0.0004197359085083008, 0.0, -0.42482566833496094, -5.7220458984375e-06, -1.9073486328125e-06, -0.21351969242095947, -1.1920928244535389e-07, -0.00046539306640625, -1.9073486328125e-06, -0.0029481647070497274, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.00482940673828125, 0.0, -0.006937980651855469, 0.0, -0.19203579425811768, -0.0005754232406616211, 0.0, -0.030202865600585938, -0.08432579040527344, -9.5367431640625e-06, 0.0, -0.00228118896484375, -0.0020437240600585938, -1.71661376953125e-05, -5.7220458984375e-06, -0.0002079010009765625, -0.07941913604736328, -0.001084326533600688, -6.0796710386057384e-06, -0.000179290771484375, 0.0, -0.0006563663482666016, -7.05718994140625e-05, 0.0, -0.000301361083984375, 0.0, 0.0, -0.05227017402648926, 0.0, -0.0015974044799804688, -1.9073486328125e-05, -1.33514404296875e-05, -2.86102294921875e-05, -0.000438690185546875, -0.004291534423828125, 0.0, -0.00371551513671875, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.00040435791015625, 0.0, -0.018752098083496094, 0.0, -0.0032939910888671875, 0.0, 0.0, -0.05157947540283203, 0.0, -0.00279998779296875, -5.7220458984375e-06, -0.0007981967646628618, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.6954863844584906e-06, 0.0, -7.05718994140625e-05, -7.43865966796875e-05, -9.5367431640625e-06, -7.152549414968234e-07, -3.576277322281385e-06, -0.00036500825081020594, -8.225431884056889e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(<UNK>(), MinionSelector(players=EnemyPlayer(), picker\n            =RandomPicker()), GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "<UNK>", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -3.5358393924148004, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "PIRATE"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}, {"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}]}, {"_type": "Template25", "hole0": "PlayerSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -0.1473550796508789, -1.1444091796875e-05, -0.7467462420463562, -0.08365392684936523, -0.0004634857177734375, -0.024271011352539062, -5.7220458984375e-05, 0.0, -0.0817575454711914, -0.0004197359085083008, 0.0, -1.0936546325683594, -1.52587890625e-05, -7.62939453125e-06, -0.0030231475830078125, -8.344646857949556e-07, -0.0001621246337890625, -1.9073486328125e-06, -0.005554038565605879, -5.7220458984375e-06, 0.0, -7.82012939453125e-05, 0.0, -0.1638336181640625, 0.0, -0.004378318786621094, 0.0, -0.17097043991088867, -0.0006772279739379883, 0.0, -2.6702880859375e-05, 0.0, -0.10691356658935547, 0.0, -0.00559234619140625, -0.000640869140625, -7.545947300968692e-05, -1.9073486328125e-06, -0.00031280517578125, 0.0, -0.065518818795681, -3.62396240234375e-05, 0.0, -3.814697265625e-06, 0.0, -2.1457672119140625e-06, 0.0, -0.0001125335693359375, -4.57763671875e-05, -5.7220458984375e-06, -1.7881388885143679e-06, -1.4901076610840391e-05, -0.0001762320171110332, -1.5020326827652752e-05], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(<UNK>(), MinionSelector(players=EnemyPlayer(), picker\n            =RandomPicker(), condition=Null), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "<UNK>", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 214, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 76, 195, "condition", "<EOS>", 26, 135, "Null", "<EOS>", 63, 171, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.201784859852232, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DRAGON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "MinionIsNotTarget"}, {"_type": "Call", "args": [{"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"id": "Is<UNK>", "_type": "Name"}}], "func": {"id": "And", "_type": "Name"}}, {"_type": "Template25", "hole0": "BothPlayer"}, {"_type": "Template25", "hole0": "UserPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.9785090684890747, -4.768370445162873e-07, -1.1444091796875e-05, -1.9073486328125e-06, -9.1552734375e-05, -3.576278118089249e-07, -6.866455078125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.3470649719238281e-05, -0.016523361206054688, -0.17118453979492188, -1.1444091796875e-05, -0.26097241044044495, -0.0006571065750904381, -0.0015106201171875, -0.7451858520507812, -1.1444091796875e-05, -1.9073486328125e-06, -0.0002599949366413057, -5.745887756347656e-05, 0.0, -0.5947284698486328, -0.0019922256469726562, -0.000885009765625, -5.91278076171875e-05, 0.0, -0.11485517024993896, -0.00041484832763671875, -0.000217437744140625, -0.008215904235839844, -0.000152587890625, -0.02166733890771866, -0.010917803272604942, -0.14984343945980072, -0.012395897880196571, -8.70227722771233e-06, -0.00600433349609375, -0.06679916381835938, -9.918212890625e-05, -1.1444091796875e-05, -0.06428968906402588, -0.0011088848114013672, -1.1920928244535389e-07, -0.0001983642578125, -0.0027294158935546875, 0.0, -0.0029449462890625, -0.006542205810546875, -3.814697265625e-06, -0.0003376007080078125, -1.9073486328125e-06, -0.004968762397766113, -1.1444091796875e-05, -3.814697265625e-06, -0.005726814270019531, -0.0002079010009765625, -0.6075639724731445, -0.00011277193698333576, -1.03711727206246e-05, -0.08126544952392578, -0.025074005126953125, -2.47955322265625e-05, 0.0, -0.0051364898681640625, -0.002423524856567383, -4.57763671875e-05, -9.5367431640625e-06, -7.62939453125e-05, -0.06406497955322266, -0.0009007431217469275, -9.298318218498025e-06, -0.00023651123046875, 0.0, -0.0012346506118774414, -7.05718994140625e-05, 0.0, -0.000270843505859375, 0.0, -1.9073486328125e-06, -0.0621570348739624, 0.0, -0.001605987548828125, -1.9073486328125e-05, -1.1444091796875e-05, -2.86102294921875e-05, -0.00045013427734375, -0.004061698913574219, 0.0, -0.0037784576416015625, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0004119873046875, 0.0, -0.018978118896484375, 0.0, -0.00353240966796875, -1.9073486328125e-06, 0.0, -0.04557228088378906, 0.0, -0.0026988983154296875, -5.7220458984375e-06, -0.0009706886485219002, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.6954863844584906e-06, 0.0, -7.05718994140625e-05, -7.2479248046875e-05, -9.5367431640625e-06, -7.152549414968234e-07, -3.3378591979271732e-06, -0.0003723236732184887, -8.344639354618266e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Kill(), MinionSelector(And(MinionIsNotTarget(),\n            Is<UNK>(CARD_RARITY.LEGENDARY)), BothPlayer(), UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "DRAGON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 48, 111, 25, 133, "And", "<EOS>", 206, 63, 171, "Minion", "Is", "Not", "Target", "<EOS>", 48, 111, 25, 133, "Is", "<UNK>", "<EOS>", 205, 45, 104, 35, "LEGENDARY", "<EOS>", 63, 171, "Both", "Player", "<EOS>", 63, 171, "User", "Picker", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.344479232453686, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DRAGON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.9785090684890747, -4.768370445162873e-07, -1.1444091796875e-05, -1.9073486328125e-06, -9.1552734375e-05, -3.576278118089249e-07, -6.866455078125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.3470649719238281e-05, -0.016523361206054688, -0.17118453979492188, -1.1444091796875e-05, -1.6722158193588257, -0.11877061426639557, -0.0006103515625, -0.03285408020019531, -5.14984130859375e-05, 0.0, -0.054621219635009766, -0.0003434419631958008, 0.0, -0.46718883514404297, -5.7220458984375e-06, 0.0, -0.2795281410217285, -1.1920928244535389e-07, -0.000476837158203125, -1.9073486328125e-06, -0.0023672576062381268, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.0049915313720703125, 0.0, -0.006819725036621094, 0.0, -0.19108033180236816, -0.0005868673324584961, 0.0, -0.02473163604736328, -0.08122444152832031, -9.5367431640625e-06, 0.0, -0.002140045166015625, -0.0020294189453125, -1.71661376953125e-05, -5.7220458984375e-06, -0.00020599365234375, -0.07924461364746094, -0.0010790813248604536, -6.0796710386057384e-06, -0.00017547607421875, 0.0, -0.0007059574127197266, -7.2479248046875e-05, 0.0, -0.0002994537353515625, 0.0, 0.0, -0.052667856216430664, 0.0, -0.0016069412231445312, -1.9073486328125e-05, -1.33514404296875e-05, -2.86102294921875e-05, -0.0004367828369140625, -0.004282951354980469, 0.0, -0.0037097930908203125, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0004024505615234375, 0.0, -0.018729209899902344, 0.0, -0.0033168792724609375, 0.0, 0.0, -0.04926013946533203, 0.0, -0.0027513504028320312, -5.7220458984375e-06, -0.0008004611590877175, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.6954863844584906e-06, 0.0, -7.05718994140625e-05, -7.43865966796875e-05, -9.5367431640625e-06, -7.152549414968234e-07, -3.576277322281385e-06, -0.00036441278643906116, -8.225431884056889e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(<UNK>(), MinionSelector(players=EnemyPlayer(), picker\n            =RandomPicker()), GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "DRAGON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "<UNK>", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.4988006470414845, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DRAGON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "MinionIsNotTarget"}, {"_type": "Call", "args": [{"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"id": "Is<UNK>", "_type": "Name"}}], "func": {"id": "And", "_type": "Name"}}, {"_type": "Template25", "hole0": "BothPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.9785090684890747, -4.768370445162873e-07, -1.1444091796875e-05, -1.9073486328125e-06, -9.1552734375e-05, -3.576278118089249e-07, -6.866455078125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.3470649719238281e-05, -0.016523361206054688, -0.17118453979492188, -1.1444091796875e-05, -0.26097241044044495, -0.0006571065750904381, -0.0015106201171875, -0.7451858520507812, -1.1444091796875e-05, -1.9073486328125e-06, -0.0002599949366413057, -5.745887756347656e-05, 0.0, -0.5947284698486328, -0.0019922256469726562, -0.000885009765625, -5.91278076171875e-05, 0.0, -0.11485517024993896, -0.00041484832763671875, -0.000217437744140625, -0.008215904235839844, -0.000152587890625, -0.02166733890771866, -0.010917803272604942, -0.14984343945980072, -0.012395897880196571, -8.70227722771233e-06, -0.00600433349609375, -0.06679916381835938, -9.918212890625e-05, -1.1444091796875e-05, -0.06428968906402588, -0.0011088848114013672, -1.1920928244535389e-07, -0.0001983642578125, -0.0027294158935546875, 0.0, -0.0029449462890625, -0.006542205810546875, -3.814697265625e-06, -0.0003376007080078125, -1.9073486328125e-06, -0.004968762397766113, -1.1444091796875e-05, -3.814697265625e-06, -0.005726814270019531, -0.0002079010009765625, -0.8463840484619141, -0.00015556812286376953, -4.768370445162873e-07, -0.1367053985595703, -0.010194778442382812, -1.52587890625e-05, 0.0, -0.0030231475830078125, -0.002301335334777832, -6.103515625e-05, -5.7220458984375e-06, -6.866455078125e-05, -0.08334636688232422, -0.0008648618240840733, -8.940691259340383e-06, -0.000202178955078125, 0.0, -0.0014271736145019531, -7.62939453125e-05, 0.0, -0.0002460479736328125, 0.0, 0.0, -0.06441247463226318, 0.0, -0.0016374588012695312, -1.9073486328125e-05, -1.1444091796875e-05, -2.86102294921875e-05, -0.0004329681396484375, -0.0040531158447265625, 0.0, -0.0037841796875, -1.9073486328125e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0004119873046875, 0.0, -0.018945693969726562, 0.0, -0.0029239654541015625, -1.9073486328125e-06, 0.0, -0.04437065124511719, 0.0, -0.0027751922607421875, -5.7220458984375e-06, -0.0009345686994493008, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.8146954466355965e-06, 0.0, -7.05718994140625e-05, -7.2479248046875e-05, -9.5367431640625e-06, -7.152549414968234e-07, -3.218649908376392e-06, -0.0003706545103341341, -8.344639354618266e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Kill(), MinionSelector(And(MinionIsNotTarget(),\n            Is<UNK>(CARD_RARITY.LEGENDARY)), BothPlayer(), RandomPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "DRAGON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 48, 111, 25, 133, "And", "<EOS>", 206, 63, 171, "Minion", "Is", "Not", "Target", "<EOS>", 48, 111, 25, 133, "Is", "<UNK>", "<EOS>", 205, 45, 104, 35, "LEGENDARY", "<EOS>", 63, 171, "Both", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.53376152939267, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "PIRATE"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "MinionIsNotTarget"}, {"_type": "Call", "args": [{"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"id": "Is<UNK>", "_type": "Name"}}], "func": {"id": "And", "_type": "Name"}}, {"_type": "Template25", "hole0": "BothPlayer"}, {"_type": "Template25", "hole0": "UserPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -0.1473550796508789, -1.1444091796875e-05, -0.7349511981010437, -0.0003171662101522088, -0.00202178955078125, -0.44133663177490234, -1.1444091796875e-05, 0.0, -0.00028073767316527665, -6.127357482910156e-05, 0.0, -0.9281196594238281, -0.0021677017211914062, -0.0006999969482421875, -5.53131103515625e-05, 0.0, -0.1284404993057251, -0.00041866302490234375, -0.000217437744140625, -0.008296966552734375, -0.000148773193359375, -0.021623646840453148, -0.010817790403962135, -0.15992306172847748, -0.012916607782244682, -8.70227722771233e-06, -0.0057353973388671875, -0.08341789245605469, -9.34600830078125e-05, -1.1444091796875e-05, -0.064003586769104, -0.0010945796966552734, -1.1920928244535389e-07, -0.000213623046875, -0.0027027130126953125, 0.0, -0.0029659271240234375, -0.0065631866455078125, -3.814697265625e-06, -0.000339508056640625, -1.9073486328125e-06, -0.004800915718078613, -1.1444091796875e-05, -3.814697265625e-06, -0.0056514739990234375, -0.00020599365234375, -0.6144064664840698, -0.0001145600836025551, -1.0490381100680679e-05, -0.065887451171875, -0.025226593017578125, -2.86102294921875e-05, 0.0, -0.00531005859375, -0.002443552017211914, -4.9591064453125e-05, -9.5367431640625e-06, -7.82012939453125e-05, -0.06472206115722656, -0.00090265047037974, -9.298318218498025e-06, -0.000240325927734375, 0.0, -0.0011659860610961914, -6.866455078125e-05, 0.0, -0.000270843505859375, 0.0, -1.9073486328125e-06, -0.06159532070159912, 0.0, -0.0015974044799804688, -1.9073486328125e-05, -1.1444091796875e-05, -2.86102294921875e-05, -0.0004520416259765625, -0.0040645599365234375, 0.0, -0.0037860870361328125, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0004138946533203125, 0.0, -0.018990516662597656, 0.0, -0.0035915374755859375, -1.9073486328125e-06, 0.0, -0.04668998718261719, 0.0, -0.00273895263671875, -5.7220458984375e-06, -0.0009646095568314195, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.6954863844584906e-06, 0.0, -7.05718994140625e-05, -7.2479248046875e-05, -9.5367431640625e-06, -7.152549414968234e-07, -3.3378591979271732e-06, -0.00037268095184117556, -8.344639354618266e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Kill(), MinionSelector(And(MinionIsNotTarget(),\n            Is<UNK>(CARD_RARITY.LEGENDARY)), BothPlayer(), UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 48, 111, 25, 133, "And", "<EOS>", 206, 63, 171, "Minion", "Is", "Not", "Target", "<EOS>", 48, 111, 25, 133, "Is", "<UNK>", "<EOS>", 205, 45, 104, 35, "LEGENDARY", "<EOS>", 63, 171, "Both", "Player", "<EOS>", 63, 171, "User", "Picker", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.564236202866468, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "PIRATE"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -2.136420249938965, -0.0002956390380859375, -3.24249267578125e-05, 0.0, -0.0017094232607632875, -6.0200560255907476e-05, -1.33514404296875e-05, -0.0003032684326171875, -7.05718994140625e-05, -0.0001373291015625, -0.0001163482666015625, -0.0004405975341796875, -0.0006079673767089844, -5.9604644775390625e-06, -5.7220458984375e-06, 0.0, -0.00018358230590820312, -0.002244694624096155, -1.537799835205078e-05, -1.52587890625e-05, -0.030091285705566406, -0.0021839141845703125, -0.1512889862060547, -0.0031614303588867188, -1.7523765563964844e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0003885030746459961, -0.003695725928992033, 0.0, -3.814697265625e-06, -0.01496124267578125, -0.000385284423828125, -0.000194549560546875, 0.0, -0.0006937060970813036, -5.14984130859375e-05, -1.9073486328125e-06, -0.19119930267333984, -0.11176109313964844, -0.012483835220336914, -2.5033950805664062e-05, -9.5367431640625e-06, 0.0, -0.0018655061721801758, -0.0004470348358154297, -3.814697265625e-06, -7.62939453125e-06, -0.0004062652587890625, -0.5362644195556641, -0.0005840057274326682, -2.4557106371503323e-05, -2.288818359375e-05, 0.0, -0.0017626285552978516, -0.0002938508987426758, -1.1920928244535389e-07, -0.0002231597900390625, 0.0, -1.9073486328125e-06, -0.3640129566192627, -1.1920928244535389e-07, -0.0018796920776367188, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.0004138946533203125, -0.0052242279052734375, 0.0, -0.0040721893310546875, -1.9073486328125e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0003566741943359375, 0.0, -0.01971435546875, 0.0, -0.08787250518798828, 0.0, 0.0, -0.03342247009277344, 0.0, -0.007887840270996094, -3.814697265625e-05, -0.002298783278092742, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -3.3378591979271732e-06, 0.0, -6.866455078125e-05, -6.4849853515625e-05, -9.5367431640625e-06, -4.768367034557741e-07, -3.218649908376392e-06, -0.0003460092702880502, -7.748596544843167e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.6647992804876, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "PIRATE"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "<UNK>"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template25", "hole0": "UserPicker"}, "arg": "picker"}]}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -0.1473550796508789, -1.1444091796875e-05, -0.7467462420463562, -0.08365392684936523, -0.0004634857177734375, -0.024271011352539062, -5.7220458984375e-05, 0.0, -0.0817575454711914, -0.0004197359085083008, 0.0, -0.42482566833496094, -5.7220458984375e-06, -1.9073486328125e-06, -0.21351969242095947, -1.1920928244535389e-07, -0.00046539306640625, -1.9073486328125e-06, -0.0029481647070497274, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.00482940673828125, 0.0, -0.006937980651855469, 0.0, -1.8334695100784302, -0.0002148151397705078, -1.1920928244535389e-07, -0.026993751525878906, -0.0316925048828125, -9.5367431640625e-06, 0.0, -0.0022430419921875, -0.002071380615234375, -1.1444091796875e-05, -7.62939453125e-06, -0.0001678466796875, -0.07162857055664062, -0.0010292514925822616, -6.19888032815652e-06, -0.0001850128173828125, 0.0, -0.0006545782089233398, -7.05718994140625e-05, 0.0, -0.000316619873046875, 0.0, -1.9073486328125e-06, -0.04902291297912598, 0.0, -0.0015954971313476562, -1.9073486328125e-05, -1.33514404296875e-05, -2.86102294921875e-05, -0.000453948974609375, -0.004178047180175781, 0.0, -0.0036869049072265625, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0003986358642578125, 0.0, -0.018845558166503906, 0.0, -0.00347900390625, 0.0, 0.0, -0.040678977966308594, 0.0, -0.0026712417602539062, -5.7220458984375e-06, -0.0008201296441257, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.6954863844584906e-06, 0.0, -7.05718994140625e-05, -7.2479248046875e-05, -9.5367431640625e-06, -7.152549414968234e-07, -3.576277322281385e-06, -0.0003647682024165988, -8.225431884056889e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(<UNK>(), MinionSelector(players=EnemyPlayer(), picker\n            =UserPicker()), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "<UNK>", "<EOS>", 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 213, 76, 195, "players", "<EOS>", 34, 171, "Enemy", "Player", "<EOS>", 76, 195, "picker", "<EOS>", 34, 171, "User", "Picker", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.81038930952797, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "PIRATE"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "Template25", "hole0": "MinionIsNotTarget"}, {"_type": "Call", "args": [{"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"id": "Is<UNK>", "_type": "Name"}}], "func": {"id": "And", "_type": "Name"}}, {"_type": "Template25", "hole0": "BothPlayer"}, {"_type": "Template25", "hole0": "RandomPicker"}], "func": {"id": "MinionSelector", "_type": "Name"}}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -0.1473550796508789, -1.1444091796875e-05, -0.7349511981010437, -0.0003171662101522088, -0.00202178955078125, -0.44133663177490234, -1.1444091796875e-05, 0.0, -0.00028073767316527665, -6.127357482910156e-05, 0.0, -0.9281196594238281, -0.0021677017211914062, -0.0006999969482421875, -5.53131103515625e-05, 0.0, -0.1284404993057251, -0.00041866302490234375, -0.000217437744140625, -0.008296966552734375, -0.000148773193359375, -0.021623646840453148, -0.010817790403962135, -0.15992306172847748, -0.012916607782244682, -8.70227722771233e-06, -0.0057353973388671875, -0.08341789245605469, -9.34600830078125e-05, -1.1444091796875e-05, -0.064003586769104, -0.0010945796966552734, -1.1920928244535389e-07, -0.000213623046875, -0.0027027130126953125, 0.0, -0.0029659271240234375, -0.0065631866455078125, -3.814697265625e-06, -0.000339508056640625, -1.9073486328125e-06, -0.004800915718078613, -1.1444091796875e-05, -3.814697265625e-06, -0.0056514739990234375, -0.00020599365234375, -0.8373125791549683, -0.00015556812286376953, -4.768370445162873e-07, -0.11690807342529297, -0.010463714599609375, -1.71661376953125e-05, 0.0, -0.003139495849609375, -0.002308964729309082, -6.4849853515625e-05, -5.7220458984375e-06, -6.866455078125e-05, -0.08390522003173828, -0.0008686765213496983, -8.940691259340383e-06, -0.00020599365234375, 0.0, -0.0013623237609863281, -7.62939453125e-05, 0.0, -0.000247955322265625, 0.0, 0.0, -0.06380593776702881, 0.0, -0.0016307830810546875, -1.9073486328125e-05, -1.1444091796875e-05, -2.86102294921875e-05, -0.00043487548828125, -0.004057884216308594, 0.0, -0.0037899017333984375, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0004119873046875, 0.0, -0.018962860107421875, 0.0, -0.0029621124267578125, -1.9073486328125e-06, 0.0, -0.045543670654296875, 0.0, -0.0028104782104492188, -5.7220458984375e-06, -0.000930158537812531, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -3.8146954466355965e-06, 0.0, -7.05718994140625e-05, -7.2479248046875e-05, -9.5367431640625e-06, -7.152549414968234e-07, -3.218649908376392e-06, -0.000370892696082592, -8.344639354618266e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Kill(), MinionSelector(And(MinionIsNotTarget(),\n            Is<UNK>(CARD_RARITY.LEGENDARY)), BothPlayer(), RandomPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "Kill", "<EOS>", 48, 111, 25, 133, "Minion", "Selector", "<EOS>", 207, 48, 111, 25, 133, "And", "<EOS>", 206, 63, 171, "Minion", "Is", "Not", "Target", "<EOS>", 48, 111, 25, 133, "Is", "<UNK>", "<EOS>", 205, 45, 104, 35, "LEGENDARY", "<EOS>", 63, 171, "Both", "Player", "<EOS>", 63, 171, "Random", "Picker", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.826055526795528, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DRAGON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}], "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.9785090684890747, -4.768370445162873e-07, -1.1444091796875e-05, -1.9073486328125e-06, -9.1552734375e-05, -3.576278118089249e-07, -6.866455078125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.3470649719238281e-05, -0.016523361206054688, -0.17118453979492188, -1.1444091796875e-05, -0.26097241044044495, -0.0006571065750904381, -0.0015106201171875, -0.8810882568359375, -1.1444091796875e-05, 0.0, -0.20587730407714844, -0.00042724609375, -1.9073486328125e-06, -0.0025196075439453125, -0.000125885009765625, -4.38690185546875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0001283884048461914, -0.0027451515197753906, 0.0, -0.0001354217529296875, -1.33514404296875e-05, 0.0, -7.2479248046875e-05, 0.0, -0.000244140625, 0.0, -0.45498085021972656, 0.0, -0.0012912750244140625, -1.9073486328125e-06, 0.0, -1.4106340408325195, 0.0, -0.009345054626464844, -5.7220458984375e-06, -0.0023315688595175743, -5.7220458984375e-06, -0.20795631408691406, 0.0, -0.20088207721710205, -2.09808349609375e-05, 0.0, -3.814697265625e-06, 0.0, -2.1457672119140625e-06, 0.0, -0.0001201629638671875, -0.0001583099365234375, -5.7220458984375e-06, -6.1988689594727475e-06, -4.053113570989808e-06, -0.0003185821697115898, -6.794924956921022e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.DRAGON),\n            value=0), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "DRAGON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "Kill", "<EOS>", 48, 112, 25, 133, "Minion", "Selector", "<EOS>", 205, 48, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.827342279002323, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "PIRATE"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -2.136420249938965, -0.0002956390380859375, -3.24249267578125e-05, 0.0, -0.0017094232607632875, -6.0200560255907476e-05, -1.33514404296875e-05, -0.0003032684326171875, -7.05718994140625e-05, -0.0001373291015625, -0.0001163482666015625, -0.0004405975341796875, -0.0006079673767089844, -5.9604644775390625e-06, -5.7220458984375e-06, 0.0, -0.00018358230590820312, -0.002244694624096155, -1.537799835205078e-05, -1.52587890625e-05, -0.030091285705566406, -0.0021839141845703125, -0.1512889862060547, -0.0031614303588867188, -1.7523765563964844e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0003885030746459961, -0.003695725928992033, 0.0, -3.814697265625e-06, -0.01496124267578125, -0.000385284423828125, -0.000194549560546875, 0.0, -0.0006937060970813036, -5.14984130859375e-05, -1.9073486328125e-06, -0.19119930267333984, -0.11176109313964844, -0.012483835220336914, -2.5033950805664062e-05, -9.5367431640625e-06, 0.0, -0.0018655061721801758, -0.0004470348358154297, -3.814697265625e-06, -7.62939453125e-06, -0.0004062652587890625, -1.1229581832885742, -0.00047516822814941406, -7.748603820800781e-06, -3.814697265625e-06, -3.814697265625e-06, -0.009180477820336819, -0.00016105173563119024, -1.4305104514278355e-06, -0.000102996826171875, -1.9073486328125e-06, -1.9073486328125e-06, -0.0018264055252075195, -1.0728830375228426e-06, -0.18272686004638672, -4.1961669921875e-05, -0.012084592133760452, -9.5367431640625e-06, -3.4332275390625e-05, 0.0, -2.1576861399807967e-05, 0.0, -3.0517578125e-05, -4.76837158203125e-05, -1.33514404296875e-05, -7.152549414968234e-07, -3.8146954466355965e-06, -0.00032860308419913054, -7.152551916078664e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector()), value=0))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 155, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -4.828934393991219, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DRAGON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.9785090684890747, -4.768370445162873e-07, -1.1444091796875e-05, -1.9073486328125e-06, -9.1552734375e-05, -3.576278118089249e-07, -6.866455078125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.3470649719238281e-05, -0.016523361206054688, -2.2441177368164062, -0.0004253387451171875, -2.86102294921875e-05, 0.0, -0.0016209774184972048, -6.329965253826231e-05, -1.1444091796875e-05, -0.00034332275390625, -8.392333984375e-05, -0.000240325927734375, -0.0001220703125, -0.0004520416259765625, -0.000555872917175293, -5.9604644775390625e-06, -5.7220458984375e-06, 0.0, -0.00020444393157958984, -0.0021302560344338417, -1.537799835205078e-05, -1.52587890625e-05, -0.038863182067871094, -0.001644134521484375, -0.14829635620117188, -0.0027399063110351562, -1.5616416931152344e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0003771781921386719, -0.0037783379666507244, 0.0, -3.814697265625e-06, -0.014736175537109375, -0.00034332275390625, -0.0001926422119140625, 0.0, -0.0008016293868422508, -5.53131103515625e-05, -1.9073486328125e-06, -0.14813613891601562, -0.10204124450683594, -0.011511087417602539, -2.1219253540039062e-05, -9.5367431640625e-06, 0.0, -0.0017234086990356445, -0.0004527568817138672, -3.814697265625e-06, -7.62939453125e-06, -0.000377655029296875, -0.5557394027709961, -0.0005867474828846753, -2.6464455004315823e-05, -2.288818359375e-05, 0.0, -0.0017511844635009766, -0.0002938508987426758, -1.1920928244535389e-07, -0.0002269744873046875, 0.0, -1.9073486328125e-06, -0.3654348850250244, -1.1920928244535389e-07, -0.0018777847290039062, -1.9073486328125e-05, -5.7220458984375e-06, -2.09808349609375e-05, -0.0004138946533203125, -0.0052433013916015625, 0.0, -0.0040607452392578125, -1.9073486328125e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.00035858154296875, 0.0, -0.01971721649169922, 0.0, -0.0921487808227539, 0.0, 0.0, -0.03344440460205078, 0.0, -0.007872581481933594, -3.814697265625e-05, -0.0023068832233548164, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -3.3378591979271732e-06, 0.0, -6.866455078125e-05, -6.4849853515625e-05, -9.5367431640625e-06, -4.768367034557741e-07, -3.218649908376392e-06, -0.00034612638410180807, -7.748596544843167e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "DRAGON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -5.030577945023367, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DRAGON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.9785090684890747, -4.768370445162873e-07, -1.1444091796875e-05, -1.9073486328125e-06, -9.1552734375e-05, -3.576278118089249e-07, -6.866455078125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.3470649719238281e-05, -0.016523361206054688, -2.2441177368164062, -0.0004253387451171875, -2.86102294921875e-05, 0.0, -0.0016209774184972048, -6.329965253826231e-05, -1.1444091796875e-05, -0.00034332275390625, -8.392333984375e-05, -0.000240325927734375, -0.0001220703125, -0.0004520416259765625, -0.000555872917175293, -5.9604644775390625e-06, -5.7220458984375e-06, 0.0, -0.00020444393157958984, -0.0021302560344338417, -1.537799835205078e-05, -1.52587890625e-05, -0.038863182067871094, -0.001644134521484375, -0.14829635620117188, -0.0027399063110351562, -1.5616416931152344e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0003771781921386719, -0.0037783379666507244, 0.0, -3.814697265625e-06, -0.014736175537109375, -0.00034332275390625, -0.0001926422119140625, 0.0, -0.0008016293868422508, -5.53131103515625e-05, -1.9073486328125e-06, -0.14813613891601562, -0.10204124450683594, -0.011511087417602539, -2.1219253540039062e-05, -9.5367431640625e-06, 0.0, -0.0017234086990356445, -0.0004527568817138672, -3.814697265625e-06, -7.62939453125e-06, -0.000377655029296875, -1.087143898010254, -0.00047898292541503906, -7.748603820800781e-06, -3.814697265625e-06, -3.814697265625e-06, -0.008939187042415142, -0.00016283987497445196, -1.4305104514278355e-06, -0.000102996826171875, -1.9073486328125e-06, -1.9073486328125e-06, -0.0018216371536254883, -1.0728830375228426e-06, -0.18263626098632812, -4.38690185546875e-05, -0.0119621641933918, -9.5367431640625e-06, -3.4332275390625e-05, 0.0, -2.1576861399807967e-05, 0.0, -3.0517578125e-05, -4.76837158203125e-05, -1.33514404296875e-05, -7.152549414968234e-07, -3.8146954466355965e-06, -0.0003294367343187332, -7.152551916078664e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector()), value=0))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "DRAGON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 155, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -5.054438975765606, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "PIRATE"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.7593928575515747, -8.320462075062096e-05, -1.33514404296875e-05, -3.814697265625e-06, -8.964537119027227e-05, -1.4305104514278355e-06, -0.00016021728515625, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -1.728534698486328e-05, -7.748603820800781e-06, -0.05452537536621094, -2.136420249938965, -0.0002956390380859375, -3.24249267578125e-05, 0.0, -0.0017094232607632875, -6.0200560255907476e-05, -1.33514404296875e-05, -0.0003032684326171875, -7.05718994140625e-05, -0.0001373291015625, -0.0001163482666015625, -0.0004405975341796875, -0.0006079673767089844, -5.9604644775390625e-06, -5.7220458984375e-06, 0.0, -0.00018358230590820312, -0.002244694624096155, -1.537799835205078e-05, -1.52587890625e-05, -0.030091285705566406, -0.0021839141845703125, -0.1512889862060547, -0.0031614303588867188, -1.7523765563964844e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0003885030746459961, -0.003695725928992033, 0.0, -3.814697265625e-06, -0.01496124267578125, -0.000385284423828125, -0.000194549560546875, 0.0, -0.0006937060970813036, -5.14984130859375e-05, -1.9073486328125e-06, -1.7608556747436523, -0.0003681182861328125, -1.71661376953125e-05, 0.0, -0.0022640228271484375, -0.001886606216430664, -2.47955322265625e-05, -9.5367431640625e-06, -5.91278076171875e-05, -0.026203155517578125, -0.0008480533142574131, -1.1444089977885596e-05, -0.000194549560546875, 0.0, -0.0008263587951660156, -8.20159912109375e-05, 0.0, -0.000232696533203125, 0.0, -1.9073486328125e-06, -0.03751504421234131, 0.0, -0.00160980224609375, -1.71661376953125e-05, -1.33514404296875e-05, -2.47955322265625e-05, -0.0004119873046875, -0.0034723281860351562, 0.0, -0.0039920806884765625, -1.71661376953125e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0003986358642578125, 0.0, -0.01976299285888672, 0.0, -0.00148773193359375, -1.9073486328125e-06, 0.0, -0.009049415588378906, 0.0, -0.0023651123046875, -5.7220458984375e-06, -0.0007793688564561307, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -3.8146954466355965e-06, 0.0, -6.866455078125e-05, -7.2479248046875e-05, -9.5367431640625e-06, -7.152549414968234e-07, -3.3378591979271732e-06, -0.0003696940839290619, -8.106222594506107e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "PIRATE", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}, {"score": -5.2424133023815145, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "DrakonidCrusher", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"_type": "Template27"}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DRAGON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Template25", "hole0": "Kill"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}, {"_type": "Template25", "hole0": "SelfSelector"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 6, "hole0": 6}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -2.09808349609375e-05, -1.5020257706055418e-05, -8.928410534281284e-05, -3.4927710657939315e-05, -2.6404857635498047e-05, -5.006789251638111e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -2.09808349609375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.145764938177308e-06, -4.625319706974551e-05, -7.748603820800781e-06, -6.103515625e-05, -0.0001010894775390625, -1.9073486328125e-05, -8.583069757150952e-06, -1.2755381249007769e-05, -0.0001392364501953125, -0.0010051727294921875, -0.013155937194824219, -5.14984130859375e-05, -9.5367431640625e-06, -0.9785090684890747, -4.768370445162873e-07, -1.1444091796875e-05, -1.9073486328125e-06, -9.1552734375e-05, -3.576278118089249e-07, -6.866455078125e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.3470649719238281e-05, -0.016523361206054688, -0.17118453979492188, -1.1444091796875e-05, -0.26097241044044495, -0.0006571065750904381, -0.0015106201171875, -0.8810882568359375, -1.1444091796875e-05, 0.0, -1.685133934020996, -0.02219688892364502, -4.76837158203125e-05, -1.33514404296875e-05, -0.011304855346679688, -0.04773235321044922, -0.0012238009367138147, -9.417526598554105e-06, -0.0002231597900390625, -1.9073486328125e-06, -0.0004467964172363281, -0.0001010894775390625, 0.0, -0.0003108978271484375, 0.0, -1.9073486328125e-06, -0.04947495460510254, 0.0, -0.0015363693237304688, -1.71661376953125e-05, -1.9073486328125e-05, -1.71661376953125e-05, -0.00051116943359375, -0.0039119720458984375, 0.0, -0.0035400390625, -1.9073486328125e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0004482269287109375, 0.0, -0.023789405822753906, 0.0, -0.0036792755126953125, -1.9073486328125e-06, -1.9073486328125e-06, -0.09129810333251953, 0.0, -0.004216194152832031, -7.62939453125e-06, -0.0007760263397358358, -1.9073486328125e-06, -0.4566164016723633, 0.0, -0.5072582364082336, -1.52587890625e-05, 0.0, -5.7220458984375e-06, 0.0, -1.1920928244535389e-07, 0.0, -0.000194549560546875, -0.0001964569091796875, -5.7220458984375e-06, -1.1086413906014059e-05, -3.099440846199286e-06, -0.0004547808784991503, -6.31808916295995e-06], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Kill(), GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [77, 145, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Drakonid", " ", "Crusher", "<EOS>", 55, 138, "6", "<EOS>", 65, 64, 213, 75, 164, "DRAGON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 63, 171, "Kill", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", 63, 171, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "6", "<EOS>", "6", "<EOS>"]}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score": -0.027797757714779436, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.004151582717895508, -3.933906555175781e-06, -0.00018310546875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -7.82012939453125e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.002069711685180664, 0.0, -0.00045418739318847656, 0.0, -8.296966552734375e-05, 0.0, -0.0009746551513671875, -0.005558013916015625, -0.0004634857177734375, -4.339160295785405e-05, -2.1457672119140625e-06, -2.0026982383569703e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.013691364936214, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -5.988468170166016, -1.1920928244535389e-07, -0.0002193450927734375, -1.9073486328125e-05, -1.3470649719238281e-05, -3.814697265625e-06, -9.918212890625e-05, -0.00016021728515625, -3.0517578125e-05, -0.0021615028381347656, 0.0, -0.0003986358642578125, 0.0, -7.343292236328125e-05, 0.0, -0.000946044921875, -0.00690460205078125, -0.0006160736083984375, -4.494140011956915e-05, -2.1457672119140625e-06, -1.9907778550987132e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "LEGENDARY", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.176411683290553, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -6.044727325439453, -7.62939453125e-06, 0.0, -2.372236667724792e-05, -1.9073486328125e-06, -0.0001773834228515625, -0.012189865112304688, -3.62396240234375e-05, -8.20159912109375e-05, -5.7220458984375e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.000225067138671875, -1.9073486328125e-06, -0.0059356689453125, -0.0013179779052734375, -5.7220458984375e-06, -0.0992116928100586, 0.0, -0.0011081695556640625, -0.001979827880859375, -2.6702880859375e-05, -0.0007711648941040039, 0.0, -0.00032639503479003906, 0.0, -9.393692016601562e-05, 0.0, -0.0025844573974609375, -0.0013599395751953125, -0.0002498626708984375, -6.723268597852439e-05, -2.0265579223632812e-06, -8.272786362795159e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            FREE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Imp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -6.949296889624293, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DRAGON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.004151582717895508, -3.933906555175781e-06, -0.00018310546875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -7.82012939453125e-05, -0.0001354217529296875, -3.24249267578125e-05, -6.925081253051758, 0.0, -3.826618194580078e-05, -1.9073486328125e-06, -7.152557373046875e-05, 0.0, -0.00136566162109375, -0.0040740966796875, -0.0004253387451171875, -7.474276935681701e-05, -2.1457672119140625e-06, -3.2782052585389465e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.0459823003343445, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -6.732545852661133, -3.814697265625e-06, -6.866455078125e-05, 0.0, -6.4849853515625e-05, 0.0, -0.0011196136474609375, 0.0, -0.2852897644042969, -4.38690185546875e-05, -1.52587890625e-05, -1.9073486328125e-05, -1.9073486328125e-06, -6.67572021484375e-05, -0.0001049041748046875, -4.1961669921875e-05, -0.0064432621002197266, 0.0, -0.00013399124145507812, 0.0, -8.487701416015625e-05, 0.0, -0.0007419586181640625, -0.006443023681640625, -0.0004119873046875, -4.267630720278248e-05, -2.0265579223632812e-06, -1.990777673199773e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 64, 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.369291721618993, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "TOTEM"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.004151582717895508, -3.933906555175781e-06, -0.00018310546875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -7.82012939453125e-05, -0.0001354217529296875, -3.24249267578125e-05, -7.348075866699219, 0.0, -3.254413604736328e-05, -1.9073486328125e-06, -0.00010597705841064453, 0.0, -0.0003662109375, -0.0021209716796875, -0.0003871917724609375, -4.4583513954421505e-05, -2.2649765014648438e-06, -2.5033663405338302e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.TOTEM)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "TOTEM", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.788220463732614, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give"}, {"_type": "Call", "func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template25", "hole0": "RandomPicker"}, "arg": "picker"}]}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.004151582717895508, -3.933906555175781e-06, -0.00018310546875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -7.82012939453125e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.002069711685180664, 0.0, -0.00045418739318847656, 0.0, -8.296966552734375e-05, 0.0, -0.0009746551513671875, -5.300412178039551, -0.000324249267578125, -4.768367489305092e-06, 0.0, -0.00013458688044920564, 0.0, -0.13966166973114014, 0.0, -0.0004138946533203125, -0.00069427490234375, -0.004889726638793945, 0.0, -5.7220458984375e-06, -0.021093368530273438, -3.814697265625e-06, -0.27697527408599854, -0.004727363586425781, -0.00016021728515625, -3.0517578125e-05, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.0019321441650390625, -1.52587890625e-05, -3.814697265625e-06, -0.0012416839599609375, -0.06361579895019531, -0.525822639465332, -0.0003592967987060547, -0.005321621894836426, -3.814697265625e-06, 0.0, -0.5227468013763428, -0.05453157424926758, 0.0, -5.91278076171875e-05, -0.0071430206298828125, -0.05153846740722656, -0.003589630126953125, -3.814697265625e-06, -1.9073486328125e-06, -0.04557812213897705, -7.43865966796875e-05, -1.33514404296875e-05, -0.01990509033203125, -7.62939453125e-06, -5.7220458984375e-06, -0.6953250169754028, 0.0, -0.008586883544921875, -1.33514404296875e-05, -0.0055268993601202965, -0.0008774995803833008, -1.9073486328125e-06, -0.0010395050048828125, -0.0020771026611328125], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeAttack(1)), MinionSelector(picker=RandomPicker())))])\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 157, "Give", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 48, 110, 25, 133, "Minion", "Selector", "<EOS>", 212, 76, 195, "picker", "<EOS>", 34, 171, "Random", "Picker", "<EOS>", 205, 71]}, {"score": -7.887028870663471, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -5.750194549560547, -7.62939453125e-06, 0.0, -4.0411134250462055e-05, 0.0, -0.002017974853515625, -0.28560447692871094, -0.0037975311279296875, -9.918212890625e-05, -0.0001239776611328125, -0.6415386199951172, -1.9073486328125e-06, -0.0004062652587890625, -3.0517578125e-05, -1.71661376953125e-05, -2.09808349609375e-05, -1.9073486328125e-05, -3.0517578125e-05, -0.001384735107421875, -3.814697265625e-06, -0.0016078948974609375, -1.9073486328125e-06, -1.1844654083251953, -3.814697265625e-06, -0.0011348724365234375, -0.0019168853759765625, -5.91278076171875e-05, -0.0012743473052978516, 0.0, -0.0001101492453017272, 0.0, -0.0002529621124267578, 0.0, -0.0034618377685546875, -0.0032253265380859375, -0.0002994537353515625, -5.507381501956843e-05, -2.0265579223632812e-06, -3.194763485225849e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\n            True, MINION_TYPE.WARLOCK, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 210, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "WARLOCK", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -7.919589457560043, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "DEMON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -5.750194549560547, -7.62939453125e-06, 0.0, -4.0411134250462055e-05, 0.0, -0.002017974853515625, -0.28560447692871094, -0.0037975311279296875, -9.918212890625e-05, -0.0001239776611328125, -0.6415386199951172, -1.9073486328125e-06, -0.0004062652587890625, -3.0517578125e-05, -1.71661376953125e-05, -2.09808349609375e-05, -1.9073486328125e-05, -3.0517578125e-05, -0.001384735107421875, -3.814697265625e-06, -0.0016078948974609375, -1.9073486328125e-06, -1.2173233032226562, -1.33514404296875e-05, -0.001003265380859375, -0.0018062591552734375, -0.0001373291015625, -0.001051187515258789, -1.1920928244535389e-07, -0.00013971309817861766, 0.0, -0.00028145313262939453, 0.0, -0.0032405853271484375, -0.003482818603515625, -0.000286102294921875, -5.5431428336305544e-05, -2.0265579223632812e-06, -3.087478398811072e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\n            True, MINION_TYPE.DEMON, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 210, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -8.145438730008664, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "battlecry", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -8.113714218139648, -3.933906555175781e-06, -0.0029621124267578125, -2.288818359375e-05, -1.52587890625e-05, -1.9073486328125e-06, -7.82012939453125e-05, -0.000133514404296875, -1.9073486328125e-05, -0.0029414892196655273, 0.0, -0.000514984130859375, 0.0, -7.724761962890625e-05, 0.0, -0.0009670257568359375, -0.009510040283203125, -0.000896453857421875, -4.792171239387244e-05, -2.1457672119140625e-06, -2.0146191673120484e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            battlecry, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "battlecry", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -8.1711259476956, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -8.1433687210083, 0.0, -0.00029754638671875, -2.288818359375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -7.43865966796875e-05, -0.0001277923583984375, -2.6702880859375e-05, -0.0031867027282714844, 0.0, -0.0004252195358276367, 0.0, -8.690357208251953e-05, 0.0, -0.0009746551513671875, -0.008152008056640625, -0.0007839202880859375, -4.7087218263186514e-05, -2.1457672119140625e-06, -2.002698602154851e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -8.345668374121942, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -6.732545852661133, -3.814697265625e-06, -6.866455078125e-05, 0.0, -6.4849853515625e-05, 0.0, -0.0011196136474609375, 0.0, -1.5715970993041992, -4.57763671875e-05, -3.24249267578125e-05, -0.018251419067382812, -1.9073486328125e-06, -0.000843048095703125, -1.71661376953125e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0001049041748046875, -0.0001697540283203125, -3.24249267578125e-05, -0.0028516054153442383, 0.0, -0.0002650022506713867, 0.0, -9.262561798095703e-05, 0.0, -0.0006847381591796875, -0.004055023193359375, -0.000438690185546875, -5.6861794291762635e-05, -2.0265579223632812e-06, -2.2172702301759273e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            RARE, True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -8.368143138686264, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}, {"attr": "TOTEM", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -5.750194549560547, -7.62939453125e-06, 0.0, -4.0411134250462055e-05, 0.0, -0.002017974853515625, -1.3987560272216797, -1.9073486328125e-06, -7.2479248046875e-05, -1.9073486328125e-06, -0.0003261566162109375, 0.0, -0.0021114349365234375, 0.0, -0.23317909240722656, -0.0024814605712890625, -0.0027561187744140625, -0.06637001037597656, 0.0, -0.0016422271728515625, -2.47955322265625e-05, -2.86102294921875e-05, -2.86102294921875e-05, -7.62939453125e-06, -2.86102294921875e-05, -0.0007801055908203125, -1.9073486328125e-06, -0.0070018768310546875, -1.9073486328125e-06, -0.8798961639404297, -9.5367431640625e-06, -0.0008220672607421875, -0.0074710845947265625, -0.0001544952392578125, -0.0021935701370239258, 0.0, -0.00046598908375017345, 0.0, -0.00016069412231445312, 0.0, -0.00217437744140625, -0.00272369384765625, -0.0003204345703125, -6.270295125432312e-05, -2.0265579223632812e-06, -3.635824759840034e-05, 0.0], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.\n            FREE, True, MINION_TYPE.TOTEM, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 210, 56, 142, "Imp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 45, 104, 35, "FREE", "<EOS>", 54, 134, "False", "<EOS>", 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "1", "<EOS>", "1", "<EOS>"]}, {"score": -8.485432818012669, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "HeroSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.004151582717895508, -3.933906555175781e-06, -0.00018310546875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -7.82012939453125e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.002069711685180664, 0.0, -0.00045418739318847656, 0.0, -8.296966552734375e-05, 0.0, -0.0009746551513671875, -5.300412178039551, -0.000324249267578125, -4.768367489305092e-06, 0.0, -0.00013458688044920564, 0.0, -0.13966166973114014, 0.0, -0.0004138946533203125, -0.00069427490234375, -0.004889726638793945, 0.0, -5.7220458984375e-06, -0.021093368530273438, -3.814697265625e-06, -0.27697527408599854, -0.004727363586425781, -0.00016021728515625, -3.0517578125e-05, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.0019321441650390625, -1.52587890625e-05, -3.814697265625e-06, -0.0012416839599609375, -0.06361579895019531, -1.309004783630371, -0.5199967622756958, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.09502579271793365, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -0.7070808410644531, -3.254413604736328e-05, -1.9073486328125e-06, -5.91278076171875e-05, -0.01612091064453125], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1, effects=[Effect(TurnEnded(), ActionTag(Give(\n            Frozen()), HeroSelector()))])\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Frozen", "<EOS>", 63, 171, "Hero", "Selector", "<EOS>", 205, 71]}, {"score": -8.877800180985105, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "Imp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Template34"}, {"_type": "Template27"}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Template30"}}, {"_type": "NameConstant", "value": true}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}]}}], "hole6": [{"_type": "Template14", "hole3": {"_type": "Template24", "hole2": [{"_type": "Template36_expr_seq"}], "hole1": [{"_type": "Template25", "hole0": "TurnEnded"}, {"_type": "Call", "args": [{"_type": "Template19", "hole1": {"id": "Frozen", "_type": "Name"}, "hole0": "Give"}, {"_type": "Template25", "hole0": "TargetSelector"}], "func": {"id": "ActionTag", "_type": "Name"}}], "hole0": "Effect"}, "hole2": "effects", "hole1": 1, "hole0": 1}], "hole1": "MinionCard"}, "score_history": [-3.814697265625e-06, -9.1552734375e-05, -3.576272320060525e-06, -6.079665126890177e-06, -6.812810897827148e-05, -1.609325045137666e-05, 0.0, 0.0, -0.0001049041748046875, -9.5367431640625e-05, -1.52587890625e-05, -0.00337982177734375, -1.9073486328125e-06, -0.008287429809570312, -1.9073486328125e-06, 0.0, -1.3351351299206726e-05, 0.0, -0.00018310546875, -0.001209259033203125, -1.71661376953125e-05, -7.62939453125e-06, -3.814697265625e-06, -0.004151582717895508, -3.933906555175781e-06, -0.00018310546875, -1.33514404296875e-05, -1.71661376953125e-05, -3.814697265625e-06, -7.82012939453125e-05, -0.0001354217529296875, -3.24249267578125e-05, -0.002069711685180664, 0.0, -0.00045418739318847656, 0.0, -8.296966552734375e-05, 0.0, -0.0009746551513671875, -5.300412178039551, -0.000324249267578125, -4.768367489305092e-06, 0.0, -0.00013458688044920564, 0.0, -0.13966166973114014, 0.0, -0.0004138946533203125, -0.00069427490234375, -0.004889726638793945, 0.0, -5.7220458984375e-06, -0.021093368530273438, -3.814697265625e-06, -0.27697527408599854, -0.004727363586425781, -0.00016021728515625, -3.0517578125e-05, -7.62939453125e-06, -7.62939453125e-06, 0.0, -0.0019321441650390625, -1.52587890625e-05, -3.814697265625e-06, -0.0012416839599609375, -0.06361579895019531, -1.309004783630371, -0.5199967622756958, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.09502579271793365, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -1.0488061904907227, -4.5895572839071974e-05, 0.0, -5.7220458984375e-06, -0.06680488586425781], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1, effects=[Effect(TurnEnded(), ActionTag(Give(\n            Frozen()), TargetSelector()))])\n", "choice_history": [77, 145, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 209, 56, 142, "Imp", "<EOS>", 69, 65, 45, 104, 35, "RARE", "<EOS>", 54, 134, "False", "<EOS>", 212, 75, 164, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 93, 151, "1", "<EOS>", "1", "<EOS>", "effects", "<EOS>", 33, 168, "Effect", "<EOS>", 206, 63, 171, "Turn", "Ended", "<EOS>", 48, 111, 25, 133, "Action", "Tag", "<EOS>", 206, 59, 155, "Give", "<EOS>", 25, 133, "Frozen", "<EOS>", 63, 171, "Target", "Selector", "<EOS>", 205, 71]}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"score": -2.3053456128811405, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Health", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -0.7111239433288574, -2.7418097943154862e-06, -0.002376556396484375, -1.9073486328125e-06, -7.927417755126953e-05, -1.9073468138230965e-06, -6.67572021484375e-05, -0.0005645751953125, -3.814697265625e-05, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.0009479522705078125, -0.010870933532714844, -0.000522613525390625, -0.000362396240234375, -1.9073486328125e-06, -0.0005137900006957352, -0.00013244108413346112, -1.1444091796875e-05, -0.0014247894287109375, -4.1961669921875e-05, -0.0006008148193359375, -0.0003948211669921875, -0.0004520416259765625, -0.004828333854675293, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.483626591740176e-05, -0.024818606674671173, -1.52587890625e-05, -7.62939453125e-06, -0.07109737396240234, -0.0002422332763671875, -0.1701068878173828, -0.004320502281188965, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.4436389207839966, -1.6570011212024838e-05, -0.005634307861328125, -0.000209808349609375, -3.814697265625e-06, -0.0005066725425422192, -5.841255187988281e-06, -1.9073486328125e-06, -0.1253795623779297, -0.00086212158203125, -0.000614166259765625, 0.0, -0.000324249267578125, -0.002019047737121582, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -0.016221046447753906, -0.0010497570037841797, -0.00011169909703312442, -4.9591064453125e-05, 0.0, -0.005821704864501953, -7.271766662597656e-05, 0.0, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.015634655952453613, 0.0, -0.0005664825439453125, -3.4332275390625e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.010739326477050781, -0.0002079010009765625, 0.0, -0.0002231597900390625, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.0082855224609375, -1.1444091796875e-05, -0.03630542755126953, -1.9073486328125e-06, -0.00058746337890625, -1.9073486328125e-06, -1.33514404296875e-05, -0.000499725341796875, 0.0, -0.0020294189453125, -2.288818359375e-05, -0.0001585481222718954, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.3882598876953125e-05, 0.0, -0.000797271728515625, -0.0001888275146484375, -2.86102294921875e-05, -0.00032277029822580516, -2.3841855067985307e-07, -3.576271865313174e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Health())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Health", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -2.9068393973729627, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Health", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -1.3433384895324707, -2.9802317840221804e-06, -0.0004291534423828125, -3.814697265625e-06, -6.210803257999942e-05, -6.198873961693607e-06, -0.000202178955078125, -0.0002231597900390625, -3.0517578125e-05, -1.9073486328125e-06, -4.76837158203125e-05, -1.1444091796875e-05, -0.00116729736328125, -0.011940956115722656, -0.0005626678466796875, -0.0002498626708984375, -1.9073486328125e-06, -0.0005419234512373805, -0.0001996749924728647, -1.1444091796875e-05, -0.00078582763671875, -4.76837158203125e-05, -0.0007915496826171875, -0.0002460479736328125, -0.0004215240478515625, -0.0048683881759643555, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -6.234645115910098e-05, -0.025291630998253822, -1.52587890625e-05, -7.62939453125e-06, -0.06818771362304688, -0.0002803802490234375, -0.15564632415771484, -0.004452109336853027, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.44675105810165405, -1.6570011212024838e-05, -0.0054168701171875, -0.0002155303955078125, -3.814697265625e-06, -0.000492850667797029, -5.841255187988281e-06, -1.9073486328125e-06, -0.10997581481933594, -0.0007915496826171875, -0.0005855560302734375, 0.0, -0.00032806396484375, -0.002061009407043457, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -0.01641845703125, -0.0010631084442138672, -0.00011169909703312442, -4.9591064453125e-05, 0.0, -0.005621433258056641, -7.462501525878906e-05, 0.0, -0.0001773834228515625, -3.814697265625e-06, -5.7220458984375e-06, -0.015652775764465332, 0.0, -0.0005588531494140625, -3.4332275390625e-05, -7.62939453125e-05, -1.9073486328125e-06, -0.01071929931640625, -0.000209808349609375, 0.0, -0.00022125244140625, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008275032043457031, -1.1444091796875e-05, -0.036314964294433594, -1.9073486328125e-06, -0.0005855560302734375, -1.9073486328125e-06, -1.33514404296875e-05, -0.000492095947265625, 0.0, -0.0020360946655273438, -2.288818359375e-05, -0.0001586673315614462, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.5789947509765625e-05, 0.0, -0.000797271728515625, -0.0001888275146484375, -2.86102294921875e-05, -0.0003212210431229323, -2.3841855067985307e-07, -3.576271865313174e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Health())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "BEAST", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Health", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -3.0617590513717943, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Health", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -1.0518442392349243, -7.62939453125e-06, -0.001926422119140625, -0.05232429504394531, -0.0012798309326171875, -5.14984130859375e-05, -0.9817867279052734, -1.7881377516459906e-06, -0.0021915435791015625, -1.9073486328125e-06, -8.487701416015625e-05, -1.9073468138230965e-06, -5.7220458984375e-05, -0.000484466552734375, -4.1961669921875e-05, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -0.0009517669677734375, -0.010973930358886719, -0.000545501708984375, -0.000331878662109375, -1.9073486328125e-06, -0.0005218960577622056, -0.00013041458441875875, -1.1444091796875e-05, -0.0015621185302734375, -4.1961669921875e-05, -0.0005893707275390625, -0.0004291534423828125, -0.000461578369140625, -0.004660487174987793, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.686282383976504e-05, -0.0245029479265213, -1.52587890625e-05, -7.62939453125e-06, -0.07029533386230469, -0.0002422332763671875, -0.17014026641845703, -0.004274725914001465, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.44444987177848816, -1.6450801922474056e-05, -0.005741119384765625, -0.00020599365234375, -3.814697265625e-06, -0.0005034551722928882, -5.841255187988281e-06, -1.9073486328125e-06, -0.12149524688720703, -0.000873565673828125, -0.00061798095703125, 0.0, -0.0003223419189453125, -0.002007603645324707, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -0.01617717742919922, -0.0010516643524169922, -0.00011169909703312442, -5.14984130859375e-05, 0.0, -0.005878925323486328, -7.462501525878906e-05, 0.0, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.015654683113098145, 0.0, -0.000568389892578125, -3.4332275390625e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.010751724243164062, -0.0002079010009765625, 0.0, -0.0002231597900390625, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008288383483886719, -1.1444091796875e-05, -0.03630638122558594, -1.9073486328125e-06, -0.0005855560302734375, -1.9073486328125e-06, -1.33514404296875e-05, -0.000499725341796875, 0.0, -0.0020294189453125, -2.288818359375e-05, -0.00015842892753425986, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.3882598876953125e-05, 0.0, -0.000797271728515625, -0.0001888275146484375, -2.86102294921875e-05, -0.0003231278096791357, -2.3841855067985307e-07, -3.576271865313174e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Health())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Health", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -3.1329197984884587, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Health", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -1.0518442392349243, -7.62939453125e-06, -0.001926422119140625, -0.05232429504394531, -0.0012798309326171875, -5.14984130859375e-05, -1.0584030151367188, -3.2186455882765586e-06, -0.0006618499755859375, -1.9073486328125e-06, -7.617473602294922e-05, -7.271752110682428e-06, -0.00011444091796875, -0.000453948974609375, -3.0517578125e-05, -1.9073486328125e-06, -4.1961669921875e-05, -9.5367431640625e-06, -0.000812530517578125, -0.010107040405273438, -0.000621795654296875, -0.0003681182861328125, -1.9073486328125e-06, -0.0005041300901211798, -0.00012230826541781425, -9.5367431640625e-06, -0.0012063980102539062, -4.38690185546875e-05, -0.0006961822509765625, -0.000370025634765625, -0.0004444122314453125, -0.0051544904708862305, -2.0265579223632812e-06, -7.62939453125e-06, 0.0, -5.686282383976504e-05, -0.025156432762742043, -1.52587890625e-05, -7.62939453125e-06, -0.07197761535644531, -0.00023651123046875, -0.16562557220458984, -0.00449216365814209, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.44738394021987915, -1.633159445191268e-05, -0.0057220458984375, -0.0002040863037109375, -3.814697265625e-06, -0.00048558099661022425, -5.841255187988281e-06, -1.9073486328125e-06, -0.11738395690917969, -0.0008544921875, -0.0006008148193359375, 0.0, -0.000324249267578125, -0.0020467042922973633, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -0.01626873016357422, -0.0010650157928466797, -0.00011169909703312442, -4.9591064453125e-05, 0.0, -0.005798816680908203, -7.653236389160156e-05, 0.0, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.01564323902130127, 0.0, -0.0005645751953125, -3.4332275390625e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.0107269287109375, -0.0002079010009765625, 0.0, -0.0002231597900390625, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008280754089355469, -1.1444091796875e-05, -0.03631114959716797, -1.9073486328125e-06, -0.0005855560302734375, -1.9073486328125e-06, -1.33514404296875e-05, -0.000492095947265625, 0.0, -0.0020360946655273438, -2.288818359375e-05, -0.0001586673315614462, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.5789947509765625e-05, 0.0, -0.0007953643798828125, -0.0001888275146484375, -2.86102294921875e-05, -0.0003206252004019916, -2.3841855067985307e-07, -3.576271865313174e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Health())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Health", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -3.1460243198716427, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "DEMON"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Health", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -1.5598788261413574, -4.410734163684538e-06, -0.000629425048828125, -1.9073486328125e-06, -7.426738739013672e-05, -7.987004210008308e-06, -0.0001201629638671875, -0.0004482269287109375, -2.86102294921875e-05, 0.0, -4.38690185546875e-05, -9.5367431640625e-06, -0.000812530517578125, -0.010156631469726562, -0.000579833984375, -0.0004062652587890625, -1.9073486328125e-06, -0.0004805273492820561, -0.00012934156984556466, -9.5367431640625e-06, -0.0011644363403320312, -4.38690185546875e-05, -0.00069427490234375, -0.0003490447998046875, -0.0004367828369140625, -0.0052002668380737305, -2.0265579223632812e-06, -7.62939453125e-06, 0.0, -5.483626591740176e-05, -0.025058317929506302, -1.52587890625e-05, -7.62939453125e-06, -0.07257652282714844, -0.00023651123046875, -0.1649322509765625, -0.004524588584899902, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.4468163549900055, -1.6450801922474056e-05, -0.005619049072265625, -0.0002079010009765625, -3.814697265625e-06, -0.0004903475055471063, -5.841255187988281e-06, -1.9073486328125e-06, -0.11987876892089844, -0.00084686279296875, -0.000598907470703125, 0.0, -0.0003261566162109375, -0.0020505189895629883, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -0.01629352569580078, -0.0010612010955810547, -0.00011169909703312442, -4.9591064453125e-05, 0.0, -0.005753040313720703, -7.462501525878906e-05, 0.0, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.01563084125518799, 0.0, -0.0005626678466796875, -3.4332275390625e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.010721206665039062, -0.0002079010009765625, 0.0, -0.0002231597900390625, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008278846740722656, -1.1444091796875e-05, -0.03631114959716797, -1.9073486328125e-06, -0.00058746337890625, -1.9073486328125e-06, -1.33514404296875e-05, -0.000492095947265625, 0.0, -0.0020360946655273438, -2.288818359375e-05, -0.0001586673315614462, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.5789947509765625e-05, 0.0, -0.0007953643798828125, -0.0001888275146484375, -2.86102294921875e-05, -0.0003206252004019916, -2.3841855067985307e-07, -3.576271865313174e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Health())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "DEMON", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Health", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -3.5361256325051755, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Health", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -1.0518442392349243, -7.62939453125e-06, -0.001926422119140625, -0.05232429504394531, -0.0012798309326171875, -5.14984130859375e-05, -1.4836950302124023, -2.622604142743512e-06, -0.000270843505859375, -3.814697265625e-06, -5.805492037325166e-05, -5.483620952873025e-06, -0.000186920166015625, -0.0002040863037109375, -2.47955322265625e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.1444091796875e-05, -0.001178741455078125, -0.011996269226074219, -0.0005893707275390625, -0.000225067138671875, -1.9073486328125e-06, -0.0005496719386428595, -0.00020027108257636428, -1.1444091796875e-05, -0.0008373260498046875, -4.57763671875e-05, -0.00078582763671875, -0.000263214111328125, -0.00042724609375, -0.0047692060470581055, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -6.616114842472598e-05, -0.02548248879611492, -1.52587890625e-05, -7.62939453125e-06, -0.06740188598632812, -0.0002803802490234375, -0.15676403045654297, -0.004429221153259277, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.4475210905075073, -1.6570011212024838e-05, -0.005504608154296875, -0.000213623046875, -3.814697265625e-06, -0.000488084158860147, -5.841255187988281e-06, -1.9073486328125e-06, -0.10770702362060547, -0.000797271728515625, -0.0005855560302734375, 0.0, -0.0003261566162109375, -0.0020552873611450195, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -0.016404151916503906, -0.0010650157928466797, -0.00011169909703312442, -4.9591064453125e-05, 0.0, -0.005655765533447266, -7.462501525878906e-05, 0.0, -0.000179290771484375, -3.814697265625e-06, -5.7220458984375e-06, -0.015669941902160645, 0.0, -0.000560760498046875, -3.4332275390625e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.0107269287109375, -0.0002079010009765625, 0.0, -0.00022125244140625, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008276939392089844, -1.1444091796875e-05, -0.036316871643066406, -1.9073486328125e-06, -0.000583648681640625, -1.9073486328125e-06, -1.33514404296875e-05, -0.000492095947265625, 0.0, -0.0020360946655273438, -2.288818359375e-05, -0.0001586673315614462, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.5789947509765625e-05, 0.0, -0.000797271728515625, -0.0001888275146484375, -2.86102294921875e-05, -0.0003212210431229323, -2.3841855067985307e-07, -3.576271865313174e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Health())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 213, 75, 164, "BEAST", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Health", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -4.330710083475175, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -0.7111239433288574, -2.7418097943154862e-06, -0.002376556396484375, -1.9073486328125e-06, -7.927417755126953e-05, -1.9073468138230965e-06, -6.67572021484375e-05, -0.0005645751953125, -3.814697265625e-05, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.0009479522705078125, -0.010870933532714844, -0.000522613525390625, -0.000362396240234375, -1.9073486328125e-06, -0.0005137900006957352, -0.00013244108413346112, -1.1444091796875e-05, -0.0014247894287109375, -4.1961669921875e-05, -0.0006008148193359375, -0.0003948211669921875, -0.0004520416259765625, -0.004828333854675293, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.483626591740176e-05, -0.024818606674671173, -1.52587890625e-05, -7.62939453125e-06, -0.07109737396240234, -0.0002422332763671875, -1.950831413269043, -0.006089210510253906, -4.0531158447265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001951456069946289, -0.004987476859241724, 0.0, -1.9073486328125e-06, -0.0059356689453125, -0.0069637298583984375, -0.00041961669921875, -5.7220458984375e-06, -0.0001668831828283146, -2.110004425048828e-05, -1.9073486328125e-06, -0.7984476089477539, -0.0003452301025390625, -0.0005321502685546875, 0.0, -0.0002899169921875, -0.004005551338195801, -1.9073486328125e-06, -7.62939453125e-06, -2.09808349609375e-05, -0.013055801391601562, -0.0011475086212158203, -0.00017189978098031133, -7.2479248046875e-05, 0.0, -0.007120609283447266, -8.606910705566406e-05, 0.0, -0.0001697540283203125, -3.814697265625e-06, -5.7220458984375e-06, -0.017142415046691895, 0.0, -0.0006189346313476562, -3.62396240234375e-05, -7.82012939453125e-05, -1.9073486328125e-06, -0.010608673095703125, -0.000202178955078125, 0.0, -0.0002269744873046875, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008173942565917969, -1.1444091796875e-05, -0.0364532470703125, -1.9073486328125e-06, -0.000667572021484375, -1.9073486328125e-06, -1.71661376953125e-05, -0.000438690185546875, 0.0, -0.00200653076171875, -2.47955322265625e-05, -0.00017034979828167707, -2.0265579223632812e-06, -9.5367431640625e-06, 0.0, -5.7697296142578125e-05, 0.0, -0.0007534027099609375, -0.0001964569091796875, -3.0517578125e-05, -0.00033325739786960185, -1.1920928244535389e-07, -3.933898369723465e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -4.59718909305748, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Whelp", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -0.7111239433288574, -2.7418097943154862e-06, -0.002376556396484375, -1.9073486328125e-06, -7.927417755126953e-05, -1.9073468138230965e-06, -6.67572021484375e-05, -0.0005645751953125, -3.814697265625e-05, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.0009479522705078125, -0.010870933532714844, -0.000522613525390625, -0.000362396240234375, -1.9073486328125e-06, -0.0005137900006957352, -0.00013244108413346112, -1.1444091796875e-05, -0.0014247894287109375, -4.1961669921875e-05, -0.0006008148193359375, -0.0003948211669921875, -0.0004520416259765625, -0.004828333854675293, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.483626591740176e-05, -0.024818606674671173, -1.52587890625e-05, -7.62939453125e-06, -0.07109737396240234, -0.0002422332763671875, -0.1701068878173828, -0.004320502281188965, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -2.5910778045654297, -0.02524404041469097, -0.002559661865234375, -0.0005779266357421875, -5.7220458984375e-06, -0.0004919111379422247, -1.5497207641601562e-05, -1.9073486328125e-06, -0.2450695037841797, -0.0007610321044921875, -0.0004253387451171875, 0.0, -0.0003204345703125, -0.0023099184036254883, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-05, -0.01792144775390625, -0.0010300874710083008, -0.00011348723637638614, -5.14984130859375e-05, 0.0, -0.006197452545166016, -7.081031799316406e-05, 0.0, -0.00017547607421875, -3.814697265625e-06, -5.7220458984375e-06, -0.015896916389465332, 0.0, -0.0005741119384765625, -3.24249267578125e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.010686874389648438, -0.0002079010009765625, 0.0, -0.00022125244140625, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008223533630371094, -1.1444091796875e-05, -0.0363006591796875, -1.9073486328125e-06, -0.00058746337890625, -1.9073486328125e-06, -1.33514404296875e-05, -0.000507354736328125, 0.0, -0.0020341873168945312, -2.288818359375e-05, -0.0001562831603223458, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.3882598876953125e-05, 0.0, -0.00080108642578125, -0.0001850128173828125, -2.86102294921875e-05, -0.00031502408091910183, -2.3841855067985307e-07, -3.457063030509744e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Whelp())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Whelp", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -4.7043119102793085, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Dragon", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -0.7111239433288574, -2.7418097943154862e-06, -0.002376556396484375, -1.9073486328125e-06, -7.927417755126953e-05, -1.9073468138230965e-06, -6.67572021484375e-05, -0.0005645751953125, -3.814697265625e-05, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.0009479522705078125, -0.010870933532714844, -0.000522613525390625, -0.000362396240234375, -1.9073486328125e-06, -0.0005137900006957352, -0.00013244108413346112, -1.1444091796875e-05, -0.0014247894287109375, -4.1961669921875e-05, -0.0006008148193359375, -0.0003948211669921875, -0.0004520416259765625, -0.004828333854675293, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.483626591740176e-05, -0.024818606674671173, -1.52587890625e-05, -7.62939453125e-06, -0.07109737396240234, -0.0002422332763671875, -0.1701068878173828, -0.004320502281188965, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -2.797215700149536, -0.042389221489429474, -0.0035457611083984375, -0.000537872314453125, -3.814697265625e-06, -0.00045664337812922895, -2.1219253540039062e-05, -1.9073486328125e-06, -0.1290569305419922, -0.0006256103515625, -0.0004558563232421875, 0.0, -0.0003376007080078125, -0.00203704833984375, -1.9073486328125e-06, -7.62939453125e-06, -4.1961669921875e-05, -0.01813220977783203, -0.0010362863540649414, -0.00011348723637638614, -4.57763671875e-05, 0.0, -0.005365848541259766, -7.271766662597656e-05, 0.0, -0.0001735687255859375, -3.814697265625e-06, -5.7220458984375e-06, -0.015816807746887207, 0.0, -0.0005512237548828125, -3.24249267578125e-05, -7.62939453125e-05, -1.9073486328125e-06, -0.010664939880371094, -0.000209808349609375, 0.0, -0.0002193450927734375, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008192062377929688, -1.1444091796875e-05, -0.03635883331298828, -1.9073486328125e-06, -0.0005474090576171875, -1.9073486328125e-06, -1.33514404296875e-05, -0.00051116943359375, 0.0, -0.0020551681518554688, -2.288818359375e-05, -0.0001562831603223458, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.3882598876953125e-05, 0.0, -0.0008068084716796875, -0.00019073486328125, -3.0517578125e-05, -0.00032813302823342383, -1.1920928244535389e-07, -3.576271865313174e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Dragon())]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Dragon", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -4.707750393787805, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -0.7111239433288574, -2.7418097943154862e-06, -0.002376556396484375, -1.9073486328125e-06, -7.927417755126953e-05, -1.9073468138230965e-06, -6.67572021484375e-05, -0.0005645751953125, -3.814697265625e-05, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.0009479522705078125, -0.010870933532714844, -0.000522613525390625, -0.000362396240234375, -1.9073486328125e-06, -0.0005137900006957352, -0.00013244108413346112, -1.1444091796875e-05, -0.0014247894287109375, -4.1961669921875e-05, -0.0006008148193359375, -0.0003948211669921875, -0.0004520416259765625, -0.004828333854675293, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.483626591740176e-05, -0.024818606674671173, -1.52587890625e-05, -7.62939453125e-06, -0.07109737396240234, -0.0002422332763671875, -1.950831413269043, -0.006089210510253906, -4.0531158447265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001951456069946289, -0.004987476859241724, 0.0, -1.9073486328125e-06, -0.0059356689453125, -0.0069637298583984375, -0.00041961669921875, -5.7220458984375e-06, -0.0001668831828283146, -2.110004425048828e-05, -1.9073486328125e-06, -0.6001129150390625, -0.050253868103027344, -0.0039855241775512695, -7.331371307373047e-05, -0.000213623046875, 0.0, -0.003779768943786621, -0.0010443925857543945, 0.0, -0.000102996826171875, -8.392333984375e-05, -0.4729795455932617, -0.006285886280238628, -0.00011980482668150216, -1.33514404296875e-05, 0.0, -0.047762155532836914, -0.00044846534729003906, 0.0, -0.00022125244140625, -3.814697265625e-06, -9.5367431640625e-06, -0.021075129508972168, 0.0, -0.0012960433959960938, -4.9591064453125e-05, -5.340576171875e-05, -3.814697265625e-06, -0.012426376342773438, -0.00011444091796875, 0.0, -0.0002460479736328125, -5.7220458984375e-06, -1.52587890625e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.0075206756591796875, -9.5367431640625e-06, -0.03679370880126953, -1.9073486328125e-06, -0.007236480712890625, -1.9073486328125e-06, -1.52587890625e-05, -0.0010433197021484375, 0.0, -0.0034580230712890625, -5.7220458984375e-05, -0.00016248214524239302, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -6.16312026977539e-05, 0.0, -0.0005931854248046875, -0.0003261566162109375, -5.7220458984375e-05, -0.0006830806960351765, -1.1920928244535389e-07, -8.463823178317398e-06, 0.0], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0))))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -4.897930823510919, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole1": {"id": "Health", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -0.7111239433288574, -2.7418097943154862e-06, -0.002376556396484375, -1.9073486328125e-06, -7.927417755126953e-05, -1.9073468138230965e-06, -6.67572021484375e-05, -0.0005645751953125, -3.814697265625e-05, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.0009479522705078125, -0.010870933532714844, -0.000522613525390625, -0.000362396240234375, -1.9073486328125e-06, -0.0005137900006957352, -0.00013244108413346112, -1.1444091796875e-05, -0.0014247894287109375, -4.1961669921875e-05, -0.0006008148193359375, -0.0003948211669921875, -0.0004520416259765625, -0.004828333854675293, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.483626591740176e-05, -0.024818606674671173, -1.52587890625e-05, -7.62939453125e-06, -0.07109737396240234, -0.0002422332763671875, -0.1701068878173828, -0.004320502281188965, -2.1457672119140625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.4436389207839966, -1.6570011212024838e-05, -0.005634307861328125, -0.000209808349609375, -3.814697265625e-06, -0.0005066725425422192, -5.841255187988281e-06, -1.9073486328125e-06, -2.1458959579467773, -0.0652780532836914, -0.009077787399291992, -4.4226646423339844e-05, -0.0007562637329101562, 0.0, -0.005948543548583984, -0.001548171043395996, 0.0, -5.7220458984375e-05, -0.000308990478515625, -0.43292808532714844, -0.0031884899362921715, -0.00013804412446916103, -9.5367431640625e-06, 0.0, -0.0602191686630249, -0.00033020973205566406, 0.0, -0.000247955322265625, -3.814697265625e-06, -9.5367431640625e-06, -0.02173900604248047, 0.0, -0.0014238357543945312, -5.340576171875e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.014871597290039062, -0.0001220703125, 0.0, -0.0002422332763671875, -7.62939453125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -3.814697265625e-06, -0.0072879791259765625, -9.5367431640625e-06, -0.03795909881591797, -1.9073486328125e-06, -0.006506919860839844, -1.9073486328125e-06, -1.1444091796875e-05, -0.0009765625, 0.0, -0.0031633377075195312, -5.91278076171875e-05, -0.00016093240992631763, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -6.16312026977539e-05, 0.0, -0.00054168701171875, -0.0002880096435546875, -4.9591064453125e-05, -0.0005785991088487208, -1.1920928244535389e-07, -7.510156137868762e-06, 0.0], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(Health())]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0))))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 155, "Buff", "<EOS>", 25, 133, "Health", "<EOS>", 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -4.992698106769218, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Call", "args": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}]}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -1.3433384895324707, -2.9802317840221804e-06, -0.0004291534423828125, -3.814697265625e-06, -6.210803257999942e-05, -6.198873961693607e-06, -0.000202178955078125, -0.0002231597900390625, -3.0517578125e-05, -1.9073486328125e-06, -4.76837158203125e-05, -1.1444091796875e-05, -0.00116729736328125, -0.011940956115722656, -0.0005626678466796875, -0.0002498626708984375, -1.9073486328125e-06, -0.0005419234512373805, -0.0001996749924728647, -1.1444091796875e-05, -0.00078582763671875, -4.76837158203125e-05, -0.0007915496826171875, -0.0002460479736328125, -0.0004215240478515625, -0.0048683881759643555, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -6.234645115910098e-05, -0.025291630998253822, -1.52587890625e-05, -7.62939453125e-06, -0.06818771362304688, -0.0002803802490234375, -2.034976005554199, -0.0057953596115112305, -4.0531158447265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.00020265579223632812, -0.004911421798169613, 0.0, -1.9073486328125e-06, -0.00612640380859375, -0.006305694580078125, -0.0004253387451171875, -5.7220458984375e-06, -0.0001647377066547051, -2.110004425048828e-05, -1.9073486328125e-06, -0.7484989166259766, -0.0003223419189453125, -0.000507354736328125, 0.0, -0.0002956390380859375, -0.004201054573059082, -1.9073486328125e-06, -7.62939453125e-06, -2.09808349609375e-05, -0.01313018798828125, -0.001166701316833496, -0.00016999243234749883, -7.05718994140625e-05, 0.0, -0.006910800933837891, -8.606910705566406e-05, 0.0, -0.0001678466796875, -3.814697265625e-06, -5.7220458984375e-06, -0.01737511157989502, 0.0, -0.0006132125854492188, -3.62396240234375e-05, -8.0108642578125e-05, -1.9073486328125e-06, -0.010584831237792969, -0.0002040863037109375, 0.0, -0.000225067138671875, -9.5367431640625e-06, -1.1444091796875e-05, -2.09808349609375e-05, -3.814697265625e-06, -0.008168220520019531, -1.1444091796875e-05, -0.036459922790527344, -1.9073486328125e-06, -0.0006656646728515625, -1.9073486328125e-06, -1.71661376953125e-05, -0.00043487548828125, 0.0, -0.0020055770874023438, -2.47955322265625e-05, -0.00017237635620404035, -2.0265579223632812e-06, -9.5367431640625e-06, 0.0, -5.7697296142578125e-05, 0.0, -0.0007495880126953125, -0.000194549560546875, -3.0517578125e-05, -0.00033063560840673745, -1.1920928244535389e-07, -3.814689534920035e-06, -1.1920928244535389e-07], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType\n            (MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "BEAST", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 48, 112, 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -5.341615754023891, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template33"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -0.7111239433288574, -2.7418097943154862e-06, -0.002376556396484375, -1.9073486328125e-06, -7.927417755126953e-05, -1.9073468138230965e-06, -6.67572021484375e-05, -0.0005645751953125, -3.814697265625e-05, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -0.0009479522705078125, -0.010870933532714844, -0.000522613525390625, -0.000362396240234375, -1.9073486328125e-06, -0.0005137900006957352, -0.00013244108413346112, -1.1444091796875e-05, -0.0014247894287109375, -4.1961669921875e-05, -0.0006008148193359375, -0.0003948211669921875, -0.0004520416259765625, -0.004828333854675293, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.483626591740176e-05, -0.024818606674671173, -1.52587890625e-05, -7.62939453125e-06, -2.7694129943847656, -0.021411895751953125, -0.021009445190429688, -0.0009882450103759766, -2.0265579223632812e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0001900196075439453, -0.010905384086072445, 0.0, -1.9073486328125e-06, -0.00803375244140625, -0.002590179443359375, -0.0006427764892578125, -5.7220458984375e-06, -0.00018380777328275144, -2.110004425048828e-05, -1.9073486328125e-06, -0.44629955291748047, -0.04784393310546875, -0.003825664520263672, -6.759166717529297e-05, -0.000213623046875, 0.0, -0.004285335540771484, -0.0010443925857543945, 0.0, -9.34600830078125e-05, -9.1552734375e-05, -0.4764270782470703, -0.0058798654936254025, -0.00011980493582086638, -1.33514404296875e-05, 0.0, -0.04674649238586426, -0.00044846534729003906, 0.0, -0.0002193450927734375, -3.814697265625e-06, -9.5367431640625e-06, -0.020452380180358887, 0.0, -0.0013055801391601562, -4.57763671875e-05, -4.9591064453125e-05, -3.814697265625e-06, -0.012048721313476562, -0.0001125335693359375, 0.0, -0.0002536773681640625, -5.7220458984375e-06, -1.9073486328125e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.0075359344482421875, -9.5367431640625e-06, -0.03686809539794922, -1.9073486328125e-06, -0.007456779479980469, -1.9073486328125e-06, -1.52587890625e-05, -0.00104522705078125, 0.0, -0.0034418106079101562, -5.53131103515625e-05, -0.00016045558732002974, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -5.9723854064941406e-05, 0.0, -0.0005893707275390625, -0.0003261566162109375, -5.7220458984375e-05, -0.000682604149915278, -1.1920928244535389e-07, -8.463823178317398e-06, 0.0], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(1))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0))))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 68, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -5.455831603285773, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "BEAST"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.6043316125869751, -2.47955322265625e-05, -8.392333984375e-05, -0.011004447937011719, -0.0019779205322265625, -5.14984130859375e-05, -1.3433384895324707, -2.9802317840221804e-06, -0.0004291534423828125, -3.814697265625e-06, -6.210803257999942e-05, -6.198873961693607e-06, -0.000202178955078125, -0.0002231597900390625, -3.0517578125e-05, -1.9073486328125e-06, -4.76837158203125e-05, -1.1444091796875e-05, -0.00116729736328125, -0.011940956115722656, -0.0005626678466796875, -0.0002498626708984375, -1.9073486328125e-06, -0.0005419234512373805, -0.0001996749924728647, -1.1444091796875e-05, -0.00078582763671875, -4.76837158203125e-05, -0.0007915496826171875, -0.0002460479736328125, -0.0004215240478515625, -0.0048683881759643555, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -6.234645115910098e-05, -0.025291630998253822, -1.52587890625e-05, -7.62939453125e-06, -0.06818771362304688, -0.0002803802490234375, -2.034976005554199, -0.0057953596115112305, -4.0531158447265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.00020265579223632812, -0.004911421798169613, 0.0, -1.9073486328125e-06, -0.00612640380859375, -0.006305694580078125, -0.0004253387451171875, -5.7220458984375e-06, -0.0001647377066547051, -2.110004425048828e-05, -1.9073486328125e-06, -0.6430759429931641, -0.049744606018066406, -0.004047870635986328, -7.140636444091797e-05, -0.00020599365234375, 0.0, -0.0035947561264038086, -0.0010586977005004883, 0.0, -0.000102996826171875, -8.392333984375e-05, -0.46729564666748047, -0.006264427211135626, -0.00012028164201183245, -1.33514404296875e-05, 0.0, -0.04729294776916504, -0.00044465065002441406, 0.0, -0.00022125244140625, -3.814697265625e-06, -9.5367431640625e-06, -0.02119433879852295, 0.0, -0.0012922286987304688, -4.9591064453125e-05, -5.340576171875e-05, -3.814697265625e-06, -0.012361526489257812, -0.00011444091796875, 0.0, -0.0002460479736328125, -5.7220458984375e-06, -1.52587890625e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.007534027099609375, -9.5367431640625e-06, -0.03675651550292969, -1.9073486328125e-06, -0.007405281066894531, -1.9073486328125e-06, -1.52587890625e-05, -0.0010528564453125, 0.0, -0.0034656524658203125, -5.7220458984375e-05, -0.00016248214524239302, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -6.16312026977539e-05, 0.0, -0.0005931854248046875, -0.0003261566162109375, -5.7220458984375e-05, -0.0006814128719270229, -1.1920928244535389e-07, -8.463823178317398e-06, 0.0], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0))))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 64, 213, 75, 164, "BEAST", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}, {"score": -5.4888426876998295, "model_output": {"hole4": "player", "_type": "Template0", "hole3": "create_minion", "hole0": "TwilightWhelp", "hole2": [{"_type": "Expr", "value": {"_type": "Call", "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Template34"}, {"attr": "MAGE", "_type": "Attribute", "value": {"id": "CHARACTER_CLASS", "_type": "Name"}}, {"_type": "Template26"}], "func": {"_type": "Template18"}, "keywords": [{"_type": "Template22", "hole0": "<UNK>"}, {"_type": "keyword", "value": {"_type": "Call", "args": [{"_type": "Call", "args": [{"_type": "List", "elts": [{"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template19", "hole2": [{"_type": "Template34"}], "hole1": {"id": "ChangeHealth", "_type": "Name"}, "hole0": "Buff"}, {"_type": "Template36_expr_seq"}]}], "func": {"id": "Give", "_type": "Name"}}, {"_type": "Template25", "hole0": "SelfSelector"}, {"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "hole2": [{"_type": "Template19", "hole3": [{"_type": "keyword", "value": {"_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"id": "MINION_TYPE", "_type": "Name"}}], "func": {"id": "IsType", "_type": "Name"}}, "arg": "condition"}], "hole1": {"id": "CardSelector", "_type": "Name"}, "hole0": "Count"}], "hole1": {"id": "GreaterThan", "_type": "Name"}, "hole0": "Not"}], "func": {"id": "Battlecry", "_type": "Name"}}, "arg": "battlecry"}]}}], "hole6": [{"_type": "Template16", "hole1": 1, "hole0": 2}], "hole1": "MinionCard"}, "score_history": [-1.1444091796875e-05, -0.0001773834228515625, -7.986990567587782e-06, -3.3974134566960856e-05, -2.5987286790041253e-05, -2.8908252716064453e-06, -1.966940726561006e-05, -2.741813204920618e-06, -7.62939453125e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.86102294921875e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.50339189733495e-06, -4.231926504871808e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -4.9591064453125e-05, -0.0008258819580078125, -0.0007839202880859375, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -1.0518442392349243, -7.62939453125e-06, -0.001926422119140625, -0.05232429504394531, -0.0012798309326171875, -5.14984130859375e-05, -0.9817867279052734, -1.7881377516459906e-06, -0.0021915435791015625, -1.9073486328125e-06, -8.487701416015625e-05, -1.9073468138230965e-06, -5.7220458984375e-05, -0.000484466552734375, -4.1961669921875e-05, 0.0, -3.4332275390625e-05, -9.5367431640625e-06, -0.0009517669677734375, -0.010973930358886719, -0.000545501708984375, -0.000331878662109375, -1.9073486328125e-06, -0.0005218960577622056, -0.00013041458441875875, -1.1444091796875e-05, -0.0015621185302734375, -4.1961669921875e-05, -0.0005893707275390625, -0.0004291534423828125, -0.000461578369140625, -0.004660487174987793, -2.0265579223632812e-06, -5.7220458984375e-06, 0.0, -5.686282383976504e-05, -0.0245029479265213, -1.52587890625e-05, -7.62939453125e-06, -0.07029533386230469, -0.0002422332763671875, -1.9493513107299805, -0.0060662031173706055, -4.0531158447265625e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001970529556274414, -0.005010365508496761, 0.0, -1.9073486328125e-06, -0.0060062408447265625, -0.007045745849609375, -0.0004177093505859375, -5.7220458984375e-06, -0.0001668831828283146, -2.110004425048828e-05, -1.9073486328125e-06, -0.6208944320678711, -0.05066680908203125, -0.003960728645324707, -7.522106170654297e-05, -0.000213623046875, 0.0, -0.003900885581970215, -0.0010377168655395508, 0.0, -0.000102996826171875, -8.58306884765625e-05, -0.47441959381103516, -0.00631819199770689, -0.00012171217531431466, -1.33514404296875e-05, 0.0, -0.04804825782775879, -0.00045228004455566406, 0.0, -0.0002231597900390625, -3.814697265625e-06, -9.5367431640625e-06, -0.021094202995300293, 0.0, -0.0012979507446289062, -4.9591064453125e-05, -5.340576171875e-05, -3.814697265625e-06, -0.012450218200683594, -0.00011444091796875, 0.0, -0.0002460479736328125, -5.7220458984375e-06, -1.52587890625e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.0075168609619140625, -9.5367431640625e-06, -0.036823272705078125, -1.9073486328125e-06, -0.007189750671386719, -1.9073486328125e-06, -1.52587890625e-05, -0.0010433197021484375, 0.0, -0.0034580230712890625, -5.7220458984375e-05, -0.00016248214524239302, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -6.16312026977539e-05, 0.0, -0.0005931854248046875, -0.0003261566162109375, -5.7220458984375e-05, -0.0006830806960351765, -1.1920928244535389e-07, -8.463823178317398e-06, 0.0], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.<UNK>, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector(), Not(GreaterThan(Count(CardSelector(condition=\n            IsType(MINION_TYPE.DRAGON))), value=0))))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "choice_history": [77, 145, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 217, 86, 116, 20, 112, 30, 208, 56, 142, "Twilight", " ", "Whelp", "<EOS>", 69, 45, 104, 25, 133, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 64, 213, 75, 164, "<UNK>", "<EOS>", 76, 195, "battlecry", "<EOS>", 20, 111, 25, 133, "Battlecry", "<EOS>", 207, 48, 111, 25, 133, "Give", "<EOS>", 205, 51, 129, 207, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Attack", "<EOS>", 205, 69, 59, 157, "Buff", "<EOS>", 25, 133, "Change", "Health", "<EOS>", 205, 69, 71, 63, 171, "Self", "Selector", "<EOS>", 59, 158, "Not", "<EOS>", 25, 133, "Greater", "Than", "<EOS>", 205, 59, 156, "Count", "<EOS>", 25, 133, "Card", "Selector", "<EOS>", 212, 76, 195, "condition", "<EOS>", 20, 111, 25, 133, "Is", "Type", "<EOS>", 205, 45, 104, 25, 133, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 212, 76, 195, "value", "<EOS>", 27, 138, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 217, 94, 152, "2", "<EOS>", "1", "<EOS>"]}]}
