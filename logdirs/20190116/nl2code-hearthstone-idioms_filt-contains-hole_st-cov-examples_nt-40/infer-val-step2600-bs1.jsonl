{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"score_history": [-0.0001735687255859375, -0.00063323974609375, -0.00014006969286128879, -0.0001113352773245424, -0.0020195445977151394, -0.0004596845537889749, -0.0005824565887451172, -1.9073486328125e-06, -3.814697265625e-06, -0.011202812194824219, -0.00087738037109375, -0.00045418727677315474, -3.24249267578125e-05, -0.00024676320026628673, -0.0067882537841796875, -0.0045359134674072266, -9.536738616588991e-07, -0.9372012615203857, 0.0, -0.03877711296081543, 0.0, -0.43478596210479736, -1.52587890625e-05, -0.0003714561462402344, 0.0, -3.814697265625e-06, -0.000423431396484375, -0.013736724853515625, -0.02243216522037983, -0.0001678466796875, -0.000843048095703125, -3.576278118089249e-07, -0.0003029107756447047, -1.1920928244535389e-07], "score": -1.4773257802002533, "model_output": {"hole4": "player", "hole1": "WeaponCard", "hole6": [{"_type": "Template30", "hole2": 4, "hole1": 3, "hole0": "Weapon"}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "DRUID", "hole3": "FREE", "hole1": 5, "hole0": "<UNK> Blade"}], "hole3": "create_weapon", "hole0": "<UNK>Blade"}, "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "choice_history": [70, 147, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 188, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"score_history": [-5.7220458984375e-06, -0.010778427124023438, -0.00014244495832826942, -1.1920928244535389e-07, -4.637133679352701e-05, -1.4305104514278355e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.3095073699951172, -0.12938404083251953, -0.0001049041748046875, -1.52587890625e-05, -6.186861719470471e-05, -2.0265579223632812e-06, -0.0003033876419067383, -1.9073486328125e-06, -0.1832876205444336, -0.0001506805419921875, -1.52587890625e-05, -5.960462772236497e-07, -0.0005245103966444731, -1.2993727978027891e-05, -1.9073486328125e-06, -0.0002346038818359375, 0.0, -0.0007122762617655098, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106231689453125e-06, -2.0265579223632812e-06, -0.024984121322631836, 0.0, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004318714141845703, 0.0, -0.0003185272216796875, -9.5367431640625e-06, -7.62939453125e-06, -3.218649908376392e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0009710788726806641, -0.00011491775512695312, -0.6189548969268799, -3.814697265625e-06, -4.267692565917969e-05, 0.0, -0.0977252721786499, 0.0, -4.1961669921875e-05, -0.0002346038818359375, -1.1444091796875e-05, -0.00016605854034423828, -1.8358061424805783e-05, -0.0072966814041137695, -4.768370445162873e-07], "score": -1.3906118647778882, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 7, "hole0": 6}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Boulderfist Ogre"}, {"_type": "Num", "n": 6}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "BoulderfistOgre"}, "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "choice_history": [70, 147, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boulderfist", " ", "Ogre", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"score_history": [-8.58306884765625e-05, -0.000278472900390625, -4.768370445162873e-07, -7.510157047363464e-06, -0.001693958998657763, -2.145752659998834e-06, -1.7285345165873878e-05, 0.0, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -3.576272320060525e-06, -4.5061096898280084e-05, -1.5497195136049413e-06, -1.4305104514278355e-06, -0.00011646744678728282, -4.768370445162873e-07, -0.6255509853363037, 0.0, -0.00018322467803955078, 0.0, -0.0009080171585083008, 0.0, -2.0265579223632812e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, -9.655952453613281e-06, -2.50339189733495e-06, -0.016645431518554688, -9.5367431640625e-06, -9.5367431640625e-06, -0.0001049041748046875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -4.0531158447265625e-06, 0.0, 0.0, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -0.005024909973144531, -1.1444091796875e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.01250457763671875, 0.0, -0.2830390930175781, -6.103515625e-05, -0.000232696533203125, 0.0, -4.1961669921875e-05, 0.0, -0.0002709627151489258, 0.0, -4.38690185546875e-05, -0.10020256042480469, -0.0001087188720703125, -0.005031585693359375, -0.015369415283203125, -0.000644683837890625, -0.000194549560546875, -0.0006008148193359375, 0.0, -0.2843276262283325, -1.9073486328125e-06, -0.2794433534145355, 0.0], "score": -1.6332556852300968, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole2": 3, "hole1": "change_temp_attack", "hole0": {"_type": "Name", "id": "minion"}}}], "iter": {"attr": "minions", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "DRUID", "hole3": "FREE", "hole1": 1, "hole0": "Deadly Poison"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "DeadlyPoison"}, "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.change_temp_attack(3)\n", "choice_history": [70, 149, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 29, 190, 21, 134, "minion", "<EOS>", "change_temp_attack", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"score_history": [-0.0333251953125, -0.000164031982421875, -0.0010874316794797778, -0.0008158962009474635, -2.861022494471399e-06, -2.264974000354414e-06, -5.7220458984375e-06, 0.0, -0.0003490447998046875, -0.016664505004882812, -3.62396240234375e-05, -7.152555099310121e-07, -0.00021505067707039416, -9.5367431640625e-06, -2.3841855067985307e-07, -2.1345913410186768e-06, -1.1920922133867862e-06, -0.03325653076171875, 0.0, -0.0019919872283935547, 0.0, -0.04395484924316406, -0.09854793548583984, -0.25281524658203125, -3.8146954466355965e-06, -1.52587890625e-05, -0.0017986297607421875, 0.0, -0.0009227914270013571, -2.110004425048828e-05, -0.017084479331970215, -7.2479248046875e-05, 0.0, -0.008220791816711426, 0.0, -0.0002542734146118164, 0.0, -1.71661376953125e-05, -0.001941680908203125, -7.62939453125e-06, -0.0005035400390625, -1.6689286894688848e-06, -8.41617293190211e-05, -5.960462772236497e-07], "score": -0.5141986714370717, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 5, "hole0": 6}], "_type": "Template1", "hole2": [{"hole4": {"_type": "Template18", "hole2": "HeroSelector", "hole1": [{"_type": "Num", "n": 3}], "hole0": "Damage"}, "hole1": 6, "_type": "Template11", "hole2": "SHAMAN", "hole3": "battlecry", "hole0": "Fire Elemental"}], "hole3": "create_minion", "hole0": "FireElemental"}, "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "choice_history": [70, 147, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 25, 162, "Damage", "<EOS>", 237, 46, 139, "3", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "6", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"score_history": [-7.62939453125e-05, -3.24249267578125e-05, -0.00019572250312194228, -1.1920922133867862e-06, -0.00012730859452858567, -3.576272320060525e-06, -5.7220458984375e-06, -3.576278118089249e-07, -0.0002460479736328125, -0.0013675689697265625, -0.3304157257080078, -5.960462772236497e-07, -0.00012576514563988894, -1.9073486328125e-06, -0.0018508161883801222, -0.0003476142883300781, -0.0022343492601066828, -0.0004873268771916628, -4.947081470163539e-05, -0.023150546476244926, -0.00794033519923687, 0.0, -0.30152225494384766, -7.62939453125e-06, -0.9245929718017578, -0.0023764767684042454, -6.592163845198229e-05, -2.348403722862713e-05, -6.556489552167477e-06, -3.194808232365176e-05, 0.0, -1.752376374497544e-05, 0.0, -3.0517578125e-05, -0.0008068084716796875, -0.000244140625, -3.4451481042196974e-05, -2.50339189733495e-06, 0.0, -2.622600959512056e-06], "score": -1.5984264793726197, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 4, "hole0": 2}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "Template39", "hole0": "Draw"}], "hole1": 4, "_type": "Template6", "hole2": "COMMON", "hole3": "Draw", "hole5": "PlayerSelector", "hole0": "Gnomish Inventor"}], "hole3": "create_minion", "hole0": "GnomishInventor"}, "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(Draw()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "choice_history": [70, 147, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 237, 63, 205, "Draw", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"score_history": [-0.004802703857421875, -4.9591064453125e-05, -1.4305104514278355e-06, -2.777537883957848e-05, -0.0002451834443490952, -8.343486115336418e-07, -1.4066696166992188e-05, -5.841255187988281e-06, -9.5367431640625e-06, -0.0006198883056640625, -0.0015048980712890625, -8.344646857949556e-07, -6.330010364763439e-05, -2.7418097943154862e-06, 0.0, -6.079673767089844e-06, -2.50339189733495e-06, -0.8240022659301758, 0.0, -0.0019818542059510946, 0.0, -0.0011349916458129883, 0.0, -7.867813110351562e-06, 0.0, -0.0004177093505859375, -0.0001068115234375, -1.537799835205078e-05, -5.364412118069595e-06, -0.6627674102783203, -7.62939453125e-06, -1.52587890625e-05, -0.00019073486328125, -3.0517578125e-05, -7.43865966796875e-05, -3.814697265625e-06, -5.9604644775390625e-06, 0.0, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.88758041683468e-06, -0.00016987323760986328, -0.10263252258300781, -1.9073486328125e-06, -0.00045013427734375, -0.0002346038818359375, -8.7738037109375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -0.000186920166015625, -0.0003814697265625, 0.0, -0.005267143249511719, 0.0, -0.6924229860305786, -3.814697265625e-06, -0.043277423828840256, 0.0, -0.00545501708984375, -1.9073486328125e-06, -0.00867462158203125, -0.0001277923583984375, -0.0001354217529296875, -1.1444091796875e-05, -2.86102294921875e-05, -1.33514404296875e-05, -0.024402618408203125, 0.0, -0.002150297164916992, 0.0, -0.017263544723391533, -1.9073486328125e-06, -0.011578223668038845, 0.0], "score": -2.4131296126940853, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Expr", "value": {"_type": "Template31", "hole2": 2, "hole1": "change_temp_attack", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}}, {"_type": "Expr", "value": {"_type": "Template31", "hole2": 2, "hole1": "increase_armor", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "HUNTER", "hole3": "FREE", "hole1": 2, "hole0": "Heroic Strike"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "HeroicStrike"}, "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "choice_history": [70, 149, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "2", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"score_history": [-3.814697265625e-06, -0.03382396697998047, -0.000198821333469823, -9.536738616588991e-07, -1.9788643840001896e-05, -9.536738616588991e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.1444091796875e-05, -0.002101898193359375, -1.33514404296875e-05, -1.0728830375228426e-06, -4.0411949157714844e-05, 0.0, 0.0, -0.00014777248725295067, -0.0003477922291494906, -1.1749722957611084, 0.0, -0.000827789306640625, 0.0, -0.014412403106689453, 0.0, -1.9073486328125e-06, -0.0001392364501953125, -8.96453857421875e-05, 7.152555099310121e-07, -0.006858995649963617, -2.7181053155800328e-05, -8.511257328791544e-05, -0.0015947805950418115, -1.9073486328125e-06, -0.0003223419189453125, -7.62939453125e-06, -0.00028324127197265625, -5.9604644775390625e-06], "score": -1.2363459269750976, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 8, "hole0": 8}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "DRUID", "hole1": 8, "hole0": "Ironbark Protector"}], "hole3": "create_minion", "hole0": "IronbarkProtector"}, "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "choice_history": [70, 147, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"score_history": [-0.0001697540283203125, -9.1552734375e-05, -5.173586032469757e-05, -0.0007913100998848677, -0.0024907863698899746, -0.0001290978107135743, -0.002074051648378372, -6.6622160375118256e-06, -1.9073486328125e-06, -2.2649765014648438e-06, -7.62939453125e-06, -0.016546249389648438, -0.0001773834228515625, -2.47955322265625e-05, -9.5367431640625e-06, -0.0006392002105712891, -1.9073486328125e-06, -0.0006898641586303711, 0.0, -3.24249267578125e-05, -7.62939453125e-06, -0.000453948974609375, -7.4979972850997e-05, -4.4345855712890625e-05, -5.543200677493587e-05, -5.7220458984375e-05, -7.87973403930664e-05, -0.0005000829696655273, -0.005877375602722168, -0.0021076202392578125, -1.52587890625e-05, -3.814697265625e-06, -0.0027628811076283455, 0.0, -2.86102294921875e-05, -0.000850677490234375, -5.7220458984375e-06, -5.7220458984375e-06, -8.82148651726311e-06, 0.0, -0.5005893707275391, 0.0, -3.814697265625e-06, -3.814697265625e-06, -1.52587890625e-05, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -0.0015488862991333008, -1.9073486328125e-06, -1.1444091796875e-05, -3.62396240234375e-05, -0.0001125335693359375, -6.496906280517578e-05, -7.748603820800781e-06, -0.0002155303955078125, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.00038909912109375, -1.9073486328125e-06, -9.918212890625e-05, -1.9073486328125e-06, -0.0018541812896728516, 0.0, -1.1444091796875e-05, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, -1.71661376953125e-05, -1.7523765563964844e-05, -1.0967194612021558e-05, -0.5156793594360352, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.52587890625e-05, -1.3828277587890625e-05, -0.000179290771484375, -0.03848457336425781, -3.814697265625e-06, -0.00011444091796875, -1.71661376953125e-05, -0.0001201629638671875, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, 0.0, -0.005118727684020996, -9.655952453613281e-06, -0.6528053283691406, -1.9073486328125e-06, -0.1597003936767578, -1.52587890625e-05, -0.0001697540283203125, -4.1961669921875e-05, -0.0003986358642578125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.15678632259368896, 0.0, -0.6350039839744568, -5.7220458984375e-06], "score": -2.7069284507606426, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Expr", "value": {"_type": "Template31", "hole2": 4, "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}}, {"_type": "Expr", "value": {"_type": "Template31", "hole2": 4, "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "hole3": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "arg": "target_func"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "MarkOfTheWild"}, "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.increase_health(4)\n", "choice_history": [70, 149, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"score_history": [-2.86102294921875e-05, -0.028716087341308594, -7.664863369427621e-05, -1.0609588571242057e-05, -1.418357715010643e-05, -1.549720582261216e-05, -8.463859558105469e-06, -5.340576171875e-05, -0.000492095947265625, -0.0001888275146484375, -3.6954811548639555e-06, 0.0, -1.1920922133867862e-06, -9.65590606938349e-06, -0.3160724639892578, 0.0, -0.0017606019973754883, 0.0, -0.038799285888671875, 0.0, -0.000164031982421875, 0.0, -2.47955322265625e-05, -1.33514404296875e-05, -5.5789947509765625e-05, -4.971027374267578e-05, -0.2444906234741211, -5.7220458984375e-06, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -4.0531158447265625e-06, -3.814697265625e-06, -0.0004119873046875, -1.71661376953125e-05, -9.5367431640625e-06, -2.47955322265625e-05, -3.814697265625e-06, -0.18889713287353516, -3.814697265625e-06, -0.020818710327148438, -0.0002384185791015625, -9.5367431640625e-06, -1.71661376953125e-05, -0.0025997161865234375, -1.9073486328125e-06, -0.00026094913482666016, -1.9073486328125e-06, -0.000469207763671875, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -1.52587890625e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -6.67572021484375e-05, 0.0, -0.0009545087232254446, -1.9073486328125e-06, -0.008142221719026566, 0.0, -0.010463714599609375, -3.24249267578125e-05, -1.1444091796875e-05, 0.0, -0.017355918884277344, 0.0, -0.0030498504638671875, -5.14984130859375e-05, -0.000110626220703125, 0.0, -0.00045418739318847656, -1.9073486328125e-06, -7.62939453125e-06, -6.67572021484375e-05, -1.9073486328125e-06, -0.000668995373416692, -1.9073486328125e-06, -0.0028743743896484375, -1.71661376953125e-05, -0.44817933440208435, -3.814697265625e-06, -0.18080520629882812, -0.000606536865234375, -0.000675201416015625, -0.0001430511474609375, -0.0014057159423828125, -3.814697265625e-06, -0.0015201568603515625, 0.0, -0.005543708801269531, -4.57763671875e-05, -3.814697265625e-06, -9.5367431640625e-05, -0.008016586303710938, -7.62939453125e-06, -0.0001773834228515625, 0.0, -0.0032939910888671875, -1.9073486328125e-06, -3.814697265625e-06, -0.000171661376953125, -1.9073486328125e-06, -0.24274373054504395, 0.0, -0.0009441375732421875, -5.7220458984375e-06, -0.0003070831298828125, -3.814697265625e-06, -0.02724933624267578, 0.0, -0.021004319190979004, 0.0, -2.288818359375e-05, -0.0022907257080078125, -1.9073486328125e-06, -0.0009720325469970703, -1.9073486328125e-06, -0.00048065185546875, -0.00022125244140625, -0.00191497802734375, -7.62939453125e-06, -0.005055427551269531, 0.0, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -0.0004482269287109375, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-05, -0.0001416206214344129, 0.0, -0.24912019073963165, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -4.57763671875e-05, -6.4849853515625e-05, -0.0032677650451660156, 0.0, -4.1961669921875e-05, -4.76837158203125e-05, -0.00018310546875, -2.6702880859375e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000148773193359375, -0.0003814697265625, -3.814697265625e-06, -2.09808349609375e-05, -3.4928321838378906e-05, -7.987022399902344e-06, -0.000316619873046875, -0.00162506103515625, -0.0004138946533203125, -8.96453857421875e-05, -2.6702880859375e-05, -0.0001544952392578125, -1.1444091796875e-05, -0.0001583099365234375, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -6.079673767089844e-06, -1.9073486328125e-06, -0.00028228759765625, 0.0, -0.0001049041748046875, 0.0, -1.0251998901367188e-05, 0.0, -0.0013484954833984375, -2.47955322265625e-05, -0.0012607574462890625, -1.9073486328125e-05, -0.0001239776611328125, 0.0, -0.0034581422805786133, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -9.5367431640625e-06, -8.20159912109375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -7.2479248046875e-05, 0.0, -0.0008637905120849609, -3.814697265625e-06, -0.00132607645355165, 0.0, -0.0001125335693359375, -0.0028772354125976562, -0.0003528594970703125, -0.0004596710205078125, 0.0, -0.11107578873634338, -1.33514404296875e-05], "score": -2.224349422592006, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "copy", "_type": "Attribute", "value": {"_type": "Name", "id": "copy"}}, "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}]}, "targets": [{"_type": "Name", "id": "minions"}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "random_choice", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}, "args": [{"_type": "Name", "id": "minions"}]}, "targets": [{"_type": "Name", "id": "minion"}]}, {"_type": "Template37", "hole2": [{"_type": "Name", "id": "minion"}], "hole1": "remove", "hole0": {"_type": "Name", "id": "minions"}}, {"_type": "Template37", "hole2": [{"_type": "Template31", "hole2": 3, "hole1": "effective_spell_damage", "hole0": {"_type": "Name", "id": "player"}}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Name", "id": "minion"}}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "PRIEST", "hole3": "FREE", "hole1": 4, "hole0": "Multi-Shot"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "Multi-Shot", "hole7": [{"_type": "FunctionDef", "name": "can_use", "body": [{"_type": "Return", "value": {"_type": "BoolOp", "values": [{"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "can_use", "hole0": {"_type": "Template39", "hole0": "super"}}, {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}]}, "ops": [{"_type": "GtE"}], "comparators": [{"_type": "Num", "n": 4}]}], "op": {"_type": "And"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}, "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 4\n", "choice_history": [70, 150, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Multi-Shot", "<EOS>", "4", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "minions", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 251, 75, 102, 237, 44, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "game", "<EOS>", "random_choice", "<EOS>", 237, 44, 134, "minions", "<EOS>", 93, 196, 21, 134, "minions", "<EOS>", "remove", "<EOS>", 237, 44, 134, "minion", "<EOS>", 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>", 249, 81, 117, "can_use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 249, 84, 141, 15, 106, 2, 238, 54, 184, 33, 205, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 40, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 234, 6, 237, 46, 139, "4", "<EOS>"]}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"score_history": [-0.5789384841918945, -0.0001316070556640625, -4.00543212890625e-05, -0.0002498626708984375, -4.00543212890625e-05, -0.001424394897185266, -0.0002805941621772945, -0.0005919948453083634, -0.010734320618212223, -1.52587890625e-05, -7.43865966796875e-05, -1.1444091796875e-05, -6.40133221168071e-05, -4.374980926513672e-05, -8.463859558105469e-06, -0.0002079010009765625, -7.05718994140625e-05, -0.00048828125, -0.00027724236133508384, -0.029366374015808105, -0.08419666439294815, -0.00013387203216552734, -0.00010192392801400274, -0.0031757354736328125, -2.2172820536070503e-05, -3.576278118089249e-07, -0.07389974594116211, -7.62939453125e-06, -0.2211313247680664, 0.0, -0.000680446217302233, -5.7220458984375e-06, -0.0001811981201171875, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00109100341796875, -3.814697265625e-06, -0.00031244754791259766, 0.0, -0.006866574287414551, 0.0, -0.03731461241841316, -7.62939453125e-06, -0.000885009765625, -0.000141143798828125, -0.000102996826171875, -1.71661376953125e-05, -0.043285369873046875, -3.3378591979271732e-06, -0.0014505386352539062, -0.000354766845703125, -0.0008716583251953125, -0.0002956390380859375, -0.0073394775390625, -1.52587890625e-05, -0.015589714050292969, -9.5367431640625e-06, -7.43865966796875e-05, -2.6702880859375e-05, -0.030060764402151108, -2.0265579223632812e-06, -0.039194703102111816, -3.576277322281385e-06, -0.0003490447998046875, -0.19190311431884766, -7.62939453125e-06, -0.0007190704345703125, -1.9073486328125e-06, -0.3157820701599121, -3.0398361559491605e-05, -0.0053348541259765625, -7.62939453125e-05, -0.001068115234375, -5.7220458984375e-06, -0.005003451835364103, -2.0265579223632812e-06, -0.0023099184036254883, -1.1563301086425781e-05, -0.0021038055419921875, -2.47955322265625e-05, -0.0007462501525878906, -0.0001201629638671875, -0.0013446807861328125, -0.002925872802734375, -0.0020160675048828125, -2.09808349609375e-05, -6.687641143798828e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.00543212890625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.00055694580078125, -2.3841855067985307e-07, -0.08556365966796875, -0.0001678466796875, -5.7220458984375e-06, -0.10610103607177734, -1.9073486328125e-06, -0.0001316070556640625, 0.0, -6.4373016357421875e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -9.775161743164062e-06, -0.0001811981201171875, -0.19674110412597656, -1.33514404296875e-05, -0.0001277923583984375, -3.0517578125e-05, -0.0002956390380859375, -0.00011444091796875, -5.7220458984375e-06, 0.0, -0.0042514801025390625, 0.0, 0.0, 0.0, -0.12221705913543701, -2.622604142743512e-06, -0.46707671880722046, -7.62939453125e-06], "score": -2.7075886839148993, "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "PowerWordShield", "body": [{"hole8": {"_type": "Lambda", "body": {"_type": "BoolOp", "values": [{"_type": "Compare", "left": {"_type": "Template36", "hole1": "calculate_attack", "hole0": {"_type": "Name", "id": "target"}}, "ops": [{"_type": "LtE"}], "comparators": [{"_type": "Num", "n": 2}]}, {"_type": "Template36", "hole1": "spell_targetable", "hole0": {"_type": "Name", "id": "target"}}], "op": {"_type": "And"}}, "args": {"_type": "Template21", "hole0": "target"}}, "hole4": "target_func", "hole1": 1, "hole6": "find_minion_spell_target", "_type": "Template0", "hole2": "PRIEST", "hole3": "FREE", "hole5": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}, "hole0": "Power <UNK> Shield", "hole7": "filter_func"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Expr", "value": {"_type": "Template31", "hole2": 4, "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}, "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power <UNK> Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target, filter_func=lambda target: target.\n            calculate_attack() <= 2 and target.spell_targetable())\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n", "choice_history": [69, 133, 249, 78, 112, "Power", "Word", "Shield", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Power", " ", "<UNK>", " ", "Shield", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "FREE", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "filter_func", "<EOS>", 18, 127, 0, 177, "target", "<EOS>", 15, 106, 2, 238, 40, 113, 31, 195, 21, 134, "target", "<EOS>", "calculate_attack", "<EOS>", 234, 11, 237, 46, 139, "+2", "<EOS>", 60, 195, 21, 134, "target", "<EOS>", "spell_targetable", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"score_history": [-5.7220458984375e-06, -0.000667572021484375, -8.713819261174649e-05, -1.1920928244535389e-07, -3.576244489522651e-05, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.09832096099853516, -0.0002880096435546875, 0.0, -4.0650356822879985e-05, 0.0, 0.0, 0.0, -1.311301275563892e-06, -0.06535053253173828, 0.0, -0.004514813423156738, 0.0, -2.622604142743512e-06, 0.0, -0.0002679824538063258, 0.0, 0.0, -9.72747802734375e-05, -0.000518798828125, -2.0265579223632812e-06, -3.576278118089249e-07, -0.00021312326134648174, -2.3841855067985307e-07, -0.0014138221740722656, -3.814697265625e-06, -0.000362396240234375, -1.71661376953125e-05, -2.3365017113974318e-05, -4.220008850097656e-05], "score": -0.17228576807845997, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 5, "hole0": 3}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "ALL", "hole3": "FREE", "hole1": 4, "hole0": "Sen'jin Shieldmasta"}], "hole3": "create_minion", "hole0": "Sen'jinShieldmasta"}, "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "choice_history": [70, 147, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"score_history": [-7.05718994140625e-05, -5.7220458984375e-05, -7.152555099310121e-07, -1.07287787614041e-05, -2.9802276912960224e-06, -9.178387699648738e-06, -1.01327859738376e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.07172966003417969, -3.24249267578125e-05, -3.576278118089249e-07, -3.1113624572753906e-05, -2.861018856492592e-06, 0.0, -0.00023877620697021484, -4.529942543740617e-06, -0.6510269641876221, 0.0, -0.0002422332763671875, 0.0, -0.00069427490234375, 0.0, -3.457069396972656e-05, -1.9073486328125e-06, -0.0001659393310546875, -3.814697265625e-06, -3.933906555175781e-06, -1.5258699932019226e-05, -0.0001811981201171875, -1.71661376953125e-05, -3.814697265625e-06, -2.288818359375e-05, -5.7220458984375e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.5616416931152344e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.0049076080322265625, -4.76837158203125e-05, -5.91278076171875e-05, -3.814697265625e-06, -0.05254936218261719, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0001354217529296875, 0.0, -0.001232743263244629, 0.0, -0.002298073610290885, 0.0, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -8.58306884765625e-05, -3.62396240234375e-05, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, 0.0, -8.749961125431582e-05, 0.0, -0.0008196823764592409, -1.1920928244535389e-07, -0.0001277923583984375, -1.9073486328125e-06, -4.38690185546875e-05, 0.0], "score": -0.7873005420239494, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Template37", "hole2": [{"_type": "Template31", "hole2": 3, "hole1": "effective_spell_damage", "hole0": {"_type": "Name", "id": "player"}}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "ROGUE", "hole3": "FREE", "hole1": 1, "hole0": "Sinister Strike"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "SinisterStrike"}, "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "choice_history": [70, 149, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "3", "<EOS>", 44, 134, "self", "<EOS>"]}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score_history": [-0.001979827880859375, -4.38690185546875e-05, -3.814697265625e-06, -8.392333984375e-05, -9.5367431640625e-06, -9.763074922375381e-05, -0.0002361257211305201, -1.9073486328125e-06, -3.814697265625e-06, -4.38690185546875e-05, 0.0, -6.568430399056524e-05, -6.675719760096399e-06, -0.0002384185791015625, -0.0032062530517578125, -0.00107574462890625, -1.1086463018727954e-05, -1.9073486328125e-06, -8.07046890258789e-05, -2.861018856492592e-06, -0.1461474895477295, 0.0, -0.03653120994567871, 0.0, -0.008600473403930664, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -0.000362396240234375, -1.9073486328125e-06, -0.10730743408203125, -7.748603820800781e-06, -0.0006574392318725586, 0.0, -0.16191673278808594, -0.07290363311767578, -0.07640267163515091, -0.8378583192825317, -0.2115747183561325, -0.0002549832279328257, -3.576278118089249e-07, -0.006363868713378906, -0.0005893707275390625, -1.1563277439563535e-05, -2.4557026335969567e-05, -0.0001667598116910085, -2.3841855067985307e-07, -0.007321596145629883, -1.1444091796875e-05, -0.004982948303222656, -0.00760650634765625, -0.0027618408203125, -8.58306884765625e-06], "score": -1.6975820095102776, "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "Succubus", "body": [{"hole8": {"_type": "Template18", "hole2": "PlayerSelector", "hole0": "Battlecry"}, "hole4": "minion_type", "hole1": 2, "hole6": "DEMON", "_type": "Template0", "hole2": "HUNTER", "hole3": "FREE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole0": "Succubus", "hole7": "battlecry"}, {"_type": "Template7", "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 3, "hole0": 4}]}]}, "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY\n            .FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Battlecry(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3, taunt=True)\n", "choice_history": [69, 133, 249, 78, 112, "Succubus", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Succubus", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "FREE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "battlecry", "<EOS>", 25, 159, "Battlecry", "<EOS>", "Player", "Selector", "<EOS>", 96, 218, "4", "<EOS>", "3", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"score_history": [-5.7220458984375e-06, -0.0069675445556640625, -0.0020927926525473595, -5.960462772236497e-07, -1.4305104514278355e-06, -2.3841855067985307e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.047080039978027344, -0.007818222045898438, -9.34600830078125e-05, -3.814697265625e-05, -5.948377656750381e-05, -1.9073486328125e-06, -0.0001125335693359375, 0.0, -0.25632286071777344, -0.0001621246337890625, -2.86102294921875e-05, -3.576278118089249e-07, -0.0014632679522037506, -3.576214658096433e-05, -2.0265579223632812e-06, -9.1552734375e-05, 0.0, -0.00021587434457615018, -9.5367431640625e-06, -9.5367431640625e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, -3.635883331298828e-05, 0.0, -0.001761436345987022, 0.0, -5.7220458984375e-06, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.00013363361358642578, 0.0, -0.00072479248046875, -3.814697265625e-06, -5.841255187988281e-06, -3.4570680327306036e-06, -7.62939453125e-06, 0.0, -1.33514404296875e-05, 0.0, -0.00077056884765625, -0.0001621246337890625, -0.6009464263916016, -1.71661376953125e-05, -7.867813110351562e-06, -1.9073486328125e-06, -0.0013256072998046875, 0.0, -0.000476837158203125, -0.00098419189453125, -1.9073486328125e-05, -8.344642310476047e-07, -2.3841855067985307e-07, -1.1345706298016012e-05, -4.768370445162873e-07], "score": -0.9301869199371708, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 7, "hole0": 7}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "War Golem"}, {"_type": "Num", "n": 7}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"attr": "DRAGON", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "WarGolem"}, "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "choice_history": [70, 147, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "War", " ", "Golem", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "7", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"score_history": [-2.47955322265625e-05, -5.53131103515625e-05, -0.00034486630465835333, -0.0003032684326171875, -3.814689989667386e-06, -3.814697265625e-06, 0.0, -2.288818359375e-05, -0.001277923583984375, -0.000164031982421875, -1.9073486328125e-05, 0.0, -7.104873657226562e-05, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.001560211181640625, -4.57763671875e-05, -1.71661376953125e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-05, -1.1444091796875e-05, -0.00017845425463747233, -2.1457672119140625e-06, -2.288818359375e-05, -7.62939453125e-06, -2.09808349609375e-05, -8.58306884765625e-05, -0.0001413821300957352, 0.0, -0.0011206865310668945, 0.0, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00612640380859375, 0.0, -5.7220458984375e-06, -0.0009555816650390625, -0.0002994537353515625, -0.007769584655761719, 0.0, -3.71930145774968e-05, 0.0, -1.5854762750677764e-05, 0.0, -0.0002994537353515625, -0.45806121826171875, -7.82012939453125e-05, -1.1086401173088234e-05, -1.9073486328125e-06, -0.0001163482666015625, -3.576278118089249e-07, -5.1020575483562425e-05, -5.960462772236497e-07, -3.0517578125e-05, -0.000217437744140625, -0.5157308578491211, -0.049654483795166016, -0.29030418395996094, 0.0, -1.1444091796875e-05, -0.061013221740722656, -3.814697265625e-05, -3.814697265625e-06, -7.62939453125e-06, -0.006900429725646973, -1.728534698486328e-05, 0.0, -0.0003910064697265625, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.02075016498565674, 0.0, -0.37913990020751953, 0.0, -2.47955322265625e-05, -0.0001773834228515625, -0.16513824462890625, -0.011765003204345703, 0.0, 0.0, -0.4556884765625, -0.001312255859375, -0.03753165155649185, -1.9073486328125e-06, -0.003127455711364746, -1.9311904907226562e-05, -1.9073486328125e-06], "score": -2.478462246754809, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template30", "hole2": 2, "hole3": [{"_type": "Template20", "hole2": [{"_type": "Template19", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}], "hole0": "Give"}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"attr": "PIRATE", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}], "hole0": "MinionDied"}], "hole1": 4, "hole0": "Minion"}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "Acidmaw"}, "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.\n            PIRATE)), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [70, 147, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Acidmaw", "<EOS>", 46, 139, "7", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 244, 66, 175, "Minion", "Died", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score_history": [-5.7220458984375e-06, -0.0003643035888671875, -1.6093124941107817e-05, -3.576277322281385e-06, -1.0490358363313135e-05, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, -0.007045745849609375, -0.04417991638183594, -1.33514404296875e-05, -1.9073486328125e-06, -2.4556857169955038e-05, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -0.6057310104370117, -8.96453857421875e-05, -0.00057220458984375, 0.0, -1.6569983927183785e-05, -1.52587890625e-05, 0.0, -0.0009434801759198308, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -0.0018051862716674805, 0.0, -1.9073486328125e-06, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -2.6702880859375e-05, 0.0, -9.167194366455078e-05, 0.0, -0.0005340576171875, -2.288818359375e-05, -2.86102294921875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -0.000865936279296875, -3.814697265625e-06, -0.05588531494140625, 0.0, -3.445148468017578e-05, 0.0, -0.21989154815673828, 0.0, -1.33514404296875e-05, -0.0019321441650390625, -2.6702880859375e-05, -1.919269561767578e-05, -1.1920922133867862e-06, -2.6345251171733253e-05, 0.0, -0.010855317115783691, 0.0, -0.000247955322265625, -5.7220458984375e-06, -1.9431114196777344e-05, 0.0], "score": -0.9515317059383435, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 2, "hole0": 4}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "Boar"}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "choice_history": [70, 147, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Boar", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"score_history": [-4.1961669921875e-05, -0.0008640289306640625, -1.4901099348207936e-05, -0.002427220344543457, -6.198873961693607e-06, -0.0004690977220889181, -1.0728830375228426e-06, -3.814697265625e-06, -3.576278118089249e-07, -3.814697265625e-06, -0.06017017364501953, -0.00020599365234375, -5.0543556426418945e-05, -0.0002431862521916628, -0.00023627281188964844, -7.164478302001953e-05, -3.814697265625e-06, 0.0, -4.63191609014757e-05, -1.1920928244535389e-07, -0.10229671001434326, 0.0, -0.21146678924560547, -1.1920928244535389e-07, -0.0006504058837890625, -0.000102996826171875, -6.4849853515625e-05, -5.7220458984375e-06, -5.91278076171875e-05, -1.9073486328125e-05, -0.014537811279296875, 0.0, -2.1457672119140625e-06, 0.0, -0.0018368959426879883, 0.0, -1.71661376953125e-05, -0.013891220092773438, -2.6702880859375e-05, -2.026555193879176e-06, -3.099436753473128e-06, -0.000782509334385395, -1.1920928244535389e-07, -0.3634398877620697, 0.0, -0.000370025634765625, -1.9073486328125e-06, -9.28640365600586e-05, -6.198883056640625e-06], "score": -0.7745369109880258, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 2, "hole0": 2}], "_type": "Template1", "hole2": [{"hole4": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole1": 2, "_type": "Template11", "hole2": "DRUID", "hole3": "minion_type", "hole0": "Anodized Robo Cub"}], "hole3": "create_minion", "hole0": "AnodizedRoboCub"}, "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "choice_history": [70, 147, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "2", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"score_history": [-7.62939453125e-06, -8.392333984375e-05, -9.536738616588991e-07, -9.536697689327411e-06, -9.715084888739511e-05, -1.1920883480343036e-07, -1.7523756469017826e-05, -2.3841855067985307e-07, -1.1444091796875e-05, -0.000705718994140625, -0.0003948211669921875, -3.576278118089249e-07, -0.00013017631135880947, -1.4305104514278355e-06, 0.0, -9.5367431640625e-05, -0.00021753369946964085, -0.6794341802597046, 0.0, -0.04812144860625267, 0.0, -1.5020355931483209e-05, 0.0, -2.3365017113974318e-05, -2.86102294921875e-05, -1.52587890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.3589859008789062e-05, -0.05849647521972656, -0.00019073486328125, -5.7220458984375e-06, -6.4849853515625e-05, -1.9073486328125e-05, 0.0, 0.0, -2.741813204920618e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -3.266334533691406e-05, -9.5367431640625e-05, -0.3504219055175781, -0.0006618499755859375, -0.004708290100097656, -0.00046515464782714844, -0.004811286926269531, -0.0028371810913085938, -0.06569551676511765, -0.21528106927871704, -0.003017537295818329, -0.0011261999607086182, 0.0, -0.11021614074707031, -0.000362396240234375, -2.6702880859375e-05, 0.0, -0.579637885093689, 0.0, -0.09932231903076172, -0.000370025634765625, -0.0093841552734375, -0.008839607238769531, -2.288818359375e-05, -0.0014011666644364595, -7.62939453125e-06, -0.000972747802734375, -0.0008373260498046875, -0.10751394927501678, 0.0, -0.2657747268676758, -0.00048065185546875, -0.3545888364315033, -1.9073486328125e-06, -0.04706096649169922, -0.021749496459960938, -0.001094818115234375, -3.814697265625e-06, -0.0023651123046875, -2.47955322265625e-05, -0.0004316568374633789, -5.960462772236497e-07, -0.009474754333496094, -8.96453857421875e-05, -0.20239615440368652, -0.02944270148873329, -0.0004062652587890625, -0.000202178955078125, -0.023714065551757812, 0.0, -0.0023514030035585165, -3.4570680327306036e-06, -0.027760863304138184, -1.9073486328125e-06, -0.0019893646240234375, -0.0017795562744140625, -1.9073486328125e-06, -1.072883515007561e-05, -1.9073486328125e-05, -0.000865936279296875, -5.7220458984375e-06, -0.00023853778839111328, -4.291534423828125e-06, -0.0001354217529296875, -0.000659942626953125, -3.24249267578125e-05, 0.0, -0.00012016295659122989, -8.106231689453125e-06, -0.000640869140625, -0.0001239776611328125, -9.5367431640625e-06, -9.1552734375e-05, 0.0, -5.841255187988281e-06, 0.0, -0.0011616945266723633, -1.9073486328125e-06], "score": -3.3536185739745576, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "ImportFrom", "level": 0, "names": [{"_type": "alias", "name": "Burrowing<UNK>"}], "module": "hearthbreaker.cards.minions.druid"}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"_type": "Template39", "hole0": "explodes"}, "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"_type": "Template37", "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}], "hole1": "summon", "hole0": {"_type": "Name", "id": "<UNK>"}}], "iter": {"_type": "List", "elts": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}, {"_type": "Num", "n": 2}]}}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "ALL", "hole3": "EPIC", "hole1": 0, "hole0": "Burrowing Mine"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "BurrowingMine"}, "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        from hearthbreaker.cards.minions.druid import Burrowing<UNK>\n        for i in [0, 2, 2]:\n            <UNK> = explodes()\n            <UNK>.summon(player, game, len(player.minions))\n", "choice_history": [70, 149, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Burrowing", " ", "Mine", "<EOS>", "0", "<EOS>", "ALL", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 83, 122, "hearthbreaker.cards.minions.druid", "<EOS>", 228, 223, "Burrowing", "<UNK>", "<EOS>", "0", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 19, 129, 239, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 46, 139, "2", "<EOS>", 250, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 33, 205, "explodes", "<EOS>", 93, 196, 21, 134, "<UNK>", "<EOS>", "summon", "<EOS>", 239, 44, 134, "player", "<EOS>", 44, 134, "game", "<EOS>", 39, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>"]}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"score_history": [-0.16250228881835938, -0.000209808349609375, -9.5367431640625e-06, -9.72747802734375e-05, -9.5367431640625e-06, -1.7404405298293568e-05, -0.002008922165259719, -5.340576171875e-05, -2.6702880859375e-05, -4.9591064453125e-05, -1.5377907402580604e-05, -3.933906555175781e-06, 0.0, -7.05718994140625e-05, -0.000164031982421875, -0.0002918243408203125, -2.2172682292875834e-05, -0.00010120868682861328, -1.1920928244535389e-07, -8.58306884765625e-06, -0.5926283597946167, -0.000133514404296875, -0.051970839500427246, 0.0, -0.001555323600769043, -5.161762237548828e-05, -3.814697265625e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.0006008148193359375, -5.7220458984375e-06, -0.008902549743652344, -0.00012969970703125, -0.019013404846191406, 0.0, -0.00034332275390625, -0.0003833770751953125, -0.2895417809486389, 0.0, -0.003101348876953125, -7.62939453125e-06, -0.0040340423583984375, -1.9073486328125e-06, -3.814697265625e-05, -1.33514404296875e-05, -0.0008869171142578125, -2.86102294921875e-05, -0.003070831298828125, 0.0, -0.0002155303955078125, -0.004154205322265625, -5.7220458984375e-06, -2.47955322265625e-05, -1.1444091796875e-05, -4.172325134277344e-06, -0.000247955322265625, -0.00012969970703125, -8.20159912109375e-05, -0.0041866302490234375, -3.24249267578125e-05, -1.52587890625e-05, 0.0, -0.0002957582473754883, 0.0, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, 0.0, -4.5299530029296875e-06, -1.52587890625e-05, -8.392333984375e-05, -7.05718994140625e-05, -0.0002155303955078125, -1.1444091796875e-05, -0.000400543212890625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0006151199340820312, -1.1920928244535389e-07, -0.0013772249221801758, -1.9073486328125e-06, 0.0, -0.000759124755859375, -9.5367431640625e-06, -6.67572021484375e-05, -7.62939453125e-06, -1.9073486328125e-05, 0.0, -0.00020229618530720472, 0.0, -0.004864593502134085, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0], "score": -1.1608427414684996, "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "name": "Crackle", "body": [{"hole8": {"_type": "Num", "n": 1}, "hole4": "target_func", "hole1": 2, "hole6": "find_spell_target", "_type": "Template0", "hole2": "MAGE", "hole3": "COMMON", "hole5": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}, "hole0": "Crackle", "hole7": "overload"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Template37", "hole2": [{"_type": "Template31", "hole2": 6, "hole1": "effective_spell_damage", "hole0": {"_type": "Name", "id": "player"}}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}]}, "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "choice_history": [69, 133, 249, 78, 112, "Crackle", "<EOS>", 237, 44, 134, "Spell", "Card", "<EOS>", 250, 85, 146, "Crackle", "<EOS>", "2", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 139, "1", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "6", "<EOS>", 44, 134, "self", "<EOS>"]}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"score_history": [-5.7220458984375e-05, -9.5367431640625e-05, -3.576278118089249e-07, -1.0728830375228426e-06, -5.173549288883805e-05, -1.192074705613777e-07, -7.295430987142026e-05, -1.7881377516459906e-06, -5.7220458984375e-06, -0.00025177001953125, -0.0016574859619140625, -7.62939453125e-06, 0.0, -1.2397711543599144e-05, 0.0, -0.00025451165856793523, -1.9073486328125e-06, -0.010471343994140625, -0.000476837158203125, -1.9073486328125e-06, -1.4185804502631072e-05, -4.172325134277344e-05, -6.079665126890177e-06, 0.0, -1.33514404296875e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -0.0001659393310546875, 0.0, -3.814697265625e-06, 0.0, -0.0003535747528076172, 0.0, -0.00489461375400424, 0.0, -2.86102294921875e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -7.963180541992188e-05, 0.0, -0.0002193450927734375, -7.62939453125e-06, -0.00022530555725097656, -3.576278118089249e-07, -0.0030727386474609375, -0.0001354217529296875, -0.0001010894775390625, -0.00032699108123779297, -8.344646857949556e-07, -0.000797271728515625, -9.5367431640625e-06, -5.340576171875e-05, 0.0, -7.62939453125e-06, 0.0, -0.00370025634765625, -1.1444091796875e-05, -0.0001437664031982422, -5.7220458984375e-06, -0.005990147590637207, 0.0, -7.987022399902344e-06, 0.0, -1.9550323486328125e-05, 0.0, -4.57763671875e-05, -7.62939453125e-06, -2.503394853192731e-06, -1.8834924048860557e-05, -0.023637771606445312, -2.288818359375e-05, -0.0001239776611328125, -0.003414154052734375, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.480901796137914e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.00015556812286376953, -3.814697265625e-06, -1.609325045137666e-05, -1.9073486328125e-06, -0.04555320739746094, -5.7220458984375e-06, -0.009990692138671875, -1.1444091796875e-05, -0.0001354217529296875, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -0.08259010314941406, 0.0, -0.01235113199800253, 0.0], "score": -0.21210727330787194, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Expr", "value": {"_type": "Template31", "hole2": 1, "hole1": "increase_health", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "hole3": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "arg": "target_func"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "EmergencyCoolant"}, "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(1)\n", "choice_history": [70, 149, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Emergency", " ", "Coolant", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"score_history": [-0.0005340576171875, -0.0002536773681640625, -0.011325004510581493, -2.7656173188006505e-05, -7.152551916078664e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -2.3841855067985307e-07, -9.5367431640625e-06, -0.0012865066528320312, -0.000194549560546875, 0.0, -5.042552947998047e-05, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -0.0003114938735961914, 0.0, -0.0002665519714355469, 0.0, -0.0001010894775390625, -2.09808349609375e-05, -1.9073486328125e-05, -3.814697265625e-06, -0.000148773193359375, -1.9073486328125e-06, -0.0005702972412109375, 0.0, -7.033347174001392e-06, -1.9073486328125e-06, -0.0026755332946777344, 0.0, -7.2479248046875e-05, -0.0014553070068359375, -4.00543212890625e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.2397752470860723e-05, -3.3378591979271732e-06, -0.08340668678283691, 0.0, -0.003025054931640625, -1.52587890625e-05, -0.000110626220703125, -1.9073486328125e-06], "score": -0.10596871615131676, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 4, "hole0": 1}], "_type": "Template1", "hole2": [{"hole4": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole1": 3, "_type": "Template10", "hole2": "COMMON", "hole3": "minion_type", "hole0": "Flying Machine"}], "hole3": "create_minion", "hole0": "FlyingMachine"}, "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "choice_history": [70, 147, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"score_history": [-0.0016698837280273438, -8.392333984375e-05, -3.4332275390625e-05, -8.0108642578125e-05, -2.86102294921875e-05, -1.1205610462639015e-05, -1.1920928244535389e-07, -3.814689989667386e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.00011217589781153947, -3.647804260253906e-05, -1.1920928244535389e-07, -0.0004291534423828125, -0.00049591064453125, -0.000270843505859375, -5.960462772236497e-07, -0.0001635509979678318, -2.777576446533203e-05, -1.9073486328125e-06, -0.0006324054556898773, -1.8119681044481695e-05, -0.500551700592041, 0.0, -0.0016595105407759547, 0.0, -0.00023603206500411034, -1.1920928244535389e-07, -0.0001010894775390625, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.04204273223876953, 0.0, -0.0001517527998657897, 0.0, -0.018509864807128906, -0.119842529296875, -0.07101941108703613, -0.0008327958639711142, -3.814697265625e-06, -0.049759864807128906, -0.019209861755371094, -0.002579569350928068, -0.004362344741821289, 0.0, -5.7220458984375e-06, -0.1377096176147461, -0.0003757476806640625, -1.9073486328125e-05, -1.1444091796875e-05, -0.07891297340393066, -1.7523765563964844e-05, -1.33514404296875e-05, -0.08221149444580078, -0.000217437744140625, -0.13861462473869324, 0.0, -0.022809982299804688, -0.0002002716064453125, -0.37138962745666504, -0.0003216001787222922, -1.1920928244535389e-07, -0.06255865097045898, -0.0007508992566727102, -9.5367431640625e-06, -0.07061328738927841, -9.941700409399346e-05, 0.0, -0.07372093200683594, -6.67572021484375e-05, -2.4795448553049937e-05, 0.0, -0.0005871057510375977, -1.1920928244535389e-07], "score": -1.8762547495123485, "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "GoblinAuto-Barber", "body": [{"hole8": {"_type": "Template18", "hole2": "PlayerSelector", "hole1": [{"_type": "Template25", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template26", "hole1": "EnemyPlayer", "hole0": "HeroSelector"}]}], "hole0": "ChangeAttack"}], "hole0": "Give"}, "hole4": "minion_type", "hole1": 2, "hole6": "MECH", "_type": "Template0", "hole2": "HUNTER", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole0": "Goblin Auto-Barber", "hole7": "battlecry"}, {"_type": "Template8", "hole1": 2, "hole0": 3}]}]}, "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(Attribute('<UNK>',\n            HeroSelector(EnemyPlayer()))))), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "choice_history": [69, 133, 249, 78, 112, "Goblin", "Auto-Barber", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 162, "Give", "<EOS>", 237, 52, 181, "Change", "Attack", "<EOS>", 237, 39, 110, 21, 134, "Attribute", "<EOS>", 238, 47, 143, "<UNK>", "<EOS>", 53, 182, "Hero", "Selector", "<EOS>", "Enemy", "Player", "<EOS>", "Player", "Selector", "<EOS>", 97, 219, "3", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"score_history": [-2.6702880859375e-05, -0.0002288818359375, -9.965400386136025e-05, -1.311301275563892e-06, -3.790854680119082e-05, -1.5497195136049413e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, -0.001300811767578125, -0.0001163482666015625, -3.24249267578125e-05, -2.86102294921875e-05, -3.123283386230469e-05, 0.0, -2.110004425048828e-05, 0.0, -0.0001201629638671875, -3.62396240234375e-05, -0.0004787445068359375, -2.264974000354414e-06, -0.0001710610231384635, -1.5616416931152344e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -3.6954832467017695e-05, -4.6491513785440475e-06, -3.814697265625e-06, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.0848039892152883e-05, 0.0, -0.12289440631866455, -4.00543212890625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.003975868225097656, -0.00017547607421875, -0.17612862586975098, -3.576278118089249e-07, -0.00035035598557442427, 0.0, -0.00018453216762281954, 0.0, -0.0001010894775390625, -4.9591064453125e-05, -4.1961669921875e-05, -8.344646857949556e-07, -4.9591064453125e-05, -1.1205673217773438e-05, -2.622600959512056e-06, -7.854029536247253e-05, -8.344646857949556e-07, -4.9591064453125e-05, -5.91278076171875e-05, -0.5206613540649414, -0.0022349823266267776, -0.0005254744901321828, -2.288818359375e-05, -3.814697265625e-06, -0.0004367828369140625, -0.019181251525878906, -0.3834315538406372, -0.0005452880286611617, -3.814697265625e-06, -0.7365789413452148, -0.0002346038818359375, -0.5994905829429626, -9.536738616588991e-07, -0.03367852419614792, -5.53131103515625e-05, -5.7220458984375e-06, -0.008040428161621094, -0.003643035888671875, -3.24249267578125e-05, -0.025436878204345703, -0.0002644938649609685, -0.0002689361572265625, -3.814697265625e-06, -0.011308062821626663, -0.00045204159687273204, -1.1920928244535389e-07], "score": -2.65370576487458, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template30", "hole2": 2, "hole3": [{"_type": "Template20", "hole2": [{"hole5": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "RandomPicker"}, "arg": "picker"}], "_type": "Template19", "hole3": "MinionSelector", "hole1": [{"_type": "Num", "n": 1}], "hole0": "Heal"}], "hole0": "TurnEnded"}], "hole1": 2, "hole0": "Minion"}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "IronSensei"}, "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=RandomPicker())))])\n", "choice_history": [70, 147, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Iron", " ", "Sensei", "<EOS>", 46, 139, "3", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"score_history": [-1.71661376953125e-05, -0.0001220703125, -0.14640387892723083, -0.00010335445404052734, -2.455681169521995e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.0051441192626953125, -0.07653999328613281, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, 0.0, -0.002109527587890625, -5.7220458984375e-06, -3.814697265625e-06, -2.0265579223632812e-06, -5.9604644775390625e-06, -3.814697265625e-06, 0.0, -0.00013363365724217147, -2.2649765014648438e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -3.814697265625e-06, -0.00013875961303710938, 0.0, -0.2454547882080078, 0.0, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.008897781372070312, -1.9073486328125e-06, -4.00543212890625e-05, -0.23671627044677734, -4.57763671875e-05, -0.48302268981933594, 0.0, -5.7220440794480965e-06, 0.0, -6.318092346191406e-06, 0.0, -2.288818359375e-05, -0.00615692138671875, -4.57763671875e-05, -2.1457672119140625e-06, -5.125986263010418e-06, -2.3484179109800607e-05, -1.1920928244535389e-07, -0.006754279136657715, 0.0, -2.09808349609375e-05, -0.6444969177246094, -6.139278411865234e-05, -1.33514404296875e-05, -2.86102294921875e-05, -0.0823202133178711, -0.0001220703125, -0.40330198407173157, 0.0, -0.043987274169921875, -1.1444091796875e-05, -0.4827337861061096, -7.748603820800781e-06, -9.5367431640625e-06], "score": -2.8751946088409213, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "auras", "hole3": {"_type": "Template38", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}], "hole0": "Aura"}, "hole1": 7, "hole0": 9}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "Mal'Ganis"}, "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(2), WeaponSelector())])\n", "choice_history": [70, 147, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mal'Ganis", "<EOS>", 46, 139, "9", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>"]}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"score_history": [-0.000270843505859375, -6.866455078125e-05, -0.0004316844861023128, -0.011289441026747227, -0.10365705192089081, -0.00018131721299141645, -4.005352093372494e-05, -2.47955322265625e-05, 0.0, -1.52587890625e-05, -0.001056671142578125, -0.0001068115234375, -0.0004901885986328125, -1.9073486328125e-06, -8.308887481689453e-05, 0.0, -8.225440979003906e-06, 0.0, -2.288818359375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -2.51529327215394e-05, -0.00010347366333007812, -3.8146616134326905e-05, -8.976459503173828e-05, -3.2543666748097166e-05, 0.0, -0.0001811981201171875, -1.9073486328125e-06, -4.005425580544397e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.00018310546875, -4.994837581762113e-05, 0.0, -0.10129451751708984, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -0.0012531280517578125, -0.000133514404296875, -0.09457540512084961, -3.576278118089249e-07, -0.0001330372178927064, -1.9073486328125e-06, -3.9696584281045943e-05, 0.0, -1.9073486328125e-05, -0.000171661376953125, -2.09808349609375e-05, -7.867782187531702e-06, -3.814697265625e-05, -1.9073486328125e-06, -7.152555099310121e-07, -2.7298927307128906e-05, -1.4305104514278355e-06, -1.9073486328125e-06, -2.86102294921875e-05, -0.006023406982421875, -0.006778542883694172, -0.011389732360839844, 0.0, -0.000682830810546875, -0.0028553009033203125, -0.4976179599761963, -1.9073486328125e-06, -1.9073486328125e-06, -0.0048007965087890625, -1.71661376953125e-05, -0.16403700411319733, -0.1386582851409912, -0.00922393798828125, -5.7220458984375e-06, 0.0], "score": -1.1584794452742244, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template30", "hole2": 4, "hole3": [{"_type": "Template20", "hole2": [{"_type": "Template19", "hole3": "PlayerSelector", "hole1": [{"_type": "Template39", "hole0": "Black"}], "hole0": "Summon"}], "hole0": "Damaged"}], "hole1": 1, "hole0": "Minion"}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "hole3": [{"_type": "Template35", "hole0": "MECH"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "MistressOfPain"}, "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Summon(\n            Black()), PlayerSelector()))])\n", "choice_history": [70, 147, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Mistress", " ", "of", " ", "Pain", "<EOS>", 46, 139, "2", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 67, 194, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 244, 66, 173, "Damaged", "<EOS>", 237, 50, 169, "Summon", "<EOS>", 237, 63, 205, "Black", "<EOS>", "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"score_history": [-1.9073486328125e-06, -0.0006122589111328125, -0.00047041327343322337, -0.0001521069061709568, -5.960446742392378e-06, -0.00013744831085205078, -3.933906555175781e-06, -1.33514404296875e-05, -0.037998199462890625, -0.000102996826171875, -4.768370445162873e-07, 0.0, -1.7051275790436193e-05, -1.1920928244535389e-07, -0.18826007843017578, -5.7220458984375e-06, -0.0003739595413208008, 0.0, -0.033046841621398926, -0.011922836303710938, -1.5497189451707527e-05, -1.9073486328125e-06, -0.0003108978271484375, -0.016611099243164062, -0.004075050354003906, -1.680836794548668e-05, -3.802703940891661e-05, -0.0062122344970703125, 0.0, -0.0002460191026329994, 0.0, -0.0036411285400390625, -0.0006008148193359375, -0.7868709564208984, -0.4330555200576782, -0.0021649599075317383, 0.0, -0.000362396240234375, -0.19038963317871094, -9.5367431640625e-06, -1.52587890625e-05, -3.814697265625e-06, -0.1578531265258789, -0.0035791397094726562, -5.7220458984375e-06, -0.006962776184082031, -0.6303281784057617, -0.0001544952392578125, -0.011043346486985683, -0.08821932226419449, -0.0005700166220776737, -1.71661376953125e-05, 0.0, -0.0365980863571167, -0.0010080337524414062, -1.9073486328125e-06, -0.06838417053222656, -1.009511947631836, -5.91278076171875e-05, -0.00019073486328125, -1.1920928244535389e-07, -0.0034160614013671875, 0.0, -0.023369191214442253, -5.340576171875e-05, -1.9073486328125e-06, -0.07250499725341797, -1.9073486328125e-06, -0.3917093276977539, -0.00043213367462158203, -2.50339189733495e-06, -5.7220458984375e-06, -0.09743690490722656, -0.040671348571777344, -7.43865966796875e-05, 0.0, -0.00746762752532959, -0.000732421875, -1.9073486328125e-06, -1.9073486328125e-06, -0.000606536865234375, -0.05010700225830078, -0.01764666475355625, -1.3589859008789062e-05, -1.1444091796875e-05, -7.62939453125e-06, -0.002369880210608244, -0.000652313232421875, 0.0, -5.53131103515625e-05, -0.018978118896484375, -3.4332275390625e-05, -0.01971900463104248, 0.0, -0.2561311721801758, -1.9073486328125e-06, -0.017735719680786133, -0.12109296768903732, -2.09808349609375e-05, -0.000152587890625, -0.009103775024414062, -0.000263214111328125, -0.45709240436553955, -3.075599670410156e-05, -0.0004673004150390625, -0.0002384185791015625, -0.12687279284000397, -1.1682510375976562e-05, -0.0006084442138671875, -0.3431692123413086, -0.007761955261230469, -1.71661376953125e-05, -7.62939453125e-06, -1.0947555303573608, -0.6433372497558594, 0.0, -0.0004024505615234375, -0.056797027587890625, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.942230224609375, -3.814697265625e-06, -0.5685434341430664, 0.0], "score": -9.12720330044327, "model_output": {"hole4": "player", "hole1": "WeaponCard", "hole6": [{"_type": "Template30", "hole2": 2, "hole3": [{"_type": "Template20", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "keywords": [{"_type": "keyword", "value": {"_type": "Num", "n": 0}, "arg": "value"}], "args": [{"_type": "Template29", "hole3": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "IsMinion"}, "arg": "condition"}], "hole1": {"_type": "Name", "id": "CardSelector"}, "hole0": "Count"}]}], "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionSelector"}, "args": [{"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}], "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}, "hole0": "ChangeTarget"}, {"_type": "Template39", "hole0": "EnemyPlayer"}, {"_type": "Template39", "hole0": "UserPicker"}]}], "hole0": "TurnEnded"}], "hole1": 3, "hole0": "Weapon"}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "PRIEST", "hole3": "RARE", "hole1": 3, "hole0": "Powermace"}], "hole3": "create_weapon", "hole0": "Powermace"}, "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, effects=[Effect(TurnEnded(ActionTag(\n            ChangeTarget(CharacterSelector(Null)), EnemyPlayer(),\n            UserPicker())), GreaterThan(Count(CardSelector(condition=\n            IsMinion())), value=0)), ActionSelector(MINION_TYPE.BEAST)])\n", "choice_history": [70, 147, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Powermace", "<EOS>", "3", "<EOS>", "PRIEST", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 176, "Turn", "Ended", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 237, 45, 136, "Null", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 237, 39, 111, 21, 134, "Greater", "Than", "<EOS>", 237, 55, 185, "Count", "<EOS>", 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Minion", "<EOS>", 244, 68, 227, "value", "<EOS>", 23, 139, "0", "<EOS>", 237, 39, 110, 21, 134, "Action", "Selector", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"]}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"score_history": [-0.0006494522094726562, -0.0001201629638671875, -4.38690185546875e-05, -0.00106048583984375, -4.38690185546875e-05, -0.0001565095444675535, -5.722029527532868e-06, -0.00016926287207752466, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.1800904758274555e-05, -3.0994415283203125e-05, -5.841255187988281e-06, -0.0002384185791015625, -0.000644683837890625, -0.0008077621459960938, -6.9141146923357155e-06, -0.00013982891687192023, -2.861022494471399e-06, -0.0001354217529296875, -1.3947486877441406e-05, -1.7762025890988298e-05, -0.4313114881515503, 0.0, -3.826618194580078e-05, 0.0, -0.0007117986679077148, -5.960462772236497e-07, -0.000431060791015625, -5.7220458984375e-06, -0.0006313323974609375, -3.814697265625e-06, -0.001583099365234375, 0.0, -4.1961669921875e-05, 0.0, -0.003108978271484375, -0.6850185394287109, -0.015218233689665794, -0.006866061594337225, -0.000316619873046875, -0.0937948226928711, -0.0001659393310546875, -0.0010366252390667796, -2.145764938177308e-06, -0.00018118497973773628, -0.1051793098449707, -5.7220458984375e-06, -0.001371158054098487, 0.0, -0.001471385476179421, -3.814697265625e-06, -4.0531158447265625e-06, -0.0002288818359375, -2.6702880859375e-05, -1.71661376953125e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.00273895263671875, -6.818771362304688e-05, -1.9073486328125e-06, -5.53131103515625e-05, -1.1444091796875e-05, -1.1444091796875e-05, -3.4332275390625e-05, 0.0, -0.024845361709594727, 0.0, -0.0013332366943359375, 0.0, -0.016916275024414062, -0.00017547607421875, -7.510157047363464e-06, -2.3841855067985307e-07, -3.147123061353341e-05, -1.585470999998506e-05], "score": -1.3993824659712857, "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "ScrewjankClunker", "body": [{"hole8": {"_type": "Template18", "hole2": "MinionSelector", "hole3": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}], "hole1": [{"_type": "Template23", "hole2": 2, "hole1": "ChangeAttack", "hole0": "Buff"}], "hole0": "Give"}, "hole4": "minion_type", "hole1": 4, "hole6": "MECH", "_type": "Template0", "hole2": "HUNTER", "hole3": "RARE", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole0": "Screwjank Clunker", "hole7": "battlecry"}, {"_type": "Template8", "hole1": 5, "hole0": 2}]}]}, "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(\n            MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "choice_history": [69, 133, 249, 78, 112, "Screwjank", "Clunker", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 25, 164, "Give", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 237, 39, 110, 21, 134, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 97, 219, "2", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"score_history": [-0.0002689361572265625, -0.000720977783203125, -0.00033198707387782633, -0.006210010498762131, -0.0014814030146226287, -9.894339200400282e-06, -1.9907753085135482e-05, -1.9073486328125e-06, 0.0, -4.76837158203125e-05, -0.000621795654296875, -0.000553131103515625, -0.0013618315570056438, -3.0517578125e-05, -0.0014597177505493164, -0.00022125244140625, -1.6450881958007812e-05, 0.0, -0.0019055604934692383, -0.00011801023356383666, -0.00010490358545212075, -1.9073486328125e-06, -0.00016891906852833927, 0.0, -4.38690185546875e-05, -6.67572021484375e-05, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, -0.00031280517578125, 0.0, -4.649158654501662e-06, 0.0, -4.0531158447265625e-06, 0.0, -0.0001373291015625, -0.021633148193359375, -1.52587890625e-05, -3.933906555175781e-06, 0.0, -0.005404828116297722, -1.1920928244535389e-07, -0.0005514621734619141, -1.0728830375228426e-06, -0.000335693359375, -1.52587890625e-05, -0.0001239776611328125, -3.814697265625e-06, -0.00031447410583496094, -5.960462772236497e-07, -9.5367431640625e-06, -0.19958114624023438, -0.10555553436279297, -0.0003701011592056602, -2.4318669602507725e-05, -4.57763671875e-05, 0.0, -0.0006179485353641212, -0.07674503326416016, 0.0, -0.000286102294921875, -0.00025177001953125, -0.00014495849609375, -0.006261110305786133, -1.1444091796875e-05, -0.0020618438720703125, -0.0010614395141601562, -0.000339508056640625, -0.046616554260253906, -0.0002841949462890625, -0.009225249290466309, -0.007846047170460224, -1.9073486328125e-06, -0.04897769168019295, 0.0, -0.004372596740722656, -0.004408836364746094, -0.31776395440101624, -0.0011452726321294904, -0.0001506805419921875, -0.002170562744140625, 0.0, -0.0007177587249316275, -1.71661376953125e-05, 0.0], "score": -0.8817320906838901, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "deathrattle", "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template29", "hole3": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template34", "hole1": 2, "hole0": "ManaCost"}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}, "arg": "conditions"}], "hole1": {"_type": "Name", "id": "CardQuery"}, "hole0": "Summon"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole1": 7, "hole0": 5}], "_type": "Template1", "hole2": [{"hole4": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole1": 8, "_type": "Template10", "hole2": "LEGENDARY", "hole3": "minion_type", "hole0": "<UNK> Old Shredder"}], "hole3": "create_minion", "hole0": "<UNK>OldShredder"}, "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "choice_history": [70, 147, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 249, 86, 151, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 55, 185, "Summon", "<EOS>", 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"score_history": [-3.814697265625e-06, -0.0002307891845703125, -3.433175152167678e-05, -0.00023709802189841866, -3.2186455882765586e-06, 0.0, -1.1920928244535389e-07, -0.0009412765502929688, -0.012241363525390625, -0.27700042724609375, -1.752376374497544e-05, -2.4437842512270436e-05, -5.173683166503906e-05, -2.145764938177308e-06, -0.009688724763691425, -1.33514404296875e-05, -0.6216939091682434, -0.18081891536712646, -0.1536417007446289, -0.5680408477783203, -0.6534576416015625, -6.103515625e-05, -2.86102294921875e-05, 0.0, -6.67572021484375e-05, -0.007373809814453125, -1.9073486328125e-06, -0.08368682861328125, -2.288818359375e-05, -3.814697265625e-06, -0.0014314651489257812, -1.9073486328125e-06, -0.0001068115234375, -3.4332275390625e-05, -3.4332275390625e-05, -7.62939453125e-06, -0.0023040771484375, 0.0, -0.10674411058425903, -5.841255187988281e-06, -0.0006656646728515625, -1.9073486328125e-05, -0.018342018127441406, -0.00012052059173583984, -0.0029392242431640625, -3.24249267578125e-05, -0.2733449935913086, -9.5367431640625e-06, -0.09055423736572266, -5.7220458984375e-06, -0.07827189564704895, -1.1920928244535389e-07, -0.00048708339454606175, -1.9073486328125e-05, 0.0, -0.000324249267578125, -0.0036258697509765625, -1.9073486328125e-06, -0.008005142211914062, 0.0, -3.62396240234375e-05, -1.33514404296875e-05, -0.016671061515808105, -1.9073486328125e-06, -3.814697265625e-06, -7.271740287251305e-06, 0.0, -3.1709656468592584e-05, 0.0, -0.000583648681640625, -0.039005279541015625, -2.09808349609375e-05, -0.00010418891906738281, -2.3841855067985307e-07, -0.1782320737838745, -5.960462772236497e-07], "score": -3.3915406504570598, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 7, "hole0": 5}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "value": {"attr": "LIST", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_SOURCE"}}, "arg": "source"}, {"_type": "keyword", "value": {"_type": "Name", "id": "<UNK>"}, "arg": "source_list"}]}, {"_type": "Num", "n": 7}], "hole1": 6, "hole7": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}, "arg": "players"}], "_type": "Template6", "hole2": "LEGENDARY", "hole3": "AddCard", "hole5": "PlayerSelector", "hole0": "Toshley"}], "hole3": "create_minion", "hole0": "Toshley"}, "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=<UNK>), 7), PlayerSelector(\n            players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "choice_history": [70, 147, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 238, 39, 109, 21, 134, "Card", "Query", "<EOS>", 245, 68, 227, "source", "<EOS>", 13, 103, 21, 134, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 68, 227, "source_list", "<EOS>", 21, 134, "<UNK>", "<EOS>", 46, 139, "7", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"score_history": [-3.4332275390625e-05, -0.0005550384521484375, -0.00026580580743029714, -5.8293175243306905e-05, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -0.42378997802734375, -9.34600830078125e-05, 0.0, 0.0, -2.0623207092285156e-05, -2.3841855067985307e-07, -0.15894246101379395, 0.0, -5.9723843151004985e-05, -1.1920928244535389e-07, -0.002475738525390625, 0.0, -1.33514404296875e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -0.0029506683349609375, 0.0, -9.775161743164062e-06, 0.0, -0.00023651123046875, 0.0, -0.002552032470703125, -0.001953125, -1.1444091796875e-05, -0.0010457038879394531, -1.7881377516459906e-06, -0.0016870498657226562, 0.0, -0.03377509117126465, -1.1920928244535389e-07, -0.22136878967285156, -0.19762516021728516, -0.00031173229217529297, -1.3828277587890625e-05, -3.0517578125e-05, -0.0012187957763671875, -0.0009593963623046875, -0.7232248187065125, -9.536741345073096e-06, -0.029973983764648438, -3.814697265625e-06, -0.0086522763594985, -5.9604644775390625e-06, -3.0517578125e-05], "score": -1.8139867536884964, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "enrage", "hole3": {"_type": "Template38", "hole1": [{"_type": "Template32", "hole0": 1}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole0": "Aura"}, "hole1": 3, "hole0": 1}], "_type": "Template1", "hole2": [{"hole4": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole1": 1, "_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole0": "Warbot"}], "hole3": "create_minion", "hole0": "Warbot"}, "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "choice_history": [70, 147, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Warbot", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "1", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"score_history": [-3.814697265625e-06, -0.000530242919921875, -6.198873961693607e-06, -0.0001219492478412576, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0038852691650390625, -5.340576171875e-05, 0.0, -1.1920928244535389e-07, 0.0, -1.1920928244535389e-07, -0.00024700158974155784, 0.0, -0.0005657672882080078, 0.0, -2.1457672119140625e-06, -1.9073486328125e-06, -1.8596540030557662e-05, 0.0, -5.7220458984375e-06, -0.0002918243408203125, -3.814697265625e-06, -5.7578086853027344e-05, -3.576278118089249e-07, -0.20389175415039062, -7.688703772146255e-05, -0.11127650737762451, -1.1920928244535389e-07, -9.5367431640625e-06, -2.09808349609375e-05, -0.000148773193359375, -1.9073486328125e-06, -0.0002598762512207031, -2.1457672119140625e-06, -3.62396240234375e-05, -0.8502988815307617, -3.62396240234375e-05, -0.69381183385849, -3.766942609217949e-05, -0.046319715678691864, -0.6236193776130676, -0.002780914306640625, -1.9073486328125e-06, -0.0015708208084106445, -5.7220458984375e-06, -1.9073486328125e-06], "score": -2.5400093662409873, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "deathrattle", "hole3": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template26", "hole1": "Deathlord", "hole0": "Summon"}, {"_type": "Template39", "hole0": "PlayerSelector"}]}, "hole1": 8, "hole0": 2}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "ALL", "hole3": "RARE", "hole1": 3, "hole0": "Deathlord"}], "hole3": "create_minion", "hole0": "Deathlord"}, "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Summon(Deathlord()),\n            PlayerSelector()))\n", "choice_history": [70, 147, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 16, 110, 21, 134, "Deathrattle", "<EOS>", 238, 53, 182, "Summon", "<EOS>", "Deathlord", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"score_history": [-1.33514404296875e-05, -0.0001316070556640625, -0.0005509537877514958, -1.1920922133867862e-06, -1.573559347889386e-05, -2.3841855067985307e-07, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -0.00414276123046875, -2.86102294921875e-05, 0.0, -4.220008850097656e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -0.0009806156158447266, 0.0, -3.933906555175781e-06, 0.0, -3.278254735050723e-05, 0.0, -1.9073486328125e-06, -0.0006561279296875, -0.000152587890625, -3.933906555175781e-06, -1.1920928244535389e-07, -1.120566412282642e-05, 0.0, -0.04351997375488281, -5.7220458984375e-06, -0.000110626220703125, -0.00037384033203125, -9.34600830078125e-05, -9.34600830078125e-05, -7.05718994140625e-05, -0.001373291015625, -1.52587890625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.018770813941955566, -0.002366185188293457, -2.47955322265625e-05, -9.72747802734375e-05, -0.00054168701171875, -5.53131103515625e-05, -0.0001068115234375, -0.0018768310546875, -2.6702880859375e-05, -0.15037453174591064, -2.9444496249197982e-05, -0.05183601379394531, -0.00029754638671875, -5.91278076171875e-05, -1.9073486328125e-06, -0.008714675903320312, -8.440017700195312e-05, -5.7220458984375e-06, -0.0006046295166015625, -1.71661376953125e-05, -9.1552734375e-05, -6.866455078125e-05, 0.0, -0.015745162963867188, -1.9073486328125e-06, -9.655952453613281e-05, -0.2906646132469177, -4.38690185546875e-05], "score": -0.5950871984088835, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "auras", "hole3": {"_type": "Template38", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}, "op": {"_type": "USub"}}]}, {"_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "IsSpell"}, "arg": "condition"}]}], "hole0": "Aura"}, "hole1": 4, "hole0": 1}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord"}], "hole3": "create_minion", "hole0": "Nerub'arWeblord"}, "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-2), CardSelector(\n            condition=IsSpell()))])\n", "choice_history": [70, 147, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 39, 110, 21, 134, "Mana", "Change", "<EOS>", 237, 64, 222, 99, 23, 139, "2", "<EOS>", 39, 109, 21, 134, "Card", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Spell", "<EOS>"]}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"score_history": [-1.52587890625e-05, -0.0005645751953125, -0.001783451996743679, -5.7220440794480965e-06, -1.215934389620088e-05, -4.041112697450444e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.004322052001953125, -0.0002841949462890625, 0.0, -0.0031789850909262896, -0.0008870363235473633, 0.0, -1.5973915651557036e-05, 0.0, -8.332728612003848e-05, 0.0, -4.9591064453125e-05, 0.0, -0.0009836783865466714, 0.0, -1.33514404296875e-05, -0.00026702880859375, -3.0517578125e-05, -3.4570680327306036e-06, -3.099436753473128e-06, -0.010530747473239899, -3.576278118089249e-07, -0.13457250595092773, 0.0, -0.009319305419921875, -1.71661376953125e-05, -0.00232088565826416, -0.0006024837493896484], "score": -0.16991876795253802, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "spell_targetable", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 6, "hole0": 4}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight"}], "hole3": "create_minion", "hole0": "SpectralKnight"}, "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "choice_history": [70, 147, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 22, 135, "False", "<EOS>"]}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"score_history": [-3.814697265625e-06, -0.0001544952392578125, -4.60137271147687e-05, -2.3841855067985307e-07, -1.5854815501370467e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.033023834228515625, -0.7995152473449707, -1.1920928244535389e-07, -0.00013863694039173424, -2.3841855067985307e-07, 0.0, -3.814697265625e-06, -2.9802276912960224e-06, -0.042824503034353256, -1.8477414414519444e-05, -0.016450798138976097, -0.0006201728247106075, -0.011838912963867188, -0.66766357421875, -0.0003662109375, -0.28793084621429443, -0.006263199727982283, -0.18700607120990753, -4.649158654501662e-06, -5.960462772236497e-07, -0.000217437744140625, -0.000705718994140625, 0.0, -0.13435649871826172, 0.0, -5.7220458984375e-05, -8.58306884765625e-05, -0.008791327476501465, -5.722038622479886e-06, 0.0, -0.0013330630026757717, -1.9073486328125e-06, -7.37886075512506e-05, 0.0, -4.38690185546875e-05, -0.25470733642578125, -7.62939453125e-06, -3.814697265625e-06, -1.311301275563892e-06, -3.4332275390625e-05, -0.00012063252506777644], "score": -2.4544446744764485, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 5, "hole0": 3}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "Template39", "hole0": "Frozen"}], "hole1": 4, "hole7": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "BothPlayer"}, "arg": "players"}], "_type": "Template6", "hole2": "RARE", "hole3": "Silence", "hole5": "PlayerSelector", "hole0": "Wailing Soul"}], "hole3": "create_minion", "hole0": "WailingSoul"}, "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(Frozen()),\n            PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "choice_history": [70, 147, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Player", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"score_history": [-1.9073486328125e-06, -0.00023651123046875, -0.0005744237569160759, -3.576278118089249e-07, -0.00010859376925509423, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -0.0001506805419921875, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, 0.0, 0.0, -6.926112109795213e-05, -1.1920928244535389e-07, -8.320808410644531e-05, 0.0, -5.769727795268409e-05, 0.0, -0.00010048911644844338, 0.0, -2.6702880859375e-05, -0.0013217926025390625, -7.62939453125e-06, -0.000156402587890625, -1.0251946150674485e-05, 0.0, 0.0, -0.08917927742004395, -4.768370445162873e-07, -0.019636154174804688, -0.46692371368408203, -0.00014209747314453125, -1.9788731151493266e-05, -0.0009307861328125, -0.0014972686767578125, -0.0008449554443359375, -0.713499128818512, -9.179088920063805e-06, -0.0003032684326171875, -1.9073486328125e-06, -0.4493708312511444, -4.2557716369628906e-05, -0.00031363964080810547], "score": -1.7456694583385612, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "enrage", "hole3": {"_type": "Template38", "hole1": [{"_type": "Template32", "hole0": 2}, {"_type": "Template39", "hole0": "WeaponSelector"}], "hole0": "Aura"}, "hole1": 3, "hole0": 2}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker"}], "hole3": "create_minion", "hole0": "AmaniBerserker"}, "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(2), WeaponSelector())])\n", "choice_history": [70, 147, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 57, 191, "2", "<EOS>", 63, 205, "Weapon", "Selector", "<EOS>"]}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"score_history": [-3.814697265625e-06, -0.013956069946289062, -0.0008634176338091493, -5.960462772236497e-07, -6.830484198872e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -0.000118255615234375, -0.0001163482666015625, -6.67572021484375e-05, -1.1920928244535389e-07, -0.000125885009765625, 0.0, 0.0, -0.10991841554641724, -1.9073468138230965e-06, -0.5409435033798218, -9.5367431640625e-06, -0.004089588299393654, -1.9073486328125e-06, -1.3470649719238281e-05, -0.000141143798828125, -2.0265579223632812e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.0021152496337890625, -3.0517578125e-05, -3.099436753473128e-06, -8.20159912109375e-05, -3.0517578125e-05, -0.00023755589791107923, -0.004172563552856445, -6.6756979322235566e-06, -4.9591064453125e-05, -9.72747802734375e-05, -0.40393829345703125, -0.20756769180297852, -0.0023822784423828125, -0.0005207061767578125, -0.0049800872802734375, -0.2269124984741211, -5.91278076171875e-05, -0.00445556640625, -0.04679155349731445, -2.47955322265625e-05, -0.04158380255103111, 0.0, -0.00011444091796875, -0.0001773834228515625, -0.0001220703125, -0.0034589767456054688, -3.063678741455078e-05, -0.03028583526611328, -5.340576171875e-05, -0.0001506805419921875, -0.0002593994140625, -2.86102294921875e-05, -1.9073486328125e-06, -0.0006719824741594493, -0.0014867782592773438, -9.5367431640625e-06, -0.00638580322265625, -0.0004673004150390625, -0.0007572174072265625, -0.00959622859954834, -0.000286102294921875, -0.0017986297607421875, -0.026239395141601562, -0.0009714365005493164, -0.020406601950526237, -3.814697265625e-06, -0.0006561279296875, -0.0001888275146484375, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0021495819091796875, -2.09808349609375e-05, -0.022557616233825684, 0.0, -0.0007876157760620117, -5.14984130859375e-05, 0.0, 0.0, -0.030551910400390625, -0.0003566741943359375, -0.0026442999951541424, -1.1801719665527344e-05, -0.000171661376953125, -0.008706092834472656, -0.00067138671875, -1.1444091796875e-05, 0.0, -0.0238192081451416, -0.015039443969726562, -2.86102294921875e-05, -0.4647054672241211, -0.09288692474365234, -0.011407852172851562, -0.12105781584978104, -4.196160443825647e-05, -3.814697265625e-06, 0.0, -0.5788966417312622, -0.0025628311559557915, -0.03184795379638672, -0.0002002716064453125, -5.91278076171875e-05, -0.000270843505859375, -0.00022125244140625, -0.8312839865684509, -0.020900726318359375, -0.42338353395462036, -0.0003108978271484375, -0.0026397705078125, 0.0, -0.15233910083770752, -0.0003604888916015625, 0.0, -8.0108642578125e-05, -0.01900482177734375, -0.012211203575134277, -0.000102996826171875, -0.00012969970703125, -9.5367431640625e-06, -0.01908397674560547, -0.0001735687255859375, -5.7220458984375e-06, 0.0, -0.00014901161193847656, -0.002490997314453125, -0.0004520416259765625, -0.0007686614990234375, -7.05718994140625e-05, -0.0003833770751953125, -0.12053465843200684, -5.7220458984375e-05, -0.0010051727294921875, -0.033476829528808594, -0.0004706382751464844, -0.011405467055737972, -3.814697265625e-06, -0.000530242919921875, -9.1552734375e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0023822784423828125, -2.09808349609375e-05, -0.021309256553649902, 0.0, -0.0015347003936767578, -6.866455078125e-05, 0.0, -2.09808349609375e-05, -0.000988006591796875, -1.9073486328125e-06, -0.0053339991718530655, -0.0035051354207098484, -0.00015425682067871094], "score": -4.8221164277565975, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template30", "hole2": 7, "hole3": [{"_type": "Template20", "hole2": [{"_type": "Template19", "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template38", "hole1": [{"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "hole0": "IsType"}, "arg": "conditions"}]}], "hole0": "AddCard"}], "hole3": [{"_type": "Template38_expr_seq", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "args": [{"_type": "Template29", "hole2": [{"_type": "Str", "s": "Gallywix's hand"}], "hole1": {"_type": "Name", "id": "HasCardName"}, "hole0": "Not"}, {"_type": "Template39", "hole0": "EnemyPlayer"}]}, {"_type": "Template19", "hole4": [{"_type": "Template39", "hole0": "<UNK>Player"}], "hole3": "PlayerSelector", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template38", "hole1": [{"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}], "hole0": "IsType"}, "arg": "conditions"}]}], "hole0": "AddCard"}], "hole0": "Effect"}], "hole1": [{"_type": "Template34", "hole1": 1, "hole0": "ManaCost"}], "hole0": "SpellCast"}], "hole1": 5, "hole0": "Minion"}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "MAGE", "hole3": "LEGENDARY", "hole1": 7, "hole0": "Archmage Antonidas"}], "hole3": "create_minion", "hole0": "ArchmageAntonidas"}, "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector())), Effect(SpellCast(Not(HasCardName(\n            \"Gallywix's hand\")), EnemyPlayer()), ActionTag(AddCard(\n            CardQuery(conditions=[IsType(MINION_TYPE.MECH)])),\n            PlayerSelector(<UNK>Player())))])\n", "choice_history": [70, 147, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 244, 66, 176, "Spell", "Cast", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "1", "<EOS>", 237, 50, 169, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 39, 110, 21, 134, "Spell", "Cast", "<EOS>", 238, 55, 186, "Not", "<EOS>", 21, 134, "Has", "Card", "Name", "<EOS>", 237, 47, 143, "Gallywix's", " ", "hand", "<EOS>", 63, 205, "Enemy", "Player", "<EOS>", 50, 171, "Add", "Card", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 32, 200, "Is", "Type", "<EOS>", 237, 36, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 237, 63, 205, "<UNK>", "Player", "<EOS>"]}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"score_history": [-0.0003185272216796875, -8.0108642578125e-05, -3.6954863844584906e-06, -3.64774459740147e-05, 0.0, -0.00017594516975805163, -1.5497195136049413e-06, -1.1444091796875e-05, -0.000301361083984375, -0.0029888153076171875, -0.0012340545654296875, -1.9073486328125e-06, -2.0980653061997145e-05, 0.0, -1.931185761350207e-05, 0.0, -0.005023956298828125, -0.0002269744873046875, -3.814697265625e-06, -3.933902007702272e-06, -1.33514404296875e-05, -0.0005664825439453125, -3.814697265625e-06, -0.00021765152632724494, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.38690185546875e-05, -7.62939453125e-06, -0.0069653987884521484, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.00020909224986098707, 0.0, -0.0027980804443359375, -1.1444091796875e-05, -0.0005283355712890625, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.000415802001953125, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.002765655517578125, -1.9073486328125e-06, -0.011751888319849968, -7.152555099310121e-07, -0.008021047338843346, 0.0, -1.8954269762616605e-05, 0.0, -0.00034379944554530084, 0.0, -8.20159912109375e-05, -0.000518798828125, -0.00019155310292262584, -4.0531076592742465e-06, -0.03158378601074219, -6.4849853515625e-05, -0.000934600830078125, -0.00023651123046875, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -3.492828909656964e-05, 0.0, -1.20401346066501e-05, -1.1920928244535389e-07, -0.00018858909606933594, -1.9073486328125e-06, -1.6450801922474056e-05, -3.814697265625e-06, -0.21218490600585938, 0.0, -0.0033626556396484375, -7.82012939453125e-05, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.52587890625e-05, -1.1920928244535389e-07, -0.059581875801086426, -2.0265579223632812e-06, -0.03767271712422371, 0.0], "score": -0.39207358817894544, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Expr", "value": {"_type": "Template31", "hole2": 1, "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}, {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "Bananas"}, "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n", "choice_history": [70, 149, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 196, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 242, 47, 143, "Bananas", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 36, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"score_history": [-7.43865966796875e-05, -4.00543212890625e-05, -2.3841855067985307e-07, -1.7881377516459906e-06, -0.00013159839727450162, -3.7794001400470734e-05, -5.364418029785156e-05, 0.0, -1.9073486328125e-06, -0.012884140014648438, -0.0001544952392578125, -1.71661376953125e-05, 0.0, 0.0, 0.0, -6.43729799776338e-06, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.8358125089434907e-05, -4.243850344209932e-05, -2.741813204920618e-06, -8.702239938429557e-06, -0.000164031982421875, 0.0, -8.583032467868179e-06, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, 0.0, -0.1582469940185547, 0.0, -7.62939453125e-06, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.0004684925079345703, -1.9073486328125e-06, -9.72747802734375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.0007668733596801758, -3.933906555175781e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0001316070556640625, -5.7220458984375e-06, -1.7642974853515625e-05, -1.0132789611816406e-05, -0.0006216764450073242, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -3.62396240234375e-05, 0.0, -2.86102294921875e-05, -2.288818359375e-05, -1.7523765563964844e-05, -2.861018856492592e-06, -0.00185394287109375, -0.00029754638671875, -3.24249267578125e-05, -5.53131103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.059905096364673e-06, -5.7220458984375e-06, -9.775161743164062e-06, 0.0, -3.3020973205566406e-05, -3.4332275390625e-05, -6.43729799776338e-06, -5.14984130859375e-05, -0.007984161376953125, -0.00019073486328125, -1.71661376953125e-05, -2.86102294921875e-05, -0.0001468658447265625, 0.0, -3.635883331298828e-05, 0.0, -1.9073486328125e-06, -2.4437606043647975e-05, -0.3209896981716156, -2.1457672119140625e-06, -2.288818359375e-05, -0.7367620468139648, -0.0041942596435546875, -4.220008850097656e-05, -2.741813204920618e-06], "score": -1.2473520889594454, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Template37", "hole2": [{"_type": "NameConstant", "value": "Null"}], "hole1": "die", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "hole3": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "arg": "target_func"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "BlessedChampion"}, "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(Null)\n", "choice_history": [70, 149, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Blessed", " ", "Champion", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 237, 45, 136, "Null", "<EOS>"]}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"score_history": [-0.0012874603271484375, -0.012605667114257812, -0.0003280485689174384, -0.03036630153656006, -0.025973724201321602, -3.683499380713329e-05, -1.9073486328125e-06, -5.841255187988281e-06, -0.005818367004394531, -0.005118370056152344, -0.0002307891845703125, -7.82012939453125e-05, 0.0, -2.0265579223632812e-06, 0.0, -0.00131988525390625, 0.0, -4.00543212890625e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.417526598554105e-06, -7.820117752999067e-05, -1.3351394954952411e-05, -0.10488510131835938, 0.0, -1.9073486328125e-06, -0.00037139272899366915, -1.9073486328125e-06, -3.814697265625e-06, -6.29425048828125e-05, -1.52587890625e-05, 0.0, -0.0001609325408935547, -8.20159912109375e-05, -0.217315673828125, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -0.0002040863037109375, -1.9073486328125e-06, -0.00040435791015625, -0.002056121826171875, -0.2593393325805664, -0.0032935142517089844, -0.00014829184510745108, -1.52587890625e-05, -0.33734798431396484, -0.0031309127807617188, -0.7625619173049927, -0.0637097954750061, -2.86102294921875e-05, -0.5100001692771912, -1.9073486328125e-06, -0.011872053146362305, 0.0, -7.62939453125e-06, -0.49390125274658203, -4.00543212890625e-05, 0.0, -0.17218303680419922, -1.1444091796875e-05, -0.02991199493408203, -0.0008230209350585938, -4.38690185546875e-05, -2.1457672119140625e-06, -0.0003223419189453125, -1.9073486328125e-06, -0.0001392364501953125, -3.814697265625e-06, -0.0003604888916015625, -6.29425048828125e-05, -0.4140503406524658, -2.0265579223632812e-06, -1.9073486328125e-06, -5.6742221204331145e-05, -3.814697265625e-06, -7.832050323486328e-05, 0.0, -0.000141143798828125, -0.12905216217041016, -1.52587890625e-05, -0.0028362274169921875, -3.576278118089249e-07, -1.5258781786542386e-05, -3.576278118089249e-07], "score": -3.6044979897432086, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 5, "hole0": 4}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Cabal Shadow"}, {"_type": "Num", "n": 6}, {"attr": "PALADIN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "hole3": [{"_type": "Template17", "hole2": "MinionSelector", "hole1": [{"_type": "Template34", "hole1": 2, "hole0": "ManaCost"}], "hole0": "Give", "hole4": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}, "arg": "condition"}, {"_type": "keyword", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}, "arg": "players"}]}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "CabalShadow"}, "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give(ManaCost(2)),\n            MinionSelector(condition=Null, players=EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "choice_history": [70, 147, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Cabal", " ", "Shadow", "<EOS>", 46, 139, "6", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 65, 156, "Give", "<EOS>", 237, 59, 193, "Mana", "Cost", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 245, 68, 227, "condition", "<EOS>", 22, 136, "Null", "<EOS>", 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"score_history": [-7.62939453125e-06, -0.0001049041748046875, -2.706014311115723e-05, -0.0013910316629335284, -0.0015881556319072843, -2.264974000354414e-06, -8.58306884765625e-05, -4.458394687389955e-05, 0.0, -5.7220458984375e-06, -0.07021331787109375, -0.0003681182861328125, -1.4662635294371285e-05, -9.119510650634766e-05, -4.208087921142578e-05, -0.0001049041748046875, -5.006789251638111e-06, 0.0, -2.3841855067985307e-07, -2.2768794224248268e-05, -0.686561107635498, 0.0, -0.0025081634521484375, 0.0, -1.3113007298670709e-05, 0.0, -1.71661376953125e-05, -5.7220458984375e-06, -8.046627044677734e-05, -5.960446742392378e-06, -0.060492515563964844, -5.7220458984375e-06, -1.1444091796875e-05, -6.4849853515625e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.1682510375976562e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -2.384185791015625e-06, -3.814697265625e-06, -0.01436614990234375, -4.00543212890625e-05, -6.103515625e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.44995391368865967, -5.7220458984375e-06, -0.028227806091308594, -0.0062122344970703125, -9.5367431640625e-06, -2.86102294921875e-05, -0.014135360717773438, -1.52587890625e-05, -0.00423276424407959, -1.9073486328125e-06, -0.000446319580078125, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001392364501953125, -1.33514404296875e-05, 0.0, -0.000335693359375, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0009919404983520508, 0.0, -0.0006293579936027527, 0.0, -0.0004940032958984375, -3.24249267578125e-05, -0.02404022216796875, -7.62939453125e-06, -0.008971452713012695, 0.0, -0.016541481018066406, 0.0, -2.47955322265625e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.26085662841796875, -9.5367431640625e-06, -0.0001316070556640625, -1.9073486328125e-06, -0.002353668212890625, 0.0, -0.26362359523773193, 0.0, -0.00020479965314734727, 0.0, -0.04261970520019531, -2.09808349609375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0037232637405395508, -1.9073486328125e-06, -0.04256725311279297, -7.62939453125e-05, -0.008043289184570312, 0.0, -0.0002422332763671875, -0.00025177001953125, -5.7220458984375e-06, -0.000392913818359375, 0.0, -0.007630586624145508, 0.0, -0.021164536476135254, -1.9073486328125e-06, -0.0005893707275390625, -0.0021181106567382812, -3.4332275390625e-05, -4.9591064453125e-05, -0.000270843505859375, -2.6702880859375e-05, 0.0, -0.00549626350402832, -1.9073486328125e-06, -0.005029796622693539, 0.0, -9.5367431640625e-06, -0.06622600555419922, -0.0001049041748046875, -0.00885009765625, -4.57763671875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -0.0008641481399536133, 0.0, -7.62939453125e-06, 0.0, -0.02501988410949707, 0.0, -0.11750030517578125, -3.814697265625e-06, -0.0001811981201171875, 0.0], "score": -2.280395464843167, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "copy", "_type": "Attribute", "value": {"_type": "Name", "id": "copy"}}, "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}]}, "targets": [{"_type": "Name", "id": "targets"}]}, {"_type": "Template37", "hole2": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "current_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}], "hole1": "extend", "hole0": {"_type": "Name", "id": "targets"}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole2": [{"_type": "Call", "func": {"attr": "effective_spell_damage", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}, "args": [{"_type": "Template36", "hole1": "calculate_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Name", "id": "minion"}}], "iter": {"_type": "Name", "id": "targets"}}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "PALADIN", "hole1": 4, "hole0": "Cone of Cold"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "ConeOfCold"}, "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "choice_history": [70, 149, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 249, 88, 153, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "targets", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 93, 196, 21, 134, "targets", "<EOS>", "extend", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 21, 134, "targets", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 39, 110, 13, 103, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", 237, 60, 195, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 44, 134, "self", "<EOS>"]}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score_history": [-5.91278076171875e-05, -8.58306884765625e-05, -5.2927622164133936e-05, -0.017253395169973373, -0.005084560252726078, -0.00037785875611007214, -2.4199192921514623e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -0.00051116943359375, -0.2535743713378906, -0.14856867492198944, -0.000796192092821002, -0.00025403499603271484, -3.731250762939453e-05, -5.841255187988281e-06, -0.00033980858279392123, -0.007127881050109863, -4.732505476567894e-05, -0.0019249786855652928, -0.00011551379429874942, -0.0018517225980758667, -0.08138121664524078, -0.00133514404296875, -0.00806427001953125, -4.76837158203125e-05, -0.0037384033203125, -0.020967483520507812, -0.008356094360351562, -0.32082170248031616, -0.010506026446819305, -1.2516937204054557e-05, -0.0025968551635742188, -0.027400970458984375, -0.000362396240234375, -0.00041710614459589124, -0.0003704352711793035, -4.1961669921875e-05, -1.9073486328125e-06, -0.014599891379475594, -0.00015473365783691406, -9.167194366455078e-05, -0.06726455688476562, -0.02698040008544922, -1.9073486328125e-05, -0.8886515498161316, -0.016951799392700195, -0.10020875930786133, -0.030931472778320312, -0.1085977554321289, 0.0, -0.4828552007675171, -0.00013899798796046525, -7.62939453125e-06, -0.26511383056640625, -0.011774063110351562, -0.0017966257873922586, -0.1379765272140503, -3.814697265625e-06, -0.005382537841796875, -0.002986907958984375, -0.00022125244140625, -0.0005310770939104259, -0.00034648136352188885, -3.0517578125e-05, 0.0, -0.013389363884925842, -0.0002086162567138672, -6.878376007080078e-05, -0.19467735290527344, -0.0168609619140625, -1.33514404296875e-05, -0.29581084847450256, -0.011283040046691895, -0.06581151485443115, -0.0122298002243042, -0.1621255874633789, -1.9073486328125e-06, -0.6599952578544617, -0.00015568724484182894, -9.5367431640625e-06, -0.06043821573257446, -9.322063124272972e-05, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -5.125993993715383e-06, 0.0, -1.9073486328125e-06, -0.2414093017578125, -4.38690185546875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.933906555175781e-06, 0.0], "score": -4.822857188815746, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 3, "hole0": 2}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "List", "elts": [{"_type": "Template25", "hole1": [{"_type": "Template29", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}, "hole0": "Count"}], "hole0": "ChangeAttack"}, {"_type": "Template25", "hole1": [{"_type": "Template29", "hole2": [{"_type": "Template39", "hole0": "MinionHasTaunt"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "MinionSelector"}, "hole0": "Count"}], "hole0": "ChangeHealth"}]}], "hole1": 4, "_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "SelfSelector", "hole0": "Defender of Argus"}], "hole3": "create_minion", "hole0": "DefenderOfArgus"}, "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Count(MinionSelector(MinionHasTaunt(), BothPlayer())))), Buff(\n            ChangeHealth(Count(MinionSelector(MinionHasTaunt(), BothPlayer(\n            )))))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [70, 147, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 214, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 52, 181, "Change", "Attack", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 52, 181, "Change", "Health", "<EOS>", 237, 55, 186, "Count", "<EOS>", 21, 134, "Minion", "Selector", "<EOS>", 238, 63, 205, "Minion", "Has", "Taunt", "<EOS>", 63, 205, "Both", "Player", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"score_history": [-0.000225067138671875, -0.0016117095947265625, -0.00919253658503294, -0.000436511094449088, -0.0020261728204786777, -0.0001424551010131836, -3.0994415283203125e-05, -7.82012939453125e-05, -0.008129119873046875, -0.0010833740234375, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0018525123596191406, 0.0, -5.7220458984375e-05, -1.33514404296875e-05, -7.05718994140625e-05, -9.417489309271332e-06, -5.91278076171875e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.009116986766457558, -1.52587890625e-05, -3.0517578125e-05, -3.62396240234375e-05, -2.288818359375e-05, -1.9073486328125e-06, -6.508827209472656e-05, -5.7220458984375e-06, -0.0014477968215942383, 0.0, -3.4332275390625e-05, -1.52587890625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00312042236328125, -1.1444091796875e-05, -0.017583847045898438, -1.9073486328125e-06, -0.0031642913818359375, -0.0017070770263671875, -4.9591064453125e-05, -0.026575088500976562, -1.33514404296875e-05, -0.0060100555419921875, -4.00543212890625e-05, -0.026370180770754814, 0.0, -0.4566638469696045, -0.000324249267578125, -0.00015974044799804688, 0.0, -8.20159912109375e-05, -1.71661376953125e-05, -0.17281818389892578, -8.678057929500937e-05, -0.00019632905605249107, -0.03555608540773392, -1.1920928244535389e-07, -0.013587117195129395, -4.3153759179404005e-05, -0.6832809448242188, -7.05718994140625e-05, -2.6702880859375e-05, -0.6722726821899414, -0.00022125244140625, -0.0004787445068359375, -3.0517578125e-05, -2.288818359375e-05, -0.00029754638671875, -0.0791168212890625, -0.028478622436523438, -0.14370107650756836, -5.7220458984375e-06, -2.09808349609375e-05, -0.07710838317871094, -7.62939453125e-06, -9.5367431640625e-06, -1.33514404296875e-05, -0.07971334457397461, -0.0035800933837890625, -7.62939453125e-06, -0.22267723083496094, -0.23187732696533203, -5.7220458984375e-05, -0.004906177520751953, -0.013847075402736664, -5.722038622479886e-06, -0.0001373291015625, 0.0, -0.0019762159790843725, -7.641315460205078e-05, -1.9073486328125e-06, -0.2752046585083008, -0.1661996841430664, -1.9073486328125e-06, -0.27485892176628113, -0.3830362856388092, -1.33514404296875e-05, -0.020877838134765625, -1.9073486328125e-06, -0.004395604133605957, -0.0003116130828857422, -0.001644134521484375, -0.0022258758544921875, -1.9073486328125e-06, -0.11837506294250488, -0.0013854503631591797, -5.483612312673358e-06, -0.000202178955078125, -2.09808349609375e-05, -0.027046680450439453, -5.7220458984375e-06, -1.1444091796875e-05], "score": -4.319907827348736, "model_output": {"hole4": "player", "hole1": "WeaponCard", "hole6": [{"_type": "Template30", "hole2": 8, "hole3": [{"_type": "keyword", "value": {"_type": "NameConstant", "value": true}, "arg": "windfury"}, {"_type": "Template20", "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Template29", "hole2": [{"_type": "Template39", "hole0": "HasWindfury"}, {"_type": "Template39", "hole0": "BothPlayer"}], "hole1": {"_type": "Name", "id": "CharacterSelector"}, "hole0": "ChangeTarget"}, {"_type": "Template39", "hole0": "UserPicker"}, {"_type": "Template39", "hole0": "SelfSelector"}]}], "hole0": "Attack"}], "hole1": 2, "hole0": "Weapon"}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}], "hole3": [{"_type": "keyword", "value": {"_type": "Num", "n": 2}, "arg": "overload"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_weapon", "hole0": "Doomhammer"}, "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, windfury=True, effects=[Effect(Attack(),\n            ActionTag(ChangeTarget(CharacterSelector(HasWindfury(),\n            BothPlayer())), UserPicker(), SelfSelector()))])\n", "choice_history": [70, 147, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 240, 47, 143, "Doomhammer", "<EOS>", 46, 139, "5", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 244, 68, 227, "overload", "<EOS>", 23, 139, "2", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 245, 68, 227, "windfury", "<EOS>", 22, 135, "True", "<EOS>", 66, 173, "Attack", "<EOS>", 237, 39, 110, 21, 134, "Action", "Tag", "<EOS>", 239, 55, 186, "Change", "Target", "<EOS>", 21, 134, "Character", "Selector", "<EOS>", 238, 63, 205, "Has", "Windfury", "<EOS>", 63, 205, "Both", "Player", "<EOS>", 63, 205, "User", "Picker", "<EOS>", 63, 205, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"score_history": [-8.392333984375e-05, -7.82012939453125e-05, -1.6689286894688848e-06, -2.8132995794294402e-05, -1.025196434056852e-05, -2.145592588931322e-06, -6.353850039886311e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.03440284729003906, -9.5367431640625e-05, -0.00010740180005086586, -3.0398367016459815e-05, 0.0, -1.1920928244535389e-07, -1.6689727999619208e-06, -2.3841855067985307e-07, -0.7057325839996338, 0.0, -0.00032889842987060547, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.000621795654296875, -1.9073486328125e-06, -2.3245802367455326e-05, -9.5367431640625e-06, -0.0003707408905029297, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.000476837158203125, -6.4373016357421875e-06, -7.152555099310121e-07, -0.1160116195678711, -5.53131103515625e-05, -0.0001220703125, -4.57763671875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -2.5153160095214844e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -2.6702880859375e-05, -2.6702880859375e-05, -8.225440979003906e-06, -7.62939453125e-06, -0.29390716552734375, -1.9073486328125e-06, -0.012915611267089844, -6.4849853515625e-05, -3.62396240234375e-05, -3.814697265625e-06, -6.103515625e-05, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.6328755617141724, -5.7220458984375e-06, -0.9320549964904785, -1.9073486328125e-06], "score": -2.730900877278323, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Expr", "value": {"_type": "Template31", "hole2": 2, "hole1": "change_attack", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}}], "_type": "Template1", "hole2": [{"hole4": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole1": 1, "_type": "Template11", "hole2": "PRIEST", "hole3": "target_func", "hole0": "Earth Shock"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "EarthShock"}, "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n", "choice_history": [70, 149, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 250, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 79, 115, 29, 190, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"score_history": [-9.5367431640625e-06, -0.4559040069580078, -0.0003940823662560433, -0.3542599081993103, -0.005965088959783316, -0.000604507396928966, -6.318092346191406e-05, -3.826618194580078e-05, -9.72747802734375e-05, -0.03864479064941406, -0.000164031982421875, -1.0728830375228426e-06, -3.576277958927676e-05, -0.39836180210113525, -0.13164329528808594, -0.22299551963806152, 0.0, -2.1457672119140625e-05, -1.4305104514278355e-06, -0.18270695209503174, 0.0, -0.6668891906738281, 0.0, -0.0031644105911254883, 0.0, -0.0001068115234375, -2.09808349609375e-05, -0.0002480745315551758, -4.172325134277344e-06, -0.9239768981933594, -0.0001430511474609375, -1.9073486328125e-06, -0.0001621246337890625, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.7179412841796875, -7.43865966796875e-05, -0.0016803741455078125, 0.0, -0.5214357376098633, 0.0, -0.4682760238647461, 0.0, -0.8643639087677002, 0.0, -0.8083410263061523, 0.0, -7.62939453125e-06, -0.0034694671630859375, -3.4332275390625e-05, -0.27448487281799316, -0.014406204223632812, -5.91278076171875e-05, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -8.487701416015625e-05, 0.0, -0.000621795654296875, 0.0, -0.026038169860839844, -7.62939453125e-05, -5.7220458984375e-06, -8.392333984375e-05, 0.0, -0.00098419189453125, 0.0, -0.0025510787963867188, 0.0, -8.7738037109375e-05, 0.0, -0.5583000183105469, -1.52587890625e-05, -0.000598907470703125, 0.0, -0.6201953887939453, -0.07646465301513672, -0.000213623046875, -9.5367431640625e-06, -3.62396240234375e-05, 0.0, -0.09771347045898438, 0.0, -0.000415802001953125, 0.0, -0.2162104845046997, 0.0, -0.17713233828544617, 0.0, -0.027142643928527832, 0.0, -0.028378348797559738, 0.0, -0.21337223052978516, -0.00028228759765625, 0.0, -0.001999438740313053, 0.0, -0.6639804840087891, -0.0012454986572265625, -5.7220458984375e-06, -0.006569862365722656, 0.0, -9.5367431640625e-06, -2.6702880859375e-05, -0.6265277862548828, -6.67572021484375e-05, -6.103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0030155181884765625, -3.814697265625e-06, -0.0004329681396484375, -4.00543212890625e-05, -9.72747802734375e-05, -0.015807151794433594, -8.0108642578125e-05, -0.001750946044921875, -0.0025386810302734375, -0.000148773193359375, -3.814697265625e-06, -5.412101381807588e-05, -3.814697265625e-06, -0.0003687143325805664, 0.0, -0.046584367752075195, 0.0, -0.6501588821411133, 0.0, -5.7220458984375e-06, -0.00012969970703125, -0.000141143798828125, -0.297005295753479, -0.033321380615234375, -0.0003662109375, 0.0, -2.09808349609375e-05, 0.0, -0.0007009506225585938, -1.9073486328125e-06, -0.0010814666748046875, 0.0], "score": -11.462751051485839, "model_output": {"hole4": "player", "hole1": "SecretCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Template37", "hole2": [{"_type": "Str", "s": "minion_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "hole1": "bind", "hole0": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Assign", "value": {"_type": "Name", "id": "player"}, "targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}, {"_type": "AugAssign", "target": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}}, "value": {"_type": "Num", "n": 1}, "op": {"_type": "Sub"}}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "EyeEye", "hole7": [{"_type": "FunctionDef", "name": "use", "body": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "minion_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "hole1": "unbind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}, "inferred_code": "class EyeEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.opponent.bind('minion_played', self._reveal)\n        self.player = player\n        player.game.other_player.hero -= 1\n\n    def use(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "choice_history": [70, 150, "Eye", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 252, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "player", "<EOS>", "opponent", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", 21, 134, "player", "<EOS>", 76, 104, 13, 103, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", 72, 23, 139, "1", "<EOS>", 249, 81, 117, "use", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"score_history": [-5.7220458984375e-06, -0.0007076263427734375, -0.000779205875005573, -7.271740287251305e-06, -7.861526682972908e-06, -0.00014150142669677734, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -2.0265579223632812e-06, 0.0, 0.0, -5.960462772236497e-07, -0.0005530117778107524, 0.0, -0.00010275805834680796, 0.0, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -5.53131103515625e-05, -1.9073486328125e-05, -0.0002307891845703125, -1.9073486328125e-06, -1.52587890625e-05, -0.09381771087646484, -2.09808349609375e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, 0.0, -3.814697265625e-06, 0.0, -2.2649765014648438e-06, -1.9073486328125e-06, -2.9802317840221804e-06, -0.0001430511474609375, -0.4829139709472656, -4.00543212890625e-05, -9.5367431640625e-06, 0.0, -0.09915518760681152, -1.9073486328125e-06, -0.17981338500976562, -0.03960418701171875, -0.0020542144775390625, -0.000255584716796875, -0.0011386871337890625, 0.0, -0.3761758804321289, -1.9073486328125e-06, -0.03446781635284424, -1.9073486328125e-06, -0.0005645751953125, -6.4849853515625e-05, -7.62939453125e-06, -6.67572021484375e-05, 0.0, -0.003223419189453125, 0.0, -0.005859494209289551, 0.0, -0.000450011866632849, 0.0, -0.08456635475158691, -3.814697265625e-06, -2.86102294921875e-05, -0.010042190551757812, -3.814697265625e-06, -0.00038909912109375, 0.0, -0.049360036849975586, -1.9073486328125e-06, -0.0018968582153320312, -3.814697265625e-06, -1.1444091796875e-05, -0.06805419921875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -1.7523765563964844e-05, 0.0, -0.00097835052292794, -1.0728830375228426e-06, -0.33889251947402954, -1.7881377516459906e-06, -0.0002307891845703125, 0.0, -6.866455078125e-05, 0.0, -0.0060634613037109375, -4.76837158203125e-05, -0.0007076263427734375, -3.814697265625e-06, -0.00096893310546875, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.06676971912384033, -2.0265579223632812e-06], "score": -1.9518279871844584, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Template37", "hole2": [{"_type": "Template31", "hole2": 0, "hole1": "effective_spell_damage", "hole0": {"_type": "Name", "id": "player"}}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"_type": "Name", "id": "minion"}}], "iter": {"_type": "Call", "func": {"attr": "copy", "_type": "Attribute", "value": {"_type": "Name", "id": "copy"}}, "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}]}}, {"_type": "Expr", "value": {"_type": "Template36", "hole1": "draw", "hole0": {"_type": "Name", "id": "player"}}}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "HUNTER", "hole3": "RARE", "hole1": 2, "hole0": "Flare"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "Flare"}, "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in copy.copy(game.other_player.minions):\n            minion.damage(player.effective_spell_damage(0), self)\n        player.draw()\n", "choice_history": [70, 149, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 249, 93, 196, 21, 134, "minion", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "Stealth", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"score_history": [-5.340576171875e-05, -0.001338958740234375, -0.00013995164772495627, -0.0008678425801917911, -4.6491513785440475e-06, -0.0034276247024536133, 0.0, -1.9073486328125e-05, -0.03431510925292969, -0.0003070831298828125, -2.3841855067985307e-07, 0.0, -8.29123891890049e-05, -8.344646857949556e-07, -0.08231735229492188, 0.0, -0.00019669532775878906, 0.0, -0.01385498046875, -7.62939453125e-05, -5.125998541188892e-06, -5.7220458984375e-06, -4.00543212890625e-05, -0.00051116943359375, -0.0016584396362304688, 0.0, -0.00035041390219703317, -9.918212890625e-05, -8.583032467868179e-06, -6.747244333382696e-05, -5.960462772236497e-07, -0.0021457672119140625, -0.0002079010009765625, -0.25047969818115234, -0.05378532409667969, -0.2423257827758789, -3.814697265625e-06, 0.0, -0.05652809143066406, -0.0027322769165039062, -0.008342504501342773, -0.009537816047668457, 0.0, -0.05077648162841797, -0.0005474090576171875, -0.009220123291015625, -0.02431201934814453, -7.62939453125e-05, -4.649161928682588e-05, -8.20159912109375e-05, -0.15926168859004974, -0.0023345947265625, -3.814697265625e-06, -0.004901925567537546, -1.9073486328125e-05, -0.05227184295654297, -0.0002422332763671875, -7.05718994140625e-05, -8.96453857421875e-05, -0.00044298148714005947, -0.5401639938354492, -1.71661376953125e-05, -0.03658904880285263, -2.09808349609375e-05, -0.044283267110586166, -0.00026702880859375, -1.9073486328125e-06, -3.62396240234375e-05, -0.3360919952392578, -0.001007080078125, -0.05913281440734863, -1.1086463018727954e-05, -0.0016841888427734375, -0.0048503875732421875, 0.0, -0.023570004850625992, -0.5415582656860352, -1.4185883628670126e-05, -0.0049533843994140625, -0.0698080062866211, -0.7260361909866333, -0.0028552755247801542, -2.3841855067985307e-07, -1.0681105852127075, 0.0, 0.0], "score": -4.531601270920305, "model_output": {"hole4": "player", "hole1": "WeaponCard", "hole6": [{"_type": "Template30", "hole2": 1, "hole3": [{"_type": "Template20", "hole2": [{"_type": "Template19", "hole3": "TargetSelector", "hole1": [{"_type": "List", "elts": [{"_type": "Template23", "hole2": 1, "hole1": "ChangeAttack", "hole0": "Buff"}, {"_type": "Template23", "hole2": 1, "hole1": "ChangeHealth", "hole0": "Buff"}]}], "hole0": "Give"}], "hole3": [{"_type": "Template38_expr_seq", "hole1": [{"_type": "Template39", "hole0": "MinionSummoned"}, {"_type": "Template19", "hole3": "MinionSelector", "hole0": "IncreaseDurability"}], "hole0": "Effect"}], "hole0": "MinionSummoned"}], "hole1": 7, "hole0": "Weapon"}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "WARRIOR", "hole3": "EPIC", "hole1": 7, "hole0": "Gorehowl"}], "hole3": "create_weapon", "hole0": "Gorehowl"}, "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(MinionSummoned(), ActionTag(\n            Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            TargetSelector())), Effect(MinionSummoned(), ActionTag(\n            IncreaseDurability(), MinionSelector()))])\n", "choice_history": [70, 147, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 249, 89, 154, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 249, 92, 189, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 244, 66, 174, "Minion", "Summoned", "<EOS>", 237, 50, 169, "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Target", "Selector", "<EOS>", 237, 62, 204, "Effect", "<EOS>", 238, 63, 205, "Minion", "Summoned", "<EOS>", 50, 166, "Increase", "Durability", "<EOS>", "Minion", "Selector", "<EOS>"]}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"score_history": [-9.5367431640625e-06, -0.0006008148193359375, -0.00014959939289838076, -0.0009232090669684112, -5.483620952873025e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-06, -2.09808349609375e-05, -0.08672714233398438, -3.814697265625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -0.003482818603515625, -4.00543212890625e-05, -1.33514404296875e-05, -2.0265579223632812e-06, -0.0018128473311662674, -1.9073486328125e-06, 0.0, -4.1961669921875e-05, 0.0, -7.05718994140625e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -3.8743008190067485e-05, 0.0, -0.2217404842376709, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -2.491474151611328e-05, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -3.814697265625e-06, -0.000232696533203125, -7.05718994140625e-05, -0.0012121200561523438, 0.0, -7.295608520507812e-05, 0.0, -2.038461752817966e-05, 0.0, -5.7220458984375e-06, -0.021944046020507812, -5.340576171875e-05, -1.7881393432617188e-06, -1.1920928244535389e-07, -2.2185180569067597e-05, 0.0, -0.00875389389693737, -1.9073486328125e-06, -0.0002231597900390625, -9.5367431640625e-06, -0.00017750263214111328, -1.9073486328125e-06], "score": -0.34868773470315517, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 1, "hole0": 1}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "hole3": [{"_type": "Template35", "hole0": "BEAST"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "Hound"}, "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "choice_history": [70, 147, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Hound", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"score_history": [-0.000423431396484375, -7.05718994140625e-05, -0.0009277330245822668, -9.536738616588991e-07, -3.7431087548611686e-05, -2.145764938177308e-06, -5.7220458984375e-06, -2.3841855067985307e-07, -7.62939453125e-06, -0.0002593994140625, -0.5396714210510254, -2.50339189733495e-06, -6.473017856478691e-05, -2.3841855067985307e-07, 0.0, -9.5367431640625e-05, -4.768370445162873e-07, -0.04044473171234131, -0.002718210220336914, -0.6824966669082642, -0.00012600158515851945, -0.000396728515625, -2.288818359375e-05, 0.0, -0.006774455308914185, -0.000202178955078125, -0.010929303243756294, -0.0001068115234375, -1.71661376953125e-05, -0.003253936767578125, -0.000324249267578125, -1.9073486328125e-06, -0.0025408267974853516, -1.9073486328125e-06, -0.000186920166015625, -8.20159912109375e-05, -0.021242141723632812, -1.9073486328125e-05, 0.0, -6.4849853515625e-05, -9.5367431640625e-06, -0.014196395874023438, 0.0, -0.001949310302734375, -1.33514404296875e-05, -0.004016876220703125, -5.125999450683594e-05, 0.0, -1.4781950994802173e-05, 0.0, -2.8848648071289062e-05, 0.0, -2.09808349609375e-05, -0.012234687805175781, -3.4332275390625e-05, -0.00021731853485107422, -2.3841855067985307e-07, -7.87973403930664e-05, -1.3708974620385561e-05], "score": -1.346403389831977, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 7, "hole0": 4}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "Num", "n": 7}], "hole1": 3, "hole7": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template39", "hole0": "UserPicker"}, "arg": "picker"}], "_type": "Template6", "hole2": "RARE", "hole3": "Damage", "hole5": "CharacterSelector", "hole0": "Injured Blademaster"}], "hole3": "create_minion", "hole0": "InjuredBlademaster"}, "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(7),\n            CharacterSelector(players=EnemyPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "choice_history": [70, 147, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 237, 46, 139, "7", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"score_history": [-3.814697265625e-06, -0.000110626220703125, -0.0021792729385197163, -2.861018856492592e-06, -0.00017415026377420872, -3.576278118089249e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -7.2479248046875e-05, -5.14984130859375e-05, 0.0, -8.034683560254052e-05, 0.0, 0.0, -3.3140186133095995e-05, -3.182837463100441e-05, -0.000499419984407723, -1.1444091796875e-05, -0.0012119989842176437, 0.0, -9.775161743164062e-06, -2.47955322265625e-05, -9.775130820344202e-06, -1.9073486328125e-06, -3.814697265625e-06, -5.340576171875e-05, -1.1444091796875e-05, -3.576278118089249e-07, -3.0517578125e-05, -1.1444091796875e-05, -1.9073468138230965e-06, -9.417522960575297e-05, -2.622600959512056e-06, -8.96453857421875e-05, -2.09808349609375e-05, -0.04041576385498047, -0.10963451862335205, -0.03144121170043945, -0.00344085693359375, -0.000148773193359375, -0.005855560302734375, -0.007808685302734375, -0.005389327649027109, -0.1465257704257965, -2.09808349609375e-05, -3.814697265625e-06, -8.58306884765625e-05, -0.14224624633789062, -0.0001667706819716841, -3.755071884370409e-05, -3.814697265625e-06, -0.00017547607421875, -5.7220458984375e-06, -6.355345249176025e-06, -4.172316494077677e-06, -0.6656235456466675, -1.442432312614983e-05, -3.814697265625e-06, -0.31508350372314453, -0.0004177093505859375, -0.0001678466796875, -0.029459834098815918, -9.655952453613281e-06, -0.0002880096435546875, -5.7220458984375e-06, -0.00028955936431884766, -9.5367431640625e-06, 0.0, -0.00038909912109375, -5.7220458984375e-06, -0.012567520141601562, -2.9802317840221804e-06, -0.000347137451171875, -9.5367431640625e-06, -0.01409447193145752, -3.1948089599609375e-05, 0.0], "score": -1.5370763363576927, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template30", "hole2": 2, "hole3": [{"_type": "Template20", "hole2": [{"hole5": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "EnemyPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template39", "hole0": "RandomPicker"}, "arg": "picker"}], "_type": "Template19", "hole3": "CharacterSelector", "hole1": [{"_type": "Num", "n": 1}], "hole0": "Damage"}], "hole1": [{"_type": "Template39", "hole0": "IsSpell"}], "hole0": "CardUsed"}], "hole1": 3, "hole0": "Minion"}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "ALL", "hole3": "RARE", "hole1": 2, "hole0": "Knife Juggler"}], "hole3": "create_minion", "hole0": "KnifeJuggler"}, "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(\n            Damage(1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker())))])\n", "choice_history": [70, 147, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 244, 66, 175, "Card", "Used", "<EOS>", 237, 63, 205, "Is", "Spell", "<EOS>", 237, 50, 170, "Damage", "<EOS>", 237, 46, 139, "1", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Enemy", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"score_history": [-7.82012939453125e-05, -0.0021610260009765625, -0.0047187963500618935, -0.016559241339564323, -1.8000440832111053e-05, -0.00018310546875, -1.71661376953125e-05, -2.288818359375e-05, -0.14970111846923828, -0.0001373291015625, -1.1920928244535389e-07, 0.0, -1.9788740246440284e-05, -1.1920928244535389e-07, -0.14833521842956543, -5.7220458984375e-06, -0.35369110107421875, 0.0, -0.022464752197265625, -3.814697265625e-06, -1.382827485940652e-05, -1.9073486328125e-06, -1.71661376953125e-05, -0.00037384033203125, -0.000308990478515625, -1.1920928244535389e-07, -1.1444091796875e-05, -3.814697265625e-06, -3.981510963058099e-05, -7.271760750882095e-06, -5.4834770708112046e-05, -1.1444091796875e-05, -2.288818359375e-05, -0.2585420608520508, -0.0003214599855709821, -0.0009405612945556641, -3.814697265625e-06, -3.4332275390625e-05, -6.29425048828125e-05, -0.0714273452758789, -0.002808094024658203, -0.0002105214516632259, -1.9073486328125e-06, -0.008854866027832031, -0.000186920166015625, -0.5878316164016724, -2.3841855067985307e-07, -0.006171517074108124, -9.5367431640625e-06, -3.814697265625e-06, -0.002887725830078125, -0.000202178955078125, -3.814697265625e-06, -0.6235532760620117, -0.000550834636669606, -0.0002002716064453125, 0.0, -0.6787890195846558, -0.00023162364959716797, 0.0], "score": -2.9428151671367644, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template30", "hole2": 5, "hole3": [{"_type": "Template20", "hole2": [{"hole5": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "RandomPicker"}, "arg": "picker"}], "_type": "Template19", "hole3": "MinionSelector", "hole1": [{"_type": "Num", "n": 1}], "hole0": "Heal"}], "hole0": "TurnEnded"}], "hole1": 0, "hole0": "Minion"}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "PRIEST", "hole3": "EPIC", "hole1": 2, "hole0": "Lightwell"}], "hole3": "create_minion", "hole0": "Lightwell"}, "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(1),\n            MinionSelector(picker=RandomPicker())))])\n", "choice_history": [70, 147, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Lightwell", "<EOS>", "2", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 92, 189, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 244, 66, 173, "Turn", "Ended", "<EOS>", 237, 50, 170, "Heal", "<EOS>", 237, 46, 139, "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"score_history": [-3.814697265625e-06, -0.02286529541015625, -6.198863957251888e-06, -1.9073486328125e-06, -0.00010597164509817958, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.000896453857421875, -9.5367431640625e-06, 0.0, -0.00031908947858028114, -1.1920928244535389e-07, 0.0, -6.675720669591101e-06, -2.3841855067985307e-07, -0.05836343765258789, 0.0, -0.0011240243911743164, 0.0, -1.823901038733311e-05, 0.0, -3.814697265625e-06, -0.0059642791748046875, -0.0003566741943359375, 0.0, -1.025196434056852e-05, -2.9206275939941406e-05, -4.768370445162873e-07, -0.06548820436000824, -6.914126061019488e-06, -0.003928184509277344, -0.0021009445190429688, -0.002061838749796152, -5.722038622479886e-06, -0.000507354736328125, -7.62939453125e-05, -0.0013751983642578125, -0.0004119873046875, -2.288818359375e-05, -0.0382034070789814, -0.0012704133987426758, -0.0004962682723999023, -0.0003147125244140625, -0.000255584716796875, -9.5367431640625e-06, -6.73532485961914e-05, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -0.0022597312927246094, -0.00011407979764044285, -1.9073486328125e-06, -2.86102294921875e-05, -0.0001277923583984375, -4.208087921142578e-05, -0.0001759525912348181, -1.9073486328125e-06, -0.000217437744140625, -0.0001068115234375, -0.003915547858923674, -2.0265579223632812e-06, -0.0002900361141655594, -0.00022292137145996094, -3.814697265625e-06], "score": -0.21424137021251255, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "effects", "hole3": {"_type": "Template38", "hole1": [{"_type": "Call", "func": {"_type": "Name", "id": "SpellCast"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "BothPlayer"}, "arg": "player"}]}, {"_type": "Template19", "hole3": "SelfSelector", "hole1": [{"_type": "Template32", "hole0": 1}], "hole0": "Give"}], "hole0": "Effect"}, "hole1": 3, "hole0": 1}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "PALADIN", "hole1": 1, "hole0": "Mana Wyrm"}], "hole3": "create_minion", "hole0": "ManaWyrm"}, "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(player=BothPlayer()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "choice_history": [70, 147, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 32, 200, "Effect", "<EOS>", 238, 39, 109, 21, 134, "Spell", "Cast", "<EOS>", 244, 68, 227, "player", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 50, 169, "Give", "<EOS>", 237, 57, 191, "1", "<EOS>", "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"score_history": [-5.7220458984375e-06, -0.001018524169921875, -0.00010609064338495955, -1.1920928244535389e-07, -6.472911627497524e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0001964569091796875, -1.33514404296875e-05, 0.0, -3.516674041748047e-05, 0.0, 0.0, -0.00010120868682861328, -2.622600959512056e-06, -0.00015461444854736328, 0.0, -5.841255187988281e-06, 0.0, -4.9471847887616605e-05, 0.0, -3.814697265625e-06, -7.2479248046875e-05, -5.14984130859375e-05, -5.7220458984375e-06, -1.311301275563892e-06, -6.699559889966622e-05, -1.1920928244535389e-07, -0.0003733634948730469, -1.9073486328125e-06, -0.0006780624389648438, -1.52587890625e-05, -9.691700688563287e-05, -2.586841583251953e-05], "score": -0.003151171028754618, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 7, "hole0": 1}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden"}], "hole3": "create_minion", "hole0": "Mogu'shanWarden"}, "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "choice_history": [70, 147, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"score_history": [-9.5367431640625e-06, -0.2777690887451172, -2.4676208340679295e-05, -2.1457481125253253e-05, -4.147179424762726e-06, -7.62939453125e-06, 0.0, -6.866455078125e-05, -0.18754863739013672, -5.91278076171875e-05, -2.0265579223632812e-06, 0.0, -2.0265579223632812e-06, -2.5629668016335927e-05, -0.00133925536647439, 0.0, -0.03753745183348656, 0.0, -0.0003905296325683594, 0.0, -2.777576446533203e-05, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -3.063678741455078e-05, -8.61874214024283e-05, -0.6162405014038086, -0.0011882781982421875, -1.71661376953125e-05, -0.0003528594970703125, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.245203283266164e-06, -1.1920928244535389e-07, -9.655952453613281e-06, 0.0, -4.172325134277344e-06, -5.7220458984375e-06, -1.668929871811997e-05, -0.0003643035888671875, -0.2103862762451172, -3.814697265625e-06, -1.9073486328125e-06, -0.0001659393310546875, -3.814697265625e-06, -0.7851841449737549, -1.9073486328125e-06, -0.008753776550292969, -0.00556182861328125, -3.814697265625e-06, -5.7220458984375e-06, -0.01154327392578125, -5.7220458984375e-06, -0.002040863037109375, 0.0, -0.00011861324310302734, -1.9073486328125e-06, -0.004811286460608244, -2.3841855067985307e-07, -0.06840797513723373, -2.3841855067985307e-07, -0.0007038116455078125, -0.005286216735839844, -0.004879951477050781, -0.0273438673466444, -0.3907492160797119, -2.47955322265625e-05, -0.0001964569091796875, -0.004582405090332031, -0.24036245048046112, -0.030979355797171593, -0.0016574859619140625, -1.1444091796875e-05, -0.0034548044204711914, 0.0, -0.04570293426513672, -3.814697265625e-05, -0.0005645751953125, -0.002582550048828125, -4.57763671875e-05, -0.02561473846435547, -1.52587890625e-05, -0.4252340793609619, 0.0, -1.1814897060394287, 0.0, -0.8226613998413086, -4.57763671875e-05, -5.555152893066406e-05, -3.576278118089249e-07, -0.16969966888427734, -3.62396240234375e-05, -0.6273035407066345, -0.0002984961320180446, -3.814697265625e-06, -0.06266117095947266, -1.9073486328125e-06, -0.007344911340624094, -0.04254341125488281, -9.5367431640625e-06, -0.3539133071899414, -0.031645774841308594, -0.37763118743896484, -0.005379904061555862, -0.0066155134700238705, -0.2642904818058014, -0.0664212703704834, -0.6840008497238159, -0.36348438262939453, -0.41414543986320496, -0.0002689361572265625, -0.00021338462829589844, -3.814697265625e-06, -0.000782012939453125, -6.29425048828125e-05, -0.013961434364318848, 0.0, -2.6702880859375e-05, -0.00030517578125, -0.0025615692138671875, -5.14984130859375e-05, -1.1920928244535389e-07, -0.0002002716064453125, -2.6702880859375e-05, -2.288818359375e-05, -0.0001811981201171875, -9.298297300119884e-06, -6.103515625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.0002422332763671875, 0.0, -6.663799285888672e-05, -4.172325134277344e-06, -0.014608383178710938, -9.5367431640625e-06, -0.0004215240478515625, -3.4332275390625e-05, -0.0002982616424560547, 0.0, -0.0007734298706054688, -3.814697265625e-05, -0.0001811981201171875, 0.0, -0.00014901161193847656, -1.1563301086425781e-05, -0.0007877349853515625, -0.00034427642822265625, -1.9073486328125e-06, -9.5367431640625e-05, -4.1842453356366605e-05, -1.3232166566012893e-05, -0.5598945617675781, -1.0642719268798828, -7.2479248046875e-05, -0.042822837829589844, -0.0025615692138671875, -3.0517578125e-05, 0.0, -0.1578226089477539, 0.0, -0.17944717407226562, -1.1920928244535389e-07, -0.7032986283302307, 0.0, -0.00933074951171875, -5.91278076171875e-05, -0.001399993896484375, -0.0002040863037109375, -9.918212890625e-05, -0.0020780563354492188, 0.0, -0.15301764011383057, 0.0, -0.5405007600784302, 0.0, -0.02696514129638672, -6.67572021484375e-05, -5.91278076171875e-05, 0.0, -0.5291728973388672, -6.29425048828125e-05, -0.23564277589321136, -6.437290721805766e-05, -5.7220458984375e-06, -0.17191314697265625, -1.9073486328125e-06, -0.008000134490430355, -0.09769821166992188, -7.62939453125e-06, -0.49304962158203125, -0.0385284423828125, -0.3477506637573242, -0.00597427086904645, -0.006301878020167351, -0.27638137340545654, -0.06690657138824463, -0.6709579825401306, -0.5386114120483398, -0.4377550482749939, -0.000232696533203125, -0.00022709369659423828, -3.814697265625e-06, -0.000789642333984375, -6.103515625e-05, -0.015422463417053223, 0.0, -2.47955322265625e-05, -0.00031280517578125, -0.00267791748046875, -5.14984130859375e-05, -1.1920928244535389e-07, -0.0001983642578125, -2.86102294921875e-05, -2.288818359375e-05, -0.000179290771484375, -9.536714060232043e-06, -6.103515625e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.000240325927734375, 0.0, -6.663799285888672e-05, -4.172325134277344e-06, -0.014604568481445312, -9.5367431640625e-06, -0.0004100799560546875, -3.24249267578125e-05, -0.00029277801513671875, 0.0, -0.00077056884765625, -3.814697265625e-05, -0.00018310546875, 0.0, -0.00015091896057128906, -1.1563301086425781e-05, -0.000774383544921875, -0.0003414154052734375, -1.9073486328125e-06, -9.34600830078125e-05, -4.1842453356366605e-05, -1.3351374946068972e-05, -0.5549716949462891, -1.0626087188720703, -7.2479248046875e-05, -0.0429534912109375, -0.00255584716796875, -3.0517578125e-05, 0.0, -0.15800857543945312, 0.0, -0.17930221557617188, -1.1920928244535389e-07, -0.7048895955085754, 0.0, -0.009340286254882812, -5.91278076171875e-05, -0.001399993896484375, -0.0002040863037109375, -9.918212890625e-05, -0.0020818710327148438, 0.0, -0.1529480218887329, 0.0, -0.5404196977615356, 0.0, -0.026963233947753906, -6.866455078125e-05, -5.91278076171875e-05, 0.0], "score": -19.795018019431915, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "choose_option", "_type": "Attribute", "value": {"attr": "agent", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "args": [{"_type": "Template38", "hole2": [{"_type": "Template38_expr_seq", "hole0": "Nourish"}], "hole0": "Nourish"}, {"_type": "Name", "id": "player"}]}, "targets": [{"_type": "Name", "id": "option"}]}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "hero", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}, {"_type": "ClassDef", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "name": "Wisps5", "body": [{"hole4": [{"_type": "NameConstant", "value": true}], "hole1": 0, "_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "arg": "target_func"}], "hole0": "Nourish Mana 2 Damage"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole2": 4, "hole1": "increase_health", "hole0": {"_type": "Name", "id": "target"}}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "hand", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}, {"_type": "ClassDef", "bases": [{"_type": "Name", "id": "ChoiceCard"}], "name": "Wisps5", "body": [{"hole4": [{"_type": "NameConstant", "value": true}], "hole1": 0, "_type": "Template5", "hole2": "DRUID", "hole3": "COMMON", "hole5": [{"_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "arg": "target_func"}], "hole0": "Nourish Mana 2 Damage"}, {"_type": "FunctionDef", "name": "use", "body": [{"_type": "Expr", "value": {"_type": "Template31", "hole2": 4, "hole1": "increase_health", "hole0": {"_type": "Name", "id": "target"}}}, {"_type": "Assign", "value": {"_type": "NameConstant", "value": true}, "targets": [{"attr": "hand", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}, {"_type": "arg", "arg": "game"}]}}]}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "DRUID", "hole3": "RARE", "hole1": 5, "hole0": "Nourish"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "Nourish"}, "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        option = player.agent.choose_option([Nourish(), Nourish()], player)\n        player.hero = True\n\n\n        class Wisps5(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 2 Damage', 0,\n                    CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, True,\n                    target_func=hearthbreaker.targeting.\n                    find_minion_spell_target)\n\n            def use(self, player, game):\n                target.increase_health(4)\n                player.hand = True\n\n\n        class Wisps5(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Nourish Mana 2 Damage', 0,\n                    CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, True,\n                    target_func=hearthbreaker.targeting.\n                    find_minion_spell_target)\n\n            def use(self, player, game):\n                target.increase_health(4)\n                player.hand = True\n", "choice_history": [70, 149, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 253, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 75, 102, 237, 44, 134, "option", "<EOS>", 16, 110, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "agent", "<EOS>", "choose_option", "<EOS>", 238, 61, 199, "Nourish", "<EOS>", 237, 62, 202, "Nourish", "<EOS>", 44, 134, "player", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", 22, 135, "True", "<EOS>", 78, 112, "Wisps5", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "2", " ", "Damage", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", 22, 135, "True", "<EOS>", 78, 112, "Wisps5", "<EOS>", 237, 44, 134, "Choice", "Card", "<EOS>", 250, 94, 207, "Nourish", " ", "Mana", " ", "2", " ", "Damage", "<EOS>", "0", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", 237, 45, 135, "False", "<EOS>", 244, 68, 227, "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 81, 117, "use", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "player", "<EOS>", 224, "game", "<EOS>", 250, 79, 115, 29, 190, 21, 134, "target", "<EOS>", "increase_health", "<EOS>", "4", "<EOS>", 75, 102, 237, 36, 103, 21, 134, "player", "<EOS>", "hand", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"score_history": [-0.005265235900878906, -0.00064849853515625, -0.19934578239917755, -7.366940553765744e-05, -0.0009428262710571289, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.000461578369140625, -0.0005321502685546875, -6.329824827844277e-05, 0.0, -0.0350041389465332, -6.437280717364047e-06, -0.6895724534988403, 0.0, -0.000648259068839252, 0.0, -0.0016137361526489258, -1.9073486328125e-06, -1.1563301086425781e-05, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -1.33514404296875e-05, -1.7404556274414062e-05, -0.5990743637084961, -0.0003528594970703125, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -5.7220458984375e-06, -1.3470649719238281e-05, -5.841255187988281e-06, -2.8848648071289062e-05, -2.6702880859375e-05, -1.7762164134182967e-05, -0.0003204345703125, -1.030257225036621, -6.4849853515625e-05, -0.0001068115234375, -1.9073486328125e-06, -0.10994529724121094, -1.9073486328125e-06, -0.4401674270629883, -3.814697265625e-06, -0.0001049041748046875, 0.0, -0.009943008422851562, 0.0, -0.012225508689880371, -3.814697265625e-06, -0.0015735626220703125, -0.10728263854980469, -1.9073486328125e-05, -0.1268177032470703, -4.76837158203125e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.1258707046508789, -3.814697265625e-06, -0.49563753604888916, -9.536738616588991e-07, -0.4028472900390625, -1.9073486328125e-06, -0.002742767333984375, -5.7220458984375e-06, -0.0520477294921875, -1.1444091796875e-05, -0.0005807876586914062, 0.0, -0.001495361328125, -2.3841855067985307e-07], "score": -4.454070756890786, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "For", "target": {"_type": "Name", "id": "minion"}, "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole1": "<UNK>", "hole0": {"_type": "Name", "id": "minion"}}}], "iter": {"attr": "minions", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, {"_type": "Expr", "value": {"_type": "Template36", "hole1": "draw", "hole0": {"_type": "Name", "id": "player"}}}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "SHAMAN", "hole3": "EPIC", "hole1": 0, "hole0": "Preparation"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "Preparation"}, "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.<UNK>()\n        player.draw()\n", "choice_history": [70, 149, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 249, 89, 154, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 80, 116, 21, 134, "minion", "<EOS>", 13, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 249, 79, 115, 31, 195, 21, 134, "minion", "<EOS>", "<UNK>", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"score_history": [-0.0001087188720703125, -0.021558761596679688, -0.0012921186862513423, -9.464855247642845e-05, -1.9550323486328125e-05, -0.0006691752350889146, -6.318082796497038e-06, -0.1675395965576172, -0.0007305145263671875, -0.0014019012451171875, -1.1920928244535389e-07, 0.0, -2.8610174922505394e-06, -2.9802276912960224e-06, -0.09258079528808594, 0.0, -0.005476117134094238, 0.0, -0.01015376765280962, 0.0, -0.003814697265625, -0.0001468658447265625, -0.0001811981201171875, -0.000110626220703125, -1.33514404296875e-05, -0.00038909912109375, -0.000843048095703125, -0.00299835205078125, 0.0, -0.013434529304504395, -9.5367431640625e-06, -0.00022303468722384423, 0.0, -0.003913758788257837, 0.0, -0.14051377773284912, 0.0, -0.0001316070556640625, -6.103515625e-05, -2.6702880859375e-05, -0.04192996025085449, -0.0005168914794921875, -0.0003814697265625, -7.62939453125e-06, -1.33514404296875e-05, 0.0, -7.915496826171875e-05, -1.9073486328125e-06, -0.000453948974609375, 0.0, -0.001068115234375, -0.0009708404541015625, -0.00022125244140625, -0.003446214599534869, -7.867813110351562e-06, -0.0001583099365234375, -0.00040435791015625, -0.00055694580078125, -2.47955322265625e-05, -0.0004405975341796875, -1.9073486328125e-06, -3.62396240234375e-05, -0.0029554367065429688, 0.0, -0.012546539306640625, -1.52587890625e-05, -9.918212890625e-05, -0.0001125335693359375, -5.53131103515625e-05, -9.34600830078125e-05, -0.0010528564453125, -0.0003795623779296875, -3.814697265625e-06, -0.0007406473159790039, -1.1444091796875e-05, -0.00024579852470196784, 0.0, -0.003251669928431511, 0.0, -0.3703627586364746, -1.9073486328125e-06, -6.103515625e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.03961753845214844, -0.0010223388671875, -0.0003376007080078125, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -0.00010204315185546875, -1.9073486328125e-06, -0.0003070831298828125, 0.0, -0.000919342041015625, -0.0002346038818359375, -0.011263847351074219, 0.0, -0.006653785705566406, -0.000316619873046875, -0.6919279098510742, -0.0001316070556640625, -0.0005517005920410156, -1.9073486328125e-06, -1.71661376953125e-05, -0.42135047912597656, 0.0, -0.09550285339355469, -2.09808349609375e-05, -7.2479248046875e-05, -0.0002841949462890625, -6.29425048828125e-05, -5.91278076171875e-05, -0.001590728759765625, -0.0006256103515625, -5.7220458984375e-06, -0.0010415315628051758, -5.7220458984375e-06, -0.00017559264961164445, 0.0, -0.0031089764088392258, 0.0, -0.3088982105255127, -1.9073486328125e-06, -3.4332275390625e-05, -4.1961669921875e-05, -3.814697265625e-05, -0.039595723152160645, -0.0010175704956054688, -0.0002689361572265625, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -0.00031280517578125, 0.0], "score": -2.5389087448370375, "model_output": {"hole4": "player", "hole1": "SecretCard", "hole6": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "minion_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "PALADIN", "hole1": 1, "hole0": "Repentance"}], "hole3": "activate", "hole0": "Repentance", "hole7": [{"_type": "FunctionDef", "name": "deactivate", "body": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "minion_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}, {"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "minion_played"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "hole1": "bind", "hole0": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "player"}]}}]}, "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def _reveal(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n", "choice_history": [70, 148, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 249, 88, 153, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 250, 81, 117, "deactivate", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>", 81, 117, "_reveal", "<EOS>", 1, 225, 232, 224, "self", "<EOS>", 224, "player", "<EOS>", 249, 93, 196, 13, 103, 13, 103, 21, 134, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 238, 47, 143, "minion_played", "<EOS>", 36, 103, 21, 134, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"score_history": [-9.5367431640625e-06, -0.0008411407470703125, -0.0004161922261118889, -0.001021885545924306, -0.0009022473241202533, -0.007167530711740255, -0.0003636414185166359, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -0.0013866424560546875, -0.001361846923828125, -1.6689286894688848e-06, -0.0002175569097744301, -1.6808504369691946e-05, -8.7738037109375e-05, -0.00013184545969124883, -0.0010166168212890625, -0.005998015403747559, -1.9073486328125e-06, -0.3939327001571655, 0.0, -0.0009485483169555664, 0.0, -0.002673029899597168, 0.0, -2.861022494471399e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.04976177215576172, -0.000156402587890625, -1.1920928244535389e-07, -2.384185791015625e-06, -5.245194188319147e-06, 0.0, -0.009681344032287598, -1.9073486328125e-06, -0.0001087188720703125, -0.015977859497070312, -0.00021016597747802734, -7.2479248046875e-05, -1.1444091796875e-05, -0.08842277526855469, -1.9073486328125e-06, -0.01748330146074295, -0.285738468170166, -0.0003554821014404297, -0.17889976501464844, -3.814697265625e-06, -0.2602224349975586, -0.00010323524475097656, -0.0001373291015625], "score": -1.3259002783815887, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "auras", "hole3": {"_type": "Template38", "hole1": [{"_type": "Template39", "hole0": "<UNK>Deathrattle"}, {"_type": "Template39", "hole0": "PlayerSelector"}], "hole0": "Aura"}, "hole1": 1, "hole0": 0}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "PRIEST", "hole3": "EPIC", "hole1": 0, "hole0": "Shadow of Nothing"}], "hole3": "create_minion", "hole0": "ShadowOfNothing"}, "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "choice_history": [70, 147, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 249, 89, 154, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 32, 200, "Aura", "<EOS>", 238, 63, 205, "<UNK>", "Deathrattle", "<EOS>", 63, 205, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"score_history": [-0.00048828125, -2.09808349609375e-05, -5.483620952873025e-06, -5.8410845667822286e-05, -2.978311385959387e-06, -0.00026929363957606256, 0.0, -5.7220458984375e-06, -0.001186370849609375, -5.340576171875e-05, -1.5020257706055418e-05, -1.1920928244535389e-07, -1.1920923981278975e-07, -4.0531076592742465e-06, -0.3046915531158447, 0.0, -0.0001277923583984375, 0.0, -9.5367431640625e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.05718994140625e-05, -7.62939453125e-06, -1.263618378288811e-05, -1.9073486328125e-06, -0.0030025243759155273, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1920928244535389e-07, -0.0020694732666015625, -4.57763671875e-05, -1.9073486328125e-06, -6.4849853515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -8.547306060791016e-05, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -7.867813110351562e-06, -3.814697265625e-06, -1.0371197276981547e-05, -0.0003052949905395508, -0.008741378784179688, -0.0003261566162109375, -0.0001010894775390625, -5.91278076171875e-05, -0.0001926422119140625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.53131103515625e-05, -1.1920928244535389e-07, -0.00019478797912597656, -4.5299530029296875e-06, -1.1444091796875e-05, -0.012334823608398438, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0001145600836025551, -3.099436753473128e-06, -0.0014052429469302297, -1.1920928244535389e-07, -4.00543212890625e-05, 0.0, -4.76837158203125e-05, 0.0, -0.5057382583618164, -2.86102294921875e-05, -0.020355224609375, -7.62939453125e-06, -0.013738632202148438, -3.814697265625e-06, -0.000347137451171875, 0.0, -0.6113089323043823, -5.7220458984375e-06], "score": -1.4879767893559475, "model_output": {"hole4": "player", "hole1": "SpellCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Template37", "hole2": [{"_type": "Template31", "hole2": 2, "hole1": "effective_spell_damage", "hole0": {"_type": "Name", "id": "player"}}, {"_type": "Name", "id": "self"}], "hole1": "damage", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, {"_type": "Expr", "value": {"_type": "Template36", "hole1": "draw", "hole0": {"_type": "Name", "id": "player"}}}], "_type": "Template1", "hole2": [{"hole4": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole1": 2, "_type": "Template11", "hole2": "WARRIOR", "hole3": "target_func", "hole0": "Slam"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "Slam"}, "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        player.draw()\n", "choice_history": [70, 149, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 249, 87, 152, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 103, 13, 103, 21, 134, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 251, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_spell_damage", "<EOS>", "2", "<EOS>", 44, 134, "self", "<EOS>", 79, 115, 31, 195, 21, 134, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score_history": [-3.814697265625e-06, -0.000377655029296875, -1.41858699862496e-05, -0.00010752541129477322, -8.344646857949556e-07, -3.814697265625e-06, -2.3841855067985307e-07, -4.9591064453125e-05, -0.00041961669921875, -0.47721195220947266, -0.000835418701171875, -0.0002149280917365104, -8.440018427791074e-05, -9.65590606938349e-06, -0.001261112978681922, -1.8358150555286556e-05, -0.06996051222085953, -3.397439286345616e-05, -5.53131103515625e-05, -0.021902084350585938, -0.000598907470703125, -0.2176535725593567, -0.0041234297677874565, -0.17324966192245483, -7.62939453125e-06, 0.0, -0.009798049926757812, -6.67572021484375e-05, -3.24249267578125e-05, -0.0001989603042602539, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.0022029876708984375, -1.1563301086425781e-05, -1.9073486328125e-06, -0.0002613067626953125, -1.52587890625e-05, -0.000911712646484375, -2.3841855067985307e-07, -0.0002117156982421875, -1.71661376953125e-05, -0.00010383128392277285, -0.00018227094551548362, -2.50339189733495e-06, -2.384185791015625e-06, 0.0, -5.674361455021426e-05, 0.0, -0.0002155303955078125, -0.003376007080078125, -3.62396240234375e-05, -0.0004940032958984375, -3.576272320060525e-06, 0.0, -1.1920928244535389e-07], "score": -0.9864109829387004, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 3, "hole0": 4}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "Template39", "hole0": "Frozen"}], "hole1": 4, "hole7": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "BothPlayer"}, "arg": "players"}, {"_type": "keyword", "value": {"_type": "Template39", "hole0": "UserPicker"}, "arg": "picker"}], "_type": "Template6", "hole2": "COMMON", "hole3": "Silence", "hole5": "CharacterSelector", "hole0": "Spellbreaker"}], "hole3": "create_minion", "hole0": "Spellbreaker"}, "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Frozen()),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "choice_history": [70, 147, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 237, 63, 205, "Frozen", "<EOS>", "Character", "Selector", "<EOS>", 245, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score_history": [-1.1444091796875e-05, -0.0001773834228515625, -6.41325386823155e-05, -2.3841855067985307e-07, -0.0007468141848221421, -2.3841855067985307e-07, 0.0, -2.3841855067985307e-07, -1.9073486328125e-06, -0.0030727386474609375, -0.39681196212768555, -3.933906555175781e-06, -0.0004285068716853857, -7.748603820800781e-06, -2.0265579223632812e-06, -1.06096622403129e-05, -8.344646857949556e-07, -0.029379988089203835, -0.0003654956817626953, -0.0024397368542850018, -0.23255038261413574, -0.00260162353515625, -0.19754505157470703, -0.0010013580322265625, -0.012952915392816067, -0.000836491584777832, -0.008695721626281738, -0.01649000309407711, -1.9073486328125e-06, -0.021537765860557556, -1.9073486328125e-05, -0.0001379251480102539, -0.06058216094970703, -0.0005550384521484375, -3.814697265625e-06, -0.01683187484741211, -3.814697265625e-06, -0.038702964782714844, -2.09808349609375e-05, -0.4022994041442871, -0.20207852125167847, -5.91278076171875e-05, -3.933904736186378e-06, -1.9073486328125e-06, -6.234567990759388e-05, 0.0, -1.9073486328125e-06, -0.01082611083984375, -3.24249267578125e-05, -0.0018385648727416992, -1.9073486328125e-06, 0.0, -1.9073486328125e-06], "score": -1.6618049096910283, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 3, "hole0": 2}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "Template34", "hole1": 1, "hole0": "SpellDamage"}], "hole1": 2, "hole7": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "IsSpell"}, "arg": "condition"}], "_type": "Template6", "hole2": "RARE", "hole3": "Give", "hole5": "MinionSelector", "hole0": "Sunfury Protector"}], "hole3": "create_minion", "hole0": "SunfuryProtector"}, "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)),\n            MinionSelector(condition=IsSpell())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "choice_history": [70, 147, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 237, 59, 193, "Spell", "Damage", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "condition", "<EOS>", 33, 205, "Is", "Spell", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"score_history": [-3.814697265625e-06, -0.0003528594970703125, -5.531158240046352e-05, -1.1920928244535389e-07, -3.707371070049703e-05, -5.960462772236497e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -0.001270294189453125, -1.0508761405944824, 0.0, -0.00044900219654664397, -4.291534423828125e-06, -2.384185791015625e-06, -1.1925385479116812e-07, -1.1920928244535389e-07, -0.02709595113992691, -5.841255187988281e-06, -0.012474911287426949, -2.8252303309272975e-05, -0.0941629409790039, -0.0018482208251953125, -0.018767356872558594, -8.58306884765625e-05, -1.9073486328125e-06, -4.6133995056152344e-05, -0.0034704208374023438, 0.0, -0.09377288818359375, -0.00399017333984375, -0.000415802001953125, -0.013008950278162956, -9.655952453613281e-06, -0.015851974487304688, -0.0002613067626953125, -0.001007080078125, -0.003551483154296875, -0.0004253387451171875, -0.06170688197016716, -0.019676178693771362, -0.006270627025514841, -0.0015773773193359375, -7.62939453125e-06, -0.05315227061510086, -6.890296936035156e-05, -3.814697265625e-06, -0.00319671630859375, -0.0005588531494140625, -0.6572595834732056, -8.0108642578125e-05, -0.00994873046875, 0.0, -0.06337235867977142, -5.3882598876953125e-05, -7.62939453125e-05, -0.004482269287109375, -0.055657386779785156, -0.4059751629829407, -0.0003160351188853383, -0.0001354217529296875, -4.708558844868094e-05, -0.0001277923583984375, -3.576278118089249e-07, -0.01779460906982422, -0.0037212371826171875, -5.7220458984375e-06, -0.031395912170410156, -2.7418097943154862e-06, -5.7220458984375e-06, -2.6702880859375e-05, -0.000549553195014596, -0.0019261621637269855, -9.536714060232043e-06, -3.6954646930098534e-05, 0.0, -2.527233664295636e-05, 0.0, -1.1444091796875e-05, -0.0038814544677734375, -4.57763671875e-05, -5.9604644775390625e-06, -3.576278118089249e-07, -1.3234472135081887e-05, -1.1920928244535389e-07], "score": -2.7466078025467198, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 3, "hole0": 3}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}, "keywords": [{"_type": "keyword", "value": {"_type": "List", "elts": [{"_type": "Template29", "hole2": [{"_type": "Str", "s": "mana"}, {"_type": "Template39", "hole0": "SelfSelector"}], "hole1": {"_type": "Name", "id": "Attribute"}, "hole0": "ManaSquirrel"}, {"_type": "Template38_expr_seq", "hole0": "IsMinion"}]}, "arg": "conditions"}]}], "hole1": 3, "hole7": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "UserPicker"}, "arg": "picker"}], "_type": "Template6", "hole2": "LEGENDARY", "hole3": "Transform", "hole5": "MinionSelector", "hole0": "Tinkmaster Overspark"}], "hole3": "create_minion", "hole0": "TinkmasterOverspark"}, "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaSquirrel(Attribute('mana', SelfSelector())),\n            IsMinion()])), MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "choice_history": [70, 147, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Transform", "<EOS>", 237, 39, 109, 21, 134, "Card", "Query", "<EOS>", 244, 68, 227, "conditions", "<EOS>", 19, 129, 238, 55, 186, "Mana", "Squirrel", "<EOS>", 21, 134, "Attribute", "<EOS>", 238, 47, 143, "mana", "<EOS>", 63, 205, "Self", "Selector", "<EOS>", 62, 202, "Is", "Minion", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "3", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"score_history": [-7.62939453125e-06, -0.025025367736816406, -0.0002450642641633749, -3.1590294383931905e-05, -0.005365609657019377, -3.4332275390625e-05, -4.5299530029296875e-06, -0.0004425048828125, -4.57763671875e-05, -0.0003643035888671875, -7.152555099310121e-07, 0.0, -5.960441740171518e-07, -4.768370445162873e-07, -0.009214639663696289, -3.814697265625e-06, -0.0040476322174072266, 0.0, -0.0027027130126953125, 0.0, -0.0002257823944091797, 0.0, -0.00041961669921875, -5.53131103515625e-05, -0.00044476985931396484, -9.655952453613281e-06, -0.07522296905517578, -0.08242416381835938, -1.52587890625e-05, -0.0004329681396484375, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -7.62939453125e-06, -0.0043163299560546875, -0.007844924926757812, -0.00093841552734375, -0.014263510704040527, 0.0, -9.72747802734375e-05, -0.0007572174072265625, -0.0054531097412109375, -4.9591064453125e-05, -8.213519322453067e-05, -1.33514404296875e-05, -0.0003795623779296875, -0.1908550262451172, -3.814697265625e-06, -1.33514404296875e-05, -0.3479318618774414, -1.33514404296875e-05, -0.0019855499267578125, -0.0014019012451171875, -0.000476837158203125, -0.6370143890380859, -0.0022945404052734375, -0.0002899169921875, -0.005374908447265625, -0.11290264129638672, -0.0009002685546875, -3.814697265625e-06, 0.0, -0.27419614791870117, -3.814697265625e-06, -6.29425048828125e-05, -0.009945869445800781, 0.0, -0.12777471542358398, 0.0, -0.0037164688110351562, -3.814697265625e-06, -0.18108856678009033, -3.24249267578125e-05, -0.041403770446777344, -0.000698089599609375, -0.0003223419189453125, -0.00031280517578125, -0.00020599365234375, -3.4332275390625e-05, 0.0, -0.01850759983062744, 0.0, -4.5418728404911235e-05, 0.0, -0.04457569122314453, -0.06192588806152344, -8.7738037109375e-05, -0.003429412841796875, -8.0108642578125e-05, -0.3221111297607422, -3.24249267578125e-05, -3.886210106429644e-05, -1.9073486328125e-06, -0.0019074678421020508, -1.9073486328125e-06, -0.08362960815429688, -7.62939453125e-06, -0.024488449096679688, -7.62939453125e-06, -0.39101505279541016, 0.0, -0.03719067573547363, 0.0, -0.6120643615722656, 0.0, -1.1576757431030273, 0.0, -9.5367431640625e-06, -0.07047748565673828, -0.00084686279296875, -5.9604644775390625e-05, 0.0, -0.04534126818180084, -0.24306797981262207, 0.0, -0.580544650554657, -1.9073486328125e-06, -0.6382560729980469, -6.866455078125e-05, -0.0001316070556640625, -1.9073486328125e-05, -0.08640289306640625, 0.0, -0.2969169616699219, -7.62939453125e-06, -0.755301833152771, 0.0, -0.7230206727981567, -2.3841855067985307e-07, -2.288818359375e-05, -0.5111608505249023, -0.000278472900390625, -3.0517578125e-05, -5.7220458984375e-06, -6.67572021484375e-05, 0.0, -0.03693342208862305, -3.2186455882765586e-06, -0.0925455093383789, -2.2649765014648438e-06, -0.0001010894775390625, -1.9073486328125e-06, -0.003975868225097656, -1.9073486328125e-06, -0.09240341186523438, -0.000598907470703125, -0.00030517578125, -7.62939453125e-06, -0.48009586334228516, -0.000125885009765625, -0.0001697540283203125, 0.0, -0.017576217651367188, 0.0, -1.1444091796875e-05, -4.57763671875e-05, -7.05718994140625e-05, -0.0596466064453125, 0.0, -0.0010055303573608398, 0.0, -0.031173229217529297, 0.0, -1.9073486328125e-06, -0.04806327819824219, -0.0002269744873046875, -0.000652313232421875, -1.33514404296875e-05, -0.00796496868133545, -4.00543212890625e-05, -0.0020017623901367188, -0.035630226135253906, -8.96453857421875e-05, -3.4332275390625e-05, -0.004039764404296875, -5.7220458984375e-06, -1.9933961629867554, 0.0, -0.0050487518310546875, -0.0031843185424804688, -8.20159912109375e-05, -7.62939453125e-06, -0.0020198822021484375, -5.7220458984375e-06, -0.5297832489013672, 0.0, -0.0075836181640625, 0.0, -0.0001621246337890625, -1.1444091796875e-05, -7.62939453125e-06, -0.00177764892578125, -1.9073486328125e-06, -0.00017547607421875, 0.0, -0.023525238037109375, 0.0, -0.0030890703201293945, 0.0, -0.5211682319641113, 0.0, -1.3413114547729492, -2.288818359375e-05, -4.00543212890625e-05, 0.0, -0.0073778629302978516, 0.0, -0.09464740753173828, -0.0003261566162109375, -5.7220458984375e-05, 0.0, -0.0003170967102050781, 0.0, -0.0001201629638671875, -0.000698089599609375, 0.0, -8.094291115412489e-05, -1.52587890625e-05, -0.02232837677001953, -7.62939453125e-06, -0.7335964441299438, -1.9073486328125e-06, -0.030905723571777344, -0.9452390670776367, -0.000118255615234375, -4.76837158203125e-05, -0.0004291534423828125, -1.9073486328125e-06, -0.03241586685180664, 0.0, -0.46237850189208984, 0.0, -0.0001163482666015625, 0.0, -0.6082038879394531, -9.5367431640625e-06, -5.7220458984375e-05, 0.0, -0.17256546020507812, 0.0, -0.013875961303710938, 0.0, -0.023431768640875816, 0.0, -0.06993842124938965, 0.0], "score": -17.460508023104325, "model_output": {"hole4": "player", "hole1": "SecretCard", "hole6": [{"_type": "Expr", "value": {"_type": "Template28", "hole2": "player", "hole3": "game", "hole1": "use", "hole0": {"_type": "Template39", "hole0": "super"}}}], "_type": "Template1", "hole2": [{"_type": "Template15", "hole2": "MAGE", "hole3": "RARE", "hole1": 3, "hole0": "Vaporize"}], "hole3": "use", "hole5": [{"_type": "arg", "arg": "game"}], "hole0": "Vaporize", "hole7": [{"_type": "FunctionDef", "name": "_reveal", "body": [{"_type": "If", "test": {"_type": "BoolOp", "values": [{"_type": "Call", "func": {"_type": "Name", "id": "isinstance"}, "args": [{"_type": "Name", "id": "attacker"}, {"_type": "Name", "id": "Minion"}]}, {"_type": "UnaryOp", "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}}, "op": {"_type": "Not"}}], "op": {"_type": "And"}}, "body": [{"_type": "Expr", "value": {"_type": "Template36", "hole1": "reveal", "hole0": {"_type": "Template39", "hole0": "super"}}}, {"_type": "Template37", "hole2": [{"_type": "Template23", "hole2": 3, "hole1": "ChangeAttack", "hole0": "Buff"}], "hole1": "add_buff", "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, {"_type": "Template37", "hole2": [{"_type": "Template31", "hole2": 0, "hole1": "effective_heal_power", "hole0": {"_type": "Name", "id": "player"}}, {"_type": "Name", "id": "self"}], "hole1": "heal", "hole0": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}]}], "args": {"_type": "arguments", "args": [{"_type": "arg", "arg": "self"}, {"_type": "arg", "arg": "attacker"}, {"_type": "arg", "arg": "index"}]}}, {"_type": "If", "test": {"_type": "Compare", "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}, "ops": [{"_type": "Lt"}], "comparators": [{"_type": "Num", "n": 7}]}, "body": [{"_type": "Assign", "value": {"_type": "Call", "func": {"attr": "copy", "_type": "Attribute", "value": {"_type": "Name", "id": "copy"}}, "args": [{"attr": "Secret", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}]}, "targets": [{"_type": "Name", "id": "minion_card"}]}]}, {"_type": "For", "target": {"_type": "Name", "id": "i"}, "body": [{"_type": "Assign", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}}, "targets": [{"_type": "Name", "id": "<UNK>"}]}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}}]}, "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n    def _reveal(self, attacker, index):\n        if isinstance(attacker, Minion) and not attacker.<UNK>:\n            super().reveal()\n            self.target.add_buff(Buff(ChangeAttack(3)))\n            player.hero.heal(player.effective_heal_power(0), self)\n    if len(player.minions) < 7:\n        minion_card = copy.copy(game.other_player.Secret)\n    for i in range(0, 2):\n        <UNK> = self.player.game.other_player\n", "choice_history": [70, 150, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 249, 89, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 231, 224, "game", "<EOS>", 249, 79, 115, 27, 184, 33, 205, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 251, 81, 117, "_reveal", "<EOS>", 1, 225, 233, 224, "self", "<EOS>", 224, "attacker", "<EOS>", 224, "index", "<EOS>", 249, 82, 120, 15, 106, 2, 238, 39, 110, 21, 134, "isinstance", "<EOS>", 238, 44, 134, "attacker", "<EOS>", 44, 134, "Minion", "<EOS>", 64, 222, 98, 13, 103, 21, 134, "attacker", "<EOS>", "<UNK>", "<EOS>", 251, 79, 115, 31, 195, 33, 205, "super", "<EOS>", "reveal", "<EOS>", 93, 196, 13, 103, 21, 134, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 237, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "3", "<EOS>", 93, 196, 13, 103, 21, 134, "player", "<EOS>", "hero", "<EOS>", "heal", "<EOS>", 238, 56, 190, 21, 134, "player", "<EOS>", "effective_heal_power", "<EOS>", "Secret", "<EOS>", 44, 134, "self", "<EOS>", 82, 120, 17, 113, 16, 110, 21, 134, "len", "<EOS>", 237, 36, 103, 21, 134, "player", "<EOS>", "minions", "<EOS>", 234, 10, 237, 46, 139, "7", "<EOS>", 249, 75, 102, 237, 44, 134, "minion_card", "<EOS>", 16, 110, 13, 103, 21, 134, "copy", "<EOS>", "copy", "<EOS>", 237, 36, 103, 13, 103, 21, 134, "game", "<EOS>", "other_player", "<EOS>", "Secret", "<EOS>", 80, 116, 21, 134, "i", "<EOS>", 16, 110, 21, 134, "range", "<EOS>", 238, 46, 139, "0", "<EOS>", 46, 139, "2", "<EOS>", 249, 75, 102, 237, 44, 134, "<UNK>", "<EOS>", 13, 103, 13, 103, 13, 103, 21, 134, "self", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>"]}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"score_history": [-5.7220458984375e-06, -0.00066375732421875, -4.327203714638017e-05, -1.1920928244535389e-07, -3.051731619052589e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.000274658203125, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, 0.0, -4.3392181396484375e-05, -8.344646857949556e-07, -2.3484131816076115e-05, 0.0, -2.8967857360839844e-05, 0.0, -3.230571746826172e-05, 0.0, -7.62939453125e-06, -4.57763671875e-05, -3.4332275390625e-05, -4.649161837733118e-06, -1.4066597032069694e-05, -1.9073486328125e-05, -2.3007127310847864e-05, -0.02829134464263916, -9.5367431640625e-06, -0.00037384033203125, -1.9073486328125e-05, -0.0002372264862060547, -1.8358225133852102e-05], "score": -0.030308602574315557, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}, "hole1": 1, "hole0": 2}], "_type": "Template1", "hole2": [{"_type": "Template14", "hole2": "ALL", "hole1": 1, "hole0": "Worgen Infiltrator"}], "hole3": "create_minion", "hole0": "WorgenInfiltrator"}, "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "choice_history": [70, 147, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 249, 88, 153, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 22, 135, "True", "<EOS>"]}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"score_history": [-1.9073486328125e-06, -7.82012939453125e-05, -0.000327652640407905, -1.6689286894688848e-06, -8.737691678106785e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -0.0003871917724609375, -0.7531394958496094, 0.0, -0.00022684306895826012, 0.0, -1.1920928244535389e-07, -6.413492519641295e-05, -3.576278118089249e-07, -8.237361180363223e-05, 0.0, -0.3755883276462555, -0.0013822317123413086, -5.7220458984375e-06, -0.13016891479492188, -8.0108642578125e-05, -6.4849853515625e-05, -0.00022125244140625, -5.340576171875e-05, -8.70227740961127e-05, -5.7220458984375e-06, -0.0019989009015262127, -0.0026416778564453125, 0.0, -0.028062812983989716, -1.9073486328125e-06, -0.000732421875, -0.000186920166015625, -0.0001811981201171875, -3.814697265625e-06, -0.00019097328186035156, -0.0018901824951171875, -1.9073486328125e-06, -0.11158692836761475, -1.9073486328125e-06, -0.2666134238243103, -1.9073486328125e-06, -7.62939453125e-06, -0.048648834228515625, -0.0011749267578125, 0.0, -0.20934104919433594, -3.814697265625e-06, -0.0006561279296875, -7.62939453125e-06, -0.0004960298538208008, -7.68899917602539e-05, 0.0, -3.576278118089249e-07, 0.0, -4.9591064453125e-05, 0.0, -1.33514404296875e-05, -0.00713348388671875, -3.814697265625e-06, -0.00028955936431884766, 0.0, -3.814697265625e-06, 0.0], "score": -1.944089305883935, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 4, "hole0": 5}], "_type": "Template1", "hole2": [{"hole4": [{"_type": "List", "elts": [{"_type": "Template23", "hole2": 1, "hole1": "ChangeAttack", "hole0": "Buff"}, {"_type": "Template23", "hole2": 1, "hole1": "ChangeHealth", "hole0": "Buff"}]}], "hole1": 5, "hole7": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "UserPicker"}, "arg": "picker"}], "_type": "Template6", "hole2": "COMMON", "hole3": "Give", "hole5": "MinionSelector", "hole0": "Blackwing Corruptor"}], "hole3": "create_minion", "hole0": "BlackwingCorruptor"}, "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker()))\n            )\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "choice_history": [70, 147, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 249, 95, 216, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Give", "<EOS>", 237, 42, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", "Minion", "Selector", "<EOS>", 244, 68, 227, "picker", "<EOS>", 33, 205, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "5", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"score_history": [-0.004253387451171875, -0.0001163482666015625, -2.86102294921875e-05, -0.000621795654296875, -5.340576171875e-05, -1.1086402082582936e-05, -2.50339189733495e-06, -1.0728830375228426e-06, -1.71661376953125e-05, -2.86102294921875e-05, 0.0, -7.151829777285457e-06, -7.653236389160156e-05, 0.0, -0.00064849853515625, -0.0006122589111328125, -7.82012939453125e-05, -1.7881377516459906e-06, -4.339209772297181e-05, -2.384185791015625e-06, 0.0, -2.8170275072625373e-06, -9.298280929215252e-06, -2.3484210032620467e-05, -1.9073486328125e-06, -0.0008527040481567383, 0.0, -0.0002964734158013016, -5.841255187988281e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.20642852783203125, 0.0, -0.0013506412506103516, 0.0, -0.0646829605102539, -5.340576171875e-05, -0.0001506805419921875, -7.62939453125e-06, -0.0014388561248779297, -1.9073486328125e-06, -0.04197120666503906, -0.017606735229492188, -7.43865966796875e-05, -0.07999992370605469, -0.02272319793701172, -0.005532264709472656, -0.6570194959640503, -0.0020422935485839844, -0.28053876757621765, -1.7046926586772315e-05, -0.6175050735473633, -0.0005950927734375, -0.1552727073431015, -3.4689903259277344e-05, -0.2368861436843872, -0.005164146423339844, 0.0, -0.3368684649467468, 0.0, -0.2067880630493164, -0.017248153686523438, -2.86102294921875e-05, -3.814697265625e-06, -0.1402440220117569, -8.20159912109375e-05, -9.5367431640625e-06, -0.021694183349609375, -4.9591064453125e-05, 0.0, -0.044078826904296875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.008371591567993164, -1.1563283806026448e-05, -3.62396240234375e-05, -0.0003871917724609375, -0.0001697540283203125, -1.072882923836005e-06, -1.1920928244535389e-07, -0.0001037047550198622, -8.344646857949556e-07], "score": -3.181127168020332, "model_output": {"_type": "Module", "body": [{"_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "name": "DrakonidCrusher", "body": [{"hole8": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "List", "elts": [{"_type": "Template34", "hole1": 1, "hole0": "Heal"}, {"_type": "Template23", "hole2": 2, "hole1": "ChangeHealth", "hole0": "Give"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "keywords": [{"_type": "keyword", "value": {"_type": "Template39", "hole0": "BothPlayer"}, "arg": "players"}]}]}, "hole4": "minion_type", "hole1": 6, "hole6": "PIRATE", "_type": "Template0", "hole2": "ALL", "hole3": "COMMON", "hole5": {"_type": "Name", "id": "MINION_TYPE"}, "hole0": "Drakonid Crusher", "hole7": "battlecry"}, {"_type": "Template8", "hole1": 6, "hole0": 6}]}]}, "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry([Heal(1), Give(ChangeHealth(2))], MinionSelector(\n            players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "choice_history": [69, 133, 249, 78, 112, "Drakonid", "Crusher", "<EOS>", 237, 44, 134, "Minion", "Card", "<EOS>", 250, 85, 146, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 134, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", "battlecry", "<EOS>", 16, 110, 21, 134, "Battlecry", "<EOS>", 238, 42, 129, 238, 59, 193, "Heal", "<EOS>", "1", "<EOS>", 51, 179, "Give", "<EOS>", "Change", "Health", "<EOS>", "2", "<EOS>", 39, 109, 21, 134, "Minion", "Selector", "<EOS>", 244, 68, 227, "players", "<EOS>", 33, 205, "Both", "Player", "<EOS>", 97, 219, "6", "<EOS>", "6", "<EOS>"]}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score_history": [-6.103515625e-05, -0.0009708404541015625, -4.637133679352701e-05, -0.00012921476445626467, -5.364412118069595e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -0.000133514404296875, -0.0047760009765625, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.0072460174560546875, -8.96453857421875e-05, -2.288818359375e-05, -2.3841855067985307e-07, -1.609315222594887e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.382817754347343e-05, 0.0, -0.00012969970703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -7.152557373046875e-05, 0.0, -0.03363978862762451, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.000568389892578125, 0.0, -0.11132431030273438, 0.0, -0.010046005249023438, -0.0002765655517578125, -5.53131103515625e-05, 0.0, -9.5367431640625e-06, -0.000640869140625, -0.0001983642578125, -0.0036163330078125, -2.503394853192731e-06, -0.00022206350695341825, 0.0, -0.00026416522450745106, 0.0, -3.0517578125e-05, -0.0052394866943359375, -0.00012969970703125, -3.5765515349339694e-07, 0.0, -4.065246321260929e-05, 0.0], "score": -0.1801411773278403, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template27", "hole1": 1, "hole0": 1}], "_type": "Template1", "hole2": [{"_type": "Template37", "hole2": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}], "hole3": [{"_type": "Template35", "hole0": "DEMON"}], "hole1": "__init__", "hole0": {"_type": "Template39", "hole0": "super"}}], "hole3": "create_minion", "hole0": "Imp"}, "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "choice_history": [70, 147, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 249, 93, 197, 33, 205, "super", "<EOS>", "__init__", "<EOS>", 241, 47, 143, "Imp", "<EOS>", 46, 139, "1", "<EOS>", 36, 103, 21, 134, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 36, 103, 21, 134, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 45, 135, "False", "<EOS>", 244, 67, 194, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 91, 183, "1", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"score_history": [-0.18024635314941406, -7.82012939453125e-05, -4.100715523236431e-05, -7.510183422709815e-06, -7.378782902378589e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.52587890625e-05, -0.08127880096435547, -4.9591064453125e-05, 0.0, -6.282311369432136e-05, -1.9073486328125e-06, 0.0, -1.2278576832613908e-05, -1.1920928244535389e-07, -0.8291209936141968, 0.0, -0.0004603862762451172, 0.0, -0.0040988922119140625, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -3.0517578125e-05, -0.0003681182861328125, -0.004245758056640625, 0.0, -5.7220458984375e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0001125335693359375, -0.01012420654296875, -0.0001354217529296875, -0.08019959926605225, 0.0, -6.127156666480005e-05, 0.0, -1.0373343229293823, -1.71661376953125e-05, -0.27425575256347656, -0.0004863739013671875, -0.15056324005126953, -0.21976184844970703, -8.7738037109375e-05, -0.0027091670781373978, -3.540512261679396e-05, -0.0023029299918562174, -0.008255600929260254, 0.0, -0.0477890744805336, -1.9073486328125e-06, -0.0023097991943359375, -2.6702880859375e-05, -4.38690185546875e-05, -1.9073486328125e-06, -0.0001194477008539252, -0.0012017488479614258, -3.814697265625e-06, -0.0770941898226738, -1.1444091796875e-05], "score": -3.0153373741043055, "model_output": {"hole4": "player", "hole1": "MinionCard", "hole6": [{"_type": "Template22", "hole2": "buffs", "hole3": {"_type": "List", "elts": [{"_type": "Template23", "hole2": 1, "hole1": "ChangeAttack", "hole0": "Buff"}, {"_type": "Template23", "hole2": 1, "hole1": "ChangeHealth", "hole0": "Buff"}]}, "hole1": 1, "hole0": 2}], "_type": "Template1", "hole2": [{"hole4": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole1": 1, "_type": "Template11", "hole2": "HUNTER", "hole3": "minion_type", "hole0": "Twilight Whelp"}], "hole3": "create_minion", "hole0": "TwilightWhelp"}, "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 1, buffs=[Buff(ChangeAttack(1)), Buff(ChangeHealth\n            (1))])\n", "choice_history": [70, 147, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 249, 87, 152, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "minion_type", "<EOS>", 13, 103, 21, 134, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 249, 90, 178, "2", "<EOS>", "1", "<EOS>", "buffs", "<EOS>", 19, 129, 238, 51, 179, "Buff", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 51, 179, "Buff", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>"]}]}
