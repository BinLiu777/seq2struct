{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"score": -0.12279552785388859, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "<UNK> Blade", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"n": 3, "_type": "Num"}, {"n": 4, "_type": "Num"}], "func": {"id": "Weapon", "_type": "Name"}, "_type": "Call"}, "_type": "Return"}], "name": "create_weapon", "_type": "FunctionDef"}], "name": "<UNK>Blade", "bases": [{"id": "WeaponCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "score_history": [-3.0517578125e-05, -5.340576171875e-05, -0.00028228759765625, -3.0517578125e-05, -5.7220458984375e-06, -3.278228541603312e-05, -0.00019298230472486466, -0.005374324042350054, -3.814697265625e-06, 0.0, 0.0, -0.0046164351515471935, -2.0265579223632812e-05, -1.1920928244535389e-07, -0.00128173828125, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -0.0039768218994140625, -0.00101470947265625, 0.0, -0.0009403228759765625, -1.9073486328125e-06, -9.5367431640625e-06, -0.0001430511474609375, -0.000209808349609375, -9.775161743164062e-06, -0.000156402587890625, -9.655952453613281e-06, -1.9073486328125e-06, -0.00022125244140625, -7.62939453125e-06, -0.0001068115234375, -0.0007591242319904268, -0.0006933212280273438, -2.9802242352161556e-05, -0.000759124755859375, -3.814697265625e-06, 0.0, -0.010096066631376743, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -8.344650268554688e-06, -1.7881377516459906e-06, -0.0004792213439941406, -7.82012939453125e-05, -9.5367431640625e-06, 0.0, -7.62939453125e-06, 0.0, -1.9073486328125e-05, 0.0, -0.028900146484375, 0.0, -0.0014858245849609375, 0.0, -0.04641532897949219, 0.0, -1.9073486328125e-06, -9.5367431640625e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -5.91278076171875e-05, 0.0, -0.004505157470703125, -0.000453948974609375, -0.0003681182861328125, -0.000396728515625, -0.0021686553955078125, -0.0005626678466796875, -1.33514404296875e-05, -0.0017256109276786447, -7.629378160345368e-06, -1.33514404296875e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.0015552914701402187, -2.9802276912960224e-06, -6.4849853515625e-05, -3.4332275390625e-05, -0.002182959346100688, -9.179088920063805e-06], "choice_history": [45, 100, 154, 53, 79, "<UNK>", "Blade", "<EOS>", 141, 34, 101, "Weapon", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "<UNK>", " ", "Blade", "<EOS>", 36, 106, "5", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 56, 84, "create_weapon", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 59, 108, 14, 77, 19, 101, "Weapon", "<EOS>", 142, 36, 106, "3", "<EOS>", 36, 106, "4", "<EOS>"]}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"score": -0.5135445592743224, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Boulderfist Ogre", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 7, "hole0": 6, "_type": "Template1"}], "name": "BoulderfistOgre", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE, True)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "score_history": [-7.62939453125e-06, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -1.1444091796875e-05, -0.00045111216604709625, -2.4437606043647975e-05, -4.12456392950844e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -8.106231689453125e-06, -2.2649765014648438e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -5.805492401123047e-05, 0.0, 0.0, -2.86102294921875e-05, 0.0, -2.384185791015625e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.609317769180052e-05, -2.288818359375e-05, -4.9591064453125e-05, -4.649161837733118e-06, -0.4430065155029297, -1.1444091796875e-05, -1.33514404296875e-05, -0.0006573678692802787, -0.00013768672943115234, -4.291534423828125e-06, -0.0009357929229736328, 0.0, -5.7220458984375e-06, -0.05214982479810715, 0.0, -0.00054168701171875, 0.0, -3.814697265625e-06, 0.0, -2.622604142743512e-06, -3.814697265625e-06, -0.0003604888916015625, 0.0, -4.1961669921875e-05, 0.0, -9.5367431640625e-06, 0.0, -0.00020599365234375, -1.33514404296875e-05, -0.0006068944931030273, -2.47955322265625e-05, -2.09808349609375e-05, -9.1552734375e-05, -0.00021195410226937383, 0.0, -0.013323783874511719, -1.71661376953125e-05, -6.472854875028133e-05, -2.3841855067985307e-07, -0.00019276142120361328, -6.818576366640627e-05], "choice_history": [45, 100, 154, 53, 79, "Boulderfist", "Ogre", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 145, 37, 110, "Boulderfist", " ", "Ogre", "<EOS>", 36, 106, "6", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 35, 102, "False", "<EOS>", 61, 114, "6", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"score": -2.7603859124346073, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Deadly Poison", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"orelse": [{"value": {"args": [{"n": 2, "_type": "Num"}], "func": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "hero", "_type": "Attribute"}, "attr": "increase_armor", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "test": {"left": {"value": {"id": "player", "_type": "Name"}, "attr": "cards_played", "_type": "Attribute"}, "ops": [{"_type": "Gt"}], "comparators": [{"n": 0, "_type": "Num"}], "_type": "Compare"}, "body": [{"value": {"args": [{"n": 2, "_type": "Num"}], "func": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "hero", "_type": "Attribute"}, "attr": "increase_armor", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "_type": "If"}], "name": "use", "_type": "FunctionDef"}], "name": "DeadlyPoison", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            player.hero.increase_armor(2)\n        else:\n            player.hero.increase_armor(2)\n", "score_history": [-1.33514404296875e-05, -1.1444091796875e-05, -3.814697265625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -4.6491513785440475e-06, -1.4305012882687151e-05, -4.184158387943171e-05, -3.0517578125e-05, 0.0, 0.0, -4.76837158203125e-05, -1.7404556274414062e-05, -1.33514404296875e-05, -0.000835418701171875, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -0.00018310546875, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.11814594268798828, 0.0, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -8.58306884765625e-06, 0.0, -1.0371204552939162e-05, -0.00025376438861712813, -5.14984130859375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9788581994362175e-05, -8.594989776611328e-05, -9.417532055522315e-06, -0.001245737075805664, 0.0, 0.0, -8.821478695608675e-05, 0.0, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, 0.0, -2.312660035386216e-05, -2.3841855067985307e-07, -0.0006513595581054688, -1.9073486328125e-06, -2.09808349609375e-05, -1.1444091796875e-05, -0.000102996826171875, 0.0, -3.635883331298828e-05, -2.3841855067985307e-07, -0.0001709461212158203, -4.208087921142578e-05, -0.000873565673828125, -7.62939453125e-05, -2.47955322265625e-05, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -4.00543212890625e-05, 0.0, -0.0006198883056640625, -1.71661376953125e-05, -0.000637054443359375, -2.7179718017578125e-05, -0.6081191301345825, -5.841255187988281e-06, -5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.52587890625e-05, -0.0001239776611328125, 0.0, -7.748603820800781e-06, -1.1444091796875e-05, 0.0, -0.0001195669174194336, -1.1920928244535389e-07, -5.7220458984375e-05, -1.931181213876698e-05, -9.059865078597795e-06, -0.14838027954101562, -1.1444091796875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -1.9073486328125e-06, 0.0, -2.694120667001698e-05, -7.748603820800781e-06, -7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -5.9604644775390625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.3470649719238281e-05, -1.1920928244535389e-07, -0.03552818298339844, -0.028070449829101562, -0.00081634521484375, -1.1444091796875e-05, -0.0018215179443359375, -1.9073486328125e-06, -0.2663116455078125, 0.0, -0.000164031982421875, -1.1920928244535389e-07, -0.050639260560274124, -1.7762184143066406e-05, -8.7738037109375e-05, -0.005743980407714844, -0.000125885009765625, -0.0003223419189453125, 0.0, -3.2782554626464844e-05, -1.9073486328125e-06, -0.002399444580078125, -0.000392913818359375, 0.0, -1.33514404296875e-05, -9.5367431640625e-06, -1.1444091796875e-05, -0.0018939971923828125, -0.005995750427246094, -5.7220458984375e-06, -0.000171661376953125, 0.0, -0.09105682373046875, 0.0, -0.019089538604021072, -3.7669837183784693e-05, -0.7366918325424194, -9.775161743164062e-06, -4.1961669921875e-05, -0.009052276611328125, -7.05718994140625e-05, -0.0021400421392172575, -1.1444091796875e-05, -5.91278076171875e-05, -0.001117706298828125, 0.0, -1.1444091796875e-05, -1.1444091796875e-05, -3.814697265625e-06, -7.2479248046875e-05, -0.0003871917724609375, -1.9073486328125e-06, -0.0001621246337890625, 0.0, -0.008039474487304688, 0.0, -0.019324567168951035, -9.667526319390163e-05, -0.5814489126205444, -5.841255187988281e-06, -2.09808349609375e-05, -0.004893302917480469, -0.000118255615234375, -0.004119265824556351, -1.1444091796875e-05], "choice_history": [45, 100, 154, 53, 79, "Deadly", "Poison", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Deadly", " ", "Poison", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 57, 88, 15, 80, 11, 70, 19, 101, "player", "<EOS>", "cards_played", "<EOS>", 138, 3, 141, 36, 106, "0", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 141, 36, 106, "2", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 141, 36, 106, "2", "<EOS>"]}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"score": -0.2724400365007327, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Fire Elemental", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"args": [{"n": 3, "_type": "Num"}], "func": {"id": "Damage", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template9"}, "arg": "players", "_type": "keyword"}, {"value": {"hole0": "UserPicker", "_type": "Template9"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 5, "hole0": 6, "_type": "Template1"}], "name": "FireElemental", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "score_history": [0.0, -5.7220458984375e-06, -9.5367431640625e-06, -4.38690185546875e-05, -9.34600830078125e-05, -0.007940351031720638, -0.0002571013756096363, -4.41074053014745e-06, -7.82012939453125e-05, 0.0, 0.0, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0003936290740966797, 0.0, 0.0, -5.7220458984375e-06, 0.0, -6.198883056640625e-06, 0.0, -0.000194549560546875, -1.9073486328125e-06, -2.6702880859375e-05, -1.71661376953125e-05, -7.43865966796875e-05, -4.57763671875e-05, 0.0, -3.814697265625e-06, -2.6702880859375e-05, -1.1563301086425781e-05, 0.0, -9.655945177655667e-06, -5.364412118069595e-06, -9.34600830078125e-05, -7.82012939453125e-05, -1.1444091796875e-05, -1.549708758830093e-05, -5.4001808166503906e-05, -7.748602001811378e-06, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -0.0011477520456537604, -7.152555099310121e-07, -9.5367431640625e-06, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, -0.00013375282287597656, -2.3841855067985307e-07, -0.0002480745315551758, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -2.491474151611328e-05, -1.9073486328125e-06, -0.18587875366210938, -5.91278076171875e-05, -0.0005650520324707031, 0.0, -1.9073486328125e-06, -1.52587890625e-05, -4.76837158203125e-05, 0.0, -0.00024628639221191406, 0.0, -6.866455078125e-05, -9.72747802734375e-05, -2.09808349609375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.002419828437268734, -3.4570680327306036e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.57763671875e-05, -0.018734505400061607, 0.0, -6.866455078125e-05, -0.00122833251953125, -0.00067901611328125, -1.9073486328125e-06, -0.007707715034484863, -5.960462772236497e-07, -7.62939453125e-06, -0.0297698974609375, -1.1444091796875e-05, -0.000613093376159668, 0.0, -3.62396240234375e-05, 0.0, -0.005952954292297363, -0.00162506103515625, 0.0, -1.9073486328125e-06, -0.001390695571899414, -1.9073486328125e-06, -0.00261688232421875, -1.9073486328125e-06, -7.2479248046875e-05, -0.0010986328125, 0.0, -8.96453857421875e-05, -1.52587890625e-05, -1.7881377516459906e-06, -1.1920928244535389e-07, -1.1563301086425781e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Fire", "Elemental", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Fire", " ", "Elemental", "<EOS>", 36, 106, "6", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Damage", "<EOS>", 141, 36, 106, "3", "<EOS>", 29, 76, 19, 101, "Character", "Selector", "<EOS>", 150, 130, "players", "<EOS>", 23, 122, "Both", "Player", "<EOS>", 130, "picker", "<EOS>", 23, 122, "User", "Picker", "<EOS>", 61, 114, "6", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"score": -0.029327240138400157, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Gnomish Inventor", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"hole0": "Draw", "_type": "Template9"}, {"hole0": "PlayerSelector", "_type": "Template9"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 4, "hole0": 2, "_type": "Template1"}], "name": "GnomishInventor", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "score_history": [-3.62396240234375e-05, -0.000141143798828125, -6.103515625e-05, -0.0001049041748046875, -2.47955322265625e-05, -1.5616295058862306e-05, -9.941560711013153e-05, -0.0004583738627843559, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -5.722046353184851e-06, -0.00010359188308939338, -0.00016163622785825282, -2.6702880859375e-05, -1.9073486328125e-05, -1.9073486328125e-06, -7.045071833999828e-05, -1.2516919014160521e-05, 0.0, -1.9073486328125e-06, 0.0, -4.410743713378906e-06, 0.0, -8.0108642578125e-05, -0.0005817413330078125, -3.814697265625e-06, 0.0, -0.0024871826171875, -0.0002346038818359375, -1.33514404296875e-05, -3.814697265625e-06, -1.1444091796875e-05, -2.3841836082283407e-05, -3.254413604736328e-05, -0.0003935097483918071, -0.0004316844861023128, -0.0005950927734375, -1.9073486328125e-06, 0.0, -5.841247457283316e-06, -6.341934204101562e-05, -1.060962586052483e-05, -0.000865936279296875, 0.0, 0.0, -0.00032382644712924957, -3.814689989667386e-06, -2.288818359375e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -0.00016236300871241838, -1.9073486328125e-06, -2.682209014892578e-05, 0.0, -5.7220458984375e-06, 0.0, -3.814697265625e-06, 0.0, -0.00017368793487548828, 0.0, -8.082389831542969e-05, -2.503394853192731e-06, -0.0001163482666015625, -3.814697265625e-06, -0.0008767843246459961, -5.9604644775390625e-06, -1.9073486328125e-06, -0.0001277923583984375, -1.9073486328125e-06, 0.0, -0.0019683835562318563, -8.106231689453125e-06, -1.33514404296875e-05, -3.62396240234375e-05, -1.52587890625e-05, -9.05987781152362e-06, -0.007482503075152636, -1.9073486328125e-05, -3.814697265625e-06, -0.0019448166713118553, -2.598733590275515e-05, 0.0, -0.008539199829101562, -6.4849853515625e-05, -1.0013580322265625e-05, -1.4543427823809907e-05, -1.1563301086425781e-05, -8.821448318485636e-06], "choice_history": [45, 100, 154, 53, 79, "Gnomish", "Inventor", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Gnomish", " ", "Inventor", "<EOS>", 36, 106, "4", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 43, 122, "Draw", "<EOS>", 43, 122, "Player", "Selector", "<EOS>", 61, 114, "2", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"score": -2.5289058144566283, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Heroic Strike", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"n": 2, "_type": "Num"}], "func": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "hero", "_type": "Attribute"}, "attr": "change_temp_attack", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"n": 3, "_type": "Num"}], "func": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "hero", "_type": "Attribute"}, "attr": "change_temp_attack", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "HeroicStrike", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.change_temp_attack(3)\n", "score_history": [-2.47955322265625e-05, -7.62939453125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -2.09808349609375e-05, -2.50339189733495e-06, -6.5565000113565475e-06, -3.93382906622719e-05, -4.1961669921875e-05, 0.0, 0.0, -4.589557647705078e-05, -9.000301361083984e-05, -3.814697265625e-05, -3.0517578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, 0.0, 0.0, -6.198883056640625e-06, 0.0, -8.392333984375e-05, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -0.39911556243896484, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0005245208740234375, -7.033334895822918e-06, -4.768370445162873e-07, -3.933904736186378e-06, -0.00012385078298393637, -0.00020599365234375, -1.9073486328125e-06, -3.814697265625e-06, -1.1324817933200393e-05, -0.00010335445404052734, -8.094310760498047e-05, -0.00311279296875, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -4.768370445162873e-07, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, -1.52587890625e-05, -1.3709068298339844e-05, 0.0, -0.0010347366333007812, -0.00010120867955265567, -1.9073486328125e-06, -5.7220458984375e-06, -0.000148773193359375, 0.0, -7.43865966796875e-05, -3.933906555175781e-06, -0.0001590251922607422, -2.1457672119140625e-05, 0.0, 0.0, -5.364418029785156e-05, -1.1920928244535389e-07, -1.9073486328125e-05, -8.0108642578125e-05, -5.7220458984375e-06, -6.318092346191406e-06, -1.1444091796875e-05, 0.0, -5.638599395751953e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -8.70227722771233e-06, -0.00020931000472046435, -0.2778358459472656, -5.7220458984375e-06, 0.0, 0.0, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -3.0636783776571974e-05, -5.9604644775390625e-06, -4.124641418457031e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -2.503394853192731e-06, -1.9311904907226562e-05, -1.9073486328125e-06, 0.0, -1.5139572496991605e-05, -1.895418972708285e-05, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -2.6702880859375e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0001697540283203125, 0.0, -2.86102294921875e-05, -1.1920928244535389e-07, -0.005725699942559004, -5.578912532655522e-05, -0.051013801246881485, -2.872943878173828e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.00011444091796875, -0.5130496621131897, -1.1920928244535389e-07, -0.00012969970703125, 0.0, -2.47955322265625e-05, -0.0071430206298828125, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -0.000209808349609375, 0.0, -0.0001010894775390625, -1.1920928244535389e-07, -0.005533084273338318, -2.753706394287292e-05, -0.7204951047897339, -3.814697265625e-06, -9.5367431640625e-06, -1.1444091796875e-05, -0.0001201629638671875, -0.5408996343612671, -2.3841855067985307e-07], "choice_history": [45, 100, 154, 53, 79, "Heroic", "Strike", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Heroic", " ", "Strike", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 156, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", 141, 36, 106, "2", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", 141, 36, 106, "3", "<EOS>"]}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"score": -0.22127901156431307, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole1": 8, "hole2": "DRUID", "hole0": "Ironbark Protector", "_type": "Template2"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"value": true, "_type": "NameConstant"}, "hole1": 8, "hole2": "taunt", "hole0": 8, "_type": "Template0"}], "name": "<UNK>Protector", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class <UNK>Protector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "score_history": [-9.918212890625e-05, -3.814697265625e-06, -9.5367431640625e-06, -7.05718994140625e-05, -0.0001811981201171875, -0.12035095691680908, -0.016141682863235474, -0.0005996903055347502, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -2.6219640858471394e-06, -4.291534423828125e-06, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -3.814697265625e-06, -8.58306884765625e-06, -1.1920928244535389e-07, 0.0, -1.52587890625e-05, 0.0, -7.271765298355604e-06, 0.0, -3.814697265625e-06, -0.010273933410644531, -7.05718994140625e-05, -0.001920779817737639, -0.0002988576889038086, -7.510183422709815e-06, -5.7220458984375e-06, -9.058858267962933e-05, 0.0, -0.036300063133239746, -3.814697265625e-06, -0.03099822998046875, -0.00019073486328125, -9.536736342852237e-07, -1.4901155736879446e-05, -0.0011462562251836061, -1.7523765563964844e-05, -0.0012307167053222656, 0.0, -0.001148223876953125, -5.7220458984375e-06, -2.86102294921875e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "<UNK>", "Protector", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 62, 115, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", 60, 113, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 20, 102, "True", "<EOS>"]}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"score": -2.4317009488861174, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Mark of the Wild", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"n": 0, "_type": "Num"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "change_attack", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"n": 0, "_type": "Num"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "increase_health", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"n": 0, "_type": "Num"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "increase_health", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "MarkOfTheWild", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(0)\n        self.target.increase_health(0)\n        self.target.increase_health(0)\n", "score_history": [-1.1444091796875e-05, -3.0517578125e-05, -2.6702880859375e-05, -5.91278076171875e-05, -6.29425048828125e-05, -3.6954195820726454e-05, -0.0002282857458340004, -0.0009120383765548468, -0.004139093216508627, -1.3470647900248878e-05, -2.86102294921875e-05, -1.9073486328125e-06, 0.0, -0.0012050853110849857, -0.0004941225051879883, -1.33514404296875e-05, -0.000194549560546875, -1.9073486328125e-06, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.9073486328125e-06, 0.0, 0.0, -2.0265579223632812e-06, 0.0, -0.0001010894775390625, -1.9073486328125e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.00098419189453125, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, 0.0, -1.1920922133867862e-06, -5.7220458984375e-05, -2.777576446533203e-05, -7.152555099310121e-07, -0.0001354217529296875, -9.5367431640625e-05, -9.5367431640625e-06, -3.6238969187252223e-05, -0.00025296208332292736, -0.0002779836067929864, -8.237361907958984e-05, -0.0077239274978637695, -0.0004898309707641602, -0.0719367265701294, -0.000988006591796875, -1.9073486328125e-06, 0.0, -0.0063624028116464615, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.372264862060547e-05, 0.0, -0.000492095947265625, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -4.76837158203125e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -0.00012230873107910156, -2.300739288330078e-05, -0.17973613739013672, -2.6702880859375e-05, -3.063678741455078e-05, 0.0, -7.2479248046875e-05, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.0003986358642578125, -3.24249267578125e-05, -9.72747802734375e-05, -1.52587890625e-05, -0.002924799919128418, -1.9073486328125e-06, 0.0, 0.0, -5.7220458984375e-06, 0.0, -0.000102996826171875, -5.340576171875e-05, 0.0, -1.1563301086425781e-05, -2.6702880859375e-05, 0.0, -1.3589850823336747e-05, -1.1920928244535389e-07, -1.9073486328125e-05, -1.7642923921812326e-05, -2.264974000354414e-06, -0.3903226852416992, -0.000274658203125, -1.52587890625e-05, 0.0, -7.05718994140625e-05, -9.5367431640625e-06, 0.0, -6.866455078125e-05, 0.0, -0.0013982054078951478, -0.029964804649353027, -8.225440979003906e-06, -0.0001087188720703125, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.2159326615801547e-05, -7.867813110351562e-06, -1.9073486328125e-06, 0.0, -3.170956551912241e-05, 0.0, -0.0005855560302734375, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -1.71661376953125e-05, -3.24249267578125e-05, 0.0, -0.000148773193359375, 0.0, -4.38690185546875e-05, 0.0, -5.14984130859375e-05, -1.1920928244535389e-07, -0.42930734157562256, -0.00027942657470703125, -1.9073486328125e-06, -0.0003814697265625, -3.814697265625e-06, -0.2211703062057495, -4.0531158447265625e-06, -0.00128173828125, -3.814697265625e-06, -2.6702880859375e-05, -0.0001888275146484375, -1.9073486328125e-06, -7.62939453125e-06, -0.0003032684326171875, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.0021276473999023438, -1.9073486328125e-06, -0.0001468658447265625, -2.0265579223632812e-06, -0.3091470003128052, -1.1920928244535389e-07, -1.9073486328125e-06, -8.58306884765625e-05, -2.6702880859375e-05, -0.25175362825393677, -5.9604644775390625e-06, -0.002033233642578125, -3.814697265625e-06, -0.0001049041748046875, -0.0002346038818359375, -1.9073486328125e-06, -5.7220458984375e-06, -0.000492095947265625, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -0.0028581619262695312, -1.9073486328125e-06, -0.000156402587890625, -2.0265579223632812e-06, -0.22372353076934814, -1.1920928244535389e-07, -1.9073486328125e-06, -9.72747802734375e-05, -2.86102294921875e-05, -0.28091657161712646, -5.9604644775390625e-06], "choice_history": [45, 100, 154, 53, 79, "Mark", "Of", "The", "Wild", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 157, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 141, 36, 106, "Taunt", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 141, 36, 106, "Taunt", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 141, 36, 106, "Taunt", "<EOS>"]}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"score": -2.3497017986594386, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Multi-Shot", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"values": [{"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "can_use", "_type": "Attribute"}, "_type": "Call"}, {"left": {"args": [{"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"id": "len", "_type": "Name"}, "_type": "Call"}, "ops": [{"_type": "GtE"}], "comparators": [{"n": 1, "_type": "Num"}], "_type": "Compare"}], "op": {"_type": "And"}, "_type": "BoolOp"}, "_type": "Return"}], "name": "can_use", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"hole0": 3, "_type": "Template5"}, {"id": "self", "_type": "Name"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "damage", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "Multi-Shot", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 1\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n", "score_history": [0.0, 0.0, -2.47955322265625e-05, -2.86102294921875e-05, -3.814697265625e-06, -2.9802322387695312e-06, -2.074220174108632e-05, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -0.0002745389356277883, -2.491474151611328e-05, -1.9073486328125e-06, -0.0060825347900390625, -1.71661376953125e-05, -5.7220458984375e-06, -5.841255187988281e-06, -0.0002002716064453125, -7.62939453125e-06, 0.0, 0.0, -1.001357759378152e-05, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0009632110595703125, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.5854835510253906e-05, -2.622604142743512e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, -6.794906312279636e-06, 0.0, -3.814697265625e-06, 0.0, -7.700920104980469e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -1.5377991076093167e-05, 0.0, -0.0001379251480102539, -5.7220458984375e-06, -1.1444091796875e-05, -2.47955322265625e-05, -2.47955322265625e-05, 0.0, -6.67572021484375e-05, 0.0, -0.0002497434616088867, -1.728534698486328e-05, -4.1961669921875e-05, 0.0, -0.6616973876953125, -1.9073486328125e-06, 0.0, -0.0004062652587890625, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -2.6702880859375e-05, 0.0, -1.9073486328125e-06, -1.919269561767578e-05, -2.9802276912960224e-06, -0.1573657989501953, -0.0008602142333984375, -2.288818359375e-05, -0.00269317626953125, -5.53131103515625e-05, -1.71661376953125e-05, -0.0001773834228515625, -2.09808349609375e-05, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -3.8623809814453125e-05, -1.9431114196777344e-05, -0.0004972219467163086, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, 0.0, -3.4689903259277344e-05, -5.7220458984375e-06, -3.62396240234375e-05, 0.0, -9.655952453613281e-06, -1.1920928244535389e-07, -0.0005970001220703125, -1.1444091796875e-05, -0.0002536773681640625, -1.9073486328125e-06, -0.0001068115234375, 0.0, -0.00015389916370622814, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.000152587890625, -1.52587890625e-05, -0.0013370513916015625, -5.7220458984375e-06, -7.2479248046875e-05, 0.0, -0.0008321998757310212, 0.0, -0.00033483654260635376, -4.065031680511311e-05, -1.9073486328125e-06, -0.02142047882080078, -2.86102294921875e-05, -0.000148773193359375, 0.0, -0.12730772793293, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, -4.76837158203125e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.000110626220703125, 0.0, -7.62939453125e-06, -9.655952453613281e-06, -7.271740287251305e-06, -0.7100238800048828, -7.62939453125e-06, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -5.006789251638111e-06, -7.62939453125e-06, -2.110004425048828e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.1801719665527344e-05, -7.62939453125e-06, -1.52587890625e-05, 0.0, -1.537799835205078e-05, 0.0, -0.5571174621582031, 0.0, 0.0, -7.62939453125e-06, -7.62939453125e-06, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -0.021074295043945312, 0.0, -0.0018024444580078125, 0.0, -0.000679135147947818, 0.0, -0.006937623023986816, -1.71661376953125e-05, -2.86102294921875e-05, -0.000194549560546875, -5.7220458984375e-05, -0.06593392789363861, -7.152531907195225e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.62939453125e-06, -7.62939453125e-06], "choice_history": [45, 100, 154, 53, 79, "Multi-Shot", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 156, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Multi-Shot", "<EOS>", 36, 106, "4", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 56, 84, "can_use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 154, 59, 108, 13, 73, 0, 142, 29, 77, 11, 70, 23, 122, "super", "<EOS>", "can_use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 30, 80, 14, 77, 19, 101, "len", "<EOS>", 141, 26, 70, 11, 70, 19, 101, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 138, 4, 141, 36, 106, "1", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 40, 118, "3", "<EOS>", 34, 101, "self", "<EOS>"]}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"score": -1.6156946339739164, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Power Word Shield", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PRIEST", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"args": [{"hole0": "<UNK>", "_type": "Template9"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "add_buff", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"func": {"value": {"id": "player", "_type": "Name"}, "attr": "draw", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "PowerWordShield", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n        player.draw()\n", "score_history": [-3.814697265625e-06, -4.38690185546875e-05, -7.62939453125e-06, -2.288818359375e-05, -0.00011444091796875, -7.0211935963016e-05, -3.480863233562559e-05, -0.0042559439316391945, -0.0005378468777053058, -1.1444091796875e-05, 0.0, 0.0, -0.00025081582134589553, -4.5418713852996007e-05, -5.14984130859375e-05, -0.000110626220703125, -1.9073486328125e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -5.7220458984375e-06, 0.0, 0.0, -1.1682510375976562e-05, 0.0, -0.0006160736083984375, 0.0, -3.814697265625e-06, -2.288818359375e-05, -0.00078582763671875, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -2.1100036974530667e-05, -2.1457672119140625e-06, -1.8715832993621007e-05, -1.4901076610840391e-05, -0.0001773834228515625, 0.0, -5.7220458984375e-06, -0.0017146236496046185, -9.739398956298828e-05, -0.001044533564709127, -0.0033845901489257812, -0.0197676420211792, -0.0002422332763671875, -1.9073486328125e-06, 0.0, -3.325938814668916e-05, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -7.987022399902344e-06, 0.0, -0.00029075145721435547, 0.0, -3.814697265625e-06, 0.0, -7.62939453125e-06, 0.0, -7.2479248046875e-05, 0.0, -0.00013363361358642578, -1.239776611328125e-05, -0.00151824951171875, -1.71661376953125e-05, -3.254413604736328e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -3.4332275390625e-05, -3.814697265625e-05, 0.0, -0.0006256103515625, -1.9073486328125e-06, -0.0002766847610473633, -6.556510470545618e-06, -0.022617578506469727, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, -3.933906555175781e-06, -1.1920928244535389e-07, -9.5367431640625e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -6.353854405460879e-05, -2.622600959512056e-06, -4.76837158203125e-05, -0.0003258711367379874, -4.470248313737102e-05, -0.35134220123291016, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -5.14984130859375e-05, -3.4332275390625e-05, 0.0, 0.0, -8.392333984375e-05, -5.411975143942982e-05, -5.9604644775390625e-06, -9.894368304230738e-06, -2.1457672119140625e-06, -0.0003223419189453125, -1.33514404296875e-05, 0.0, -1.4424245819100179e-05, -6.198883056640625e-06, -9.5367431640625e-06, 0.0, -1.1205666851310525e-05, -8.344646857949556e-07, -1.9073486328125e-05, 0.0, -1.1444091796875e-05, -2.86102294921875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.33514404296875e-05, -1.9073486328125e-06, -5.340576171875e-05, 0.0, -8.0108642578125e-05, 0.0, -6.961816688999534e-05, -2.264974000354414e-06, -0.2614772319793701, -4.994837581762113e-05, -7.62939453125e-06, -0.0639486312866211, -9.5367431640625e-06, -0.00018787384033203125, 0.0, -0.0005497749662026763, -0.00044858455657958984, -1.9073486328125e-06, -0.0012044906616210938, -3.814697265625e-06, -0.7344247698783875, -0.021385230123996735, -0.0001773834228515625, -0.0023899078369140625, -3.814697265625e-06, -0.07994747161865234, -0.0009698867797851562, 0.0, -0.03344917297363281, 0.0, -0.00206148624420166, -1.1920928244535389e-07, -0.0008437633514404297, -1.1682479453156702e-05], "choice_history": [45, 100, 154, 53, 79, "Power", "Word", "Shield", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Power", " ", "Word", " ", "Shield", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 156, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 43, 122, "<UNK>", "<EOS>", 54, 82, 14, 75, 11, 70, 19, 101, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"score": -0.34145708528410523, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Sen'jin Shieldmasta", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"value": true, "_type": "NameConstant"}, "hole1": 5, "hole2": "taunt", "hole0": 3, "_type": "Template0"}], "name": "Sen'jinShieldmasta", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "score_history": [-5.7220458984375e-06, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -7.62939453125e-06, -0.002781572053208947, -0.00031144535751082003, -5.364403477869928e-06, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -0.00019199028611183167, -2.384185791015625e-06, -1.9073486328125e-06, -7.82012939453125e-05, -3.814697265625e-06, 0.0, -4.172325134277344e-06, 0.0, -1.9073486328125e-06, 0.0, 0.0, -3.4570680327306036e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -6.115331780165434e-05, -3.814697265625e-06, -1.728534698486328e-05, -9.536738616588991e-07, -0.3128662109375, -3.814697265625e-06, -3.24249267578125e-05, -3.933898824470816e-06, -0.0002028942108154297, -5.841255187988281e-06, -3.62396240234375e-05, 0.0, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -1.1444091796875e-05, 0.0, -3.814697265625e-06, 0.0, -1.4185851796355564e-05, -5.7220458984375e-06, -2.682209014892578e-05, 0.0, -3.814697265625e-06, -4.38690185546875e-05, -3.62396240234375e-05, 0.0, -0.0001049041748046875, -9.5367431640625e-06, -0.00016236305236816406, -1.1444091796875e-05, -0.018093109130859375, -0.0001087188720703125, -4.172325134277344e-06, -1.7881377516459906e-06, -0.000273072742857039, -8.344646857949556e-07, -0.005653298459947109, 0.0, -9.1552734375e-05, -1.1444091796875e-05, -9.5367431640625e-06, 0.0], "choice_history": [45, 100, 154, 53, 79, "Sen'jin", "Shieldmasta", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Sen'jin", " ", "Shieldmasta", "<EOS>", 36, 106, "4", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 60, 113, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 102, "True", "<EOS>"]}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"score": -0.1330817027410376, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Sinister Strike", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"hole0": 3, "_type": "Template5"}, {"id": "self", "_type": "Name"}], "func": {"value": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "hero", "_type": "Attribute"}, "attr": "damage", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "SinisterStrike", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "score_history": [-1.9073486328125e-06, -2.47955322265625e-05, -7.62939453125e-06, -5.7220458984375e-05, -7.62939453125e-06, -1.7881377516459906e-06, -3.564294092939235e-05, -2.7418097943154862e-06, -0.0004596710205078125, 0.0, 0.0, -0.0002717971510719508, -0.00011563301086425781, 0.0, -5.340576171875e-05, -5.7220458984375e-06, -0.0001068115234375, -1.1444091796875e-05, -9.5367431640625e-06, -1.33514404296875e-05, -3.814697265625e-06, 0.0, -7.867813110351562e-06, 0.0, -0.001049041748046875, 0.0, -2.09808349609375e-05, -5.14984130859375e-05, -0.07278060913085938, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.0004863739013671875, -4.38690185546875e-05, -3.814697265625e-06, -1.1563301086425781e-05, -1.7285328794969246e-05, -7.05718994140625e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.00011038171214750037, -0.00011444091796875, -0.0034966464154422283, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.0001684427261352539, 0.0, -7.62939453125e-06, 0.0, -3.4332275390625e-05, 0.0, -9.536741345073096e-06, 0.0, -0.0008344650268554688, -7.748603820800781e-06, -5.14984130859375e-05, -8.7738037109375e-05, -5.53131103515625e-05, 0.0, -5.14984130859375e-05, -2.0265579223632812e-06, -0.00020694732666015625, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -9.5367431640625e-05, 0.0, -5.7220458984375e-06, -7.62939453125e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, 0.0, -0.0010423660278320312, 0.0, -1.9073486328125e-06, -1.3470649719238281e-05, -1.013275596051244e-05, -0.015593528747558594, -9.5367431640625e-06, -0.0001163482666015625, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.62939453125e-06, -5.7220458984375e-06, -0.00010597705113468692, -3.814697265625e-06, -7.748603820800781e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, 0.0, -5.733966827392578e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.491474151611328e-05, -2.0265579223632812e-06, -0.0046234130859375, 0.0, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -7.62939453125e-05, -7.62939453125e-06, 0.0, -0.0028781890869140625, 0.0, -0.0001087188720703125, 0.0, -0.0006008148193359375, 0.0, -0.0005971182836219668, -1.9073486328125e-06, -0.00681237131357193, -2.4080276489257812e-05, -0.001995682017877698, -9.1552734375e-05, -3.814697265625e-06, -0.0001049041748046875, -0.000247955322265625, -0.016530752182006836, -1.2278503163543064e-05, -1.52587890625e-05, -2.288818359375e-05, -9.5367431640625e-06, -1.33514404296875e-05], "choice_history": [45, 100, 154, 53, 79, "Sinister", "Strike", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Sinister", " ", "Strike", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 11, 70, 19, 101, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 142, 40, 118, "3", "<EOS>", 34, 101, "self", "<EOS>"]}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score": -1.9386868314618937, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Succubus", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "FREE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"args": [{"n": 3, "_type": "Num"}], "func": {"id": "Discarda", "_type": "Name"}, "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template9"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 3, "hole0": 4, "_type": "Template1"}], "name": "Succubus", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discarda(3), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score_history": [-1.1444091796875e-05, -4.57763671875e-05, -5.7220458984375e-06, -4.76837158203125e-05, -4.76837158203125e-05, -0.0008882663096301258, -0.003362176474183798, -1.52587890625e-05, 0.0, 0.0, -8.799135684967041e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, -1.9073486328125e-06, -1.1920928955078125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, 0.0, -1.71661376953125e-05, 0.0, -0.0003643035888671875, -3.814697265625e-06, -1.9073486328125e-05, -3.814697265625e-06, -0.0001678466796875, -4.76837158203125e-05, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -1.633167266845703e-05, -3.814697265625e-06, -2.9325485229492188e-05, -2.050399598374497e-05, -0.000148773193359375, -1.33514404296875e-05, -1.9073486328125e-06, -2.3364747903542593e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.002253913087770343, 0.0, -7.62939453125e-06, -3.814697265625e-06, -1.52587890625e-05, 0.0, -8.7738037109375e-05, -2.3841855067985307e-07, -0.0005017518997192383, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -5.924701690673828e-05, -1.9073486328125e-06, -0.013502359390258789, -4.5299530029296875e-06, -0.0070285797119140625, -3.24249267578125e-05, -3.814697265625e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -5.14984130859375e-05, 0.0, -0.0009136199951171875, -2.3841855067985307e-07, 0.0, -0.00022125244140625, -5.7220458984375e-06, -1.9073486328125e-06, -0.000354766845703125, -1.9073486328125e-06, 0.0, -3.8504600524902344e-05, -5.960462772236497e-07, -5.7220458984375e-06, -0.0060520172119140625, -0.001064300537109375, -5.7220458984375e-06, -1.9073486328125e-06, -0.02997428923845291, -0.814373254776001, -0.033625662326812744, -0.010797500610351562, -0.6674356460571289, -1.9073486328125e-06, -0.331964910030365, 0.0, -0.0021686553955078125, -1.9073486328125e-06, -0.005530953407287598, -2.0265579223632812e-06, 0.0, -0.0044574737548828125, -1.52587890625e-05, -1.2636125575227197e-05, -5.960462772236497e-07, -0.0006073713302612305, -2.1457672119140625e-06], "choice_history": [45, 100, 154, 53, 79, "Succubus", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Succubus", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 150, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Discard", "a", "<EOS>", 141, 36, 106, "3", "<EOS>", 43, 122, "Player", "Selector", "<EOS>", 61, 114, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"score": -0.8852891784968051, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "War Golem", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 7, "hole0": 7, "_type": "Template1"}], "name": "WarGolem", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "score_history": [-3.62396240234375e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.000102996826171875, -1.1444091796875e-05, -0.01042256224900484, -0.0009542935295030475, -3.933906555175781e-06, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -1.1920201359316707e-07, -9.775161743164062e-06, -9.179114385915454e-06, -1.71661376953125e-05, -0.0004425048828125, -1.9073486328125e-06, -0.0005431175231933594, -1.33514404296875e-05, 0.0, -0.001476287841796875, 0.0, -2.0265579223632812e-06, 0.0, -1.33514404296875e-05, -0.0048351287841796875, -3.0517578125e-05, -3.814697265625e-06, -0.000377655029296875, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -3.576277322281385e-06, -0.0003566741943359375, -1.52587890625e-05, -2.09808349609375e-05, -0.058165550231933594, -0.0002536773681640625, -2.09808349609375e-05, -0.000910344475414604, -0.0008755922317504883, -3.3736214390955865e-05, -5.7220458984375e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.5048872232437134, 0.0, -0.00031280517578125, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -0.0005359649658203125, -3.814697265625e-06, -0.0004062652587890625, 0.0, -1.9073486328125e-06, 0.0, -0.000255584716796875, -1.9073486328125e-06, -0.0026531219482421875, 0.0, -2.6702880859375e-05, -0.0002079010009765625, -0.000324249267578125, 0.0, -0.000560760498046875, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -5.91278076171875e-05, -3.814697265625e-06, -0.2199230194091797, 0.0, -0.0002536773681640625, -6.866455078125e-05, -0.06967607885599136, -4.00543212890625e-05, -0.004998691845685244, -5.841255187988281e-06], "choice_history": [45, 100, 154, 53, 79, "War", "Golem", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 146, 37, 110, "War", " ", "Golem", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 35, 102, "False", "<EOS>", 26, 70, 19, 101, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 61, 114, "7", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"score": -2.489814663811771, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"hole0": "Damaged", "_type": "Template9"}, {"args": [{"args": [{"args": [{"hole0": "Frozen", "_type": "Template9"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template9"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 2, "hole2": "effects", "hole0": 4, "_type": "Template0"}], "name": "<UNK>", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class <UNK>(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give(Buff(\n            Frozen())), SelfSelector()))])\n", "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -7.62939453125e-05, -1.9073486328125e-06, -0.000102996826171875, -0.47475895285606384, -0.00010335444676456973, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.57162207365036e-07, -2.1457672119140625e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -6.103515625e-05, -1.9073486328125e-06, -0.00030028820037841797, -1.5497207641601562e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -4.88758041683468e-06, 0.0, -8.96453857421875e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0001239776611328125, -9.5367431640625e-06, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -4.0531158447265625e-06, -1.9073486328125e-06, -5.996227264404297e-05, -2.741813204920618e-06, -0.001689910888671875, -1.9073486328125e-06, -3.814697265625e-06, -1.2278492249606643e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -5.447863441077061e-05, -2.145764938177308e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -2.5152970920316875e-05, -1.1920928244535389e-07, -0.0018427371978759766, -3.814697265625e-06, -3.814697265625e-06, -4.57763671875e-05, -3.814697265625e-06, 0.0, -1.919269561767578e-05, -3.814697265625e-06, -0.00010323524475097656, 0.0, -0.000125885009765625, -5.7220458984375e-06, -8.0108642578125e-05, 0.0, -2.6702880859375e-05, -2.09808349609375e-05, -3.814697265625e-05, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -0.0009537935256958008, 0.0, -0.00048828125, -1.33514404296875e-05, -2.9802317840221804e-06, -1.1920922133867862e-06, -0.0009728670120239258, 0.0, -1.4185901818564162e-05, -1.7523765563964844e-05, -5.7220458984375e-06, -5.7220458984375e-06, -3.24249267578125e-05, -3.814697265625e-06, 0.0, -2.47955322265625e-05, 0.0, -1.537799835205078e-05, -1.71661376953125e-05, -3.62396240234375e-05, -0.015733718872070312, 0.0, -0.01573013886809349, -0.00022208673181012273, -0.0002613067626953125, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -4.649162292480469e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.0005130767822265625, -1.33514404296875e-05, -3.62396240234375e-05, -0.000102996826171875, -0.07962250709533691, -7.62939453125e-06, -1.9073486328125e-06, -0.4078216552734375, -0.0023193359375, -1.33514404296875e-05, -5.7220458984375e-06, -0.011807560920715332, -7.62939453125e-06, -3.814697265625e-06, -0.5338602066040039, 0.0, -0.8677369952201843, -0.00017285303329117596, -1.9073486328125e-06, -5.7220458984375e-06, -0.07119226455688477, -2.0265579223632812e-06, 0.0], "choice_history": [45, 100, 154, 53, 79, "<UNK>", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Acidmaw", "<EOS>", 36, 106, "7", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 60, 113, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 43, 122, "Damaged", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 43, 122, "Frozen", "<EOS>", 43, 122, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score": -0.15051788996774462, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Boar", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"value": true, "_type": "NameConstant"}, "hole1": 2, "hole2": "charge", "hole0": 4, "_type": "Template0"}], "name": "Boar", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n", "score_history": [-5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, -2.288818359375e-05, -1.1444091796875e-05, -8.702239938429557e-06, -0.00026665005134418607, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -3.6712735891342163e-06, -9.775161743164062e-06, -7.748603820800781e-06, -5.7220458984375e-06, -4.76837158203125e-05, -5.7220458984375e-06, -3.409385681152344e-05, -1.1682510375976562e-05, -1.9073486328125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -5.257129669189453e-05, 0.0, -1.52587890625e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.1444091796875e-05, -0.01609039306640625, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, 0.0, -2.539156957936939e-05, -1.9073486328125e-06, -1.1324875231366605e-05, -2.3841855067985307e-07, -0.017499923706054688, -3.814697265625e-06, -9.5367431640625e-06, -4.446407547220588e-05, -0.0014020204544067383, -2.09808349609375e-05, 0.0, -0.019946575164794922, 0.0, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -3.8385387597372755e-05, 0.0, -2.872943878173828e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -0.00011444091796875, 0.0, -1.9073486328125e-06, -4.9591064453125e-05, -2.1338462829589844e-05, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, -0.000820159912109375, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -2.288818359375e-05, -0.0028611421585083008, 0.0, -0.08784675598144531, -0.000110626220703125, -2.384185791015625e-06, -4.768370445162873e-07, -0.00040018142317421734, -2.0265579223632812e-06, -0.0019156932830810547, 0.0, -9.1552734375e-05, -0.0004215240478515625, -1.33514404296875e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Boar", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 145, 37, 110, "Boar", "<EOS>", 36, 106, "3", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 35, 102, "False", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 60, 113, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 20, 102, "True", "<EOS>"]}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"score": -1.3690699186797488, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Anodized Robo Cub", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"n": 2, "_type": "Num"}, {"n": 2, "_type": "Num"}], "func": {"id": "Minion", "_type": "Name"}, "keywords": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}, {"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}], "_type": "Call"}, "_type": "Return"}], "name": "create_minion", "_type": "FunctionDef"}], "name": "AnodizedRoboCub", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True, taunt=True)\n", "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -0.0001659393310546875, -9.34600830078125e-05, -0.000274658203125, -0.0005009121377952397, -0.6610655784606934, -0.006923058070242405, -0.0003729377349372953, -9.5367431640625e-06, 0.0, 0.0, -2.3836037144064903e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.768371127283899e-06, -1.4305104514278355e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.060962586052483e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0002651214599609375, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.0003255094343330711, 0.0, -1.2874543244834058e-05, -5.328653787728399e-05, -0.00180816650390625, -7.82012939453125e-05, -0.0001220703125, -0.0004586232244037092, -9.310245513916016e-05, -0.00016593921463936567, -0.006184935569763184, -0.0027028322219848633, -0.004344940185546875, 0.0, -1.9073486328125e-06, -3.0994456210464705e-06, -6.6756979322235566e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -1.1682508556987159e-05, -1.1920928244535389e-07, -0.0002155303955078125, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -3.635883331298828e-05, -1.9073486328125e-06, -1.5497207641601562e-05, 0.0, -7.05718994140625e-05, -2.47955322265625e-05, -0.0001207590103149414, -3.576278118089249e-07, -1.33514404296875e-05, -4.1961669921875e-05, -3.62396240234375e-05, 0.0, -0.000179290771484375, -1.1920928244535389e-07, -0.00028824806213378906, -9.179088920063805e-06, -0.14208412170410156, -0.0001277923583984375, -0.00012481206795200706, -2.2649765014648438e-06, -1.9073486328125e-06, -2.288818359375e-05, -1.9073486328125e-06, -0.0005151022924110293, -1.9073486328125e-06, 0.0, -0.008853435516357422, -3.576278118089249e-07, -0.0002994537353515625, -6.4849853515625e-05, -5.7220458984375e-05, -0.0005283355712890625, -0.000606536865234375, -6.67572021484375e-05, 0.0, -1.0967240086756647e-05, -5.614749898086302e-05, -0.001064300537109375, -6.866455078125e-05, -3.814697265625e-06, -3.576278118089249e-07, -1.1920922133867862e-06, -3.4332275390625e-05, -1.9073486328125e-06, -4.7712455852888525e-06, -4.768370445162873e-07, -0.0015516281127929688, -1.9073486328125e-06, -0.18356333673000336, 0.0, -8.20159912109375e-05, -0.029584884643554688, -0.0013909339904785156, -5.960462772236497e-07, -1.1444091796875e-05, -0.16919100284576416, 0.0, -0.12122440338134766, -0.0057468414306640625, -0.01490163803100586, -8.344646857949556e-07], "choice_history": [45, 100, 154, 53, 79, "Anodized", "Robo", "Cub", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 56, 84, "create_minion", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 59, 108, 14, 78, 19, 101, "Minion", "<EOS>", 142, 36, 106, "2", "<EOS>", 36, 106, "2", "<EOS>", 150, 130, "taunt", "<EOS>", 20, 102, "True", "<EOS>", 130, "taunt", "<EOS>", 20, 102, "True", "<EOS>"]}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"score": -3.055444178208475, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Burrowing Mine", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"args": [{"hole0": "Frozen", "_type": "Template9"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "add_buff", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"func": {"value": {"id": "player", "_type": "Name"}, "attr": "draw", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"func": {"value": {"id": "player", "_type": "Name"}, "attr": "draw", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "BurrowingMine", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        player.draw()\n        player.draw()\n", "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -3.24249267578125e-05, -2.6702880859375e-05, -0.0014171091606840491, -0.00014041867689229548, -0.00019405389321036637, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -9.248778223991394e-05, -0.00022649765014648438, -7.43865966796875e-05, -0.0002613067626953125, -3.814697265625e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, 0.0, 0.0, -0.09253787994384766, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.5377996533061378e-05, -2.3841855067985307e-07, -0.000148773193359375, -1.9073486328125e-06, -5.7220458984375e-06, -8.940656698541716e-06, -0.00012564659118652344, -7.271765298355604e-06, -0.001377105712890625, 0.0, 0.0, -3.576278118089249e-07, -1.0728830375228426e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -6.198883056640625e-06, 0.0, -0.0014466047286987305, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -5.14984130859375e-05, 0.0, -2.6702880859375e-05, 0.0, -0.4297046661376953, 0.0, -3.814697265625e-06, 0.0, -0.04594230651855469, 0.0, -3.814697265625e-06, -0.0001544952392578125, -1.9073486328125e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -1.9073486328125e-06, -3.0517570849042386e-05, 0.0, -5.7220458984375e-06, -3.2305710192304105e-05, -5.722029527532868e-06, -0.9647150039672852, -0.0077953338623046875, 0.0, 0.0, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, 0.0, -6.103515625e-05, -1.4781869140279014e-05, -7.43865966796875e-05, -2.968311309814453e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -2.038461752817966e-05, -0.00016617774963378906, -2.6702880859375e-05, 0.0, -1.58548318722751e-05, -3.814697265625e-06, -0.4683399200439453, 0.0, 0.0, -0.002593994140625, -5.7220458984375e-06, -1.9073486328125e-06, -0.0017948150634765625, -1.9073486328125e-06, -0.00014495849609375, 0.0, -0.005496978759765625, 0.0, -0.0011727807577699423, -3.576278118089249e-07, -0.3049471378326416, -1.931190308823716e-05, -7.62939453125e-06, -0.0016260147094726562, -3.814697265625e-06, -0.00046539306640625, 0.0, -0.004061749204993248, -0.0003566741943359375, -1.52587890625e-05, -0.016877174377441406, -1.9073486328125e-06, -0.6157515048980713, -0.00304840668104589, -0.0010528564453125, -7.62939453125e-06, 0.0, -0.043972015380859375, -0.0029850006103515625, 0.0, -0.000244140625, 0.0, -0.014529228210449219, 0.0, -0.0010300874710083008, -2.145751568605192e-05, -0.0002651214599609375, -5.7220458984375e-06, 0.0, -0.002971649169921875, -0.0001583099365234375, 0.0, -0.0021457672119140625, 0.0, -0.009190559387207031, 0.0, -0.0028728246688842773, -4.947139314026572e-05], "choice_history": [45, 100, 154, 53, 79, "Burrowing", "Mine", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Burrowing", " ", "Mine", "<EOS>", 36, 106, "0", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 157, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 43, 122, "Frozen", "<EOS>", 54, 82, 14, 75, 11, 70, 19, 101, "player", "<EOS>", "draw", "<EOS>", 54, 82, 14, 75, 11, 70, 19, 101, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"score": -0.04509255164832382, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Crackle", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}, {"value": {"n": 1, "_type": "Num"}, "arg": "overload", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"hole0": 6, "_type": "Template5"}, {"id": "self", "_type": "Name"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "damage", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "Crackle", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "score_history": [0.0, -2.6702880859375e-05, -3.814697265625e-06, -1.33514404296875e-05, -6.103515625e-05, -0.0008934320067055523, -8.320478082168847e-05, -3.0517578125e-05, 0.0, 0.0, -0.0007451772689819336, -1.52587890625e-05, -5.7220458984375e-06, -1.1444091796875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -7.748603820800781e-06, 0.0, -0.00107574462890625, -1.9073486328125e-06, -1.9073486328125e-05, -9.1552734375e-05, -0.000217437744140625, -1.33514404296875e-05, 0.0, -7.62939453125e-06, -8.96453857421875e-05, -6.198883056640625e-06, 0.0, -5.841255187988281e-06, -5.841255187988281e-06, -2.86102294921875e-05, -6.67572021484375e-05, -7.62939453125e-06, -0.00042906138696707785, -5.7220458984375e-06, -0.000278472900390625, -1.71661376953125e-05, -1.9073454495810438e-06, -2.3841855067985307e-07, -1.1444091796875e-05, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -0.00032258033752441406, 0.0, -0.0007343292236328125, -1.9073486328125e-06, -3.814697265625e-06, -1.71661376953125e-05, -1.52587890625e-05, 0.0, -3.24249267578125e-05, 0.0, -4.76837158203125e-05, 0.0, -0.00617218017578125, -5.340576171875e-05, -0.0026459693908691406, 0.0, -3.814697265625e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.000244140625, -1.9073486328125e-06, -0.00012791156768798828, -1.2993811651540454e-05, -0.0034463312476873398, -1.1920928244535389e-07, -9.5367431640625e-06, -0.0036821365356445312, -0.00020015239715576172, -9.72747802734375e-05, -1.1444091796875e-05, -0.006677418947219849, 0.0, -4.9591064453125e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -0.000255584716796875, 0.0, -3.814697265625e-06, 0.0, 0.0, -0.0006618499755859375, -2.3841855067985307e-07, -0.00045013427734375, -0.00012063961185049266, -1.9073468138230965e-06, -0.000110626220703125, -7.62939453125e-06, 0.0, -4.00543212890625e-05, -0.0004177093505859375, -1.1444091796875e-05, 0.0, 0.0, -9.5367431640625e-06, -2.944469088106416e-05, -6.29425048828125e-05, -1.52587890625e-05, -3.0517578125e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.172325134277344e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.5377996533061378e-05, -2.2649765014648438e-06, -0.0006885528564453125, -1.9073486328125e-06, -1.1444091796875e-05, -7.05718994140625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.62939453125e-05, 0.0, -2.6702880859375e-05, 0.0, -7.152553735068068e-05, -1.1920928244535389e-07, -0.0007116794586181641, -5.340576171875e-05, -1.9073486328125e-06, -0.000698089599609375, -2.6702880859375e-05, -0.011164393275976181, -2.1815289073856547e-05, -2.09808349609375e-05, -1.9073486328125e-06, -0.0001316070556640625, -1.33514404296875e-05], "choice_history": [45, 100, 154, 53, 79, "Crackle", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Crackle", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 150, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 130, "overload", "<EOS>", 21, 106, "1", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 40, 118, "6", "<EOS>", 34, 101, "self", "<EOS>"]}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"score": -0.6763695731175972, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Emergency Coolant", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"args": [{"hole0": "Frozen", "_type": "Template9"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "add_buff", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "EmergencyCoolant", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "score_history": [0.0, 0.0, -1.1444091796875e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.58813522325363e-05, -6.318072337307967e-06, -2.622600959512056e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.3470649719238281e-05, -3.814697265625e-06, -0.00018310546875, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, 0.0, -2.0265579223632812e-06, 0.0, -0.0001049041748046875, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.003925323486328125, 0.0, -1.9073486328125e-06, 0.0, 0.0, 0.0, 0.0, -2.300739288330078e-05, -2.0265579223632812e-06, -0.000247955322265625, -5.7220458984375e-06, -1.33514404296875e-05, -6.94969785399735e-05, -0.00014507770538330078, -7.867813110351562e-06, -5.340576171875e-05, 0.0, -5.7220458984375e-06, -2.026552238021395e-06, 0.0, -0.000133514404296875, 0.0, -1.71661376953125e-05, 0.0, -1.919269561767578e-05, -1.9073486328125e-06, -0.000507354736328125, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -2.47955322265625e-05, 0.0, -5.91278076171875e-05, 0.0, -2.09808349609375e-05, -0.0001010894775390625, -0.00016415119171142578, 0.0, -9.1552734375e-05, -1.71661376953125e-05, -9.5367431640625e-06, 0.0, -1.33514404296875e-05, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -0.0001316070556640625, -3.814697265625e-06, -4.38690185546875e-05, -7.748603820800781e-06, -0.11538279056549072, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, 0.0, -0.0004291534423828125, 0.0, -6.4373016357421875e-06, -1.33514404296875e-05, 0.0, -0.00012207030522404239, -4.768370445162873e-07, -2.86102294921875e-05, -0.00021040067076683044, -5.960462772236497e-07, -0.0003566741943359375, -9.5367431640625e-06, -3.814697265625e-06, -7.62939453125e-06, -8.392333984375e-05, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -5.483620952873025e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -2.1457672119140625e-06, -2.0265579223632812e-06, -9.5367431640625e-06, 0.0, -3.826618194580078e-05, 0.0, -0.00247955322265625, 0.0, -2.09808349609375e-05, -0.3293495178222656, -4.9591064453125e-05, -0.000125885009765625, -2.47955322265625e-05, 0.0, -0.0006275177001953125, 0.0, -2.09808349609375e-05, 0.0, -5.233287811279297e-05, 0.0, -0.08538269996643066, -5.7220458984375e-06, -1.9073486328125e-05, -0.0060710906982421875, -1.33514404296875e-05, -0.000141143798828125, 0.0, -0.00037133690784685314, -1.52587890625e-05, -6.866455078125e-05, -0.021709442138671875, -3.814697265625e-06, -0.10639400780200958, -0.00030763642280362546], "choice_history": [45, 100, 154, 53, 79, "Emergency", "Coolant", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 145, 37, 110, "Emergency", " ", "Coolant", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 35, 102, "False", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 43, 122, "Frozen", "<EOS>"]}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"score": -1.9768443873457429, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Flying Machine", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"n": 1, "_type": "Num"}, {"n": 4, "_type": "Num"}], "func": {"id": "Minion", "_type": "Name"}, "keywords": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "windfury", "_type": "keyword"}, {"value": {"value": true, "_type": "NameConstant"}, "arg": "spell_targetable", "_type": "keyword"}], "_type": "Call"}, "_type": "Return"}], "name": "create_minion", "_type": "FunctionDef"}], "name": "FlyingMachine", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True, spell_targetable=True)\n", "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, -3.814697265625e-06, -7.2479248046875e-05, -0.005185724701732397, -0.003133151913061738, -1.9073468138230965e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -1.1919473763555288e-07, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.7285345165873878e-05, -4.768370445162873e-07, 0.0, -7.62939453125e-06, 0.0, -5.9604644775390625e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0001964569091796875, -4.57763671875e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, -2.0265579223632812e-06, -1.9073486328125e-06, -2.741813204920618e-06, -7.152551916078664e-06, -5.340576171875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -9.536738616588991e-07, -5.924701690673828e-05, -4.0531158447265625e-06, -1.9073486328125e-05, 0.0, 0.0, -2.3603437512065284e-05, 0.0, -9.5367431640625e-06, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -9.643760859034956e-05, -4.172325134277344e-06, -2.455709909554571e-05, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.728534698486328e-05, 0.0, -0.00042569637298583984, -1.1920928244535389e-07, -0.0009613037109375, -4.76837158203125e-05, -5.14984130859375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -0.000133514404296875, -2.0265579223632812e-06, -0.00011074542999267578, -2.2649765014648438e-06, -0.12078857421875, -0.001407623291015625, -0.00012612342834472656, -1.1563301086425781e-05, 0.0, -3.0517578125e-05, -0.0001392364501953125, -0.01139068603515625, 0.0, -2.86102294921875e-05, -0.002672433853149414, 0.0, -0.32525062561035156, -8.20159912109375e-05, -0.0004863739013671875, -1.33514404296875e-05, -0.000396728515625, -7.82012939453125e-05, -0.0018482208251953125, -0.0002704704529605806, -3.933906555175781e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -3.0636783776571974e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00012421607971191406, -2.861022494471399e-06, -0.0004253387451171875, -1.71661376953125e-05, -0.7200661897659302, 0.0, -0.006256103515625, -9.918212890625e-05, -0.00034439563751220703, 0.0, 0.0, -0.24426591396331787, -0.00019490718841552734, -0.31923961639404297, -0.0001277923583984375, -0.209669828414917, 0.0], "choice_history": [45, 100, 154, 53, 79, "Flying", "Machine", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Flying", " ", "Machine", "<EOS>", 36, 106, "3", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 56, 84, "create_minion", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 59, 108, 14, 78, 19, 101, "Minion", "<EOS>", 142, 36, 106, "1", "<EOS>", 36, 106, "4", "<EOS>", 150, 130, "windfury", "<EOS>", 20, 102, "True", "<EOS>", 130, "spell_targetable", "<EOS>", 20, 102, "True", "<EOS>"]}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"score": -2.6135122728934945, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Goblin Auto-Barber", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"args": [{"args": [{"hole0": 1, "_type": "Template7"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"args": [{"args": [{"s": "Give weapon", "_type": "Str"}], "func": {"id": "HasCardName", "_type": "Name"}, "_type": "Call"}], "func": {"id": "MinionSelector", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 2, "hole0": 3, "_type": "Template1"}], "name": "GoblinAuto-Barber", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Buff(ChangeAttack(1))), MinionSelector(\n            HasCardName('Give weapon'))))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "score_history": [0.0, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -5.91278076171875e-05, -0.00894694309681654, -9.703165414975956e-05, -6.794917680963408e-06, -9.5367431640625e-06, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -1.6450881958007812e-05, -2.3841855067985307e-07, 0.0, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, 0.0, -4.76837158203125e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0001811981201171875, -6.103515625e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -9.536726793157868e-06, -1.9073486328125e-06, -4.29153169534402e-06, -1.5497176718781702e-05, -8.0108642578125e-05, -3.24249267578125e-05, -3.814697265625e-06, -1.0371204552939162e-05, -6.473064422607422e-05, -9.536741345073096e-06, -9.34600830078125e-05, -1.9073486328125e-06, 0.0, -5.7697296142578125e-05, 0.0, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -5.400161535362713e-05, -1.1920928244535389e-07, -0.0008225440396927297, -1.52587890625e-05, -1.1444091796875e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.3470649719238281e-05, 0.0, -0.0003281831741333008, 0.0, -0.0024261474609375, -1.33514404296875e-05, -7.2479248046875e-05, 0.0, -9.5367431640625e-06, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-05, 0.0, -0.0002638101577758789, -7.152555099310121e-07, -2.09808349609375e-05, -4.0411949157714844e-05, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -4.76837158203125e-05, 0.0, -7.057188486214727e-05, -2.3841855067985307e-07, -9.5367431640625e-06, -0.012439727783203125, -3.4332275390625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.00022009015083312988, -0.0004756547277793288, -0.0009212493896484375, -0.056738853454589844, -0.000141143798828125, -1.1444091796875e-05, -3.814697265625e-06, -0.07872645556926727, -6.902158202137798e-05, -1.1444091796875e-05, -0.005084991455078125, -9.5367431640625e-06, -0.035952046513557434, 0.0, -0.07151126861572266, -0.7520275115966797, -4.1961669921875e-05, -1.71661376953125e-05, -0.0009832382202148438, -7.62939453125e-06, 0.0, -0.000186920166015625, -0.044834136962890625, -7.62939453125e-05, -1.52587890625e-05, -0.0008106231689453125, -0.6531165838241577, -0.041519902646541595, -0.10495173931121826, -2.658331868587993e-05, -3.814697265625e-06, -0.1342926025390625, -0.0003871917724609375, -0.5249567627906799, -0.03765404224395752, -0.039275240153074265, -1.71661376953125e-05, -0.001285552978515625, -6.4849853515625e-05, -0.00029408931732177734, 0.0, -0.00010895729064941406, 0.0], "choice_history": [45, 100, 154, 53, 79, "Goblin", "Auto-Barber", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Goblin", " ", "Auto-Barber", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 150, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 41, 120, "1", "<EOS>", 29, 77, 19, 101, "Minion", "Selector", "<EOS>", 141, 29, 77, 19, 101, "Has", "Card", "Name", "<EOS>", 141, 37, 110, "Give", " ", "weapon", "<EOS>", 61, 114, "3", "<EOS>", "2", "<EOS>"]}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"score": -1.1064674449978824, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Iron Sensei", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"hole0": "TurnEnded", "_type": "Template9"}, {"args": [{"args": [{"hole0": 2, "_type": "Template8"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "RandomPicker", "_type": "Template9"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 2, "hole2": "effects", "hole0": 2, "_type": "Template0"}], "name": "IronSensei", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(2)), MinionSelector(picker=RandomPicker())))])\n", "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -3.814697265625e-06, -7.05718994140625e-05, -0.014119843021035194, -0.00015555603022221476, -5.6028297876764555e-06, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.1919473763555288e-07, -2.0265579223632812e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.447864532470703e-05, -2.9802317840221804e-06, -1.9073486328125e-06, -2.09808349609375e-05, -3.814697265625e-06, -1.0013580322265625e-05, 0.0, -0.0001697540283203125, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000141143798828125, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, 0.0, -2.3841855067985307e-07, 0.0, -6.079673767089844e-06, -5.483625955093885e-06, -9.34600830078125e-05, -5.7220458984375e-06, -1.1444091796875e-05, -2.0265558760002023e-06, -0.0002789463324006647, -9.179109838441946e-06, -1.1444091796875e-05, 0.0, 0.0, -7.009483670117334e-05, 0.0, -1.9073486328125e-06, 0.0, -5.53131103515625e-05, 0.0, -2.3126571250031702e-05, -5.960462772236497e-07, -0.0010095805628225207, -5.7220458984375e-06, -9.5367431640625e-06, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -9.655952453613281e-06, -1.9073486328125e-06, -0.0009706020355224609, -1.1920928244535389e-07, -6.4849853515625e-05, -9.1552734375e-05, -0.00021946430206298828, 0.0, -9.5367431640625e-06, 0.0, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -3.814697265625e-06, -0.00013768672943115234, -2.0265579223632812e-06, -0.01927947998046875, -7.62939453125e-06, -2.980227463922347e-06, 0.0, -0.00015270602307282388, 0.0, -4.148472362430766e-05, -2.15768777707126e-05, -0.0001735687255859375, -0.0001583099365234375, -0.000133514404296875, -5.7220458984375e-06, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -2.6941299438476562e-05, -9.5367431640625e-06, -0.00022125244140625, -5.53131103515625e-05, 0.0, -9.572500857757404e-05, -0.0003383159637451172, -1.1444091796875e-05, -0.006072998046875, -1.52587890625e-05, -5.91278076171875e-05, 0.0, -1.1801719665527344e-05, -1.1444091796875e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-05, -1.9073486328125e-05, -2.86102294921875e-05, -0.008045554161071777, -1.52587890625e-05, 0.0, -0.2996206283569336, -0.0001010894775390625, -0.15622210502624512, -3.62396240234375e-05, -9.5367431640625e-06, -0.003376007080078125, -0.000843048095703125, -1.9073486328125e-06, -0.00209808349609375, -7.62939453125e-06, 0.0, -0.00197601318359375, 0.0, -0.0004596710205078125, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.5881271362304688, -0.0004940032958984375, -1.9073486328125e-06], "choice_history": [45, 100, 154, 53, 79, "Iron", "Sensei", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Iron", " ", "Sensei", "<EOS>", 36, 106, "3", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 60, 113, "2", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 43, 122, "Turn", "Ended", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 42, 121, "2", "<EOS>", 29, 76, 19, 101, "Minion", "Selector", "<EOS>", 149, 130, "picker", "<EOS>", 23, 122, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"score": -2.378553124228347, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"args": [{"args": [{"hole0": "Immune", "_type": "Template9"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"args": [{"hole0": "IsDamaged", "_type": "Template9"}], "func": {"id": "CharacterSelector", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 7, "hole0": 9, "_type": "Template1"}], "name": "Mal'Ganis", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry\n            =Battlecry(Give(Buff(Immune())), CharacterSelector(IsDamaged())))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n", "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -2.09808349609375e-05, -2.47955322265625e-05, -3.814697265625e-06, -0.0007374286069534719, -0.007964571937918663, -1.9073486328125e-06, 0.0, 0.0, -2.1673738956451416e-05, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, -9.1552734375e-05, -1.9073486328125e-06, -4.458427429199219e-05, -5.841255187988281e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -0.0006923675537109375, -9.5367431640625e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0001010894775390625, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, 0.0, -6.198883056640625e-06, 0.0, -4.410743713378906e-06, -2.503394853192731e-06, -8.392333984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.6689160474925302e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0007349607767537236, -4.768370445162873e-07, -1.52587890625e-05, -1.52587890625e-05, -3.4332275390625e-05, -1.9073486328125e-06, -1.8954275219584815e-05, -4.768370445162873e-07, -0.0008732080459594727, -9.5367431640625e-06, -1.9073486328125e-06, -1.33514404296875e-05, -9.5367431640625e-06, 0.0, -7.069110870361328e-05, -3.814697265625e-06, -0.00025594234466552734, -3.814697265625e-06, -0.06269550323486328, -1.52587890625e-05, -0.0002307891845703125, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -5.7220458984375e-06, 0.0, -8.7738037109375e-05, 0.0, -0.000988006591796875, 0.0, -4.57763671875e-05, -0.0003663301467895508, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.608268737792969e-05, -5.960462772236497e-07, -2.6702880859375e-05, -0.000385284423828125, -2.288818359375e-05, -0.000858306884765625, 0.0, -0.38364899158477783, -0.00041210331255570054, -3.62396240234375e-05, -0.000568389892578125, -1.1444091796875e-05, -0.00025653839111328125, -1.9073486328125e-06, -0.010740392841398716, -0.012049078941345215, 0.0, -0.00865936279296875, 0.0, -0.09544195979833603, -0.0005448935553431511, -0.17525482177734375, -0.10791778564453125, -0.0002384185791015625, 0.0, -0.4626418352127075, -6.139259494375437e-05, 0.0, -0.00836181640625, -0.04745960235595703, -1.52587890625e-05, -0.7394772171974182, -0.2464337944984436, -6.365573790390044e-05, -0.000240325927734375, -1.1444091796875e-05, -3.099436753473128e-06, -3.576278118089249e-07, -7.05718994140625e-05, -7.867811291362159e-06], "choice_history": [45, 100, 154, 53, 79, "Mal'Ganis", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Mal'Ganis", "<EOS>", 36, 106, "9", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 150, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 43, 122, "Immune", "<EOS>", 29, 77, 19, 101, "Character", "Selector", "<EOS>", 141, 43, 122, "Is", "Damaged", "<EOS>", 61, 114, "9", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"score": -1.0092732693895456, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Mistress of Pain", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"hole0": "Damaged", "_type": "Template9"}, {"args": [{"args": [{"n": 1, "_type": "Num"}], "func": {"id": "Heal", "_type": "Name"}, "_type": "Call"}, {"hole0": "HeroSelector", "_type": "Template9"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 4, "hole2": "effects", "hole0": 1, "_type": "Template0"}], "name": "MistressOfPain", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(1),\n            HeroSelector()))])\n", "score_history": [0.0, 0.0, -3.814697265625e-06, -2.47955322265625e-05, -2.6702880859375e-05, -0.00012814189540222287, -0.005024546291679144, -0.009430614300072193, -1.9073486328125e-06, -3.814697265625e-05, 0.0, 0.0, -2.3242086172103882e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -2.872943878173828e-05, -1.9073486328125e-06, 0.0, 0.0, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.000469207763671875, -7.62939453125e-06, -0.0002460479736328125, -1.9073486328125e-06, -0.000171661376953125, -1.71661376953125e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.3960863472893834e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.2040138244628906e-05, -3.0517578125e-05, -1.71661376953125e-05, -1.52587890625e-05, -2.5629668016335927e-05, -0.00011754035949707031, -1.5735626220703125e-05, -4.780292510986328e-05, -0.019442200660705566, 0.0, -1.9073486328125e-06, 0.0, -0.15202757716178894, 0.0, -3.814697265625e-06, 0.0, -1.1444091796875e-05, 0.0, -1.3589857189799659e-05, -5.960462772236497e-07, -0.0005325078964233398, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -2.8848648071289062e-05, -1.9073486328125e-06, -0.00018858909606933594, 0.0, -0.0047245025634765625, -2.288818359375e-05, -2.5033950805664062e-05, -5.7220458984375e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.0004425048828125, -1.1920928244535389e-07, -0.009775161743164062, -1.9073486328125e-05, -3.6954820643586572e-06, 0.0, -1.0848005331354216e-05, 0.0, -0.0001684427261352539, -0.00014698505401611328, -9.5367431640625e-06, -9.5367431640625e-06, -6.4849853515625e-05, -9.5367431640625e-06, 0.0, -5.7220458984375e-06, 0.0, -3.254413604736328e-05, -9.5367431640625e-06, -6.866455078125e-05, -4.1961669921875e-05, 0.0, -0.4080216884613037, -0.0016442537307739258, -0.0013790130615234375, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -5.841255187988281e-05, -6.711483001708984e-05, 0.0, -3.814697265625e-06, -0.0004482269287109375, -1.71661376953125e-05, -1.71661376953125e-05, 0.0, -0.04228973388671875, -0.0005958080291748047, -5.7220458984375e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.3359188437461853, 0.0, -0.0005588531494140625, -1.9073486328125e-06, -0.014226078987121582, -1.7523765563964844e-05, -1.1444091796875e-05], "choice_history": [45, 100, 154, 53, 79, "Mistress", "Of", "Pain", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Mistress", " ", "of", " ", "Pain", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 60, 113, "1", "<EOS>", "4", "<EOS>", "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 43, 122, "Damaged", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Heal", "<EOS>", 141, 36, 106, "1", "<EOS>", 43, 122, "Hero", "Selector", "<EOS>"]}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"score": -7.573607516497859, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Powermace", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"n": 3, "_type": "Num"}, {"n": 2, "_type": "Num"}], "func": {"id": "Weapon", "_type": "Name"}, "keywords": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}, {"value": {"elts": [{"args": [{"hole0": "Give", "_type": "Template9"}, {"args": [{"args": [{"hole0": 2, "_type": "Template7"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"args": [{"args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "func": {"id": "IsType", "_type": "Name"}, "_type": "Call"}], "func": {"id": "MinionSelector", "_type": "Name"}, "_type": "Call"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Call"}, "_type": "Return"}], "name": "create_minion", "_type": "FunctionDef"}], "name": "Powermace", "bases": [{"id": "WeaponCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, taunt=True, effects=[Effect(Give(), ActionTag(\n            Give(ChangeAttack(2)), MinionSelector(IsType(MINION_TYPE.BEAST))))]\n            )\n", "score_history": [0.0, -1.9073486328125e-06, -4.9591064453125e-05, -1.71661376953125e-05, -3.814697265625e-06, -2.074220174108632e-05, -0.0004208441823720932, -3.814697265625e-06, 0.0, 0.0, -0.00014506772276945412, -0.0004448657273314893, -4.053113570989808e-06, -0.00017547607421875, -7.62939453125e-06, 0.0, -7.748603820800781e-06, -3.576278118089249e-07, 0.0, -3.814697265625e-06, 0.0, -2.3841855067985307e-07, 0.0, -9.5367431640625e-06, 0.0, 0.0, 0.0, -0.0033979415893554688, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -1.1920922133867862e-06, -1.9073486328125e-06, -1.0371204552939162e-05, -6.210611172718927e-05, -0.531768798828125, -1.9073486328125e-06, -1.9073486328125e-06, -7.986990567587782e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0002874135971069336, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -2.6822088329936378e-05, -2.3841855067985307e-07, -0.00027883052825927734, -3.814697265625e-06, 0.0, 0.0, -1.1444091796875e-05, 0.0, -1.5735626220703125e-05, -1.1920928244535389e-07, -0.0001555681083118543, -8.344646857949556e-07, -0.0001544952392578125, -1.9073486328125e-06, -0.5156275033950806, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -1.9073486328125e-06, -0.00034177303314208984, 0.0, -0.004467010498046875, -0.000225067138671875, -2.86102294921875e-05, -3.814697265625e-06, -0.0025787353515625, -2.288818359375e-05, 0.0, -1.9907940441044047e-05, -1.9311717551317997e-05, -0.0001735687255859375, -0.000194549560546875, 0.0, -3.933906555175781e-06, -2.50339189733495e-06, 0.0, 0.0, -0.00010919568740064278, -4.768370445162873e-07, -0.028151512145996094, -0.0004177093505859375, -1.2564587593078613, 0.0, -0.03025341033935547, -0.0010013580322265625, -1.71661376953125e-05, 0.0, -0.0001621246337890625, -0.6692450046539307, -2.741813204920618e-06, -0.000247955322265625, -0.000110626220703125, -6.866455078125e-05, -5.7220458984375e-06, -5.7220458984375e-06, -2.09808349609375e-05, -3.814697265625e-06, -0.09109139442443848, -3.814697265625e-06, -1.33514404296875e-05, -0.18237876892089844, -1.9073486328125e-06, -1.0819584131240845, -0.6072690486907959, -4.1961669921875e-05, -0.000133514404296875, -1.71661376953125e-05, 0.0, -0.006728053092956543, -5.602836608886719e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.00543212890625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.0007735630497336388, -4.959094803780317e-05, -5.7220458984375e-06, -0.03205299377441406, -1.1444091796875e-05, -0.0034396040719002485, -3.814697265625e-06, -0.6538562774658203, -0.6409416198730469, -3.0517578125e-05, 0.0, -0.10867571830749512, -7.62939453125e-05, -9.5367431640625e-06, -6.4849853515625e-05, -0.02043628692626953, -2.6702880859375e-05, -1.71661376953125e-05, -5.340576171875e-05, -0.1346731185913086, -0.00030612925183959305, -4.982948303222656e-05, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -2.6702880859375e-05, 0.0, -2.47955322265625e-05, -2.1457672119140625e-06, -0.9605981111526489, 0.0], "choice_history": [45, 100, 154, 53, 79, "Powermace", "<EOS>", 141, 34, 101, "Weapon", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Powermace", "<EOS>", 36, 106, "3", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 56, 84, "create_minion", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 59, 108, 14, 78, 19, 101, "Weapon", "<EOS>", 142, 36, 106, "3", "<EOS>", 36, 106, "2", "<EOS>", 150, 130, "taunt", "<EOS>", 20, 102, "True", "<EOS>", 130, "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 43, 122, "Give", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 41, 120, "2", "<EOS>", 29, 77, 19, 101, "Minion", "Selector", "<EOS>", 141, 29, 77, 19, 101, "Is", "Type", "<EOS>", 141, 26, 70, 19, 101, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"]}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"score": -1.2743161649745502, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Screwjank Clunker", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"args": [{"elts": [{"args": [{"hole0": 2, "_type": "Template7"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}, {"hole0": 2, "_type": "Template3"}], "_type": "List"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"args": [{"args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}], "func": {"id": "IsType", "_type": "Name"}, "_type": "Call"}], "func": {"id": "MinionSelector", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 5, "hole0": 2, "_type": "Template1"}], "name": "ScrewjankClunker", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH))))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "score_history": [-1.9073486328125e-06, -7.62939453125e-06, -7.62939453125e-05, -9.5367431640625e-06, -0.000324249267578125, -0.21588046848773956, -0.0007463291985914111, -3.933898824470816e-06, -7.62939453125e-06, 0.0, 0.0, 0.0, 0.0, -2.3841855067985307e-07, -1.9073486328125e-05, -1.1444091796875e-05, 0.0, -3.1948089599609375e-05, -3.4570680327306036e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -9.894371032714844e-06, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0001316070556640625, -0.0001049041748046875, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -6.079673767089844e-06, -1.9073486328125e-06, -5.483625955093885e-06, -1.4662718058389146e-05, -5.53131103515625e-05, -5.7220458984375e-06, -9.5367431640625e-06, -1.41858699862496e-05, -6.139278411865234e-05, -8.225440979003906e-06, -5.340576171875e-05, -1.9073486328125e-06, 0.0, -8.654589328216389e-05, -1.1920928244535389e-07, -1.1444091796875e-05, 0.0, -8.392333984375e-05, 0.0, -3.874298636219464e-05, -1.1920928244535389e-07, -0.0008796451729722321, -2.0265579223632812e-06, -1.52587890625e-05, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.0002492666244506836, -1.9073486328125e-06, -0.0003147125244140625, -0.0001544952392578125, -7.62939453125e-05, -1.1920928244535389e-07, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00021779537200927734, -1.1920928244535389e-07, -9.5367431640625e-06, -8.58306884765625e-05, 0.0, -5.7220458984375e-06, -4.76837158203125e-05, -1.9073486328125e-06, 0.0, -8.308883843710646e-05, 0.0, -0.000152587890625, -2.09808349609375e-05, -8.0108642578125e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.000653684139251709, -0.00016641593538224697, -0.000240325927734375, -0.04873180389404297, -2.6702880859375e-05, -0.006047248840332031, -0.011555671691894531, -7.05718994140625e-05, -1.71661376953125e-05, -0.00025177001953125, -0.0003107786178588867, -2.0265579223632812e-06, 0.0, -0.00140380859375, -4.38690185546875e-05, -0.0005792377633042634, -1.9073486328125e-06, -0.5912351608276367, -0.0002155303955078125, -0.0007668733596801758, 0.0, -0.04215812683105469, -0.0034971237182617188, -0.0005235671997070312, 0.0, -0.0003285407437942922, -5.53131103515625e-05, 0.0, -0.000972747802734375, -0.00043964385986328125, -8.58306884765625e-05, -3.0517578125e-05, -9.34600830078125e-05, -0.3413947820663452, -0.00031471194233745337, -9.655952453613281e-06, -1.9073486328125e-06, -0.0006732940673828125, 0.0, -0.0002288818359375, 0.0, -7.2479248046875e-05, -2.0265579223632812e-06, -0.0004584789276123047, -1.9073486328125e-06, -0.000213623046875, -5.7220458984375e-06, -1.0490395652595907e-05, 0.0, -5.602834789897315e-06, -1.9073486328125e-06], "choice_history": [45, 100, 154, 53, 79, "Screwjank", "Clunker", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Screwjank", " ", "Clunker", "<EOS>", 36, 106, "4", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 150, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 32, 96, 142, 29, 77, 19, 101, "Buff", "<EOS>", 141, 41, 120, "2", "<EOS>", 39, 116, "2", "<EOS>", 29, 77, 19, 101, "Minion", "Selector", "<EOS>", 141, 29, 77, 19, 101, "Is", "Type", "<EOS>", 141, 26, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 61, 114, "2", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"score": -2.250822564250882, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "<UNK> Old Shredder", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"args": [{"args": [{"hole0": "<UNK>Old", "_type": "Template9"}], "func": {"id": "Summon", "_type": "Name"}, "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template9"}], "func": {"id": "Deathrattle", "_type": "Name"}, "_type": "Call"}, "hole1": 7, "hole2": "deathrattle", "hole0": 5, "_type": "Template0"}], "name": "<UNK>OldShredder", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 7, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(<UNK>Old()),\n            PlayerSelector()))\n", "score_history": [-3.814697265625e-06, -1.9073486328125e-06, -8.96453857421875e-05, -1.52587890625e-05, -7.62939453125e-06, -4.875610102317296e-05, -0.01035008393228054, -0.00839207787066698, -5.8412379075889476e-06, -1.9073486328125e-06, 0.0, 0.0, -4.758359864354134e-06, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, -5.7220458984375e-05, 0.0, -8.7738037109375e-05, -3.576278118089249e-07, 0.0, -1.9073486328125e-05, 0.0, -5.9604644775390625e-06, 0.0, -6.866455078125e-05, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -0.0003147125244140625, -9.918212890625e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -8.940695806813892e-06, -0.0007343292236328125, -1.9073457224294543e-05, -6.496906280517578e-05, -8.96453857421875e-05, -6.67572021484375e-05, -5.53131103515625e-05, -0.15547190606594086, -0.00014972686767578125, -0.0027835892979055643, -0.1430368423461914, -0.0002595182158984244, -0.0001506805419921875, 0.0, 0.0, -0.5944135189056396, -1.1920922133867862e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -4.422662823344581e-05, -4.172325134277344e-06, -4.42265227320604e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -9.202957153320312e-05, 0.0, -7.891654968261719e-05, 0.0, -0.0002079010009765625, -5.7220458984375e-06, -0.0004863739013671875, 0.0, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -2.6702880859375e-05, 0.0, -0.00030171871185302734, -1.537795105832629e-05, -0.00258636474609375, -0.0001087188720703125, -0.002004524925723672, -2.264974000354414e-06, -0.0005955678643658757, -2.0265579223632812e-06, -0.0008573531522415578, -1.52587890625e-05, -0.0003681182861328125, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.0001609325408935547, 0.0, -0.000507354736328125, -0.0001316070556640625, -3.0517578125e-05, -7.62939453125e-06, -5.7220458984375e-06, -0.01753408834338188, -0.0005392786697484553, -0.005825042724609375, -0.030150413513183594, 0.0, -0.4359244108200073, -0.43437933921813965, -0.39929017424583435, -0.0010356903076171875, 0.0, -0.0003781318664550781, -5.245203283266164e-06, 0.0], "choice_history": [45, 100, 154, 53, 79, "<UNK>", "Old", "Shredder", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 36, 106, "7", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 60, 113, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 14, 77, 19, 101, "Deathrattle", "<EOS>", 142, 29, 77, 19, 101, "Summon", "<EOS>", 141, 43, 122, "<UNK>", "Old", "<EOS>", 43, 122, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"score": -2.926161665401814, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Toshley", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"hole0": "Bounce", "_type": "Template9"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template9"}, "arg": "players", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 7, "hole0": 5, "_type": "Template1"}], "name": "ToshleyBearCat", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class ToshleyBearCat(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Bounce(), MinionSelector(players\n            =BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "score_history": [-2.47955322265625e-05, -5.7220458984375e-06, -2.288818359375e-05, -2.47955322265625e-05, -0.000274658203125, -0.33315902948379517, -0.26183584332466125, -0.2614017724990845, -0.000557176535949111, -7.62939453125e-06, -1.9073486328125e-06, 0.0, 0.0, -2.1457672119140625e-06, -1.3470649719238281e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.00014173983072396368, -5.006789251638111e-06, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -6.687641143798828e-05, 0.0, -0.009958267211914062, -5.7220458984375e-06, -9.5367431640625e-06, -1.9073486328125e-06, -8.392333984375e-05, -8.7738037109375e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.00012421607971191406, -4.76837158203125e-05, -5.841255187988281e-06, -1.1086463018727954e-05, -4.38690185546875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -8.141670696204528e-05, -0.0003490447998046875, -1.1444091796875e-05, 0.0, -0.002064347267150879, 0.0, -7.62939453125e-06, 0.0, -5.7220458984375e-06, 0.0, -5.412074096966535e-05, -2.9802322387695312e-05, -9.11950774025172e-05, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, -0.00031697750091552734, -3.0517578125e-05, -4.589557647705078e-05, 0.0, -0.00673675537109375, -1.9073486328125e-05, -0.0011577606201171875, 0.0, -0.020053863525390625, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.0013887882232666016, -1.9073486328125e-06, -2.86102294921875e-05, -0.4474754333496094, 0.0, -0.296970009803772, -0.008465349674224854, -0.0060634613037109375, -0.00067138671875, -0.00011444091796875, -3.814697265625e-06, -0.20641660690307617, -0.0001506805419921875, 0.0, -0.5468854904174805, 0.0, -0.5106801986694336, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -0.000835418701171875, -8.58306884765625e-05, 0.0, -0.0007476806640625, -1.9073486328125e-06, -3.576278118089249e-07, -7.152555099310121e-07, -8.20159912109375e-05, -1.1920928244535389e-07], "choice_history": [45, 100, 154, 53, 79, "Toshley", "Bear", "Cat", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Toshley", "<EOS>", 36, 106, "6", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 43, 122, "Bounce", "<EOS>", 29, 76, 19, 101, "Minion", "Selector", "<EOS>", 149, 130, "players", "<EOS>", 23, 122, "Both", "Player", "<EOS>", 61, 114, "5", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"score": -1.4770707888675005, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Warbot", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"hole0": 1, "_type": "Template7"}, {"hole0": "SelfSelector", "_type": "Template9"}], "func": {"id": "Aura", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 3, "hole2": "enrage", "hole0": 1, "_type": "Template0"}], "name": "Warbot", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "score_history": [0.0, -3.814697265625e-06, -2.86102294921875e-05, -3.0517578125e-05, -5.7220458984375e-06, -4.2914463847409934e-05, -2.3364897060673684e-05, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.1915108188986778e-07, -2.1457672119140625e-06, -2.3841855067985307e-07, -1.71661376953125e-05, -3.814697265625e-06, -1.9073486328125e-06, -7.987019671418238e-06, -3.576277322281385e-06, -9.5367431640625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -8.106231689453125e-06, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.00012969970703125, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -4.6491513785440475e-06, 0.0, -1.2040087312925607e-05, -7.510169325541938e-06, -0.09296798706054688, -3.814697265625e-06, -1.9073486328125e-06, -2.0265558760002023e-06, 0.0, -3.814697265625e-06, 0.0, -0.000200748530915007, 0.0, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -2.658360608620569e-05, 0.0, -0.0003664493269752711, 0.0, -1.71661376953125e-05, 0.0, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, 0.0, -5.936622619628906e-05, 0.0, -4.9591064453125e-05, -1.52587890625e-05, -1.1563301086425781e-05, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -4.76837158203125e-05, 0.0, -1.33514404296875e-05, -1.1920928244535389e-07, -0.0001627206802368164, -3.6954811548639555e-06, -0.5009307861328125, -4.76837158203125e-05, -1.71661376953125e-05, 0.0, -5.9247013268759474e-05, 0.0, -0.04890012741088867, 0.0, -0.00019073486328125, -1.33514404296875e-05, -0.0020046234130859375, -9.5367431640625e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -0.0013524293899536133, -1.0013580322265625e-05, -0.0015850067138671875, -0.0022563934326171875, -0.000579833984375, -0.6128705143928528, -4.768370445162873e-07, -0.032408714294433594, -3.814697265625e-06, -0.17930452525615692, -9.48871165746823e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Warbot", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Warbot", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 60, 113, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Aura", "<EOS>", 142, 41, 120, "1", "<EOS>", 43, 122, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"score": -4.289307325764668, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Deathlord", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"n": 2, "_type": "Num"}, {"n": 8, "_type": "Num"}], "func": {"id": "Minion", "_type": "Name"}, "keywords": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "charge", "_type": "keyword"}, {"value": {"elts": [{"args": [{"hole0": "puts", "_type": "Template9"}, {"args": [{"args": [{"args": [{"hole0": "puts", "_type": "Template9"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"hole0": "HeroSelector", "_type": "Template9"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "_type": "Call"}, "_type": "Return"}], "name": "create_minion", "_type": "FunctionDef"}], "name": "Deathlord", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, charge=True, effects=[Effect(puts(), ActionTag(\n            Give(Buff(puts())), HeroSelector()))])\n", "score_history": [-5.7220458984375e-06, -7.62939453125e-06, -1.52587890625e-05, -1.33514404296875e-05, -7.62939453125e-06, -4.529942543740617e-06, -0.00023077242076396942, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, -2.7060508728027344e-05, -2.503394853192731e-06, -5.14984130859375e-05, -1.52587890625e-05, 0.0, -1.263618378288811e-05, -3.576278118089249e-07, 0.0, -1.9073486328125e-06, 0.0, -2.1457672119140625e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0023889541625976562, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.3378546504536644e-06, 0.0, -7.987019671418238e-06, -2.9802276912960224e-06, -0.000240325927734375, 0.0, -1.9073486328125e-06, -2.6702524337451905e-05, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.1920926823449918e-07, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.662330295308493e-05, -1.1563301086425781e-05, -2.944469451904297e-05, 0.0, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.2278556823730469e-05, 0.0, -0.00027728077839128673, -1.6689286894688848e-06, -0.6772918701171875, -0.0001125335693359375, -0.00018309848383069038, -4.410743713378906e-06, -1.9073486328125e-06, -4.00543212890625e-05, 0.0, -0.0008754730224609375, 0.0, 0.0, -3.3855438232421875e-05, 0.0, -0.0025110244750976562, -0.0008983612060546875, -5.340576171875e-05, -7.62939453125e-06, -6.29425048828125e-05, -0.00024318695068359375, -1.9073486328125e-06, -9.536708603263833e-06, -2.2172922399477102e-05, -1.33514404296875e-05, -1.9073486328125e-05, 0.0, -9.536738616588991e-07, -3.576278118089249e-07, -0.0023365020751953125, 0.0, -0.018325090408325195, -3.576278118089249e-07, -0.0012359619140625, 0.0, -0.45069098472595215, 0.0, -0.0031213760375976562, -9.5367431640625e-06, -1.823902130126953e-05, 0.0, -3.814697265625e-06, -0.3199855089187622, -1.1920928244535389e-07, -5.14984130859375e-05, 0.0, -3.62396240234375e-05, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, 0.0, -0.18319988250732422, -2.384185791015625e-06, -1.1444091796875e-05, -0.0076389312744140625, 0.0, -0.9660531282424927, -0.27547788619995117, -0.000339508056640625, -0.0002155303955078125, -1.1444091796875e-05, 0.0, -8.141983562381938e-05, -5.8531761169433594e-05, 0.0, -3.814697265625e-06, -0.0005779266357421875, -7.43865966796875e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.019398923963308334, -2.0623192540369928e-05, -1.52587890625e-05, -0.16684913635253906, -0.00079345703125, -9.5367431640625e-06, -2.47955322265625e-05, -0.00806498434394598, -0.005484223365783691, -1.9073486328125e-06, -0.4916658401489258, -1.9073486328125e-06, -0.1580597162246704, -0.22838139533996582, -9.5367431640625e-06, -9.5367431640625e-06, -0.2950136661529541, -9.059880540007725e-06, 0.0], "choice_history": [45, 100, 154, 53, 79, "Deathlord", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Deathlord", "<EOS>", 36, 106, "3", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 56, 84, "create_minion", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 59, 108, 14, 78, 19, 101, "Minion", "<EOS>", 142, 36, 106, "2", "<EOS>", 36, 106, "8", "<EOS>", 150, 130, "charge", "<EOS>", 20, 102, "True", "<EOS>", 130, "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 43, 122, "puts", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 43, 122, "puts", "<EOS>", 43, 122, "Hero", "Selector", "<EOS>"]}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"score": -2.7048853913985127, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Nerub'ar Weblord", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"args": [{"args": [{"args": [{"n": 1, "_type": "Num"}], "func": {"id": "ManaChange", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "IsSpell", "_type": "Template9"}, "arg": "condition", "_type": "keyword"}], "_type": "Call"}, {"hole0": "TurnEnded", "_type": "Template9"}], "func": {"id": "AuraUntil", "_type": "Name"}, "_type": "Call"}], "func": {"id": "GiveAura", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "PlayerSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template9"}, "arg": "players", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 4, "hole0": 1, "_type": "Template1"}], "name": "Nerub'arWeblord", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(GiveAura(AuraUntil(\n            ManaChange(1), CardSelector(condition=IsSpell()), TurnEnded())),\n            PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n", "score_history": [-7.62939453125e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.52587890625e-05, -2.09808349609375e-05, -0.0002953569928649813, -4.815939246327616e-05, -0.00011145447206217796, -3.814697265625e-06, 0.0, 0.0, 0.0, -2.360340477025602e-05, -6.556507287314162e-06, -4.76837158203125e-05, -3.814697265625e-05, 0.0, -1.4066696166992188e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -1.1920928244535389e-07, 0.0, -6.866455078125e-05, -0.0001220703125, -1.33514404296875e-05, 0.0, -0.003833770751953125, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -5.7220458984375e-06, -4.0531158447265625e-06, 0.0, -1.6570085790590383e-05, -5.006777428206988e-06, -6.4849853515625e-05, -7.43865966796875e-05, -9.5367431640625e-06, -9.65590606938349e-06, -8.130073547363281e-05, -9.894371032714844e-06, -0.0016632080078125, 0.0, 0.0, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.2755388524965383e-05, -1.9073486328125e-06, -2.5033950805664062e-05, 0.0, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -0.0001239776611328125, 0.0, -5.7220458984375e-05, -7.62939453125e-06, -0.009224176406860352, -1.52587890625e-05, 0.0, -9.5367431640625e-06, -1.71661376953125e-05, 0.0, -0.0022183656692504883, 0.0, -1.9073486328125e-06, -2.288818359375e-05, -7.62939453125e-06, -5.7220458984375e-06, -1.52587890625e-05, -0.002086400520056486, -0.10869956016540527, -4.768370445162873e-07, -1.33514404296875e-05, -0.4160137176513672, -3.4332275390625e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.056552886962890625, -0.007664680480957031, 0.0, -0.4093818664550781, -0.0001239776611328125, -2.47955322265625e-05, -9.5367431640625e-06, 0.0, -0.003999829292297363, -0.00013065338134765625, -1.5497207641601562e-05, -1.33514404296875e-05, -0.22168731689453125, 0.0, -0.7282693386077881, 0.0, -0.0013141632080078125, -0.0007610321044921875, -4.38690185546875e-05, 0.0, -0.0016269683837890625, -0.0101165771484375, 0.0, -0.0004253387451171875, 0.0, -0.0002994537353515625, 0.0, -0.056880950927734375, -9.5367431640625e-06, -0.001954316394403577, -0.1599172055721283, -9.429454803466797e-05, -0.0029392242431640625, -3.814697265625e-06, -0.007522573694586754, -0.014578580856323242, -1.1920922133867862e-06, -0.0010967254638671875, -0.000244140625, -0.0002994537353515625, 0.0, -0.026218652725219727, 0.0, -1.9073486328125e-06, -0.00112152099609375, -1.33514404296875e-05, -0.026535630226135254, 0.0, -3.814697265625e-06, 0.0, -0.4163717031478882, -7.963180541992188e-05, 0.0, -0.00115966796875, -7.62939453125e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -3.933906555175781e-06, 0.0], "choice_history": [45, 100, 154, 53, 79, "Nerub'ar", "Weblord", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Nerub'ar", " ", "Weblord", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Give", "Aura", "<EOS>", 141, 29, 77, 19, 101, "Aura", "Until", "<EOS>", 143, 29, 77, 19, 101, "Mana", "Change", "<EOS>", 141, 36, 106, "1", "<EOS>", 29, 76, 19, 101, "Card", "Selector", "<EOS>", 149, 130, "condition", "<EOS>", 23, 122, "Is", "Spell", "<EOS>", 43, 122, "Turn", "Ended", "<EOS>", 29, 76, 19, 101, "Player", "Selector", "<EOS>", 149, 130, "players", "<EOS>", 23, 122, "Both", "Player", "<EOS>", 61, 114, "1", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"score": -0.1859117324552173, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole1": 5, "hole2": "ALL", "hole0": "Spectral Knight", "_type": "Template2"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"value": true, "_type": "NameConstant"}, "hole1": 6, "hole2": "spell_targetable", "hole0": 4, "_type": "Template0"}], "name": "SpectralKnight", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "score_history": [-1.9073486328125e-06, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.0021846338640898466, -0.0002739054325502366, -6.63974933559075e-05, -1.33514404296875e-05, 0.0, 0.0, 0.0, -4.649161837733118e-06, -4.5299530029296875e-06, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -5.841253368998878e-06, -1.9073468138230965e-06, 0.0, -1.9073486328125e-06, 0.0, -4.649161837733118e-06, 0.0, -2.6702880859375e-05, -0.07201766967773438, -3.24249267578125e-05, -4.625213477993384e-05, -0.00018858909606933594, -1.4781946447328664e-05, -5.483620952873025e-06, -1.728519782773219e-05, 0.0, -0.0006378850084729493, 0.0, -0.018619537353515625, -0.000102996826171875, -6.437291176553117e-06, -1.1920928244535389e-07, -0.007566927000880241, 0.0, -0.07671403884887695, 0.0, -0.0003871917724609375, -5.7220458984375e-06, -0.0069026947021484375, 0.0], "choice_history": [45, 100, 154, 53, 79, "Spectral", "Knight", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 62, 115, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 60, 113, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 20, 102, "False", "<EOS>"]}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"score": -1.11688265254341, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Wailing Soul", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"hole0": "Silence", "_type": "Template9"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "UserPicker", "_type": "Template9"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 5, "hole0": 3, "_type": "Template1"}], "name": "WailingSoul", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector\n            (picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "score_history": [-9.5367431640625e-06, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-05, -9.5367431640625e-06, -2.825220326485578e-05, -3.766942609217949e-05, -5.781483559985645e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -1.1920928244535389e-07, -5.483620952873025e-06, -2.86102294921875e-05, -6.103515625e-05, -7.62939453125e-06, -0.0001652240753173828, -2.2649765014648438e-06, 0.0, -0.000335693359375, -5.7220458984375e-06, -2.241134461655747e-05, 0.0, -0.0001926422119140625, -1.9073486328125e-06, -2.288818359375e-05, -3.814697265625e-06, -0.0008640289306640625, -0.00037384033203125, -1.9073486328125e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.1113551813177764e-05, -9.894371032714844e-06, -3.6120407457929105e-05, -5.364403477869928e-06, -8.20159912109375e-05, -1.9073486328125e-05, -7.62939453125e-06, -3.576272320060525e-06, -5.352497100830078e-05, -8.344650268554688e-06, -0.0004940032958984375, 0.0, 0.0, -3.933906555175781e-06, -5.960462772236497e-07, -2.86102294921875e-05, 0.0, -3.814697265625e-06, 0.0, -9.584336658008397e-05, -1.609325408935547e-05, -5.447864532470703e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -6.866455078125e-05, -1.9073486328125e-06, -0.00032460689544677734, 0.0, -0.0013027191162109375, -2.6702880859375e-05, -0.00045013427734375, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -6.473052781075239e-05, -1.311301275563892e-06, -2.09808349609375e-05, -0.05306434631347656, 0.0, -0.005895547568798065, -0.05893044173717499, -0.0081939697265625, -0.0066967010498046875, -1.71661376953125e-05, 0.0, -0.030742168426513672, -5.7220458984375e-06, -1.1920928244535389e-07, -0.41318321228027344, -1.9073486328125e-06, -0.5187267065048218, -1.1920928244535389e-07, -0.0015506744384765625, 0.0, -0.013430237770080566, -0.0006693601608276367, 0.0, -4.76837158203125e-05, -5.7220458984375e-06, -7.748603820800781e-06, -5.781504660262726e-05, -7.62939453125e-06, -9.834607772063464e-05], "choice_history": [45, 100, 154, 53, 79, "Wailing", "Soul", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Wailing", " ", "Soul", "<EOS>", 36, 106, "4", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 43, 122, "Silence", "<EOS>", 29, 76, 19, 101, "Minion", "Selector", "<EOS>", 149, 130, "picker", "<EOS>", 23, 122, "User", "Picker", "<EOS>", 61, 114, "3", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"score": -1.3685290503033798, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole1": 2, "hole2": "ALL", "hole0": "Amani Berserker", "_type": "Template2"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"hole0": 5, "_type": "Template7"}, {"hole0": "SelfSelector", "_type": "Template9"}], "func": {"id": "Aura", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 3, "hole2": "enrage", "hole0": 2, "_type": "Template0"}], "name": "AmaniBerserker", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(5), SelfSelector())])\n", "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.52587890625e-05, -0.00034254882484674454, -6.568216485902667e-05, -0.00022706791060045362, -3.814697265625e-06, 0.0, 0.0, 0.0, -4.0292736230185255e-05, -5.602834789897315e-06, -1.1444091796875e-05, -5.53131103515625e-05, 0.0, -4.8637259169481695e-05, -1.9073468138230965e-06, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -8.583047019783407e-06, 0.0, -3.4332275390625e-05, -0.0010833740234375, -0.0001430511474609375, -1.1086402082582936e-05, -5.4717063903808594e-05, -8.225440979003906e-06, -1.9550199795048684e-05, -2.2649765014648438e-06, -1.5497195136049413e-06, -0.0010195339564234018, 0.0, -0.01123046875, -0.0001068115234375, -9.536738616588991e-07, -5.960462772236497e-07, -2.3841666916268878e-05, 0.0, -0.010906815528869629, 0.0, -0.0004558563232421875, -0.0002880096435546875, -0.2824697494506836, -2.47955322265625e-05, -7.62939453125e-06, -9.5367431640625e-06, -2.09808349609375e-05, -0.0028346776962280273, -0.00024878978729248047, -0.037667274475097656, -0.000335693359375, -6.29425048828125e-05, -0.7343658804893494, -7.6293927122605965e-06, -1.33514404296875e-05, -0.0002040863037109375, -0.28397923707962036, -4.768370445162873e-07, 0.0], "choice_history": [45, 100, 154, 53, 79, "Amani", "Berserker", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 62, 115, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 60, 113, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Aura", "<EOS>", 142, 41, 120, "5", "<EOS>", 43, 122, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"score": -1.0502567439757087, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Archmage Antonidas", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "MAGE", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"args": [{"args": [{"n": 1, "_type": "Num"}], "func": {"id": "ManaCost", "_type": "Name"}, "_type": "Call"}], "func": {"id": "SpellCast", "_type": "Name"}, "_type": "Call"}, {"args": [{"args": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"value": {"elts": [{"hole0": "IsMinion", "_type": "Template9"}], "_type": "List"}, "arg": "conditions", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "AddCard", "_type": "Name"}, "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template9"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 7, "hole2": "effects", "hole0": 5, "_type": "Template0"}], "name": "ArchmageAntonidas", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsMinion()])),\n            PlayerSelector()))])\n", "score_history": [-3.814697265625e-06, -1.33514404296875e-05, -2.6702880859375e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.005569417029619217, -0.0008925982983782887, -3.349725011503324e-05, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.00036304586683399975, -5.841255187988281e-06, -1.7404556274414062e-05, -7.05718994140625e-05, -1.52587890625e-05, -3.814697265625e-06, -0.00016415119171142578, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, -4.0531158447265625e-06, 0.0, -7.2479248046875e-05, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -0.0001163482666015625, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -2.539156957936939e-05, -5.7220458984375e-06, -2.1338453734642826e-05, -4.649158654501662e-06, -3.0517578125e-05, -1.9073486328125e-06, -3.814697265625e-06, -6.794906312279636e-06, -8.022785186767578e-05, -6.318092346191406e-06, -0.0002117156982421875, -1.9073486328125e-06, 0.0, -3.310292959213257e-05, -5.006777428206988e-06, -1.9073486328125e-06, 0.0, -7.82012939453125e-05, 0.0, -7.18832015991211e-05, -2.3841855067985307e-07, -0.0011496543884277344, -5.7220458984375e-06, -0.0006504058837890625, -6.103515625e-05, -4.1961669921875e-05, 0.0, -7.450580596923828e-05, -1.9073486328125e-06, -0.0003529787063598633, -1.9073486328125e-06, -0.0002307891845703125, -0.00012969970703125, -1.0847986231965479e-05, -1.1920928244535389e-07, -0.0005177237908355892, -1.1920928244535389e-07, -0.0002137422125088051, -0.00023663043975830078, -1.9073486328125e-05, -7.62939453125e-06, -0.0006999969482421875, -9.5367431640625e-06, 0.0, -0.0001125335693359375, 0.0, -0.00015485286712646484, -1.7523765563964844e-05, -1.9073486328125e-06, -0.024951934814453125, -0.004376411437988281, -3.814697265625e-06, -1.9073486328125e-06, -0.00023328253882937133, -0.0009310244349762797, -3.814697265625e-06, -0.03342437744140625, -0.0002613067626953125, -5.7220458984375e-05, -0.0001583099365234375, 0.0, -0.013296111486852169, -0.035592786967754364, -0.0001512765884399414, -0.0001316070556640625, -0.0007686614990234375, -1.9073486328125e-06, -0.0017389979911968112, 0.0, -5.91278076171875e-05, -7.05718994140625e-05, -5.7220458984375e-06, 0.0, -0.0004200935363769531, -0.000843048095703125, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -0.0001678466796875, -5.7220458984375e-06, 0.0, -0.008567809127271175, -0.0004035234160255641, -9.918212890625e-05, -5.340576171875e-05, -0.03016948699951172, -0.0007953643798828125, -2.6702880859375e-05, -3.814697265625e-06, -0.0005484813009388745, -0.00044083595275878906, -3.6597251892089844e-05, -0.027654647827148438, -0.00051116943359375, -0.03082573413848877, 0.0, -0.0002269744873046875, -2.09808349609375e-05, -0.004817962646484375, -0.12178230285644531, -5.7220458984375e-06, -0.0012745821150019765, -0.15358594059944153, -1.33514404296875e-05, -0.013650894165039062, 0.0, -0.5240999460220337, -0.0002557039260864258, -1.9073486328125e-06], "choice_history": [45, 100, 154, 53, 79, "Archmage", "Antonidas", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Archmage", " ", "Antonidas", "<EOS>", 36, 106, "7", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 60, 113, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 29, 77, 19, 101, "Spell", "Cast", "<EOS>", 141, 29, 77, 19, 101, "Mana", "Cost", "<EOS>", 141, 36, 106, "1", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Add", "Card", "<EOS>", 141, 29, 76, 19, 101, "Card", "Query", "<EOS>", 149, 130, "conditions", "<EOS>", 17, 96, 141, 43, 122, "Is", "Minion", "<EOS>", 43, 122, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"score": -0.3539816291736244, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Bananas", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"args": [{"hole0": 3, "_type": "Template7"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "add_buff", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "Bananas", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(ChangeAttack(3)))\n", "score_history": [0.0, -1.71661376953125e-05, -4.38690185546875e-05, -4.57763671875e-05, -2.09808349609375e-05, -6.6756979322235566e-06, -4.517961497185752e-05, -1.9073486328125e-06, 0.0, 0.0, -3.635883331298828e-05, -0.00011074542999267578, -8.0108642578125e-05, -2.288818359375e-05, -5.7220458984375e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, 0.0, -1.9073486328125e-06, 0.0, -0.000263214111328125, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0010089874267578125, 0.0, -4.76837158203125e-05, -1.33514404296875e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.933906555175781e-06, -7.748603820800781e-06, -0.0008068084716796875, -1.9073486328125e-06, -9.5367431640625e-06, -0.00039748396375216544, -2.6702880859375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.4901031136105303e-05, 0.0, -0.000156402587890625, 0.0, -1.71661376953125e-05, 0.0, -1.728534698486328e-05, 0.0, -0.000614166259765625, 0.0, -1.9073486328125e-06, 0.0, -2.288818359375e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0001430511474609375, 0.0, -7.62939453125e-06, -7.62939453125e-06, -7.653236389160156e-05, 0.0, -0.000102996826171875, -3.24249267578125e-05, -7.62939453125e-06, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.000690460205078125, -9.5367431640625e-06, -0.0001964569091796875, -9.655952453613281e-06, -0.009456872940063477, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -2.09808349609375e-05, -0.0002002716064453125, 0.0, -2.86102294921875e-05, -3.814697265625e-06, 0.0, -7.748603820800781e-06, -1.1920928244535389e-07, -1.33514404296875e-05, -2.968305670947302e-05, -2.3841830625315197e-06, -0.0014667510986328125, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -0.0036602020263671875, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, -2.6702880859375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -2.47955322265625e-05, 0.0, -2.1457672119140625e-06, -5.9604644775390625e-06, -5.7220458984375e-06, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -0.0003147125244140625, 0.0, -1.71661376953125e-05, -0.0007686614990234375, 0.0, -7.43865966796875e-05, -1.1444091796875e-05, 0.0, -0.000240325927734375, 0.0, -7.62939453125e-06, 0.0, -3.457069396972656e-05, 0.0, -0.030359506607055664, -7.748603820800781e-06, -1.9073486328125e-06, -0.005934715270996094, -1.9073486328125e-05, -0.0001373291015625, 0.0, -0.0005309339612722397, -3.8623809814453125e-05, -7.82012939453125e-05, -0.048842430114746094, -0.0003681182861328125, -0.24575257301330566, -2.6702880859375e-05], "choice_history": [45, 100, 154, 53, 79, "Bananas", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 145, 37, 110, "Bananas", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 35, 102, "False", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 41, 120, "3", "<EOS>"]}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"score": -1.691973343004058, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Blessed Champion", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"args": [{"hole0": "<UNK>", "_type": "Template9"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "add_buff", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "BlessedChampion", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(<UNK>()))\n", "score_history": [-1.52587890625e-05, -1.9073486328125e-06, -4.00543212890625e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.0026922905817627907, -2.753696753643453e-05, -1.0728830375228426e-06, -1.52587890625e-05, 0.0, 0.0, -0.000141143798828125, -5.3882598876953125e-05, -0.00298309326171875, -5.53131103515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -0.0005359649658203125, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.0018253326416015625, -1.9073486328125e-06, 0.0, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.480910891084932e-05, -2.3841855067985307e-07, -0.0002155303955078125, -3.814697265625e-06, -3.814697265625e-06, -8.344629350176547e-06, -9.548664093017578e-05, -2.6106834411621094e-05, -0.0001659393310546875, 0.0, 0.0, -7.152555099310121e-07, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -1.0251998901367188e-05, -3.814697265625e-06, -0.000667572021484375, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -0.0004062652587890625, 0.0, -6.4849853515625e-05, 0.0, -0.00011575219832593575, -5.960462772236497e-07, -0.0002040863037109375, -3.814697265625e-06, -6.866455078125e-05, 0.0, -3.814697265625e-05, -3.24249267578125e-05, -2.6702880859375e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.003635406494140625, -0.000232696533203125, -3.0517578125e-05, -2.09808349609375e-05, -0.012466788291931152, -2.861022494471399e-06, -7.62939453125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0006866455078125, 0.0, -1.1444091796875e-05, -1.33514404296875e-05, 0.0, -3.0517576306010596e-05, -1.1920928244535389e-07, -0.0001277923583984375, -0.00016176700592041016, -1.4305104514278355e-06, -0.010176658630371094, -3.814697265625e-06, -1.9073486328125e-05, -1.71661376953125e-05, -0.0013561248779296875, -7.62939453125e-06, 0.0, 0.0, 0.0, -2.503394853192731e-06, -1.33514404296875e-05, -1.3828277587890625e-05, 0.0, -3.814697265625e-06, -3.4332275390625e-05, 0.0, -7.987022399902344e-06, -1.71661376953125e-05, -8.392333984375e-05, 0.0, -0.0001621246337890625, 0.0, -0.06888961791992188, -1.33514404296875e-05, -5.53131103515625e-05, -7.2479248046875e-05, 0.0, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -0.00099945068359375, 0.0, -0.00026702880859375, 0.0, -0.0002113577793352306, -2.3841855067985307e-07, -0.8037842512130737, -2.8848648071289062e-05, -5.7220458984375e-06, -0.0025358200073242188, -9.72747802734375e-05, -0.0005588531494140625, 0.0, -0.0020697112195193768, -8.392333984375e-05, -1.9073486328125e-06, -0.6677217483520508, -1.9073486328125e-06, -0.0014687401708215475, -0.10300646722316742], "choice_history": [45, 100, 154, 53, 79, "Blessed", "Champion", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Blessed", " ", "Champion", "<EOS>", 36, 106, "5", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 43, 122, "<UNK>", "<EOS>"]}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"score": -1.5831036913956709, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Cabal Shadow", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PRIEST", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "EPIC", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"hole0": "<UNK>", "_type": "Template9"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template9"}, "arg": "players", "_type": "keyword"}, {"value": {"hole0": "UserPicker", "_type": "Template9"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 5, "hole0": 4, "_type": "Template1"}], "name": "CabalShadow", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(<UNK>(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "score_history": [-0.000102996826171875, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -2.6702880859375e-05, -0.0006023023161105812, -0.00282409624196589, -0.004411769099533558, -9.5367431640625e-06, 0.0, 0.0, -1.192074705613777e-07, -1.1682510375976562e-05, -8.106231689453125e-06, -3.4332275390625e-05, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -2.47955322265625e-05, 0.0, -5.841255187988281e-06, 0.0, -0.000293731689453125, 0.0, -3.814697265625e-06, -7.62939453125e-06, -0.000102996826171875, -3.0517578125e-05, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -9.894368304230738e-06, 0.0, -1.9311904907226562e-05, -2.3841855067985307e-07, -3.0517578125e-05, -1.33514404296875e-05, -9.5367431640625e-06, -6.985420623095706e-05, -6.115436553955078e-05, -0.00038993358612060547, -0.00295257568359375, -1.9073486328125e-06, 0.0, -6.783007847843692e-05, -7.152555099310121e-07, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -7.271765298355604e-06, -5.960462772236497e-07, -0.0009114741696976125, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -2.288818359375e-05, -7.62939453125e-06, -0.0006198883056640625, -2.0265579223632812e-06, -0.0001659393310546875, -7.62939453125e-06, -0.000270843505859375, 0.0, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, 0.0, -0.00010693073272705078, 0.0, -0.000148773193359375, -0.3336620330810547, 0.0, -0.9137324094772339, -0.2321178913116455, -5.53131103515625e-05, -0.0007152557373046875, -8.58306884765625e-05, -1.9073486328125e-06, -0.0002331728464923799, -7.62939453125e-06, 0.0, -0.06522655487060547, -7.62939453125e-06, -0.014362931251525879, 0.0, -7.2479248046875e-05, 0.0, -0.005327343940734863, -8.606910705566406e-05, 0.0, -3.814697265625e-06, -0.0015660524368286133, -1.1920928244535389e-07, -9.1552734375e-05, -1.9073486328125e-06, -0.0001678466796875, -0.000476837158203125, -1.9073486328125e-06, -0.00017547607421875, -1.9073486328125e-06, -2.2649765014648438e-06, -8.344646857949556e-07, -0.00038552284240722656, 0.0], "choice_history": [45, 100, 154, 53, 79, "Cabal", "Shadow", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Cabal", " ", "Shadow", "<EOS>", 36, 106, "6", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 43, 122, "<UNK>", "<EOS>", 29, 76, 19, 101, "Minion", "Selector", "<EOS>", 150, 130, "players", "<EOS>", 23, 122, "Both", "Player", "<EOS>", 130, "picker", "<EOS>", 23, 122, "User", "Picker", "<EOS>", 61, 114, "4", "<EOS>", "5", "<EOS>"]}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"score": -5.3045265129737444, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Cone of Cold", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"targets": [{"id": "left_minion", "_type": "Name"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}, {"value": {"args": [{"id": "self", "_type": "Name"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "die", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"target": {"id": "target", "_type": "Name"}, "body": [{"value": {"args": [{"args": [{"func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "calculate_attack", "_type": "Attribute"}, "_type": "Call"}], "func": {"value": {"id": "player", "_type": "Name"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "_type": "Call"}, {"id": "self", "_type": "Name"}], "func": {"value": {"id": "minion", "_type": "Name"}, "attr": "damage", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "iter": {"value": {"value": {"id": "game", "_type": "Name"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "For"}], "name": "use", "_type": "FunctionDef"}], "name": "ConeOfCold", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        left_minion = Null\n        self.target.die(self)\n        for target in game.other_player.minions:\n            minion.damage(player.effective_spell_damage(self.target.\n                calculate_attack()), self)\n", "score_history": [0.0, -1.9073486328125e-06, -0.0001888275146484375, -1.33514404296875e-05, -0.0001316070556640625, -1.8000440832111053e-05, -0.001131699187681079, -0.00027962643071077764, -1.7523612768854946e-05, -6.866455078125e-05, 0.0, 0.0, -4.76837158203125e-05, -9.1552734375e-05, -1.9073486328125e-06, -0.0013790130615234375, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -7.867813110351562e-06, -1.9073486328125e-06, -6.103515625e-05, -0.0003299713134765625, -0.000244140625, -5.7220458984375e-06, -0.001781463623046875, -1.9073486328125e-06, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.872943878173828e-05, -1.1920928244535389e-07, -4.9591064453125e-05, -3.62396240234375e-05, -5.7220458984375e-06, -4.851700214203447e-05, -0.0001093149185180664, -2.372257222305052e-05, -9.644031524658203e-05, -0.0128556489944458, -0.0004520416259765625, -1.9073486328125e-06, -1.9073486328125e-06, -1.3232140190666541e-05, -1.1920922133867862e-06, -0.0001087188720703125, -6.67572021484375e-05, -3.0517578125e-05, -5.7220458984375e-06, -1.8238997654407285e-05, -5.7220458984375e-06, -0.1784611940383911, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, 0.0, -5.91278076171875e-05, 0.0, -0.0008697509765625, 0.0, -0.0005855560302734375, -1.71661376953125e-05, -2.6702880859375e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -9.5367431640625e-06, -4.57763671875e-05, 0.0, -0.000659942626953125, -3.814697265625e-06, -6.29425048828125e-05, -2.47955322265625e-05, -0.15822792053222656, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, 0.0, -0.000823974609375, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.655952453613281e-06, 0.0, -1.9073486328125e-06, -1.6808504369691946e-05, -4.529942543740617e-06, -0.3308830261230469, -0.00016021728515625, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -3.8743019104003906e-05, -1.52587890625e-05, -9.655952453613281e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -1.5854835510253906e-05, -1.71661376953125e-05, -1.71661376953125e-05, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -0.019420623779296875, -3.814697265625e-06, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -1.9926494359970093, -3.814697265625e-06, -0.018143653869628906, -0.0003185272216796875, -9.1552734375e-05, -1.9073486328125e-06, -0.04487895965576172, 0.0, -1.9073486328125e-06, -0.000965118408203125, 0.0, -1.71661376953125e-05, -5.340576171875e-05, -1.9073486328125e-06, -0.21080875396728516, 0.0, -0.0020198822021484375, 0.0, -4.8279762268066406e-05, 0.0, -0.3060811758041382, 0.0, -5.7220458984375e-05, -0.0001354217529296875, -2.09808349609375e-05, -0.007511138916015625, -0.0001049041748046875, -0.23431110382080078, -0.00018310546875, -0.0002574920654296875, 0.0, -0.5057333707809448, 0.0, -0.005130767822265625, 0.0, -0.003192901611328125, 0.0, -3.814697265625e-05, 0.0, -0.0033779144287109375, 0.0, -0.0012155771255493164, 0.0, -0.5943506360054016, -1.1920909855689388e-05, -1.1444091796875e-05, -0.0006732940673828125, 0.0, -1.52587890625e-05, -7.62939453125e-06, -5.7220458984375e-06, -9.5367431640625e-06, -0.05588722229003906, -0.00012969970703125, -0.02118372917175293, -1.9073486328125e-06, -0.0008478164672851562, -9.5367431640625e-06, -4.9591064453125e-05, -0.011402130126953125, -0.14168167114257812, -3.814697265625e-06, -9.5367431640625e-06, -0.013553619384765625, 0.0, -0.060873985290527344, -2.3841855067985307e-07, -0.020076632499694824, 0.0, -0.00016021728515625, -0.2280893325805664, -0.01006317138671875, -8.20159912109375e-05, 0.0, -0.000240325927734375, 0.0, -0.00185394287109375, 0.0, -0.009404182434082031, -3.814697265625e-06, -4.780292510986328e-05, 0.0, -0.0348505973815918, -1.9073486328125e-06, -0.05102348327636719, -4.1961669921875e-05, -9.5367431640625e-06, -1.9073486328125e-06], "choice_history": [45, 100, 154, 53, 79, "Cone", "Of", "Cold", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Cone", " ", "of", " ", "Cold", "<EOS>", 36, 106, "4", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 157, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 50, 69, 141, 34, 101, "left_minion", "<EOS>", 20, 103, "Null", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 141, 34, 101, "self", "<EOS>", 55, 83, 19, 101, "target", "<EOS>", 11, 70, 11, 70, 19, 101, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 19, 101, "minion", "<EOS>", "damage", "<EOS>", 142, 29, 77, 11, 70, 19, 101, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 29, 75, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 34, 101, "self", "<EOS>"]}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score": -1.9083824070173918, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Defender of Argus", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"args": [{"elts": [{"args": [{"hole0": 2, "_type": "Template7"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}, {"hole0": 2, "_type": "Template3"}], "_type": "List"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"args": [{"args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}], "func": {"id": "IsType", "_type": "Name"}, "_type": "Call"}], "func": {"id": "MinionSelector", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 3, "hole0": 2, "_type": "Template1"}], "name": "DefenderOfArgus", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(2\n            )), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.\n            BEAST))))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score_history": [0.0, -1.9073486328125e-06, -2.86102294921875e-05, -2.288818359375e-05, -4.76837158203125e-05, -0.00015579440514557064, -0.0012194942682981491, -0.1485869586467743, -0.03883475065231323, -5.7220458984375e-06, 0.0, 0.0, 0.0, -2.3841855067985307e-07, -3.4570634852570947e-06, -3.4332275390625e-05, -9.34600830078125e-05, -5.7220458984375e-06, -0.00044357776641845703, 0.0, 0.0, -6.103515625e-05, 0.0, -6.079673767089844e-06, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001239776611328125, -2.288818359375e-05, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.0371197276981547e-05, -2.0265579223632812e-06, -9.775161743164062e-06, -8.821463779895566e-06, -0.000118255615234375, -5.7220458984375e-06, -3.814697265625e-06, -1.3470558769768104e-05, -0.00014221668243408203, -1.8000580894295126e-05, -4.6372413635253906e-05, -0.009102582931518555, -0.0015163421630859375, -1.9073486328125e-06, 0.0, -3.2067298889160156e-05, -4.768360213347478e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, 0.0, -3.647802441264503e-05, -1.1563301086425781e-05, -6.330013275146484e-05, 0.0, -7.62939453125e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, -5.7220458984375e-06, -0.00016987323760986328, 0.0, -0.00048828125, -7.62939453125e-06, -0.0007343292236328125, -5.9604644775390625e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.1961669921875e-05, 0.0, -7.35519643058069e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.76837158203125e-05, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -0.0011213123798370361, -0.0040743350982666016, -0.000484466552734375, -0.0002384185791015625, -7.2479248046875e-05, -0.00122833251953125, -0.010282516479492188, -5.7220458984375e-06, -9.5367431640625e-06, -9.5367431640625e-06, -0.0061187744140625, -5.006789251638111e-06, -1.9073486328125e-06, -0.08243846893310547, -4.1961669921875e-05, -0.21010318398475647, -3.576278118089249e-07, -0.6762857437133789, -0.0010852813720703125, -0.029140615835785866, 0.0, -0.0007152557373046875, -0.4047870635986328, -0.000713348388671875, -1.9073486328125e-06, -0.0002766847610473633, -9.34600830078125e-05, -1.9073486328125e-06, -0.000591278076171875, -0.021918296813964844, -3.0517578125e-05, -6.4849853515625e-05, -0.000560760498046875, -0.19622229039669037, -0.00040308761526830494, -3.135204315185547e-05, -0.0003299713134765625, -3.0517578125e-05, 0.0, -1.9073486328125e-05, 0.0, -0.0001697540283203125, -1.0728830375228426e-06, -0.05482053756713867, -3.814697265625e-06, -0.0012054443359375, -7.62939453125e-06, -3.4570634852570947e-06, 0.0, -9.179100743494928e-06, -2.0265579223632812e-06], "choice_history": [45, 100, 154, 53, 79, "Defender", "Of", "Argus", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Defender", " ", "of", " ", "Argus", "<EOS>", 36, 106, "4", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 32, 96, 142, 29, 77, 19, 101, "Buff", "<EOS>", 141, 41, 120, "2", "<EOS>", 39, 116, "2", "<EOS>", 29, 77, 19, 101, "Minion", "Selector", "<EOS>", 141, 29, 77, 19, 101, "Is", "Type", "<EOS>", 141, 26, 70, 19, 101, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 61, 114, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"score": -0.6486351157501744, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Doomhammer", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "EPIC", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"n": 2, "_type": "Num"}, "arg": "overload", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"n": 2, "_type": "Num"}, {"n": 8, "_type": "Num"}], "func": {"id": "Weapon", "_type": "Name"}, "_type": "Call"}, "_type": "Return"}], "name": "create_weapon", "_type": "FunctionDef"}], "name": "Doomhammer", "bases": [{"id": "WeaponCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "score_history": [0.0, -2.6702880859375e-05, -5.7220458984375e-06, -7.62939453125e-06, -8.58306884765625e-05, -3.4331718779867515e-05, -0.07151615619659424, -5.7220458984375e-06, 0.0, 0.0, -0.0010799315059557557, -0.00016319751739501953, -0.00016021728515625, -4.1961669921875e-05, -2.288818359375e-05, -1.9073486328125e-06, -4.780292510986328e-05, -0.000152587890625, 0.0, -5.7220458984375e-06, 0.0, -4.76837158203125e-05, 0.0, -0.0011997222900390625, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0006008148193359375, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.24249267578125e-05, -7.748603820800781e-06, 0.0, -3.933906555175781e-06, -2.622604142743512e-06, -6.103515625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.417090768693015e-05, -0.021595001220703125, -1.33514404296875e-05, -1.71661376953125e-05, -0.15774738788604736, -8.344646857949556e-07, -1.71661376953125e-05, 0.0, -3.0517578125e-05, 0.0, -0.00015473365783691406, -1.1920928244535389e-07, -0.0006257295608520508, -2.6702880859375e-05, -3.814697265625e-06, -1.52587890625e-05, -7.62939453125e-06, 0.0, -0.00014495849609375, -2.288818359375e-05, -0.0003147125244140625, -4.768370445162873e-07, -0.0002193450927734375, -1.9073486328125e-06, -0.0037555694580078125, -2.300739288330078e-05, -5.14984130859375e-05, -9.5367431640625e-06, -0.0024028057232499123, -7.62939453125e-06, -0.04143047332763672, -1.9073486328125e-06, -0.198614239692688, -5.7220458984375e-06, -3.814697265625e-06, -0.000141143798828125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -4.76837158203125e-05, 0.0, -0.13033294677734375, -0.00048065185546875, -0.0001373291015625, -5.7220458984375e-06, -0.007518768310546875, -0.00033473968505859375, -7.62939453125e-06, -0.004715624265372753, -3.576278118089249e-07, -4.57763671875e-05, -0.0001392364501953125, -2.09808349609375e-05, -1.1682157492032275e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -1.9073486328125e-06, -0.001829385757446289, -0.00013362467871047556], "choice_history": [45, 100, 154, 53, 79, "Doomhammer", "<EOS>", 141, 34, 101, "Weapon", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Doomhammer", "<EOS>", 36, 106, "5", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 149, 130, "overload", "<EOS>", 21, 106, "2", "<EOS>", 56, 84, "create_weapon", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 59, 108, 14, 77, 19, 101, "Weapon", "<EOS>", 142, 36, 106, "2", "<EOS>", 36, 106, "8", "<EOS>"]}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"score": -0.6159491323427844, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Earth Shock", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"n": 1, "_type": "Num"}, {"id": "self", "_type": "Name"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "damage", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "EarthShock", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(1, self)\n", "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -1.71661376953125e-05, -1.33514404296875e-05, -2.09808349609375e-05, -0.02418561838567257, -6.794698856538162e-05, -3.576278118089249e-07, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -2.3360480554401875e-05, -4.744528996525332e-05, -9.5367431640625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, 0.0, 0.0, -2.0265579223632812e-06, -1.9073486328125e-06, -0.000141143798828125, -5.7220458984375e-06, -5.7220458984375e-06, -1.33514404296875e-05, -0.0007534027099609375, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, 0.0, -1.9073486328125e-06, 0.0, -8.153914677677676e-05, -1.1920928244535389e-07, -0.0001220703125, -7.62939453125e-06, -3.814697265625e-06, -1.3351351299206726e-05, -8.392333984375e-05, -5.960462203802308e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -3.635196480900049e-05, 0.0, -9.5367431640625e-06, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -1.7404556274414062e-05, 0.0, -0.0002689361572265625, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, 0.0, -2.872943878173828e-05, 0.0, -0.0007076263427734375, 0.0, -0.0001583099365234375, -1.1444091796875e-05, -1.52587890625e-05, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-05, 0.0, -0.0001964569091796875, -3.814697265625e-06, -4.00543212890625e-05, -9.5367431640625e-06, -0.012681245803833008, 0.0, -1.9073486328125e-06, 0.0, -8.654594421386719e-05, 0.0, 0.0, -0.0005817413330078125, -3.814697265625e-06, -2.1457672119140625e-06, -5.7220458984375e-06, 0.0, -0.00011944770812988281, 0.0, -2.47955322265625e-05, -8.773800800554454e-05, -2.1576648578047752e-05, -0.01580333709716797, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.38690185546875e-05, -5.7220458984375e-06, 0.0, 0.0, 0.0, -4.1723224057932384e-06, -1.71661376953125e-05, -9.655952453613281e-06, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.2159326615801547e-05, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -4.38690185546875e-05, -1.9073486328125e-06, -0.0014247894287109375, 0.0, -3.814697265625e-06, -0.04731559753417969, -1.9073486328125e-06, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -0.001117706298828125, 0.0, -3.814697265625e-06, 0.0, -1.1801719665527344e-05, 0.0, -0.48880159854888916, 0.0, -0.000598907470703125, -0.01873779296875, -7.62939453125e-06, -9.182281792163849e-05, 0.0, -0.0002040863037109375, 0.0, -0.0001468658447265625, -0.000530242919921875], "choice_history": [45, 100, 154, 53, 79, "Earth", "Shock", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Earth", " ", "Shock", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 36, 106, "1", "<EOS>", 34, 101, "self", "<EOS>"]}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"score": -3.211962899345032, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole1": 1, "hole2": "PALADIN", "hole0": "Eye for Eye", "_type": "Template2"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "character_attack", "_type": "Str"}, {"value": {"id": "self", "_type": "Name"}, "attr": "_reveal", "_type": "Attribute"}], "func": {"value": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "attr": "bind", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "activate", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "character_attack", "_type": "Str"}, {"value": {"id": "self", "_type": "Name"}, "attr": "_reveal", "_type": "Attribute"}], "func": {"value": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "attr": "unbind", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "deactivate", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "character_attack", "_type": "Str"}, {"value": {"id": "self", "_type": "Name"}, "attr": "_reveal", "_type": "Attribute"}], "func": {"value": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "attr": "unbind", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "deactivate", "_type": "FunctionDef"}], "name": "Eye<UNK>Eye", "bases": [{"id": "SecretCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Eye<UNK>Eye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('character_attack', self._reveal)\n", "score_history": [-1.9073486328125e-06, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, -1.52587890625e-05, -8.439661905867979e-05, -0.10991871356964111, -0.003270465414971113, -9.631664579501376e-05, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0014523237477988005, -0.0020046094432473183, -4.4345855712890625e-05, -0.010218620300292969, -0.0003509521484375, -2.288818359375e-05, -0.0003566741943359375, -7.62939453125e-06, -3.814697265625e-06, -0.0002346038818359375, 0.0, -8.82148651726311e-06, -1.9073486328125e-06, -0.24314117431640625, -0.008327484130859375, -3.4332275390625e-05, -7.915183232398704e-05, -0.0003161430358886719, -0.0020159482955932617, -0.03143048286437988, -0.0027600524481385946, -7.62939453125e-06, -0.0004879235348198563, 0.0, -0.013081429526209831, -1.9073486328125e-06, -0.004627227783203125, -3.814697265625e-06, -0.13886642456054688, -2.47955322265625e-05, 0.0, -8.96453857421875e-05, -1.52587890625e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.002483367919921875, -1.9073486328125e-06, -0.051544189453125, -0.0003662109375, 0.0, 0.0, -3.0517578125e-05, -1.9073486328125e-06, 0.0, -0.33254051208496094, 0.0, -0.004508018493652344, -3.814697265625e-06, -0.0002727508544921875, -1.9073486328125e-06, -0.0004073380259796977, -2.0265579223632812e-06, -0.02398546226322651, -4.1961669921875e-05, -0.004327535163611174, -2.47955322265625e-05, -0.25907254219055176, -2.872943878173828e-05, -5.340576171875e-05, -0.0040836334228515625, -1.33514404296875e-05, -0.1089668795466423, -0.001399993896484375, -0.0002956390380859375, 0.0, -0.0001220703125, 0.0, -0.0004138946533203125, -1.9073486328125e-06, -0.0006600618362426758, -1.1920928244535389e-07, -4.76837158203125e-05, -7.62939453125e-06, -0.11773979663848877, -1.9073486328125e-06, -1.1444091796875e-05, -5.7220458984375e-05, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.006545066833496094, -7.62939453125e-06, -0.06269073486328125, -0.0004100799560546875, 0.0, 0.0, -5.7220458984375e-06, -2.288818359375e-05, 0.0, -0.020418167114257812, 0.0, -0.041853904724121094, -1.9073486328125e-06, -7.43865966796875e-05, -1.9073486328125e-06, -0.00014674632984679192, 0.0, -0.07307686656713486, -3.814697265625e-05, -0.002193448366597295, -2.682209014892578e-05, -0.4648183584213257, -9.5367431640625e-06, -9.72747802734375e-05, -0.0015926361083984375, -1.71661376953125e-05, -0.12014060467481613, -0.003528594970703125, -0.0002307891845703125, 0.0, -0.00017833709716796875, 0.0, -0.000698089599609375, -1.9073486328125e-06, -0.0006467103958129883, -1.1920928244535389e-07, -4.9591064453125e-05, -5.7220458984375e-06, -0.12759506702423096, -1.9073486328125e-06, -1.33514404296875e-05, -6.29425048828125e-05, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.006831169128417969, -7.62939453125e-06, -0.05911445617675781, -0.000377655029296875, 0.0, 0.0, -5.7220458984375e-06, -2.288818359375e-05, 0.0, -0.020735740661621094, 0.0, -0.04124641418457031, -1.9073486328125e-06, -7.43865966796875e-05, -1.9073486328125e-06, -0.0001426932285539806, 0.0, -0.07348480075597763, -3.814697265625e-05, -0.0021936867851763964, -2.872943878173828e-05, -0.46613430976867676, -1.1444091796875e-05, -9.5367431640625e-05, -0.0015926361083984375, -1.71661376953125e-05, -0.12035005539655685, -0.003513336181640625, -0.0002288818359375, 0.0, -0.00017833709716796875, 0.0, -0.0006952285766601562, -1.9073486328125e-06, -0.0006467103958129883, -1.1920928244535389e-07], "choice_history": [45, 100, 154, 53, 79, "Eye", "<UNK>", "Eye", "<EOS>", 141, 34, 101, "Secret", "Card", "<EOS>", 157, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 62, 115, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 56, 84, "activate", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 142, 37, 110, "character_attack", "<EOS>", 26, 70, 19, 101, "self", "<EOS>", "_reveal", "<EOS>", 56, 84, "deactivate", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 142, 37, 110, "character_attack", "<EOS>", 26, 70, 19, 101, "self", "<EOS>", "_reveal", "<EOS>", 56, 84, "deactivate", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 142, 37, 110, "character_attack", "<EOS>", 26, 70, 19, 101, "self", "<EOS>", "_reveal", "<EOS>"]}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"score": -2.297177210362854, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Flare", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"args": [{"args": [{"n": 0, "_type": "Num"}], "func": {"id": "<UNK>Stealth", "_type": "Name"}, "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template9"}, {"hole0": "TurnEnded", "_type": "Template9"}], "func": {"id": "AuraUntil", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"id": "player", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"func": {"value": {"id": "player", "_type": "Name"}, "attr": "draw", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"func": {"value": {"id": "player", "_type": "Name"}, "attr": "draw", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "Flare", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(AuraUntil(<UNK>Stealth(0), SelfSelector(), TurnEnded()))\n        player.draw()\n        player.draw()\n", "score_history": [-1.9073486328125e-05, -5.340576171875e-05, -1.9073486328125e-06, -5.340576171875e-05, -5.7220458984375e-06, -3.0397906812140718e-05, -0.1465805470943451, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -8.125882595777512e-05, -6.949900853214785e-05, -1.9073486328125e-06, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.000202178955078125, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1920922133867862e-06, -1.1920928244535389e-07, -2.1815278159920126e-05, 0.0, -0.000102996826171875, -1.9073486328125e-06, 0.0, -1.645074735279195e-05, -0.0001010894775390625, -1.9073486328125e-06, 0.0, -2.3841852225814364e-07, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, 0.0, -1.2755393072438892e-05, 0.0, -0.0031592845916748047, -3.814697265625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -1.537799835205078e-05, -1.9073486328125e-06, -0.0002120728458976373, -4.768370445162873e-07, -3.814697265625e-06, -1.9073486328125e-06, -0.011386871337890625, 0.0, -1.9073486328125e-06, -0.00507354736328125, -1.9073486328125e-06, -4.780292510986328e-05, -1.9073486328125e-06, 0.0, -3.147125244140625e-05, 0.0, -9.5367431640625e-06, -3.337856469443068e-05, -4.053033626405522e-05, -0.1029367446899414, -7.82012939453125e-05, 0.0, 0.0, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -5.209320079302415e-05, -1.3589859008789062e-05, -4.0531107515562326e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.2411095415009186e-05, -3.266334533691406e-05, -5.7220458984375e-06, 0.0, -1.2516970855358522e-05, -4.172316494077677e-06, -0.014201164245605469, 0.0, 0.0, -0.0040264129638671875, -3.814697265625e-06, -2.288818359375e-05, -0.21160316467285156, 0.0, -5.91278076171875e-05, -1.1920928244535389e-07, -0.05582568421959877, -9.179088920063805e-06, -0.0001354217529296875, -0.07190704345703125, -0.0029010772705078125, -0.0018262863159179688, 0.0, -0.05358073487877846, -0.016801118850708008, -8.463859558105469e-06, -0.005657196044921875, -0.13750839233398438, -0.001857757568359375, -0.0003719329833984375, -1.71661376953125e-05, -0.015880461782217026, -0.02799084596335888, -8.583065209677443e-06, 0.0, -0.10606098175048828, -1.9073486328125e-06, -0.6031490564346313, -1.1920928244535389e-07, -0.032489776611328125, -6.103515625e-05, -0.4802635908126831, -0.0004411935806274414, 0.0, -0.1464242935180664, 0.0, -0.011108159087598324, -0.0007632970809936523, -1.6689286894688848e-06, -0.008768081665039062, -9.5367431640625e-06, -3.814697265625e-06, -0.00228118896484375, -5.7220458984375e-06, 0.0, -1.9073486328125e-05, 0.0, -0.00014317035675048828, 0.0, -0.0007543563260696828, -1.6689286894688848e-06, -0.009630203247070312, -3.814697265625e-06, -5.7220458984375e-06, -0.0002193450927734375, -3.814697265625e-05, 0.0, -0.0002307891845703125, 0.0, -0.0007382631301879883, -1.1920928244535389e-07, -0.0005285738152451813, -3.6954811548639555e-06], "choice_history": [45, 100, 154, 53, 79, "Flare", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Flare", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 157, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 19, 101, "player", "<EOS>", "<UNK>", "<EOS>", 141, 29, 77, 19, 101, "Aura", "Until", "<EOS>", 143, 29, 77, 19, 101, "<UNK>", "Stealth", "<EOS>", 141, 36, 106, "Stealth", "<EOS>", 43, 122, "Self", "Selector", "<EOS>", 43, 122, "Turn", "Ended", "<EOS>", 54, 82, 14, 75, 11, 70, 19, 101, "player", "<EOS>", "draw", "<EOS>", 54, 82, 14, 75, 11, 70, 19, 101, "player", "<EOS>", "draw", "<EOS>"]}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"score": -0.7502701724651075, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Gorehowl", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "EPIC", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"n": 7, "_type": "Num"}, {"n": 1, "_type": "Num"}], "func": {"id": "Weapon", "_type": "Name"}, "_type": "Call"}, "_type": "Return"}], "name": "create_weapon", "_type": "FunctionDef"}], "name": "Gorehowl", "bases": [{"id": "WeaponCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1)\n", "score_history": [-3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.00015758301015011966, -0.0015692521119490266, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.0018071286613121629, -4.661034108721651e-05, -2.491474151611328e-05, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, 0.0, -6.079673767089844e-06, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, 0.0, -0.10377693176269531, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.4305104514278355e-06, 0.0, -0.00034737586975097656, -2.3841855067985307e-07, -0.000209808349609375, -1.9073486328125e-06, 0.0, -1.7881390022012056e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.007974807173013687, -2.3245540432981215e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.193447289755568e-05, -1.1920928244535389e-07, -0.0003945821663364768, -7.82012939453125e-05, -3.814697265625e-06, 0.0, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -0.0006142854690551758, -6.079665126890177e-06, -8.392333984375e-05, -1.71661376953125e-05, -0.2895559072494507, 0.0, -0.001399993896484375, 0.0, -0.0001049041748046875, -9.918212890625e-05, -9.5367431640625e-06, 0.0, -0.05866813659667969, -3.814697265625e-06, -0.000308990478515625, -2.396106719970703e-05, -0.0014700889587402344, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -0.1360321044921875, -3.576278118089249e-07, -1.9073486328125e-06, -0.0003604888916015625, -3.814697265625e-06, -4.8041343688964844e-05, -3.0517578125e-05, 0.0, -0.00014948843454476446, 0.0, -0.05362987518310547, -0.04085540771484375, -2.86102294921875e-05, -0.000202178955078125, -0.046204566955566406, -0.0007810592651367188, 0.0, -9.894321920000948e-06, -0.00021038267004769295, -1.9073486328125e-05, -0.00079345703125, 0.0, -0.0013049840927124023, -2.5629668016335927e-05, -0.000446319580078125, 0.0, -0.00014460086822509766, 0.0], "choice_history": [45, 100, 154, 53, 79, "Gorehowl", "<EOS>", 141, 34, 101, "Weapon", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Gorehowl", "<EOS>", 36, 106, "7", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "create_weapon", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 154, 59, 108, 14, 77, 19, 101, "Weapon", "<EOS>", 142, 36, 106, "7", "<EOS>", 36, 106, "1", "<EOS>"]}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"score": -0.2257320659017239, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Hound", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"value": true, "_type": "NameConstant"}, "hole1": 1, "hole2": "charge", "hole0": 1, "_type": "Template0"}], "name": "Hound", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "score_history": [-1.71661376953125e-05, 0.0, -4.1961669921875e-05, -9.1552734375e-05, -1.9073486328125e-06, -1.1920922133867862e-06, -0.002521866001188755, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -2.380693331360817e-07, -1.0967249181703664e-05, -3.099440846199286e-06, -5.7220458984375e-06, -0.000217437744140625, -2.86102294921875e-05, -1.8835065930034034e-05, -3.933906555175781e-06, -2.09808349609375e-05, -1.71661376953125e-05, 0.0, -6.425379979191348e-05, 0.0, -1.71661376953125e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.9073486328125e-05, -0.061519622802734375, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -1.4305038348538801e-05, -1.9073486328125e-06, -4.458414696273394e-05, -7.152555099310121e-07, -0.0007610321044921875, -9.5367431640625e-06, -4.57763671875e-05, -3.099436753473128e-06, -1.1682492186082527e-05, -3.24249267578125e-05, 0.0, -0.0004111848247703165, 0.0, -5.91278076171875e-05, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.2278545909794047e-05, 0.0, -0.0008603334426879883, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -3.62396240234375e-05, 0.0, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, -4.76837158203125e-05, -3.349781036376953e-05, 0.0, -7.62939453125e-06, -1.33514404296875e-05, -0.0004845857620239258, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -1.52587890625e-05, -7.450580596923828e-05, -0.0023900270462036133, 0.0, -0.1502828598022461, -0.00031280517578125, -1.1920964197997819e-06, -2.3841855067985307e-07, -1.63023141794838e-05, 0.0, -0.003942591138184071, 0.0, -6.67572021484375e-05, -0.0010013580322265625, -9.5367431640625e-06, 0.0], "choice_history": [45, 100, 154, 53, 79, "Hound", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 145, 37, 110, "Hound", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 35, 102, "False", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 60, 113, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 20, 102, "True", "<EOS>"]}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"score": -2.9925785006125594, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Injured Blademaster", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"args": [{"n": 4, "_type": "Num"}], "func": {"id": "Damage", "_type": "Name"}, "_type": "Call"}, {"args": [{"args": [{"args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "MECH", "_type": "Attribute"}], "func": {"id": "IsType", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Not", "_type": "Name"}, "_type": "Call"}, {"hole0": "BothPlayer", "_type": "Template9"}, {"hole0": "UserPicker", "_type": "Template9"}], "func": {"id": "MinionSelector", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 7, "hole0": 4, "_type": "Template1"}], "name": "InjuredBlademaster", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Not(IsType(MINION_TYPE.MECH)), BothPlayer(), UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "score_history": [-5.53131103515625e-05, -5.14984130859375e-05, -7.62939453125e-06, -0.0005779266357421875, -5.7220458984375e-06, -0.016717931255698204, -0.00539252907037735, -3.576272320060525e-06, -1.52587890625e-05, 0.0, 0.0, 0.0, -7.62939453125e-06, -4.0531158447265625e-06, -1.33514404296875e-05, -2.86102294921875e-05, 0.0, -0.0001627206802368164, -1.1920928244535389e-07, 0.0, -5.340576171875e-05, 0.0, -9.5367431640625e-06, 0.0, -0.0003032684326171875, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.0001239776611328125, -3.62396240234375e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -5.14984130859375e-05, 0.0, -5.91278076171875e-05, -1.33514404296875e-05, -3.62396240234375e-05, -9.5367431640625e-06, -7.62939453125e-06, -1.6689286894688848e-06, -4.9591064453125e-05, -5.364416665543104e-06, -0.0004596710205078125, 0.0, 0.0, -3.254413604736328e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.327291389927268e-05, -2.1219253540039062e-05, -5.042552947998047e-05, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -3.24249267578125e-05, -5.7220458984375e-06, -0.00017952919006347656, 0.0, -0.00815582275390625, -7.62939453125e-06, -0.0003281831741333008, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.00028228759765625, 0.0, -6.42538070678711e-05, 0.0, -0.0002079010009765625, -0.00011444091796875, -1.1444091796875e-05, -2.6702880859375e-05, -9.34600830078125e-05, -0.0016868084203451872, -7.510183422709815e-06, -1.52587890625e-05, -0.000713348388671875, -2.288818359375e-05, -0.035944581031799316, -1.9073486328125e-06, -0.00014495849609375, -0.1321725845336914, -2.09808349609375e-05, -3.814697265625e-06, -0.004963040351867676, -2.6702880859375e-05, -1.9073486328125e-06, -0.19211483001708984, -0.013325691223144531, -0.0003108978271484375, -2.47955322265625e-05, -0.009011268615722656, -0.23805928230285645, -5.555152893066406e-05, -3.814697265625e-06, -0.0041866302490234375, -2.6702880859375e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.6154748201370239, -9.27448199945502e-05, -1.9073486328125e-06, -0.005298614501953125, -9.5367431640625e-06, 0.0, -4.38690185546875e-05, 0.0, -5.7220458984375e-06, -1.1920928244535389e-07, -0.31103992462158203, -1.9073486328125e-06, -0.29763317108154297, 0.0, -0.5166246891021729, -0.13967132568359375, -4.9591064453125e-05, -0.001861572265625, -3.0517578125e-05, -0.08689498901367188, -0.0001316070556640625, -1.9073486328125e-06, -7.05718994140625e-05, -1.71661376953125e-05, -4.088789501111023e-05, 0.0, -0.3507450819015503, -2.384185791015625e-06], "choice_history": [45, 100, 154, 53, 79, "Injured", "Blademaster", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Injured", " ", "Blademaster", "<EOS>", 36, 106, "3", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Damage", "<EOS>", 141, 36, 106, "4", "<EOS>", 29, 77, 19, 101, "Minion", "Selector", "<EOS>", 143, 29, 77, 19, 101, "Not", "<EOS>", 141, 29, 77, 19, 101, "Is", "Type", "<EOS>", 141, 26, 70, 19, 101, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 43, 122, "Both", "Player", "<EOS>", 43, 122, "User", "Picker", "<EOS>", 61, 114, "4", "<EOS>", "7", "<EOS>"]}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"score": -1.777552005686843, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Knife Juggler", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"args": [{"args": [{"n": 1, "_type": "Num"}], "func": {"id": "ManaCost", "_type": "Name"}, "_type": "Call"}], "func": {"id": "MinionSummoned", "_type": "Name"}, "_type": "Call"}, {"args": [{"args": [{"n": 1, "_type": "Num"}], "func": {"id": "Damage", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}, {"value": {"hole0": "BothPlayer", "_type": "Template9"}, "arg": "players", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 2, "hole2": "effects", "hole0": 3, "_type": "Template0"}], "name": "KnifeJuggler", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(ManaCost(1)),\n            ActionTag(Damage(1), MinionSelector(condition=Null, players=\n            BothPlayer())))])\n", "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -1.1444091796875e-05, -3.814697265625e-06, -1.52587890625e-05, -0.02892780862748623, -0.0010319390567019582, -1.5497195136049413e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, 0.0, -2.205371856689453e-05, -1.2278553185751662e-05, -6.29425048828125e-05, -2.09808349609375e-05, 0.0, -0.0006257295608520508, 0.0, -1.71661376953125e-05, -3.814697265625e-06, 0.0, -4.172325134277344e-06, -3.814697265625e-06, -3.814697265625e-05, -1.9073486328125e-06, 0.0, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -1.5974044799804688e-05, 0.0, -9.334087371826172e-05, -7.152555099310121e-07, -7.2479248046875e-05, -1.9073486328125e-06, -1.52587890625e-05, -1.0728830375228426e-06, -8.809566497802734e-05, -6.79492904964718e-06, -5.14984130859375e-05, 0.0, 0.0, -0.0001493692398071289, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -2.7656424208544195e-05, -5.841255187988281e-06, -3.0994415283203125e-05, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -3.814697265625e-05, 0.0, -0.0005023479461669922, -1.1920928244535389e-07, -0.0006961822509765625, -5.7220458984375e-06, -1.5854835510253906e-05, 0.0, -0.0006548165110871196, 0.0, -1.7881382518680766e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -2.09808349609375e-05, -3.62396240234375e-05, -3.814697265625e-06, 0.0, -1.1444091796875e-05, 0.0, -0.0002243518829345703, -5.841255187988281e-06, -5.7220458984375e-06, -0.06140708923339844, -0.02400684356689453, -1.52587890625e-05, -9.72747802734375e-05, -0.023893708363175392, -0.014471054077148438, -1.7762184143066406e-05, -3.0517578125e-05, -1.9073486328125e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.0001068115234375, -0.33622074127197266, -0.11384332180023193, -7.82012939453125e-05, -2.09808349609375e-05, -0.00031280517578125, 0.0, -0.00019277632236480713, 0.0, -5.7220458984375e-06, -0.004679679870605469, -5.7220458984375e-06, 0.0, -7.82012939453125e-05, -0.000247955322265625, 0.0, -0.000148773193359375, -0.0006103515625, -7.43865966796875e-05, -1.1444091796875e-05, -0.0002574920654296875, -0.0800555944442749, -7.76052474975586e-05, 0.0, -0.0032052993774414062, -1.1444091796875e-05, -9.37366858124733e-05, 0.0, -0.0001125335693359375, -0.0061855316162109375, -5.7220458984375e-06, 0.0, -0.023808002471923828, -2.47955322265625e-05, -0.0002994537353515625, -0.6640434265136719, -9.5367431640625e-06, -0.08833026885986328, -3.933906555175781e-06, -0.014665603637695312, -0.000217437744140625, -0.00022709369659423828, -1.9073486328125e-06, -0.0001220703125, -0.03709220886230469, 0.0, -1.33514404296875e-05, 0.0, -0.24383366107940674, -0.0004979372024536133, 0.0], "choice_history": [45, 100, 154, 53, 79, "Knife", "Juggler", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Knife", " ", "Juggler", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 60, 113, "3", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 29, 77, 19, 101, "Minion", "Summoned", "<EOS>", 141, 29, 77, 19, 101, "Mana", "Cost", "<EOS>", 141, 36, 106, "1", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Damage", "<EOS>", 141, 36, 106, "1", "<EOS>", 29, 76, 19, 101, "Minion", "Selector", "<EOS>", 150, 130, "condition", "<EOS>", 20, 103, "Null", "<EOS>", 130, "players", "<EOS>", 23, 122, "Both", "Player", "<EOS>"]}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"score": -2.0002276882405354, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Lightwell", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PRIEST", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"hole0": "TurnEnded", "_type": "Template9"}, {"args": [{"args": [{"hole0": 1, "_type": "Template8"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "RandomPicker", "_type": "Template9"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 5, "hole2": "effects", "hole0": 0, "_type": "Template0"}], "name": "Lightwell", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\n", "score_history": [-1.9073486328125e-06, -7.62939453125e-06, -5.14984130859375e-05, -5.7220458984375e-06, -3.24249267578125e-05, -0.0019393241964280605, -0.0009175481973215938, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.004431940149515867, -7.62939453125e-06, -9.5367431640625e-06, -9.5367431640625e-06, -7.62939453125e-06, 0.0, -1.2040138244628906e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.655952453613281e-06, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, 0.0, 0.0, -0.0006580352783203125, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.3841855067985307e-07, -3.814697265625e-06, -1.9073486328125e-06, -2.3841855067985307e-07, -0.0001201629638671875, -3.62396240234375e-05, 0.0, -7.748573807475623e-06, 0.0, -1.9073486328125e-06, 0.0, -0.00011277198791503906, -1.1920928244535389e-07, 0.0, 0.0, -3.814697265625e-06, 0.0, -4.470342901186086e-05, -5.960462772236497e-07, -0.0017038583755493164, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -4.208087921142578e-05, -1.9073486328125e-06, -0.0003794431686401367, -1.1920928244535389e-07, -0.000400543212890625, -5.7220458984375e-06, -1.1920922133867862e-06, -1.1920928244535389e-07, -2.0861407392658293e-05, 0.0, -2.2292000721790828e-05, -4.589557647705078e-05, -5.14984130859375e-05, -7.62939453125e-06, -0.000339508056640625, -7.62939453125e-06, 0.0, -9.5367431640625e-06, 0.0, -2.7179718017578125e-05, -7.62939453125e-06, -0.000110626220703125, -9.1552734375e-05, 0.0, -6.675718759652227e-05, -0.5393451452255249, -1.9073486328125e-06, -0.000881195068359375, -1.71661376953125e-05, -1.9073486328125e-05, 0.0, -8.106231689453125e-06, -7.748603820800781e-06, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, -2.86102294921875e-05, -2.47955322265625e-05, -1.9073486328125e-05, -0.11712396144866943, -1.537799835205078e-05, 0.0, -0.511693000793457, -0.0001239776611328125, -0.10875487327575684, -0.0002593994140625, -0.0033855438232421875, -0.0008325576782226562, -0.0001621246337890625, -5.7220458984375e-06, -0.00266265869140625, -7.62939453125e-06, 0.0, -0.005105018615722656, -1.9073486328125e-06, -0.5604143142700195, -2.0265579223632812e-06, 0.0, 0.0, -0.13727593421936035, -0.000171661376953125, -1.9073486328125e-06], "choice_history": [45, 100, 154, 53, 79, "Lightwell", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Lightwell", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 60, 113, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 43, 122, "Turn", "Ended", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 42, 121, "1", "<EOS>", 29, 76, 19, 101, "Minion", "Selector", "<EOS>", 149, 130, "picker", "<EOS>", 23, 122, "Random", "Picker", "<EOS>"]}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"score": -0.7580943402758678, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole1": 1, "hole2": "MAGE", "hole0": "Mana Wyrm", "_type": "Template2"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"args": [{"hole0": "IsMinion", "_type": "Template9"}], "func": {"id": "SpellCast", "_type": "Name"}, "_type": "Call"}, {"args": [{"args": [{"hole0": 1, "_type": "Template7"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template9"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Effect", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 3, "hole2": "effects", "hole0": 1, "_type": "Template0"}], "name": "ManaWyrm", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(IsMinion()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n", "score_history": [-7.62939453125e-06, 0.0, -2.09808349609375e-05, -5.7220458984375e-06, -1.71661376953125e-05, -4.3987260141875595e-05, -2.0265579223632812e-06, -2.062299427052494e-05, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.0384572053444572e-05, -3.576277322281385e-06, -1.811981201171875e-05, -0.000164031982421875, -2.6702880859375e-05, -1.9073486328125e-06, -6.330013275146484e-05, 0.0, 0.0, -3.24249267578125e-05, 0.0, -1.4305092918220907e-05, 0.0, -5.14984130859375e-05, -0.001743316650390625, -2.288818359375e-05, -1.8596476365928538e-05, -0.0015385107835754752, -0.0005366802215576172, -3.4332275390625e-05, -5.722056812373921e-06, 0.0, -0.0047879572957754135, 0.0, -0.00048065185546875, -3.24249267578125e-05, -1.9192693798686378e-05, -1.1920928244535389e-07, -0.0003352025232743472, 0.0, -0.0006685227272100747, -2.50339189733495e-06, -2.6702880859375e-05, -0.0001010894775390625, -9.34600830078125e-05, -2.6702880859375e-05, -3.814697265625e-06, -6.29425048828125e-05, 0.0, -0.0007507801055908203, -5.602834789897315e-06, -2.6702880859375e-05, -0.04084587097167969, -0.08731460571289062, -7.62939453125e-06, -2.09808349609375e-05, -0.007731791585683823, -0.005873898044228554, -3.814697265625e-06, -0.0004119873046875, -0.05954456329345703, -0.0001068115234375, -0.2351374477148056, -0.3061588406562805, -4.9114227294921875e-05, -0.000118255615234375, -2.288818359375e-05, -5.7220458984375e-06, 0.0, -4.9114227294921875e-05, -1.5735626220703125e-05, 0.0, -0.0001220703125, -0.000186920166015625, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -0.00038361549377441406, -4.88758041683468e-06, -5.7220458984375e-06, -0.0010395050048828125, -7.82012939453125e-05, -4.9591057177167386e-05, -2.86102294921875e-05, -1.9073486328125e-05, -0.0001220703125, -0.0006955827120691538, -5.2928924560546875e-05, -1.9073486328125e-06], "choice_history": [45, 100, 154, 53, 79, "Mana", "Wyrm", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 62, 115, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 60, 113, "1", "<EOS>", "3", "<EOS>", "effects", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Effect", "<EOS>", 142, 29, 77, 19, 101, "Spell", "Cast", "<EOS>", 141, 43, 122, "Is", "Minion", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 41, 120, "1", "<EOS>", 43, 122, "Self", "Selector", "<EOS>"]}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"score": -0.02569329711104018, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole1": 4, "hole2": "ALL", "hole0": "Mogu'shan Warden", "_type": "Template2"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"value": true, "_type": "NameConstant"}, "hole1": 7, "hole2": "taunt", "hole0": 1, "_type": "Template0"}], "name": "Mogu'shanWarden", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "score_history": [0.0, 0.0, -3.814697265625e-06, -2.47955322265625e-05, -2.86102294921875e-05, -0.01523395162075758, -0.00021610308613162488, -1.549708758830093e-05, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -3.575551090762019e-07, -1.6331669030478224e-05, 0.0, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -7.510183422709815e-06, -3.576278118089249e-07, 0.0, -5.7220458984375e-06, 0.0, -1.4901099348207936e-05, -1.1920928244535389e-07, -3.814697265625e-06, -0.0008373260498046875, -0.0001621246337890625, -0.00010179955279454589, -0.0009824037551879883, -4.5299530029296875e-06, -1.9073486328125e-06, -4.768352664541453e-05, 0.0, -0.00018584712233860046, 0.0, -0.0038280487060546875, -0.00026702880859375, -1.1920923270736239e-07, 0.0, -0.0015524160116910934, -8.344646857949556e-07, -0.0018575172871351242, 0.0, -0.0002002716064453125, -2.86102294921875e-05, -2.09808349609375e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Mogu'shan", "Warden", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 62, 115, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 60, 113, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 20, 102, "True", "<EOS>"]}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"score": -2.089639394839658, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "DRUID", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"target": {"id": "i", "_type": "Name"}, "body": [{"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"hole0": "ManaMana", "_type": "Template9"}, "_type": "Assign"}, {"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}, {"args": [{"value": {"id": "player", "_type": "Name"}, "attr": "minions", "_type": "Attribute"}], "func": {"id": "len", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"id": "<UNK>", "_type": "Name"}, "attr": "summon", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "iter": {"args": [{"n": 0, "_type": "Num"}, {"n": 5, "_type": "Num"}], "func": {"id": "range", "_type": "Name"}, "_type": "Call"}, "_type": "For"}], "name": "use", "_type": "FunctionDef"}], "name": "Nourish", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 5):\n            <UNK> = ManaMana()\n            <UNK>.summon(player, game, len(player.minions))\n", "score_history": [0.0, 0.0, -7.62939453125e-06, -1.52587890625e-05, -1.71661376953125e-05, -5.113979568704963e-05, -0.00011276828445261344, -5.7220458984375e-06, 0.0, 0.0, -0.0005617104470729828, -8.463859558105469e-05, -3.814697265625e-06, -0.0037097930908203125, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, 0.0, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, 0.0, -0.3685121536254883, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, 0.0, -2.2649765014648438e-06, 0.0, -9.059905096364673e-06, -3.576278118089249e-07, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.6808437067084014e-05, -0.0002841949462890625, -1.33514404296875e-05, 0.0, 0.0, -1.1920928244535389e-07, -7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -1.919269561767578e-05, 0.0, -0.0003719329833984375, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -0.0001697540283203125, 0.0, -0.00010716915130615234, -1.1920928244535389e-07, -0.00019931791757699102, -3.933904736186378e-06, -0.00020599365234375, -2.09808349609375e-05, -0.32319164276123047, 0.0, -2.6702880859375e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0003337860107421875, 0.0, -0.0004119873046875, -5.9604644775390625e-06, -0.016245007514953613, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -2.09808349609375e-05, 0.0, -0.0002803802490234375, -0.0003643035888671875, 0.0, -1.1444091796875e-05, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -3.421305154915899e-05, -3.576278118089249e-07, -0.02523517608642578, -4.9591064453125e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, 0.0, -8.583003364037722e-05, -5.7220458984375e-06, -1.537799835205078e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.00019584206165745854, -8.58306884765625e-06, -9.5367431640625e-06, 0.0, -7.665051089134067e-05, 0.0, -0.0063877105712890625, -3.62396240234375e-05, -5.14984130859375e-05, -2.6702880859375e-05, -0.004131197929382324, 0.0, -0.00018310546875, -5.14984130859375e-05, -0.00026702880859375, 0.0, -0.0007039586780592799, -5.006789251638111e-06, -0.000125885009765625, -5.7220458984375e-06, 0.0, -0.0004389206296764314, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, -0.3814370334148407, 0.0, -0.015167236328125, -0.000141143798828125, -9.5367431640625e-05, -1.9073486328125e-06, -7.43865966796875e-05, -3.814697265625e-06, -0.0014444587286561728, -3.576278118089249e-07, -0.0033416748046875, -6.103515625e-05, -0.002003622939810157, -0.08781781047582626, -0.12334316223859787, -0.00099945068359375, -2.47955322265625e-05, -5.7220458984375e-06, -0.0006847381591796875, -1.9073486328125e-06, 0.0, -0.001678466796875, -1.1444091796875e-05, -0.031590331345796585, -1.3112978194840252e-05, -0.0017757415771484375, -6.914126061019488e-06, -8.0108642578125e-05, -0.000278472900390625, -1.9073486328125e-06, -0.0011366530088707805, -1.1920922133867862e-06, -0.6702041625976562, -1.71661376953125e-05, -0.0005592107190750539, 0.0, -0.0058917999267578125, -0.000640869140625, -3.814697265625e-06, 0.0, -0.004153847694396973, -2.3841855067985307e-07, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.000507354736328125, 0.0, -6.246566772460938e-05, -6.079673767089844e-06, -0.0004948377027176321, -2.1457672119140625e-06], "choice_history": [45, 100, 154, 53, 79, "Nourish", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Nourish", "<EOS>", 36, 106, "5", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 55, 83, 19, 101, "i", "<EOS>", 14, 77, 19, 101, "range", "<EOS>", 142, 36, 106, "0", "<EOS>", 36, 106, "5", "<EOS>", 155, 50, 69, 141, 34, 101, "<UNK>", "<EOS>", 23, 122, "Mana", "Mana", "<EOS>", 54, 82, 14, 77, 11, 70, 19, 101, "<UNK>", "<EOS>", "summon", "<EOS>", 143, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 29, 77, 19, 101, "len", "<EOS>", 141, 26, 70, 19, 101, "player", "<EOS>", "minions", "<EOS>"]}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"score": -19.782889727320466, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Preparation", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "EPIC", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"args": {"args": [{"arg": "card", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"id": "target", "_type": "Name"}, "attr": "damage", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "reduce_cost", "_type": "FunctionDef"}, {"value": {"args": [{"args": [{"args": [{"operand": {"n": 3, "_type": "Num"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "func": {"id": "ManaChange", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "TurnEnded", "_type": "Name"}, "keywords": [{"value": {"hole0": "EnemyPlayer", "_type": "Template9"}, "arg": "player", "_type": "keyword"}], "_type": "Call"}, {"args": [{"args": [{"args": [{"args": [{"operand": {"n": 1, "_type": "Num"}, "op": {"_type": "USub"}, "_type": "UnaryOp"}], "func": {"id": "ManaChange", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"hole0": "CardSelector", "_type": "Template9"}], "func": {"id": "ActionTag", "_type": "Name"}, "_type": "Call"}], "func": {"id": "AuraUntil", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"id": "player", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"args": [{"args": [{"args": [{"n": 2, "_type": "Num"}, {"n": 3, "_type": "Num"}], "func": {"value": {"id": "game", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Call"}], "func": {"value": {"id": "player", "_type": "Name"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "_type": "Call"}], "func": {"value": {"id": "Turn", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "_type": "Call"}], "func": {"value": {"id": "player", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"n": 3, "_type": "Num"}], "func": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "hero", "_type": "Attribute"}, "attr": "increase_armor", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "use", "_type": "FunctionDef"}], "name": "Preparation", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n\n        def reduce_cost(card):\n            target.damage(player, game)\n        player.<UNK>(AuraUntil(ManaChange(-3), TurnEnded(player=EnemyPlayer\n            ()), ActionTag(Give(Buff(ManaChange(-1))), CardSelector())))\n        player.<UNK>(Turn.copy(player.effective_spell_damage(game.<UNK>(2, 3)))\n            )\n        player.hero.increase_armor(3)\n", "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -1.52587890625e-05, -0.0002727508544921875, -2.86102294921875e-05, -0.006557967979460955, -0.00047931060544215143, -1.33514404296875e-05, 0.0, 0.0, -0.00023078917001839727, -2.1219253540039062e-05, -0.0001201629638671875, -4.00543212890625e-05, -5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, 0.0, 0.0, 0.0, -5.7220458984375e-06, 0.0, -3.814697265625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0846872329711914, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.537799835205078e-05, -3.4332275390625e-05, -0.00012695789337158203, -2.2649765014648438e-06, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.5748875486897305e-05, -3.0517578125e-05, -7.62939453125e-06, -9.5367431640625e-06, -7.987022399902344e-06, -7.152531907195225e-06, -1.9073486328125e-06, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -6.449221109505743e-05, -1.1920928244535389e-07, -0.0006901025190018117, -3.62396240234375e-05, -1.33514404296875e-05, -0.000591278076171875, -7.62939453125e-05, 0.0, -0.0001697540283203125, -1.9073486328125e-06, -0.0008182525634765625, -8.940656698541716e-06, -0.12067890167236328, -1.9073486328125e-06, -0.15098953247070312, 0.0, -0.0001659393310546875, 0.0, -9.5367431640625e-06, -7.05718994140625e-05, -3.4332275390625e-05, 0.0, -0.000415802001953125, -3.814697265625e-05, -0.006502270698547363, -1.9073486328125e-06, -0.3544667959213257, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.0002346038818359375, -7.82012939453125e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -2.872943878173828e-05, -2.2649765014648438e-06, -0.45282459259033203, -0.07174110412597656, -0.014595985412597656, -0.045679330825805664, -0.007717728614807129, -0.0036468505859375, -0.0015172958374023438, 0.0, -0.012157440185546875, -9.1552734375e-05, -0.03879547119140625, -0.002407073974609375, -1.9073486328125e-06, -1.9073486328125e-06, -0.0023365020751953125, -3.814697265625e-06, 0.0, -0.1210489273071289, -7.05718994140625e-05, -0.36654555797576904, 0.0, -0.19999456405639648, -5.7220458984375e-06, -7.62939453125e-06, -0.5935907363891602, -1.9073486328125e-06, -0.001090407371520996, -2.0265579223632812e-06, -3.814697265625e-06, 0.0, -0.020940423011779785, -1.9073486328125e-06, -0.0228729248046875, 0.0, -1.9073486328125e-06, -8.392333984375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.10013008117675781, -1.9073486328125e-06, -0.0021352767944335938, 0.0, -0.05922508239746094, -1.4543520592269488e-05, -0.48914051055908203, -0.002147674560546875, -0.0017757415771484375, -0.16794681549072266, 0.0, -0.17442357540130615, -0.3094743490219116, -7.62939453125e-06, -0.10660266876220703, -0.0015430450439453125, -1.71661376953125e-05, -0.0001087188720703125, -9.5367431640625e-06, -0.025307059288024902, -0.0006428956985473633, -7.748603820800781e-06, -2.47955322265625e-05, -0.0266265869140625, -8.96453857421875e-05, -0.0004711151123046875, -8.7738037109375e-05, -1.9073486328125e-06, -0.4103516936302185, -4.649161837733118e-06, -0.8568916320800781, -0.00345611572265625, -0.00098419189453125, -5.7220458984375e-05, -0.5297031402587891, -0.012969970703125, -1.9073486328125e-06, -4.76837158203125e-05, -3.814697265625e-06, -0.23872852325439453, 0.0, -0.00035858154296875, 0.0, -0.788353681564331, -3.24249267578125e-05, 0.0, -0.22064495086669922, -0.0006999969482421875, -1.9073486328125e-06, -1.9073486328125e-06, -1.1055841445922852, -0.0012093782424926758, -1.71661376953125e-05, -1.33514404296875e-05, -0.004180908203125, -0.0001430511474609375, -1.9073486328125e-06, -4.9591064453125e-05, -0.08488476276397705, -0.30869996547698975, -3.814697265625e-06, -0.009225845336914062, -2.288818359375e-05, -0.000152587890625, 0.0, -0.004468321800231934, -0.012613415718078613, -5.7220458984375e-06, -0.0024280548095703125, -6.103515625e-05, -2.288818359375e-05, -3.814697265625e-06, -0.01579272747039795, -0.0019550323486328125, -0.00045478343963623047, -0.000362396240234375, -0.0001068115234375, -5.53131103515625e-05, -0.00079345703125, -2.09808349609375e-05, -0.0004673004150390625, -0.1259239912033081, 0.0, -0.41483020782470703, -3.814697265625e-06, -0.0037404298782348633, -0.0022886991500854492, 0.0, -0.016097068786621094, -0.0001735687255859375, -1.9073486328125e-06, -0.006960868835449219, -5.7220458984375e-06, -1.9073486328125e-06, -0.1516256332397461, -0.0002422332763671875, -0.531592845916748, 0.0, -0.13160598278045654, -1.728534698486328e-05, -0.023560523986816406, -0.03912353515625, -0.00026702880859375, -0.4345102310180664, -5.14984130859375e-05, -0.0007534027099609375, 0.0, -1.3349170684814453, -1.0628461837768555, -0.6525260210037231, -1.1920928244535389e-07, -2.47955322265625e-05, -0.1946735382080078, -0.0001163482666015625, -0.15520286560058594, -5.7220458984375e-06, -0.0002994537353515625, 0.0, -1.2044181823730469, -4.0531158447265625e-06, -0.07573068141937256, 0.0, -6.866455078125e-05, -0.14682388305664062, -0.0010776519775390625, -0.011610984802246094, -1.1444091796875e-05, -0.000110626220703125, 0.0, -1.0212793350219727, -1.3470649719238281e-05, -0.621749997138977, 0.0, -0.002330780029296875, -0.02370166778564453, 0.0, -0.07061155885457993, 0.0, -0.005814552307128906, 0.0, -0.22551386058330536, -5.841255187988281e-06, -0.7021150588989258, -5.91278076171875e-05, -2.09808349609375e-05, -0.0482635498046875, -1.9073486328125e-06, 0.0, -0.008871078491210938, 0.0, -2.6702880859375e-05, 0.0, -0.0057430267333984375, 0.0, -0.4747663140296936, -5.245203283266164e-06, -0.995287299156189, -3.814697265625e-05, -0.002536773681640625, -0.039691925048828125, -0.000118255615234375, -0.016552448272705078, -2.622604142743512e-06], "choice_history": [45, 100, 154, 53, 79, "Preparation", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Preparation", "<EOS>", 36, 106, "0", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 157, 56, 84, "reduce_cost", "<EOS>", 128, 134, 127, "card", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 19, 101, "target", "<EOS>", "damage", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 54, 82, 14, 77, 11, 70, 19, 101, "player", "<EOS>", "<UNK>", "<EOS>", 141, 29, 77, 19, 101, "Aura", "Until", "<EOS>", 143, 29, 77, 19, 101, "Mana", "Change", "<EOS>", 141, 44, 125, 66, 21, 106, "3", "<EOS>", 29, 76, 19, 101, "Turn", "Ended", "<EOS>", 149, 130, "player", "<EOS>", 23, 122, "Enemy", "Player", "<EOS>", 29, 77, 19, 101, "Action", "Tag", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 29, 77, 19, 101, "Buff", "<EOS>", 141, 29, 77, 19, 101, "Mana", "Change", "<EOS>", 141, 44, 125, 66, 21, 106, "1", "<EOS>", 43, 122, "Card", "Selector", "<EOS>", 54, 82, 14, 77, 11, 70, 19, 101, "player", "<EOS>", "<UNK>", "<EOS>", 141, 29, 77, 11, 70, 19, 101, "Turn", "<EOS>", "copy", "<EOS>", 141, 29, 77, 11, 70, 19, 101, "player", "<EOS>", "effective_spell_damage", "<EOS>", 141, 29, 77, 11, 70, 19, 101, "game", "<EOS>", "<UNK>", "<EOS>", 142, 36, 106, "2", "<EOS>", 36, 106, "3", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 141, 36, 106, "3", "<EOS>"]}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"score": -13.373148856429218, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole1": 1, "hole2": "PALADIN", "hole0": "Repentance", "_type": "Template2"}, {"targets": [{"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"n": 1, "_type": "Num"}, {"value": "Null", "_type": "NameConstant"}], "func": {"value": {"id": "minion", "_type": "Name"}, "attr": "damage", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "reveal", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "_reveal", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"targets": [{"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "name": "activate", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "body": [{"targets": [{"id": "<UNK>", "_type": "Name"}], "value": {"args": [{"value": {"id": "player", "_type": "Name"}, "attr": "game", "_type": "Attribute"}, {"args": {"args": [{"arg": "x", "_type": "arg"}], "_type": "arguments"}, "body": {"id": "x", "_type": "Name"}, "_type": "Lambda"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "choose_option", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign"}, {"test": {"left": {"id": "targets", "_type": "Name"}, "ops": [{"_type": "IsNot"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare"}, "body": [{"targets": [{"id": "target", "_type": "Name"}], "value": {"args": [{"value": {"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign"}, {"value": {"args": [{"args": [{"value": {"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"id": "len", "_type": "Name"}, "_type": "Call"}], "func": {"value": {"id": "minion", "_type": "Name"}, "attr": "<UNK>", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "_type": "If"}], "name": "_reveal", "_type": "FunctionDef"}], "name": "Repentance", "bases": [{"id": "SecretCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        minion.damage(1, Null)\n        super().reveal()\n\n    def activate(self, player):\n        super().use(player, game)\n        self.player = Null\n\n    def _reveal(self, minion):\n        <UNK> = self.player.choose_option(player.game, lambda x: x)\n        if targets is not Null:\n            target = self.player.minions(self.player.minions)\n            minion.<UNK>(len(self.player.minions))\n", "score_history": [-1.33514404296875e-05, -2.09808349609375e-05, -3.62396240234375e-05, -4.57763671875e-05, -2.47955322265625e-05, -6.079655122448457e-06, -0.005622317083179951, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0004162738914601505, -0.00016176050121430308, -6.699562072753906e-05, -0.012102127075195312, -2.86102294921875e-05, -1.9073486328125e-06, -3.9935104723554105e-05, -1.52587890625e-05, -2.47955322265625e-05, -1.71661376953125e-05, -5.7220458984375e-06, -5.221291212365031e-05, -1.9073486328125e-06, -0.19166088104248047, -0.10440731048583984, -0.0002765655517578125, -3.2066785934148356e-05, -0.0008870363235473633, -6.796381057938561e-06, -3.576278118089249e-07, -0.0023469771258533, -3.814697265625e-06, -0.0001735687255859375, -0.0002117156982421875, -1.9073486328125e-06, -0.0001087188720703125, 0.0, -7.62939453125e-06, 0.0, -0.0026407241821289062, -1.33514404296875e-05, -0.0006542205810546875, 0.0, -0.0741739273071289, -3.4332275390625e-05, -4.00543212890625e-05, 0.0, -0.0054683685302734375, 0.0, -0.16849267482757568, -1.5139465176616795e-05, -1.9073486328125e-06, -0.0004634857177734375, -0.0004215240478515625, -0.00034797191619873047, -1.9073486328125e-06, -1.71661376953125e-05, -0.0049092769622802734, -5.602836608886719e-05, -0.3636770248413086, -0.5318546295166016, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.052886009216308594, 0.0, -0.02642810344696045, 0.0, -0.11818325519561768, 0.0, -3.62396240234375e-05, -0.19428539276123047, -5.7220458984375e-06, -0.004350937902927399, 0.0, -0.00310516357421875, -0.00066375732421875, -0.0024472475051879883, -2.6702880859375e-05, -0.0012836456298828125, 0.0, 0.0, -0.0002269744873046875, -5.7220458984375e-05, 0.0, -3.814697265625e-06, 0.0, -0.000388382381061092, -2.0265579223632812e-06, -0.001287221908569336, -0.0001468658447265625, -0.002315521240234375, -1.9073486328125e-06, -0.004189968109130859, -0.0006545782089233398, -3.814697265625e-06, -3.0517578125e-05, -1.1444091796875e-05, -1.049041748046875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.1050877571105957, -1.1920928244535389e-07, -0.12436485290527344, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.5544576644897461, -1.9073486328125e-06, -0.0006914132391102612, 0.0, -0.012068033218383789, -1.9073486328125e-06, -2.288818359375e-05, -0.0018444061279296875, -1.9073486328125e-06, -0.0003660628863144666, -2.2649765014648438e-06, -0.0001087188720703125, 0.0, -0.00017857512284535915, -1.9073486328125e-06, -1.117574691772461, -9.5367431640625e-06, -1.9073486328125e-06, -0.013326644897460938, 0.0, -0.0007915496826171875, 0.0, -0.0002846717834472656, -1.9073486328125e-05, -0.09380912780761719, 0.0, -0.012230873107910156, -2.288818359375e-05, -4.780292510986328e-05, 0.0, -0.00232696533203125, -1.9073486328125e-06, -0.272965669631958, -6.675708846159978e-06, -1.9073486328125e-06, -0.0037832260131835938, -0.00045013427734375, -0.00014770030975341797, -1.9073486328125e-06, -1.33514404296875e-05, -0.004270434379577637, -4.696846008300781e-05, -0.4280405044555664, -0.4328174591064453, -8.58306884765625e-05, -1.9073486328125e-06, -0.0034990310668945312, 0.0, -0.19829711318016052, -3.2305197237292305e-05, -0.46231746673583984, -0.043967247009277344, -3.0517578125e-05, -1.9073486328125e-06, -0.0034313201904296875, -5.7220458984375e-06, -0.2272806167602539, 0.0, -0.033135414123535156, -5.14984130859375e-05, -0.0037423372268676758, 0.0, -0.9076592922210693, -5.960462772236497e-07, -5.7220458984375e-06, -0.5630311965942383, 0.0, -0.4831552505493164, 0.0, -0.0014133453369140625, 0.0, -0.0029356477316468954, 0.0, -0.05421638488769531, -0.009395599365234375, -4.57763671875e-05, -0.0002288818359375, -7.62939453125e-06, -0.002674579620361328, -7.62939453125e-06, -0.6683511734008789, -3.814697265625e-05, -0.03254413604736328, 0.0, -0.0075893402099609375, -0.06323909759521484, -0.04467010498046875, -7.05718994140625e-05, -0.0045528411865234375, 0.0, -0.147102952003479, -1.2993786185688805e-05, -0.000415802001953125, -0.6085300445556641, -1.33514404296875e-05, -0.020565032958984375, -0.0001583099365234375, -2.1338462829589844e-05, 0.0, -0.009701728820800781, -0.1877593994140625, -2.6702880859375e-05, 0.0, -0.001384735107421875, 0.0, -0.04451853036880493, 0.0, -0.0531158447265625, -0.000278472900390625, 0.0, -5.7220458984375e-06, -0.0051116943359375, -3.814697265625e-06, -0.014801025390625, 0.0, -0.02429962158203125, -9.72747802734375e-05, -0.13827991485595703, 0.0, -0.230637788772583, -2.861022494471399e-06, -0.000186920166015625, -0.09341621398925781, 0.0, -0.0030918121337890625, -1.9073486328125e-06, -0.0003337860107421875, 0.0, -0.00778961181640625, -1.9073486328125e-05, -3.933906555175781e-06, 0.0, -0.021618366241455078, -4.5299530029296875e-06, -0.000606536865234375, 0.0, -1.9073486328125e-06, -0.028577804565429688, -5.7220458984375e-06, 0.0, -0.12499427795410156, 0.0, -0.5388097763061523, 0.0, -0.8695282936096191, -4.291534423828125e-06, -0.0002574920654296875, -0.07278728485107422, -0.000316619873046875, -0.0009136199951171875, 0.0, -1.224622368812561, -5.9604644775390625e-06, 0.0, -0.0015630722045898438, 0.0, -0.00096893310546875, 0.0, -0.000118255615234375, 0.0, -0.0001010894775390625, -0.000484466552734375, -2.47955322265625e-05, 0.0, -0.006019234657287598, -7.748603820800781e-06], "choice_history": [45, 100, 154, 53, 79, "Repentance", "<EOS>", 141, 34, 101, "Secret", "Card", "<EOS>", 157, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 155, 62, 115, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 50, 69, 141, 26, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", 20, 103, "Null", "<EOS>", 56, 84, "_reveal", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "minion", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 19, 101, "minion", "<EOS>", "damage", "<EOS>", 142, 36, 106, "1", "<EOS>", 35, 103, "Null", "<EOS>", 54, 82, 14, 75, 11, 70, 23, 122, "super", "<EOS>", "reveal", "<EOS>", 56, 84, "activate", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "player", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 50, 69, 141, 26, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", 20, 103, "Null", "<EOS>", 56, 84, "_reveal", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "minion", "<EOS>", 155, 50, 69, 141, 34, 101, "<UNK>", "<EOS>", 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", "choose_option", "<EOS>", 142, 26, 70, 19, 101, "player", "<EOS>", "game", "<EOS>", 31, 94, 128, 134, 127, "x", "<EOS>", 19, 101, "x", "<EOS>", 57, 87, 15, 80, 19, 101, "targets", "<EOS>", 138, 7, 141, 35, 103, "Null", "<EOS>", 155, 50, 69, 141, 34, 101, "target", "<EOS>", 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 141, 26, 70, 11, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 54, 82, 14, 77, 11, 70, 19, 101, "minion", "<EOS>", "<UNK>", "<EOS>", 141, 29, 77, 19, 101, "len", "<EOS>", 141, 26, 70, 11, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>"]}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"score": -1.5886837243849286, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Shadow of of Nothing", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PRIEST", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "EPIC", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"elts": [{"args": [{"hole0": "<UNK>Deathrattle", "_type": "Template9"}, {"hole0": "PlayerSelector", "_type": "Template9"}], "func": {"id": "Aura", "_type": "Name"}, "_type": "Call"}], "_type": "List"}, "hole1": 1, "hole2": "auras", "hole0": 0, "_type": "Template0"}], "name": "ShadowOfNothing", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n", "score_history": [-7.62939453125e-06, -4.57763671875e-05, -1.1444091796875e-05, -2.47955322265625e-05, -3.4332275390625e-05, -8.570796489948407e-05, -0.006714118644595146, -0.3826530873775482, -0.1717127412557602, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -4.370696842670441e-05, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -4.9591064453125e-05, -1.9073486328125e-06, -0.000156402587890625, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -2.288818359375e-05, 0.0, 0.0, -1.9073486328125e-06, -5.53131103515625e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001065694450517185, -5.841255187988281e-06, -3.933906555175781e-06, -2.3841855067985307e-07, -0.010766983032226562, -1.33514404296875e-05, -1.9073486328125e-06, -3.552412090357393e-05, -0.0011762756621465087, -0.0014019727241247892, -0.00013399124145507812, -0.4950605630874634, -0.0021758079528808594, -0.0003002874436788261, -0.00229644775390625, -1.9073486328125e-06, 0.0, -0.0001740915613481775, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -8.106222594506107e-06, -2.3841855067985307e-07, -0.0019736289978027344, 0.0, -9.5367431640625e-06, 0.0, -7.62939453125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.000591278076171875, -5.960462772236497e-07, -0.01044464111328125, -8.7738037109375e-05, -4.029273986816406e-05, -2.706014311115723e-05, -2.2649081074632704e-05, 0.0, -0.06882166862487793, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.0007801055908203125, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.01389920711517334, 0.0, -9.34600830078125e-05, -0.0011386871337890625, -1.52587890625e-05, -0.09425786137580872, -0.25470462441444397, -0.00010036992171080783, -0.00069427490234375, 0.0, -0.06528245657682419, -0.0002847909927368164, 0.0], "choice_history": [45, 100, 154, 53, 79, "Shadow", "Of", "Nothing", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Shadow", " ", "of", " ", "of", " ", "Nothing", "<EOS>", 36, 106, "0", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 60, 113, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 96, 141, 29, 77, 19, 101, "Aura", "<EOS>", 142, 43, 122, "<UNK>", "Deathrattle", "<EOS>", 43, 122, "Player", "Selector", "<EOS>"]}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"score": -2.4753349553976562, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Slam", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"id": "player", "_type": "Name"}, {"id": "game", "_type": "Name"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "use", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"targets": [{"id": "targets", "_type": "Name"}], "value": {"args": [{"value": {"value": {"value": {"id": "player", "_type": "Name"}, "attr": "game", "_type": "Attribute"}, "attr": "current_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}], "func": {"value": {"id": "copy", "_type": "Name"}, "attr": "copy", "_type": "Attribute"}, "_type": "Call"}, "_type": "Assign"}, {"orelse": [{"value": {"args": [{"hole0": 2, "_type": "Template5"}, {"id": "self", "_type": "Name"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "damage", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "test": {"values": [{"left": {"value": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "card", "_type": "Attribute"}, "attr": "minion_type", "_type": "Attribute"}, "ops": [{"_type": "Is"}], "comparators": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "TOTEM", "_type": "Attribute"}], "_type": "Compare"}, {"left": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "ops": [{"_type": "In"}], "comparators": [{"id": "targets", "_type": "Name"}], "_type": "Compare"}], "op": {"_type": "And"}, "_type": "BoolOp"}, "body": [{"value": {"args": [{"n": 2, "_type": "Num"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "change_attack", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"value": {"args": [{"n": 2, "_type": "Num"}], "func": {"value": {"value": {"id": "self", "_type": "Name"}, "attr": "target", "_type": "Attribute"}, "attr": "increase_health", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}], "_type": "If"}], "name": "use", "_type": "FunctionDef"}], "name": "Slam", "bases": [{"id": "SpellCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(player.game.current_player.minions)\n        if (self.target.card.minion_type is MINION_TYPE.TOTEM and self.\n            target in targets):\n            self.target.change_attack(2)\n            self.target.increase_health(2)\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "score_history": [0.0, 0.0, -7.62939453125e-06, -4.9591064453125e-05, -1.1444091796875e-05, -2.5033937163243536e-06, -1.3828206647303887e-05, -3.4332275390625e-05, -1.9073486328125e-06, 0.0, -9.918212890625e-05, -4.0650367736816406e-05, -1.9073486328125e-06, -7.05718994140625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -2.1457672119140625e-06, 0.0, -0.000125885009765625, -3.0517578125e-05, -9.5367431640625e-06, 0.0, -0.0004177093505859375, -1.52587890625e-05, -2.09808349609375e-05, -1.71661376953125e-05, -0.002025604248046875, -7.62939453125e-06, 0.0, -9.131431579589844e-05, -4.768370445162873e-07, -0.0002460479736328125, -5.7220458984375e-06, 0.0, -1.4781842764932662e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.0728817869676277e-06, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -4.649162292480469e-05, 0.0, -0.0008074045181274414, 0.0, -2.288818359375e-05, 0.0, -7.62939453125e-06, 0.0, -0.000102996826171875, 0.0, -8.594989776611328e-05, 0.0, -0.000209808349609375, -1.1444091796875e-05, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -5.53131103515625e-05, -5.7220458984375e-06, -0.0002117156982421875, 0.0, -0.000202178955078125, -5.7220458984375e-06, -0.0006754398345947266, 0.0, 0.0, 0.0, -2.682209014892578e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0014429092407226562, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, 0.0, -1.5735626220703125e-05, 0.0, -9.5367431640625e-06, -0.00013673292414750904, -2.7418097943154862e-06, -0.41876888275146484, -1.33514404296875e-05, -3.814697265625e-06, 0.0, -1.52587890625e-05, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -2.3603428417118266e-05, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -1.9311904907226562e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.1840047836303711, -7.62939453125e-06, -7.62939453125e-06, -0.00025177001953125, 0.0, -0.04221796989440918, -2.1457672119140625e-06, -0.005425453186035156, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.3457460403442383, 0.0, -0.00021755695343017578, 0.0, -0.0001373291015625, -3.814697265625e-06, -1.9073486328125e-05, -5.91278076171875e-05, -6.67572021484375e-05, -2.86102294921875e-05, 0.0, -0.023128509521484375, -1.9073486328125e-06, -0.0012054443359375, 0.0, -0.015792012214660645, -1.9073486328125e-06, -0.0014575719833374023, -1.9073486328125e-06, -0.09073042869567871, -1.9073486328125e-06, -0.0013501520734280348, -0.00017881393432617188, -0.055072784423828125, -0.000370025634765625, -0.0051670074462890625, -2.47955322265625e-05, -4.00543212890625e-05, -9.5367431640625e-06, -0.0013399124145507812, -1.52587890625e-05, -0.0005054473876953125, -5.7220458984375e-06, -0.00070953369140625, 0.0, -0.010713577270507812, 0.0, -0.00083160400390625, -1.71661376953125e-05, -9.1552734375e-05, -1.9073486328125e-06, -6.115436553955078e-05, 0.0, -0.001044392236508429, -6.67572021484375e-05, -0.004962801933288574, -1.7523765563964844e-05, -0.0001239776611328125, -0.019762039184570312, -8.0108642578125e-05, -0.000484466552734375, -3.814697265625e-06, -0.00017261505126953125, 0.0, -0.001453399658203125, -3.814697265625e-06, -0.4570169448852539, -1.9073486328125e-06, -0.013790130615234375, -0.000232696533203125, -0.0004138946533203125, -1.1444091796875e-05, -0.00012969970703125, 0.0, -7.62939453125e-05, 0.0, -3.3736228942871094e-05, 0.0, -0.000156402587890625, -0.02213764190673828, -1.9073486328125e-06, -0.0022783279418945312, 0.0, -0.007160186767578125, -5.7220458984375e-06, -0.0021228790283203125, -0.0001277923583984375, -5.7220458984375e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -0.0015125274658203125, 0.0, -0.000362396240234375, 0.0, -0.0002422332763671875, 0.0, -3.254413604736328e-05, 0.0, -0.33147430419921875, -7.62939453125e-06, -1.9073486328125e-06, -0.000370025634765625, -7.62939453125e-06, -0.00012908875942230225, 0.0, -0.001674652099609375, -2.6702880859375e-05, -8.392333984375e-05, -0.20345211029052734, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.0001583099365234375, -3.814697265625e-06, -0.005832672119140625, 0.0, -0.00016415119171142578, 0.0, -0.02073955535888672, 0.0, -3.24249267578125e-05, -0.000125885009765625, -9.5367431640625e-06, -0.00019116699695587158, 0.0, -0.000293731689453125, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.15752792358398438, -1.9073486328125e-06, -1.9073486328125e-06, -0.0002689361572265625, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.00019729137420654297, 0.0, -8.428096771240234e-05, 0.0, -0.0010932683944702148, 0.0, -0.0001983642578125, -6.67572021484375e-05, -2.86102294921875e-05, -0.0013463757932186127, -5.7220440794480965e-06, -5.14984130859375e-05, 0.0, -4.00543212890625e-05, -5.91278076171875e-05], "choice_history": [45, 100, 154, 53, 79, "Slam", "<EOS>", 141, 34, 101, "Spell", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Slam", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "target_func", "<EOS>", 11, 70, 11, 70, 19, 101, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 56, 84, "use", "<EOS>", 128, 136, 127, "self", "<EOS>", 127, "player", "<EOS>", 127, "game", "<EOS>", 156, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "use", "<EOS>", 142, 34, 101, "player", "<EOS>", 34, 101, "game", "<EOS>", 50, 69, 141, 34, 101, "targets", "<EOS>", 14, 77, 11, 70, 19, 101, "copy", "<EOS>", "copy", "<EOS>", 141, 26, 70, 11, 70, 11, 70, 19, 101, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 57, 88, 13, 73, 0, 142, 30, 80, 11, 70, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "minion_type", "<EOS>", 138, 6, 141, 26, 70, 19, 101, "MINION_TYPE", "<EOS>", "TOTEM", "<EOS>", 30, 80, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", 138, 5, 141, 34, 101, "targets", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 141, 36, 106, "2", "<EOS>", 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 141, 36, 106, "2", "<EOS>", 154, 54, 82, 14, 77, 11, 70, 11, 70, 19, 101, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 142, 40, 118, "2", "<EOS>", 34, 101, "self", "<EOS>"]}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"score": -0.07508338388412739, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Spellbreaker", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"hole0": "Silence", "_type": "Template9"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template9"}, "arg": "players", "_type": "keyword"}, {"value": {"hole0": "UserPicker", "_type": "Template9"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 3, "hole0": 4, "_type": "Template1"}], "name": "Spellbreaker", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "score_history": [0.0, -3.814697265625e-06, -1.1444091796875e-05, -4.1961669921875e-05, -7.62939453125e-06, -0.00028383731842041016, -0.0027315006591379642, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.748600182821974e-06, -4.9829479394247755e-05, -3.2424570235889405e-05, -3.814697265625e-06, -4.76837158203125e-05, 0.0, -0.0003218650817871094, 0.0, 0.0, -7.62939453125e-06, 0.0, -2.9802317840221804e-06, 0.0, -0.0001220703125, -9.5367431640625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.00025177001953125, -0.00020599365234375, 0.0, -1.9073486328125e-06, 0.0, -3.182848740834743e-05, -5.7220458984375e-06, -3.778930113185197e-05, -2.5748875486897305e-05, -7.82012939453125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -1.7285339708905667e-05, -3.24249267578125e-05, -1.71661376953125e-05, 0.0, -1.990858800127171e-05, -4.768370445162873e-07, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -2.9683089451282285e-05, -1.9073486328125e-06, -2.682209014892578e-05, 0.0, -1.33514404296875e-05, 0.0, -3.814697265625e-06, 0.0, -1.71661376953125e-05, 0.0, -7.271766662597656e-05, 0.0, -0.0002727508544921875, -5.7220458984375e-06, -0.00020599365234375, -2.0265579223632812e-06, 0.0, -0.000102996826171875, -3.814697265625e-06, 0.0, -0.0001661776623222977, -1.1920928244535389e-07, -4.38690185546875e-05, -0.0034275054931640625, -1.9073486328125e-06, -0.0006579405162483454, -0.016169779002666473, -2.09808349609375e-05, -0.0002002716064453125, -0.000164031982421875, -1.9073486328125e-05, -0.0008570509380660951, -1.9073486328125e-06, -7.748603820800781e-06, -0.04086875915527344, -2.47955322265625e-05, -0.0005094990483485162, 0.0, -7.62939453125e-06, 0.0, -0.005265235900878906, -0.00032806396484375, 0.0, -1.1444091796875e-05, -8.022785186767578e-05, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001308917999267578, -0.0004407167434692383, 0.0, -3.62396240234375e-05, -7.62939453125e-06, -8.583032467868179e-06, -1.9907753085135482e-05, -0.00033783912658691406, -1.8596509107737802e-05], "choice_history": [45, 100, 154, 53, 79, "Spellbreaker", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Spellbreaker", "<EOS>", 36, 106, "4", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 43, 122, "Silence", "<EOS>", 29, 76, 19, 101, "Minion", "Selector", "<EOS>", 150, 130, "players", "<EOS>", 23, 122, "Both", "Player", "<EOS>", 130, "picker", "<EOS>", 23, 122, "User", "Picker", "<EOS>", 61, 114, "4", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"score": -1.3019906779918884, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Sunfury Protector", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"args": [{"hole0": "adjacent", "_type": "Template9"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "MinionSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "Adjacent", "_type": "Template9"}, "arg": "condition", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 3, "hole0": 2, "_type": "Template1"}], "name": "SunfuryProtector", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(adjacent()),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.33514404296875e-05, -2.288818359375e-05, -0.00015066919149830937, -3.838465272565372e-05, -6.234463216969743e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, 0.0, -2.1457672119140625e-06, -4.410734163684538e-06, -3.814697265625e-05, -3.0517578125e-05, -1.9073486328125e-06, -0.001019120216369629, -1.1920928244535389e-07, 0.0, -0.0001220703125, 0.0, -5.7220440794480965e-06, 0.0, -6.67572021484375e-05, -1.9073486328125e-06, -7.62939453125e-06, -5.7220458984375e-06, -9.5367431640625e-05, -7.05718994140625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.2172887838678434e-05, -1.9073486328125e-06, -1.990795135498047e-05, -8.106198947643861e-06, -0.0001049041748046875, -2.09808349609375e-05, -5.7220458984375e-06, -6.198873961693607e-06, -4.673003786592744e-05, -1.3947486877441406e-05, -0.0026454925537109375, -1.9073486328125e-06, 0.0, -1.1682510375976562e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -5.578967466135509e-05, -2.682209014892578e-05, -3.516674041748047e-05, 0.0, -9.5367431640625e-06, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -0.00015473365783691406, 0.0, -0.001148223876953125, -1.9073486328125e-05, -0.000858306884765625, -2.0265579223632812e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0001586664147907868, -8.344646857949556e-07, -1.9073486328125e-06, -4.57763671875e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.1444091796875e-05, -0.00015448033809661865, -0.0005540754646062851, -0.0001354217529296875, -0.26561737060546875, -3.24249267578125e-05, -0.3421430289745331, -0.3386894464492798, -0.0027065277099609375, -0.004754066467285156, -1.52587890625e-05, 0.0, -0.009228944778442383, -1.9073486328125e-06, 0.0, -0.0009937286376953125, -3.814697265625e-06, -0.07351696491241455, -3.099440846199286e-06, -0.0036983489990234375, 0.0, -0.2523554563522339, -3.576278118089249e-07, -6.4849853515625e-05, -5.7220458984375e-06, -3.576278118089249e-07, -1.1920928244535389e-07, -1.5377991076093167e-05, -5.960462772236497e-07], "choice_history": [45, 100, 154, 53, 79, "Sunfury", "Protector", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Sunfury", " ", "Protector", "<EOS>", 36, 106, "2", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 43, 122, "adjacent", "<EOS>", 29, 76, 19, 101, "Minion", "Selector", "<EOS>", 149, 130, "condition", "<EOS>", 23, 122, "Adjacent", "<EOS>", 61, 114, "2", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"score": -1.2405014390751248, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Tinkmaster Overspark", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "LEGENDARY", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"args": [{"func": {"id": "CardQuery", "_type": "Name"}, "keywords": [{"value": {"elts": [{"args": [{"n": 2, "_type": "Num"}], "func": {"id": "ManaCost", "_type": "Name"}, "_type": "Call"}, {"hole0": "IsMinion", "_type": "Template9"}], "_type": "List"}, "arg": "conditions", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Transform", "_type": "Name"}, "_type": "Call"}, {"hole0": "PlayerSelector", "_type": "Template9"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 3, "hole0": 3, "_type": "Template1"}], "name": "TinkmasterOverspark", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-05, -0.004184538498520851, -0.006817059125751257, -4.6491513785440475e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -6.008148193359375e-05, -3.5166456655133516e-05, -0.0001659393310546875, -0.000217437744140625, -1.52587890625e-05, -0.00034248828887939453, -2.2649765014648438e-06, 0.0, -2.47955322265625e-05, 0.0, -7.867813110351562e-06, 0.0, -0.0026683807373046875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0003185272216796875, -4.00543212890625e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -6.43729799776338e-06, -5.7220458984375e-06, -3.254413604736328e-05, -3.576277322281385e-06, -0.0002079010009765625, -7.62939453125e-06, -5.7220458984375e-06, -6.556489552167477e-06, -4.220008850097656e-05, -6.318092346191406e-06, -0.0010738372802734375, 0.0, 0.0, -8.344698017026531e-07, -3.576278118089249e-07, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -9.822665015235543e-05, -5.6862831115722656e-05, -4.38690185546875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.0001322031021118164, 0.0, -0.00011837482452392578, 0.0, -0.0001926422119140625, -1.71661376953125e-05, -0.0006237030029296875, 0.0, -2.288818359375e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00020741505431942642, -5.960462772236497e-07, -1.9073486328125e-06, -7.62939453125e-05, -4.1961669921875e-05, -7.62939453125e-06, -2.6702880859375e-05, -0.0025405874475836754, -0.0029900739900767803, -0.000545501708984375, -0.027584075927734375, -0.0020294189453125, -1.9073486328125e-05, -1.9073486328125e-06, -0.00968220829963684, -0.002037644386291504, -9.536738616588991e-07, -0.0001583099365234375, -4.57763671875e-05, -0.0076552629470825195, -2.3841855067985307e-07, -0.0001277923583984375, -4.00543212890625e-05, -0.0018444061279296875, -0.009760856628417969, -1.1444091796875e-05, -1.9073486328125e-05, -7.62939453125e-06, -0.0058638304471969604, -0.01882016472518444, -3.6597251892089844e-05, -5.7220458984375e-06, -0.6513423919677734, 0.0, -0.015041081234812737, -0.0001068115234375, -0.013686180114746094, 0.0, -0.0015355286886915565, -0.014054829254746437, -1.9073486328125e-06, -0.38114261627197266, -1.9073486328125e-06, -0.05361175537109375, -1.5020307728264015e-05, 0.0, -2.6702880859375e-05, -3.814697265625e-06, -5.125986263010418e-06, -1.1920928244535389e-07, -1.1921518307644874e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Tinkmaster", "Overspark", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Tinkmaster", " ", "Overspark", "<EOS>", 36, 106, "3", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Transform", "<EOS>", 141, 29, 76, 19, 101, "Card", "Query", "<EOS>", 149, 130, "conditions", "<EOS>", 17, 96, 142, 29, 77, 19, 101, "Mana", "Cost", "<EOS>", 141, 36, 106, "2", "<EOS>", 43, 122, "Is", "Minion", "<EOS>", 43, 122, "Player", "Selector", "<EOS>", 61, 114, "3", "<EOS>", "3", "<EOS>"]}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"score": -6.909583221839412, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Vaporize", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "MAGE", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"targets": [{"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "name": "__init__", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "minion_died", "_type": "Str"}, {"value": {"id": "self", "_type": "Name"}, "attr": "_reveal", "_type": "Attribute"}], "func": {"value": {"id": "player", "_type": "Name"}, "attr": "bind", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"targets": [{"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "name": "_reveal", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "minion_died", "_type": "Str"}, {"value": {"id": "self", "_type": "Name"}, "attr": "_reveal", "_type": "Attribute"}], "func": {"value": {"id": "player", "_type": "Name"}, "attr": "bind", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"targets": [{"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "name": "_reveal", "_type": "FunctionDef"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "minion_died", "_type": "Str"}, {"value": {"id": "self", "_type": "Name"}, "attr": "_reveal", "_type": "Attribute"}], "func": {"value": {"id": "player", "_type": "Name"}, "attr": "bind", "_type": "Attribute"}, "_type": "Call"}, "_type": "Expr"}, {"targets": [{"value": {"id": "self", "_type": "Name"}, "attr": "player", "_type": "Attribute"}], "value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign"}], "name": "_reveal", "_type": "FunctionDef"}], "name": "Vaporize", "bases": [{"id": "SecretCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n        self.player = Null\n\n    def _reveal(self, minion):\n        player.bind('minion_died', self._reveal)\n        self.player = Null\n\n    def _reveal(self, minion):\n        player.bind('minion_died', self._reveal)\n        self.player = Null\n\n    def _reveal(self, minion):\n        player.bind('minion_died', self._reveal)\n        self.player = Null\n", "score_history": [-2.288818359375e-05, -2.86102294921875e-05, -0.0001430511474609375, -9.5367431640625e-06, -4.00543212890625e-05, -3.671582089737058e-05, -0.0001543707330711186, -5.7220458984375e-06, -1.9073486328125e-06, 0.0, -0.0011322497157379985, -0.0003852152731269598, -9.047984349308535e-05, -0.038641929626464844, -5.91278076171875e-05, -3.0517578125e-05, -0.00010442676284583285, -2.682209014892578e-05, -5.7220458984375e-06, -2.288818359375e-05, 0.0, -4.0650367736816406e-05, 0.0, -0.009195327758789062, -0.0003871917724609375, 0.0, -1.9073486328125e-06, -3.4332275390625e-05, -9.5367431640625e-06, -0.0001163482666015625, -3.814697265625e-06, -1.9073486328125e-06, -7.271740287251305e-06, -1.9073486328125e-06, -0.0007500648498535156, -1.1920928244535389e-07, -4.57763671875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0002548369811847806, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.1920923270736239e-07, -1.1920928244535389e-07, -2.6702880859375e-05, -2.288818359375e-05, -1.1444091796875e-05, 0.0, -0.0008567571640014648, -3.814697265625e-06, -0.013633251190185547, -3.814697265625e-06, -4.9591064453125e-05, 0.0, -7.62939453125e-06, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -0.00030410289764404297, -2.3841855067985307e-07, -0.0064029693603515625, -0.0001220703125, -1.1444091796875e-05, -3.62396240234375e-05, 0.0, -1.1444091796875e-05, 0.0, -0.0024242401123046875, -5.7220458984375e-06, -0.0003376007080078125, 0.0, -0.04506397247314453, -4.00543212890625e-05, -9.34600830078125e-05, -1.9073486328125e-06, -0.0004558563232421875, 0.0, -0.1696932315826416, -4.88758041683468e-06, -1.52587890625e-05, -0.011846542358398438, -0.00012969970703125, -9.000301361083984e-05, 0.0, -3.814697265625e-06, -0.0021108388900756836, -1.251697449333733e-05, -0.5864839553833008, -0.0034341812133789062, -1.9073486328125e-06, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.1496286392211914, -2.288818359375e-05, -0.002288222312927246, 0.0, -0.24516034126281738, 0.0, -0.0001773834228515625, -7.43865966796875e-05, -3.814697265625e-06, -0.6444878578186035, -1.33514404296875e-05, -0.0002899169921875, 0.0, -4.38690185546875e-05, 0.0, -0.0001773834228515625, -1.9073486328125e-06, -0.0039484500885009766, -2.2649765014648438e-06, -0.0006780624389648438, -0.0002307891845703125, -2.6702880859375e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0003948211669921875, -1.1444091796875e-05, -2.288818359375e-05, 0.0, -0.5348587036132812, -7.2479248046875e-05, -0.0002193450927734375, -1.9073486328125e-06, -0.000705718994140625, 0.0, -0.059535861015319824, -6.437291176553117e-06, -2.86102294921875e-05, -0.0018682479858398438, -0.000152587890625, -0.0004515647888183594, 0.0, -7.62939453125e-06, -0.002414107322692871, -8.463859558105469e-06, -0.5625267028808594, -0.0025959014892578125, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.1876697540283203, -1.9073486328125e-05, -0.002420783042907715, 0.0, -0.2528165578842163, 0.0, -5.340576171875e-05, -7.43865966796875e-05, -3.814697265625e-06, -0.5988327264785767, -1.33514404296875e-05, -0.0002841949462890625, 0.0, -4.38690185546875e-05, 0.0, -0.0001697540283203125, -1.9073486328125e-06, -0.003862619400024414, -2.2649765014648438e-06, -0.0006761550903320312, -0.000244140625, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0003910064697265625, -1.1444091796875e-05, -2.47955322265625e-05, 0.0, -0.5377531051635742, -7.05718994140625e-05, -0.00021839141845703125, -1.9073486328125e-06, -0.0007076263427734375, 0.0, -0.05929076671600342, -6.437291176553117e-06, -2.86102294921875e-05, -0.0018758773803710938, -0.000152587890625, -0.0004563331604003906, 0.0, -7.62939453125e-06, -0.0024150609970092773, -8.463859558105469e-06, -0.5620889663696289, -0.0025930404663085938, 0.0, 0.0, 0.0, -3.814697265625e-06, 0.0, -0.18816280364990234, -1.9073486328125e-05, -0.0024236440658569336, 0.0, -0.25323426723480225, 0.0, -5.340576171875e-05, -7.43865966796875e-05, -3.814697265625e-06, -0.5977131128311157, -1.33514404296875e-05, -0.0002841949462890625, 0.0, -4.38690185546875e-05, 0.0, -0.0001697540283203125, -1.9073486328125e-06, -0.0038607120513916016, -2.2649765014648438e-06, -0.0006761550903320312, -0.000244140625, -2.47955322265625e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0003910064697265625, -1.1444091796875e-05, -2.47955322265625e-05, 0.0, -0.5377664566040039, -7.05718994140625e-05, -0.00021839141845703125, -1.9073486328125e-06], "choice_history": [45, 100, 154, 53, 79, "Vaporize", "<EOS>", 141, 34, 101, "Secret", "Card", "<EOS>", 157, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Vaporize", "<EOS>", 36, 106, "3", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 50, 69, 141, 26, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", 20, 103, "Null", "<EOS>", 56, 84, "_reveal", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "minion", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 19, 101, "player", "<EOS>", "bind", "<EOS>", 142, 37, 110, "minion_died", "<EOS>", 26, 70, 19, 101, "self", "<EOS>", "_reveal", "<EOS>", 50, 69, 141, 26, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", 20, 103, "Null", "<EOS>", 56, 84, "_reveal", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "minion", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 19, 101, "player", "<EOS>", "bind", "<EOS>", 142, 37, 110, "minion_died", "<EOS>", 26, 70, 19, 101, "self", "<EOS>", "_reveal", "<EOS>", 50, 69, 141, 26, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", 20, 103, "Null", "<EOS>", 56, 84, "_reveal", "<EOS>", 128, 135, 127, "self", "<EOS>", 127, "minion", "<EOS>", 155, 54, 82, 14, 77, 11, 70, 19, 101, "player", "<EOS>", "bind", "<EOS>", 142, 37, 110, "minion_died", "<EOS>", 26, 70, 19, 101, "self", "<EOS>", "_reveal", "<EOS>", 50, 69, 141, 26, 70, 19, 101, "self", "<EOS>", "player", "<EOS>", 20, 103, "Null", "<EOS>"]}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"score": -0.012420627149651864, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole1": 1, "hole2": "ALL", "hole0": "Worgen Infiltrator", "_type": "Template2"}], "name": "__init__", "_type": "FunctionDef"}, {"hole3": {"value": true, "_type": "NameConstant"}, "hole1": 1, "hole2": "stealth", "hole0": 2, "_type": "Template0"}], "name": "WorgenInfiltrator", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "score_history": [0.0, -3.814697265625e-06, -7.62939453125e-06, -1.33514404296875e-05, -2.6702880859375e-05, -0.00010668662434909493, -1.6331539882230572e-05, -6.6756979322235566e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, 0.0, -5.9603295085253194e-05, -1.1086458471254446e-05, -1.33514404296875e-05, -4.00543212890625e-05, 0.0, -5.245203283266164e-06, -5.960462772236497e-07, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -6.43729799776338e-06, 0.0, -5.7220458984375e-06, -0.0011386871337890625, -0.0002651214599609375, -5.197399514145218e-05, -0.00022792816162109375, -2.0265579223632812e-06, -7.867813110351562e-06, -0.0001173022246803157, 0.0, -0.0003013432724401355, -1.9073486328125e-06, -0.00191497802734375, -5.91278076171875e-05, -2.419927841401659e-05, 0.0, -2.6225879992125556e-06, 0.0, -0.007833479903638363, 0.0, -6.103515625e-05, -4.76837158203125e-05, -1.9073486328125e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Worgen", "Infiltrator", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 62, 115, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 60, 113, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 20, 102, "True", "<EOS>"]}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"score": -0.9600470375809138, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Blackwing Corruptor", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"args": [{"n": 5, "_type": "Num"}], "func": {"id": "Damage", "_type": "Name"}, "_type": "Call"}, {"func": {"id": "CharacterSelector", "_type": "Name"}, "keywords": [{"value": {"hole0": "BothPlayer", "_type": "Template9"}, "arg": "players", "_type": "keyword"}, {"value": {"hole0": "UserPicker", "_type": "Template9"}, "arg": "picker", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 4, "hole0": 5, "_type": "Template1"}], "name": "BlackwingCorruptor", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(5),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "score_history": [0.0, -3.814697265625e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.71661376953125e-05, -0.0007580029196105897, -0.0003711488388944417, -2.1815061700181104e-05, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -6.675719760096399e-06, -1.03711727206246e-05, -5.14984130859375e-05, -1.9073486328125e-05, 0.0, -6.127357482910156e-05, -1.1920928244535389e-07, 0.0, -1.1444091796875e-05, 0.0, -5.9604644775390625e-06, 0.0, -0.000133514404296875, -1.1444091796875e-05, -0.0001068115234375, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -6.079673767089844e-06, -1.9073486328125e-06, -2.1100042431498878e-05, -2.503394853192731e-06, -0.000125885009765625, -2.288818359375e-05, -3.814697265625e-06, -9.536738616588991e-07, -7.82012939453125e-05, -5.364416665543104e-06, -0.0001468658447265625, 0.0, 0.0, -0.00034022345789708197, -4.768370445162873e-07, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -4.756449197884649e-05, -3.933906555175781e-06, -2.8491018383647315e-05, 0.0, -3.62396240234375e-05, 0.0, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -7.62939453125e-05, 0.0, -4.1961669921875e-05, -9.5367431640625e-06, -0.0002765655517578125, 0.0, 0.0, -3.814697265625e-06, -3.814697265625e-06, 0.0, -0.00012135504221078008, 0.0, -0.058132171630859375, -7.43865966796875e-05, -4.57763671875e-05, -4.9591064453125e-05, -1.9073486328125e-06, -0.49819713830947876, -1.0013547580456361e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.19332310557365417, 0.0, -1.33514404296875e-05, -0.17000198364257812, -0.0001049041748046875, 0.0, -0.00027680397033691406, -7.987022399902344e-06, -7.62939453125e-06, -0.03347301483154297, -4.1961669921875e-05, -0.00020599365234375, 0.0, -4.38690185546875e-05, 0.0, -0.0005515813827514648, -6.878376007080078e-05, 0.0, 0.0, -0.00016224384307861328, 0.0, -0.001155853271484375, -4.57763671875e-05, -0.00023472309112548828, -0.000385284423828125, 0.0, -0.0001544952392578125, -1.9073486328125e-06, -2.09808349609375e-05, -2.1457672119140625e-06, -6.878376007080078e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Blackwing", "Corruptor", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Blackwing", " ", "Corruptor", "<EOS>", 36, 106, "5", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Damage", "<EOS>", 141, 36, 106, "5", "<EOS>", 29, 76, 19, 101, "Character", "Selector", "<EOS>", 150, 130, "players", "<EOS>", 23, 122, "Both", "Player", "<EOS>", 130, "picker", "<EOS>", 23, 122, "User", "Picker", "<EOS>", 61, 114, "5", "<EOS>", "4", "<EOS>"]}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"score": -1.3944569908823752, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Drakonid Crusher", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"args": [{"args": [{"elts": [{"args": [{"hole0": 1, "_type": "Template7"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}, {"hole0": 1, "_type": "Template3"}], "_type": "List"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template9"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 6, "hole0": 6, "_type": "Template1"}], "name": "DrakonidCrusher", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "score_history": [-3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -2.09808349609375e-05, -2.0623108866857365e-05, -4.970903682988137e-05, -2.8132995794294402e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.1909287422895432e-07, -2.3841855067985307e-07, -3.814697265625e-06, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -1.9073479052167386e-05, -1.1563301086425781e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -2.682209014892578e-05, 0.0, -2.86102294921875e-05, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -9.918212890625e-05, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -7.152555099310121e-07, -1.52587890625e-05, -4.172325134277344e-06, -9.536741345073096e-06, -4.57763671875e-05, -2.09808349609375e-05, 0.0, -7.152538273658138e-06, -5.14984130859375e-05, -1.919269561767578e-05, -6.67572021484375e-05, 0.0, 0.0, -1.741590676829219e-05, -1.1920928244535389e-07, -7.62939453125e-06, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -3.8981153920758516e-05, -4.0531158447265625e-06, -9.381771087646484e-05, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, 0.0, -1.0132789611816406e-05, 0.0, -0.0001506805419921875, 0.0, -0.0005664825439453125, -9.5367431640625e-06, -0.0001010894775390625, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-05, -7.62939453125e-06, -0.0006428956985473633, -5.7220458984375e-06, -0.0001621246337890625, -9.918212890625e-05, 0.0, -0.000255584716796875, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -6.449221837101504e-05, 0.0, -0.3033943176269531, -0.00028228759765625, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.008537187241017818, -0.0006726980209350586, -0.0023345947265625, -0.032561302185058594, -7.62939453125e-05, -0.00372314453125, -0.00829315185546875, -1.52587890625e-05, -9.5367431640625e-06, -1.71661376953125e-05, -4.1961669921875e-05, 0.0, -1.9073486328125e-06, -0.02915191650390625, -9.1552734375e-05, -0.2069704383611679, 0.0, -0.13982772827148438, -7.62939453125e-05, -0.2899348735809326, 0.0, -0.3650655746459961, -1.33514404296875e-05, -0.00014889240264892578, -2.86102294921875e-05, 0.0, -7.62939453125e-05, -9.5367431640625e-06, -0.00011372564767953008, -1.1920928244535389e-07, -7.152590114856139e-06, 0.0], "choice_history": [45, 100, 154, 53, 79, "Drakonid", "Crusher", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Drakonid", " ", "Crusher", "<EOS>", 36, 106, "6", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 150, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 142, 29, 77, 19, 101, "Give", "<EOS>", 141, 32, 96, 142, 29, 77, 19, 101, "Buff", "<EOS>", 141, 41, 120, "1", "<EOS>", 39, 116, "1", "<EOS>", 43, 122, "Self", "Selector", "<EOS>", 61, 114, "6", "<EOS>", "6", "<EOS>"]}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"score": -0.08762295832593026, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Imp", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "RARE", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 1, "hole0": 1, "_type": "Template1"}], "name": "Imp", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "score_history": [-0.0001544952392578125, -1.9073486328125e-06, -2.6702880859375e-05, -0.000118255615234375, -1.71661376953125e-05, -9.536738616588991e-07, -1.1324817933200393e-05, -8.58306884765625e-05, 0.0, 0.0, -5.2344053983688354e-05, -3.814697265625e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.0001697540283203125, -5.7220458984375e-06, -8.618831634521484e-05, -6.103515625e-05, -0.0003719329833984375, -5.91278076171875e-05, -4.76837158203125e-05, -3.814697265625e-06, 0.0, -0.011496543884277344, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, -0.0030670166015625, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -8.106222594506107e-06, -7.62939453125e-06, -2.0265579223632812e-06, -2.3841830625315197e-06, -0.006831169128417969, -5.7220458984375e-06, -0.0002803802490234375, -0.0001408954558428377, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0006573623977601528, 0.0, -0.0053577423095703125, -6.866455078125e-05, -5.53131103515625e-05, 0.0, -5.0902366638183594e-05, -1.1920928244535389e-07, -0.04013633728027344, -5.7220458984375e-06, -7.43865966796875e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -4.1961669921875e-05, -8.58306884765625e-05, -0.012159347534179688, -1.9073486328125e-06, -0.00046539306640625, -0.0002651214599609375, -0.0008032321929931641, 0.0, -0.000125885009765625, -7.43865966796875e-05, -0.0004520416259765625, -2.86102294921875e-05, -0.0002269744873046875, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.0001468658447265625, -3.62396240234375e-05, -0.0023040771484375, 0.0, -0.0003833770751953125, -0.000408172607421875, 5.820766091346741e-11, 0.0, -1.6484780644532293e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Imp", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 145, 37, 110, "Imp", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 35, 102, "False", "<EOS>", 149, 130, "minion_type", "<EOS>", 11, 70, 19, 101, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 61, 114, "1", "<EOS>", "1", "<EOS>"]}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"score": -1.050450605005885, "model_output": {"body": [{"body": [{"args": {"args": [{"arg": "self", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"args": [{"s": "Twilight Whelp", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "attr": "PRIEST", "_type": "Attribute"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "attr": "COMMON", "_type": "Attribute"}], "func": {"value": {"hole0": "super", "_type": "Template9"}, "attr": "__init__", "_type": "Attribute"}, "keywords": [{"value": {"args": [{"args": [{"elts": [{"args": [{"hole0": 1, "_type": "Template7"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}, {"args": [{"hole0": "Whelp", "_type": "Template9"}], "func": {"id": "Buff", "_type": "Name"}, "_type": "Call"}], "_type": "List"}], "func": {"id": "Give", "_type": "Name"}, "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template9"}, {"args": [{"args": [{"func": {"id": "CardSelector", "_type": "Name"}, "keywords": [{"value": {"args": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "attr": "DRAGON", "_type": "Attribute"}], "func": {"id": "IsType", "_type": "Name"}, "_type": "Call"}, "arg": "condition", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Count", "_type": "Name"}, "_type": "Call"}], "func": {"id": "GreaterThan", "_type": "Name"}, "keywords": [{"value": {"n": 0, "_type": "Num"}, "arg": "value", "_type": "keyword"}], "_type": "Call"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "arg": "battlecry", "_type": "keyword"}], "_type": "Call"}, "_type": "Expr"}], "name": "__init__", "_type": "FunctionDef"}, {"hole1": 1, "hole0": 2, "_type": "Template1"}], "name": "TwilightWhelp", "bases": [{"id": "MinionCard", "_type": "Name"}], "_type": "ClassDef"}], "_type": "Module"}, "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(Whelp())]), SelfSelector(), GreaterThan(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "score_history": [0.0, -1.52587890625e-05, -5.7220458984375e-06, -1.52587890625e-05, -1.52587890625e-05, -0.000678310461807996, -2.5629668016335927e-05, -5.483620952873025e-06, -3.814697265625e-06, 0.0, 0.0, 0.0, -5.960462772236497e-07, -2.741813204920618e-06, -3.814697265625e-06, -3.814697265625e-06, 0.0, -3.0159935704432428e-05, -3.933906555175781e-06, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -6.4849853515625e-05, -2.47955322265625e-05, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -2.1457672119140625e-06, -1.1444091796875e-05, -5.125998541188892e-06, -3.147124880342744e-05, -0.0001163482666015625, -1.33514404296875e-05, -1.9073486328125e-06, -1.4662683497590479e-05, -6.115436553955078e-05, -4.0531158447265625e-06, -1.9073486328125e-06, 0.0, 0.0, -6.556530024681706e-06, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -5.507429159479216e-05, -1.1920928244535389e-07, -0.011180400848388672, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -1.5497207641601562e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0056858062744140625, -2.47955322265625e-05, -0.020171165466308594, 0.0, -1.9073486328125e-06, -1.9073486328125e-05, -8.7738037109375e-05, 0.0, -0.00045752525329589844, -1.9073486328125e-06, -0.0002288818359375, -8.0108642578125e-05, -6.67572021484375e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.0009914635447785258, -5.841255187988281e-06, -3.4332275390625e-05, -0.010785102844238281, -5.340576171875e-05, -4.1961669921875e-05, -0.013559341430664062, -9.1552734375e-05, -2.09808349609375e-05, -4.00543212890625e-05, -0.0001544952392578125, 0.0, -7.62939453125e-06, -0.0012121200561523438, -0.00042724609375, -0.024106504395604134, -5.7220458984375e-06, -0.059844970703125, -0.0033349990844726562, -2.288818359375e-05, 0.0, -0.004519224166870117, 0.0, -2.6702880859375e-05, -0.02887439727783203, -4.00543212890625e-05, -0.7377463579177856, -0.05366143211722374, -5.340576171875e-05, -1.9073486328125e-05, -0.0004119389923289418, -0.00010835557623067871, 0.0, -1.71661376953125e-05, -0.0062656402587890625, -0.00171661376953125, -1.9073486328125e-06, -0.003436446189880371, -0.0035054683685302734, -2.3126602172851562e-05, -1.33514404296875e-05, -0.0002040863037109375, -0.003955841064453125, -0.0001239776611328125, -3.814697265625e-06, -0.01213836669921875, -2.1457672119140625e-06, -7.62939453125e-06, -0.000354766845703125, -0.002521514892578125, -8.0108642578125e-05, 0.0, -0.001076340675354004, -0.0005551576614379883, -1.9073486328125e-06, -0.00151824951171875, -3.814697265625e-06, -0.009953498840332031, -2.0265579223632812e-06, -0.0014438629150390625, -0.0003204345703125, -1.33514404296875e-05, -1.9073486328125e-06, -0.0002613067626953125, -3.6358815123094246e-05, -3.814697265625e-06, 0.0, -0.0002880096435546875, -0.0001201629638671875, -5.14984130859375e-05, 0.0, -0.0005359649658203125, -2.1457672119140625e-06, -0.0007306337356567383, -1.9073486328125e-06, -0.0010089874267578125, -0.00020599365234375, -0.0033969879150390625, -5.841255187988281e-06, -0.013476371765136719, -1.33514404296875e-05, -0.0003837345284409821, 0.0, -0.001007080078125, -2.6702880859375e-05, -3.361657581990585e-05, 0.0, -1.2397721548040863e-05, 0.0], "choice_history": [45, 100, 154, 53, 79, "Twilight", "Whelp", "<EOS>", 141, 34, 101, "Minion", "Card", "<EOS>", 155, 56, 84, "__init__", "<EOS>", 128, 134, 127, "self", "<EOS>", 154, 54, 82, 14, 78, 11, 70, 23, 122, "super", "<EOS>", "__init__", "<EOS>", 144, 37, 110, "Twilight", " ", "Whelp", "<EOS>", 36, 106, "1", "<EOS>", 26, 70, 19, 101, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 26, 70, 19, 101, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 149, 130, "battlecry", "<EOS>", 14, 77, 19, 101, "Battlecry", "<EOS>", 143, 29, 77, 19, 101, "Give", "<EOS>", 141, 32, 96, 142, 29, 77, 19, 101, "Buff", "<EOS>", 141, 41, 120, "1", "<EOS>", 29, 77, 19, 101, "Buff", "<EOS>", 141, 43, 122, "Whelp", "<EOS>", 43, 122, "Self", "Selector", "<EOS>", 29, 78, 19, 101, "Greater", "Than", "<EOS>", 141, 29, 77, 19, 101, "Count", "<EOS>", 141, 29, 76, 19, 101, "Card", "Selector", "<EOS>", 149, 130, "condition", "<EOS>", 14, 77, 19, 101, "Is", "Type", "<EOS>", 141, 26, 70, 19, 101, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 149, 130, "value", "<EOS>", 21, 106, "0", "<EOS>", 61, 114, "2", "<EOS>", "1", "<EOS>"]}]}
