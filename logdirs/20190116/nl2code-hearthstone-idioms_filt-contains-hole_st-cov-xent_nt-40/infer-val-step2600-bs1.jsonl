{"beams": [{"inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "model_output": {"_type": "Module", "body": [{"name": "<UNK>Blade", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "body": [{"hole1": 5, "_type": "Template6", "hole2": "PALADIN", "hole0": "<UNK> Blade"}, {"name": "create_weapon", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Weapon"}, "_type": "Call", "args": [{"_type": "Num", "n": 3}, {"_type": "Num", "n": 4}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}]}]}, "score": -0.19615270711067012, "choice_history": [55, 124, 221, 63, 103, "<UNK>", "Blade", "<EOS>", 208, 37, 125, "Weapon", "Card", "<EOS>", 222, 85, 178, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", 66, 108, "create_weapon", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 221, 69, 132, 14, 101, 19, 125, "Weapon", "<EOS>", 209, 39, 130, "3", "<EOS>", 39, 130, "4", "<EOS>"], "score_history": [-0.0001926422119140625, -0.000148773193359375, -1.71661376953125e-05, -4.9591064453125e-05, -2.6702880859375e-05, -0.00021576705330517143, -0.001628267695195973, -1.1920928244535389e-07, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -0.0005998611450195312, -0.0001201629638671875, -0.000152587890625, -5.340576171875e-05, -0.09468460083007812, -0.012624740600585938, -0.0004787421494256705, -0.0019626617431640625, -0.0004499302594922483, 0.0, -0.0017622351879253983, 0.0, -0.05918121337890625, 0.0, -0.009648323059082031, 0.0, -0.0027914047241210938, 0.0, -3.0517578125e-05, -0.000377655029296875, -2.47955322265625e-05, -5.9604644775390625e-05, 0.0, -3.814697265625e-06, -9.5367431640625e-06, -3.576278118089249e-07, -0.0002536773681640625, -0.000225067138671875, -0.00011444091796875, -0.0001888275146484375, -0.0058765411376953125, -4.1961669921875e-05, 0.0, -0.0001678466796875, -1.52587890625e-05, -2.6702880859375e-05, -0.00017547607421875, -1.9073486328125e-06, -0.0009823718573898077, -4.00543212890625e-05, 0.0, -1.9073486328125e-06, -0.0007243850268423557, -1.1920928244535389e-07]}], "gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}
{"beams": [{"inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "model_output": {"_type": "Module", "body": [{"name": "BoulderfistOgre", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 6, "_type": "Template6", "hole2": "ALL", "hole0": "Boulderfist Ogre"}, {"hole1": 7, "_type": "Template11", "hole0": 6}]}]}, "score": -0.6287260451085785, "choice_history": [55, 124, 221, 63, 103, "Boulderfist", "Ogre", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 85, 178, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", 73, 146, "6", "<EOS>", "7", "<EOS>"], "score_history": [-1.9073486328125e-06, -1.33514404296875e-05, -1.1444091796875e-05, -5.7220458984375e-06, -3.814697265625e-06, -0.00034127046819776297, -0.016861680895090103, -3.302042750874534e-05, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -5.9604644775390625e-06, -0.00019276142120361328, -0.0001010894775390625, -7.62939453125e-06, -0.5039854049682617, -0.0013885498046875, -0.0006062407046556473, -3.302092227386311e-05, -3.0398367016459815e-05, -1.9073486328125e-06, -0.0005194200202822685, -2.765655517578125e-05, -0.0003650188446044922, -2.0265579223632812e-06, -0.10265159606933594, -2.09808349609375e-05, -0.0003337302478030324, -4.529942543740617e-06, -0.0008807495469227433, -0.0002818107604980469]}], "gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n"}
{"beams": [{"inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(1)\n        player.hero.increase_armor(1)\n", "model_output": {"_type": "Module", "body": [{"name": "DeadlyPoison", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 1, "_type": "Template6", "hole2": "DRUID", "hole0": "Deadly Poison"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Template29", "hole0": 1}, {"_type": "Expr", "value": {"func": {"attr": "increase_armor", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call", "args": [{"_type": "Num", "n": 1}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -2.3407010328950903, "choice_history": [55, 124, 221, 63, 103, "Deadly", "Poison", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 85, 178, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "DRUID", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 223, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 79, 164, "1", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 208, 39, 130, "1", "<EOS>"], "score_history": [0.0, -3.62396240234375e-05, -1.71661376953125e-05, -5.7220458984375e-05, -9.5367431640625e-06, -5.6622808187967166e-05, -0.00448056124150753, -0.0015313844196498394, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -0.00017368793487548828, -2.205371856689453e-05, -1.9073486328125e-06, -4.9591064453125e-05, -0.07071590423583984, -0.0005855560302734375, -0.0011818574275821447, -6.139278411865234e-05, -7.62939453125e-06, 0.0, -5.602552846539766e-06, -1.1920928244535389e-07, -0.527288556098938, -3.4570634852570947e-06, -0.21972370147705078, 0.0, -8.225440979003906e-06, 0.0, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -1.1563301086425781e-05, 0.0, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -0.0001468658447265625, -9.5367431640625e-06, -0.29147911071777344, -6.4849853515625e-05, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.6702880859375e-05, 0.0, -0.00015425673336721957, 0.0, -1.33514404296875e-05, -1.1920928244535389e-07, -1.52587890625e-05, -0.0001068115234375, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.9073486328125e-05, -9.5367431640625e-06, -3.4332275390625e-05, -9.977815352613106e-05, -0.683527946472168, -0.1119070053100586, -0.014597674831748009, -5.388134377426468e-05, -0.00930023193359375, -1.52587890625e-05, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -3.24249267578125e-05, 0.0, -0.0004978179931640625, 0.0, -0.3062019348144531, -2.3841855067985307e-07, -0.0032790403347462416, -3.8146954466355965e-06, -0.0525667667388916, -1.1920928244535389e-07, -0.001415252685546875, -0.009188652038574219, -1.9073486328125e-06, -0.02977796643972397, -7.62939453125e-06]}], "gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n"}
{"beams": [{"inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"_type": "Module", "body": [{"name": "FireElemental", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 6, "hole4": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"_type": "Template37", "hole0": 2}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template38", "hole0": "BothPlayer"}}, {"arg": "picker", "_type": "keyword", "value": {"_type": "Template38", "hole0": "UserPicker"}}]}]}, "hole3": "battlecry", "_type": "Template3", "hole2": "ALL", "hole0": "Fire Elemental"}, {"hole1": 6, "_type": "Template11", "hole0": 6}]}]}, "score": -1.4233084850418436, "choice_history": [55, 124, 221, 63, 103, "Fire", "Elemental", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 80, 165, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 101, 19, 125, "Battlecry", "<EOS>", 209, 48, 173, "2", "<EOS>", 32, 100, 19, 125, "Character", "Selector", "<EOS>", 217, 54, 197, "players", "<EOS>", 26, 174, "Both", "Player", "<EOS>", 54, 197, "picker", "<EOS>", 26, 174, "User", "Picker", "<EOS>", 73, 146, "6", "<EOS>", "6", "<EOS>"], "score_history": [-8.96453857421875e-05, -4.1961669921875e-05, -9.5367431640625e-06, -1.52587890625e-05, -7.62939453125e-06, -0.0005000770906917751, -9.083335316972807e-05, -9.536738616588991e-07, -5.7220458984375e-06, -1.1444091796875e-05, 0.0, -2.503368341422174e-05, -2.1934505639364943e-05, -2.6941299438476562e-05, -1.9073486328125e-05, -0.660578727722168, -3.814697265625e-06, -0.00015007461479399353, -1.2278556823730469e-05, -7.867813110351562e-06, 0.0, -0.00025107921101152897, -2.50339189733495e-06, -0.14227569103240967, 0.0, -0.002072095638141036, -2.50339189733495e-06, -0.0001068115234375, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.00018036362598650157, -4.1723224057932384e-06, -5.7220458984375e-06, -0.003650665283203125, -0.0001201629638671875, -0.0223308727145195, -8.058547973632812e-05, -0.012332916259765625, -0.00032806396484375, -0.0001163482666015625, -1.9073486328125e-05, -0.007110831327736378, -0.00036501846625469625, -8.797645568847656e-05, -0.00130462646484375, -0.0024480819702148438, -0.0002956390380859375, -0.0004787445068359375, -2.288818359375e-05, -0.000507354736328125, -3.814697265625e-06, -0.0005072354688309133, -5.14984130859375e-05, 0.0, -6.103515625e-05, -2.86102294921875e-05, -0.0006256103515625, -1.9073486328125e-06, -8.96453857421875e-05, -3.814697265625e-06, -0.0004640817642211914, -0.0010567903518676758, 0.0, -0.000194549560546875, -9.5367431640625e-06, -2.0265579223632812e-06, -1.9073468138230965e-06, -0.56206214427948, -1.7881377516459906e-06]}], "gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}
{"beams": [{"inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "model_output": {"_type": "Module", "body": [{"name": "GnomishInventor", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 4, "hole4": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "Draw"}, {"_type": "Template38", "hole0": "PlayerSelector"}]}, "hole3": "battlecry", "_type": "Template3", "hole2": "ALL", "hole0": "Gnomish Inventor"}, {"hole1": 4, "_type": "Template11", "hole0": 2}]}]}, "score": -0.4346284606370574, "choice_history": [55, 124, 221, 63, 103, "Gnomish", "Inventor", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 80, 165, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 101, 19, 125, "Battlecry", "<EOS>", 209, 49, 174, "Draw", "<EOS>", 49, 174, "Player", "Selector", "<EOS>", 73, 146, "2", "<EOS>", "4", "<EOS>"], "score_history": [0.0, -1.71661376953125e-05, -9.5367431640625e-06, -4.00543212890625e-05, 0.0, -0.0005305789527483284, -0.0005283161881379783, -0.038524895906448364, -1.9073486328125e-06, -5.340576171875e-05, -1.9073486328125e-06, -1.7285317881032825e-05, -2.0980833141948096e-05, -3.933906555175781e-06, -1.9073486328125e-06, -0.0057964324951171875, -2.86102294921875e-05, -4.768370445162873e-07, -1.7881393432617188e-05, -1.52587890625e-05, -3.814697265625e-06, -0.0034841299057006836, 0.0, -0.001490472350269556, 0.0, -0.0015588998794555664, -7.152555099310121e-07, -2.6702880859375e-05, -8.392333984375e-05, -5.7220458984375e-06, 0.0, -0.0002262592315673828, -2.3841855067985307e-07, -1.9073486328125e-05, -0.0028047561645507812, -6.866455078125e-05, -0.0011744052171707153, -0.0007802949985489249, -8.0108642578125e-05, -1.52587890625e-05, -0.0016468374524265528, -0.0001245737075805664, -1.1920928244535389e-07, -0.37539100646972656, -1.9073486328125e-06, -1.537799835205078e-05, -2.264974000354414e-06, -1.2278555004741065e-05, -1.1920928244535389e-07]}], "gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}
{"beams": [{"inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n", "model_output": {"_type": "Module", "body": [{"name": "HeroicStrike", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 2, "_type": "Template6", "hole2": "DRUID", "hole0": "Heroic Strike"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Template29", "hole0": 2}, {"_type": "Expr", "value": {"func": {"attr": "increase_armor", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call", "args": [{"_type": "Num", "n": 2}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -0.48007034048200836, "choice_history": [55, 124, 221, 63, 103, "Heroic", "Strike", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 85, 178, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 223, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 79, 164, "2", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 208, 39, 130, "2", "<EOS>"], "score_history": [-5.7220458984375e-06, -9.5367431640625e-06, -1.52587890625e-05, -4.9591064453125e-05, -9.5367431640625e-06, -4.327203714638017e-05, -0.00620190380141139, -0.0015328358858823776, -3.814697265625e-06, -6.29425048828125e-05, -3.814697265625e-06, -4.434583752299659e-05, -8.344650268554688e-06, 0.0, -1.1444091796875e-05, -0.0708608627319336, -0.0001583099365234375, -0.0004170263418927789, -4.2557716369628906e-05, -5.841255187988281e-06, -1.9073486328125e-06, -6.4372575252491515e-06, 0.0, -0.05809199810028076, -1.1920928244535389e-07, -0.05957984924316406, 0.0, -8.82148651726311e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.0001392364501953125, -1.9073486328125e-06, -1.609325408935547e-05, 0.0, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -0.00016415119171142578, -1.1444091796875e-05, -0.007849693298339844, -9.5367431640625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -7.62939453125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -2.5987625122070312e-05, 0.0, -1.71661376953125e-05, -1.1920928244535389e-07, -2.6702880859375e-05, -1.9073486328125e-05, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, 0.0, -2.1219253540039062e-05, -0.00017797945474740118, -0.07742023468017578, -0.0029573440551757812, -0.00011702626943588257, -4.768370445162873e-07, -0.0002899169921875, 0.0, -5.7220458984375e-05, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0003490447998046875, 0.0, -0.0004711151123046875, -1.1920928244535389e-07, -0.007865063846111298, -4.291534423828125e-06, -0.12593913078308105, 0.0, -0.0005702972412109375, -0.0037126541137695312, 0.0, -0.05452457815408707, -1.9073486328125e-06]}], "gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n"}
{"beams": [{"inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "model_output": {"_type": "Module", "body": [{"name": "IronbarkProtector", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 8, "_type": "Template4", "hole2": "ALL", "hole0": "Ironbark Protector"}, {"hole1": 8, "_type": "Template10", "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}, "hole0": 8}]}]}, "score": -0.124022165995477, "choice_history": [55, 124, 221, 63, 103, "Ironbark", "Protector", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 83, 176, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "ALL", "<EOS>", 72, 145, "8", "<EOS>", "8", "<EOS>", "taunt", "<EOS>", 20, 126, "True", "<EOS>"], "score_history": [-0.000102996826171875, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00810252409428358, -0.008988394401967525, -3.5166307498002425e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -1.2874577805632725e-05, -1.39474832394626e-05, -1.1920928244535389e-07, -2.288818359375e-05, -0.052825927734375, -0.000213623046875, -0.0018973221303895116, -1.2040138244628906e-05, -3.814697265625e-06, -0.00018346309661865234, -0.000551276549231261, -5.84109548071865e-05, -0.008477787487208843, -2.0265579223632812e-06, -0.0026302337646484375, -1.9073486328125e-05, -4.529941634245915e-06, -0.0004472924047149718, -2.385884727118537e-06, -4.7801782784517854e-05, -0.038887619972229004, -5.602820692729438e-06, -0.000316619873046875, -9.34600830078125e-05, -3.62396240234375e-05, 0.0]}], "gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n"}
{"beams": [{"inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Taunt()))\n        self.target.add_buff(Buff(SpellDamage(1)))\n        if self.target is Null:\n            lightwarden = <UNK>()\n            self.target.add_buff(Buff(SpellDamage(1)))\n", "model_output": {"_type": "Module", "body": [{"name": "MarkOfTheWild", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "args": [{"_type": "Str", "s": "Mark of the Wild"}, {"_type": "Num", "n": 2}, {"attr": "PALADIN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Expr", "value": {"func": {"attr": "add_buff", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "Taunt"}]}]}}, {"_type": "Expr", "value": {"func": {"attr": "add_buff", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"hole1": "SpellDamage", "_type": "Template32", "hole2": 1, "hole0": "Buff"}]}}, {"_type": "If", "test": {"ops": [{"_type": "Is"}], "_type": "Compare", "left": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}, "comparators": [{"_type": "NameConstant", "value": "Null"}]}, "body": [{"targets": [{"_type": "Name", "id": "lightwarden"}], "_type": "Assign", "value": {"_type": "Template38", "hole0": "<UNK>"}}, {"_type": "Expr", "value": {"func": {"attr": "add_buff", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"hole1": "SpellDamage", "_type": "Template32", "hole2": 1, "hole0": "Buff"}]}}]}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -9.9255071003275, "choice_history": [55, 124, 221, 63, 103, "Mark", "Of", "The", "Wild", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 39, 130, "2", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 216, 54, 197, "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 224, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 208, 32, 101, 19, 125, "Buff", "<EOS>", 208, 49, 174, "Taunt", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 208, 44, 168, "Buff", "<EOS>", "Spell", "Damage", "<EOS>", "1", "<EOS>", 67, 111, 15, 104, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", 205, 6, 208, 38, 127, "Null", "<EOS>", 222, 60, 93, 208, 37, 125, "lightwarden", "<EOS>", 26, 174, "<UNK>", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 208, 44, 168, "Buff", "<EOS>", "Spell", "Damage", "<EOS>", "1", "<EOS>"], "score_history": [-2.47955322265625e-05, -9.918212890625e-05, -0.000232696533203125, -5.53131103515625e-05, -9.918212890625e-05, -0.000328367663314566, -0.00010204313730355352, -0.003842005506157875, -0.0014300926122814417, -0.0009722709655761719, -0.000141143798828125, -2.288818359375e-05, -5.7220458984375e-06, -0.00016868114471435547, -4.589557647705078e-05, -5.7220458984375e-06, -0.02547168731689453, -0.008007049560546875, -3.814697265625e-06, -0.00011336283932905644, -0.0013010501861572266, -4.9591064453125e-05, -0.00014495849609375, -3.0517578125e-05, -7.557638309663162e-05, -0.0005590915679931641, -0.010562896728515625, -0.0001068115234375, -1.33514404296875e-05, -3.814697265625e-06, -0.0019140243530273438, -7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -8.118146797642112e-05, -7.62939453125e-06, -9.739398956298828e-05, 0.0, -0.0022983551025390625, -9.5367431640625e-05, -0.0002498626708984375, -0.0005864569102413952, -0.0023471114691346884, -0.0030382308177649975, -0.0006467103958129883, -0.0005851748283021152, -0.0012903213500976562, -0.0004043578519485891, -1.1444091796875e-05, -4.00543212890625e-05, -4.00543212890625e-05, -0.006947576068341732, -1.1920928955078125e-05, -3.814697265625e-06, -0.0001201629638671875, -8.58306884765625e-05, 0.0, -0.0004196165828034282, -0.00018143653869628906, -0.17919814586639404, -1.9073486328125e-06, -5.7220458984375e-06, -3.0517578125e-05, -0.000301361083984375, 0.0, -9.262561798095703e-05, -1.1920928244535389e-07, -0.08378612995147705, -1.9073486328125e-06, -0.0002422332763671875, -0.00592041015625, -3.814697265625e-06, -0.42885422706604004, -3.814697265625e-06, -0.001068115234375, -3.24249267578125e-05, -0.00016021728515625, -0.00023651123046875, -3.62396240234375e-05, -3.814697265625e-06, -0.000102996826171875, -3.814697265625e-06, -7.641315460205078e-05, -2.6702880859375e-05, -0.0009261369705200195, -3.8743019104003906e-05, -0.0009937286376953125, -0.0005931854248046875, -4.088878267793916e-05, -3.218649908376392e-06, -1.52587890625e-05, -3.814697265625e-05, 0.0, -2.276888699270785e-05, -2.3841855067985307e-07, -2.288818359375e-05, -0.00018978118896484375, -2.1457672119140625e-06, -1.9073486328125e-05, -1.442432312614983e-05, -9.298322765971534e-06, -0.5980157852172852, -4.1961669921875e-05, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.33514404296875e-05, -1.9073486328125e-05, -0.0001373291015625, 0.0, -0.00016927647811826319, 0.0, -4.780292510986328e-05, 0.0, -2.6702880859375e-05, -0.0008182525634765625, 0.0, -7.2479248046875e-05, -3.576278118089249e-07, -7.62939453125e-06, -3.62396240234375e-05, -1.7642974853515625e-05, -0.00010728710913099349, -0.3028736114501953, -1.9073486328125e-05, -0.03857231140136719, -0.0001087188720703125, -1.9073486328125e-06, -1.52587890625e-05, -0.0002384185791015625, 0.0, -0.0001010894775390625, 0.0, -0.0015081167221069336, -7.152555099310121e-07, -2.6702873583417386e-05, -3.576278118089249e-07, -0.7801457643508911, -6.079673767089844e-06, -0.0001125335693359375, -0.926661491394043, -0.000179290771484375, -0.0026645660400390625, 0.0, -0.0005247592926025391, -0.00019490718841552734, -0.0032978057861328125, -0.13337993621826172, -5.53131103515625e-05, -0.47160014510154724, -0.0047070980072021484, -0.0754079818725586, 0.0, -0.0038280487060546875, -0.11025619506835938, -3.814697265625e-06, -1.52587890625e-05, -1.1444091796875e-05, -5.7220458984375e-06, -0.000133514404296875, -1.9073486328125e-06, -0.001073598861694336, -5.960462772236497e-07, -7.200241088867188e-05, -7.987022399902344e-06, -0.255318284034729, -7.62939453125e-06, -0.0008716583251953125, -0.34998226165771484, -0.0042667388916015625, -0.007572650909423828, -0.0002993345260620117, -0.014102935791015625, -0.013785719871520996, -3.814697265625e-06, -0.01998354122042656, 0.0, -0.4238090515136719, -0.09899616241455078, -0.0032501220703125, -5.53131103515625e-05, -0.031037330627441406, 0.0, -0.005340576171875, 0.0, -0.3556203842163086, 0.0, -0.001024484634399414, -1.71661376953125e-05, -1.71661376953125e-05, -0.029912948608398438, -0.0003261566162109375, -0.40117454528808594, -2.86102294921875e-05, -1.800060272216797e-05, -3.576278118089249e-07, -0.11568641662597656, -0.021826744079589844, -1.1444091796875e-05, -0.0001964569091796875, -0.061939239501953125, -9.5367431640625e-06, -1.6514323949813843, -0.0001708268973743543, -0.005778312683105469, -5.7220458984375e-06, -0.7584982514381409, -0.0961657166481018, -0.009932518005371094, 0.0, -1.1444091796875e-05, -3.24249267578125e-05, -1.9073486328125e-06, 0.0, -0.0056915283203125, -7.62939453125e-06, -0.0011005401611328125, -5.7220458984375e-06, -0.022477149963378906, 0.0, -0.00012028217315673828, 0.0, -0.39104247093200684, -3.814697265625e-06, -0.0002079010009765625, -0.3786354064941406, -0.00937652587890625, -0.006028652191162109, -9.262561070499942e-05, -0.11395204067230225, -0.008920073509216309, -5.7220458984375e-06, -0.013299109414219856, 0.0]}], "gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n"}
{"beams": [{"inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 2):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 1\n", "model_output": {"_type": "Module", "body": [{"name": "Multi-Shot", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 4, "_type": "Template4", "hole2": "WARRIOR", "hole0": "Multi-Shot"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}, "_type": "For", "body": [{"targets": [{"_type": "Name", "id": "minion"}], "_type": "Assign", "value": {"func": {"attr": "random_choice", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}, "_type": "Call", "args": [{"_type": "Name", "id": "minions"}]}}, {"_type": "Expr", "value": {"func": {"attr": "remove", "_type": "Attribute", "value": {"_type": "Name", "id": "minions"}}, "_type": "Call", "args": [{"_type": "Name", "id": "minion"}]}}, {"_type": "Expr", "value": {"func": {"attr": "damage", "_type": "Attribute", "value": {"_type": "Name", "id": "minion"}}, "_type": "Call", "args": [{"_type": "Template33", "hole0": 3}, {"_type": "Name", "id": "self"}]}}]}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}, {"name": "can_use", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"hole1": [{"_type": "GtE"}], "_type": "Template21", "hole2": [{"_type": "Num", "n": 1}], "hole0": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}]}}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -3.6714801619258353, "choice_history": [55, 124, 221, 63, 103, "Multi-Shot", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 223, 83, 176, "Multi-Shot", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 222, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 65, 107, 19, 125, "i", "<EOS>", 14, 101, 19, 125, "range", "<EOS>", 209, 39, 130, "0", "<EOS>", 39, 130, "2", "<EOS>", 223, 60, 93, 208, 37, 125, "minion", "<EOS>", 14, 101, 11, 94, 19, 125, "game", "<EOS>", "random_choice", "<EOS>", 208, 37, 125, "minions", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "minions", "<EOS>", "remove", "<EOS>", 208, 37, 125, "minion", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "minion", "<EOS>", "damage", "<EOS>", 209, 45, 169, "3", "<EOS>", 37, 125, "self", "<EOS>", 66, 108, "can_use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 221, 69, 132, 23, 159, 14, 101, 19, 125, "len", "<EOS>", 208, 29, 94, 11, 94, 19, 125, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 205, 4, 208, 39, 130, "1", "<EOS>"], "score_history": [-5.7220458984375e-06, -1.9073486328125e-06, -3.814697265625e-06, -9.918212890625e-05, -3.24249267578125e-05, -1.3112959095451515e-05, -0.000624417036306113, -2.6702880859375e-05, -1.9073486328125e-05, -3.814697265625e-06, -3.445148468017578e-05, -1.2874602361989673e-05, -1.9073486328125e-06, -0.18074417114257812, -0.26757049560546875, -6.103515625e-05, -1.0490362910786644e-05, -2.622604142743512e-06, -0.00011228926450712606, -0.00011646694474620745, -0.541187047958374, -0.0002994537353515625, -0.00055694580078125, -0.0001220703125, -0.00034737586975097656, 0.0, -4.57763671875e-05, -7.2479248046875e-05, -1.9073486328125e-06, -5.841255187988281e-06, 0.0, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, -1.1563301086425781e-05, -4.0531158447265625e-06, -0.34124279022216797, -3.24249267578125e-05, -1.9073486328125e-05, 0.0, -3.814697265625e-06, -1.52587890625e-05, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -1.7881377516459906e-06, 0.0, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, -6.4849853515625e-05, -2.6702880859375e-05, -5.340576171875e-05, 0.0, -2.09808349609375e-05, 0.0, -1.9073486328125e-05, -7.867804924899247e-06, -0.01723766326904297, -1.52587890625e-05, -5.7220458984375e-05, 0.0, -0.19803428649902344, 0.0, -1.52587890625e-05, -5.7220458984375e-06, -0.0568389892578125, 0.0, -0.00014972686767578125, -1.1920928244535389e-07, -0.00025177001953125, -2.288818359375e-05, 0.0, -0.00015389890177175403, -1.71661376953125e-05, -0.07791423797607422, -5.7220458984375e-06, -0.023974748328328133, 0.0, -0.1399669647216797, -0.000274658203125, -2.6702880859375e-05, -0.0002117156982421875, -6.4849853515625e-05, -1.9073486328125e-06, -0.043066978454589844, -2.09808349609375e-05, -0.0004634857177734375, -5.53131103515625e-05, -3.814697265625e-06, -1.9073486328125e-06, -8.20159912109375e-05, 0.0, -0.0017337799072265625, -1.0728830375228426e-06, -0.005598306655883789, -1.9073486328125e-06, -0.00902557373046875, -0.0014553070068359375, 0.0, -0.4455299377441406, -1.9073486328125e-06, -4.9591064453125e-05, -1.71661376953125e-05, -5.7220458984375e-06, -1.33514404296875e-05, -1.9073486328125e-06, 0.0, -0.00030994415283203125, 0.0, -0.01738739013671875, 0.0, -0.06136512756347656, 0.0, -0.0008716583251953125, -0.42929649353027344, -5.7220458984375e-06, -0.05123138427734375, 0.0, -0.033049583435058594, -1.9073486328125e-06, -3.4332275390625e-05, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -0.0005369186401367188, 0.0, -0.2966346740722656, -2.0265579223632812e-06, -0.0013161897659301758, 0.0, -3.814697265625e-06, -0.1390228271484375, -0.0001087188720703125, -0.22776709496974945, -0.00021898746490478516, -3.62396240234375e-05, -7.62939453125e-06, -0.0007448196411132812, 0.0, -0.010608673095703125, -1.52587890625e-05, -0.0005884170532226562, 0.0, -2.47955322265625e-05, -8.96453857421875e-05, 0.0, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -2.288818359375e-05, -0.000347137451171875, -2.0265579223632812e-06, -0.0006885528564453125, -0.0040130615234375, -0.0002079010009765625, -0.000457763671875, -9.1552734375e-05, -0.0004138946533203125, -9.5367431640625e-06, -4.00543212890625e-05, -3.814697265625e-06, -4.6133995056152344e-05, 0.0, -2.86102294921875e-05, -7.62939453125e-06, -3.814697265625e-06, -0.002132415771484375, -1.9073486328125e-06, -0.0004901885986328125, -1.9073486328125e-06, -0.00182342529296875, -2.1457672119140625e-06, -0.0005191564559936523, 0.0, -0.00047867605462670326, 0.0, -0.0003681182861328125, -0.007719993591308594, -7.62939453125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.024006230756640434, 0.0]}], "gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}
{"beams": [{"inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, battlecry=Battlecry(Give([Buff(Draw()), Buff(\n            card())]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"_type": "Module", "body": [{"name": "PowerWordShield", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "Draw"}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "card"}]}], "_type": "List"}]}, {"_type": "Template38", "hole0": "SelfSelector"}]}}], "args": [{"_type": "Str", "s": "Power Word Shield"}, {"_type": "Num", "n": 1}, {"attr": "PALADIN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "FREE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 1, "_type": "Template11", "hole0": 1}]}]}, "score": -3.9349811719897048, "choice_history": [55, 124, 221, 63, 103, "Power", "Word", "Shield", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Power", " ", "Word", " ", "Shield", "<EOS>", 39, 130, "1", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 216, 54, 197, "battlecry", "<EOS>", 14, 101, 19, 125, "Battlecry", "<EOS>", 209, 32, 101, 19, 125, "Give", "<EOS>", 208, 35, 120, 209, 32, 101, 19, 125, "Buff", "<EOS>", 208, 49, 174, "Draw", "<EOS>", 32, 101, 19, 125, "Buff", "<EOS>", 208, 49, 174, "card", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", 73, 146, "1", "<EOS>", "1", "<EOS>"], "score_history": [-0.000102996826171875, -0.0001163482666015625, -2.6702880859375e-05, -4.9591064453125e-05, -1.9073486328125e-06, -3.9695980376563966e-05, -0.10604555159807205, -0.002990236971527338, -0.0004698179545812309, -1.9073486328125e-06, -4.38690185546875e-05, -7.62939453125e-06, -0.007906675338745117, -0.00033295154571533203, -5.7220458984375e-06, -0.0001735687255859375, -0.0047607421875, -7.62939453125e-06, -3.981590270996094e-05, -3.027914499398321e-05, -4.00543212890625e-05, -4.1961669921875e-05, -3.0517578125e-05, -3.838527118205093e-05, -8.58306884765625e-05, -0.000244140625, -0.0001468658447265625, -0.000133514404296875, -1.9073486328125e-06, -0.004778861999511719, -1.52587890625e-05, 0.0, -3.814697265625e-06, 0.0, -1.3589840818895027e-05, 0.0, -1.3589859008789062e-05, -1.9073486328125e-06, -0.0005950927734375, -5.7220458984375e-06, -3.814697265625e-05, -0.0018736477941274643, -2.872943878173828e-05, -0.27692562341690063, -0.000301361083984375, -0.0005637375870719552, -1.9073486328125e-05, -0.000133514404296875, -9.5367431640625e-06, -1.3099052011966705e-06, -3.337860107421875e-05, 0.0, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.0001571178436279297, -2.384185791015625e-06, -0.02244579792022705, 0.0, 0.0, -1.52587890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.0008987188339233398, -1.9073486328125e-06, -0.5155048370361328, -3.576278118089249e-07, -0.029993057250976562, -0.08436965942382812, 0.0, -0.42754435539245605, -4.529942543740617e-06, -0.02686309814453125, -1.52587890625e-05, -0.0001316070556640625, -5.7220458984375e-06, -0.0013581514358520508, 0.0, -0.0021820068359375, -0.20682907104492188, -3.814697265625e-06, -2.86102294921875e-05, -2.288818359375e-05, -0.040341831743717194, -1.5497207641601562e-05, 0.0, -0.1288003921508789, -5.7220458984375e-06, -0.005802154541015625, -0.0734109878540039, -0.0006570816040039062, -1.71661376953125e-05, 0.0, -0.03801167011260986, -6.222691445145756e-05, -0.0001201629638671875, -0.0068721771240234375, -5.7220458984375e-06, -0.3757740259170532, -0.06768764555454254, -0.00026702880859375, -6.29425048828125e-05, -5.7220458984375e-06, 0.0, -0.22084951400756836, -1.5258699932019226e-05, -2.09808349609375e-05, -0.0003108978271484375, -3.814697265625e-06, -0.7236524820327759, -0.08402551710605621, -0.00080108642578125, -1.1444091796875e-05, -0.14925946295261383, -5.9127800341229886e-05, -4.768370445162873e-07, -0.22857189178466797, -9.5367431640625e-06, -7.283651211764663e-05, 0.0, -0.06170761585235596, 0.0]}], "gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n"}
{"beams": [{"inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "model_output": {"_type": "Module", "body": [{"name": "Sen'jinShieldmasta", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 4, "_type": "Template6", "hole2": "ALL", "hole0": "Sen'jin Shieldmasta"}, {"hole1": 5, "_type": "Template10", "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}, "hole0": 3}]}]}, "score": -0.24264086616040004, "choice_history": [55, 124, 221, 63, 103, "Sen'jin", "Shieldmasta", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 85, 178, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 72, 145, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 20, 126, "True", "<EOS>"], "score_history": [-3.814697265625e-06, -2.47955322265625e-05, -9.5367431640625e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.003272061934694648, -0.0019336113473400474, -0.004370625130832195, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.0265579223632812e-06, -6.699562072753906e-05, 0.0, -1.71661376953125e-05, -0.2225189208984375, -0.0021572113037109375, -0.0022166266571730375, -2.884864079533145e-05, -1.1563301086425781e-05, -1.9073486328125e-06, -0.00033640858600847423, -2.0265579223632812e-06, -0.0019445419311523438, 0.0, -0.00241851806640625, -4.57763671875e-05, -1.668914956098888e-05, -9.65590606938349e-06, -0.00017284009663853794, -5.8412379075889476e-06, -0.00048553943634033203, -8.4638240878121e-06, -0.0002765655517578125, -9.1552734375e-05, -0.0001621246337890625, 0.0]}], "gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}
{"beams": [{"inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(3), self)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "model_output": {"_type": "Module", "body": [{"name": "SinisterStrike", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 1, "_type": "Template6", "hole2": "PALADIN", "hole0": "Sinister Strike"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Expr", "value": {"_type": "Template22", "hole0": 3}}, {"_type": "Expr", "value": {"func": {"attr": "damage", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}}, "_type": "Call", "args": [{"_type": "Template33", "hole0": 3}, {"_type": "Name", "id": "self"}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -0.9917309400113936, "choice_history": [55, 124, 221, 63, 103, "Sinister", "Strike", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 85, 178, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 223, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 64, 106, 24, 160, "3", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 11, 94, 19, 125, "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "damage", "<EOS>", 209, 45, 169, "3", "<EOS>", 37, 125, "self", "<EOS>"], "score_history": [0.0, -7.62939453125e-06, -3.814697265625e-06, -2.288818359375e-05, -5.7220458984375e-06, -2.706014311115723e-05, -0.004304548725485802, -0.00016938301268965006, -3.24249267578125e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.00014781951904296875, -3.647804260253906e-05, -5.7220458984375e-06, -2.288818359375e-05, -0.0866231918334961, -0.003055572509765625, -0.0017414451576769352, -4.4226646423339844e-05, -1.0132789611816406e-05, 0.0, -1.20401346066501e-05, -1.9073468138230965e-06, -0.3927806615829468, 0.0, -0.10895824432373047, -1.9073486328125e-06, -2.4676293833181262e-05, 0.0, -5.14984130859375e-05, -3.24249267578125e-05, 0.0, -7.867813110351562e-06, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, 0.0, -2.6702880859375e-05, -2.503394853192731e-06, -0.1810741424560547, -7.62939453125e-06, -4.38690185546875e-05, -3.814697265625e-06, -3.814697265625e-06, -6.103515625e-05, 0.0, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, 0.0, -5.7220458984375e-06, -0.0001735687255859375, -2.09808349609375e-05, -1.1444091796875e-05, 0.0, -3.0517578125e-05, 0.0, -2.47955322265625e-05, -6.318092346191406e-06, -0.008193016052246094, -0.00042724609375, -0.022360801696777344, -0.00089263916015625, -0.09921729564666748, -0.0016924247611314058, -0.001567840576171875, -3.62396240234375e-05, -3.814697265625e-06, -1.9073486328125e-05, -1.52587890625e-05, 0.0, -0.0012865066528320312, -1.1444091796875e-05, -0.019906997680664062, -3.814697265625e-06, -0.0001468658447265625, -6.67572021484375e-05, -0.010158538818359375, -5.7220458984375e-06, -0.009452223777770996, -3.814697265625e-06, -0.0021209283731877804, -1.9073486328125e-06, -0.0026868581771850586, -2.47955322265625e-05, -1.71661376953125e-05, -0.0004367828369140625, -0.00022125244140625, -0.030957462266087532, -6.341934204101562e-05, -7.62939453125e-06, -1.9073486328125e-06, -2.47955322265625e-05, 0.0]}], "gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}
{"beams": [{"inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.PRIEST, CARD_RARITY\n            .RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(4, 3, deathrattle=Deathrattle(Equip(<UNK>Succubus()),\n            PlayerSelector()))\n", "model_output": {"_type": "Module", "body": [{"name": "Succubus", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "DEMON", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Succubus"}, {"_type": "Num", "n": 2}, {"attr": "PRIEST", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 3, "_type": "Template10", "hole2": "deathrattle", "hole3": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Equip"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "<UNK>Succubus"}]}, {"_type": "Template38", "hole0": "PlayerSelector"}]}, "hole0": 4}]}]}, "score": -4.655816869514581, "choice_history": [55, 124, 221, 63, 103, "Succubus", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Succubus", "<EOS>", 39, 130, "2", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 72, 145, "4", "<EOS>", "3", "<EOS>", "deathrattle", "<EOS>", 14, 101, 19, 125, "Deathrattle", "<EOS>", 209, 32, 101, 19, 125, "Equip", "<EOS>", 208, 49, 174, "<UNK>", "Succubus", "<EOS>", 49, 174, "Player", "Selector", "<EOS>"], "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -1.52587890625e-05, -1.33514404296875e-05, -0.0008950994815677404, -8.070407784543931e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.0001426934904884547, -3.123283022432588e-05, -3.814697265625e-06, -1.33514404296875e-05, -0.0001773834228515625, -7.62939453125e-06, -4.768371127283899e-06, -1.9073486328125e-06, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -3.5762335755862296e-05, -2.503394853192731e-06, -0.0007543563842773438, -0.001605987548828125, -1.71661376953125e-05, 0.0, -0.000171661376953125, -6.67572021484375e-05, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -8.702266313775908e-06, -3.814697265625e-06, 0.0, 0.0, -5.53131103515625e-05, -1.1444091796875e-05, -1.33514404296875e-05, -2.0265558760002023e-06, -5.14984130859375e-05, -5.7220458984375e-06, 0.0, -0.00038735722773708403, 0.0, -1.9073486328125e-06, 0.0, -3.4332275390625e-05, 0.0, -0.0003668069839477539, -0.0001549710868857801, -0.9488917589187622, -6.437291176553117e-06, -3.814697265625e-06, -1.52587890625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.00012218952178955078, -3.4213022445328534e-05, -0.004288434982299805, -4.017353057861328e-05, -0.15105247497558594, -0.000732421875, 0.0, -0.1488792896270752, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -0.000141143798828125, 0.0, -0.0001373291015625, 0.0, -0.06305694580078125, -1.9073486328125e-06, -0.03251075744628906, -5.53131103515625e-05, -0.0001121737077482976, -1.9073468138230965e-06, -0.00031392931123264134, -3.576278118089249e-07, -0.25129759311676025, -3.4570680327306036e-06, -0.00025177001953125, -5.7220458984375e-05, -5.14984130859375e-05, 0.0, -0.003131866455078125, -8.463837730232626e-06, -2.288818359375e-05, -0.3698873519897461, -0.001834869384765625, -7.62939453125e-05, -2.86102294921875e-05, -0.7236126661300659, -2.968310218420811e-05, -9.5367431640625e-06, -0.014410018920898438, 0.0, -0.23179000616073608, -1.6826730966567993, -0.02034994587302208, -0.000408172607421875, -1.9073486328125e-06, -0.00018525123596191406, -7.152551916078664e-06, 0.0]}], "gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7, charge=True)\n", "model_output": {"_type": "Module", "body": [{"name": "WarGolem", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 7, "_type": "Template4", "hole2": "ALL", "hole0": "War Golem"}, {"hole1": 7, "_type": "Template10", "hole2": "charge", "hole3": {"_type": "NameConstant", "value": true}, "hole0": 7}]}]}, "score": -1.2569794951446056, "choice_history": [55, 124, 221, 63, 103, "War", "Golem", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 83, 176, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", 72, 145, "7", "<EOS>", "7", "<EOS>", "charge", "<EOS>", 20, 126, "True", "<EOS>"], "score_history": [0.0, -5.7220458984375e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.024240585044026375, -6.806619057897478e-05, -3.635817120084539e-05, -4.1961669921875e-05, -1.1444091796875e-05, 0.0, -1.9550323486328125e-05, -0.00011277198791503906, -0.00020599365234375, -7.62939453125e-06, -0.5502042770385742, -0.0001430511474609375, -0.00016974026220850646, -1.3470649719238281e-05, -3.6597251892089844e-05, -5.340576171875e-05, -0.0005519256228581071, -0.0005635065026581287, -0.0008257625158876181, -1.33514404296875e-05, -0.26749706268310547, -0.0009412765502929688, -6.377496174536645e-05, -5.721893103327602e-05, -0.0002636591379996389, -1.5377907402580604e-05, -0.3901784420013428, -9.536738616588991e-07, -0.01964855194091797, -0.0008068084716796875, -0.000156402587890625, -7.62939453125e-06]}], "gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}
{"beams": [{"inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give(Buff(\n            <UNK>4())), SelfSelector()))])\n", "model_output": {"_type": "Module", "body": [{"name": "Acidmaw", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Acidmaw"}, {"_type": "Num", "n": 7}, {"attr": "HUNTER", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "LEGENDARY", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 2, "hole4": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "<UNK>4"}]}], "hole3": "Give", "hole5": "SelfSelector", "_type": "Template0", "hole2": "Damaged", "hole0": 4}]}]}, "score": -3.0696668595798755, "choice_history": [55, 124, 221, 63, 103, "Acidmaw", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Acidmaw", "<EOS>", 39, 130, "7", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 70, 140, "4", "<EOS>", "2", "<EOS>", "Damaged", "<EOS>", "Give", "<EOS>", 208, 32, 101, 19, 125, "Buff", "<EOS>", 208, 49, 174, "<UNK>", "4", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.82012939453125e-05, -1.9073486328125e-06, -0.05198530852794647, -0.0001775018172338605, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -4.52994936495088e-06, -0.00019049644470214844, -5.841255187988281e-06, -7.62939453125e-06, -0.00011444091796875, 0.0, -6.079673767089844e-06, 0.0, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -1.2755388524965383e-05, -1.6689286894688848e-06, -3.814697265625e-06, -0.2300577163696289, -1.9073486328125e-06, -1.9073486328125e-06, -0.0001239776611328125, -4.76837158203125e-05, 0.0, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, -4.29153169534402e-06, -2.3841855067985307e-07, -0.0008373260498046875, -1.52587890625e-05, -5.7220458984375e-06, -5.960462772236497e-07, -2.682209014892578e-05, -1.9073486328125e-05, -1.9073486328125e-06, -0.0021749110892415047, -1.5616398741258308e-05, -3.814697265625e-06, 0.0, -1.9073486328125e-05, -2.288818359375e-05, -7.867813110351562e-06, -5.841230449732393e-05, -0.4134817123413086, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -7.62939453125e-06, -2.2411135432776064e-05, -0.351662278175354, -2.3841855067985307e-07, -0.03125953674316406, -0.004230499267578125, 0.0, -4.398822784423828e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, 0.0, -0.0001621246337890625, 0.0, -0.07714653015136719, 0.0, -0.15801334381103516, -0.06447029113769531, -0.0001404283248120919, -7.378782902378589e-05, -3.600085619837046e-05, -2.8609820219571702e-05, -0.014925521798431873, -0.0006803821888752282, -0.004436492919921875, -6.556510470545618e-06, -5.7220458984375e-06, -0.08169364929199219, -1.71661376953125e-05, -7.62939453125e-06, 0.0, -0.0020505189895629883, -0.0003570312983356416, -0.0016040802001953125, -1.33514404296875e-05, -6.103515625e-05, -0.018051667138934135, -1.4466826915740967, -1.1920928244535389e-07, -0.11211717128753662, -2.3841855067985307e-07, 0.0]}], "gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n"}
{"beams": [{"inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2)\n", "model_output": {"_type": "Module", "body": [{"name": "Boar", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Boar"}, {"_type": "Num", "n": 3}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 2, "_type": "Template11", "hole0": 4}]}]}, "score": -1.2396729878683317, "choice_history": [55, 124, 221, 63, 103, "Boar", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 212, 40, 134, "Boar", "<EOS>", 39, 130, "3", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 38, 126, "False", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 73, 146, "4", "<EOS>", "2", "<EOS>"], "score_history": [-1.9073486328125e-06, -7.62939453125e-06, -7.2479248046875e-05, -3.62396240234375e-05, -1.1444091796875e-05, -2.6225699912174605e-05, -5.614756446448155e-05, -7.62939453125e-06, -0.0001277923583984375, 0.0, -3.814697265625e-06, -7.450580596923828e-05, -1.9073486328125e-06, -1.1444091796875e-05, -0.004169464111328125, -3.814697265625e-06, -1.3709068298339844e-05, -1.9073486328125e-06, -9.5367431640625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -4.374934724182822e-05, -1.5497195136049413e-06, -4.00543212890625e-05, -0.18158721923828125, -5.7220458984375e-06, -5.7220458984375e-06, -0.02519989013671875, -5.14984130859375e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -1.5616407836205326e-05, -1.9073486328125e-06, -1.537799835205078e-05, -1.1920928244535389e-07, -0.0001087188720703125, -9.34600830078125e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -5.006789251638111e-06, -7.62939453125e-06, 0.0, -0.0005010152235627174, -8.82148651726311e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -2.86102294921875e-05, -2.50339189733495e-06, -0.02007615566253662, 0.0, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -2.288818359375e-05, -0.00010823617776622996, -0.1459428071975708, -7.867813110351562e-06, -0.0001430511474609375, -2.86102294921875e-05, -2.586840491858311e-05, -4.172325134277344e-06, -4.1961669921875e-05, -5.7220458984375e-06, 0.0, -2.47955322265625e-05, -4.38690185546875e-05, -1.52587890625e-05, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.3842860460281372, -7.867813110351562e-05, -0.3414897918701172, -0.00011444091796875, -0.13440656661987305, -7.366890349658206e-05, -0.0003092288679908961, -3.576278118089249e-07]}], "gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"inferred_code": "class Anodized<UNK>CubCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(2, 2, auras=[Aura(ChangeAttack(1), SelfSelector()),\n            Choice(Attack(), Give(Attack()), SelfSelector())])\n", "model_output": {"_type": "Module", "body": [{"name": "Anodized<UNK>CubCub", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 2, "hole4": {"attr": "DEMON", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type", "_type": "Template3", "hole2": "PALADIN", "hole0": "Anodized Robo Cub"}, {"hole1": 2, "_type": "Template10", "hole2": "auras", "hole3": {"elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"_type": "Template35", "hole0": 1}, {"_type": "Template38", "hole0": "SelfSelector"}]}, {"func": {"_type": "Name", "id": "Choice"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "Attack"}, {"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "Attack"}]}, {"_type": "Template38", "hole0": "SelfSelector"}]}], "_type": "List"}, "hole0": 2}]}]}, "score": -5.8003536396301385, "choice_history": [55, 124, 221, 63, 103, "Anodized", "<UNK>", "Cub", "Cub", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 80, 165, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 72, 145, "2", "<EOS>", "2", "<EOS>", "auras", "<EOS>", 17, 120, 209, 32, 101, 19, 125, "Aura", "<EOS>", 209, 46, 171, "1", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", 32, 101, 19, 125, "Choice", "<EOS>", 210, 49, 174, "Attack", "<EOS>", 32, 101, 19, 125, "Give", "<EOS>", 208, 49, 174, "Attack", "<EOS>", 49, 174, "Self", "Selector", "<EOS>"], "score_history": [-1.9073486328125e-06, -3.0517578125e-05, -3.0517578125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.009658393450081348, -0.6135972738265991, -0.010688869282603264, -0.6666113138198853, -0.03173309192061424, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -9.536738616588991e-07, -0.00019681453704833984, -2.0265579223632812e-06, -1.9073486328125e-06, -0.030527114868164062, -0.00080108642578125, -0.00038104093982838094, -4.374980926513672e-05, -0.0014171600341796875, -3.62396240234375e-05, -0.0006315708160400391, -0.001922607421875, -0.0013570787850767374, 0.0, -0.46998560428619385, 0.0, -0.04162406921386719, -1.561634780955501e-05, -1.52587890625e-05, 0.0, -7.62939453125e-06, 0.0, -1.1444091796875e-05, 0.0, -0.4008808135986328, -2.1457672119140625e-06, -0.05648040771484375, -9.5367431640625e-06, -4.696736141340807e-05, -4.887569048150908e-06, -0.00023244813201017678, -8.344646857949556e-07, -0.015986084938049316, -1.1801687833212782e-05, -0.00262451171875, -4.1961669921875e-05, -0.07015037536621094, -3.814697265625e-06, -3.814697265625e-06, -0.00051116943359375, -3.814697265625e-06, -0.013410806655883789, -5.960462772236497e-07, -0.0001735687255859375, -0.03440380096435547, -0.00070953369140625, -0.04738032817840576, -5.2928924560546875e-05, -0.5086898803710938, -1.9073486328125e-06, -0.3554343581199646, -2.9802242352161556e-05, -1.1920928244535389e-07, -7.62939453125e-06, -1.1444091796875e-05, -7.62939453125e-06, 0.0, -0.5078351497650146, -0.00015866756439208984, -0.09580230712890625, -0.000339508056640625, -2.09808349609375e-05, -0.008228691294789314, -0.02829575352370739, -0.034743309020996094, -0.0003032684326171875, -1.1444091796875e-05, 0.0, -0.42560768127441406, -0.0026743412017822266, -5.7220458984375e-06, -0.23291015625, -7.62939453125e-06, -0.20619165897369385, -0.12096120417118073, -0.00022125244140625, -1.9073486328125e-06, -0.7462427020072937, -0.0010703300358727574, -1.1920922133867862e-06]}], "gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}
{"beams": [{"inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        game.check_delayed()\n", "model_output": {"_type": "Module", "body": [{"name": "BurrowingMine", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "args": [{"_type": "Str", "s": "Burrowing Mine"}, {"_type": "Num", "n": 0}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Expr", "value": {"func": {"attr": "die", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"_type": "Name", "id": "self"}]}}, {"_type": "Expr", "value": {"func": {"attr": "check_delayed", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}, "_type": "Call"}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -2.5993863507393797, "choice_history": [55, 124, 221, 63, 103, "Burrowing", "Mine", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Burrowing", " ", "Mine", "<EOS>", 39, 130, "0", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 54, 197, "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 223, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 208, 37, 125, "self", "<EOS>", 64, 106, 14, 99, 11, 94, 19, 125, "game", "<EOS>", "check_delayed", "<EOS>"], "score_history": [0.0, 0.0, -1.9073486328125e-06, -5.91278076171875e-05, -3.814697265625e-06, -9.297892393078655e-05, -0.0015279296785593033, -6.71127054374665e-05, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.00011980532144661993, -4.0531158447265625e-06, 0.0, -2.86102294921875e-05, -0.11781787872314453, -1.9073486328125e-06, -8.463837730232626e-06, -2.1457672119140625e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -4.005379742011428e-05, -1.9073486328125e-06, -0.0002117156982421875, -3.814697265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.002429962158203125, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.218649908376392e-06, -7.62939453125e-06, -3.826618194580078e-05, 0.0, -0.0015239715576171875, -2.86102294921875e-05, -4.76837158203125e-05, -2.622600959512056e-06, -2.872943878173828e-05, -4.12456392950844e-05, -5.7220458984375e-06, -6.866455078125e-05, 0.0, -1.3112934539094567e-05, -2.3841855067985307e-07, -7.62939453125e-06, -2.6702880859375e-05, -9.5367431640625e-06, 0.0, -2.1457672119140625e-06, -0.00022518634796142578, -0.5887784957885742, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -1.71661376953125e-05, 0.0, -3.814697265625e-06, -9.536738616588991e-07, -0.09362411499023438, -1.9073486328125e-06, -0.0001010894775390625, -4.9591064453125e-05, 0.0, -0.0004024505615234375, -2.0265579223632812e-06, -0.000301361083984375, -7.62939453125e-06, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-05, -1.71661376953125e-05, -7.62939453125e-05, 0.0, -0.5670309066772461, -3.4332275390625e-05, -0.0063953399658203125, -3.814697265625e-06, -1.919269561767578e-05, 0.0, -0.000415802001953125, -2.6702880859375e-05, -3.814697265625e-06, -1.0848039892152883e-05, -2.3841855067985307e-07, -1.9073486328125e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -1.537799835205078e-05, -6.079673767089844e-06, -0.017256736755371094, -2.47955322265625e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.62939453125e-06, 0.0, -3.933906555175781e-06, 0.0, -4.398822784423828e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.0002040863037109375, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, -6.79492904964718e-06, -0.27027034759521484, -5.7220458984375e-06, -0.009914398193359375, -0.004009246826171875, -3.814697265625e-06, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -0.00042724609375, 0.0, -0.0013905763626098633, -1.1920928244535389e-07, -1.2993798009119928e-05, -1.9073486328125e-06, -0.05623340606689453, 0.0, -0.0005855560302734375, -0.021872520446777344, 0.0, -0.009306907653808594, 0.0, -0.02136993408203125, -3.814697265625e-06, -0.015951156616210938, -0.06291961669921875, -8.392333984375e-05, -1.52587890625e-05, -0.5334024429321289, 0.0, -0.16837024688720703, 0.0, -0.023493170738220215, -5.7220458984375e-06]}], "gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n"}
{"beams": [{"inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n", "model_output": {"_type": "Module", "body": [{"name": "Crackle", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"attr": "find_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}}, {"_type": "Template39", "hole0": 2}], "args": [{"_type": "Str", "s": "Crackle"}, {"_type": "Num", "n": 2}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": "damage", "_type": "Template1", "hole2": [{"_type": "Template33", "hole0": 6}, {"_type": "Name", "id": "self"}], "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}]}, "score": -0.8292837259379837, "choice_history": [55, 124, 221, 63, 103, "Crackle", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Crackle", "<EOS>", 39, 130, "2", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 217, 54, 197, "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 53, 175, "2", "<EOS>", 71, 144, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 209, 45, 169, "6", "<EOS>", 37, 125, "self", "<EOS>"], "score_history": [0.0, -1.1444091796875e-05, -1.71661376953125e-05, -9.5367431640625e-06, -0.001468658447265625, -1.7523612768854946e-05, -0.00010132788884220645, -1.52587890625e-05, -4.00543212890625e-05, -2.288818359375e-05, -0.0007480382919311523, -0.00012791156768798828, -1.9073486328125e-06, -0.0350494384765625, -0.013940811157226562, -2.86102294921875e-05, -3.7073656130814925e-05, 0.0, 0.0, -1.71661376953125e-05, -7.62939453125e-06, -0.0001628398895263672, -1.9073486328125e-06, -4.9591064453125e-05, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -7.43865966796875e-05, -5.53131103515625e-05, 0.0, 0.0, -7.62939453125e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -4.017353057861328e-05, 0.0, -0.000331878662109375, -0.0002288818359375, -3.814697265625e-06, -0.00012624263763427734, -0.0005588531494140625, -1.1444091796875e-05, -5.7220458984375e-06, -2.622600959512056e-06, 0.0, -7.62939453125e-06, -2.09808349609375e-05, -3.814697265625e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.006146430969238281, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.01160430908203125, -1.5020368664409034e-05, -0.00026702880859375, -0.019819259643554688, -1.9073486328125e-06, -8.0108642578125e-05, 0.0, -8.96453857421875e-05, -2.288818359375e-05, -2.86102294921875e-05, -1.1444091796875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0002498626708984375, -7.62939453125e-06, -6.4849853515625e-05, -1.9073486328125e-06, -0.0037882328033447266, -4.57763671875e-05, -0.02190399169921875, -0.0023717880249023438, -0.001059484900906682, -1.764288026606664e-05, -0.000701904296875, -0.00012969970703125, -1.71661376953125e-05, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -4.38690185546875e-05, 0.0, -0.0012576580047607422, -3.814697265625e-06, -1.9073486328125e-06, -0.0002651214599609375, -2.47955322265625e-05, -0.7057090401649475, -3.147124880342744e-05, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0]}], "gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n"}
{"beams": [{"inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(1()))\n", "model_output": {"_type": "Module", "body": [{"name": "EmergencyCoolant", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "args": [{"_type": "Str", "s": "Emergency Coolant"}, {"_type": "Num", "n": 1}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": "add_buff", "_type": "Template1", "hole2": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "1"}]}], "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}]}, "score": -1.2886326063098394, "choice_history": [55, 124, 221, 63, 103, "Emergency", "Coolant", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 212, 40, 134, "Emergency", " ", "Coolant", "<EOS>", 39, 130, "1", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 38, 126, "False", "<EOS>", 216, 54, 197, "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 71, 144, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 208, 32, 101, 19, 125, "Buff", "<EOS>", 208, 49, 174, "1", "<EOS>"], "score_history": [-2.86102294921875e-05, -8.392333984375e-05, -4.76837158203125e-05, -2.288818359375e-05, -7.62939453125e-06, -4.541770613286644e-05, -0.0028217521030455828, -0.0011073199566453695, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -2.5868377633742057e-05, -2.2530541173182428e-05, 0.0, -7.82012939453125e-05, -0.0006771087646484375, -0.0001049041748046875, -6.031976590747945e-05, -2.622604142743512e-06, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.23185556428507e-05, 0.0, -8.96453857421875e-05, -0.0001926422119140625, -4.76837158203125e-05, -3.814697265625e-06, -0.0045299530029296875, -5.7220458984375e-06, 0.0, -3.814697265625e-06, 0.0, -9.417505680175964e-06, -2.0265579223632812e-06, -1.9073486328125e-06, 0.0, -0.0048465728759765625, -0.0003337860107421875, -0.004160881042480469, -0.00017462669347878546, -2.491474151611328e-05, -8.344639354618266e-06, 0.0, -5.91278076171875e-05, 0.0, -1.954946492332965e-05, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -0.00878596305847168, 0.0, -3.0517578125e-05, -1.52587890625e-05, -1.52587890625e-05, -2.09808349609375e-05, -0.00015461444854736328, -4.887569048150908e-06, -0.00042724609375, -3.814697265625e-06, -5.53131103515625e-05, -0.0012416839599609375, -0.0005269050598144531, -7.62939453125e-06, -5.340576171875e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0005664825439453125, 0.0, -6.4849853515625e-05, -5.7220458984375e-06, -2.288818359375e-05, 0.0, -9.5367431640625e-05, -1.9073486328125e-06, -4.76837158203125e-05, -1.33514404296875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.0014516115188598633, -4.00543212890625e-05, -5.53131103515625e-05, -0.022481918334960938, -1.9073486328125e-06, -3.814697265625e-06, -0.00020599365234375, 0.0, -0.0001163482666015625, -2.3841855067985307e-07, -1.430511474609375e-05, -1.1920922133867862e-06, -0.9279741048812866, -1.1920928244535389e-07, -1.9073486328125e-05, -0.00533294677734375, -0.0001201629638671875, -3.814697265625e-05, 0.0, -0.002181410789489746, -0.0006957054138183594, -0.00055694580078125, -4.76837158203125e-05, 0.0, -0.29528695344924927, -4.2676241719163954e-05]}], "gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n"}
{"beams": [{"inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "model_output": {"_type": "Module", "body": [{"name": "FlyingMachine", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 3, "hole4": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type", "_type": "Template3", "hole2": "ALL", "hole0": "Flying Machine"}, {"hole1": 4, "_type": "Template10", "hole2": "windfury", "hole3": {"_type": "NameConstant", "value": true}, "hole0": 1}]}]}, "score": -0.35271335744593557, "choice_history": [55, 124, 221, 63, 103, "Flying", "Machine", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 80, 165, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 72, 145, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 20, 126, "True", "<EOS>"], "score_history": [-2.09808349609375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -1.71661376953125e-05, -7.62939453125e-06, -7.354942499659956e-05, -2.3483953555114567e-05, -0.00045944712474010885, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -2.0265579223632812e-06, -4.4226646423339844e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.0005016326904296875, -0.0001087188720703125, -2.7894584491150454e-05, -1.442432312614983e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.0003361701965332031, 0.0, -5.924701690673828e-05, 0.0, -1.1324880688334815e-05, -9.536735888104886e-06, -5.7220458984375e-06, 0.0, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, 0.0, -0.019957542419433594, -1.1682508556987159e-05, -0.24040985107421875, -1.1444091796875e-05, -3.457056436673156e-06, -2.3841855067985307e-07, -7.593615737278014e-05, 0.0, -0.08997321128845215, -1.311301275563892e-06, -0.0004215240478515625, -2.47955322265625e-05, -4.76837158203125e-05, -1.9073486328125e-06]}], "gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}
{"beams": [{"inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give(ChangeHealth(1)), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "model_output": {"_type": "Module", "body": [{"name": "GoblinAuto-Barber", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "PIRATE", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"hole1": "ChangeHealth", "_type": "Template32", "hole2": 1, "hole0": "Give"}, {"_type": "Template38", "hole0": "SelfSelector"}]}}], "args": [{"_type": "Str", "s": "Goblin Auto-Barber"}, {"_type": "Num", "n": 2}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 2, "_type": "Template11", "hole0": 3}]}]}, "score": -2.881390302101501, "choice_history": [55, 124, 221, 63, 103, "Goblin", "Auto-Barber", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Goblin", " ", "Auto-Barber", "<EOS>", 39, 130, "2", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 217, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 54, 197, "battlecry", "<EOS>", 14, 101, 19, 125, "Battlecry", "<EOS>", 209, 44, 168, "Give", "<EOS>", "Change", "Health", "<EOS>", "1", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", 73, 146, "3", "<EOS>", "2", "<EOS>"], "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -4.76837158203125e-05, 0.0, -0.0001991788885788992, -9.298280929215252e-06, -0.0003121621848549694, -3.814697265625e-06, -0.0001049041748046875, 0.0, -5.960462772236497e-07, -2.4557111828471534e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.09894943237304688, -6.866455078125e-05, -2.872943878173828e-05, -9.536738616588991e-07, -1.1444091796875e-05, -0.000453948974609375, -1.9073486328125e-06, -0.00017189979553222656, -1.9073486328125e-06, -1.52587890625e-05, -2.09808349609375e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.000377655029296875, -3.4332275390625e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.561634780955501e-05, -1.3470649719238281e-05, -4.0531158447265625e-06, 0.0, -0.0003185272216796875, -8.7738037109375e-05, -5.7220458984375e-06, -2.9682672902708873e-05, -0.00015044177416712046, -0.00010466572712175548, -1.52587890625e-05, -1.71661376953125e-05, 0.0, -0.0021677399054169655, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -9.5367431640625e-06, 0.0, -6.175041198730469e-05, -1.0847986231965479e-05, -0.521338939666748, 0.0, 0.0, -3.814697265625e-06, -9.5367431640625e-06, 0.0, -2.8848648071289062e-05, -0.0002349343558307737, -0.6772719621658325, -1.9431114196777344e-05, -0.005565643310546875, -0.000316619873046875, -1.9073486328125e-06, -0.0001125335693359375, -4.768312646774575e-05, -5.7220458984375e-06, 0.0, -1.52587890625e-05, 0.0, -2.288818359375e-05, -1.1920928244535389e-07, -0.24206161499023438, -9.536738616588991e-07, -1.9073486328125e-05, 0.0, -0.00041961669921875, -1.1920928244535389e-07, -1.9073486328125e-05, -4.9591064453125e-05, -2.86102294921875e-05, 0.0, -0.0015527009963989258, -4.2676016164477915e-05, -7.62939453125e-06, -0.04339885711669922, -0.000621795654296875, -0.0002082562423311174, -0.00022327899932861328, -0.004921555519104004, -0.35021793842315674, -1.9073486328125e-06, -0.055833131074905396, -7.62939453125e-06, -0.6319084167480469, 0.0, -0.19552600383758545, -0.0007165668648667634, 0.0, -0.04466438293457031, -2.6702880859375e-05, -5.960428097750992e-07, -2.0265579223632812e-06, -1.1920858014491387e-05, -5.960462772236497e-07]}], "gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}
{"beams": [{"inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "model_output": {"_type": "Module", "body": [{"name": "IronSensei", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Iron Sensei"}, {"_type": "Num", "n": 3}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 2, "hole4": [{"_type": "Template35", "hole0": 1}], "hole3": "Give", "hole5": "SelfSelector", "_type": "Template0", "hole2": "TurnEnded", "hole0": 2}]}]}, "score": -2.376228941794487, "choice_history": [55, 124, 221, 63, 103, "Iron", "Sensei", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Iron", " ", "Sensei", "<EOS>", 39, 130, "3", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 70, 140, "2", "<EOS>", "2", "<EOS>", "Turn", "Ended", "<EOS>", "Give", "<EOS>", 208, 46, 171, "1", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [0.0, -5.7220458984375e-06, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -0.008251858875155449, -2.8729025871143676e-05, -0.014299352653324604, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -2.3841855067985307e-07, -3.445148468017578e-05, 0.0, -7.62939453125e-06, -0.051100730895996094, 0.0, -8.82148651726311e-06, 0.0, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -1.3589859008789062e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.5082511901855469, -7.62939453125e-06, 0.0, -0.00048828125, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, 0.0, -2.2649765014648438e-06, -3.0517578125e-05, -4.792213439941406e-05, 0.0, -8.96453857421875e-05, -1.52587890625e-05, -1.33514404296875e-05, -1.1682462172757369e-05, -4.684855593950488e-05, -2.5510777049930766e-05, -4.208087921142578e-05, -1.9073486328125e-06, 0.0, -9.691187005955726e-05, -3.576278118089249e-07, -1.9073486328125e-06, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -6.711483001708984e-05, -0.03057420253753662, 0.0, -3.814697265625e-06, -3.4332275390625e-05, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -7.986990567587782e-06, -0.003561258316040039, -1.1920928244535389e-07, -4.1961669921875e-05, -0.0001468658447265625, 0.0, -0.0001081228256225586, -1.9073486328125e-05, -2.47955322265625e-05, 0.0, -0.0005054473876953125, 0.0, -9.918212890625e-05, 0.0, -0.07178020477294922, -3.933906555175781e-06, -0.5561304092407227, -0.178863525390625, -3.373519939486869e-05, -1.1324817933200393e-05, -3.659556750790216e-05, -1.2755313036905136e-05, -0.29590392112731934, -0.09756743907928467, -1.9073486328125e-06, -0.002460350515320897, -7.176397775765508e-05, -0.0014848709106445312, -0.5153226852416992, -0.003936767578125, -0.004038095474243164, 0.0, -0.030320286750793457, -3.814697265625e-06, 0.0]}], "gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n"}
{"beams": [{"inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(Immune(), MinionSelector(IsType(\n            MINION_TYPE.BEAST))), Effect(Attack(), MinionSelector(IsType(\n            MINION_TYPE.BEAST)))])\n", "model_output": {"_type": "Module", "body": [{"name": "Mal'Ganis", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "DEMON", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Mal'Ganis"}, {"_type": "Num", "n": 9}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 7, "_type": "Template10", "hole2": "auras", "hole3": {"elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "Immune"}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}]}, {"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "Attack"}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}]}], "_type": "List"}, "hole0": 9}]}]}, "score": -4.930064883360821, "choice_history": [55, 124, 221, 63, 103, "Mal'Ganis", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Mal'Ganis", "<EOS>", 39, 130, "9", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 72, 145, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 17, 120, 209, 32, 101, 19, 125, "Aura", "<EOS>", 209, 49, 174, "Immune", "<EOS>", 32, 101, 19, 125, "Minion", "Selector", "<EOS>", 208, 32, 101, 19, 125, "Is", "Type", "<EOS>", 208, 29, 94, 19, 125, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 32, 101, 19, 125, "Effect", "<EOS>", 209, 49, 174, "Attack", "<EOS>", 32, 101, 19, 125, "Minion", "Selector", "<EOS>", 208, 32, 101, 19, 125, "Is", "Type", "<EOS>", 208, 29, 94, 19, 125, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>"], "score_history": [0.0, 0.0, -9.5367431640625e-06, -2.09808349609375e-05, -5.7220458984375e-06, -0.00030048430198803544, -0.012969952076673508, -1.33514404296875e-05, -5.7220458984375e-06, 0.0, -2.205366217822302e-05, -1.6927657270571217e-05, -3.814697265625e-06, -5.7220458984375e-06, -0.0007266998291015625, -1.9073486328125e-06, -3.8146954466355965e-06, -1.1920928244535389e-07, 0.0, -3.814697265625e-06, 0.0, -0.0004364508204162121, -9.059865078597795e-06, -2.09808349609375e-05, -0.001178741455078125, -3.814697265625e-06, -2.09808349609375e-05, -0.041545867919921875, -1.71661376953125e-05, 0.0, 0.0, 0.0, -1.4305104514278355e-06, -1.1444091796875e-05, -2.741813204920618e-06, 0.0, -0.001628875732421875, -9.72747802734375e-05, -7.62939453125e-06, -1.1920928244535389e-07, -8.225440979003906e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.0039691925048828125, -8.344646857949556e-07, 0.0, 0.0, -1.71661376953125e-05, 0.0, -5.841253368998878e-06, -5.149829667061567e-05, -0.23606407642364502, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.09808349609375e-05, -5.7220458984375e-06, -2.1457672119140625e-06, -0.000554766389541328, -0.5475360155105591, -3.576278118089249e-07, -0.000102996826171875, -0.000232696533203125, 0.0, -3.24249267578125e-05, -1.3709068298339844e-05, -1.9073486328125e-06, 0.0, -7.62939453125e-06, 0.0, -4.57763671875e-05, -1.1920928244535389e-07, -0.08240604400634766, -7.62939453125e-06, -0.18377399444580078, -1.1444091796875e-05, -2.086162203340791e-05, -8.22540732769994e-06, -0.06899595260620117, -2.47952248173533e-05, -0.49024081230163574, -2.384185791015625e-06, -0.00502777099609375, -9.918212890625e-05, -0.37975406646728516, 0.0, -7.43865966796875e-05, -0.0027561187744140625, 0.0, -0.07620358467102051, -1.2397744285408407e-05, -7.2479248046875e-05, -0.07558822631835938, -7.62939453125e-06, -0.3662070333957672, -0.00027990262606181204, -0.12508010864257812, -0.13770675659179688, -3.814697265625e-06, 0.0, -0.0011985301971435547, -0.000576019287109375, 0.0, -0.0033512115478515625, -0.5546903610229492, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.012706518173217773, -0.0005518197431229055, -1.7881377516459906e-06, -4.9591064453125e-05, -5.7220458984375e-06, 0.0, -5.91278076171875e-05, 0.0, -0.0012111663818359375, -2.741813204920618e-06, -0.01863574981689453, -3.445148468017578e-05, -0.02834320068359375, -4.57763671875e-05, -1.33514404296875e-05, 0.0, -0.45700228214263916, -1.5854802768444642e-05, -0.00096893310546875, -0.0027713775634765625, -9.918212890625e-05, -0.07372606545686722, -0.05786550045013428, -0.00695037841796875, -1.1444091796875e-05, -3.0517578125e-05, 0.0, -0.25919175148010254, -5.7220458984375e-06, 0.0, -0.043895721435546875, -0.5204200744628906, 0.0, -1.1444091796875e-05, 0.0, -0.008544325828552246, -0.00022649765014648438, -4.768370445162873e-07, -0.0001468658447265625, -1.9073486328125e-06, 0.0, -2.86102294921875e-05, 0.0, -0.000308990478515625, -5.960462772236497e-07, -0.03416919708251953, -3.063678741455078e-05]}], "gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n"}
{"beams": [{"inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(1),\n            HeroSelector()))])\n", "model_output": {"_type": "Module", "body": [{"name": "MistressOfPain", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "DEMON", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Mistress of Pain"}, {"_type": "Num", "n": 2}, {"attr": "WARLOCK", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 4, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Heal", "hole5": "HeroSelector", "_type": "Template0", "hole2": "Damaged", "hole0": 1}]}]}, "score": -2.346666276623857, "choice_history": [55, 124, 221, 63, 103, "Mistress", "Of", "Pain", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Mistress", " ", "of", " ", "Pain", "<EOS>", 39, 130, "2", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 70, 140, "1", "<EOS>", "4", "<EOS>", "Damaged", "<EOS>", "Heal", "<EOS>", 208, 39, 130, "1", "<EOS>", "Hero", "Selector", "<EOS>"], "score_history": [-1.71661376953125e-05, -7.62939453125e-06, -2.47955322265625e-05, -7.05718994140625e-05, -7.62939453125e-05, -0.00020966715237591416, -0.00048648176016286016, -0.06820546090602875, -0.014715551398694515, -1.9073486328125e-06, -1.71661376953125e-05, -7.62939453125e-05, -0.00018835066293831915, -0.0015604496002197266, -3.814697265625e-06, -9.72747802734375e-05, -0.00089263916015625, -1.9073486328125e-06, -7.521864608861506e-05, -0.00020039081573486328, 0.0, -0.00019073486328125, -9.5367431640625e-06, -5.793463424197398e-05, -2.539156957936939e-05, -0.000186920166015625, -3.24249267578125e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0073986053466796875, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, 0.0, -3.8385387597372755e-05, -1.9073486328125e-06, -7.867813110351562e-06, 0.0, -0.000865936279296875, -8.7738037109375e-05, -2.09808349609375e-05, -1.3470558769768104e-05, -4.315376281738281e-05, -9.632048022467643e-05, -0.0003597736358642578, -0.001700282096862793, -1.9073486328125e-06, -1.9073486328125e-06, -4.00543212890625e-05, -0.0007525263354182243, 0.0, -1.9073486328125e-06, -0.000102996826171875, -2.288818359375e-05, 0.0, -1.8596643712953664e-05, -3.814697265625e-05, -0.6452857255935669, -7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.800060272216797e-05, -1.1920922133867862e-06, -0.0019265413284301758, -9.918212890625e-05, -4.1961669921875e-05, -0.00214385986328125, 0.0, -0.07457351684570312, -2.1457672119140625e-06, -6.4849853515625e-05, -5.7220458984375e-06, -0.0003566741943359375, 0.0, -0.036808013916015625, 0.0, -0.3019418716430664, 0.0, -0.01686382293701172, -0.01891613006591797, -0.0001093083992600441, -6.9141146923357155e-06, -0.0003712173202075064, -1.07287787614041e-05, -0.041096314787864685, -0.0033965110778808594, -0.3306262493133545, -0.00037139473715797067, -2.09808349609375e-05, -0.4536314010620117, -1.1444091796875e-05, -0.16582739353179932, -1.1920928244535389e-07, -0.15302300453186035, -1.71661376953125e-05, 0.0]}], "gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n"}
{"beams": [{"inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2)\n", "model_output": {"_type": "Module", "body": [{"name": "Powermace", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "body": [{"hole1": 3, "_type": "Template5", "hole2": "HUNTER", "hole0": "Powermace"}, {"name": "create_weapon", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Weapon"}, "_type": "Call", "args": [{"_type": "Num", "n": 3}, {"_type": "Num", "n": 2}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}]}]}, "score": -1.3534870744053293, "choice_history": [55, 124, 221, 63, 103, "Powermace", "<EOS>", 208, 37, 125, "Weapon", "Card", "<EOS>", 222, 84, 177, "Powermace", "<EOS>", "3", "<EOS>", "HUNTER", "<EOS>", 66, 108, "create_weapon", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 221, 69, 132, 14, 101, 19, 125, "Weapon", "<EOS>", 209, 39, 130, "3", "<EOS>", 39, 130, "2", "<EOS>"], "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -8.7738037109375e-05, -5.7220458984375e-06, -0.019994376227259636, -0.002410292625427246, -5.7220458984375e-06, -3.814697265625e-05, -3.814697265625e-06, -0.0005130767822265625, -2.09808349609375e-05, -9.5367431640625e-06, -4.76837158203125e-05, -0.3454160690307617, -0.000213623046875, -0.0033758780919015408, -4.982948303222656e-05, -2.5665156499599107e-05, -1.1920928244535389e-07, -0.9187853336334229, -1.9073486328125e-06, -0.000118255615234375, 0.0, -0.024619102478027344, 0.0, -4.9591064453125e-05, -0.0024576187133789062, -1.9073486328125e-06, -3.457069396972656e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -1.1920922133867862e-06, -4.57763671875e-05, -0.000537872314453125, -6.103515625e-05, -0.000270843505859375, -0.00287628173828125, -2.288818359375e-05, 0.0, -0.00014829615247435868, -0.0007753372192382812, -4.38690185546875e-05, -0.000408172607421875, -5.7220458984375e-06, -0.014597322791814804, -3.576278118089249e-07, -5.7220458984375e-06, 0.0, -0.01537312101572752, 0.0]}], "gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n"}
{"beams": [{"inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)),\n            Buff(2())]), MinionSelector(IsType(MINION_TYPE.MECH), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "model_output": {"_type": "Module", "body": [{"name": "ScrewjankClunker", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"elts": [{"_type": "Template27", "hole0": 2}, {"_type": "Template28", "hole0": 2}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "2"}]}], "_type": "List"}]}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "keywords": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template38", "hole0": "UserPicker"}}], "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}]}}], "args": [{"_type": "Str", "s": "Screwjank Clunker"}, {"_type": "Num", "n": 4}, {"attr": "ROGUE", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 5, "_type": "Template11", "hole0": 2}]}]}, "score": -3.288465991694224, "choice_history": [55, 124, 221, 63, 103, "Screwjank", "Clunker", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Screwjank", " ", "Clunker", "<EOS>", 39, 130, "4", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 217, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 54, 197, "battlecry", "<EOS>", 14, 101, 19, 125, "Battlecry", "<EOS>", 209, 32, 101, 19, 125, "Give", "<EOS>", 208, 35, 120, 210, 42, 162, "2", "<EOS>", 43, 163, "2", "<EOS>", 32, 101, 19, 125, "Buff", "<EOS>", 208, 49, 174, "2", "<EOS>", 32, 102, 19, 125, "Minion", "Selector", "<EOS>", 208, 32, 101, 19, 125, "Is", "Type", "<EOS>", 208, 29, 94, 19, 125, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 216, 54, 197, "picker", "<EOS>", 26, 174, "User", "Picker", "<EOS>", 73, 146, "2", "<EOS>", "5", "<EOS>"], "score_history": [-0.00011444091796875, -2.09808349609375e-05, -5.91278076171875e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.033944953233003616, -0.000287849543383345, -0.019774548709392548, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -4.529942543740617e-06, -0.00018155574798583984, -8.225440979003906e-06, -0.000392913818359375, -0.0001888275146484375, -2.86102294921875e-05, -3.933906555175781e-06, 0.0, -7.62939453125e-06, -0.000362396240234375, -3.814697265625e-06, -9.298322765971534e-06, -1.1920928244535389e-07, -1.9073486328125e-05, -0.0009241104125976562, -1.52587890625e-05, 0.0, -0.0001430511474609375, -1.33514404296875e-05, 0.0, -9.5367431640625e-06, -1.71661376953125e-05, -6.198883056640625e-06, -9.5367431640625e-06, -1.9073486328125e-05, 0.0, -5.14984130859375e-05, -0.00011444091796875, -2.288818359375e-05, -1.4185829968482722e-05, -2.110004425048828e-05, -3.266333806095645e-05, -1.33514404296875e-05, -7.62939453125e-06, 0.0, -0.00022243140847422183, -2.2649765014648438e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.001199960708618164, -9.953974949894473e-05, -0.7100121974945068, 0.0, 0.0, 0.0, -7.62939453125e-06, 0.0, -0.000141143798828125, -1.597404116182588e-05, -0.0018388032913208008, 0.0, -0.0031871795654296875, -7.62939453125e-06, -1.9073486328125e-06, -0.0001380443572998047, -2.300739288330078e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.0001239776611328125, 0.0, -3.62396240234375e-05, 0.0, -0.18171310424804688, -7.62939453125e-06, -0.0001354217529296875, -1.9073486328125e-06, -0.0033807754516601562, 0.0, -0.00122833251953125, -0.0012645721435546875, -1.9073486328125e-06, 0.0, -0.000148773193359375, 0.0, -2.6702880859375e-05, -0.4452838897705078, -3.814697265625e-06, -4.57763671875e-05, -1.9073486328125e-06, -0.00038945613778196275, -0.0009508132934570312, -6.103515625e-05, -0.028341293334960938, -3.62396240234375e-05, -0.3347797393798828, -0.27412986755371094, -0.021256446838378906, -0.00082780746743083, -2.19344328797888e-05, -0.0051593780517578125, -8.0108642578125e-05, -0.00012052035890519619, -3.814697265625e-06, -0.019980430603027344, -0.0001373291015625, -1.52587890625e-05, -3.814697265625e-06, -0.03876197338104248, -0.00033128244103863835, -1.52587890625e-05, -0.0008029937744140625, -8.96453857421875e-05, -0.189383402466774, -0.0018953001126646996, -0.6532745361328125, -0.1323261260986328, -0.0006313323974609375, 0.0, -0.029011130332946777, -0.00128173828125, 0.0, -3.814697265625e-06, -0.00067138671875, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.01727759838104248, -0.0014164447784423828, -0.0005047321319580078, -1.9073486328125e-05, -3.814697265625e-06, -7.62939453125e-06, -2.86102294921875e-05, 0.0, -0.00041031837463378906, -1.71661376953125e-05, -0.03895676136016846, -1.9073486328125e-06, -0.000156402587890625, -2.288818359375e-05, -3.814697265625e-06, -0.07464814186096191, 0.0, -0.006378173828125, -6.67572021484375e-05, -0.00576472282409668, -0.0002053976058959961, 0.0, -0.0001163482666015625, -1.33514404296875e-05, -1.7881377516459906e-06, -1.1920928244535389e-07, -0.0003926203353330493, 0.0]}], "gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}
{"beams": [{"inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n", "model_output": {"_type": "Module", "body": [{"name": "<UNK>OldShredder", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 8, "hole4": {"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}, "hole3": "minion_type", "_type": "Template14", "hole2": "LEGENDARY", "hole0": "<UNK> Old Shredder"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 7, "_type": "Template10", "hole2": "deathrattle", "hole3": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"arg": "conditions", "_type": "keyword", "value": {"elts": [{"func": {"_type": "Name", "id": "ManaCost"}, "_type": "Call", "args": [{"_type": "Num", "n": 2}]}, {"_type": "Template38", "hole0": "IsMinion"}], "_type": "List"}}]}]}, {"_type": "Template38", "hole0": "PlayerSelector"}]}, "hole0": 5}]}]}, "score": -2.144259902478723, "choice_history": [55, 124, 221, 63, 103, "<UNK>", "Old", "Shredder", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 74, 153, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 72, 145, "5", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 14, 101, 19, 125, "Deathrattle", "<EOS>", 209, 32, 101, 19, 125, "Summon", "<EOS>", 208, 32, 100, 19, 125, "Card", "Query", "<EOS>", 216, 54, 197, "conditions", "<EOS>", 17, 120, 209, 32, 101, 19, 125, "Mana", "Cost", "<EOS>", 208, 39, 130, "2", "<EOS>", 49, 174, "Is", "Minion", "<EOS>", 49, 174, "Player", "Selector", "<EOS>"], "score_history": [-5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.814697265625e-06, -0.012417654506862164, -0.3404739797115326, -0.2179020345211029, -0.00283442041836679, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -6.079673767089844e-06, -0.00022327899932861328, -3.814697265625e-06, -0.0001888275146484375, -0.0027828216552734375, -5.7220458984375e-06, -0.0001239776611328125, 0.0, -4.76837158203125e-05, -7.62939453125e-06, 0.0, -1.1682508556987159e-05, 0.0, -3.24249267578125e-05, -0.5734071731567383, -0.0004405975341796875, -0.2676597535610199, -0.00047981739044189453, -0.0012777127558365464, -0.11242294311523438, -0.0010571479797363281, -6.866455078125e-05, -0.002161144744604826, -5.125986263010418e-06, -0.0009763240814208984, 0.0, -0.001556992530822754, -1.728534698486328e-05, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0002307891845703125, 0.0, -0.016969680786132812, -7.62939453125e-06, -0.018115997314453125, -7.82012939453125e-05, -6.318092346191406e-06, -7.152555099310121e-07, -0.0002136010443791747, -2.3841855067985307e-07, -0.0007969141006469727, -8.34461570775602e-06, -1.1444091796875e-05, -0.00011444091796875, -1.71661376953125e-05, -3.814697265625e-06, -0.00016033649444580078, -2.3841855067985307e-07, -1.1444091796875e-05, -0.0010700225830078125, -6.67572021484375e-05, -7.62939453125e-05, -6.4849853515625e-05, -0.00601613475009799, -4.160325261182152e-05, -0.04937934875488281, -0.3563213348388672, -0.0013408660888671875, -5.7220458984375e-06, 0.0, -0.0004245042509865016, -0.00023472309112548828, -5.841255187988281e-06, -0.0021266937255859375, -0.000133514404296875, -7.62939453125e-06, -0.03731358051300049, -3.24249267578125e-05, -0.000873565673828125, -0.0001392364501953125, -0.0025463104248046875, -0.009175300598144531, -0.000598907470703125, -2.09808349609375e-05, 0.0, -0.0026990175247192383, -0.007669687271118164, 0.0, -0.0006160736083984375, -0.015893936157226562, -1.9073486328125e-06, -0.0367797389626503, -3.933906555175781e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.03438699245452881, -0.002283930778503418, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0004826784133911133, -3.814697265625e-06, 0.0]}], "gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n"}
{"beams": [{"inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(Give(CardQuery(conditions=[\n            ManaCost(Attribute('<UNK>', HeroSelector())), IsSpell()])),\n            MinionSelector(picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n", "model_output": {"_type": "Module", "body": [{"name": "Toshley", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 6, "hole4": [{"func": {"_type": "Name", "id": "CardQuery"}, "_type": "Call", "keywords": [{"arg": "conditions", "_type": "keyword", "value": {"elts": [{"func": {"_type": "Name", "id": "ManaCost"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Attribute"}, "_type": "Call", "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Template38", "hole0": "HeroSelector"}]}]}, {"_type": "Template38", "hole0": "IsSpell"}], "_type": "List"}}]}], "hole3": "Give", "hole5": "MinionSelector", "_type": "Template8", "hole2": "LEGENDARY", "hole7": [{"arg": "picker", "_type": "keyword", "value": {"_type": "Template38", "hole0": "UserPicker"}}], "hole0": "Toshley"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 7, "_type": "Template11", "hole0": 5}]}]}, "score": -4.974387027878251, "choice_history": [55, 124, 221, 63, 103, "Toshley", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 87, 187, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Give", "<EOS>", 208, 32, 100, 19, 125, "Card", "Query", "<EOS>", 216, 54, 197, "conditions", "<EOS>", 17, 120, 209, 32, 101, 19, 125, "Mana", "Cost", "<EOS>", 208, 32, 101, 19, 125, "Attribute", "<EOS>", 209, 40, 134, "<UNK>", "<EOS>", 49, 174, "Hero", "Selector", "<EOS>", 49, 174, "Is", "Spell", "<EOS>", "Minion", "Selector", "<EOS>", 216, 54, 197, "picker", "<EOS>", 26, 174, "User", "Picker", "<EOS>", 73, 146, "5", "<EOS>", "7", "<EOS>"], "score_history": [-9.5367431640625e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.000202178955078125, -7.62939453125e-06, -0.0025308129843324423, -0.014093463309109211, 0.0, -5.7220458984375e-06, 0.0, -4.994868868379854e-05, -6.675716122117592e-06, -3.6716461181640625e-05, -9.5367431640625e-06, -0.0018405914306640625, -3.814697265625e-06, -4.291534423828125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -3.5762786865234375e-05, -7.152555099310121e-07, -0.20829486846923828, -0.48647117614746094, -0.039969444274902344, -8.988344052340835e-05, -0.0001654500374570489, -0.002070784568786621, -0.0002530493075028062, -0.22964715957641602, -1.1920928244535389e-07, -0.2905271053314209, -0.04295003414154053, -0.0001735687255859375, -0.0004367828369140625, -0.3992176055908203, -0.00016021728515625, -7.62939453125e-06, -0.010493636131286621, -0.00032067298889160156, -5.924701690673828e-05, -0.10066032409667969, -2.288818359375e-05, -9.5367431640625e-06, -0.11133396625518799, -9.5367431640625e-06, -0.008266448974609375, -7.43865966796875e-05, -0.0046329498291015625, -0.0019245147705078125, -1.1444091796875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.02520202472805977, -0.01652371883392334, -1.9073486328125e-06, -0.0013980865478515625, -0.10084247589111328, -0.000102996826171875, -3.814697265625e-06, 0.0, -0.1466570794582367, -0.0005228519439697266, -1.33514404296875e-05, -0.0005359649658203125, -2.6702880859375e-05, -0.42215287685394287, -0.0010051727294921875, -0.0016765594482421875, -1.9073486328125e-06, -0.7080980539321899, -0.00012969970703125, 0.0, -0.17493629455566406, -1.9073486328125e-06, -0.6499873399734497, -0.29188597202301025, -0.002730727195739746, -0.006636857986450195, -0.000164031982421875, -1.1920928244535389e-07, -0.0011730194091796875, -4.9591064453125e-05, -3.814697265625e-06, -0.44379329681396484, 0.0, -8.7738037109375e-05, -7.62939453125e-06, -0.013118863105773926, -6.4849853515625e-05, -2.86102294921875e-05, -0.0001888275146484375, -5.7220458984375e-06, -6.43729799776338e-06, 0.0, -0.007485032081604004, -3.218649908376392e-06]}], "gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n"}
{"beams": [{"inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.BEAST, buffs=[Buff(CantAttack())])\n\n    def create_minion(self, player):\n        return Minion(1, 3)\n", "model_output": {"_type": "Module", "body": [{"name": "Warbot", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "buffs", "_type": "keyword", "value": {"elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "CantAttack"}]}], "_type": "List"}}], "args": [{"_type": "Str", "s": "Warbot"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 3, "_type": "Template11", "hole0": 1}]}]}, "score": -3.0716063435420082, "choice_history": [55, 124, 221, 63, 103, "Warbot", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Warbot", "<EOS>", 39, 130, "1", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 217, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 54, 197, "buffs", "<EOS>", 17, 120, 208, 32, 101, 19, 125, "Buff", "<EOS>", 208, 49, 174, "Cant", "Attack", "<EOS>", 73, 146, "1", "<EOS>", "3", "<EOS>"], "score_history": [0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.0517578125e-05, -9.5367431640625e-06, -0.0001037067049765028, -0.0004029269621241838, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -5.7220440794480965e-06, -1.7404556274414062e-05, -0.0001049041748046875, -5.7220458984375e-06, -0.6803503036499023, -1.9073486328125e-05, -0.00014257431030273438, -4.768370445162873e-07, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -8.296966552734375e-05, -1.9073486328125e-06, -2.288818359375e-05, -0.00016021728515625, -3.814697265625e-06, -1.9073486328125e-05, -0.007293701171875, -4.9591064453125e-05, -1.52587890625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.9205850296420977e-05, -1.33514404296875e-05, -1.1920928955078125e-05, -1.1920928244535389e-07, -0.09119606018066406, -3.24249267578125e-05, -9.5367431640625e-06, -7.033334895822918e-06, -4.1723224057932384e-06, -3.814697265625e-06, -3.814697265625e-06, -0.00015243359666783363, -4.410743713378906e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.33514404296875e-05, -5.14984130859375e-05, -3.814697265625e-06, -5.245195097813848e-06, -0.09314990043640137, 0.0, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -3.0517578125e-05, -7.62939453125e-06, -1.1086402082582936e-05, -0.090087890625, -1.3232166566012893e-05, -0.0054302215576171875, -0.001407623291015625, -0.0001964569091796875, -3.933906555175781e-06, -2.3126602172851562e-05, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -4.00543212890625e-05, 0.0, -0.1085977554321289, -8.225440979003906e-06, -0.0002574920654296875, 0.0, -0.722987174987793, 0.0, -0.0010347366333007812, -8.58306884765625e-05, -0.0001964569091796875, -1.52587890625e-05, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.023675203323364258, -4.887569048150908e-06, -0.4145526885986328, -0.0009021759033203125, -5.7220458984375e-06, -0.8212207555770874, -0.006792175117880106, -7.748603820800781e-06, -0.0002803802490234375, -9.5367431640625e-06, -5.3405743528855965e-05, -8.344646857949556e-07, -9.417532055522315e-06, -2.3841855067985307e-07]}], "gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n"}
{"beams": [{"inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(<UNK>Deathlord(),\n            PlayerSelector()))\n", "model_output": {"_type": "Module", "body": [{"name": "Deathlord", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 3, "_type": "Template5", "hole2": "ALL", "hole0": "Deathlord"}, {"hole1": 8, "_type": "Template10", "hole2": "deathrattle", "hole3": {"func": {"_type": "Name", "id": "Deathrattle"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "<UNK>Deathlord"}, {"_type": "Template38", "hole0": "PlayerSelector"}]}, "hole0": 2}]}]}, "score": -1.4192544938457559, "choice_history": [55, 124, 221, 63, 103, "Deathlord", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 84, 177, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", 72, 145, "2", "<EOS>", "8", "<EOS>", "deathrattle", "<EOS>", 14, 101, 19, 125, "Deathrattle", "<EOS>", 209, 49, 174, "<UNK>", "Deathlord", "<EOS>", 49, 174, "Player", "Selector", "<EOS>"], "score_history": [0.0, -1.9073486328125e-06, -3.814697265625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.00010656782251317054, -0.041660938411951065, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -2.7060508728027344e-05, -1.5139577953959815e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.1881561279296875, -0.006351470947265625, -4.887569048150908e-06, -4.8279336624545977e-05, -3.445148468017578e-05, -8.702239938429557e-06, -1.2278534995857626e-05, 0.0, -0.0036754608154296875, -7.05718994140625e-05, -8.106231689453125e-06, -7.152555099310121e-07, -0.0002198214497184381, -2.50339189733495e-06, -0.09635400772094727, -1.680836794548668e-05, -0.00032806396484375, -7.62939453125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.0015888214111328125, -2.861018856492592e-06, -0.0004558563232421875, -0.36470508575439453, -4.1961669921875e-05, -0.11075344681739807, -0.369341105222702, -0.08263759315013885, -0.1522388458251953, -3.814697265625e-06, -0.00026404857635498047, -2.3722486730548553e-05, 0.0]}], "gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n"}
{"beams": [{"inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(-2), CardSelector(\n            condition=IsSpell()))])\n", "model_output": {"_type": "Module", "body": [{"name": "Nerub'arWeblord", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 2, "_type": "Template4", "hole2": "ALL", "hole0": "Nerub'ar Weblord"}, {"hole1": 4, "_type": "Template10", "hole2": "auras", "hole3": {"elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call", "args": [{"op": {"_type": "USub"}, "_type": "UnaryOp", "operand": {"_type": "Num", "n": 2}}]}, {"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"arg": "condition", "_type": "keyword", "value": {"_type": "Template38", "hole0": "IsSpell"}}]}]}], "_type": "List"}, "hole0": 1}]}]}, "score": -1.2640856288359146, "choice_history": [55, 124, 221, 63, 103, "Nerub'ar", "Weblord", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 83, 176, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 72, 145, "1", "<EOS>", "4", "<EOS>", "auras", "<EOS>", 17, 120, 208, 32, 101, 19, 125, "Aura", "<EOS>", 209, 32, 101, 19, 125, "Mana", "Change", "<EOS>", 208, 50, 192, 90, 21, 130, "2", "<EOS>", 32, 100, 19, 125, "Card", "Selector", "<EOS>", 216, 54, 197, "condition", "<EOS>", 26, 174, "Is", "Spell", "<EOS>"], "score_history": [0.0, -3.24249267578125e-05, -1.1444091796875e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00282947882078588, -0.007827206514775753, -0.00456729531288147, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -2.1457672119140625e-06, -6.508827209472656e-05, -5.7220458984375e-06, -9.5367431640625e-06, -0.005558013916015625, -0.0003070831298828125, -4.768360213347478e-06, -9.775161743164062e-06, -6.866455078125e-05, -0.00013375282287597656, -0.00029480457305908203, -8.22540732769994e-06, -0.0001237390679307282, -7.62939453125e-06, -0.0006618499755859375, -1.71661376953125e-05, -4.4107309804530814e-06, -1.0728830375228426e-06, -0.00025939266197383404, -7.152555099310121e-07, -0.019958019256591797, -5.424022674560547e-05, -0.0017452239990234375, -0.0003261566162109375, -0.047534942626953125, -4.00543212890625e-05, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.0002993345260620117, -0.00039136409759521484, -0.0001068115234375, -0.006968498229980469, -5.53131103515625e-05, -0.00031280517578125, -4.38690185546875e-05, -0.004484883043915033, -0.0003066002391278744, -0.00026404825621284544, -4.38690185546875e-05, -0.4589424133300781, -0.001529693603515625, -0.0022144317626953125, -0.0001125335693359375, -1.71661376953125e-05, -0.437802791595459, -5.7220440794480965e-06, -0.0003376007080078125, -0.020132064819335938, -0.0013275146484375, -0.0001010894775390625, -0.00593256950378418, -0.00089263916015625, 0.0, -2.47955322265625e-05, -0.0001468658447265625, -0.000576019287109375, -0.0005277395248413086, -1.7762085917638615e-05, -0.049144744873046875, -1.9073486328125e-06, -0.0009468793869018555, -0.1773473024368286, -0.00017774105072021484]}], "gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n"}
{"beams": [{"inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n", "model_output": {"_type": "Module", "body": [{"name": "SpectralKnight", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 5, "_type": "Template4", "hole2": "ALL", "hole0": "Spectral Knight"}, {"hole1": 6, "_type": "Template10", "hole2": "spell_targetable", "hole3": {"_type": "NameConstant", "value": true}, "hole0": 4}]}]}, "score": -0.49236837508647113, "choice_history": [55, 124, 221, 63, 103, "Spectral", "Knight", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 83, 176, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", 72, 145, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 20, 126, "False", "<EOS>"], "score_history": [-1.33514404296875e-05, -7.62939453125e-06, -5.7220458984375e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0001685477327555418, -0.004261246882379055, -0.003282984485849738, -2.6702880859375e-05, -7.82012939453125e-05, -3.814697265625e-06, 0.0, -0.00011837482452392578, 0.0, -1.9073486328125e-06, -0.28584861755371094, -0.0023193359375, -9.965400386136025e-05, -0.0001274334208574146, -0.005017638206481934, -0.0005664825439453125, -0.0008904783753678203, -8.702266313775908e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.06075000762939453, -1.52587890625e-05, -2.980227463922347e-06, -7.033323527139146e-06, -0.0005048512248322368, -4.935142715112306e-05, -0.12386441230773926, -1.3232214769232087e-05, -0.0007457733154296875, -1.52587890625e-05, -0.00334930419921875, -0.0001163482666015625]}], "gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n"}
{"beams": [{"inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), MinionSelector\n            (EnemyPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "model_output": {"_type": "Module", "body": [{"name": "WailingSoul", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 4, "hole4": [{"_type": "Num", "n": 1}], "hole3": "Damage", "hole5": "MinionSelector", "hole6": [{"_type": "Template38", "hole0": "EnemyPlayer"}], "_type": "Template8", "hole2": "RARE", "hole0": "Wailing Soul"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 5, "_type": "Template11", "hole0": 3}]}]}, "score": -4.136364955499907, "choice_history": [55, 124, 221, 63, 103, "Wailing", "Soul", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 87, 188, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 208, 39, 130, "1", "<EOS>", "Minion", "Selector", "<EOS>", 208, 49, 174, "Enemy", "Player", "<EOS>", 73, 146, "3", "<EOS>", "5", "<EOS>"], "score_history": [-3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, -2.47955322265625e-05, -1.52587890625e-05, -0.0005057962844148278, -3.969590397900902e-05, -0.0008318555192090571, -3.814697265625e-06, -1.52587890625e-05, 0.0, -4.291525328881107e-06, -0.00022828545479569584, -1.5258787243510596e-05, -5.91278076171875e-05, -0.00145721435546875, -3.814697265625e-06, -3.814697265625e-05, -7.152555099310121e-07, -2.6702880859375e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.00010561932867858559, -4.0531076592742465e-06, -4.57763671875e-05, -0.01672649383544922, -1.4748492240905762, -0.001815818715840578, -0.0003349771723151207, -5.841255187988281e-06, -1.1444091796875e-05, -0.00017833709716796875, 0.0, -0.0010782480239868164, -3.576278118089249e-07, -0.6320374608039856, -4.887569048150908e-06, -1.1444091796875e-05, -0.001033782958984375, 0.0, -1.0257399082183838, -1.3470649719238281e-05, -5.269050598144531e-05, -1.9073486328125e-05, 0.0, -0.0018606185913085938, -0.032713890075683594, -1.9073486328125e-06, -0.9414069056510925, -0.0025469001848250628, 0.0, -0.000400543212890625, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -3.32593554048799e-05, -8.344646857949556e-07]}], "gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}
{"beams": [{"inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()),\n            Aura(ChangeHealth(1), MinionSelector())])\n", "model_output": {"_type": "Module", "body": [{"name": "AmaniBerserker", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 2, "_type": "Template4", "hole2": "ALL", "hole0": "Amani Berserker"}, {"hole1": 3, "_type": "Template10", "hole2": "enrage", "hole3": {"elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"_type": "Template35", "hole0": 1}, {"_type": "Template38", "hole0": "SelfSelector"}]}, {"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"_type": "Template36", "hole0": 1}, {"_type": "Template38", "hole0": "MinionSelector"}]}], "_type": "List"}, "hole0": 2}]}]}, "score": -2.7298726846483987, "choice_history": [55, 124, 221, 63, 103, "Amani", "Berserker", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 83, 176, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 72, 145, "2", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 17, 120, 209, 32, 101, 19, 125, "Aura", "<EOS>", 209, 46, 171, "1", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", 32, 101, 19, 125, "Aura", "<EOS>", 209, 47, 172, "1", "<EOS>", 49, 174, "Minion", "Selector", "<EOS>"], "score_history": [-3.814697265625e-06, -3.814697265625e-06, -1.1444091796875e-05, -3.4332275390625e-05, -1.9073486328125e-06, -0.004577158950269222, -0.007940275594592094, -0.001537840929813683, -1.9073486328125e-06, -6.103515625e-05, 0.0, -2.1457672119140625e-06, -2.300739288330078e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.007167816162109375, -0.0016345977783203125, -3.4689852327574044e-05, -1.0371208190917969e-05, -2.86102294921875e-05, -0.0012373921927064657, -4.267683834768832e-05, -1.4305012882687151e-05, -2.3245811462402344e-05, 0.0, -0.0020465850830078125, -5.7220458984375e-06, -2.3841855067985307e-07, -3.576278118089249e-07, -0.000905922322999686, -7.152555099310121e-07, -0.20002329349517822, -5.483612312673358e-06, -0.0048675537109375, -0.000751495361328125, -0.25192928314208984, -0.0002269744873046875, -3.814697265625e-06, -0.00017547607421875, -1.9073486328125e-06, -0.002447366714477539, -4.768370445162873e-07, -9.34600830078125e-05, -0.036957740783691406, -0.0008563995361328125, -0.670836329460144, -3.540513716870919e-05, -0.00576019287109375, 0.0, -0.0036982190795242786, -4.0531158447265625e-06, 0.0, -8.58306884765625e-05, -3.4332275390625e-05, -5.7220458984375e-06, 0.0, -0.07181417942047119, -2.3841855067985307e-07, -0.001232147216796875, -0.6276836395263672, -0.05539226531982422, -0.11319879442453384, -0.0006030797376297414, -0.005593299865722656, -1.9073486328125e-06, -0.6480840444564819, -0.0001068115234375, 0.0]}], "gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}
{"beams": [{"inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(player=EnemyPlayer()),\n            ActionTag(Summon('Fireballhand()), PlayerSelector())),\n            Battlecry(Summon('Fireballhand()), PlayerSelector())])\n", "model_output": {"_type": "Module", "body": [{"name": "ArchmageAntonidas", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 7, "_type": "Template7", "hole2": "HUNTER", "hole3": "LEGENDARY", "hole0": "Archmage Antonidas"}, {"hole1": 7, "_type": "Template10", "hole2": "effects", "hole3": {"elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "SpellCast"}, "_type": "Call", "keywords": [{"arg": "player", "_type": "keyword", "value": {"_type": "Template38", "hole0": "EnemyPlayer"}}]}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "'Fireballhand"}]}, {"_type": "Template38", "hole0": "PlayerSelector"}]}]}, {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Summon"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "'Fireballhand"}]}, {"_type": "Template38", "hole0": "PlayerSelector"}]}], "_type": "List"}, "hole0": 5}]}]}, "score": -4.231077205712481, "choice_history": [55, 124, 221, 63, 103, "Archmage", "Antonidas", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 86, 179, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "HUNTER", "<EOS>", "LEGENDARY", "<EOS>", 72, 145, "5", "<EOS>", "7", "<EOS>", "effects", "<EOS>", 17, 120, 209, 32, 101, 19, 125, "Effect", "<EOS>", 209, 32, 100, 19, 125, "Spell", "Cast", "<EOS>", 216, 54, 197, "player", "<EOS>", 26, 174, "Enemy", "Player", "<EOS>", 32, 101, 19, 125, "Action", "Tag", "<EOS>", 209, 32, 101, 19, 125, "Summon", "<EOS>", 208, 49, 174, "'Fireball", "hand", "<EOS>", 49, 174, "Player", "Selector", "<EOS>", 32, 101, 19, 125, "Battlecry", "<EOS>", 209, 32, 101, 19, 125, "Summon", "<EOS>", 208, 49, 174, "'Fireball", "hand", "<EOS>", 49, 174, "Player", "Selector", "<EOS>"], "score_history": [-1.52587890625e-05, -0.0002288818359375, -3.814697265625e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.05117611214518547, -0.0014992436626926064, -0.009804954752326012, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.1444089977885596e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-05, -0.03928852081298828, -2.47955322265625e-05, -2.372236667724792e-05, -2.586841583251953e-05, -5.7220458984375e-06, -2.86102294921875e-05, -0.0001882176147773862, -1.1920928244535389e-07, -0.6324267387390137, 0.0, -0.0029191970825195312, 0.0, -0.013131141662597656, -5.14984130859375e-05, -4.768371127283899e-06, -1.4543427823809907e-05, -4.303430614527315e-05, -3.135203223791905e-05, -0.00042652522097341716, -1.8477414414519444e-05, -0.000110626220703125, -8.58306884765625e-05, -0.40393829345703125, 0.0, -1.1444091796875e-05, -0.000942230224609375, -1.9073486328125e-06, -0.0027958154678344727, -2.6225870897178538e-05, -1.1444091796875e-05, -0.0005950927734375, -0.07605552673339844, -0.032874107360839844, -4.76837158203125e-05, -0.0010309208882972598, -0.011377692222595215, -1.1920928244535389e-07, -6.866455078125e-05, -0.0001087188720703125, -1.33514404296875e-05, -0.16636383533477783, 0.0, -1.33514404296875e-05, -2.09808349609375e-05, -0.014188766479492188, -2.3126602172851562e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.0001373291015625, -3.814697265625e-06, -1.9073486328125e-06, -0.0017789602279663086, -0.0004215240478515625, -0.00010418891906738281, -3.814697265625e-06, -0.0004062652587890625, -0.001468658447265625, -3.24249267578125e-05, 0.0, -0.11969058960676193, -4.6252302126958966e-05, -2.288818359375e-05, -0.000972747802734375, -7.62939453125e-06, -0.024910254403948784, -0.5826399326324463, -0.017460649833083153, -0.000133514404296875, -1.9073486328125e-06, -0.00026774374418891966, -2.1457672119140625e-05, -7.152555099310121e-07, -0.000217437744140625, -5.340576171875e-05, -7.62939453125e-06, 0.0, -0.5029072761535645, -1.6450881958007812e-05, -5.7220458984375e-06, -0.002056121826171875, -0.0024662017822265625, -0.000797271728515625, 0.0, -0.5272750854492188, -1.2516951755969785e-05, -1.71661376953125e-05, -0.0007648468017578125, -2.86102294921875e-05, -0.09631159156560898, -0.8737785220146179, -0.010461976751685143, -0.000438690185546875, -9.5367431640625e-06, -0.0005682706832885742, -4.0650367736816406e-05, -8.344646857949556e-07]}], "gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n"}
{"beams": [{"inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(self.target.card)\n", "model_output": {"_type": "Module", "body": [{"name": "Bananas", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "args": [{"_type": "Str", "s": "Bananas"}, {"_type": "Num", "n": 1}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": "increase_health", "_type": "Template1", "hole2": [{"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}], "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}]}, "score": -1.7229282727186543, "choice_history": [55, 124, 221, 63, 103, "Bananas", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 212, 40, 134, "Bananas", "<EOS>", 39, 130, "1", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 38, 126, "False", "<EOS>", 216, 54, 197, "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 71, 144, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 208, 29, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>"], "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0007038116455078125, -0.00032806396484375, -2.288818359375e-05, -6.079665126890177e-06, -0.00034164657699875534, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-06, -1.7642965758568607e-05, -0.00011622899182839319, 0.0, -3.0517578125e-05, -0.00080108642578125, -3.4332275390625e-05, -1.2516919014160521e-05, 0.0, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0013033099239692092, -1.311301275563892e-06, -0.000152587890625, -1.1444091796875e-05, -1.9073486328125e-06, -0.0001125335693359375, -0.030736923217773438, -1.1444091796875e-05, 0.0, -1.52587890625e-05, 0.0, -2.145764938177308e-06, -1.1920928244535389e-07, -2.110004425048828e-05, 0.0, -0.0057697296142578125, -0.0046100616455078125, -1.9073486328125e-06, -0.0013085603713989258, -4.482268923311494e-05, -7.62939453125e-06, 0.0, -1.3112839951645583e-06, 0.0, -1.9073486328125e-06, -2.6702880859375e-05, -9.5367431640625e-06, 0.0, -1.9073486328125e-05, -7.62939453125e-06, -0.0025644302368164062, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.9591064453125e-05, -9.5367431640625e-05, -0.000125885009765625, -3.4570634852570947e-06, -0.0014133453369140625, -6.687641143798828e-05, -0.0005893707275390625, -0.0009098052978515625, -0.0002142190933227539, -1.33514404296875e-05, -4.00543212890625e-05, -7.62939453125e-06, -1.9073486328125e-06, -0.0010204315185546875, 0.0, -3.24249267578125e-05, -9.5367431640625e-06, -4.00543212890625e-05, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -1.71661376953125e-05, -2.09808349609375e-05, -0.00020992755889892578, 0.0, -0.017189383506774902, -3.0875205993652344e-05, -0.000171661376953125, -0.007366180419921875, -1.52587890625e-05, -1.52587890625e-05, -1.71661376953125e-05, -3.814697265625e-06, -7.462501525878906e-05, -2.062299427052494e-05, -3.6835659557254985e-05, -3.576278118089249e-07, -0.5959484577178955, 0.0, -5.53131103515625e-05, -0.07627487182617188, -5.7220458984375e-06, -0.2916402816772461, -4.00543212890625e-05, -3.62396240234375e-05, 0.0, -0.5412406921386719, -2.622604142743512e-06, -0.00012385845184326172, -2.384185791015625e-06, -0.13849413394927979, -1.9073486328125e-06]}], "gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n"}
{"beams": [{"inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(self.target.card)\n", "model_output": {"_type": "Module", "body": [{"name": "BlessedChampion", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "target_func", "_type": "keyword", "value": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}}], "args": [{"_type": "Str", "s": "Blessed Champion"}, {"_type": "Num", "n": 5}, {"attr": "PALADIN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": "change_attack", "_type": "Template1", "hole2": [{"attr": "card", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}], "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}]}, "score": -3.490305669054301, "choice_history": [55, 124, 221, 63, 103, "Blessed", "Champion", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Blessed", " ", "Champion", "<EOS>", 39, 130, "5", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 54, 197, "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 71, 144, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 208, 29, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>"], "score_history": [-7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-05, -1.1444091796875e-05, -7.033323527139146e-06, -0.00620190380141139, -0.00023541064001619816, -3.814697265625e-06, -2.09808349609375e-05, -7.62939453125e-06, -0.000128147192299366, -5.042536940891296e-05, -1.9073486328125e-06, -2.47955322265625e-05, -0.000156402587890625, -1.1444091796875e-05, -0.0005685090436600149, -1.3709065569855738e-05, -7.62939453125e-06, -4.00543212890625e-05, -1.9073486328125e-06, -3.3378219086444005e-05, -7.62939453125e-06, -0.0002117156982421875, -4.57763671875e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0048313140869140625, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, 0.0, -0.00022718709078617394, -5.9604644775390625e-06, -4.0531158447265625e-06, -2.3841855067985307e-07, -0.11582756042480469, -5.7220458984375e-06, -0.000766754150390625, -0.0002851079625543207, -2.47955322265625e-05, -0.00226134923286736, -1.9073486328125e-06, -0.0002994537353515625, 0.0, -8.844937838148326e-05, -1.311301275563892e-06, 0.0, 0.0, -1.33514404296875e-05, 0.0, -0.0002584456233307719, -8.344646857949556e-07, -0.03784823417663574, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -2.6941299438476562e-05, -8.106198947643861e-06, -0.42084503173828125, -1.9073486328125e-06, -0.000179290771484375, -2.86102294921875e-05, 0.0, -0.0010415315628051758, -1.1920928244535389e-07, -3.0517578125e-05, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, 0.0, -1.33514404296875e-05, -1.1444091796875e-05, -0.0001773834228515625, -7.62939453125e-06, -0.05505824089050293, -4.2319297790527344e-05, -0.6505298614501953, -0.000156402587890625, 0.0, 0.0, -0.0061187744140625, 0.0, -2.288818359375e-05, -8.344646857949556e-07, -5.1855888159479946e-05, -7.033334895822918e-06, -0.5567829608917236, 0.0, -5.7220458984375e-06, -0.9071731567382812, -4.57763671875e-05, -0.0779256820678711, -7.62939453125e-06, -3.814697265625e-05, 0.0, -0.0035343170166015625, -1.1920928244535389e-07, -6.508827209472656e-05, -1.1920928244535389e-07, -0.63965904712677, -1.3470649719238281e-05]}], "gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n"}
{"beams": [{"inferred_code": "class CabalShadowPriestPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(\n            Attack<UNK>Than<UNK>EqualTo(2), BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "model_output": {"_type": "Module", "body": [{"name": "CabalShadowPriestPriest", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 6, "hole3": "Kill", "hole5": "MinionSelector", "hole6": [{"func": {"_type": "Name", "id": "Attack<UNK>Than<UNK>EqualTo"}, "_type": "Call", "args": [{"_type": "Num", "n": 2}]}, {"_type": "Template38", "hole0": "BothPlayer"}], "_type": "Template8", "hole2": "EPIC", "hole0": "Cabal Shadow Priest"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 5, "_type": "Template11", "hole0": 4}]}]}, "score": -1.9618638137214148, "choice_history": [55, 124, 221, 63, 103, "Cabal", "Shadow", "Priest", "Priest", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 87, 183, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", "6", "<EOS>", "EPIC", "<EOS>", "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 209, 32, 101, 19, 125, "Attack", "<UNK>", "Than", "<UNK>", "Equal", "To", "<EOS>", 208, 39, 130, "2", "<EOS>", 49, 174, "Both", "Player", "<EOS>", 73, 146, "4", "<EOS>", "5", "<EOS>"], "score_history": [0.0, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.33514404296875e-05, -0.00021669900161214173, -0.07536318898200989, -0.002848264994099736, -0.1347648650407791, -0.003820665180683136, -1.9073486328125e-06, -4.57763671875e-05, -3.814697265625e-06, -4.768370445162873e-07, -8.58306884765625e-05, -1.9073486328125e-06, -7.62939453125e-06, -8.7738037109375e-05, -9.5367431640625e-06, -7.748603820800781e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -4.00543212890625e-05, -1.9073486328125e-06, -3.719329833984375e-05, -9.5367431640625e-06, -7.43865966796875e-05, -0.10588455200195312, -0.5492854118347168, -0.0001431601122021675, -0.00025403493782505393, -0.00054931640625, -6.4849853515625e-05, -0.00036799139343202114, -0.00016987323760986328, -0.00015400900156237185, -3.576278118089249e-07, -0.032094717025756836, -3.862320227199234e-05, -0.0013471320271492004, -2.3841855067985307e-07, -0.0012042522430419922, -0.00016236305236816406, -1.1920928244535389e-07, -0.016824722290039062, -3.4332275390625e-05, -1.9073486328125e-05, -3.62396240234375e-05, -5.7220458984375e-06, -0.046240925788879395, -0.676751971244812, -0.03549118712544441, -0.00242531206458807, -0.11175272613763809, -0.0070296525955200195, -4.2319297790527344e-05, -3.814697265625e-06, -0.009729385375976562, -2.09808349609375e-05, -0.1307746171951294, 0.0, -0.000152587890625, -1.9073486328125e-06, -0.012308117933571339, -1.537799835205078e-05, 0.0, -0.00263214111328125, -3.814697265625e-06, -2.3841855067985307e-07, -1.1920928244535389e-07, -0.00038158876122906804, -3.576278118089249e-07]}], "gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}
{"beams": [{"inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.immune = True\n        if self.target is not self.target.index:\n            self.target.die(self)\n", "model_output": {"_type": "Module", "body": [{"name": "ConeOfCold", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 4, "hole4": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func", "_type": "Template3", "hole2": "PALADIN", "hole0": "Cone of Cold"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"targets": [{"attr": "immune", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": true}}, {"_type": "If", "test": {"ops": [{"_type": "IsNot"}], "_type": "Compare", "left": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}, "comparators": [{"attr": "index", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}, "body": [{"_type": "Expr", "value": {"func": {"attr": "die", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"_type": "Name", "id": "self"}]}}]}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -5.5234631881989955, "choice_history": [55, 124, 221, 63, 103, "Cone", "Of", "Cold", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 80, 165, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "PALADIN", "<EOS>", "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 223, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 60, 93, 208, 29, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "immune", "<EOS>", 20, 126, "True", "<EOS>", 67, 111, 15, 104, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", 205, 7, 208, 29, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>", 221, 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 208, 37, 125, "self", "<EOS>"], "score_history": [-1.9073486328125e-06, -0.001194000244140625, -1.52587890625e-05, -0.0002040863037109375, -4.57763671875e-05, -0.00010406429646536708, -0.00017368733824696392, -0.1939285844564438, -0.003357504727318883, -4.9591064453125e-05, -4.00543212890625e-05, -1.1444091796875e-05, -0.0001678466796875, -1.0251998901367188e-05, 0.0, -0.008264541625976562, -0.001361846923828125, -2.86102294921875e-05, -0.00016675988445058465, -0.0001614093780517578, -5.2094459533691406e-05, -0.0006085634231567383, -4.6610701247118413e-05, -1.9073486328125e-06, -4.565619019558653e-05, 0.0, -0.7644997835159302, 0.0, -0.0020598173141479492, 0.0, -0.00067901611328125, -5.91278076171875e-05, -7.62939453125e-06, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -0.0001068115234375, -3.814697265625e-06, -3.063678741455078e-05, -3.814697265625e-06, -0.039205312728881836, -2.47955322265625e-05, -0.0004520416259765625, -5.7220458984375e-06, -5.733966827392578e-05, 0.0, -2.86102294921875e-05, -0.0001163482666015625, 0.0, -6.079673767089844e-06, 0.0, -1.9073486328125e-06, -3.933906555175781e-06, 0.0, 0.0, -2.2172915123519488e-05, -2.9802317840221804e-06, -0.574894905090332, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -1.33514404296875e-05, -5.7220458984375e-06, -5.14984130859375e-05, 0.0, -3.0517578125e-05, 0.0, -1.52587890625e-05, -0.0002384185791015625, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -0.000110626220703125, -3.814697265625e-06, -1.7404556274414062e-05, -3.1947951356414706e-05, -0.052936553955078125, -1.33514404296875e-05, -3.814697265625e-05, -0.1768016815185547, -0.0065288543701171875, -0.0007219314575195312, 0.0, -0.0328369140625, 0.0, -7.82012939453125e-05, 0.0, -3.24249267578125e-05, -1.9073486328125e-06, -0.15237629413604736, -0.00010216233931714669, -0.04489707946777344, -0.022813796997070312, -6.866455078125e-05, 0.0, -0.1443624496459961, -0.053924560546875, -0.0049648284912109375, -1.9073486328125e-05, -0.12352848052978516, 0.0, -0.060550689697265625, 0.0, -0.019372940063476562, 0.0, -0.0007725954055786133, -7.62939453125e-06, -4.76837158203125e-05, -0.45510196685791016, -1.1444091796875e-05, -0.05413532257080078, -3.814697265625e-06, -0.07314491271972656, -1.33514404296875e-05, -0.0007991790771484375, -1.9073486328125e-06, -0.37969970703125, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.41375935077667236, -4.5299530029296875e-06, -0.000476837158203125, -0.0365753173828125, -9.5367431640625e-06, -0.0013446807861328125, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.6230840682983398, -1.71661376953125e-05, -9.34600830078125e-05, 0.0, -0.0014274120330810547, -1.1920928244535389e-07, -7.37905502319336e-05, -2.1457672119140625e-06, -0.7026877403259277, 0.0, -0.0040035247802734375, -0.2858705520629883, 0.0, -0.00038623809814453125, 0.0]}], "gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n"}
{"beams": [{"inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Attribute('attack', MinionSelector(IsType(MINION_TYPE.MECH))))),\n            Buff(ChangeHealth(Attribute('attack', MinionSelector(IsType(\n            MINION_TYPE.MECH)))))]), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "model_output": {"_type": "Module", "body": [{"name": "DefenderOfArgus", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 4, "hole4": [{"elts": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeAttack"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Attribute"}, "_type": "Call", "args": [{"_type": "Str", "s": "attack"}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}]}]}]}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ChangeHealth"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Attribute"}, "_type": "Call", "args": [{"_type": "Str", "s": "attack"}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "MECH", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}]}]}]}], "_type": "List"}], "hole3": "Give", "hole5": "PlayerSelector", "_type": "Template8", "hole2": "RARE", "hole0": "Defender of Argus"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 3, "_type": "Template11", "hole0": 2}]}]}, "score": -10.753952098613546, "choice_history": [55, 124, 221, 63, 103, "Defender", "Of", "Argus", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 87, 186, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "<EOS>", 208, 35, 120, 209, 32, 101, 19, 125, "Buff", "<EOS>", 208, 32, 101, 19, 125, "Change", "Attack", "<EOS>", 208, 32, 101, 19, 125, "Attribute", "<EOS>", 209, 40, 134, "attack", "<EOS>", 32, 101, 19, 125, "Minion", "Selector", "<EOS>", 208, 32, 101, 19, 125, "Is", "Type", "<EOS>", 208, 29, 94, 19, 125, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 32, 101, 19, 125, "Buff", "<EOS>", 208, 32, 101, 19, 125, "Change", "Health", "<EOS>", 208, 32, 101, 19, 125, "Attribute", "<EOS>", 209, 40, 134, "attack", "<EOS>", 32, 101, 19, 125, "Minion", "Selector", "<EOS>", 208, 32, 101, 19, 125, "Is", "Type", "<EOS>", 208, 29, 94, 19, 125, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "Player", "Selector", "<EOS>", 73, 146, "2", "<EOS>", "3", "<EOS>"], "score_history": [-1.1444091796875e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-05, -0.000148773193359375, -0.00015281491505447775, -0.0008421981474384665, -0.017964644357562065, -0.0677475854754448, -5.7220458984375e-06, -3.24249267578125e-05, -1.1444091796875e-05, -5.364403477869928e-06, -0.00032639503479003906, -1.9311904907226562e-05, -2.288818359375e-05, -0.016269683837890625, -7.62939453125e-06, -6.0080987168475986e-05, -8.463859558105469e-06, 0.0, -3.62396240234375e-05, 0.0, -0.0001279045536648482, -2.3841855067985307e-07, -2.09808349609375e-05, -0.13831615447998047, -1.2251520156860352, -0.026316005736589432, -0.0013681279961019754, -0.04352748394012451, -0.0003951787657570094, -4.243848889018409e-05, -1.7523756469017826e-05, -0.27588629722595215, -1.2993727978027891e-05, -0.012847406789660454, -0.0003319433890283108, -0.01120379101485014, -0.0015676134498789907, -0.0002727508544921875, -0.029837608337402344, -0.0011730194091796875, -0.0003528594970703125, -0.007747650146484375, -4.76837158203125e-05, -3.0517578125e-05, 0.0, -0.03286251053214073, -1.4901076610840391e-05, -0.000202178955078125, -0.0038213729858398438, -3.814697265625e-06, -0.0003070831298828125, -9.5367431640625e-06, -0.3715173900127411, -0.325614869594574, -0.0001277923583984375, -0.0039768218994140625, -0.0005855560302734375, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.7941798567771912, -8.344649540958926e-05, -2.86102294921875e-05, -0.000560760498046875, -4.1961669921875e-05, -0.3300074636936188, -0.04584991931915283, -0.035164833068847656, -0.00016021728515625, -7.62939453125e-06, 0.0, -0.0008028617594391108, -1.919269561767578e-05, -4.768370445162873e-07, -0.33216094970703125, -0.12671375274658203, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.20375145971775055, -0.0003637075424194336, -2.1457668481161818e-05, -0.0003814697265625, -5.91278076171875e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.0004603862762451172, -2.861022494471399e-06, -0.9160176515579224, -5.638597212964669e-05, -0.5789737701416016, -2.09808349609375e-05, -9.5367431640625e-06, 0.0, -0.9350384473800659, -2.4795350327622145e-05, -0.000194549560546875, -0.0012359619140625, -5.7220458984375e-06, -8.96453857421875e-05, 0.0, -0.12263256311416626, -0.2649708390235901, -1.1920928244535389e-07, -0.000698089599609375, -4.1961669921875e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.6717712879180908, -3.921985626220703e-05, -3.4332275390625e-05, -0.00055694580078125, -2.288818359375e-05, -0.30814501643180847, -0.08152508735656738, -0.14545440673828125, -0.0002346038818359375, -7.62939453125e-06, 0.0, -0.0007672241772525012, -1.537799835205078e-05, -4.768370445162873e-07, -0.3765754699707031, -0.09183311462402344, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.18687939643859863, -0.0003402233123779297, -1.7166135876323096e-05, -0.0004558563232421875, -5.14984130859375e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.0004546642303466797, -2.861022494471399e-06, -0.9054099321365356, -5.6624387070769444e-05, -0.06642162799835205, -0.0005283355712890625, -3.218649908376392e-06, -0.6047744750976562, -3.814697265625e-06, -0.0011552795767784119, 0.0, -0.00013016835146117955, -1.9073486328125e-06]}], "gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8)\n", "model_output": {"_type": "Module", "body": [{"name": "Doomhammer", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"_type": "Template39", "hole0": 2}], "args": [{"_type": "Str", "s": "Doomhammer"}, {"_type": "Num", "n": 5}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"name": "create_weapon", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Weapon"}, "_type": "Call", "args": [{"_type": "Num", "n": 2}, {"_type": "Num", "n": 8}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}]}]}, "score": -0.656631749644923, "choice_history": [55, 124, 221, 63, 103, "Doomhammer", "<EOS>", 208, 37, 125, "Weapon", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Doomhammer", "<EOS>", 39, 130, "5", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 53, 175, "2", "<EOS>", 66, 108, "create_weapon", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 221, 69, 132, 14, 101, 19, 125, "Weapon", "<EOS>", 209, 39, 130, "2", "<EOS>", 39, 130, "8", "<EOS>"], "score_history": [-2.6702880859375e-05, -1.1444091796875e-05, -3.814697265625e-06, -2.86102294921875e-05, -2.86102294921875e-05, -5.674201020156033e-05, -0.00046907662181183696, -3.814697265625e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.0004769563674926758, -0.0002747774124145508, -1.9073486328125e-06, -0.003246307373046875, -0.00083160400390625, 0.0, -1.5020257706055418e-05, -1.1920928244535389e-07, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -8.416175842285156e-05, -7.748603820800781e-06, -0.0022382736206054688, -0.0001316070556640625, -5.7220458984375e-06, 0.0, -7.05718994140625e-05, -9.918212890625e-05, 0.0, -3.814697265625e-06, -7.62939453125e-06, -1.1920928244535389e-07, -7.62939453125e-06, -2.09808349609375e-05, 0.0, -5.340576171875e-05, -0.0001373291015625, -3.814697265625e-06, -5.960462772236497e-07, -0.0005075931549072266, -1.9073486328125e-06, 0.0, -0.010603785514831543, -2.0265558760002023e-06, -1.9073486328125e-06, -7.62939453125e-06, -9.5367431640625e-06, 0.0, -0.0001964569091796875, 0.0, -0.10366165637969971, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -9.5367431640625e-06, -1.1920928244535389e-07, -0.0069637298583984375, -2.3841855067985307e-07, -0.08907222747802734, -0.06927871704101562, -0.0001888275146484375, -0.10377675294876099, -7.641038246219978e-05, -0.0001220703125, -1.9073486328125e-06, -0.17332696914672852, 0.0, -1.52587890625e-05, -0.00041866302490234375, -3.814697265625e-06, -0.00014507770538330078, -1.1920928244535389e-07, 0.0, -0.0001125335693359375, 0.0, -0.000141143798828125, -0.00019073486328125, -2.6702880859375e-05, -0.0001049041748046875, -0.04599952697753906, -1.9073486328125e-05, -5.7220458984375e-06, -0.000241517394897528, -3.814697265625e-06, -2.86102294921875e-05, -1.71661376953125e-05, 0.0, -0.0009679895592853427, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -0.0419459231197834, -3.5643577575683594e-05]}], "gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n"}
{"beams": [{"inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(1), self)\n", "model_output": {"_type": "Module", "body": [{"name": "EarthShock", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 1, "hole4": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func", "_type": "Template3", "hole2": "HUNTER", "hole0": "Earth Shock"}, {"hole1": "damage", "_type": "Template1", "hole2": [{"_type": "Template33", "hole0": 1}, {"_type": "Name", "id": "self"}], "hole0": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}]}, "score": -1.1130126942571152, "choice_history": [55, 124, 221, 63, 103, "Earth", "Shock", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 80, 165, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 71, 144, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 209, 45, 169, "1", "<EOS>", 37, 125, "self", "<EOS>"], "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -1.71661376953125e-05, -1.9073486328125e-06, -4.8993817472364753e-05, -0.0002602000313345343, -8.583032467868179e-06, -3.814697265625e-06, -5.340576171875e-05, -1.9073486328125e-06, -0.0004602670669555664, -2.4437820684397593e-05, -1.1444091796875e-05, -0.0027408599853515625, -0.0009479522705078125, -0.000110626220703125, -1.823891761887353e-05, -5.412101745605469e-05, -2.682209014892578e-05, 0.0, -2.3244192561833188e-05, -1.1920928244535389e-07, -0.5611758232116699, 0.0, -0.0016918182373046875, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-05, -7.62939453125e-06, -3.814697265625e-06, -6.103515625e-05, -5.14984130859375e-05, -1.71661376953125e-05, -5.14984130859375e-05, -0.09102761745452881, -0.0001964569091796875, -0.4454050064086914, -0.0001544952392578125, 0.0, -1.9073486328125e-06, -0.0002689361572265625, 0.0, -7.62939453125e-06, 0.0, -1.52587890625e-05, 0.0, -0.004364490509033203, -2.0265579223632812e-06, -5.7220458984375e-06, -0.0032863616943359375, -0.000118255615234375, -5.662630428560078e-06, -1.5258672647178173e-05, -7.43865966796875e-05, -1.9073486328125e-06, -0.0001430511474609375, 0.0]}], "gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n"}
{"beams": [{"inferred_code": "class Eye<UNK>Eye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.minions and not attacker.<UNK>:\n            attacker.player.game.other_player.hero.<UNK> += 1\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "model_output": {"_type": "Module", "body": [{"name": "Eye<UNK>Eye", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SecretCard"}], "body": [{"hole1": 1, "_type": "Template4", "hole2": "HUNTER", "hole0": "Eye for Eye"}, {"name": "_reveal", "_type": "FunctionDef", "body": [{"_type": "If", "test": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"ops": [{"_type": "Is"}], "_type": "Compare", "left": {"_type": "Name", "id": "target"}, "comparators": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}, {"op": {"_type": "Not"}, "_type": "UnaryOp", "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}}}]}, "body": [{"target": {"attr": "<UNK>", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}}}}}}, "op": {"_type": "Add"}, "_type": "AugAssign", "value": {"_type": "Num", "n": 1}}, {"_type": "Expr", "value": {"func": {"attr": "reveal", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call"}}]}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "attacker", "_type": "arg"}, {"arg": "target", "_type": "arg"}]}}, {"name": "activate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "bind", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}, {"name": "deactivate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "unbind", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}]}]}, "score": -8.485416692550096, "choice_history": [55, 124, 221, 63, 103, "Eye", "<UNK>", "Eye", "<EOS>", 208, 37, 125, "Secret", "Card", "<EOS>", 224, 83, 176, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "HUNTER", "<EOS>", 66, 108, "_reveal", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "attacker", "<EOS>", 194, "target", "<EOS>", 221, 67, 111, 13, 97, 0, 209, 33, 104, 19, 125, "target", "<EOS>", 205, 6, 208, 29, 94, 11, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 50, 192, 89, 11, 94, 19, 125, "attacker", "<EOS>", "<UNK>", "<EOS>", 222, 61, 95, 11, 94, 11, 94, 11, 94, 11, 94, 11, 94, 19, 125, "attacker", "<EOS>", "player", "<EOS>", "game", "<EOS>", "other_player", "<EOS>", "hero", "<EOS>", "<UNK>", "<EOS>", 56, 21, 130, "1", "<EOS>", 64, 106, 14, 99, 11, 94, 26, 174, "super", "<EOS>", "reveal", "<EOS>", 66, 108, "activate", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 221, 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "opponent", "<EOS>", "bind", "<EOS>", 209, 40, 134, "character_attack", "<EOS>", 29, 94, 19, 125, "self", "<EOS>", "_reveal", "<EOS>", 66, 108, "deactivate", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 221, 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "opponent", "<EOS>", "unbind", "<EOS>", 209, 40, 134, "character_attack", "<EOS>", 29, 94, 19, 125, "self", "<EOS>", "_reveal", "<EOS>"], "score_history": [-1.33514404296875e-05, -3.62396240234375e-05, -1.9073486328125e-06, -4.00543212890625e-05, -9.5367431640625e-06, -0.0003077510336879641, -0.6325766444206238, -0.0820493996143341, -0.0030546095222234726, -1.33514404296875e-05, -6.67572021484375e-05, -1.71661376953125e-05, -0.00442957878112793, -0.0001010894775390625, -9.5367431640625e-06, -0.044315338134765625, -0.02970123291015625, -0.0003299713134765625, -7.962863310240209e-05, -0.0001550912857055664, -0.006428122520446777, -0.020926475524902344, -0.0014728308888152242, -9.5367431640625e-06, -1.1920917586394353e-06, -5.483612312673358e-06, -0.43190038204193115, 0.0, -0.000171661376953125, -9.5367431640625e-06, -0.6876641511917114, 0.0, -8.58306884765625e-05, -0.22038745880126953, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -1.9073486328125e-06, -0.15679025650024414, 0.0, -5.7220458984375e-06, -0.0069620609283447266, -1.8835005903383717e-05, -9.5367431640625e-05, -0.0026264190673828125, -0.0001430511474609375, -0.0663595199584961, -0.000133514404296875, -0.0001201629638671875, -0.0031681060791015625, -0.19589710235595703, -0.0006256103515625, -0.0022640228271484375, -4.00543212890625e-05, -0.003505706787109375, -2.8132995794294402e-05, -2.288818359375e-05, -0.08717632293701172, -0.00014495849609375, -0.04631614685058594, -2.6702880859375e-05, -0.004151344299316406, -3.814697265625e-06, -0.010676383972167969, -0.000133514404296875, -0.006930351257324219, 0.0, -0.003979682922363281, 0.0, -0.48488038778305054, -7.62939453125e-06, -0.026824951171875, -0.0005359649658203125, -0.023415565490722656, -0.0025281906127929688, -2.86102294921875e-05, -0.0071201324462890625, -3.24249267578125e-05, -0.09809160232543945, 0.0, -0.07815003395080566, -6.556507287314162e-06, -0.34667015075683594, -0.18382549285888672, -0.06552886962890625, -1.1444091796875e-05, -2.47955322265625e-05, -0.0001373291015625, -5.14984130859375e-05, -0.005779266357421875, -2.09808349609375e-05, -0.07102584838867188, -3.814697265625e-05, -0.34027957916259766, -0.0001773834228515625, -0.39176368713378906, -0.021752357482910156, -0.1794360876083374, -0.000118255615234375, -0.03735470771789551, -2.3841855067985307e-07, -0.0036411616019904613, -5.602834789897315e-06, -0.014694570563733578, 0.0, -0.17611658573150635, -0.00014328956604003906, -0.026822861284017563, -1.7642974853515625e-05, -0.17226505279541016, -0.0026807785034179688, -0.00040435791015625, -0.0008280789479613304, 0.0, -0.00154876708984375, -1.9073486328125e-06, -1.9073486328125e-06, -0.04627227783203125, -1.33514404296875e-05, 0.0, -4.9591064453125e-05, -1.9073486328125e-06, -0.009697198867797852, -1.1920928244535389e-07, -0.003475189208984375, 0.0, -0.000522613525390625, -2.6702880859375e-05, -0.0414276123046875, -1.1444091796875e-05, -2.47955322265625e-05, -0.0003566741943359375, -1.9073486328125e-06, -7.450580596923828e-05, 0.0, -1.52587890625e-05, -0.0024509429931640625, 0.0, -0.001735687255859375, -4.9591064453125e-05, 0.0, 0.0, -0.0001354217529296875, -9.5367431640625e-06, 0.0, -0.5180778503417969, -3.814697265625e-06, -0.016071319580078125, -1.9073486328125e-06, -0.000713348388671875, 0.0, -0.23684144020080566, -1.0728830375228426e-06, -0.14943146705627441, -1.537799835205078e-05, -6.866455078125e-05, -7.43865966796875e-05, -4.9591064453125e-05, -0.13237766921520233, -5.340576171875e-05, -7.62939453125e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.000476837158203125, -1.9073486328125e-06, -0.0023717880249023438, 0.0, -0.0010395050048828125, -0.0001239776611328125, -0.059569358825683594, -0.0001354217529296875, -2.288818359375e-05, -0.000232696533203125, -9.5367431640625e-06, -0.00011920928955078125, 0.0, -1.9073486328125e-06, -0.04734039306640625, 0.0, -0.000621795654296875, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.44513702392578125, -1.9073486328125e-06, -0.06038856506347656, 0.0, -0.00047588348388671875, 0.0, -0.6025466918945312, -5.960462772236497e-07, -0.47190749645233154, -1.9073486328125e-06, -1.9073486328125e-05, -6.4849853515625e-05, -3.62396240234375e-05, -0.10018313676118851, -0.0001068115234375, -0.0001544952392578125, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.000568389892578125, -1.9073486328125e-06, -0.00201416015625, 0.0]}], "gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n"}
{"beams": [{"inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = hearthbreaker.cards.minions()\n        if self.target.health < 7:\n            for i in range(0, len(player.minions)):\n                minion.die(self)\n        else:\n            for minion in game.other_player.minions:\n                minion.<UNK>(self)\n        player.draw()\n", "model_output": {"_type": "Module", "body": [{"name": "Flare", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 2, "_type": "Template7", "hole2": "ROGUE", "hole3": "EPIC", "hole0": "Flare"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"func": {"attr": "minions", "_type": "Attribute", "value": {"attr": "cards", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "_type": "Call"}}, {"orelse": [{"target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "other_player", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}}, "_type": "For", "body": [{"_type": "Expr", "value": {"func": {"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Name", "id": "minion"}}, "_type": "Call", "args": [{"_type": "Name", "id": "self"}]}}]}], "_type": "If", "test": {"ops": [{"_type": "Lt"}], "_type": "Compare", "left": {"attr": "health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "comparators": [{"_type": "Num", "n": 7}]}, "body": [{"target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Num", "n": 0}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}]}, "_type": "For", "body": [{"_type": "Expr", "value": {"func": {"attr": "die", "_type": "Attribute", "value": {"_type": "Name", "id": "minion"}}, "_type": "Call", "args": [{"_type": "Name", "id": "self"}]}}]}]}, {"_type": "Expr", "value": {"func": {"attr": "draw", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}, "_type": "Call"}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -11.786713722716769, "choice_history": [55, 124, 221, 63, 103, "Flare", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 86, 179, "Flare", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "EPIC", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 224, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 60, 93, 208, 37, 125, "<UNK>", "<EOS>", 14, 99, 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", 67, 112, 15, 104, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 205, 8, 208, 39, 130, "7", "<EOS>", 221, 65, 107, 19, 125, "i", "<EOS>", 14, 101, 19, 125, "range", "<EOS>", 209, 39, 130, "0", "<EOS>", 32, 101, 19, 125, "len", "<EOS>", 208, 29, 94, 19, 125, "player", "<EOS>", "minions", "<EOS>", 221, 64, 106, 14, 101, 11, 94, 19, 125, "minion", "<EOS>", "die", "<EOS>", 208, 37, 125, "self", "<EOS>", 221, 65, 107, 19, 125, "minion", "<EOS>", 11, 94, 11, 94, 19, 125, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 221, 64, 106, 14, 101, 11, 94, 19, 125, "minion", "<EOS>", "<UNK>", "<EOS>", 208, 37, 125, "self", "<EOS>", 64, 106, 14, 99, 11, 94, 19, 125, "player", "<EOS>", "draw", "<EOS>"], "score_history": [-1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -6.103515625e-05, -1.33514404296875e-05, -2.8013790142722428e-05, -0.0007335473783314228, -3.814697265625e-06, -4.1961669921875e-05, -1.9073486328125e-06, -6.544584903167561e-05, -8.630752563476562e-05, 0.0, -7.62939453125e-05, -0.5960378646850586, -3.814697265625e-05, -4.410734163684538e-06, -5.483625955093885e-06, -2.622600504764705e-06, -4.768370445162873e-07, -0.07916033267974854, -3.814697265625e-06, -0.001102447509765625, 0.0, -0.005462646484375, 0.0, -1.7642974853515625e-05, 0.0, 0.0, -0.0001392364501953125, 0.0, -7.152543730626348e-06, -3.576278118089249e-07, -1.9073486328125e-06, -2.491474151611328e-05, -1.1920928244535389e-07, 0.0, -7.081031799316406e-05, -4.768367489305092e-06, -0.29681968688964844, -9.5367431640625e-05, -1.9073486328125e-06, 0.0, 0.0, -9.5367431640625e-06, 0.0, -3.814697265625e-06, 0.0, -5.960462203802308e-06, 0.0, -2.47955322265625e-05, 0.0, -2.86102294921875e-05, -4.76837158203125e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.52587890625e-05, 0.0, -4.208087921142578e-05, -2.5033725250978023e-05, -0.016422271728515625, -0.0001354217529296875, -1.52587890625e-05, -9.34600830078125e-05, -3.814697265625e-06, -0.30989372730255127, -4.172316494077677e-06, -0.000560760498046875, -0.07520675659179688, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -0.0055999755859375, 0.0, -0.008359909057617188, 0.0, -0.8892936706542969, -1.9073486328125e-06, -0.7949624061584473, -0.000171661376953125, -0.6220178604125977, -0.002368927001953125, -0.060830116271972656, -3.0517578125e-05, -0.005481719970703125, 0.0, -0.1695709228515625, 0.0, -7.62939453125e-06, 0.0, -0.10282516479492188, 0.0, -1.800060272216797e-05, -1.1920928244535389e-07, -0.05740213394165039, 0.0, -5.7220458984375e-06, -0.2892589569091797, -3.814697265625e-06, -0.16760540008544922, -4.57763671875e-05, -0.342593252658844, 0.0, -0.007758140563964844, -0.1839752197265625, -0.0004425048828125, -1.71661376953125e-05, 0.0, -0.44962966442108154, 0.0, -0.06179237365722656, -0.0002422332763671875, -2.86102294921875e-05, -1.9073486328125e-06, -0.0010651350021362305, -1.1920928244535389e-07, -0.0002269744873046875, -0.038552284240722656, -4.9591064453125e-05, -0.00048601339221931994, 0.0, -0.13334178924560547, -7.2479248046875e-05, -1.33514404296875e-05, 0.0, -0.9420535564422607, -1.1920928244535389e-07, -0.000102996826171875, -0.30118560791015625, -0.0010528564453125, -0.03730583190917969, 0.0, -0.0005894899368286133, -1.0728830375228426e-06, -0.00013840198516845703, -9.5367431640625e-06, -0.0016231536865234375, -0.0014972686767578125, 0.0, 0.0, -0.3981475830078125, -3.814697265625e-06, -0.0003719329833984375, -0.0059146881103515625, 0.0, -0.03229677677154541, -0.0012056732084602118, -1.205269455909729, 0.0, -1.9073486328125e-06, -0.012273788452148438, -3.814697265625e-06, -0.0014219284057617188, 0.0, -0.011605262756347656, -0.43907737731933594, -0.0001125335693359375, -0.0002880096435546875, -1.9073486328125e-06, -0.06474184989929199, -1.5497195136049413e-06, -0.0005645751953125, 0.0, -0.035610198974609375, 0.0, -1.9073486328125e-06, 0.0, -0.1679525375366211, -8.225440979003906e-06, -0.005204556509852409, 0.0, -0.09852122515439987, -5.7220458984375e-06, -0.000484466552734375, -0.0012302398681640625, 0.0, -1.9073486328125e-06, -0.021837234497070312, -7.62939453125e-06, -2.47955322265625e-05, -0.06544303894042969, 0.0, -0.05287182331085205, -0.000818764150608331, -0.5295453071594238, -0.0001163482666015625, -1.33514404296875e-05, -0.3396329879760742, -1.9073486328125e-06, -0.9042474031448364, 0.0, -0.08696651458740234, -1.33514404296875e-05, -5.7220458984375e-06, -0.001171112060546875, -1.9073486328125e-06, -5.7220458984375e-06, -0.21078872680664062, 0.0, -0.004282951354980469, -1.5854737284826115e-05, -0.0221859198063612, -1.9073486328125e-06]}], "gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n"}
{"beams": [{"inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, stealth=True, auras=[Aura(1(), MinionSelector())])\n", "model_output": {"_type": "Module", "body": [{"name": "Gorehowl", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "WeaponCard"}], "body": [{"hole1": 7, "_type": "Template7", "hole2": "WARRIOR", "hole3": "EPIC", "hole0": "Gorehowl"}, {"name": "create_weapon", "_type": "FunctionDef", "body": [{"_type": "Return", "value": {"func": {"_type": "Name", "id": "Weapon"}, "_type": "Call", "keywords": [{"arg": "stealth", "_type": "keyword", "value": {"_type": "NameConstant", "value": true}}, {"arg": "auras", "_type": "keyword", "value": {"elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "1"}, {"_type": "Template38", "hole0": "MinionSelector"}]}], "_type": "List"}}], "args": [{"_type": "Num", "n": 7}, {"_type": "Num", "n": 1}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}]}]}, "score": -6.790142102178606, "choice_history": [55, 124, 221, 63, 103, "Gorehowl", "<EOS>", 208, 37, 125, "Weapon", "Card", "<EOS>", 222, 86, 179, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", 66, 108, "create_weapon", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 221, 69, 132, 14, 102, 19, 125, "Weapon", "<EOS>", 209, 39, 130, "7", "<EOS>", 39, 130, "1", "<EOS>", 217, 54, 197, "stealth", "<EOS>", 20, 126, "True", "<EOS>", 54, 197, "auras", "<EOS>", 17, 120, 208, 32, 101, 19, 125, "Aura", "<EOS>", 209, 49, 174, "1", "<EOS>", 49, 174, "Minion", "Selector", "<EOS>"], "score_history": [-1.9073486328125e-06, -5.7220458984375e-06, -1.1444091796875e-05, -1.33514404296875e-05, -3.814697265625e-06, -0.0002985746832564473, -0.011195098981261253, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0007963180541992188, -5.745887756347656e-05, -1.9073486328125e-06, -6.4849853515625e-05, -0.725956916809082, -2.09808349609375e-05, -0.0002846380230039358, -0.0006816387176513672, -0.0016776323318481445, -2.825225419655908e-05, -0.9191914796829224, -0.0009136199951171875, -0.47170841693878174, -7.748603820800781e-06, -0.003520965576171875, 0.0, -0.019800662994384766, 0.0, 0.0, -0.05474567413330078, -1.9073486328125e-06, -3.3974247344303876e-05, -1.1920922133867862e-06, -1.9073486328125e-06, -7.62939453125e-06, -2.145764938177308e-06, -0.0012607574462890625, -6.29425048828125e-05, -0.000110626220703125, -6.4849853515625e-05, -0.003421783447265625, -4.9591064453125e-05, 0.0, -0.051838040351867676, -1.33514404296875e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -0.011655447073280811, -2.098078948620241e-05, -2.09808349609375e-05, 0.0, -0.5683203935623169, -3.814689989667386e-06, -0.23825359344482422, -0.0033512115478515625, -1.33514404296875e-05, -0.5140066146850586, -1.9073486328125e-06, -0.0018281936645507812, -2.6702880859375e-05, -0.0006021261215209961, -9.5367431640625e-06, -0.9163665771484375, -3.0517578125e-05, -0.63972008228302, -2.47955322265625e-05, -0.0001468658447265625, -9.5367431640625e-05, -0.000171661376953125, -0.0009860992431640625, 0.0, -0.0001392364501953125, 0.0, -0.3822791576385498, -4.2557716369628906e-05, -0.1060647964477539, -0.0027818679809570312, -0.0021915435791015625, -0.3453833758831024, -0.17113596200942993, -0.3080892562866211, -3.814697265625e-06, -0.3069228529930115, -0.0015529394149780273, 0.0]}], "gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n"}
{"beams": [{"inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"_type": "Module", "body": [{"name": "Hound", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "BEAST", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Hound"}, {"_type": "Num", "n": 1}, {"attr": "HUNTER", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "COMMON", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 1, "_type": "Template11", "hole0": 1}]}]}, "score": -0.46582771642214027, "choice_history": [55, 124, 221, 63, 103, "Hound", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 212, 40, 134, "Hound", "<EOS>", 39, 130, "1", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 38, 126, "False", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 73, 146, "1", "<EOS>", "1", "<EOS>"], "score_history": [-7.62939453125e-06, -4.00543212890625e-05, -3.0517578125e-05, -3.4332275390625e-05, -0.0002231597900390625, -5.364412118069595e-06, -0.0034498744644224644, -2.86102294921875e-05, -0.000400543212890625, 0.0, -1.7642971215536818e-05, -7.867813110351562e-05, -1.1444091796875e-05, -1.52587890625e-05, -0.0005950927734375, -1.1444091796875e-05, -1.8715853002504446e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1444091796875e-05, -1.9073486328125e-06, -0.00021693939925171435, -2.741813204920618e-06, -5.91278076171875e-05, -0.0008678436279296875, -5.7220458984375e-06, -2.47955322265625e-05, -0.021989822387695312, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -7.033347174001392e-06, -3.635883331298828e-05, -5.173683166503906e-05, -3.814697265625e-06, -0.0016269683837890625, -4.00543212890625e-05, -3.814697265625e-06, -7.271765298355604e-06, -0.0006836230168119073, -3.814697265625e-06, -1.9073486328125e-06, -0.0004667035536840558, 0.0, 0.0, 0.0, -1.9073486328125e-05, 0.0, -2.09808349609375e-05, -3.981518239015713e-05, -0.04530489444732666, 0.0, 0.0, 0.0, -2.288818359375e-05, -1.9073486328125e-06, -1.71661376953125e-05, -3.075552376685664e-05, -0.3799210786819458, -0.0002331733558094129, -5.340576171875e-05, -1.33514404296875e-05, -8.463859558105469e-06, -9.5367431640625e-06, -2.86102294921875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -2.6702880859375e-05, 0.0, -0.000179290771484375, 0.0, -0.0067615509033203125, -5.555152893066406e-05, -0.001514434814453125, -0.0003948211669921875, -1.883486947917845e-05, -8.344646857949556e-07, 1.1709164482454071e-07, -1.1920928244535389e-07]}], "gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}
{"beams": [{"inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "model_output": {"_type": "Module", "body": [{"name": "InjuredBlademaster", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 3, "hole4": [{"_type": "Num", "n": 4}], "hole3": "Damage", "hole5": "MinionSelector", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template38", "hole0": "EnemyPlayer"}, {"_type": "Template38", "hole0": "RandomPicker"}], "_type": "Template8", "hole2": "RARE", "hole0": "Injured Blademaster"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 7, "_type": "Template11", "hole0": 4}]}]}, "score": -0.7418251604104853, "choice_history": [55, 124, 221, 63, 103, "Injured", "Blademaster", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 87, 188, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 208, 39, 130, "4", "<EOS>", "Minion", "Selector", "<EOS>", 210, 38, 127, "Null", "<EOS>", 49, 174, "Enemy", "Player", "<EOS>", 49, 174, "Random", "Picker", "<EOS>", 73, 146, "4", "<EOS>", "7", "<EOS>"], "score_history": [-2.86102294921875e-05, -4.38690185546875e-05, -1.52587890625e-05, -5.340576171875e-05, -5.7220458984375e-06, -0.0016971721779555082, -0.000957030919380486, -0.00011419619113439694, -3.4332275390625e-05, -1.1444091796875e-05, 0.0, -9.059864169103093e-06, -5.900859832763672e-05, -3.361701965332031e-05, -8.0108642578125e-05, -0.0008697509765625, -5.91278076171875e-05, -1.5616416931152344e-05, -1.7881377516459906e-06, -7.62939453125e-06, -0.00011444091796875, -3.4332275390625e-05, -0.0007722375448793173, -2.47952248173533e-05, -3.814697265625e-06, -0.008370399475097656, -0.09720420837402344, -0.001006599864922464, -0.0006208272534422576, -1.1563301086425781e-05, -3.814697265625e-06, -0.0057070255279541016, -8.344646857949556e-07, -0.10842502117156982, -2.384185791015625e-06, -0.0036344388499855995, -4.7205852752085775e-05, -1.52587890625e-05, -0.0001964569091796875, 0.0, -0.0012736053904518485, -2.6464205802767538e-05, -0.26604747772216797, -0.00025022029876708984, 0.0, -0.058936119079589844, -0.000682830810546875, -0.001522064208984375, -0.00023090839385986328, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.007288575172424316, -1.7642974853515625e-05, -5.7220458984375e-06, -0.000629425048828125, -1.9073486328125e-06, -0.17318403720855713, -0.0006002154550515115, -1.3232229321147315e-05, -8.20159912109375e-05, -7.62939453125e-06, -1.621246337890625e-05, -1.7881377516459906e-06, -0.0006626842659898102, -3.48086905432865e-05]}], "gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}
{"beams": [{"inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(\n            <UNK>AttackEqualTo(1)), ActionTag(Damage(1), CharacterSelector(\n            players=EnemyPlayer(), picker=RandomPicker(), condition=Null)))])\n", "model_output": {"_type": "Module", "body": [{"name": "KnifeJuggler", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 2, "_type": "Template5", "hole2": "ALL", "hole0": "Knife Juggler"}, {"hole1": 2, "hole4": [{"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"_type": "Template37", "hole0": 1}, {"func": {"_type": "Name", "id": "CharacterSelector"}, "_type": "Call", "keywords": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template38", "hole0": "EnemyPlayer"}}, {"arg": "picker", "_type": "keyword", "value": {"_type": "Template38", "hole0": "RandomPicker"}}, {"arg": "condition", "_type": "keyword", "value": {"_type": "NameConstant", "value": "Null"}}]}]}], "hole3": [{"func": {"_type": "Name", "id": "<UNK>AttackEqualTo"}, "_type": "Call", "args": [{"_type": "Num", "n": 1}]}], "_type": "Template2", "hole2": "MinionSummoned", "hole0": 3}]}]}, "score": -4.151937704620984, "choice_history": [55, 124, 221, 63, 103, "Knife", "Juggler", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 84, 177, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", 77, 157, "3", "<EOS>", "2", "<EOS>", "Minion", "Summoned", "<EOS>", 208, 32, 101, 19, 125, "<UNK>", "Attack", "Equal", "To", "<EOS>", 208, 39, 130, "1", "<EOS>", 208, 32, 101, 19, 125, "Action", "Tag", "<EOS>", 209, 48, 173, "1", "<EOS>", 32, 100, 19, 125, "Character", "Selector", "<EOS>", 218, 54, 197, "players", "<EOS>", 26, 174, "Enemy", "Player", "<EOS>", 54, 197, "picker", "<EOS>", 26, 174, "Random", "Picker", "<EOS>", 54, 197, "condition", "<EOS>", 20, 127, "Null", "<EOS>"], "score_history": [-2.6702880859375e-05, -1.9073486328125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -3.814697265625e-06, -0.010321217589080334, -0.00976794958114624, -0.05612025409936905, -1.9073486328125e-06, -2.47955322265625e-05, 0.0, -3.576278118089249e-07, -8.213520050048828e-05, -4.172325134277344e-06, -2.47955322265625e-05, -0.013268470764160156, -0.00074005126953125, -0.0001951265730895102, -1.0371208190917969e-05, -6.29425048828125e-05, -1.1444091796875e-05, -0.00018799315148498863, -1.311301275563892e-06, -0.000274656864348799, -1.52587890625e-05, -0.15075302124023438, -0.007328987121582031, -4.768369876728684e-07, -1.9907753085135482e-05, -5.7576173276174814e-05, -2.646424763952382e-05, -0.4409373998641968, -0.7368779182434082, -0.00015926251944620162, -2.86102294921875e-05, -0.008843421936035156, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -1.0475188493728638, -0.3355775773525238, -0.419921875, -0.08793938159942627, -0.000152587890625, -6.29425048828125e-05, -0.0003185272216796875, 0.0, -0.0009314692579209805, -4.601478576660156e-05, -0.003907203674316406, -0.0050411224365234375, -0.000823974609375, -3.814697265625e-06, 0.0, -0.05084717273712158, -2.86102294921875e-05, -1.1920928244535389e-07, -0.0015573501586914062, -0.014296531677246094, -0.0004425048828125, -0.0008988012559711933, -1.52587890625e-05, -0.00037384033203125, -0.0001506805419921875, -0.002429962158203125, -5.7220458984375e-06, -0.026895761489868164, -0.0022802352905273438, -2.47955322265625e-05, -0.6470499038696289, -0.00225830078125, -7.62939453125e-06, -0.0016918182373046875, -7.62939453125e-06, -0.0008220672607421875, -0.000865936279296875, -0.005775809288024902, -4.017353057861328e-05, 0.0, -0.005553245544433594, -6.67572021484375e-05, -0.012253761291503906, 0.0, -0.003078460693359375, -4.38690185546875e-05, -0.0019840002059936523, -0.0003158939362037927, -0.00022590160369873047, -0.00087738037109375, -4.76837158203125e-05, -0.02322673797607422, -8.344646857949556e-07, -0.0053272247314453125, -0.00130462646484375, -0.000370025634765625, 0.0]}], "gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n"}
{"beams": [{"inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(player=BothPlayer()),\n            ActionTag(Give(character()), SelfSelector())), Aura(Give(\n            character()), SelfSelector())])\n", "model_output": {"_type": "Module", "body": [{"name": "Lightwell", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 2, "_type": "Template5", "hole2": "WARRIOR", "hole0": "Lightwell"}, {"hole1": 5, "_type": "Template10", "hole2": "effects", "hole3": {"elts": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "TurnEnded"}, "_type": "Call", "keywords": [{"arg": "player", "_type": "keyword", "value": {"_type": "Template38", "hole0": "BothPlayer"}}]}, {"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "character"}]}, {"_type": "Template38", "hole0": "SelfSelector"}]}]}, {"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "character"}]}, {"_type": "Template38", "hole0": "SelfSelector"}]}], "_type": "List"}, "hole0": 0}]}]}, "score": -6.7379832182687664, "choice_history": [55, 124, 221, 63, 103, "Lightwell", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 84, 177, "Lightwell", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", 72, 145, "0", "<EOS>", "5", "<EOS>", "effects", "<EOS>", 17, 120, 209, 32, 101, 19, 125, "Effect", "<EOS>", 209, 32, 100, 19, 125, "Turn", "Ended", "<EOS>", 216, 54, 197, "player", "<EOS>", 26, 174, "Both", "Player", "<EOS>", 32, 101, 19, 125, "Action", "Tag", "<EOS>", 209, 32, 101, 19, 125, "Give", "<EOS>", 208, 49, 174, "character", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", 32, 101, 19, 125, "Aura", "<EOS>", 209, 32, 101, 19, 125, "Give", "<EOS>", 208, 49, 174, "character", "<EOS>", 49, 174, "Self", "Selector", "<EOS>"], "score_history": [0.0, -9.5367431640625e-06, -3.814697265625e-06, -1.52587890625e-05, -3.814697265625e-06, -0.00861695408821106, -0.4651654064655304, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.0007921457290649414, -4.38690185546875e-05, -2.0265579223632812e-06, -1.9073486328125e-05, -0.24096012115478516, -9.1552734375e-05, -1.8954096958623268e-05, -9.179100743494928e-06, -1.9431096006883308e-05, -1.0967194612021558e-05, -0.5376994609832764, -4.00543212890625e-05, -0.5900802612304688, -2.6702880859375e-05, -1.07287787614041e-05, -5.960462772236497e-07, -3.719300730153918e-05, -3.1351610232377425e-05, -0.06011176109313965, -2.2649763195659034e-05, -0.0003795623779296875, -9.918212890625e-05, -0.1595315933227539, -9.5367431640625e-06, -3.24249267578125e-05, -0.00047206878662109375, 0.0, -0.0007039308547973633, -1.9073486328125e-06, -4.76837158203125e-05, -0.011742591857910156, -0.05647850036621094, -0.0002841949462890625, 0.0, -0.010003805160522461, -0.043853044509887695, -1.9073486328125e-06, -0.0001678466796875, -1.33514404296875e-05, -2.47955322265625e-05, -0.0013352632522583008, 0.0, -5.7220458984375e-06, 0.0, -0.0005645751953125, -3.814697265625e-06, 0.0, -3.814697265625e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.00045752525329589844, -5.340576171875e-05, -2.622604142743512e-06, -9.5367431640625e-05, -0.04946136474609375, -3.814697265625e-06, -2.47955322265625e-05, 0.0, -0.09747683256864548, -0.0033265352249145508, -1.9073486328125e-06, -0.3526182174682617, -9.5367431640625e-06, -0.4142988324165344, -0.4866318702697754, -0.0002307891845703125, 0.0, -0.1594151258468628, -2.9802317840221804e-06, 0.0, -2.47955322265625e-05, -3.814697265625e-06, -1.71661376953125e-05, 0.0, -0.6250166893005371, -5.841255187988281e-06, -0.001194000244140625, -0.0191497802734375, -3.62396240234375e-05, -2.288818359375e-05, 0.0, -0.7017508745193481, -0.006262779235839844, 0.0, -0.2781515121459961, -1.33514404296875e-05, -0.5453758239746094, -0.4774519205093384, -0.03716278076171875, -1.9073486328125e-06, -0.2925717830657959, -4.172325134277344e-06, 0.0]}], "gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n"}
{"beams": [{"inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.PIRATE)), ActionTag(Give(ChangeAttack(1)),\n            SelfSelector()))])\n", "model_output": {"_type": "Module", "body": [{"name": "ManaWyrm", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 1, "_type": "Template4", "hole2": "ALL", "hole0": "Mana Wyrm"}, {"hole1": 3, "hole4": [{"func": {"_type": "Name", "id": "ActionTag"}, "_type": "Call", "args": [{"hole1": "ChangeAttack", "_type": "Template32", "hole2": 1, "hole0": "Give"}, {"_type": "Template38", "hole0": "SelfSelector"}]}], "hole3": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "PIRATE", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}], "_type": "Template2", "hole2": "MinionSummoned", "hole0": 1}]}]}, "score": -1.1245349021496267, "choice_history": [55, 124, 221, 63, 103, "Mana", "Wyrm", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 83, 176, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 77, 157, "1", "<EOS>", "3", "<EOS>", "Minion", "Summoned", "<EOS>", 208, 32, 101, 19, 125, "Is", "Type", "<EOS>", 208, 29, 94, 19, 125, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 208, 32, 101, 19, 125, "Action", "Tag", "<EOS>", 209, 44, 168, "Give", "<EOS>", "Change", "Attack", "<EOS>", "1", "<EOS>", 49, 174, "Self", "Selector", "<EOS>"], "score_history": [-1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -1.71661376953125e-05, -1.9073486328125e-06, -0.00020656836568377912, -5.1855990022886544e-05, -0.00029465247644111514, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -2.0265579223632812e-06, -1.33514404296875e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.04714775085449219, -3.0517578125e-05, -3.576277322281385e-06, -0.00016331110964529216, -0.00011444091796875, -3.933906555175781e-06, -6.07981564826332e-06, -2.3841855067985307e-07, -0.08805155754089355, 0.0, -0.40314674377441406, -0.18532085418701172, -2.3841766960686073e-07, -8.463859558105469e-06, -0.00041553983464837074, -7.867813110351562e-06, -0.00643312931060791, -0.027342796325683594, -7.49826431274414e-05, -0.00284576416015625, -0.14474010467529297, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.06534016132354736, -0.00013172626495361328, -3.743171691894531e-05, -1.9073486328125e-06, -5.7220458984375e-05, 0.0, -0.0001773834228515625, 0.0, -0.00310516357421875, -7.62939453125e-06, -0.1390848159790039, -1.9073486328125e-06, -1.1444091796875e-05, -2.6702880859375e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.002031564712524414, -0.000186920166015625, -1.1920928244535389e-07, -1.71661376953125e-05, -0.0036478042602539062, -0.000881195068359375, -0.0001068115234375, -1.9073486328125e-05, -0.0003110170364379883, -0.001089930534362793, -1.9073486328125e-06, -0.0010063876397907734, -2.47955322265625e-05, -0.0004291534423828125, -1.9073486328125e-06, -0.00020980754925403744, -7.17630609869957e-05, 0.0]}], "gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n"}
{"beams": [{"inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "model_output": {"_type": "Module", "body": [{"name": "Mogu'shanWarden", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 4, "_type": "Template4", "hole2": "ALL", "hole0": "Mogu'shan Warden"}, {"hole1": 7, "_type": "Template10", "hole2": "taunt", "hole3": {"_type": "NameConstant", "value": true}, "hole0": 1}]}]}, "score": -0.12078625616027239, "choice_history": [55, 124, 221, 63, 103, "Mogu'shan", "Warden", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 83, 176, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", 72, 145, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 20, 126, "True", "<EOS>"], "score_history": [0.0, -2.09808349609375e-05, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0007939761853776872, -0.0012647256953641772, -0.0013168969890102744, -1.9073486328125e-06, -1.52587890625e-05, 0.0, -7.152555099310121e-07, -8.213520050048828e-05, 0.0, -1.33514404296875e-05, -0.0006923675537109375, -0.000141143798828125, -2.276871418871451e-05, -7.987022399902344e-06, -5.14984130859375e-05, -2.5153160095214844e-05, -0.1124410629272461, -6.675716122117592e-06, -0.00024330410815309733, 0.0, -0.001468658447265625, -1.9073486328125e-05, -4.768324288306758e-06, -9.536738616588991e-07, -1.2397689715726301e-05, -2.3841830625315197e-06, -0.0011489391326904297, -1.0609570381348021e-05, -0.000705718994140625, -0.0001373291015625, -0.0001201629638671875, 0.0]}], "gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}
{"beams": [{"inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if len(player.minions) < 7:\n            for i in range(0, 2):\n                <UNK> = Mana<UNK>()\n                <UNK>.summon(player, player.game, len(player.minions))\n        elif len(player.minions) < 7:\n            option = game.random_choice(player)\n            option.use(player, game)\n            option.use(player, game)\n            option.use(player, game)\n            option.use(player, game)\n", "model_output": {"_type": "Module", "body": [{"name": "Nourish", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 5, "_type": "Template5", "hole2": "DRUID", "hole0": "Nourish"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"orelse": [{"_type": "If", "test": {"ops": [{"_type": "Lt"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}, "comparators": [{"_type": "Num", "n": 7}]}, "body": [{"targets": [{"_type": "Name", "id": "option"}], "_type": "Assign", "value": {"func": {"attr": "random_choice", "_type": "Attribute", "value": {"_type": "Name", "id": "game"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}]}}, {"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Name", "id": "option"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Name", "id": "option"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Name", "id": "option"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Name", "id": "option"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}]}], "_type": "If", "test": {"ops": [{"_type": "Lt"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}, "comparators": [{"_type": "Num", "n": 7}]}, "body": [{"target": {"_type": "Name", "id": "i"}, "iter": {"func": {"_type": "Name", "id": "range"}, "_type": "Call", "args": [{"_type": "Num", "n": 0}, {"_type": "Num", "n": 2}]}, "_type": "For", "body": [{"targets": [{"_type": "Name", "id": "<UNK>"}], "_type": "Assign", "value": {"_type": "Template38", "hole0": "Mana<UNK>"}}, {"_type": "Expr", "value": {"func": {"attr": "summon", "_type": "Attribute", "value": {"_type": "Name", "id": "<UNK>"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"attr": "game", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}, {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}]}]}}]}]}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -12.600820645813556, "choice_history": [55, 124, 221, 63, 103, "Nourish", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 84, 177, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 222, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 67, 112, 15, 104, 14, 101, 19, 125, "len", "<EOS>", 208, 29, 94, 19, 125, "player", "<EOS>", "minions", "<EOS>", 205, 8, 208, 39, 130, "7", "<EOS>", 221, 65, 107, 19, 125, "i", "<EOS>", 14, 101, 19, 125, "range", "<EOS>", 209, 39, 130, "0", "<EOS>", 39, 130, "2", "<EOS>", 222, 60, 93, 208, 37, 125, "<UNK>", "<EOS>", 26, 174, "Mana", "<UNK>", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "<UNK>", "<EOS>", "summon", "<EOS>", 210, 37, 125, "player", "<EOS>", 29, 94, 19, 125, "player", "<EOS>", "game", "<EOS>", 32, 101, 19, 125, "len", "<EOS>", 208, 29, 94, 19, 125, "player", "<EOS>", "minions", "<EOS>", 221, 67, 111, 15, 104, 14, 101, 19, 125, "len", "<EOS>", 208, 29, 94, 19, 125, "player", "<EOS>", "minions", "<EOS>", 205, 8, 208, 39, 130, "7", "<EOS>", 225, 60, 93, 208, 37, 125, "option", "<EOS>", 14, 101, 11, 94, 19, 125, "game", "<EOS>", "random_choice", "<EOS>", 208, 37, 125, "player", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "option", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "option", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "option", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "option", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>"], "score_history": [-1.9073486328125e-06, -4.38690185546875e-05, -5.7220458984375e-06, -1.1444091796875e-05, -7.62939453125e-06, -2.3007127310847864e-05, -0.0010843012714758515, 0.0, -0.000152587890625, -1.9073486328125e-06, -0.007110476493835449, -1.3470632438838948e-05, -3.62396240234375e-05, -0.0557403564453125, -0.1576070785522461, -0.000213623046875, -2.2649765014648438e-06, -0.0005805492401123047, -0.0002924968139268458, -3.2544132409384474e-05, -0.13322079181671143, -0.0001209901092806831, -0.0004558563232421875, -3.814697265625e-06, -0.0004769563674926758, -2.3126602172851562e-05, -1.52587890625e-05, -2.47955322265625e-05, -5.7220458984375e-06, -1.1682510375976562e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -5.924701690673828e-05, -2.6821824576472864e-05, -0.6286020278930664, -0.0040111541748046875, -3.814697265625e-06, 0.0, 0.0, -0.0005817413330078125, 0.0, -0.02435302734375, 0.0, -6.770858453819528e-05, -8.344646857949556e-07, -0.0004172325134277344, -3.576278118089249e-07, -9.5367431640625e-06, -3.814697265625e-05, 0.0, -4.57763671875e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -3.933906555175781e-06, -0.00023029123258311301, -0.19075584411621094, -0.0019245147705078125, -0.04947662353515625, -0.00183868408203125, -0.036529541015625, -1.9073486328125e-06, -0.0001220703125, -5.7220458984375e-06, -0.0011544227600097656, -4.780211747856811e-05, -2.86102294921875e-05, -0.0023021697998046875, -1.52587890625e-05, -0.06083202362060547, 0.0, -5.7220458984375e-06, -2.3841830625315197e-06, -0.0017921924591064453, -2.0265579223632812e-06, -7.62939453125e-05, -0.0017681121826171875, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.04401130974292755, -0.00015079975128173828, -0.01921558380126953, -0.7275991439819336, -0.0001392364501953125, -4.76837158203125e-05, 0.0, -0.026897549629211426, -2.3841855067985307e-07, -0.04086875915527344, -1.9073486328125e-06, -8.58306884765625e-05, 0.0, -0.000664830207824707, -8.940672159951646e-06, -1.9073486328125e-05, -7.62939453125e-06, 0.0, -0.0010688392212614417, -5.006789251638111e-06, -0.0034494400024414062, -3.814697265625e-06, -0.8234506249427795, -9.536738616588991e-07, -0.030496597290039062, -0.021526336669921875, -1.1444091796875e-05, -8.0108642578125e-05, -1.1444091796875e-05, -1.9073486328125e-06, -0.012274384498596191, -1.6569983927183785e-05, -0.015176773071289062, 0.0, -0.17578907310962677, -0.4365302622318268, -0.0002820491208694875, -0.000415802001953125, 0.0, -9.5367431640625e-06, -7.62939453125e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.0077533721923828125, 0.0, -0.014070749282836914, -4.0531158447265625e-06, -0.004339337348937988, 0.0, -0.000152587890625, -5.91278076171875e-05, 0.0, -9.5367431640625e-06, -1.1920928244535389e-07, -0.3365201950073242, 0.0, -1.9073486328125e-05, 0.0, -0.008280754089355469, -1.1920928244535389e-07, -0.0006573200225830078, -2.5033950805664062e-05, -0.0006608963012695312, -8.96453857421875e-05, -4.76837158203125e-05, -1.9073486328125e-06, -0.0005599260330200195, -2.622600959512056e-06, -1.9073486328125e-06, -3.0517578125e-05, 0.0, -0.000164031982421875, 0.0, -0.00010883808135986328, -2.7418097943154862e-06, -0.0007576941279694438, -2.0265579223632812e-06, -0.00043487548828125, -0.011530876159667969, -0.0021266937255859375, -0.0018901824951171875, -3.814697265625e-06, -0.005687713623046875, -3.814697265625e-06, -0.0006885528564453125, -2.09808349609375e-05, -0.0005710124969482422, -3.099436753473128e-06, -8.20159912109375e-05, -0.006632804870605469, -1.9073486328125e-05, -0.09152412414550781, 0.0, -6.592273712158203e-05, -5.125986263010418e-06, -0.0006092782714404166, -2.1457672119140625e-06, -6.4849853515625e-05, -0.000278472900390625, -1.71661376953125e-05, -6.103515625e-05, -3.814697265625e-06, -0.01627584733068943, -5.543231964111328e-05, -0.44673633575439453, -0.037929534912109375, -1.71661376953125e-05, -4.38690185546875e-05, -2.86102294921875e-05, 0.0, -1.6431808471679688, -7.4384493927937e-05, -0.000885009765625, -0.000156402587890625, -1.9073486328125e-05, 0.0, -0.5310764312744141, 0.0, -0.28313732147216797, -8.344646857949556e-07, -0.11614620685577393, 0.0, -0.0002727508544921875, -0.000213623046875, 0.0, -0.8939716815948486, -8.821448318485636e-06, -5.14984130859375e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -0.0014934539794921875, 0.0, -0.9348061084747314, -1.0728831512096804e-05, -0.008465766906738281, -1.9073486328125e-06, -1.33514404296875e-05, -0.0002193450927734375, 0.0, -0.00020313262939453125, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -1.728534698486328e-05, -3.6596713471226394e-05, -0.3452930450439453, -0.0001354217529296875, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.0445404052734375, 0.0, -0.586807370185852, -6.0796710386057384e-06, -0.02138233184814453, -1.9073486328125e-06, -7.62939453125e-06, -0.0004119873046875, 0.0, -0.00040149688720703125, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -1.1563301086425781e-05, -4.684855593950488e-05, -0.45618629455566406, -0.0001392364501953125, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.05863380432128906, 0.0, -0.6652594804763794, -7.033342626527883e-06, -0.019960403442382812, -1.9073486328125e-06, -7.62939453125e-06, -0.00040435791015625, 0.0, -0.000453948974609375, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -9.655952453613281e-06, -5.423930997494608e-05, -0.5021162033081055, -0.000133514404296875, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.05973625183105469, 0.0, -0.6602188348770142, -7.152551916078664e-06, -0.0202789306640625, -1.9073486328125e-06, -7.62939453125e-06, -0.0003910064697265625, 0.0, -0.00046062469482421875, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -9.655952453613281e-06, -5.5669759603915736e-05]}], "gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n"}
{"beams": [{"inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>(player.hero.calculate_max_health())\n        self.target.add_buff(Buff(ManaChange(-3)))\n", "model_output": {"_type": "Module", "body": [{"name": "Preparation", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 0, "_type": "Template5", "hole2": "ROGUE", "hole0": "Preparation"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Expr", "value": {"func": {"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}, "_type": "Call", "args": [{"func": {"attr": "calculate_max_health", "_type": "Attribute", "value": {"attr": "hero", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call"}]}}, {"_type": "Expr", "value": {"func": {"attr": "add_buff", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "ManaChange"}, "_type": "Call", "args": [{"op": {"_type": "USub"}, "_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}}]}]}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -7.656763013769627, "choice_history": [55, 124, 221, 63, 103, "Preparation", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 84, 177, "Preparation", "<EOS>", "0", "<EOS>", "ROGUE", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 223, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "player", "<EOS>", "<UNK>", "<EOS>", 208, 32, 99, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "hero", "<EOS>", "calculate_max_health", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 208, 32, 101, 19, 125, "Buff", "<EOS>", 208, 32, 101, 19, 125, "Mana", "Change", "<EOS>", 208, 50, 192, 90, 21, 130, "3", "<EOS>"], "score_history": [-3.62396240234375e-05, -1.33514404296875e-05, -3.24249267578125e-05, -1.1444091796875e-05, -3.814697265625e-06, -6.568216485902667e-05, -0.00022852403344586492, 0.0, -5.14984130859375e-05, -1.9073486328125e-06, -2.491474151611328e-05, -9.775161743164062e-06, -1.9073486328125e-06, -0.0001220703125, -0.2551116943359375, -8.58306884765625e-05, -1.3351351299206726e-05, -0.00012505054473876953, -4.410734163684538e-06, -3.4570634852570947e-06, -0.7070364952087402, -3.814697265625e-06, -0.004405975341796875, -1.9073486328125e-06, -2.7894973754882812e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0001010894775390625, 0.0, -7.343276229221374e-05, -1.1920928244535389e-07, -1.1444091796875e-05, -6.496906280517578e-05, 0.0, -3.814697265625e-06, -4.816054934053682e-05, -2.3484131816076115e-05, -0.4437570571899414, -0.000942230224609375, 0.0, 0.0, -1.33514404296875e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.0001220703125, -1.9073486328125e-06, -1.430511474609375e-05, 0.0, -0.00018358230590820312, 0.0, -3.814697265625e-06, -6.29425048828125e-05, -1.9073486328125e-06, -7.62939453125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.24249267578125e-05, -7.736658153589815e-05, -0.016153335571289062, -1.1444091796875e-05, -0.0001659393310546875, -4.38690185546875e-05, -1.71661376953125e-05, -3.814697265625e-06, -0.23274898529052734, 0.0, -0.0019474029541015625, -3.576278118089249e-07, -0.027812600135803223, -0.000110626220703125, -0.059871673583984375, -0.006691932678222656, -0.39455223083496094, -0.03009319305419922, -3.814697265625e-06, -0.0884695053100586, 0.0, -0.0011692047119140625, 0.0, -0.553858757019043, -6.318092346191406e-05, -1.3061563968658447, -1.1563301086425781e-05, -1.347247838973999, -3.814697265625e-06, -0.5472784042358398, -3.814697265625e-06, -5.7220458984375e-06, -0.000885009765625, -3.814697265625e-06, 0.0, -0.02208709716796875, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -0.5799665451049805, -1.33514404296875e-05, -0.008087396621704102, -2.0265579223632812e-06, -0.17362093925476074, -5.7220458984375e-06, -0.000148773193359375, -0.6220855712890625, -0.12248611450195312, -2.09808349609375e-05, 0.0, -0.002954721450805664, -0.00017774105072021484, -0.009115219116210938, -9.1552734375e-05, -3.62396240234375e-05, -3.24249267578125e-05, 0.0, -0.005320429336279631, -0.0015130043029785156, -1.1920928244535389e-07, -0.0003871917724609375, -0.0010471343994140625, -0.031047821044921875, -0.0004062652587890625, -0.0001220703125, -7.05718994140625e-05, -0.04742461442947388, -0.00010097026824951172]}], "gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n"}
{"beams": [{"inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n        self.player = Null\n\n    def _reveal(self, minion):\n        if len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            self.target.die(self)\n            self.player.trigger('<UNK>', mirror)\n            self.player.trigger('<UNK>', mirror)\n\n    def deactivate(self, player):\n        player.game.current_player('character_attack', self._reveal)\n        self.player = player\n\n    def deactivate(self, player):\n        player.game.current_player('character_attack', self._reveal)\n        self.player = player\n", "model_output": {"_type": "Module", "body": [{"name": "Repentance", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SecretCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 1, "_type": "Template18", "hole2": "MAGE", "hole0": "Repentance"}, {"targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"name": "_reveal", "_type": "FunctionDef", "body": [{"_type": "If", "test": {"ops": [{"_type": "Lt"}], "_type": "Compare", "left": {"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}, "comparators": [{"_type": "Num", "n": 7}]}, "body": [{"targets": [{"_type": "Name", "id": "mirror"}], "_type": "Assign", "value": {"func": {"attr": "copy", "_type": "Attribute", "value": {"_type": "Name", "id": "minion"}}, "_type": "Call", "args": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}}, {"_type": "Expr", "value": {"func": {"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Name", "id": "mirror"}}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "len"}, "_type": "Call", "args": [{"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}]}}, {"_type": "Expr", "value": {"func": {"attr": "die", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"_type": "Name", "id": "self"}]}}, {"_type": "Expr", "value": {"func": {"attr": "trigger", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}]}}, {"_type": "Expr", "value": {"func": {"attr": "trigger", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "<UNK>"}, {"_type": "Name", "id": "mirror"}]}}]}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "minion", "_type": "arg"}]}}, {"name": "deactivate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}}, {"targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "_type": "Assign", "value": {"_type": "Name", "id": "player"}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}, {"name": "deactivate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "current_player", "_type": "Attribute", "value": {"attr": "game", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}}, {"targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "_type": "Assign", "value": {"_type": "Name", "id": "player"}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}]}]}, "score": -13.221895071903916, "choice_history": [55, 124, 221, 63, 103, "Repentance", "<EOS>", 208, 37, 125, "Secret", "Card", "<EOS>", 224, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 222, 75, 154, "Repentance", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", 60, 93, 208, 29, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", 20, 127, "Null", "<EOS>", 66, 108, "_reveal", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "minion", "<EOS>", 221, 67, 111, 15, 104, 14, 101, 19, 125, "len", "<EOS>", 208, 29, 94, 11, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 205, 8, 208, 39, 130, "7", "<EOS>", 225, 60, 93, 208, 37, 125, "mirror", "<EOS>", 14, 101, 11, 94, 19, 125, "minion", "<EOS>", "copy", "<EOS>", 208, 29, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", 64, 106, 14, 101, 11, 94, 19, 125, "mirror", "<EOS>", "<UNK>", "<EOS>", 208, 32, 101, 19, 125, "len", "<EOS>", 208, 29, 94, 11, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 208, 37, 125, "self", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 209, 40, 134, "<UNK>", "<EOS>", 37, 125, "mirror", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 209, 40, 134, "<UNK>", "<EOS>", 37, 125, "mirror", "<EOS>", 66, 108, "deactivate", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 222, 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", 209, 40, 134, "character_attack", "<EOS>", 29, 94, 19, 125, "self", "<EOS>", "_reveal", "<EOS>", 60, 93, 208, 29, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", 19, 125, "player", "<EOS>", 66, 108, "deactivate", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 222, 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", 209, 40, 134, "character_attack", "<EOS>", 29, 94, 19, 125, "self", "<EOS>", "_reveal", "<EOS>", 60, 93, 208, 29, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", 19, 125, "player", "<EOS>"], "score_history": [-0.0003414154052734375, -0.0001239776611328125, -4.57763671875e-05, -7.62939453125e-06, -3.814697265625e-05, -3.433168603805825e-05, -0.005839203950017691, -3.814697265625e-06, -0.0005397796630859375, -7.62939453125e-06, -0.00032460689544677734, -0.0007935762405395508, -5.14984130859375e-05, -0.055098533630371094, -0.014307022094726562, -0.0003795623779296875, -0.00021445745369419456, -1.311301275563892e-06, -0.0002346038818359375, -0.00069427490234375, -1.9073486328125e-06, -0.0008583029266446829, -3.6716461181640625e-05, -0.020605087280273438, -0.6490545272827148, -0.0398101806640625, -0.00013541258522309363, -3.409384225960821e-05, -0.00012062085443176329, -2.0265579223632812e-06, -0.015379190444946289, -3.099440846199286e-06, -0.22801780700683594, -1.9073486328125e-06, -4.38690185546875e-05, -2.288818359375e-05, -0.0002346038818359375, -8.58306884765625e-05, -1.9073486328125e-06, -5.53131103515625e-05, -1.9073486328125e-06, -0.0006799697875976562, 0.0, -0.1478748321533203, -0.000293731689453125, -9.703636169433594e-05, -1.1920928244535389e-07, -0.000148773193359375, -0.0006847381591796875, -0.008532285690307617, -1.8596476365928538e-05, -1.52587890625e-05, -0.0688314437866211, -1.9073486328125e-06, -0.000102996826171875, -3.576278118089249e-07, 0.0, -0.01943802833557129, -0.0003156187594868243, -0.008152961730957031, -0.0014171600341796875, -0.0004119873046875, -0.022918701171875, -7.62939453125e-06, -0.008050918579101562, -5.7220458984375e-05, -0.0001277923583984375, -0.0030879974365234375, -0.0018124580383300781, -1.1920928244535389e-07, -1.1444091796875e-05, -0.02141284942626953, -2.288818359375e-05, -0.029314041137695312, -0.00017547607421875, -0.000335693359375, -5.7220458984375e-06, -0.008825302124023438, -2.2649765014648438e-06, -0.00012814998626708984, 0.0, -0.03030567057430744, -4.744526813738048e-05, -0.0013980865478515625, -0.0006256103515625, -3.4332275390625e-05, -3.62396240234375e-05, -1.9073486328125e-06, -0.005883089266717434, -1.7881377516459906e-06, -0.1693572998046875, -0.00165557861328125, -1.52587890625e-05, -0.0001811981201171875, -0.0015611648559570312, -5.7220458984375e-06, -0.7151879072189331, -0.00010895341983996332, -0.0024614334106445312, -0.0014667510986328125, -1.9073486328125e-05, 0.0, -0.043384552001953125, 0.0, -0.16399455070495605, -2.0027138816658407e-05, -0.0047217607498168945, -3.576278118089249e-07, -2.6702880859375e-05, -0.0006084442138671875, 0.0, -0.03133106231689453, 0.0, -0.000274658203125, -1.9073486328125e-06, -0.000885009765625, 0.0, -0.00038909912109375, -2.09808349609375e-05, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, 0.0, -0.0790872573852539, -3.814697265625e-06, -0.4679960012435913, 0.0, -0.003437042236328125, 0.0, -5.7220458984375e-06, -0.0331268310546875, -0.0001430511474609375, -0.000286102294921875, 0.0, -0.01670527458190918, -1.1801701475633308e-05, -1.1444091796875e-05, -0.0004253387451171875, -7.62939453125e-06, -0.018865585327148438, -0.00012969970703125, -0.0036106109619140625, 0.0, -0.0018873214721679688, -9.655952453613281e-06, -0.0005322694778442383, 0.0, -0.0027832977939397097, -6.079673767089844e-06, -0.0017833709716796875, -3.4332275390625e-05, -1.9073486328125e-06, -3.814697265625e-06, -2.288818359375e-05, 0.0, -0.06999588012695312, 0.0, -0.00023651123046875, -1.9073486328125e-06, -0.5298377275466919, -1.1920928244535389e-07, -0.43836021423339844, -4.0531158447265625e-06, -1.700856328010559, 0.0, -2.47955322265625e-05, -0.9951887130737305, 0.0, -0.0766000747680664, -7.152555099310121e-07, -0.000362396240234375, -5.7220458984375e-06, -5.7220458984375e-06, -0.042041778564453125, -1.9073486328125e-06, 0.0, -0.2731008529663086, 0.0, -3.0517578125e-05, -1.9073486328125e-06, -0.16412675380706787, -1.1920928244535389e-07, -0.18008720874786377, 0.0, -0.1270354986190796, -5.7220458984375e-06, -0.000286102294921875, -0.0003261566162109375, -7.62939453125e-06, -0.20281241834163666, -0.0001506805419921875, -0.011981010437011719, -1.9073486328125e-06, -0.17695486545562744, -2.741813204920618e-06, -4.38690185546875e-05, -7.62939453125e-06, -5.14984130859375e-05, -0.05441474914550781, -1.9073486328125e-06, 0.0, -0.0002040863037109375, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-06, -0.21340274810791016, 0.0, -0.2778043746948242, 0.0, -0.08502745628356934, -7.62939453125e-06, -0.0002155303955078125, -0.000133514404296875, -3.814697265625e-06, -0.2764170169830322, -0.000179290771484375, -0.014983177185058594, -1.9073486328125e-06, -0.31416094303131104, -3.099440846199286e-06, -0.000621795654296875, -6.29425048828125e-05, -0.06517601013183594, -7.82012939453125e-05, -2.86102294921875e-05, -0.0001220703125, -1.9073486328125e-06, -5.9604644775390625e-05, 0.0, 0.0, -0.000457763671875, -1.1920928244535389e-07, -0.09609031677246094, -0.000743865966796875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.00012969970703125, -1.9073486328125e-06, -0.0576629638671875, 0.0, -0.00443267822265625, -1.9073486328125e-06, -0.0033788681030273438, -2.3841855067985307e-07, -0.10254848003387451, -3.814697265625e-06, -0.20168447494506836, 0.0, -0.006890296936035156, -2.6702880859375e-05, -1.9073486328125e-06, -0.7159974575042725, -0.0008258819580078125, -2.09808349609375e-05, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.00022792816162109375, -1.9073486328125e-06, -0.0027856826782226562, -3.576278118089249e-07, -0.19999122619628906, -1.1444091796875e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.004589080810546875, -2.288818359375e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.0020008087158203125, 0.0, -0.4907503128051758, 0.0, -0.0069026947021484375, -3.7550926208496094e-05, -0.01105499267578125, -0.0001373291015625, -0.019812703132629395, -0.000518798828125, -3.24249267578125e-05, -0.0003604888916015625, -1.71661376953125e-05, -4.1604042053222656e-05, 0.0, 0.0, -0.00030422210693359375, -1.1920928244535389e-07, -0.04285430908203125, -0.000232696533203125, 0.0, -3.814697265625e-06, 0.0, -0.0002460479736328125, -1.9073486328125e-06, -0.07437705993652344, 0.0, -0.0017852783203125, -1.9073486328125e-06, -0.0022192001342773438, -4.768370445162873e-07, -0.15972912311553955, -3.933906555175781e-06, -0.19089794158935547, 0.0, -0.0041351318359375, -2.86102294921875e-05, -1.9073486328125e-06, -0.7152523398399353, -0.0008068084716796875, -2.86102294921875e-05, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-06, -0.000225067138671875, -1.9073486328125e-06, -0.0027608871459960938, -3.576278118089249e-07, -0.107269287109375, -1.1444091796875e-05, -7.62939453125e-06, -5.7220458984375e-06, -0.005032539367675781, -2.47955322265625e-05, 0.0, -2.09808349609375e-05, 0.0, -0.0019435882568359375, 0.0, -0.4871644973754883, 0.0, -0.006630897521972656, -3.7550926208496094e-05]}], "gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n"}
{"beams": [{"inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>SpellDamage(1), MinionSelector\n            ()), Aura(opponent<UNK>Target(), PlayerSelector())])\n", "model_output": {"_type": "Module", "body": [{"name": "ShadowOfNothing", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "DEMON", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Shadow of Nothing"}, {"_type": "Num", "n": 0}, {"attr": "SHAMAN", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 1, "_type": "Template10", "hole2": "auras", "hole3": {"elts": [{"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "<UNK>SpellDamage"}, "_type": "Call", "args": [{"_type": "Num", "n": 1}]}, {"_type": "Template38", "hole0": "MinionSelector"}]}, {"func": {"_type": "Name", "id": "Aura"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "opponent<UNK>Target"}, {"_type": "Template38", "hole0": "PlayerSelector"}]}], "_type": "List"}, "hole0": 0}]}]}, "score": -9.266491743255976, "choice_history": [55, 124, 221, 63, 103, "Shadow", "Of", "Nothing", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Shadow", " ", "of", " ", "Nothing", "<EOS>", 39, 130, "0", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 72, 145, "0", "<EOS>", "1", "<EOS>", "auras", "<EOS>", 17, 120, 209, 32, 101, 19, 125, "Aura", "<EOS>", 209, 32, 101, 19, 125, "<UNK>", "Spell", "Damage", "<EOS>", 208, 39, 130, "1", "<EOS>", 49, 174, "Minion", "Selector", "<EOS>", 32, 101, 19, 125, "Aura", "<EOS>", 209, 49, 174, "opponent", "<UNK>", "Target", "<EOS>", 49, 174, "Player", "Selector", "<EOS>"], "score_history": [-2.6702880859375e-05, -6.866455078125e-05, -5.14984130859375e-05, -0.0001544952392578125, -9.34600830078125e-05, -0.00011455356434453279, -0.455327570438385, -0.02376849390566349, -0.15020716190338135, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.4509599208831787, -0.002445697784423828, -3.62396240234375e-05, -0.005993843078613281, -0.30817508697509766, -9.5367431640625e-06, -3.3616630389587954e-05, -7.843971252441406e-05, -2.288818359375e-05, -0.0002288818359375, -9.5367431640625e-06, -0.0004266830219421536, -2.6702879040385596e-05, -0.0004119873046875, -1.33514404296875e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.03070545196533203, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0010585783747956157, -0.000125885009765625, -5.364418029785156e-05, -1.9073486328125e-06, -0.0007953643798828125, -0.000164031982421875, -1.71661376953125e-05, -3.9338363421848044e-05, -0.0005949733313173056, -0.00202578236348927, -5.352497100830078e-05, -8.463843550998718e-05, -0.0004711151123046875, -2.288818359375e-05, -5.7220458984375e-06, -0.03505930304527283, -2.491474151611328e-05, -1.9073486328125e-06, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -2.050399598374497e-05, -0.0002747774124145508, -0.7180533409118652, -1.1444091796875e-05, -1.9073486328125e-06, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -6.61611557006836e-05, -7.986990567587782e-06, -0.04982650279998779, -9.5367431640625e-06, -2.09808349609375e-05, -0.001522064208984375, 0.0, -0.14528381824493408, -4.649161837733118e-06, -8.0108642578125e-05, -3.814697265625e-06, -0.0005092620849609375, -3.814697265625e-06, -0.1696491241455078, 0.0, -0.3013010025024414, 0.0, -0.33318328857421875, -1.33514404296875e-05, -3.111314072157256e-05, -7.152555099310121e-07, -0.0002760436909738928, -1.1920928244535389e-07, -0.18061506748199463, -3.862380617647432e-05, -0.003948211669921875, -0.0007381439208984375, -0.2966499328613281, 0.0, -0.000232696533203125, -0.6863517761230469, 0.0, -0.0024254322052001953, -9.5367431640625e-06, -0.004497528076171875, -0.1641979217529297, -0.0001430511474609375, -0.000316619873046875, -1.9073486328125e-06, -0.19592447578907013, -0.5545132160186768, -0.004140614997595549, -3.814697265625e-06, -0.0002346038818359375, -0.13607311248779297, -5.7220458984375e-06, -0.043569326400756836, 0.0, -0.0009441375732421875, -1.9073486328125e-06, -0.005697488784790039, -0.0008335113525390625, 0.0, -0.00472259521484375, -4.1961669921875e-05, -1.1444091796875e-05, 0.0, -0.4401416778564453, -9.5367431640625e-06, -0.0001163482666015625, -0.17238998413085938, -2.288818359375e-05, -1.0920664072036743, -0.6730348467826843, -0.9975430369377136, -0.10668599605560303, -0.002170562744140625, 0.0, -0.30496859550476074, -0.000217437744140625, 0.0]}], "gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n"}
{"beams": [{"inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.increase_health(4)\n", "model_output": {"_type": "Module", "body": [{"name": "Slam", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SpellCard"}], "body": [{"hole1": 2, "hole4": {"attr": "find_minion_spell_target", "_type": "Attribute", "value": {"attr": "targeting", "_type": "Attribute", "value": {"_type": "Name", "id": "hearthbreaker"}}}, "hole3": "target_func", "_type": "Template3", "hole2": "ROGUE", "hole0": "Slam"}, {"name": "use", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "use", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}}, {"_type": "Expr", "value": {"_type": "Template22", "hole0": 2}}, {"_type": "Expr", "value": {"func": {"attr": "increase_health", "_type": "Attribute", "value": {"attr": "target", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"_type": "Num", "n": 4}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}}]}]}, "score": -2.910049948926485, "choice_history": [55, 124, 221, 63, 103, "Slam", "<EOS>", 208, 37, 125, "Spell", "Card", "<EOS>", 222, 80, 165, "Slam", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "target_func", "<EOS>", 11, 94, 11, 94, 19, 125, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 66, 108, "use", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "player", "<EOS>", 194, "game", "<EOS>", 223, 64, 106, 14, 101, 11, 94, 26, 174, "super", "<EOS>", "use", "<EOS>", 209, 37, 125, "player", "<EOS>", 37, 125, "game", "<EOS>", 64, 106, 24, 160, "2", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "target", "<EOS>", "increase_health", "<EOS>", 208, 39, 130, "4", "<EOS>"], "score_history": [-3.814697265625e-06, -9.5367431640625e-06, -1.33514404296875e-05, -5.340576171875e-05, -1.9073486328125e-06, -5.9126061387360096e-05, -0.0006922483444213867, -3.814697265625e-05, -4.57763671875e-05, -1.9073486328125e-06, -1.8477439880371094e-05, -9.322015102952719e-05, -5.7220458984375e-06, -1.9073486328125e-05, -0.0009479522705078125, -0.0001239776611328125, -9.440929716220126e-05, -8.344646857949556e-07, -1.66712561622262e-05, 0.0, -0.0485081672668457, -1.9073486328125e-06, -3.850459688692354e-05, 0.0, -0.0001163482666015625, -1.9073486328125e-05, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.0004464387893676758, -5.9485435485839844e-05, -0.0398101806640625, -5.7220458984375e-06, -2.1219253540039062e-05, 0.0, -4.38690185546875e-05, -1.9073486328125e-05, -3.814697265625e-06, -5.602834789897315e-06, 0.0, 0.0, -7.62939453125e-06, 0.0, 0.0, -9.5367431640625e-06, -2.1457672119140625e-06, -0.02693653106689453, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -1.52587890625e-05, 0.0, -2.1100042431498878e-05, 0.0, -2.491474151611328e-05, 0.0, -1.9073486328125e-05, -0.000362396240234375, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -2.09808349609375e-05, 0.0, -0.000118255615234375, -8.225431884056889e-06, -0.046115875244140625, -0.0002899169921875, -0.1323833465576172, -0.0011196136474609375, -0.41123825311660767, -2.0503786799963564e-05, -0.013029098510742188, -0.0001678466796875, -9.72747802734375e-05, -0.4497699737548828, -7.62939453125e-06, -3.814697265625e-06, -4.57763671875e-05, -7.62939453125e-06, -0.17899513244628906, 0.0, -0.2924003601074219, 0.0, -9.655952453613281e-06, -2.0265579223632812e-06, -0.557541012763977, 0.0, -6.29425048828125e-05, -5.14984130859375e-05, -5.7220458984375e-06, -0.7076722383499146, 0.0]}], "gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n"}
{"beams": [{"inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (Null, EnemyPlayer(), UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "model_output": {"_type": "Module", "body": [{"name": "Spellbreaker", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 4, "hole4": [{"_type": "Num", "n": 4}], "hole3": "Damage", "hole5": "MinionSelector", "hole6": [{"_type": "NameConstant", "value": "Null"}, {"_type": "Template38", "hole0": "EnemyPlayer"}, {"_type": "Template38", "hole0": "UserPicker"}], "_type": "Template8", "hole2": "RARE", "hole0": "Spellbreaker"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 3, "_type": "Template11", "hole0": 4}]}]}, "score": -3.267162452007881, "choice_history": [55, 124, 221, 63, 103, "Spellbreaker", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 87, 188, "Spellbreaker", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Damage", "<EOS>", 208, 39, 130, "4", "<EOS>", "Minion", "Selector", "<EOS>", 210, 38, 127, "Null", "<EOS>", 49, 174, "Enemy", "Player", "<EOS>", 49, 174, "User", "Picker", "<EOS>", 73, 146, "4", "<EOS>", "3", "<EOS>"], "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -0.000171661376953125, -5.7220458984375e-06, -5.7220458984375e-06, -1.263618378288811e-05, -0.00370712555013597, -5.7220458984375e-06, -4.76837158203125e-05, 0.0, -9.179114385915454e-06, -8.678436279296875e-05, -4.029273986816406e-05, -0.0001087188720703125, -0.5700283050537109, -0.00016021728515625, -5.125998541188892e-06, -2.145764938177308e-06, -2.86102294921875e-05, -0.00017547607421875, -8.20159912109375e-05, -2.4080276489257812e-05, 0.0, -2.86102294921875e-05, -0.5017938613891602, -0.5770158767700195, -9.238310303771868e-05, -0.00028644094709306955, -8.34479033073876e-06, -4.0531076592742465e-06, -0.6644185781478882, -3.576278118089249e-07, -0.03298228234052658, -5.602820692729438e-06, -5.53131103515625e-05, -0.010813713073730469, 0.0, -0.22108152508735657, -2.741813204920618e-06, -0.00020372547442093492, -0.0005323886871337891, 0.0, -0.12445735931396484, -0.07394218444824219, -0.009922981262207031, -0.0005038976669311523, 0.0, -2.47955322265625e-05, 0.0, -0.30247604846954346, -0.00012648063420783728, 0.0, -0.01025390625, 0.0, -0.15888811647891998, -0.0019342839950695634, -4.231898128637113e-05, -0.0003833770751953125, 0.0, -1.3589859008789062e-05, -0.00013612773909699172, -9.536731340631377e-06, -1.0728830375228426e-06]}], "gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(adjacent(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON)))),\n            MinionSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "model_output": {"_type": "Module", "body": [{"name": "SunfuryProtector", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 2, "hole4": [{"func": {"_type": "Name", "id": "Count"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "CardSelector"}, "_type": "Call", "keywords": [{"arg": "condition", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "DRAGON", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}}]}]}], "hole3": "adjacent", "hole5": "MinionSelector", "_type": "Template8", "hole2": "RARE", "hole7": [{"arg": "players", "_type": "keyword", "value": {"_type": "Template38", "hole0": "BothPlayer"}}], "hole0": "Sunfury Protector"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 3, "_type": "Template11", "hole0": 2}]}]}, "score": -5.027288879276277, "choice_history": [55, 124, 221, 63, 103, "Sunfury", "Protector", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 87, 187, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "adjacent", "<EOS>", 208, 32, 101, 19, 125, "Count", "<EOS>", 208, 32, 100, 19, 125, "Card", "Selector", "<EOS>", 216, 54, 197, "condition", "<EOS>", 14, 101, 19, 125, "Is", "Type", "<EOS>", 208, 29, 94, 19, 125, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "Minion", "Selector", "<EOS>", 216, 54, 197, "players", "<EOS>", 26, 174, "Both", "Player", "<EOS>", 73, 146, "2", "<EOS>", "3", "<EOS>"], "score_history": [-1.1444091796875e-05, 0.0, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, -0.002771467436105013, -8.868777513271198e-05, -0.07686042040586472, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -1.6569954823353328e-05, -3.6954868846805766e-05, -1.7523765563964844e-05, -2.6702880859375e-05, -0.0003910064697265625, -2.47955322265625e-05, -3.504753112792969e-05, -4.768370445162873e-07, -1.1444091796875e-05, -0.0001373291015625, -1.9073486328125e-06, -7.605421706102788e-05, -1.9073468138230965e-06, -1.71661376953125e-05, -0.004193305969238281, -0.07900428771972656, -2.8132995794294402e-05, -0.00019299902487546206, -5.841255187988281e-06, -4.4345855712890625e-05, -7.04589401721023e-05, -1.0728830375228426e-06, -0.020708288997411728, -5.721893103327602e-05, -0.5902493000030518, -0.03224979341030121, -0.00067901611328125, -0.06426334381103516, -0.11190414428710938, -3.4332275390625e-05, 0.0, -0.28193753957748413, -0.017406493425369263, -4.9591064453125e-05, -0.09370994567871094, -0.04035186767578125, -0.0003185272216796875, -1.9073486328125e-06, -0.40753111243247986, -0.0004391670227050781, -1.1920928244535389e-07, -0.0001583099365234375, -0.0001430511474609375, -7.05718994140625e-05, -0.01237797737121582, -2.2649765014648438e-06, -0.09874343872070312, -8.0108642578125e-05, -3.814697265625e-06, 0.0, -0.572956919670105, -0.0012063980102539062, -1.6927717297221534e-05, -9.1552734375e-05, -9.918212890625e-05, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -0.00127410888671875, -1.6689286894688848e-06, -1.0466663837432861, -2.944469088106416e-05, -0.1586517095565796, -0.03363227844238281, -2.861018856492592e-06, -0.006305694580078125, -0.000335693359375, -5.7220458984375e-06, -0.8478517532348633, 0.0, -1.9073486328125e-06, 0.0, -0.41856908798217773, -0.00023651123046875, 0.0, -0.001583099365234375, -1.9073486328125e-06, -0.00011669908417388797, 0.0, -2.5033818019437604e-05, 0.0]}], "gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(<UNK>Squirrel(Attribute(\n            'health', SelfSelector())), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "model_output": {"_type": "Module", "body": [{"name": "TinkmasterOverspark", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 3, "hole4": [{"func": {"_type": "Name", "id": "Attribute"}, "_type": "Call", "args": [{"_type": "Str", "s": "health"}, {"_type": "Template38", "hole0": "SelfSelector"}]}], "hole3": "<UNK>Squirrel", "hole5": "PlayerSelector", "_type": "Template8", "hole2": "RARE", "hole0": "Tinkmaster Overspark"}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 3, "_type": "Template11", "hole0": 3}]}]}, "score": -3.635069421627122, "choice_history": [55, 124, 221, 63, 103, "Tinkmaster", "Overspark", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 87, 186, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "<UNK>", "Squirrel", "<EOS>", 208, 32, 101, 19, 125, "Attribute", "<EOS>", 209, 40, 134, "health", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", "Player", "Selector", "<EOS>", 73, 146, "3", "<EOS>", "3", "<EOS>"], "score_history": [-2.288818359375e-05, -1.9073486328125e-06, -1.33514404296875e-05, -5.53131103515625e-05, -7.62939453125e-06, -0.0011304186191409826, -0.0013561585219576955, -0.0009071492240764201, 0.0, -5.7220458984375e-06, 0.0, -3.218649908376392e-06, -7.200239633675665e-05, -8.428096771240234e-05, -0.0001506805419921875, -0.0006923675537109375, -5.53131103515625e-05, -4.982948303222656e-05, -2.1457672119140625e-06, -4.00543212890625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.0006051051313988864, -6.556489552167477e-06, -0.0005435943603515625, -0.0017900466918945312, -1.1772160530090332, -0.0003010850050486624, -0.0001922829687828198, -1.5854835510253906e-05, -7.62939453125e-06, -6.079824743210338e-06, -5.722029527532868e-06, -0.004633426200598478, -0.0008746152743697166, -0.0802016481757164, -0.24098478257656097, -0.08766268193721771, -0.05561065673828125, -0.3755664825439453, -0.000141143798828125, -1.33514404296875e-05, 0.0, -0.11422450840473175, -1.7404556274414062e-05, -0.0001125335693359375, -0.0011196136474609375, -0.0003185272216796875, -0.6162697076797485, 0.0, -0.08191680908203125, -0.000408172607421875, -0.08282852172851562, -0.0002918243408203125, 0.0, -0.6864237785339355, -1.1444091796875e-05, -3.6954811548639555e-06, -0.019275665283203125, -0.000560760498046875, -0.0002095275849569589, -1.9073486328125e-06, -1.1458585504442453e-05, 0.0]}], "gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}
{"beams": [{"inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n        self.player = Null\n\n    def _reveal(self, minion, target):\n        if target is self.player.hero and not attacker.<UNK>:\n            for minion in self.player.minions:\n                minion.add_buff(Effect(<UNK>(), MinionSelector(-3)))\n            self.player.trigger('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "model_output": {"_type": "Module", "body": [{"name": "Vaporize", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "SecretCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"hole1": 3, "_type": "Template18", "hole2": "MAGE", "hole0": "Vaporize"}, {"targets": [{"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}], "_type": "Assign", "value": {"_type": "NameConstant", "value": "Null"}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"name": "_reveal", "_type": "FunctionDef", "body": [{"_type": "If", "test": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"ops": [{"_type": "Is"}], "_type": "Compare", "left": {"_type": "Name", "id": "target"}, "comparators": [{"attr": "hero", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}]}, {"op": {"_type": "Not"}, "_type": "UnaryOp", "operand": {"attr": "<UNK>", "_type": "Attribute", "value": {"_type": "Name", "id": "attacker"}}}]}, "body": [{"target": {"_type": "Name", "id": "minion"}, "iter": {"attr": "minions", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "For", "body": [{"_type": "Expr", "value": {"func": {"attr": "add_buff", "_type": "Attribute", "value": {"_type": "Name", "id": "minion"}}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Effect"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "<UNK>"}, {"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"op": {"_type": "USub"}, "_type": "UnaryOp", "operand": {"_type": "Num", "n": 3}}]}]}]}}]}, {"_type": "Expr", "value": {"func": {"attr": "trigger", "_type": "Attribute", "value": {"attr": "player", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}}]}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "minion", "_type": "arg"}, {"arg": "target", "_type": "arg"}]}}, {"name": "deactivate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "unbind", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}, {"name": "deactivate", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "unbind", "_type": "Attribute", "value": {"attr": "opponent", "_type": "Attribute", "value": {"_type": "Name", "id": "player"}}}, "_type": "Call", "args": [{"_type": "Str", "s": "character_attack"}, {"attr": "_reveal", "_type": "Attribute", "value": {"_type": "Name", "id": "self"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}}]}]}, "score": -15.317699544544638, "choice_history": [55, 124, 221, 63, 103, "Vaporize", "<EOS>", 208, 37, 125, "Secret", "Card", "<EOS>", 224, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 222, 75, 154, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", 60, 93, 208, 29, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", 20, 127, "Null", "<EOS>", 66, 108, "_reveal", "<EOS>", 195, 203, 194, "self", "<EOS>", 194, "minion", "<EOS>", 194, "target", "<EOS>", 221, 67, 111, 13, 97, 0, 209, 33, 104, 19, 125, "target", "<EOS>", 205, 6, 208, 29, 94, 11, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", "hero", "<EOS>", 50, 192, 89, 11, 94, 19, 125, "attacker", "<EOS>", "<UNK>", "<EOS>", 222, 65, 107, 19, 125, "minion", "<EOS>", 11, 94, 11, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 221, 64, 106, 14, 101, 11, 94, 19, 125, "minion", "<EOS>", "add_buff", "<EOS>", 208, 32, 101, 19, 125, "Effect", "<EOS>", 209, 49, 174, "<UNK>", "<EOS>", 32, 101, 19, 125, "Minion", "Selector", "<EOS>", 208, 50, 192, 90, 21, 130, "3", "<EOS>", 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "self", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 209, 40, 134, "character_attack", "<EOS>", 29, 94, 19, 125, "self", "<EOS>", "_reveal", "<EOS>", 66, 108, "deactivate", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 221, 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "opponent", "<EOS>", "unbind", "<EOS>", 209, 40, 134, "character_attack", "<EOS>", 29, 94, 19, 125, "self", "<EOS>", "_reveal", "<EOS>", 66, 108, "deactivate", "<EOS>", 195, 202, 194, "self", "<EOS>", 194, "player", "<EOS>", 221, 64, 106, 14, 101, 11, 94, 11, 94, 19, 125, "player", "<EOS>", "opponent", "<EOS>", "unbind", "<EOS>", 209, 40, 134, "character_attack", "<EOS>", 29, 94, 19, 125, "self", "<EOS>", "_reveal", "<EOS>"], "score_history": [-0.000522613525390625, -9.34600830078125e-05, -0.0001201629638671875, -3.4332275390625e-05, -1.9073486328125e-05, -0.0011547094909474254, -5.292858259053901e-05, -1.52587890625e-05, -0.00020599365234375, -3.814697265625e-06, -0.0019501447677612305, -0.0054721832275390625, -2.288818359375e-05, -0.16388320922851562, -0.01050567626953125, -0.0002288818359375, -0.00014137866673991084, -4.172316494077677e-06, -0.0001392364501953125, -5.91278076171875e-05, -7.62939453125e-06, -6.830657366663218e-05, -1.9550323486328125e-05, -0.015069007873535156, -0.7468271255493164, -0.031327247619628906, -2.50339189733495e-06, -1.4901099348207936e-05, -2.9802240533172153e-06, -1.7523756469017826e-05, -0.007511734496802092, -7.748596544843167e-06, -0.42470645904541016, -5.7220458984375e-06, -5.7220458984375e-06, -0.0001163482666015625, -0.0001316070556640625, -0.0001621246337890625, -1.1444091796875e-05, -0.001801609992980957, -3.814697265625e-06, -0.013767242431640625, 0.0, -0.2658357620239258, -0.000885009765625, -0.00017344951629638672, -1.1920928244535389e-07, -0.012409210205078125, -4.00543212890625e-05, -0.021778106689453125, -8.344646857949556e-07, -0.000759124755859375, -0.13248729705810547, 0.0, -0.001528620719909668, -5.960462772236497e-07, -3.814697265625e-06, -0.8044489622116089, -9.107532241614535e-05, -0.0002079010009765625, -0.08747208118438721, -0.0009686675621196628, -0.0003566741943359375, -0.0018157958984375, -0.000209808349609375, -0.022136688232421875, -6.4849853515625e-05, -0.000213623046875, -0.06859874725341797, -0.2917366027832031, -0.0001544952392578125, -0.023454666137695312, -0.0001430511474609375, -0.030709385871887207, -6.41325386823155e-05, -1.52587890625e-05, -0.35334014892578125, -0.0010166168212890625, -0.011758804321289062, -3.814697265625e-06, -0.0026798248291015625, -9.5367431640625e-06, -0.02555084228515625, -0.0002918243408203125, -0.0008488893508911133, -5.006785613659304e-06, -0.0012438297271728516, -3.576278118089249e-07, -0.25157225131988525, -6.198883056640625e-06, -0.027372360229492188, -0.0003223419189453125, -0.006951332092285156, -0.0011806488037109375, -3.24249267578125e-05, -0.00193023681640625, -7.62939453125e-06, -0.088134765625, -7.62939453125e-06, -0.007484793663024902, -0.0002916789671871811, -0.018103599548339844, -0.653681755065918, -0.0005779266357421875, -2.6702880859375e-05, -1.71661376953125e-05, -0.8089226484298706, -0.0019212726037949324, -0.4782133102416992, 0.0, -0.2786264419555664, -2.47955322265625e-05, -0.0001506805419921875, -1.1444091796875e-05, -0.42726242542266846, -4.410743713378906e-06, -0.004139065742492676, -1.1920928244535389e-07, -0.008934889920055866, -1.823894308472518e-05, -0.0038623809814453125, -0.046230316162109375, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001220703125, -0.0011539459228515625, -3.814697265625e-06, -0.22052383422851562, -1.9073486328125e-06, -0.01817607879638672, -0.0005996847175993025, -0.1955726146697998, -4.410743713378906e-05, -1.9073486328125e-05, -0.1432943344116211, -0.00045013427734375, -2.6702880859375e-05, 0.0, -0.914926290512085, -0.0003091096587013453, -0.009061813354492188, -0.5978269577026367, -9.5367431640625e-05, -0.24369007349014282, -0.3434351980686188, -0.029754638671875, -0.0022125244140625, -0.0011653900146484375, 0.0, -0.29433882236480713, -0.5053853988647461, 0.0, -0.00083160400390625, -0.8081150054931641, -0.000553131103515625, -0.010582923889160156, -0.0027112960815429688, -2.288818359375e-05, -0.12184357643127441, -0.002135753631591797, -0.0014219284057617188, 0.0, -1.9073486328125e-06, -0.00025177001953125, -0.0059528350830078125, -1.9073486328125e-06, -0.2982215881347656, 0.0, -0.0026721954345703125, -2.86102294921875e-05, -0.017624855041503906, -2.1457672119140625e-06, -0.6453742980957031, 0.0, -0.0972667932510376, -1.9073486328125e-06, -0.0053539276123046875, -0.0002288818359375, -1.1444091796875e-05, -0.9091656804084778, -1.71661376953125e-05, -0.025388717651367188, -1.71661376953125e-05, -4.57763671875e-05, 0.0, -0.000118255615234375, -3.814697265625e-06, -0.010622978210449219, -1.9073486328125e-06, -0.0033416748046875, -0.0018978118896484375, -0.09824085235595703, -8.7738037109375e-05, -1.9073486328125e-05, -0.0003337860107421875, -1.1444091796875e-05, -0.00014722347259521484, -1.1920928244535389e-07, -1.9073486328125e-06, -0.03765106201171875, -1.1920928244535389e-07, -0.0003337860107421875, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -0.00029754638671875, -0.0001125335693359375, -1.9073486328125e-06, -0.03781318664550781, -3.814697265625e-06, -0.013519287109375, -1.33514404296875e-05, -0.012920498847961426, -5.960462772236497e-07, -0.5059348344802856, -2.0861407392658293e-05, -0.22791491448879242, -5.7220458984375e-06, -0.0001220703125, -3.814697265625e-05, -2.288818359375e-05, -0.09202764183282852, -0.0002384185791015625, -0.0001087188720703125, -7.62939453125e-06, -3.0517578125e-05, 0.0, -0.000247955322265625, -3.814697265625e-06, -0.006150245666503906, 0.0, -0.0042476654052734375, -0.001338958740234375, -0.10640144348144531, -0.000152587890625, -2.47955322265625e-05, -0.00041103363037109375, -9.5367431640625e-06, -0.00016427040100097656, 0.0, -1.9073486328125e-06, -0.05605888366699219, 0.0, -0.0003681182861328125, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -0.0002079010009765625, -0.000102996826171875, -1.9073486328125e-06, -0.03685569763183594, -3.814697265625e-06, -0.012300491333007812, -1.1444091796875e-05, -0.012674450874328613, -5.960462772236497e-07, -0.5197731256484985, -1.8358061424805783e-05, -0.23139511048793793, -5.7220458984375e-06, -0.0001220703125, -3.814697265625e-05, -2.288818359375e-05, -0.09197457134723663, -0.0002422332763671875, -0.0001049041748046875, -7.62939453125e-06, -3.0517578125e-05, 0.0, -0.0002498626708984375, -3.814697265625e-06, -0.006160736083984375, 0.0]}], "gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n"}
{"beams": [{"inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "model_output": {"_type": "Module", "body": [{"name": "WorgenInfiltrator", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 1, "_type": "Template4", "hole2": "ALL", "hole0": "Worgen Infiltrator"}, {"hole1": 1, "_type": "Template10", "hole2": "stealth", "hole3": {"_type": "NameConstant", "value": true}, "hole0": 2}]}]}, "score": -0.26193819197055035, "choice_history": [55, 124, 221, 63, 103, "Worgen", "Infiltrator", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 83, 176, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", 72, 145, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 20, 126, "True", "<EOS>"], "score_history": [0.0, -3.0517578125e-05, -4.38690185546875e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00015662873920518905, -0.0017586969770491123, -0.19247093796730042, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -5.483620952873025e-06, -3.24249267578125e-05, 0.0, -2.47955322265625e-05, -0.004642486572265625, -0.0001850128173828125, -0.0001559135998832062, -7.987022399902344e-06, -3.814697265625e-05, -0.00011861319217132404, -5.602844794339035e-06, -9.464855247642845e-05, -3.9219725294969976e-05, -1.7881377516459906e-06, -0.04570198059082031, -3.814697265625e-05, -2.360340477025602e-05, -8.940656698541716e-06, -0.00012180572957731783, -1.1920928244535389e-07, -0.013365983963012695, -3.814697265625e-06, -0.00023651123046875, -2.47955322265625e-05, -0.0025577545166015625, 0.0]}], "gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}
{"beams": [{"inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack\n            (1)), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "model_output": {"_type": "Module", "body": [{"name": "BlackwingCorruptor", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"hole1": 5, "hole4": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"elts": [{"_type": "Template28", "hole0": 1}, {"_type": "Template27", "hole0": 1}], "_type": "List"}]}, {"_type": "Template38", "hole0": "SelfSelector"}]}, "hole3": "battlecry", "_type": "Template3", "hole2": "ALL", "hole0": "Blackwing Corruptor"}, {"hole1": 4, "_type": "Template11", "hole0": 5}]}]}, "score": -1.0285341005225703, "choice_history": [55, 124, 221, 63, 103, "Blackwing", "Corruptor", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 80, 165, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "battlecry", "<EOS>", 14, 101, 19, 125, "Battlecry", "<EOS>", 209, 32, 101, 19, 125, "Give", "<EOS>", 208, 35, 120, 209, 43, 163, "1", "<EOS>", 42, 162, "1", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", 73, 146, "5", "<EOS>", "4", "<EOS>"], "score_history": [0.0, -1.9073486328125e-06, -2.6702880859375e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.0035481611266732216, -0.0006842655711807311, -0.020258886739611626, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -7.986990567587782e-06, -2.1576881408691406e-05, -1.9788742065429688e-05, -0.00046539306640625, -0.00077056884765625, -2.47955322265625e-05, -2.0265558760002023e-06, -1.740455445542466e-05, -1.9073486328125e-06, -2.288818359375e-05, -0.0020514726638793945, -1.1920928244535389e-07, -0.00979077722877264, 0.0, -0.010828614234924316, -2.3841855067985307e-07, -5.14984130859375e-05, -7.62939453125e-05, -3.814697265625e-06, -1.9073486328125e-06, -2.503394352970645e-05, -1.1920928244535389e-07, -0.0002651214599609375, -0.22611618041992188, -7.05718994140625e-05, -3.0517578125e-05, -3.814697265625e-06, -0.0015163376228883862, -0.0020542144775390625, -0.000308990478515625, -0.1631326675415039, -9.1552734375e-05, -0.0013675689697265625, -0.010817527770996094, -0.001178741455078125, -0.007234263699501753, -1.52587890625e-05, -0.0047512054443359375, -0.0001163482666015625, -0.49178922176361084, -6.103515625e-05, -0.06730842590332031, -1.9073486328125e-06, -0.0009301900863647461, -2.1457672119140625e-06, 0.0, -0.0001163482666015625, -1.71661376953125e-05, -1.537799835205078e-05, -1.1920928244535389e-07, -0.00048089027404785156, 0.0]}], "gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}
{"beams": [{"inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.PIRATE, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "model_output": {"_type": "Module", "body": [{"name": "DrakonidCrusher", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "PIRATE", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}, {"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"elts": [{"_type": "Template28", "hole0": 3}, {"_type": "Template27", "hole0": 3}], "_type": "List"}]}, {"_type": "Template38", "hole0": "SelfSelector"}]}}], "args": [{"_type": "Str", "s": "Drakonid Crusher"}, {"_type": "Num", "n": 6}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "EPIC", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 6, "_type": "Template11", "hole0": 6}]}]}, "score": -1.418927743591432, "choice_history": [55, 124, 221, 63, 103, "Drakonid", "Crusher", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Drakonid", " ", "Crusher", "<EOS>", 39, 130, "6", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 217, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 54, 197, "battlecry", "<EOS>", 14, 101, 19, 125, "Battlecry", "<EOS>", 209, 32, 101, 19, 125, "Give", "<EOS>", 208, 35, 120, 209, 43, 163, "3", "<EOS>", 42, 162, "3", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", 73, 146, "6", "<EOS>", "6", "<EOS>"], "score_history": [-1.9073486328125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -7.4741430580616e-05, -0.0002165798214264214, -0.00038759640301577747, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -7.64102369430475e-05, -9.322164987679571e-05, -3.933906555175781e-06, -5.7220458984375e-06, -0.17242431640625, -3.0517578125e-05, -3.826618194580078e-05, -4.768370445162873e-07, 0.0, -1.1444091796875e-05, -5.14984130859375e-05, -2.9683074899367057e-05, -7.152555099310121e-07, -2.6702880859375e-05, -0.00077056884765625, -2.86102294921875e-05, 0.0, -0.00017547607421875, -1.33514404296875e-05, 0.0, -5.7220458984375e-06, 0.0, -4.291534423828125e-06, -4.00543212890625e-05, -1.0251998901367188e-05, 0.0, -0.0003948211669921875, -0.0002994537353515625, -2.09808349609375e-05, -5.483625955093885e-06, -2.1219253540039062e-05, -1.001357759378152e-05, -3.814697265625e-06, -2.86102294921875e-05, -1.9073486328125e-06, -7.510159775847569e-06, -6.6756979322235566e-06, -1.9073486328125e-06, 0.0, -0.00019073486328125, -1.9073486328125e-06, -0.00022912025451660156, -0.0002690246037673205, -0.015988796949386597, 0.0, 0.0, -0.00102996826171875, -3.4332275390625e-05, -1.9073486328125e-06, -5.14984130859375e-05, -0.00017844139074441046, -0.3053438663482666, -9.298322765971534e-06, -4.00543212890625e-05, -6.4849853515625e-05, 0.0, -1.9311904907226562e-05, -0.00013411037798505276, 0.0, 0.0, -5.340576171875e-05, 0.0, -1.33514404296875e-05, -8.344646857949556e-07, -0.29699623584747314, -2.622604142743512e-06, -7.62939453125e-06, 0.0, -0.0003815889358520508, -1.1920928244535389e-07, -9.1552734375e-05, -0.000141143798828125, -3.814697265625e-06, 0.0, -4.208087921142578e-05, -7.152555099310121e-07, -0.0011348724365234375, -0.004654884338378906, -1.9073486328125e-06, -5.340576171875e-05, -7.62939453125e-06, -0.01702892780303955, -0.0043065547943115234, -0.00440216064453125, -0.07462215423583984, -8.392333984375e-05, -0.07610130310058594, -0.0021800994873046875, -4.00543212890625e-05, -0.30914244055747986, -3.814697265625e-06, -0.0021572113037109375, -0.000102996826171875, -0.12323587387800217, -0.0005283355712890625, -0.0001316070556640625, -5.14984130859375e-05, -0.0010471203131601214, -0.00010371208190917969, 0.0, -0.00106048583984375, -1.71661376953125e-05, -7.986988748598378e-06, 0.0, -1.1806172551587224e-05, 0.0]}], "gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}
{"beams": [{"inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "model_output": {"_type": "Module", "body": [{"name": "Imp", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "minion_type", "_type": "keyword", "value": {"attr": "DEMON", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}}], "args": [{"_type": "Str", "s": "Imp"}, {"_type": "Num", "n": 1}, {"attr": "ALL", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}, {"_type": "NameConstant", "value": true}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 1, "_type": "Template11", "hole0": 1}]}]}, "score": -0.060106625606060504, "choice_history": [55, 124, 221, 63, 103, "Imp", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 212, 40, 134, "Imp", "<EOS>", 39, 130, "1", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 38, 126, "False", "<EOS>", 216, 54, 197, "minion_type", "<EOS>", 11, 94, 19, 125, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 73, 146, "1", "<EOS>", "1", "<EOS>"], "score_history": [-7.62939453125e-06, -6.67572021484375e-05, -4.9591064453125e-05, -2.6702880859375e-05, -0.000232696533203125, -2.264974000354414e-06, -9.584352665115148e-05, -5.7220458984375e-06, -0.0006732940673828125, 0.0, -0.0001649856276344508, -9.584426879882812e-05, -3.814697265625e-06, -1.52587890625e-05, -0.0001163482666015625, -7.43865966796875e-05, -8.821482879284304e-06, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-06, -2.1815170839545317e-05, -6.079673767089844e-06, -6.866455078125e-05, -7.2479248046875e-05, -1.71661376953125e-05, -5.7220458984375e-06, -0.007470130920410156, -2.288818359375e-05, -1.9073486328125e-06, -4.76837158203125e-05, 0.0, -1.263618378288811e-05, -3.814697265625e-06, -8.594989776611328e-05, 0.0, -0.0004520416259765625, -8.0108642578125e-05, -3.814697265625e-06, -2.741813204920618e-06, -2.7417810997576453e-05, -2.86102294921875e-05, -1.9073486328125e-06, -0.007774278987199068, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-05, -2.9802276912960224e-06, -0.011137127876281738, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -8.58306884765625e-05, 0.0, -0.0001373291015625, -1.0847986231965479e-05, -0.01566314697265625, 0.0, -0.0001506805419921875, -4.00543212890625e-05, -6.79492904964718e-06, -1.9073486328125e-06, -7.62939453125e-05, -2.09808349609375e-05, -7.62939453125e-06, -1.9073486328125e-05, -3.814697265625e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.000446319580078125, 0.0, -0.0017223358154296875, 0.0, -0.011958122253417969, -7.748603820800781e-06, -0.000392913818359375, -0.0001964569091796875, -5.9245172451483086e-05, -1.1920928244535389e-07, -1.1869415175169706e-05, 0.0]}], "gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(youWhelp())]), SelfSelector(), GreaterThan(Count(\n            MinionSelector(IsType(MINION_TYPE.PIRATE))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "model_output": {"_type": "Module", "body": [{"name": "TwilightWhelp", "_type": "ClassDef", "bases": [{"_type": "Name", "id": "MinionCard"}], "body": [{"name": "__init__", "_type": "FunctionDef", "body": [{"_type": "Expr", "value": {"func": {"attr": "__init__", "_type": "Attribute", "value": {"_type": "Template38", "hole0": "super"}}, "_type": "Call", "keywords": [{"arg": "battlecry", "_type": "keyword", "value": {"func": {"_type": "Name", "id": "Battlecry"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "Give"}, "_type": "Call", "args": [{"elts": [{"_type": "Template28", "hole0": 1}, {"func": {"_type": "Name", "id": "Buff"}, "_type": "Call", "args": [{"_type": "Template38", "hole0": "youWhelp"}]}], "_type": "List"}]}, {"_type": "Template38", "hole0": "SelfSelector"}, {"func": {"_type": "Name", "id": "GreaterThan"}, "_type": "Call", "keywords": [{"arg": "value", "_type": "keyword", "value": {"_type": "Num", "n": 0}}], "args": [{"func": {"_type": "Name", "id": "Count"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "MinionSelector"}, "_type": "Call", "args": [{"func": {"_type": "Name", "id": "IsType"}, "_type": "Call", "args": [{"attr": "PIRATE", "_type": "Attribute", "value": {"_type": "Name", "id": "MINION_TYPE"}}]}]}]}]}]}}], "args": [{"_type": "Str", "s": "Twilight Whelp"}, {"_type": "Num", "n": 1}, {"attr": "WARRIOR", "_type": "Attribute", "value": {"_type": "Name", "id": "CHARACTER_CLASS"}}, {"attr": "RARE", "_type": "Attribute", "value": {"_type": "Name", "id": "CARD_RARITY"}}]}}], "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}]}}, {"hole1": 1, "_type": "Template11", "hole0": 2}]}]}, "score": -4.944173138267445, "choice_history": [55, 124, 221, 63, 103, "Twilight", "Whelp", "<EOS>", 208, 37, 125, "Minion", "Card", "<EOS>", 222, 66, 108, "__init__", "<EOS>", 195, 201, 194, "self", "<EOS>", 221, 64, 106, 14, 102, 11, 94, 26, 174, "super", "<EOS>", "__init__", "<EOS>", 211, 40, 134, "Twilight", " ", "Whelp", "<EOS>", 39, 130, "1", "<EOS>", 29, 94, 19, 125, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 29, 94, 19, 125, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 216, 54, 197, "battlecry", "<EOS>", 14, 101, 19, 125, "Battlecry", "<EOS>", 210, 32, 101, 19, 125, "Give", "<EOS>", 208, 35, 120, 209, 43, 163, "1", "<EOS>", 32, 101, 19, 125, "Buff", "<EOS>", 208, 49, 174, "you", "Whelp", "<EOS>", 49, 174, "Self", "Selector", "<EOS>", 32, 102, 19, 125, "Greater", "Than", "<EOS>", 208, 32, 101, 19, 125, "Count", "<EOS>", 208, 32, 101, 19, 125, "Minion", "Selector", "<EOS>", 208, 32, 101, 19, 125, "Is", "Type", "<EOS>", 208, 29, 94, 19, 125, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 216, 54, 197, "value", "<EOS>", 21, 130, "0", "<EOS>", 73, 146, "2", "<EOS>", "1", "<EOS>"], "score_history": [0.0, -5.7220458984375e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -4.577531944960356e-05, -0.0005893162451684475, -2.3841855067985307e-07, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -1.0728830375228426e-06, -5.01871072629001e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.50634765625, -0.0001068115234375, -2.7060508728027344e-05, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -3.3020813134498894e-05, -2.3841855067985307e-07, -1.33514404296875e-05, -8.392333984375e-05, -3.814697265625e-06, 0.0, -0.000118255615234375, -5.340576171875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -5.960462772236497e-07, -4.38690185546875e-05, -8.940695806813892e-06, 0.0, -0.000499725341796875, -4.9591064453125e-05, -1.1444091796875e-05, -1.3232166566012893e-05, -2.682209014892578e-05, -1.9192688341718167e-05, 0.0, -0.0012607574462890625, -4.38690185546875e-05, -1.4663120964542031e-05, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.000247955322265625, -1.9073486328125e-06, -0.00021588802337646484, -5.9604644775390625e-06, -0.9836641550064087, -3.254413604736328e-05, 0.0, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -7.62939453125e-05, -1.0371154530730564e-05, -0.003697514533996582, -8.976459503173828e-05, -0.2523345947265625, -3.0517578125e-05, 0.0, -0.058519601821899414, -1.1920928244535389e-07, -1.9073486328125e-05, -0.0001163482666015625, -1.52587890625e-05, -1.9073486328125e-06, -7.450580596923828e-05, -1.1920928244535389e-07, -0.00154876708984375, -0.021241188049316406, -9.5367431640625e-06, -2.09808349609375e-05, 0.0, -0.0008160158758983016, -5.161762237548828e-05, -5.7220458984375e-06, -0.01406097412109375, -9.5367431640625e-06, -0.0056896209716796875, -0.0016994476318359375, -0.00046539306640625, -0.006992894224822521, -1.9073486328125e-06, -0.6104850769042969, -2.47955322265625e-05, -7.62939453125e-06, 0.0, -0.10233545303344727, -2.968272747239098e-05, -6.866455078125e-05, -0.0002002716064453125, -7.62939453125e-06, -0.2003825604915619, -0.9721480011940002, -4.768370445162873e-07, -0.001922607421875, -5.7220458984375e-06, -0.02177572250366211, -5.006789251638111e-06, -2.3841855067985307e-07, -8.20159912109375e-05, -0.39638328552246094, -4.57763671875e-05, -1.9073486328125e-06, -0.00011658668518066406, -0.0002275705337524414, -1.1920928244535389e-07, 0.0, -7.43865966796875e-05, -3.0517578125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.001236438169144094, -5.2808936743531376e-05, -1.33514404296875e-05, -0.0023326873779296875, -0.04555511474609375, -1.1444091796875e-05, -1.9073486328125e-06, -0.006402373313903809, -0.0001811981201171875, 0.0, -2.288818359375e-05, -0.00850677490234375, -9.5367431640625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0010255570523440838, -4.8279762268066406e-05, -2.384185791015625e-06, -1.9073486328125e-06, -1.1444091796875e-05, -1.1444091796875e-05, -0.000293731689453125, 0.0, -9.1552734375e-05, -4.00543212890625e-05, -0.6946724653244019, -1.1920928244535389e-07, -9.72747802734375e-05, -1.1444091796875e-05, 0.0, -0.0008094310760498047, -4.768370445162873e-07, -4.00543212890625e-05, -5.7220458984375e-06, -0.000941276375669986, -3.814697265625e-06, -0.0004329681396484375, -2.288818359375e-05, -0.01285499893128872, 0.0, -0.0006648473208770156, 0.0]}], "gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}
