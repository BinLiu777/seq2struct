{"gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n", "beams": [{"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 5, "hole0": "<UNK> Blade", "_type": "Template31"}], "hole1": "WeaponCard", "hole6": [{"hole2": 4, "hole1": 3, "hole0": "Weapon", "_type": "Template68"}], "hole4": "player", "hole0": "<UNK>Blade", "hole3": "create_weapon", "_type": "Template5"}, "choice_history": [97, 283, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 358, 127, 230, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "ROGUE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 358, 134, 306, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "score_history": [-0.000118255615234375, -0.0010890960693359375, -3.433224628679454e-05, -0.00028511573327705264, -0.0003504323249217123, -0.008929591625928879, -0.0004646764136850834, -7.033323527139146e-06, -5.7220458984375e-06, -0.1200246810913086, -0.007801055908203125, -0.0007492038421332836, -7.832050323486328e-05, -4.1246374166803434e-05, -1.1444091796875e-05, -0.008822083473205566, 0.0, -0.033916473388671875, 0.0, -0.007784008979797363, -1.9073486328125e-06, -0.0026319720782339573, 0.0, -5.7220458984375e-06, -0.0011310577392578125, -0.00241851806640625, -0.004373389296233654, -2.1457672119140625e-06, -4.6253204345703125e-05, -3.6954811548639555e-06, -0.00012719602091237903, -1.9073486328125e-06], "score": -0.20125653744753436, "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}]}
{"gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 6, "hole0": "Boulderfist Ogre", "_type": "Template34", "hole3": "FREE"}], "hole1": "MinionCard", "hole6": [{"hole2": "deathrattle", "hole1": 7, "hole0": 6, "_type": "Template50", "hole3": {"hole2": [{"hole0": "Thaddius", "_type": "Template79"}], "hole1": "Summon", "hole6": "InGraveyard", "hole7": [{"hole0": "Thaddius", "_type": "Template79"}], "hole0": "Deathrattle", "hole3": "PlayerSelector", "_type": "Template39"}}], "hole4": "player", "hole0": "BoulderfistOgre", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 358, 128, 233, "Boulderfist", " ", "Ogre", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "6", "<EOS>", "7", "<EOS>", "deathrattle", "<EOS>", 27, 246, "Deathrattle", "<EOS>", "Summon", "<EOS>", 346, 88, 325, "Thaddius", "<EOS>", "Player", "Selector", "<EOS>", "In", "Graveyard", "<EOS>", 346, 88, 325, "Thaddius", "<EOS>"], "score_history": [-3.0517578125e-05, -1.71661376953125e-05, -0.0018939182627946138, -9.810461779125035e-05, -2.264974000354414e-06, -5.2675604820251465e-06, -2.2649765014648438e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -0.019229888916015625, -6.29425048828125e-05, -3.492827090667561e-05, -4.792213439941406e-05, -6.675719760096399e-06, -5.7220458984375e-06, -0.0002066702290903777, -5.7220458984375e-06, -2.86102294921875e-05, -3.814697265625e-06, -0.000682830810546875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -0.000316619873046875, 0.0, -3.814697265625e-06, -0.165557861328125, -1.71661376953125e-05, -1.549708758830093e-05, -1.6689286894688848e-06, -5.280907862470485e-05, -1.1920928244535389e-07, -0.2916748523712158, -3.933906555175781e-06, -0.027108192443847656, -0.08669853210449219, -0.03949826955795288, -1.9073486328125e-06, -0.013011932373046875, -7.271765298355604e-06, -0.0005512237548828125, -1.52587890625e-05, -9.5367431640625e-06, -0.04749573767185211, -0.0002558190899435431, -0.02754497528076172, -5.7220458984375e-06, 0.0, -0.00733494758605957, -0.005268096923828125, 0.0, -1.9073486328125e-06, -0.0024480819702148438, -1.1444091796875e-05, -0.9480732679367065, -0.0007745024631731212], "score": -1.6861453943144937, "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7, deathrattle=Deathrattle(Summon(Thaddius()),\n            PlayerSelector(), InGraveyard(Thaddius())))\n"}]}
{"gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n", "beams": [{"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 1, "hole0": "Deadly Poison", "_type": "Template34", "hole3": "FREE"}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"target": {"id": "minion", "_type": "Name"}, "iter": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "minions"}, "body": [{"hole2": [{"hole0": "Frozen", "_type": "Template54"}], "hole1": "add_buff", "hole0": {"id": "minion", "_type": "Name"}, "_type": "Template77"}], "_type": "For"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "DeadlyPoison", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 358, 128, 233, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 359, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 107, 156, 21, 174, "minion", "<EOS>", 13, 143, 21, 174, "player", "<EOS>", "minions", "<EOS>", 358, 136, 318, 21, 174, "minion", "<EOS>", "add_buff", "<EOS>", 346, 69, 290, "Frozen", "<EOS>"], "score_history": [-7.62939453125e-06, -0.0026798248291015625, -2.1457672119140625e-06, -3.611982901929878e-05, -1.6689286894688848e-06, -1.3351437701203395e-05, -7.641315460205078e-05, -5.722029527532868e-06, -1.71661376953125e-05, -0.0044002532958984375, -0.000148773193359375, -3.576277322281385e-06, -7.092952728271484e-05, 0.0, 0.0, -2.622600504764705e-06, 0.0, -0.10359382629394531, -1.71661376953125e-05, -0.000255584716796875, 0.0, -3.266334533691406e-05, 0.0, -2.181529998779297e-05, 0.0, -0.0001125335693359375, -7.62939453125e-05, -6.5565000113565475e-06, -7.653236389160156e-05, -0.06828117370605469, -7.2479248046875e-05, -5.7220458984375e-05, -1.1444091796875e-05, -2.288818359375e-05, -7.82012939453125e-05, 0.0, -1.3709068298339844e-05, -6.866455078125e-05, -4.768371127283899e-06, -1.1920928244535389e-07, -2.2888001694809645e-05, -1.1920928244535389e-07, -3.290173117420636e-05, -2.3841855067985307e-07, -0.012169837951660156, -0.00011444091796875, -0.000278472900390625, -3.4332275390625e-05, -0.0008845329284667969, -2.2649765014648438e-06, -0.5575475692749023, -1.9073486328125e-06, -0.0076751708984375, 0.0, -0.007455945014953613, 0.0, -0.00925146322697401, -3.933906555175781e-06, -7.62939453125e-06, -0.8486213684082031, -9.5367431640625e-06, -0.0045604705810546875, -0.000118255615234375, -0.013979789800941944, -4.768370445162873e-07, -0.03930574655532837, 0.0, -2.09808349609375e-05, -0.021009445190429688, -0.09567928314208984, -0.10163509100675583, -5.805492401123047e-05], "score": -1.9007519847719578, "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.add_buff(Buff(Frozen()))\n"}]}
{"gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n", "beams": [{"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 6, "hole4": {"hole2": "MinionSelector", "hole1": [{"hole0": "damage", "_type": "Template79"}], "hole0": "Give", "hole4": [{"arg": "players", "_type": "keyword", "value": {"hole0": "BothPlayer", "_type": "Template79"}}, {"arg": "picker", "_type": "keyword", "value": {"hole0": "UserPicker", "_type": "Template79"}}], "_type": "Template43"}, "hole0": "Fire Elemental", "hole3": "battlecry", "_type": "Template27"}], "hole1": "MinionCard", "hole6": [{"hole1": 5, "hole0": 6, "_type": "Template62"}], "hole4": "player", "hole0": "FireElemental", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 358, 125, 223, "Fire", " ", "Elemental", "<EOS>", "6", "<EOS>", "SHAMAN", "<EOS>", "battlecry", "<EOS>", 29, 266, "Give", "<EOS>", 346, 88, 325, "damage", "<EOS>", "Minion", "Selector", "<EOS>", 354, 95, 336, "players", "<EOS>", 38, 325, "Both", "Player", "<EOS>", 95, 336, "picker", "<EOS>", 38, 325, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "6", "<EOS>", "5", "<EOS>"], "score_history": [-0.000652313232421875, -9.5367431640625e-06, -0.0028564624954015017, -9.059880540007725e-06, -2.9325108698685654e-05, -1.1919473763555288e-07, -2.6106828954652883e-05, -2.0265579223632812e-06, -7.43865966796875e-05, -0.13504505157470703, -5.340576171875e-05, -5.960462772236497e-07, -4.0411949157714844e-05, -5.245203283266164e-06, -1.9073486328125e-05, -7.30752944946289e-05, 0.0, -0.0009212493896484375, 0.0, -0.0035268068313598633, -9.5367431640625e-06, -0.03450202941894531, -0.14243507385253906, -0.9063687324523926, -0.000759924529120326, -1.9073486328125e-06, -0.05849647521972656, -3.814697265625e-06, -0.731597900390625, -0.0013193932827562094, -0.01171026285737753, 0.0, -1.1920928244535389e-07, -0.19076251983642578, -2.09808349609375e-05, -1.9073486328125e-06, -0.0071544647216796875, 0.0, -7.43865966796875e-05, 0.0, -0.0044765472412109375, -3.981590270996094e-05, 0.0, -4.38690185546875e-05, -3.0517578125e-05, -0.0011636018753051758, 0.0, -0.03158760070800781, 0.0, -0.000102996826171875, -0.0009332895278930664, 0.0, -0.008281467482447624, 0.0, -0.00027692317962646484, 0.0, -1.1444091796875e-05, -0.000152587890625, -3.814697265625e-05, -3.814697265625e-06, -1.1920928244535389e-07, -0.00032091137836687267, -1.1920928244535389e-07], "score": -2.27602745430503, "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(damage()),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}]}
{"gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n", "beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole5": "HeroSelector", "hole4": [{"n": 4, "_type": "Num"}], "hole0": "Gnomish Inventor", "hole3": "Draw", "_type": "Template15"}], "hole1": "MinionCard", "hole6": [{"hole1": 4, "hole0": 2, "_type": "Template62"}], "hole4": "player", "hole0": "GnomishInventor", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 358, 119, 207, "Gnomish", " ", "Inventor", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Draw", "<EOS>", 346, 52, 179, "4", "<EOS>", "Hero", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "2", "<EOS>", "4", "<EOS>"], "score_history": [-0.000152587890625, -2.09808349609375e-05, -0.000722288154065609, -8.344639354618266e-06, -2.5748875486897305e-05, -7.748487405478954e-06, -1.1205671398784034e-05, -1.9073486328125e-06, -4.00543212890625e-05, -0.0008335113525390625, -0.1899089813232422, -5.364412118069595e-06, -1.072883515007561e-05, -4.291534423828125e-06, -4.38690185546875e-05, -6.677582859992981e-06, -1.33514404296875e-05, -0.0014400482177734375, -1.9073486328125e-06, -0.04721040651202202, -1.251697449333733e-05, -5.7220458984375e-06, -0.005077362060546875, -3.814697265625e-06, -0.3626909554004669, -1.33514404296875e-05, -0.49787628650665283, -1.8477359844837338e-05, -3.576278118089249e-07, -0.00014805792307015508, -1.9073486328125e-06, -8.559226262150332e-05, 0.0, -3.62396240234375e-05, -0.013241767883300781, -6.866455078125e-05, -1.1920928955078125e-05, -1.1920922133867862e-06, -0.00031280517578125, -1.1920928244535389e-07], "score": -1.1200771149130375, "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(4), HeroSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}]}
{"gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n", "beams": [{"model_output": {"hole2": [{"hole2": "WARRIOR", "hole1": 2, "hole0": "Heroic Strike", "_type": "Template34", "hole3": "FREE"}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"hole2": 4, "hole1": "change_temp_attack", "hole0": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "hero"}, "_type": "Template65"}, {"hole2": 2, "hole1": "increase_armor", "hole0": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "hero"}, "_type": "Template65"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "HeroicStrike", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 358, 128, 233, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 360, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 133, 304, 13, 143, 21, 174, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", "4", "<EOS>", 133, 304, 13, 143, 21, 174, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", "2", "<EOS>"], "score_history": [-1.52587890625e-05, -0.0002422332763671875, -8.344646857949556e-07, -4.851709309150465e-05, -1.3589766240329482e-05, -3.5762758443524945e-07, -1.251697449333733e-05, -9.536738616588991e-07, -4.57763671875e-05, -0.0002346038818359375, -0.00011444091796875, -3.933904736186378e-06, -4.482269287109375e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -1.4305104514278355e-06, 0.0, -0.001766204833984375, -1.9073486328125e-06, -0.001384735107421875, 0.0, -3.814697265625e-06, 0.0, -3.814697265625e-06, 0.0, -6.866455078125e-05, -9.5367431640625e-06, -1.1920928244535389e-07, -1.71661376953125e-05, -0.00084686279296875, -0.000701904296875, -0.0009250640869140625, -0.000141143798828125, -0.00019073486328125, -1.52587890625e-05, -1.9073486328125e-06, -2.3126602172851562e-05, -7.62939453125e-06, -3.933906555175781e-06, -1.9073486328125e-06, -2.861022494471399e-06, 0.0, -0.00014734268188476562, -1.1920928244535389e-07, -0.20355701446533203, -0.000896453857421875, -0.0001087188720703125, -1.9073486328125e-06, -6.866455078125e-05, -3.814697265625e-06, -0.00011444091796875, 0.0, -0.019775032997131348, 0.0, -0.012496590614318848, -0.00019073486328125, -0.2531149387359619, -1.9073486328125e-06, -0.1346120834350586, -0.00907135009765625, -0.000125885009765625, -5.7220458984375e-06, -8.7738037109375e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.00049591064453125, 0.0, -0.6900701522827148, -2.0265579223632812e-06, -0.3930134177207947, 0.0], "score": -1.724913178688567, "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n        player.hero.increase_armor(2)\n"}]}
{"gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n", "beams": [{"model_output": {"hole2": [{"hole2": "DRUID", "hole1": 8, "hole4": {"_type": "List", "elts": [{"hole1": "CatForm", "hole6": "PlayerSelector", "hole4": [{"hole0": "IronbarkProtector", "_type": "Template79"}], "hole0": "Choice", "hole3": "Transform", "_type": "Template39"}, {"hole1": "BearForm", "hole6": "PlayerSelector", "hole4": [{"hole0": "IronbarkProtector", "_type": "Template79"}], "hole0": "Choice", "hole3": "Transform", "_type": "Template39"}]}, "hole0": "Ironbark Protector", "hole3": "choices", "_type": "Template27"}], "hole1": "MinionCard", "hole6": [{"hole1": 8, "hole0": 8, "_type": "Template62"}], "hole4": "player", "hole0": "IronbarkProtector", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 358, 125, 223, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", "choices", "<EOS>", 19, 169, 347, 61, 242, "Choice", "<EOS>", "Cat", "Form", "<EOS>", "Transform", "<EOS>", 346, 88, 325, "Ironbark", "Protector", "<EOS>", "Player", "Selector", "<EOS>", 61, 242, "Choice", "<EOS>", "Bear", "Form", "<EOS>", "Transform", "<EOS>", 346, 88, 325, "Ironbark", "Protector", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "8", "<EOS>", "8", "<EOS>"], "score_history": [-0.000102996826171875, -0.000164031982421875, -0.022550281137228012, -0.0011041047982871532, -3.0517168852384202e-05, -1.1485069990158081e-05, -1.728534698486328e-05, -2.2649765014648438e-06, -1.9073486328125e-06, -0.09848499298095703, -0.0006008148193359375, -7.152555099310121e-07, -2.1696090698242188e-05, -3.576278118089249e-07, -3.814697265625e-06, -7.498746526835021e-06, 0.0, -0.019838333129882812, -1.9073486328125e-06, -0.129876971244812, 0.0, -0.042586326599121094, -0.000896453857421875, -0.12934589385986328, -0.0028324127197265625, -0.006115913391113281, -0.00038945674896240234, -1.621246337890625e-05, -0.21313515305519104, -0.0028353198431432247, -0.00015901254664640874, -0.0029546022415161133, -0.00026794656878337264, -0.0011959075927734375, -2.86102294921875e-05, -7.62939453125e-06, -0.15353143215179443, -0.30618399381637573, -0.00018119563173968345, -0.6065738201141357, -2.0265579223632812e-06, -5.960462772236497e-07, -0.014162063598632812, -0.00124359130859375, -0.0005100964917801321, -1.1444084520917386e-05, -0.15341269969940186, -0.00233353185467422, -4.649158654501662e-06, -0.0006093944539315999, -0.00010835537250386551, -0.0039806365966796875, -9.72747802734375e-05, -3.814697265625e-06, -0.56452876329422, -0.4005926549434662, -0.0003299699747003615, -0.8138603568077087, -1.1920928244535389e-07, -4.768370445162873e-07, -1.788135887181852e-05, -1.9073486328125e-06, -0.0025022029876708984, 0.0, -3.814697265625e-05, -0.028524398803710938, -3.814697265625e-05, -0.00015699121286161244, -2.741813204920618e-06, -0.0005244538187980652, 0.0], "score": -3.7296586564788115, "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(CatForm(), Transform(\n            IronbarkProtector()), PlayerSelector()), Choice(BearForm(),\n            Transform(IronbarkProtector()), PlayerSelector())])\n\n    def create_minion(self, player):\n        return Minion(8, 8)\n"}]}
{"gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Mark of the Wild"}, {"n": 2, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "DRUID"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "FREE"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"arg": "target_func", "_type": "keyword", "value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "targeting"}, "_type": "Attribute", "attr": "find_minion_spell_target"}}]}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"value": {"hole1": "MarkWolf", "hole0": {"value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "cards"}, "_type": "Attribute", "attr": "minions"}, "_type": "Attribute", "attr": "hunter"}, "_type": "Template76"}, "_type": "Assign", "targets": [{"id": "frog", "_type": "Name"}]}, {"value": {"args": [{"id": "targets", "_type": "Name"}], "func": {"value": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "agent"}, "_type": "Attribute", "attr": "<UNK>"}, "_type": "Call"}, "_type": "Assign", "targets": [{"id": "target", "_type": "Name"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "MarkOfTheWild", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 349, 53, 183, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 52, 179, "2", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 353, 95, 336, "target_func", "<EOS>", 13, 143, 13, 143, 21, 174, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 360, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 102, 142, 346, 50, 174, "frog", "<EOS>", 36, 317, 13, 143, 13, 143, 13, 143, 21, 174, "hearthbreaker", "<EOS>", "cards", "<EOS>", "minions", "<EOS>", "hunter", "<EOS>", "Mark", "Wolf", "<EOS>", 102, 142, 346, 50, 174, "target", "<EOS>", 16, 150, 13, 143, 13, 143, 21, 174, "player", "<EOS>", "agent", "<EOS>", "<UNK>", "<EOS>", 346, 50, 174, "targets", "<EOS>"], "score_history": [-0.0002803802490234375, -0.01907062530517578, -0.001647425931878388, -0.00048135535325855017, -0.006757132709026337, -0.0001922836381709203, -0.16765502095222473, -0.0003355173394083977, -0.00015866756439208984, -5.841255187988281e-06, -2.09808349609375e-05, -2.86102294921875e-05, -0.20826339721679688, -0.00092315673828125, -0.00023651123046875, -3.278255098848604e-05, -1.9073486328125e-06, -3.814697265625e-05, -4.38690185546875e-05, -0.000423431396484375, -4.76837158203125e-05, -4.76837158203125e-05, -7.247792382258922e-05, -0.00016045570373535156, -0.00015448994236066937, -6.67572021484375e-05, -0.0007971520535647869, -0.00066375732421875, -0.06879612803459167, -0.13840770721435547, -3.0517578125e-05, -1.71661376953125e-05, -4.3152795115020126e-05, 0.0, -3.4332275390625e-05, -0.0001544952392578125, -1.9073486328125e-06, -3.814697265625e-06, -0.0001697540283203125, -0.0001506805419921875, -0.0096282958984375, -1.9073486328125e-06, -1.1444091796875e-05, -0.0002269744873046875, -1.9073486328125e-05, 0.0, -0.0032806396484375, -9.5367431640625e-06, -0.0030364990234375, -3.814697265625e-06, -0.0001697540283203125, -2.86102294921875e-05, -1.9073486328125e-06, -0.052459716796875, -1.9073486328125e-06, -0.0009164810180664062, -4.76837158203125e-05, -5.91278076171875e-05, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.000141143798828125, -3.814697265625e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.002194643020629883, 0.0, -0.01532745361328125, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -2.47955322265625e-05, -5.7220458984375e-06, -2.861022494471399e-06, -0.47942352294921875, -0.000644683837890625, -2.86102294921875e-05, -1.9073486328125e-05, -5.7220458984375e-06, -1.52587890625e-05, 0.0, -7.033347174001392e-06, -4.1961669921875e-05, -2.47955322265625e-05, -3.814697265625e-06, -3.814697265625e-06, 0.0, -2.6702880859375e-05, -2.3841855067985307e-07, -0.2663755416870117, -2.288818359375e-05, -1.33514404296875e-05, -2.6702880859375e-05, -3.814697265625e-06, -0.5615448951721191, -0.0003604888916015625, -0.34237098693847656, -4.9591064453125e-05, -3.0517578125e-05, -5.7220458984375e-06, -0.001926422119140625, 0.0, -0.3599119186401367, 0.0, -0.0002899169921875, -5.53131103515625e-05, -0.002289891242980957, -0.0010693073272705078, -0.006299018859863281, -3.814697265625e-06, -0.11194276809692383, -1.7404556274414062e-05, -0.5482375621795654, -0.0001697540283203125, -1.7577193975448608, -0.46688270568847656, -0.006534814368933439, -0.07371139526367188, -0.0002002716064453125, -9.5367431640625e-06, -8.392333984375e-05, 0.0, -1.2050445079803467, -6.9141146923357155e-06, -0.15281200408935547, -0.00030517578125, -7.62939453125e-06, -0.0001316070556640625, -0.06677818298339844, 0.0, -0.0021915435791015625, 0.0, -0.12835025787353516, -2.0265579223632812e-06, -0.060030460357666016, -4.9591064453125e-05, -0.4259603023529053, -1.9073486328125e-06, -0.0026950836181640625, -0.0014438629150390625, -1.9073486328125e-06, -0.41656458377838135, -4.0531158447265625e-06], "score": -8.154868470788614, "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        frog = hearthbreaker.cards.minions.hunter.MarkWolf()\n        target = player.agent.<UNK>(targets)\n"}]}
{"gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n", "beams": [{"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 4, "hole0": "Multi-Shot", "_type": "Template31"}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"value": {"args": [{"value": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "other_player"}, "_type": "Attribute", "attr": "minions"}], "func": {"value": {"id": "copy", "_type": "Name"}, "_type": "Attribute", "attr": "copy"}, "_type": "Call"}, "_type": "Assign", "targets": [{"id": "minions", "_type": "Name"}]}, {"target": {"id": "i", "_type": "Name"}, "iter": {"args": [{"n": 0, "_type": "Num"}, {"n": 3, "_type": "Num"}], "func": {"id": "range", "_type": "Name"}, "_type": "Call"}, "body": [{"value": {"args": [{"id": "minions", "_type": "Name"}], "func": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "random_choice"}, "_type": "Call"}, "_type": "Assign", "targets": [{"id": "minion", "_type": "Name"}]}, {"hole2": [{"id": "minion", "_type": "Name"}], "hole1": "remove", "hole0": {"id": "minions", "_type": "Name"}, "_type": "Template77"}, {"hole2": [{"hole0": 2, "_type": "Template61"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"id": "minion", "_type": "Name"}, "_type": "Template77"}], "_type": "For"}], "hole7": [{"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"values": [{"hole2": "player", "hole1": "can_use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, {"ops": [{"_type": "GtE"}], "comparators": [{"n": 2, "_type": "Num"}], "_type": "Compare", "left": {"args": [{"value": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "other_player"}, "_type": "Attribute", "attr": "minions"}], "func": {"id": "len", "_type": "Name"}, "_type": "Call"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "Multi-Shot", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 286, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 358, 127, 230, "Multi-Shot", "<EOS>", "4", "<EOS>", "HUNTER", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 360, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 102, 142, 346, 50, 174, "minions", "<EOS>", 16, 150, 13, 143, 21, 174, "copy", "<EOS>", "copy", "<EOS>", 346, 42, 143, 13, 143, 21, 174, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 107, 156, 21, 174, "i", "<EOS>", 16, 150, 21, 174, "range", "<EOS>", 347, 52, 179, "0", "<EOS>", 52, 179, "3", "<EOS>", 360, 102, 142, 346, 50, 174, "minion", "<EOS>", 16, 150, 13, 143, 21, 174, "game", "<EOS>", "random_choice", "<EOS>", 346, 50, 174, "minions", "<EOS>", 136, 318, 21, 174, "minions", "<EOS>", "remove", "<EOS>", 346, 50, 174, "minion", "<EOS>", 136, 318, 21, 174, "minion", "<EOS>", "damage", "<EOS>", 347, 75, 298, "2", "<EOS>", 50, 174, "self", "<EOS>", 358, 108, 157, "can_use", "<EOS>", 1, 334, 342, 333, "self", "<EOS>", 333, "player", "<EOS>", 333, "game", "<EOS>", 358, 111, 181, 15, 146, 2, 347, 76, 300, 38, 325, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 46, 153, 16, 150, 21, 174, "len", "<EOS>", 346, 42, 143, 13, 143, 21, 174, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 343, 6, 346, 52, 179, "2", "<EOS>"], "score_history": [-9.5367431640625e-06, -0.05708599090576172, -4.076874756719917e-05, -0.0027239301707595587, -2.610682713566348e-05, -0.00013244152069091797, -1.3708998267247807e-05, -9.5367431640625e-06, -0.39600372314453125, -0.000335693359375, -7.152555099310121e-07, -2.0265579223632812e-06, -2.264974000354414e-06, 0.0, -0.002735137939453125, -1.9073486328125e-06, -0.0001163482666015625, 0.0, -9.56058211158961e-05, 0.0, -0.0001239776611328125, -0.0001220703125, -6.794917680963408e-06, -4.291534423828125e-06, -0.1529102325439453, -9.5367431640625e-06, -0.000141143798828125, -1.52587890625e-05, -0.000110626220703125, -9.5367431640625e-06, 0.0, -1.5854835510253906e-05, -2.86102294921875e-05, -3.0636721930932254e-05, -1.1920928244535389e-07, -3.528593879309483e-05, -1.1920928244535389e-07, -2.5749075575731695e-05, -5.960462772236497e-07, -0.01919269561767578, -3.814697265625e-06, -0.000408172607421875, -5.7220458984375e-06, -8.392333984375e-05, -0.0023781817872077227, -0.00019716366659849882, -0.004784584045410156, -3.814697265625e-05, -5.91278076171875e-05, -3.24249267578125e-05, -0.001117706298828125, 0.0, -0.0017837285995483398, -3.814697265625e-06, -0.00020241737365722656, -3.814697265625e-06, -3.814697265625e-06, -0.008306503295898438, -8.0108642578125e-05, -2.47955322265625e-05, -1.9073486328125e-06, -0.000213623046875, -2.09808349609375e-05, -6.246565317269415e-05, -1.9073486328125e-06, -0.009437203407287598, 0.0, -0.0004518032947089523, -1.9073486328125e-06, -0.028367996215820312, -0.0004119873046875, -2.47955322265625e-05, -0.0005950927734375, -0.0017834879690781236, -3.814697265625e-06, -0.00035381317138671875, -5.7220458984375e-06, -5.7220458984375e-05, -3.0517578125e-05, -0.002733838278800249, -2.3841855067985307e-07, -7.2479248046875e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.0005990862264297903, -5.7220458984375e-05, -0.00484466552734375, 0.0, -0.24123670160770416, -9.5367431640625e-06, -0.2509431838989258, -0.0033512115478515625, -3.4332275390625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.000118255615234375, -0.05883467197418213, -2.1457672119140625e-06, -0.0011005401611328125, -5.7220458984375e-06, -8.20159912109375e-05, -1.9073486328125e-06, -0.0004367828369140625, 0.0, -0.009915351867675781, -1.1920928244535389e-07, -0.0007525681867264211, -3.814697265625e-06, -0.0003509521484375, -0.0003643035888671875, -3.814697265625e-06, -0.00033704936504364014, -0.0002558217092882842, -0.0024366378784179688, -0.000682830810546875, -0.0009746551513671875, -7.05718994140625e-05, -0.0025758720003068447, -0.0006740527460351586, -0.025162527337670326, -5.960462772236497e-07, -0.0002307891845703125, -0.0008907318115234375, -7.62939453125e-06, -0.007225700654089451, 0.0, -0.0004100799560546875, -0.000827789306640625, -0.0008792877197265625, -1.9073486328125e-06, -0.06459172815084457, -3.2186455882765586e-06, -0.001239156466908753, 0.0, -2.09808349609375e-05, -0.00104522705078125, -7.2479248046875e-05, -0.5865682363510132, 0.0, -0.000156402587890625, -4.38690185546875e-05, -0.0005948542384430766, -2.1457672119140625e-05, -3.0517578125e-05, -0.0006275177001953125, -9.34600830078125e-05, -0.002426492515951395, 0.0, -0.0001010894775390625, -0.000110626220703125, -0.00011444091796875, -0.001312255859375, -7.379053568001837e-05, -1.9073304429184645e-05, -3.814697265625e-06, -0.00014007030404172838, -1.1920928244535389e-07, -1.9073486328125e-06, -2.253044476674404e-05, -1.9073468138230965e-06, -2.288818359375e-05, -0.0006618499755859375, -0.0001125335693359375, -0.0012302398681640625, -0.0006809234619140625, -9.5367431640625e-05, -0.0015850067138671875, -0.0006961822509765625, -5.340576171875e-05, -0.0001926422119140625, 0.0, -0.000346734537743032, -3.314018249511719e-05, -0.001970532815903425, -1.1920928244535389e-07, -0.00045446533476933837, 0.0, -0.0019890842959284782, -1.2516897186287679e-05, -0.011407852172851562, -4.38690185546875e-05, -0.0012226104736328125, -3.62396240234375e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.001914902706630528, -1.5139572496991605e-05, -2.6702880859375e-05, -0.001819610595703125, -0.000133514404296875, -0.000492095947265625, -9.5367431640625e-06, -4.1961669921875e-05, -1.9073486328125e-06, -6.771087646484375e-05, -9.5367431640625e-06, -0.008164286613464355, 0.0, -0.00018107896903529763, -1.9073486328125e-06, -0.011866569519042969, -0.0017423629760742188, -4.38690185546875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.05783672630786896, 0.0], "score": -2.079926620440169, "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        for i in range(0, 3):\n            minion = game.random_choice(minions)\n            minions.remove(minion)\n            minion.damage(player.effective_spell_damage(2), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}]}
{"gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Power Word Shield"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "PRIEST"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "FREE"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"arg": "target_func", "_type": "keyword", "value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "targeting"}, "_type": "Attribute", "attr": "find_spell_target"}}]}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"hole2": [{"hole1": "Draw", "hole0": "MinionSummoned", "hole4": "PlayerSelector", "_type": "Template30"}], "hole1": "add_effect", "hole0": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Template77"}, {"value": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Assign", "targets": [{"id": "draw_player", "_type": "Name"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "Power<UNK>Shield", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Power", "<UNK>", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 349, 53, 183, "Power", " ", "Word", " ", "Shield", "<EOS>", 52, 179, "1", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 353, 95, 336, "target_func", "<EOS>", 13, 143, 13, 143, 21, 174, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 360, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 136, 318, 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>", "add_effect", "<EOS>", 346, 57, 226, "Minion", "Summoned", "<EOS>", "Draw", "<EOS>", "Player", "Selector", "<EOS>", 102, 142, 346, 50, 174, "draw_player", "<EOS>", 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>"], "score_history": [-0.0002574920654296875, -0.001811981201171875, -0.000125281119835563, -0.4503607749938965, -0.14857584238052368, -0.00011515259393490851, -9.452846279600635e-05, -4.589557647705078e-05, -1.1920922133867862e-06, -0.000194549560546875, -0.10523223876953125, -0.000652313232421875, -8.392333984375e-05, -2.6702880859375e-05, -1.764288026606664e-05, 0.0, -3.4332275390625e-05, -1.9073486328125e-06, -0.0002994537353515625, -1.9073486328125e-05, -0.001476287841796875, -2.1457672119140625e-06, -0.0001595004287082702, -0.019854413345456123, -0.0001125335693359375, -0.01968097686767578, -0.13886070251464844, -6.866455078125e-05, -3.814697265625e-06, -9.536731795378728e-07, -1.9073486328125e-06, -4.76837158203125e-05, -1.1444091796875e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0001163482666015625, -9.5367431640625e-06, -0.2625551223754883, 0.0, -9.5367431640625e-06, -0.0001678466796875, -9.5367431640625e-06, 0.0, -0.0001010894775390625, -1.9073486328125e-05, -0.0043468475341796875, -1.9073486328125e-06, -0.0007152557373046875, -6.29425048828125e-05, -7.62939453125e-06, -0.0005974769592285156, 0.0, -0.0017518997192382812, -0.00063323974609375, -2.09808349609375e-05, -3.814697265625e-06, -3.62396240234375e-05, 0.0, -0.0001506805419921875, 0.0, -3.445148468017578e-05, 0.0, -0.37605106830596924, 0.0, -0.00013363361358642578, 0.0, -2.622604142743512e-06, 0.0, -0.000362396240234375, -5.7220458984375e-06, -5.9604644775390625e-06, -3.3378546504536644e-06, -0.15083026885986328, -4.38690185546875e-05, -0.00012969970703125, -9.5367431640625e-05, -4.9591064453125e-05, -5.7220458984375e-06, 0.0, -2.3841855067985307e-07, -3.814697265625e-06, -3.933906555175781e-06, -3.814697265625e-06, -6.890296936035156e-05, 0.0, -0.000102996826171875, -1.1920928244535389e-07, -0.01842975616455078, -4.38690185546875e-05, -0.0004177093505859375, 0.0, -0.0002346038818359375, 0.0, -0.0003230571746826172, -5.841255187988281e-06, -0.0009009838104248047, -9.536738616588991e-07, -0.766736626625061, -1.9073486328125e-06, -5.91278076171875e-05, -0.3339052200317383, -0.36053466796875, -0.7569870352745056, -0.4266088008880615, -0.1794612854719162, -0.7066564559936523, -0.0009768009185791016, -0.1863727569580078, -0.0006355423247441649, -0.00010346830822527409, -0.32287025451660156, -0.0003681182861328125, -1.71661376953125e-05, -6.103515625e-05, -1.9073486328125e-06, -1.2109441757202148, -1.1920928244535389e-07, -0.2375030517578125, -8.96453857421875e-05, -0.4121227264404297, -3.814697265625e-06, -0.01337420754134655, -1.311301275563892e-06, -0.0024566645734012127, -1.9192511899746023e-05], "score": -7.626723333258454, "inferred_code": "class Power<UNK>Shield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_effect(Effect(MinionSummoned(), ActionTag(Draw(),\n            PlayerSelector())))\n        draw_player = self.target\n"}]}
{"gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 4, "hole0": "Sen'jin Shieldmasta", "_type": "Template34", "hole3": "FREE"}], "hole1": "MinionCard", "hole6": [{"hole2": "taunt", "hole1": 5, "hole0": 3, "_type": "Template50", "hole3": {"value": true, "_type": "NameConstant"}}], "hole4": "player", "hole0": "Sen'jinShieldmasta", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 358, 128, 233, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "3", "<EOS>", "5", "<EOS>", "taunt", "<EOS>", 22, 175, "True", "<EOS>"], "score_history": [-5.7220458984375e-06, -1.33514404296875e-05, -0.0005733569269068539, -3.290128370281309e-05, -5.960462772236497e-07, -5.679205060005188e-06, -5.841255187988281e-06, -3.576278118089249e-07, -1.9073486328125e-06, -0.002132415771484375, -0.0002346038818359375, -9.536738616588991e-07, -2.5153160095214844e-05, -7.152555099310121e-07, 0.0, -4.8875799620873295e-06, 0.0, -0.00099945068359375, 0.0, -0.0001697540283203125, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0019779205322265625, 0.0, 0.0, -0.0001621246337890625, -3.24249267578125e-05, -2.9802240533172153e-06, -3.3378546504536644e-06, -5.960462772236497e-07, -1.0728830375228426e-06, -0.033847808837890625, 0.0, -4.57763671875e-05, -3.814697265625e-05, -0.00019085407257080078, 0.0], "score": -0.04052022730883209, "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}]}
{"gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "ROGUE", "hole1": 1, "hole0": "Sinister Strike", "_type": "Template2"}, {"value": {"args": [{"value": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "other_player"}, "_type": "Attribute", "attr": "minions"}], "func": {"value": {"id": "copy", "_type": "Name"}, "_type": "Attribute", "attr": "copy"}, "_type": "Call"}, "_type": "Assign", "targets": [{"id": "find_spell_target", "_type": "Name"}]}], "_type": "ClassDef", "name": "SinisterStrike", "bases": [{"id": "SpellCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Sinister", "Strike", "<EOS>", 346, 50, 174, "Spell", "Card", "<EOS>", 359, 123, 214, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", 102, 142, 346, 50, 174, "find_spell_target", "<EOS>", 16, 150, 13, 143, 21, 174, "copy", "<EOS>", "copy", "<EOS>", 346, 42, 143, 13, 143, 21, 174, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>"], "score_history": [-0.001369476318359375, -9.72747802734375e-05, -5.7220458984375e-06, -7.62939453125e-05, -9.918212890625e-05, -1.3589766240329482e-05, -3.933898824470816e-06, -1.311301275563892e-06, -2.09808349609375e-05, -9.5367431640625e-06, 0.0, -1.4064658898860216e-05, -6.532669067382812e-05, -3.862379162455909e-05, -9.34600830078125e-05, -0.8089237213134766, -0.00113677978515625, -1.0728830375228426e-06, -2.9802322387695312e-05, -2.3841855067985307e-07, 0.0, -1.1920928244535389e-07, 0.0, -0.017110586166381836, 0.0, -0.7630252838134766, -5.91278076171875e-05, -4.9591064453125e-05, -0.02048492431640625, -1.9073486328125e-05, -1.1757678985595703, -3.576278118089249e-07, -1.0986032485961914, -3.0517578125e-05, -2.6702880859375e-05, -1.33514404296875e-05, -0.5927257537841797, -1.9073486328125e-06, -0.0036513805389404297, -1.1920928244535389e-07, -0.0002689361572265625, 0.0, -7.62939453125e-06, -0.0067768096923828125, -4.1961669921875e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.07759857177734375, -9.5367431640625e-06, -5.352497100830078e-05, 0.0, -0.0020411014556884766, 0.0, -0.5108609199523926, 0.0], "score": -5.08124458574072, "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n    find_spell_target = copy.copy(game.other_player.minions)\n"}]}
{"gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "WARRIOR", "hole1": 2, "hole8": {"hole1": [{"n": 0, "_type": "Num"}], "hole0": "Discard", "_type": "Template42"}, "hole6": "MECH", "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "hole0": "Succubus", "hole3": "RARE", "_type": "Template4"}, {"hole1": 3, "hole0": 4, "_type": "Template19"}], "_type": "ClassDef", "name": "Succubus", "bases": [{"id": "MinionCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Succubus", "<EOS>", 346, 50, 174, "Minion", "Card", "<EOS>", 359, 129, 250, "Succubus", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 174, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 28, 261, "Discard", "<EOS>", 346, 52, 179, "Discard", "<EOS>", 122, 213, "4", "<EOS>", "3", "<EOS>"], "score_history": [-0.011826515197753906, -3.62396240234375e-05, -1.33514404296875e-05, -4.00543212890625e-05, -3.814697265625e-05, -0.04894335940480232, -0.001682866713963449, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -4.0525628719478846e-06, -2.491451959940605e-05, -1.1086463018727954e-05, -1.1444091796875e-05, -0.004271507263183594, -5.14984130859375e-05, -1.9073486328125e-06, -5.841255187988281e-06, -5.233287447481416e-05, 0.0, -0.9090255498886108, -1.9073486328125e-06, -0.04817485809326172, 0.0, -0.00013625620340462774, -1.1920928244535389e-07, -3.24249267578125e-05, 0.0, -3.063678741455078e-05, -2.0265579223632812e-06, -0.2471609115600586, -1.9073486328125e-06, -9.167194366455078e-05, -3.24249267578125e-05, -0.730158805847168, -0.2911262512207031, -0.001402363646775484, -0.23983854055404663, -0.00368499755859375, -0.028489112854003906, -2.47955322265625e-05, -0.01904578134417534, -9.655734174884856e-05, -0.3466472625732422, -0.0011348724365234375, -2.9802263270539697e-06, -8.344646857949556e-07, -0.0001758335711201653, 0.0], "score": -2.933559597964738, "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Discard(0), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}]}
{"gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 7, "hole0": "War Golem", "_type": "Template31"}], "hole1": "MinionCard", "hole6": [{"hole1": 7, "hole0": 7, "_type": "Template62"}], "hole4": "player", "hole0": "WarGolem", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 358, 127, 230, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "7", "<EOS>", "7", "<EOS>"], "score_history": [-6.29425048828125e-05, -2.86102294921875e-05, -0.028378188610076904, -0.0008207766804844141, -1.07287787614041e-05, -8.52346420288086e-06, -3.445148468017578e-05, -3.576277322281385e-06, -1.9073486328125e-06, -0.00421142578125, -8.96453857421875e-05, -4.565628114505671e-05, -3.2782554626464844e-05, -2.3841855067985307e-07, 0.0, -0.0013173504266887903, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -0.000118255615234375, 0.0, -8.20159912109375e-05, 0.0, -2.09808349609375e-05, -0.011606216430664062, -1.52587890625e-05, -5.3404430218506604e-05, -2.3841855067985307e-07, -0.00021944873151369393, 0.0], "score": -0.04717597490838443, "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}]}
{"gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Acidmaw"}, {"n": 7, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "HUNTER"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "LEGENDARY"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"hole0": "MECH", "_type": "Template75"}]}], "hole1": "MinionCard", "hole6": [{"hole2": "effects", "hole1": 2, "hole0": 4, "_type": "Template50", "hole3": {"hole1": [{"keywords": [{"arg": "condition", "_type": "keyword", "value": {"hole0": "IsMinion", "_type": "Template79"}}], "func": {"id": "CharacterDamaged", "_type": "Name"}, "_type": "Call"}, {"hole0": "Kill", "_type": "Template44", "hole3": "SelfSelector"}], "hole0": "Effect", "_type": "Template78"}}], "hole4": "player", "hole0": "Acidmaw", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 349, 53, 183, "Acidmaw", "<EOS>", 52, 179, "7", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 353, 94, 316, "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "4", "<EOS>", "2", "<EOS>", "effects", "<EOS>", 37, 321, "Effect", "<EOS>", 347, 45, 149, 21, 174, "Character", "Damaged", "<EOS>", 353, 95, 336, "condition", "<EOS>", 38, 325, "Is", "Minion", "<EOS>", 64, 269, "Kill", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-0.0001850128173828125, -8.392333984375e-05, -0.02517535723745823, -2.3841855067985307e-07, -2.5540590286254883e-05, -2.5153160095214844e-05, -2.3841855067985307e-07, -0.0001354217529296875, -0.14002704620361328, -0.002620697021484375, -1.9073486328125e-05, 0.0, -8.821482879284304e-06, -1.33514404296875e-05, -8.58306884765625e-05, 0.0, -0.0014400482177734375, -0.0001621246337890625, -0.001194000244140625, -1.2993770724278875e-05, -2.0265579223632812e-06, -4.38690185546875e-05, -3.814697265625e-06, -7.569558511022478e-05, -3.814697265625e-06, -6.103515625e-05, 0.0, -9.5367431640625e-06, -5.14984130859375e-05, -0.0001239776611328125, -1.9073486328125e-06, -0.003724217414855957, -0.0001087188720703125, -0.0002040863037109375, -3.814697265625e-06, -2.09808349609375e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -0.0017681121826171875, 0.0, -0.0005626678466796875, -0.10107994079589844, -0.000347137451171875, -1.0714541673660278, -3.814697265625e-06, -6.4849853515625e-05, 0.0, -8.0108642578125e-05, 0.0, -9.5367431640625e-06, -0.5682535171508789, -3.0517578125e-05, -5.006631909054704e-06, -2.3841855067985307e-07, -0.0005813296884298325, -1.1920928244535389e-07, -0.011855244636535645, -1.9073486328125e-06, -0.0002460479736328125, -0.0004711151123046875, -0.002885086927562952, -7.748603820800781e-06, -0.0003337860107421875, -0.0002956390380859375, -0.010213851928710938, -1.1444091796875e-05, -1.1444091796875e-05, -0.0032768116798251867, -0.05933189392089844, 0.0, -0.00020599365234375, -2.6702880859375e-05, -1.9073486328125e-06, -0.005767226219177246, -5.1020462706219405e-05, -0.06957244873046875, -0.0001354217529296875, -0.62673419713974, -0.003656730055809021, -0.027713775634765625, -0.15716838836669922, -0.14710617065429688, -0.6305544972419739, -0.0002833595499396324, -0.03712880611419678, -2.3841855067985307e-07, 0.0], "score": -3.7149571882099437, "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(condition=\n            IsMinion()), ActionTag(Kill(), SelfSelector()))])\n"}]}
{"gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Boar"}, {"n": 3, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "ALL"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "RARE"}, {"value": true, "_type": "NameConstant"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77"}], "hole1": "MinionCard", "hole6": [{"hole2": "charge", "hole1": 2, "hole0": 4, "_type": "Template50", "hole3": {"value": true, "_type": "NameConstant"}}], "hole4": "p", "hole0": "Boar", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 358, 136, 318, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 350, 53, 183, "Boar", "<EOS>", 52, 179, "3", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 51, 175, "False", "<EOS>", "create_minion", "<EOS>", "p", "<EOS>", 358, 130, 287, "4", "<EOS>", "2", "<EOS>", "charge", "<EOS>", 22, 175, "True", "<EOS>"], "score_history": [-6.29425048828125e-05, -1.71661376953125e-05, -0.0010640918044373393, -3.290128370281309e-05, -3.4809112548828125e-05, -5.9604644775390625e-06, -2.1457672119140625e-06, -4.00543212890625e-05, -0.4716529846191406, -0.025350570678710938, -7.05718994140625e-05, -3.814697265625e-06, -9.536738616588991e-07, -3.814697265625e-06, -0.00012850759958382696, -1.1920928244535389e-07, -0.022748947143554688, -4.38690185546875e-05, -0.0004940032958984375, -1.7046782886609435e-05, -5.960462772236497e-07, -5.14984130859375e-05, -7.62939453125e-06, -8.362415246665478e-05, -1.9073486328125e-06, -7.05718994140625e-05, -5.7220458984375e-06, -7.62939453125e-06, -7.62939453125e-06, -5.91278076171875e-05, -1.1444091796875e-05, -5.14984130859375e-05, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -2.86102294921875e-05, 0.0, -0.000453948974609375, -2.562999725341797e-05, -0.027353286743164062, -5.7220458984375e-06, -0.0015773773193359375, -6.67572021484375e-05, -0.00012409687042236328, -3.62396240234375e-05, -0.00018322467803955078, 0.0, -0.008940815925598145, 0.0, -1.9073486328125e-05, -0.008170127868652344, -5.91278076171875e-05, -4.172316948825028e-06, -1.1920928244535389e-07, -0.0005478524835780263, 0.0, -0.0010012388229370117, -2.3841855067985307e-07, -0.0012531280517578125, -1.33514404296875e-05, -0.0002437829680275172, -1.1563301086425781e-05], "score": -0.572265082990512, "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, True\n            )\n\n    def create_minion(self, p):\n        return Minion(4, 2, charge=True)\n"}]}
{"gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n", "beams": [{"model_output": {"hole2": [{"hole2": "DRUID", "hole1": 2, "hole4": {"_type": "List", "elts": [{"hole1": "Health", "hole6": "SelfSelector", "hole4": [{"_type": "List", "elts": [{"hole0": 2, "_type": "Template46"}, {"hole0": "Health", "_type": "Template54"}]}], "hole0": "Choice", "hole3": "Give", "_type": "Template39"}, {"hole1": "Health", "hole6": "SelfSelector", "hole4": [{"_type": "List", "elts": [{"hole0": 2, "_type": "Template47"}]}], "hole0": "Choice", "hole3": "Give", "_type": "Template39"}]}, "hole0": "Anodized Robo Cub", "hole3": "choices", "_type": "Template27"}], "hole1": "MinionCard", "hole6": [{"hole1": 2, "hole0": 2, "_type": "Template62"}], "hole4": "player", "hole0": "Anodized<UNK>Cub", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Anodized", "<UNK>", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 358, 125, 223, "Anodized", " ", "Robo", " ", "Cub", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "choices", "<EOS>", 19, 169, 347, 61, 242, "Choice", "<EOS>", "Health", "<EOS>", "Give", "<EOS>", 346, 48, 169, 347, 65, 278, "2", "<EOS>", 69, 290, "Health", "<EOS>", "Self", "Selector", "<EOS>", 61, 242, "Choice", "<EOS>", "Health", "<EOS>", "Give", "<EOS>", 346, 48, 169, 346, 66, 279, "2", "<EOS>", "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "2", "<EOS>", "2", "<EOS>"], "score_history": [-0.0002117156982421875, -8.7738037109375e-05, -0.008461382240056992, -0.2978017330169678, -0.004293988458812237, -0.00024577934527769685, -2.013053745031357e-06, -2.300739288330078e-05, -8.344646857949556e-07, -1.9073486328125e-06, -0.0064220428466796875, -0.0002651214599609375, -2.503394853192731e-06, -1.621246337890625e-05, -0.00020051002502441406, -8.225440979003906e-05, -0.002468705177307129, -0.5307275056838989, -3.5762791412707884e-06, 0.0, -0.013979077339172363, -1.52587890625e-05, -0.34055018424987793, -5.7220458984375e-06, -0.017450332641601562, -0.0001163482666015625, -0.0003070831298828125, -0.0029153823852539062, -0.004956245422363281, -0.00023174284433480352, -2.1457672119140625e-06, -0.440054714679718, -0.002030589384958148, -0.004886030685156584, -0.0037106561940163374, -0.003826141357421875, -0.0022869110107421875, -6.67572021484375e-05, -0.011491775512695312, -0.2969484329223633, -0.037601470947265625, -0.0002842304529622197, -0.00013327413762453943, -0.03816413879394531, -5.53131103515625e-05, -0.3357199430465698, -0.04933823272585869, -0.06255209445953369, -2.300734558957629e-05, -4.768370445162873e-07, -0.0035581588745117188, -0.007590293884277344, -0.00929343607276678, -4.1723224057932384e-06, -0.5320543646812439, -0.0009491938399150968, -0.0049970014952123165, -0.04017182067036629, -7.05718994140625e-05, -0.004085540771484375, -0.000396728515625, -0.09186744689941406, -0.031986236572265625, -0.0044994354248046875, -0.0034356878604739904, -6.318082796497038e-06, -0.04645990952849388, -0.00034981872886419296, -2.3841855067985307e-07, -0.00019810876983683556, 0.0, -0.0018326041754335165, 0.0, -0.0001010894775390625, -0.0001010894775390625, -0.0001068115234375, -5.960460498499742e-07, -1.1920928244535389e-07, -7.046051905490458e-06, 0.0], "score": -3.3051460837575846, "inferred_code": "class Anodized<UNK>Cub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, choices=[Choice(Health(), Give([Buff(\n            ChangeHealth(2)), Buff(Health())]), SelfSelector()), Choice(\n            Health(), Give([Buff(ChangeAttack(2))]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2)\n"}]}
{"gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Burrowing Mine"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "WARRIOR"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "LEGENDARY"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"arg": "target_func", "_type": "keyword", "value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "targeting"}, "_type": "Attribute", "attr": "find_minion_spell_target"}}]}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"hole2": [{"hole2": 0, "hole1": "effective_heal_power", "hole0": {"id": "player", "_type": "Name"}, "_type": "Template69"}, {"id": "self", "_type": "Name"}], "hole1": "heal", "hole0": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Template77"}, {"value": {"id": "type", "_type": "Name"}, "_type": "Assign", "targets": [{"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "hand"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "BurrowingMine", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 349, 53, 183, "Burrowing", " ", "Mine", "<EOS>", 52, 179, "0", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 353, 95, 336, "target_func", "<EOS>", 13, 143, 13, 143, 21, 174, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 360, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 136, 318, 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>", "heal", "<EOS>", 347, 79, 308, 21, 174, "player", "<EOS>", "effective_heal_power", "<EOS>", "explodes", "<EOS>", 50, 174, "self", "<EOS>", 102, 142, 346, 42, 143, 21, 174, "player", "<EOS>", "hand", "<EOS>", 21, 174, "type", "<EOS>"], "score_history": [-0.0002574920654296875, -0.00079345703125, -0.0002431573811918497, -0.0003685271949507296, -0.0023340368643403053, -5.9604444686556235e-06, -0.00010251977801090106, -8.106222594506107e-06, -3.814697265625e-05, -0.6340188980102539, -0.09019851684570312, -2.86102294921875e-05, 0.0, -4.41074053014745e-06, -1.9073486328125e-06, -2.86102294921875e-05, -3.814697265625e-06, -0.0001850128173828125, -0.00014495849609375, -0.0001220703125, -8.344391244463623e-05, -4.9591064453125e-05, -0.000769089674577117, -0.0014747381210327148, -2.09808349609375e-05, -5.7220458984375e-06, -2.384185791015625e-05, -1.1444091796875e-05, -3.814697265625e-06, -1.71661376953125e-05, -9.5367431640625e-06, -7.62939453125e-06, -0.000102996826171875, -5.7220458984375e-06, -0.004423260688781738, -1.9073486328125e-06, -4.1961669921875e-05, -2.09808349609375e-05, -2.09808349609375e-05, 0.0, -0.0002117156982421875, -1.9073486328125e-06, -0.012401580810546875, 0.0, -0.022130966186523438, -0.08267402648925781, -1.9073486328125e-06, -0.2768239974975586, -0.0001125335693359375, -0.019439697265625, -5.340576171875e-05, -0.0002765655517578125, 0.0, -2.09808349609375e-05, 0.0, -0.0003205537796020508, -8.821487426757812e-05, -6.67572021484375e-05, -5.7220458984375e-06, -0.7027465105056763, -2.288818359375e-05, -0.000110626220703125, -1.9073486328125e-06, -1.1563301086425781e-05, 0.0, -0.0002899169921875, -3.4332275390625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.36051464080810547, -2.6702880859375e-05, -2.6702880859375e-05, -0.0001659393310546875, -0.0003070831298828125, -1.33514404296875e-05, 0.0, -2.6702880859375e-05, -7.62939453125e-06, -4.38690185546875e-05, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -8.83340835571289e-05, -1.1920928244535389e-07, -0.010296821594238281, -2.86102294921875e-05, -0.0030040740966796875, 0.0, -0.0034694671630859375, 0.0, -0.0028400421142578125, -4.0531158447265625e-06, -0.004570960998535156, -1.1920928244535389e-07, -0.2786470651626587, 0.0, -0.00075531005859375, -0.10083770751953125, -0.0014801025390625, -0.0016765594482421875, 0.0, -0.0009473562240600586, 0.0, -0.03764009475708008, -0.40930473804473877, -0.22026191651821136, -0.008709114044904709, -4.9591064453125e-05, -0.000499725341796875, -0.004463315010070801, -3.159046173095703e-05, -0.060797691345214844, -7.62939453125e-06, -3.814697265625e-06, -0.11948490142822266, -1.9073486328125e-06, -0.05826282501220703, 0.0, -0.38935232162475586, -2.3841855067985307e-07, -0.4980813264846802, -1.9073486328125e-06, -0.2493448257446289, -3.814697265625e-06, -1.824761152267456, -3.0755843908991665e-05], "score": -6.504736338607884, "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.LEGENDARY, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.heal(player.effective_heal_power(0), self)\n        player.hand = type\n"}]}
{"gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "SHAMAN", "hole1": 2, "hole8": {"n": 2, "_type": "Num"}, "hole6": "find_spell_target", "hole7": "overload", "hole5": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "targeting"}, "hole4": "target_func", "hole0": "Crackle", "hole3": "COMMON", "_type": "Template4"}, {"hole2": [{"hole0": 6, "_type": "Template61"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Template3"}], "_type": "ClassDef", "name": "Crackle", "bases": [{"id": "SpellCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Crackle", "<EOS>", 346, 50, 174, "Spell", "Card", "<EOS>", 359, 129, 250, "Crackle", "<EOS>", "2", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "target_func", "<EOS>", 13, 143, 21, 174, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "overload", "<EOS>", 23, 179, "2", "<EOS>", 126, 225, 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 347, 75, 298, "6", "<EOS>", 50, 174, "self", "<EOS>"], "score_history": [-0.002445220947265625, -4.38690185546875e-05, -3.814697265625e-06, -8.96453857421875e-05, -4.76837158203125e-05, -3.4570662137412e-06, -0.0015379308024421334, -1.1444091796875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0015815767692402005, -7.414809078909457e-05, -2.896785554185044e-05, -0.000286102294921875, -0.0029926300048828125, -8.96453857421875e-05, -3.576272320060525e-06, -3.814697265625e-06, -1.7642816601437517e-05, 0.0, -0.00280606746673584, 0.0, -0.1182546615600586, 0.0, -0.0011615753173828125, -3.814697265625e-05, -0.0068645477294921875, -1.33514404296875e-05, -0.0001926422119140625, 0.0, -0.0007688999176025391, -3.814697265625e-06, -7.82012939453125e-05, -3.814697265625e-06, -0.001267552375793457, 0.0, -0.017251014709472656, -0.000164031982421875, -0.009246826171875, -7.62939453125e-05, -0.13069428503513336, 0.0, -0.0030536651611328125, -0.0002803802490234375, -0.00030517578125, 0.0, -0.0002002716064453125, 0.0, -0.0033189058303833008, -9.5367431640625e-06, -1.1563301086425781e-05, -3.576278118089249e-07, -4.637155871023424e-05, -2.3841855067985307e-07, -0.0006275177001953125, -0.001495361328125, -3.24249267578125e-05, -0.018341779708862305, -1.1920928244535389e-07, -4.38690185546875e-05, -6.4849853515625e-05, -0.0004967441782355309, -0.0010274648666381836], "score": -0.32751112389941994, "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=2)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}]}
{"gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "ALL", "hole1": 1, "hole5": [{"arg": "target_func", "_type": "keyword", "value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "targeting"}, "_type": "Attribute", "attr": "find_minion_spell_target"}}], "hole4": [{"value": true, "_type": "NameConstant"}], "hole0": "Emergency Coolant", "hole3": "COMMON", "_type": "Template14"}, {"hole2": [{"id": "self", "_type": "Name"}], "hole1": "die", "hole0": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Template3"}], "_type": "ClassDef", "name": "EmergencyCoolant", "bases": [{"id": "SpellCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Emergency", "Coolant", "<EOS>", 346, 50, 174, "Spell", "Card", "<EOS>", 359, 118, 200, "Emergency", " ", "Coolant", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 346, 51, 175, "False", "<EOS>", 353, 95, 336, "target_func", "<EOS>", 13, 143, 13, 143, 21, 174, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 126, 225, 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 346, 50, 174, "self", "<EOS>"], "score_history": [-0.000453948974609375, -3.814697265625e-05, -7.62939453125e-06, -3.24249267578125e-05, -0.000125885009765625, -2.777537883957848e-05, -4.291525328881107e-06, -4.768370445162873e-07, -5.7220458984375e-06, -1.9073486328125e-05, -3.814697265625e-06, -3.516166179906577e-05, -5.745887756347656e-05, -3.4570680327306036e-06, -0.000431060791015625, -0.0012388229370117188, -0.0039691925048828125, -3.2186455882765586e-06, -4.589557647705078e-05, -3.576278118089249e-07, -5.7220458984375e-06, -1.6808329746709205e-05, 0.0, -9.34600830078125e-05, 0.0, -0.002368927001953125, 0.0, -0.0003662109375, -0.00011444091796875, -0.0001430511474609375, -9.345745638711378e-05, -7.033342626527883e-06, -7.62939453125e-05, -0.0005035400390625, -2.09808349609375e-05, -0.0008550882339477539, -5.7220458984375e-06, -0.000255584716796875, -1.1444091796875e-05, -6.29425048828125e-05, 0.0, -2.09808349609375e-05, 0.0, -0.00012230873107910156, -3.814697265625e-06, -9.5367431640625e-06, -9.5367431640625e-06, -0.004252195358276367, 0.0, -0.0003376007080078125, -0.0021419525146484375, -7.62939453125e-06, 0.0, -3.0517578125e-05, 0.0, -6.878376007080078e-05, 0.0, -6.29425048828125e-05, 0.0, -0.13865064084529877, 0.0, -1.9073486328125e-06, -0.033659934997558594, 0.0, -0.004508852493017912, -3.6954811548639555e-06], "score": -0.19539735334825536, "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n"}]}
{"gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n", "beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 3, "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute", "attr": "MECH"}, "hole0": "Flying Machine", "hole3": "minion_type", "_type": "Template26"}], "hole1": "MinionCard", "hole6": [{"hole2": "windfury", "hole1": 4, "hole0": 1, "_type": "Template50", "hole3": {"value": true, "_type": "NameConstant"}}], "hole4": "player", "hole0": "FlyingMachine", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 358, 124, 222, "Flying", " ", "Machine", "<EOS>", "3", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 13, 143, 21, 174, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "1", "<EOS>", "4", "<EOS>", "windfury", "<EOS>", 22, 175, "True", "<EOS>"], "score_history": [-1.71661376953125e-05, -3.24249267578125e-05, -0.05310533568263054, -0.0002694964059628546, -9.536738616588991e-07, -4.489719867706299e-05, -6.29425048828125e-05, -5.841247457283316e-06, -5.7220458984375e-06, -0.0012378692626953125, -0.00197601318359375, -1.1920928244535389e-07, -2.6702880859375e-05, -8.106231689453125e-06, -0.0002574920654296875, -2.276895975228399e-05, -1.9073486328125e-06, -0.0001010894775390625, -7.62939453125e-06, -8.046627044677734e-05, -9.65590606938349e-06, -1.71661376953125e-05, 0.0, -5.7220458984375e-06, 0.0, -3.075599670410156e-05, -1.33514404296875e-05, -0.0004978179931640625, 0.0, -9.5367431640625e-06, 0.0, -0.004589080810546875, 0.0, -2.09808349609375e-05, -0.0015087127685546875, -0.000949859619140625, -3.6596775316866115e-05, -2.3603161025675945e-05, -2.4436107196379453e-05, 0.0, -0.008802652359008789, -3.0517578125e-05, -0.000926971435546875, -1.9073486328125e-05, -0.000758051872253418, 0.0], "score": -0.07553948717940528, "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}]}
{"gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n", "beams": [{"model_output": {"hole2": [{"hole2": "ROGUE", "hole1": 2, "hole4": {"args": [{"_type": "List", "elts": [{"hole0": 1, "_type": "Template72"}, {"hole2": 2, "hole1": "ChangeAttack", "hole0": "Give", "_type": "Template51"}]}, {"hole0": "SelfSelector", "_type": "Template79"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "hole0": "Goblin Auto-Barber", "hole3": "battlecry", "_type": "Template27"}], "hole1": "MinionCard", "hole6": [{"hole1": 2, "hole0": 3, "_type": "Template62"}], "hole4": "player", "hole0": "GoblinAuto-Barber", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 358, 125, 223, "Goblin", " ", "Auto-Barber", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "battlecry", "<EOS>", 16, 150, 21, 174, "Battlecry", "<EOS>", 347, 48, 169, 347, 82, 312, "1", "<EOS>", 68, 288, "Give", "<EOS>", "Change", "Attack", "<EOS>", "2", "<EOS>", 88, 325, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "3", "<EOS>", "2", "<EOS>"], "score_history": [-0.2495889663696289, -2.6702880859375e-05, -0.029023224487900734, -2.002705878112465e-05, -2.861018856492592e-06, -1.1897645890712738e-07, -4.6372391807381064e-05, -2.0265558760002023e-06, -9.5367431640625e-06, -0.016553878784179688, -0.00023651123046875, -5.960462772236497e-07, -4.732604429591447e-05, -1.0728830375228426e-06, -3.814697265625e-06, -8.82988388184458e-06, 0.0, -0.6171180009841919, 0.0, -0.1115487813949585, -1.9073486328125e-06, -0.722346305847168, -0.0019969940185546875, -0.001132965087890625, -0.00078582763671875, -0.009675005450844765, -6.22272418695502e-05, -0.0008716583251953125, -0.010251998901367188, -0.0009613037109375, -0.0002288818359375, -0.8056106567382812, -0.07419586181640625, -0.014975427649915218, -0.0016727447509765625, -0.041426658630371094, -0.0018491744995117188, -0.010041356086730957, -0.00015805992006789893, -7.87973403930664e-05, -0.06474673748016357, -1.7881377516459906e-06, -0.03587311506271362, -1.1920928244535389e-07, -0.5632619857788086, -9.34600830078125e-05, -0.05857372283935547, -8.583047019783407e-06, 0.0, -0.00011050365719711408, -5.7220458984375e-06, -0.00011718271707650274, 0.0, -4.57763671875e-05, -6.103515625e-05, -0.000118255615234375, -1.1920928244535389e-07, -1.1920928244535389e-07, -5.841253368998878e-06, 0.0], "score": -3.4455865281385414, "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(\n            ChangeAttack(2))], SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}]}
{"gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "ROGUE", "hole1": 3, "hole5": [{"hole0": "MECH", "_type": "Template75"}], "hole0": "Iron Sensei", "hole3": "RARE", "_type": "Template14"}, {"hole2": "TurnStarted", "hole1": 2, "hole5": "Draw", "hole0": 2, "hole3": "Kill", "_type": "Template0"}], "_type": "ClassDef", "name": "IronSensei", "bases": [{"id": "MinionCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Iron", "Sensei", "<EOS>", 346, 50, 174, "Minion", "Card", "<EOS>", 359, 118, 198, "Iron", " ", "Sensei", "<EOS>", "3", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", 353, 94, 316, "MECH", "<EOS>", 112, 186, "2", "<EOS>", "2", "<EOS>", "Turn", "Started", "<EOS>", "Kill", "<EOS>", "Draw", "<EOS>"], "score_history": [-0.012058258056640625, -1.1444091796875e-05, -9.5367431640625e-06, -7.05718994140625e-05, -3.62396240234375e-05, -3.0517112463712692e-05, 0.0, -8.630396769149229e-05, -1.33514404296875e-05, -2.86102294921875e-05, 0.0, -0.0003290049498900771, -5.07823824591469e-05, -8.07046890258789e-05, -5.7220458984375e-06, -0.007042884826660156, -0.0002994537353515625, -2.3841855067985307e-07, -0.14768509566783905, -2.1338273654691875e-05, -1.1444091796875e-05, -1.1563301086425781e-05, -7.62939453125e-06, -0.65201735496521, -7.62939453125e-06, -0.0008682012557983398, 0.0, -0.0002498626708984375, -0.000125885009765625, -6.103515625e-05, -0.001689910888671875, -0.0004062652587890625, -0.0044727325439453125, -0.8440303802490234, -0.000349698617355898, -3.552412090357393e-05, -0.00031610566657036543, -4.363048719824292e-05, -0.059236012399196625, -0.12376618385314941, -0.00063323974609375, -0.2817121744155884, -0.1396803855895996, -0.509101390838623, -0.0072612762451171875], "score": -2.7939555743141398, "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnStarted(), ActionTag(Kill(),\n            Draw()))])\n"}]}
{"gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Mal'Ganis"}, {"n": 9, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "WARLOCK"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "LEGENDARY"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"hole0": "DEMON", "_type": "Template75"}]}], "hole1": "MinionCard", "hole6": [{"hole2": "auras", "hole1": 7, "hole0": 9, "_type": "Template50", "hole3": {"hole2": [{"hole1": [{"hole0": 1, "_type": "Template71"}, {"hole1": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute", "attr": "DEMON"}], "hole0": "IsType", "_type": "Template59"}], "hole0": "Aura", "_type": "Template78_expr_seq"}], "hole1": [{"hole0": 1, "_type": "Template70"}, {"hole1": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute", "attr": "BEAST"}], "hole0": "IsType", "_type": "Template59"}], "hole0": "Aura", "_type": "Template78"}}], "hole4": "player", "hole0": "Mal'Ganis", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 349, 53, 183, "Mal'Ganis", "<EOS>", 52, 179, "9", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 353, 94, 316, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "9", "<EOS>", "7", "<EOS>", "auras", "<EOS>", 37, 322, "Aura", "<EOS>", 347, 80, 310, "1", "<EOS>", 73, 296, "Is", "Type", "<EOS>", 346, 42, 143, 21, 174, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", 346, 87, 324, "Aura", "<EOS>", 347, 81, 311, "1", "<EOS>", 73, 296, "Is", "Type", "<EOS>", 346, 42, 143, 21, 174, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>"], "score_history": [-3.4332275390625e-05, -0.0002689361572265625, -0.00026186901959590614, -1.1920928244535389e-07, -5.792826414108276e-07, -2.300739288330078e-05, -7.152555099310121e-07, -0.000759124755859375, -0.021684646606445312, -0.0033168792724609375, -2.288818359375e-05, 0.0, -4.768370445162873e-07, -5.7220458984375e-06, -3.0517578125e-05, -1.9073486328125e-06, -0.000576019287109375, -6.103515625e-05, -0.00040435791015625, -7.87973403930664e-05, -9.894371032714844e-06, -5.14984130859375e-05, -3.814697265625e-06, -0.0018208492547273636, -3.814697265625e-06, -3.24249267578125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -7.05718994140625e-05, -0.0002727508544921875, -1.9073486328125e-06, -0.16061115264892578, -4.00543212890625e-05, -0.0001087188720703125, -7.62939453125e-06, -2.86102294921875e-05, 0.0, -1.33514404296875e-05, -7.43865966796875e-05, -0.022802352905273438, 0.0, -0.014795303344726562, -0.006625175476074219, -7.05718994140625e-05, -0.08012008666992188, 0.0, -0.000537872314453125, 0.0, -5.173683166503906e-05, 0.0, -3.4332275390625e-05, -0.00351715087890625, -2.6702880859375e-05, -7.152555099310121e-07, -2.3841830625315197e-06, -1.5497138520004228e-05, -1.9073486328125e-06, -0.009038329124450684, 0.0, -0.000255584716796875, -0.11174201965332031, -0.0014927006559446454, -1.9073486328125e-06, -3.4332275390625e-05, -0.005031585693359375, -4.1961669921875e-05, -0.0893910676240921, -0.00014495849609375, -0.3949747085571289, -0.0001888275146484375, -0.00024199479958042502, -0.00257718563079834, -3.814697265625e-05, -2.47955322265625e-05, -0.002086639404296875, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -3.457069396972656e-05, -1.1444091796875e-05, -0.8011083602905273, 0.0, -7.2479248046875e-05, -0.17934131622314453, -0.04814910888671875, -0.0012423997977748513, -0.0025634765625, -4.57763671875e-05, -0.08986186981201172, -0.0054492950439453125, -0.06090491637587547, -2.0265579223632812e-06, -0.2058696746826172, -0.000347137451171875, -0.0002579684369266033, -0.0012378692626953125, -3.814697265625e-06, -2.09808349609375e-05, -6.67572021484375e-05, 0.0, -2.09808349609375e-05, -3.814697265625e-06, -3.063678741455078e-05, -7.62939453125e-06, -0.10449886322021484, -1.9073486328125e-06], "score": -2.4377755809840593, "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeAttack(1), MinionSelector(\n            IsType(MINION_TYPE.BEAST))), Aura(ChangeHealth(1),\n            MinionSelector(IsType(MINION_TYPE.DEMON)))])\n"}]}
{"gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "WARLOCK", "hole1": 2, "hole5": [{"hole0": "MECH", "_type": "Template75"}], "hole0": "Mistress of Pain", "hole3": "RARE", "_type": "Template14"}, {"hole2": "Damaged", "hole1": 4, "hole5": "HeroSelector", "hole4": [{"n": 3, "_type": "Num"}], "hole0": 1, "hole3": "Heal", "_type": "Template0"}], "_type": "ClassDef", "name": "MistressOfPain", "bases": [{"id": "MinionCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Mistress", "Of", "Pain", "<EOS>", 346, 50, 174, "Minion", "Card", "<EOS>", 359, 118, 198, "Mistress", " ", "of", " ", "Pain", "<EOS>", "2", "<EOS>", "WARLOCK", "<EOS>", "RARE", "<EOS>", 353, 94, 316, "MECH", "<EOS>", 112, 189, "1", "<EOS>", "4", "<EOS>", "Damaged", "<EOS>", "Heal", "<EOS>", 346, 52, 179, "3", "<EOS>", "Hero", "Selector", "<EOS>"], "score_history": [-0.0027093887329101562, -1.1444091796875e-05, -2.288818359375e-05, -4.38690185546875e-05, -0.0001087188720703125, -0.0007771911914460361, -0.0017087422311306, -9.202832006849349e-05, -8.380372310057282e-05, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-05, -0.0004174190107733011, -4.541869566310197e-05, -2.1457672119140625e-05, -9.5367431640625e-06, -0.010364532470703125, -0.0002117156982421875, -1.1920928244535389e-07, -0.00017547607421875, -7.128715515136719e-05, -9.5367431640625e-05, -0.0012291667517274618, -0.00035858154296875, -1.0728830375228426e-06, 0.0, -0.0029926300048828125, -0.0001049041748046875, -8.0108642578125e-05, 0.0, -5.340576171875e-05, -0.0021152496337890625, -7.2479248046875e-05, -0.081390380859375, -0.0002899169921875, -0.0005588531494140625, -0.018756866455078125, -9.775159924174659e-06, -2.861018856492592e-06, -8.22478614281863e-06, -7.62939453125e-05, -0.10556888580322266, -0.0002919435501098633, -0.1407184600830078, -0.0001354217529296875, 0.0, -0.0008335113525390625, -1.33514404296875e-05, -0.28987836837768555, 0.0, -0.020587921142578125, 0.0, 0.0], "score": -0.6831562594969611, "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(3),\n            HeroSelector()))])\n"}]}
{"gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n", "beams": [{"model_output": {"hole2": [{"hole2": "SHAMAN", "hole1": 3, "hole0": "Powermace", "_type": "Template34", "hole3": "RARE"}], "hole1": "WeaponCard", "hole6": [{"hole2": 2, "hole1": 3, "hole0": "Weapon", "_type": "Template68", "hole3": [{"hole2": "PlayerSelector", "hole1": [{"hole2": {"value": {"id": "CARD_SOURCE", "_type": "Name"}, "_type": "Attribute", "attr": "LIST"}, "hole1": "source", "hole4": {"id": "spare_part_list", "_type": "Name"}, "hole0": "CardQuery", "hole3": "source_list", "_type": "Template56"}], "hole0": "AddCard", "_type": "Template41", "hole3": [{"hole0": "BothPlayer", "_type": "Template79"}]}]}], "hole4": "player", "hole0": "Powermace", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 358, 128, 233, "Powermace", "<EOS>", "3", "<EOS>", "SHAMAN", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 134, 307, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 353, 92, 259, "Add", "Card", "<EOS>", 346, 71, 293, "Card", "Query", "<EOS>", "source", "<EOS>", 13, 143, 21, 174, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", "source_list", "<EOS>", 21, 174, "spare_part_list", "<EOS>", "Player", "Selector", "<EOS>", 346, 88, 325, "Both", "Player", "<EOS>"], "score_history": [-2.6702880859375e-05, -0.0002002716064453125, -7.700637797825038e-05, -1.621242699911818e-05, -0.00019226610311307013, -0.00022923506912775338, -2.90866428258596e-05, -2.288818359375e-05, -0.20862960815429688, -0.000354766845703125, -3.814689989667386e-06, 0.0, -8.333172445418313e-05, 0.0, -0.000301361083984375, 0.0, -0.00054168701171875, 0.0, -0.21201133728027344, 0.0, -6.306171417236328e-05, 0.0, -0.0001735687255859375, -9.5367431640625e-05, -0.0001430511474609375, -0.00011669908417388797, -7.510183422709815e-06, 0.0, -0.00010644822759786621, -0.00034558773040771484, -5.602820692729438e-06, -7.62939453125e-05, -0.0069732666015625, -1.1774497032165527, -0.12152571976184845, -0.013663326390087605, -0.0009255408658646047, -0.0010776519775390625, -0.026021957397460938, -0.0008611679077148438, -0.0006386038730852306, -0.0006396770477294922, -1.2040138244628906e-05, -0.0022279024124145508, 0.0, -0.000225067138671875, 0.0, -1.52587890625e-05, 0.0, -0.001554727554321289, -0.0005360841751098633, -0.020715713500976562, -5.7220458984375e-06, -0.013682365417480469, -1.1444091796875e-05, -0.0220489501953125, 0.0, -0.013603444211184978, -6.198883056640625e-05, -0.024743080139160156, -7.152555099310121e-07, -1.5497195136049413e-06, -8.0108642578125e-05, -0.3144960403442383, -1.9073486328125e-06, -0.13935983180999756, -9.39365490921773e-05, -7.987022399902344e-06], "score": -2.327115247463439, "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector(BothPlayer())))\n"}]}
{"gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "WARRIOR", "hole1": 4, "hole8": {"args": [{"hole2": 4, "hole1": "ChangeHealth", "hole0": "Give", "_type": "Template51"}, {"hole0": "UserPicker", "_type": "Template33"}], "func": {"id": "Battlecry", "_type": "Name"}, "_type": "Call"}, "hole6": "MECH", "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "hole0": "Screwjank Clunker", "hole3": "RARE", "_type": "Template4"}, {"hole1": 5, "hole0": 2, "_type": "Template19"}], "_type": "ClassDef", "name": "ScrewjankClunker", "bases": [{"id": "MinionCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Screwjank", "Clunker", "<EOS>", 346, 50, 174, "Minion", "Card", "<EOS>", 359, 129, 250, "Screwjank", " ", "Clunker", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 174, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "battlecry", "<EOS>", 16, 150, 21, 174, "Battlecry", "<EOS>", 347, 68, 288, "Give", "<EOS>", "Change", "Health", "<EOS>", "4", "<EOS>", 59, 232, "User", "Picker", "<EOS>", 122, 213, "2", "<EOS>", "5", "<EOS>"], "score_history": [-0.00150299072265625, -2.47955322265625e-05, -2.47955322265625e-05, -0.000240325927734375, -3.62396240234375e-05, -0.00016282663273159415, -1.0609570381348021e-05, -9.42901024245657e-05, -7.2479248046875e-05, -1.52587890625e-05, 0.0, -1.1920201359316707e-07, -9.107272489927709e-05, -1.811981201171875e-05, -1.9073486328125e-05, -0.0017833709716796875, -0.000102996826171875, -1.4305104514278355e-06, -2.8491018383647315e-05, -4.291525328881107e-06, -3.933906555175781e-06, -5.245207830739673e-06, -1.9073486328125e-06, -0.0014325380325317383, -9.5367431640625e-06, -0.00460052490234375, -1.9073486328125e-06, -0.00035130977630615234, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-06, -1.537799835205078e-05, -5.7220458984375e-06, -0.001293182373046875, -4.1961669921875e-05, -0.0002460479736328125, -0.0004329681396484375, -0.15018272399902344, -0.00018310546875, -5.7220458984375e-05, -3.814697265625e-06, -0.0018318883376196027, -5.030632019042969e-05, -0.00553131103515625, -0.21323299407958984, -0.00629425048828125, -0.008733391761779785, -2.861022494471399e-06, -0.0003192424774169922, -0.0027924776077270508, -1.7762025890988298e-05, -0.05765675753355026, -5.14984130859375e-05, -0.051537513732910156, -0.01195526123046875, -0.00200653076171875, -0.00084686279296875, -1.9073486328125e-06, -0.0003986358642578125, -2.288818359375e-05, -6.806619057897478e-05, -5.960462772236497e-07, -4.971027374267578e-05, -2.3841855067985307e-07], "score": -0.5265456121170757, "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}]}
{"gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n", "beams": [{"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 8, "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute", "attr": "MECH"}, "hole0": "Sneed Old Shredder", "hole3": "minion_type", "_type": "Template26"}], "hole1": "MinionCard", "hole6": [{"hole2": 7, "hole1": 5, "hole0": "Minion", "_type": "Template68", "hole3": [{"hole2": "PlayerSelector", "hole1": [{"keywords": [{"arg": "conditions", "_type": "keyword", "value": {"_type": "List", "elts": [{"hole1": 2, "hole0": "ManaCost", "_type": "Template74"}, {"hole0": "IsMinion", "_type": "Template73_expr_seq"}]}}], "func": {"id": "CardQuery", "_type": "Name"}, "_type": "Call"}], "hole0": "Summon", "_type": "Template41"}]}], "hole4": "player", "hole0": "<UNK>OldShredder", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "<UNK>", "Old", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 358, 124, 222, "Sneed", " ", "Old", " ", "Shredder", "<EOS>", "8", "<EOS>", "LEGENDARY", "<EOS>", "minion_type", "<EOS>", 13, 143, 21, 174, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 134, 307, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 353, 92, 257, "Summon", "<EOS>", 346, 45, 149, 21, 174, "Card", "Query", "<EOS>", 353, 95, 336, "conditions", "<EOS>", 19, 169, 347, 84, 315, "Mana", "Cost", "<EOS>", "2", "<EOS>", 83, 314, "Is", "Minion", "<EOS>", "Player", "Selector", "<EOS>"], "score_history": [-0.0002422332763671875, -0.001392364501953125, -0.00029321727924980223, -0.031975679099559784, -0.26446300745010376, -1.8954096958623268e-05, -2.3795291781425476e-07, -0.00010514259338378906, -1.3708974620385561e-05, -1.33514404296875e-05, -0.0044574737548828125, -0.000186920166015625, -0.05897437408566475, -3.0517578125e-05, -0.0009567567612975836, -0.0001811981201171875, -0.07572996616363525, -0.0004100799560546875, -8.344639354618266e-06, -1.9073486328125e-06, -0.0007517337799072266, -1.9073486328125e-06, -7.355085108429193e-05, -2.503394853192731e-06, -9.918212890625e-05, 0.0, -1.9073486328125e-05, 0.0, -0.00011265277862548828, -5.7220458984375e-05, -0.0006809234619140625, 0.0, -2.09808349609375e-05, 0.0, -0.00016617774963378906, 0.0, -4.57763671875e-05, -0.0005474090576171875, -6.29425048828125e-05, -3.5669654607772827e-07, -3.063647454837337e-05, -1.52587890625e-05, -1.883488948806189e-05, -0.00020945072174072266, -1.7881377516459906e-06, -0.0001621246337890625, -0.0012683868408203125, -0.19625186920166016, -0.0005167732015252113, -2.7418097943154862e-06, -0.0047893524169921875, -0.003353118896484375, -0.001033782958984375, -9.918212890625e-05, 0.0, -0.0008267606608569622, -0.0003446340560913086, -2.205355303885881e-05, -2.47955322265625e-05, -0.00072479248046875, -7.62939453125e-06, -0.0052642822265625, 0.0, -0.00620269775390625, -0.0003948211669921875, -0.0009403228759765625, -0.04229164123535156, -0.0010852813720703125, -0.004559677559882402, -0.0025368756614625454, -3.814697265625e-06, -0.0020824552047997713, 0.0, -0.008066177368164062, -0.00089263916015625, -0.005517873913049698, -0.0006090449169278145, -0.0007116794586181641, -0.0010451074922457337, -1.7046884750016034e-05, -6.794917680963408e-06], "score": -0.7340300267840121, "inferred_code": "class <UNK>OldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sneed Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[ManaCost(2), IsMinion()])), PlayerSelector()))\n"}]}
{"gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n", "beams": [{"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 6, "hole5": "PlayerSelector", "hole4": [{"hole2": {"hole0": "BothPlayer", "_type": "Template79"}, "hole1": "players", "hole4": {"id": "<UNK>", "_type": "Name"}, "hole0": "CharacterSelector", "hole3": "source_list", "_type": "Template56"}, {"n": 5, "_type": "Num"}], "hole0": "Toshley", "hole3": "AddCard", "_type": "Template15"}], "hole1": "MinionCard", "hole6": [{"hole1": 7, "hole0": 5, "_type": "Template62"}], "hole4": "player", "hole0": "Toshley", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 358, 119, 207, "Toshley", "<EOS>", "6", "<EOS>", "LEGENDARY", "<EOS>", "Add", "Card", "<EOS>", 347, 71, 293, "Character", "Selector", "<EOS>", "players", "<EOS>", 38, 325, "Both", "Player", "<EOS>", "source_list", "<EOS>", 21, 174, "<UNK>", "<EOS>", 52, 179, "5", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "5", "<EOS>", "7", "<EOS>"], "score_history": [-0.0013904571533203125, -1.9073486328125e-05, -0.0075356182642281055, -2.0265579223632812e-06, -1.1641532182693481e-06, -2.8967857360839844e-05, -2.0265579223632812e-06, -0.09905338287353516, -0.0014896392822265625, -0.7841963768005371, -0.0004683732404373586, -1.0609614946588408e-05, -3.0517578125e-05, 0.0, -0.002987504005432129, -8.20159912109375e-05, -0.35466238856315613, -0.023049116134643555, -0.00020466477144509554, -0.32676029205322266, -0.4983682632446289, -0.0025644302368164062, -0.10206234455108643, -0.2268010377883911, 0.0, -0.26615023612976074, -9.5367431640625e-06, -0.00016021728515625, 0.0, -0.06771087646484375, -2.3841617803554982e-05, 0.0, -1.1235140562057495, -4.768371127283899e-06, -0.029851913452148438, 0.0, -0.28209662437438965, -0.000459565402707085, -0.000278472900390625, -9.5367431640625e-06, -0.4336492717266083, -2.86102294921875e-05, -0.00040078163146972656, -1.1920928244535389e-07, 0.0, -3.1828865758143365e-05, -1.9073486328125e-06, -8.916854130802676e-05, 0.0, -0.0005474090576171875, -0.0025615692138671875, -2.47955322265625e-05, 0.0, -1.1920928244535389e-07, -0.0006276369094848633, -1.1920928244535389e-07], "score": -4.640003273134859, "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CharacterSelector(\n            players=BothPlayer(), source_list=<UNK>), 5), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n"}]}
{"gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n", "beams": [{"model_output": {"hole2": [{"hole2": "WARRIOR", "hole1": 1, "hole4": {"value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute", "attr": "MECH"}, "hole0": "Warbot", "hole3": "minion_type", "_type": "Template27"}], "hole1": "MinionCard", "hole6": [{"hole2": "enrage", "hole1": 3, "hole0": 1, "_type": "Template50", "hole3": {"hole1": [{"hole0": 1, "_type": "Template70"}, {"hole0": "SelfSelector", "_type": "Template79"}], "hole0": "Aura", "_type": "Template78"}}], "hole4": "player", "hole0": "Warbot", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 358, 125, 223, "Warbot", "<EOS>", "1", "<EOS>", "WARRIOR", "<EOS>", "minion_type", "<EOS>", 13, 143, 21, 174, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "1", "<EOS>", "3", "<EOS>", "enrage", "<EOS>", 37, 321, "Aura", "<EOS>", 347, 80, 310, "1", "<EOS>", 88, 325, "Self", "Selector", "<EOS>"], "score_history": [-0.00017547607421875, -1.52587890625e-05, -0.0001728385395836085, -2.50339189733495e-06, -7.033348083496094e-06, -7.748603820800781e-06, -2.2649765014648438e-06, -5.7220458984375e-06, -0.4152355194091797, -0.0005855560302734375, -3.6954863844584906e-06, -9.5367431640625e-06, -0.0001927770208567381, 0.0, -0.008785009384155273, -7.62939453125e-06, -0.011016249656677246, 0.0, -0.0009708404541015625, -1.9073486328125e-06, -0.0008907318115234375, 0.0, -0.00023114681243896484, 0.0, -0.006122589111328125, 0.0, -1.71661376953125e-05, 0.0, -0.0010433197021484375, 0.0, -2.6702880859375e-05, -0.03548145294189453, -5.91278076171875e-05, -2.2649765014648438e-06, -1.2278481335670222e-05, -7.772429671604186e-05, 0.0, -0.008080124855041504, 0.0, -0.000591278076171875, -0.05710029602050781, -0.0009424686431884766, 0.0, -0.0001583099365234375, -0.0008630752563476562, -4.1961669921875e-05, -0.10702693462371826, -0.0004100799560546875, -0.0021419525146484375, -6.103515625e-05, -0.0023071523755788803, -2.741813204920618e-06, 0.0], "score": -0.6608894825542393, "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n"}]}
{"gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 3, "hole0": "Deathlord", "_type": "Template34", "hole3": "RARE"}], "hole1": "MinionCard", "hole6": [{"hole2": 8, "hole1": 2, "hole0": "Minion", "_type": "Template68", "hole3": [{"arg": "divine_shield", "_type": "keyword", "value": {"value": true, "_type": "NameConstant"}}, {"hole1": "KillSelector", "hole0": "DidDamage", "hole4": [{"hole0": "Adjacent", "_type": "Template79"}], "_type": "Template25", "hole3": "Adjacent"}]}], "hole4": "player", "hole0": "Deathlord", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 358, 128, 233, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 134, 307, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 354, 95, 336, "divine_shield", "<EOS>", 22, 175, "True", "<EOS>", 90, 218, "Did", "Damage", "<EOS>", "Kill", "Selector", "<EOS>", "Adjacent", "<EOS>", 346, 88, 325, "Adjacent", "<EOS>"], "score_history": [-2.47955322265625e-05, -2.288818359375e-05, -2.896749174396973e-05, -5.4001808166503906e-05, -9.504146873950958e-07, -1.2993811651540454e-05, -4.291525328881107e-06, -3.814697265625e-06, -0.001659393310546875, -1.1444091796875e-05, -2.1457672119140625e-06, 0.0, -1.728534698486328e-05, 0.0, -0.00019073486328125, -3.814697265625e-06, -0.000255584716796875, 0.0, -1.33514404296875e-05, 0.0, -0.00016415119171142578, 0.0, -2.09808349609375e-05, -0.0003414154052734375, -4.9591064453125e-05, 0.0, -2.2649763195659034e-05, -5.7220458984375e-06, -3.576278118089249e-07, -0.004568696022033691, -5.960462772236497e-07, -0.16608333587646484, -0.031935691833496094, -1.9073486328125e-06, -0.23991870880126953, -1.9073486328125e-06, -0.00014495849609375, -1.33514404296875e-05, -0.0012553930282592773, 0.0, -0.31732177734375, -0.3720541000366211, -0.08240591734647751, -0.03955650329589844, -0.0002593994140625, -0.2070380449295044, -0.11324465274810791, 0.0, -1.3896807432174683, -0.5664215087890625, 0.0, -0.13805294036865234, 0.0, -0.5251615047454834, -0.0055037690326571465], "score": -4.203536733141618, "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, divine_shield=True, effects=[Effect(DidDamage(),\n            ActionTag(KillSelector(), Adjacent(Adjacent())))])\n"}]}
{"gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 2, "hole0": "Nerub'ar Weblord", "_type": "Template31"}], "hole1": "MinionCard", "hole6": [{"hole2": "stealth", "hole1": 4, "hole0": 1, "_type": "Template50", "hole3": {"value": true, "_type": "NameConstant"}}], "hole4": "player", "hole0": "Nerub'arWeblord", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 358, 127, 230, "Nerub'ar", " ", "Weblord", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "1", "<EOS>", "4", "<EOS>", "stealth", "<EOS>", 22, 175, "True", "<EOS>"], "score_history": [-9.1552734375e-05, -7.62939453125e-06, -0.005436408799141645, -1.5854762750677764e-05, -3.099436753473128e-06, -9.490177035331726e-07, -1.1444091796875e-05, -1.1920928244535389e-07, 0.0, -0.018593788146972656, -5.14984130859375e-05, -1.0728830375228426e-06, -2.15768777707126e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.5497195136049413e-06, 0.0, -1.5497207641601562e-05, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-05, 0.0, -5.7220458984375e-06, -0.00311279296875, -2.47955322265625e-05, -1.1920922133867862e-06, -7.986990567587782e-06, 0.0, 0.0, -0.6407654285430908, 0.0, -0.0036039352416992188, -3.4332275390625e-05, -0.07953715324401855, -1.9073486328125e-06], "score": -0.7513835266008684, "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, stealth=True)\n"}]}
{"gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 5, "hole0": "Spectral Knight", "_type": "Template31"}], "hole1": "MinionCard", "hole6": [{"hole2": "spell_targetable", "hole1": 6, "hole0": 4, "_type": "Template50", "hole3": {"value": true, "_type": "NameConstant"}}], "hole4": "player", "hole0": "SpectralKnight", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 358, 127, 230, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "4", "<EOS>", "6", "<EOS>", "spell_targetable", "<EOS>", 22, 175, "False", "<EOS>"], "score_history": [-3.814697265625e-06, -9.5367431640625e-06, -0.00025018901214934886, -2.9921531677246094e-05, -3.576278118089249e-07, -2.963002771139145e-06, -9.5367431640625e-06, -1.1920928244535389e-07, 0.0, -0.06888484954833984, -2.09808349609375e-05, -2.861018856492592e-06, -7.569787703687325e-05, -0.0004636049270629883, -1.9073486328125e-06, -3.516612196108326e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -6.4849853515625e-05, 0.0, 0.0, -9.72747802734375e-05, -4.00543212890625e-05, -2.0265415514586493e-06, -5.07818695041351e-05, -0.004226088058203459, -7.152555099310121e-07, -0.18097317218780518, 0.0, -0.0019435882568359375, -6.29425048828125e-05, -0.0006215572357177734, -1.1920928244535389e-07], "score": -0.2578994718507346, "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n"}]}
{"gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "ALL", "hole1": 4, "hole8": {"hole2": "MinionSelector", "hole1": [{"hole0": 3, "_type": "Template71"}], "hole0": "Give", "_type": "Template43", "hole3": [{"hole0": "MURLOC", "_type": "Template60"}, {"hole0": "BothPlayer", "_type": "Template79"}]}, "hole6": "MURLOC", "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "hole0": "Wailing Soul", "hole3": "RARE", "_type": "Template4"}, {"hole1": 5, "hole0": 3, "_type": "Template19"}], "_type": "ClassDef", "name": "WailingSoul", "bases": [{"id": "MinionCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Wailing", "Soul", "<EOS>", 346, 50, 174, "Minion", "Card", "<EOS>", 359, 129, 250, "Wailing", " ", "Soul", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "minion_type", "<EOS>", 21, 174, "MINION_TYPE", "<EOS>", "MURLOC", "<EOS>", "battlecry", "<EOS>", 29, 267, "Give", "<EOS>", 346, 81, 311, "3", "<EOS>", "Minion", "Selector", "<EOS>", 347, 74, 297, "MURLOC", "<EOS>", 88, 325, "Both", "Player", "<EOS>", 122, 213, "3", "<EOS>", "5", "<EOS>"], "score_history": [-0.6324806213378906, -0.00084686279296875, -0.0005626678466796875, -9.34600830078125e-05, -7.62939453125e-05, -0.012460595928132534, -0.00014256415306590497, -5.900707401451655e-05, -3.814697265625e-06, -7.62939453125e-06, 0.0, -1.1920565157197416e-07, -9.417517503607087e-06, -2.384185791015625e-05, -4.9591064453125e-05, -0.02539348602294922, -8.0108642578125e-05, -2.3841855067985307e-07, -2.5510787963867188e-05, -2.2172682292875834e-05, -1.4185905456542969e-05, -1.0728830375228426e-06, 0.0, -0.00046372413635253906, -1.33514404296875e-05, -0.0001983642578125, 0.0, -1.9073486328125e-05, -2.0265579223632812e-06, -5.53131103515625e-05, 0.0, -5.40018045285251e-05, -5.424022674560547e-05, -0.45508575439453125, -1.9073486328125e-06, -9.1552734375e-05, -4.017353057861328e-05, -0.09284782409667969, -0.3046245574951172, -0.22334885597229004, -0.0012031776132062078, -5.7220458984375e-06, -1.2472286224365234, -0.0030794143676757812, -0.02087906375527382, -9.357920498587191e-05, -0.00010132766328752041, -0.0002537965774536133, -2.3841855067985307e-07, -0.00565338134765625, -0.00441741943359375, -0.0012645721435546875, -0.0010013580322265625, -1.9073486328125e-06, -0.0001010894775390625, -1.9073486328125e-06, -0.0036145448684692383, -1.1205671398784034e-05, -1.9073486328125e-06, -9.5367431640625e-05, -5.14984130859375e-05, -2.145764483429957e-06, -8.22540732769994e-06, -7.748603820800781e-06, -3.576278118089249e-07], "score": -3.0383335611852544, "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=\n            Battlecry(Give(ChangeHealth(3)), MinionSelector(IsType(\n            MINION_TYPE.MURLOC), BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}]}
{"gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 2, "hole0": "Amani Berserker", "_type": "Template31"}], "hole1": "MinionCard", "hole6": [{"hole2": 3, "hole1": 2, "hole0": "Minion", "_type": "Template68", "hole3": [{"arg": "charge", "_type": "keyword", "value": {"value": true, "_type": "NameConstant"}}, {"arg": "enrage", "_type": "keyword", "value": {"hole1": [{"hole0": 3, "_type": "Template70"}, {"hole0": "SelfSelector", "_type": "Template79"}], "hole0": "Aura", "_type": "Template78"}}]}], "hole4": "player", "hole0": "AmaniBerserker", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 358, 127, 230, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 134, 307, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>", 354, 95, 336, "charge", "<EOS>", 22, 175, "True", "<EOS>", 95, 336, "enrage", "<EOS>", 37, 321, "Aura", "<EOS>", 347, 80, 310, "3", "<EOS>", 88, 325, "Self", "Selector", "<EOS>"], "score_history": [-0.00014495849609375, -1.1444091796875e-05, -0.0002725990198086947, -6.794924956921022e-06, -7.152531907195225e-06, -1.1909287422895432e-07, -1.537799835205078e-05, 0.0, -1.9073486328125e-06, -0.00787353515625, -0.00035858154296875, -5.245203283266164e-06, -2.5391578674316406e-05, 0.0, -2.288818359375e-05, -0.0002057431556750089, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -0.000102996826171875, 0.0, -3.814697265625e-06, -0.509613037109375, -0.0043582916259765625, -2.3818574845790863e-07, -4.768370445162873e-07, 0.0, -1.1920928244535389e-07, -2.3483988115913235e-05, 0.0, -0.0006618499755859375, -0.0003757476806640625, -3.0517578125e-05, -0.39204537868499756, -1.9073486328125e-06, -0.0007305145263671875, -5.14984130859375e-05, -0.00044643765431828797, 0.0, -0.048534393310546875, -0.0004825592041015625, -0.010811889544129372, -3.814697265625e-06, -0.03016185760498047, -0.0016632080078125, -0.0019234362989664078, -1.9073486328125e-06, -0.000301361083984375, -0.0018367767333984375, -2.288818359375e-05, -0.11648496985435486, -9.918212890625e-05, -0.00051116943359375, -1.9073486328125e-05, -0.0016106364782899618, -1.3232186574896332e-05, 0.0], "score": -1.1319071071319442, "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, charge=True, enrage=[Aura(ChangeAttack(3),\n            SelfSelector())])\n"}]}
{"gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n", "beams": [{"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 7, "hole0": "Archmage Antonidas", "_type": "Template34", "hole3": "LEGENDARY"}], "hole1": "MinionCard", "hole6": [{"value": {"hole2": "SpellCast", "hole1": 7, "hole4": [{"hole1": [{"keywords": [{"arg": "conditions", "_type": "keyword", "value": {"_type": "List", "elts": [{"hole0": "MECH", "_type": "Template60"}]}}], "func": {"id": "CardQuery", "_type": "Name"}, "_type": "Call"}], "hole0": "AddCard", "_type": "Template44", "hole3": "PlayerSelector"}], "hole0": 5, "hole3": [{"hole1": 1, "hole0": "ManaCost", "_type": "Template74"}], "_type": "Template36"}, "_type": "Return"}], "hole4": "player", "hole0": "ArchmageAntonidas", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 358, 128, 233, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "MAGE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 111, 181, 25, 235, "5", "<EOS>", "7", "<EOS>", "Spell", "Cast", "<EOS>", 346, 84, 315, "Mana", "Cost", "<EOS>", "1", "<EOS>", 346, 64, 270, "Add", "Card", "<EOS>", 346, 45, 149, 21, 174, "Card", "Query", "<EOS>", 353, 95, 336, "conditions", "<EOS>", 19, 169, 346, 74, 297, "MECH", "<EOS>", "Player", "Selector", "<EOS>"], "score_history": [-1.1444091796875e-05, -7.82012939453125e-05, -0.05106412619352341, -2.157668859581463e-05, -2.0265558760002023e-06, -1.3874378055334091e-05, -2.110004425048828e-05, -7.152555099310121e-07, -8.20159912109375e-05, -0.000335693359375, -3.62396240234375e-05, -6.556489552167477e-06, -3.552436828613281e-05, -2.1457672119140625e-06, -1.9073486328125e-06, -0.1184738278388977, 0.0, -0.10356807708740234, -0.0004673004150390625, -0.1859731674194336, 0.0, -2.47955322265625e-05, 0.0, -1.6570091247558594e-05, 0.0, -8.58306884765625e-05, -0.0006694793701171875, -0.00359344482421875, -0.0005435943603515625, -0.014512062072753906, -8.583057933719829e-06, -0.00042259314795956016, -0.0004552602767944336, -5.137898551765829e-05, -0.14315979182720184, -0.005518436431884766, -7.62939453125e-06, -0.0047397613525390625, -0.040169715881347656, -0.00037384033203125, -0.010551651939749718, -0.007448421325534582, -5.7220458984375e-06, -0.03787478059530258, -7.152555099310121e-07, -1.33514404296875e-05, -0.0053234100341796875, -0.005321502685546875, -0.007136940490454435, -0.0005577802658081055, -1.811981201171875e-05, -3.814697265625e-06, -0.010198593139648438, -0.000446319580078125, -9.918212890625e-05, 0.0, -9.608261461835355e-05, -0.004575133323669434, -6.4373016357421875e-06, -5.91278076171875e-05, -4.57763671875e-05, -5.7220458984375e-06, -0.023724675178527832, 0.0, -0.002410888671875, -8.20159912109375e-05, -0.019771575927734375, -0.0023527145385742188, -0.0023374557495117188, -0.0051898956298828125, -1.9073486328125e-06, -0.0026092529296875, -5.7220458984375e-05, -2.3841855067985307e-07], "score": -0.8228747135778747, "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(ManaCost(1)),\n            ActionTag(AddCard(CardQuery(conditions=[IsType(MINION_TYPE.MECH\n            )])), PlayerSelector()))])\n"}]}
{"gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "ALL", "hole1": 1, "hole5": [{"arg": "target_func", "_type": "keyword", "value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "targeting"}, "_type": "Attribute", "attr": "find_minion_spell_target"}}], "hole4": [{"value": true, "_type": "NameConstant"}], "hole0": "Bananas", "hole3": "COMMON", "_type": "Template14"}, {"hole2": [{"args": [{"args": [{"n": 1, "_type": "Num"}], "func": {"id": "ChangeAttack", "_type": "Name"}, "_type": "Call"}, {"n": 1, "_type": "Num"}], "func": {"id": "BuffUntil", "_type": "Name"}, "_type": "Call"}], "hole1": "add_buff", "hole0": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Template3"}], "_type": "ClassDef", "name": "Bananas", "bases": [{"id": "SpellCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Bananas", "<EOS>", 346, 50, 174, "Spell", "Card", "<EOS>", 359, 118, 200, "Bananas", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", 346, 51, 175, "False", "<EOS>", 353, 95, 336, "target_func", "<EOS>", 13, 143, 13, 143, 21, 174, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", 126, 225, 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 346, 45, 150, 21, 174, "Buff", "Until", "<EOS>", 347, 45, 150, 21, 174, "Change", "Attack", "<EOS>", 346, 52, 179, "1", "<EOS>", 52, 179, "1", "<EOS>"], "score_history": [-0.000469207763671875, -0.0001125335693359375, -7.62939453125e-06, -7.62939453125e-05, -0.00032806396484375, -2.622600959512056e-06, -1.1920896213268861e-05, -1.9073486328125e-06, -7.62939453125e-06, -3.814697265625e-06, -2.3841846541472478e-07, -4.8279762268066406e-05, -1.3828258488501888e-05, -0.0003337860107421875, -0.0029735565185546875, -0.004764556884765625, -2.9682672902708873e-05, -4.88758041683468e-06, -1.4542187273036689e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -0.00335693359375, 0.0, -0.00029754638671875, -0.0006561279296875, -0.0030117034912109375, -0.000144354606163688, -4.649158654501662e-06, -6.29425048828125e-05, -0.0004444122314453125, -2.6702880859375e-05, -0.0005676746368408203, -1.9073486328125e-06, -0.0004215240478515625, -1.71661376953125e-05, -6.4849853515625e-05, 0.0, -3.62396240234375e-05, -1.9073486328125e-06, -6.0558319091796875e-05, -3.814697265625e-06, -1.52587890625e-05, -3.814697265625e-06, -0.009550213813781738, -2.3841855067985307e-07, -0.0017919540405273438, -0.003276824951171875, -1.33514404296875e-05, 0.0, -6.4849853515625e-05, 0.0, -0.00012505054473876953, -2.3841855067985307e-07, -0.0003604888916015625, -1.1920928244535389e-07, -0.12591886520385742, -4.0531158447265625e-06, 0.0, -0.01710987091064453, -0.000148773193359375, -0.0004177093505859375, -1.9073486328125e-06, -0.2511410415172577, -0.004737996030598879, -1.311301275563892e-06, -9.5367431640625e-06, -0.4873065948486328, -0.025630950927734375, -0.0002994537353515625, -1.1444091796875e-05, -0.14537274837493896, -0.005700111389160156, -3.576278118089249e-07, 0.0, -0.6057376861572266, -5.7220458984375e-06, -0.04335153102874756, -2.0265579223632812e-06, -0.027584075927734375, -3.62396240234375e-05, -0.00561191001906991, -5.7220440794480965e-06], "score": -1.7797589270335195, "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(BuffUntil(ChangeAttack(1), 1))\n"}]}
{"gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Blessed Champion"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "PALADIN"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "RARE"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"arg": "target_func", "_type": "keyword", "value": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "targeting"}, "_type": "Attribute", "attr": "find_friendly_minion_spell_target"}}]}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"value": {"args": [{"id": "minions", "_type": "Name"}], "func": {"value": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "random_choice"}, "_type": "Attribute", "attr": "copy"}, "_type": "Call"}, "_type": "Assign", "targets": [{"id": "<UNK>", "_type": "Name"}]}, {"value": {"hole1": "<UNK>", "hole0": {"id": "game", "_type": "Name"}, "_type": "Template76"}, "_type": "Expr"}, {"value": {"hole2": {"id": "len", "_type": "Name"}, "hole1": "<UNK>", "hole0": {"id": "<UNK>", "_type": "Name"}, "_type": "Template57", "hole3": [{"value": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "other_player"}, "_type": "Attribute", "attr": "minions"}]}, "_type": "Expr"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "BlessedChampion", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 349, 53, 183, "Blessed", " ", "Champion", "<EOS>", 52, 179, "5", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 353, 95, 336, "target_func", "<EOS>", 13, 143, 13, 143, 21, 174, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 361, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 102, 142, 346, 50, 174, "<UNK>", "<EOS>", 16, 150, 13, 143, 13, 143, 21, 174, "game", "<EOS>", "random_choice", "<EOS>", "copy", "<EOS>", 346, 50, 174, "minions", "<EOS>", 106, 155, 36, 317, 21, 174, "game", "<EOS>", "<UNK>", "<EOS>", 106, 155, 31, 295, 21, 174, "<UNK>", "<EOS>", "<UNK>", "<EOS>", 21, 174, "len", "<EOS>", 346, 42, 143, 13, 143, 21, 174, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>"], "score_history": [-0.015087127685546875, -0.000652313232421875, -0.0004440752090886235, -0.00037424711626954377, 0.0, -8.821445590001531e-06, -0.0001220703125, -2.3841855067985307e-07, -2.09808349609375e-05, -0.0060062408447265625, -0.0002613067626953125, -1.71661376953125e-05, 0.0, -1.1920922133867862e-06, -1.33514404296875e-05, -7.82012939453125e-05, 0.0, -0.0004024505615234375, -2.6702880859375e-05, -0.001651763916015625, -2.0265579223632812e-06, -6.115436553955078e-05, -2.8491018383647315e-05, -3.24249267578125e-05, -1.52587890625e-05, -3.4332275390625e-05, -1.5497195136049413e-06, -2.09808349609375e-05, -6.4849853515625e-05, -2.09808349609375e-05, -7.62939453125e-06, -8.392333984375e-05, -0.0001373291015625, -7.62939453125e-06, -0.0009224414825439453, -1.9073486328125e-06, -6.103515625e-05, -7.62939453125e-06, -3.62396240234375e-05, 0.0, -7.05718994140625e-05, -2.86102294921875e-05, -0.0001277923583984375, -1.9073486328125e-06, -0.000324249267578125, -7.05718994140625e-05, -1.9073486328125e-06, -0.0034819841384887695, 0.0, -0.005171775817871094, -1.52587890625e-05, -0.00028228759765625, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -0.000270843505859375, -2.47955322265625e-05, -6.29425048828125e-05, -2.288818359375e-05, -0.7806617021560669, -1.71661376953125e-05, -6.67572021484375e-05, 0.0, -7.62939453125e-06, 0.0, -2.6702880859375e-05, -4.76837158203125e-05, -3.62396240234375e-05, -2.1457672119140625e-06, -0.05695056915283203, -0.000438690185546875, -5.53131103515625e-05, -3.0517578125e-05, -9.34600830078125e-05, -1.1444091796875e-05, 0.0, -0.00010502338409423828, -3.62396240234375e-05, -7.62939453125e-06, 0.0, -2.0265579223632812e-06, 0.0, -7.069110870361328e-05, -1.1920928244535389e-07, -0.000301361083984375, -1.9073486328125e-05, -6.103515625e-05, -1.1444091796875e-05, -9.5367431640625e-06, -0.02270297333598137, -3.600114359869622e-05, -0.9636783599853516, -0.000202178955078125, -1.52587890625e-05, -3.814697265625e-06, -0.019254684448242188, 0.0, -0.0003681182861328125, -7.62939453125e-06, -0.07751548290252686, 0.0, -0.1393909454345703, -2.09808349609375e-05, -0.4277604818344116, -1.9073486328125e-05, -2.6702880859375e-05, -0.10924720764160156, -3.814697265625e-06, -0.08904838562011719, -5.841255187988281e-06, -0.00537872314453125, -8.58306884765625e-05, -0.07318782806396484, -3.24249267578125e-05, -0.034801483154296875, 0.0, -0.7850170135498047, 0.0, -0.35181617736816406, -4.172325134277344e-06, -0.04158782958984375, -8.392333984375e-05, -0.09468460083007812, -0.03403759002685547, -0.5889472961425781, 0.0, -0.010050619952380657, -4.29153169534402e-06, -0.08829712867736816, -2.0265579223632812e-06, -0.4501075744628906, -5.7220458984375e-06, -0.3157055079936981, -1.966940726561006e-05, -6.4849853515625e-05, -0.11230754852294922, 0.0, -0.3303966522216797, 0.0, -9.5367431640625e-06, -5.7220458984375e-06, -0.19269466400146484, 0.0, -0.2704000473022461, 0.0, -0.03074777126312256, -7.62939453125e-06], "score": -6.53556732987348, "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = game.random_choice.copy(minions)\n        game.<UNK>()\n        <UNK>.<UNK>(len(game.other_player.minions))\n"}]}
{"gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Cabal Shadow Priest"}, {"n": 6, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "ROGUE"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "EPIC"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"hole2": "MinionSelector", "hole1": [{"_type": "List", "elts": [{"hole0": "thatthatPriest", "_type": "Template54"}, {"hole0": "2", "_type": "Template54"}]}], "hole0": "Give", "hole4": [{"arg": "picker", "_type": "keyword", "value": {"hole0": "RandomPicker", "_type": "Template79"}}], "_type": "Template40"}]}], "hole1": "MinionCard", "hole6": [{"hole1": 5, "hole0": 4, "_type": "Template62"}], "hole4": "player", "hole0": "CabalShadow", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Cabal", "Shadow", "<EOS>", "Minion", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 349, 53, 183, "Cabal", " ", "Shadow", " ", "Priest", "<EOS>", 52, 179, "6", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 353, 91, 252, "Give", "<EOS>", 346, 48, 169, 347, 69, 290, "that", "that", "Priest", "<EOS>", 69, 290, "2", "<EOS>", "Minion", "Selector", "<EOS>", 353, 95, 336, "picker", "<EOS>", 38, 325, "Random", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "4", "<EOS>", "5", "<EOS>"], "score_history": [-0.0004863739013671875, -0.0002880096435546875, -0.0033791386522352695, -0.011249714531004429, -0.01390302274376154, -1.0114628821611404e-05, -1.7642974853515625e-05, -3.099440846199286e-06, -0.00049591064453125, -0.040337562561035156, -0.0002460479736328125, -4.1961669921875e-05, 0.0, 0.0, 0.0, -1.71661376953125e-05, -3.814697265625e-06, -7.62939453125e-05, -2.86102294921875e-05, -1.33514404296875e-05, -5.400143709266558e-05, -4.1961669921875e-05, -0.02801155112683773, -0.38189125061035156, -0.007272947113960981, -0.0077533721923828125, -0.000125885009765625, -3.4332275390625e-05, -0.03583705425262451, -9.5367431640625e-06, -4.1961669921875e-05, -6.29425048828125e-05, -7.62939453125e-06, -9.5367431640625e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.01068127155303955, -1.9073486328125e-06, -1.1444091796875e-05, -2.288818359375e-05, -7.62939453125e-06, 0.0, -7.62939453125e-06, -4.9591064453125e-05, -0.024761199951171875, -1.9073486328125e-06, -0.0026454925537109375, -0.03254222869873047, -0.0332489013671875, -0.0051490068435668945, -0.00016235557268373668, 0.0, -0.011338233947753906, -0.0002269744873046875, -8.7738037109375e-05, -0.06088447570800781, -0.6680679321289062, -0.8861393332481384, -0.5271307229995728, -0.4308662414550781, -0.06468996405601501, -0.020722389221191406, -0.0016927719116210938, -0.26470744609832764, -0.0016012086998671293, -0.09503960609436035, -7.62939453125e-06, -8.022785186767578e-05, -0.003688812255859375, -2.288818359375e-05, -1.1444091796875e-05, -0.3144958019256592, -1.1920928244535389e-07, -1.9073486328125e-05, -1.9073486328125e-06, -0.26445865631103516, -1.1563301086425781e-05, 0.0, -0.019482966512441635, 0.0, -8.034706115722656e-05, 0.0, -0.000102996826171875, -0.0021915435791015625, -4.00543212890625e-05, -2.0265574676159304e-06, 0.0, -0.0006646570982411504, 0.0], "score": -4.2796411523074696, "inferred_code": "class CabalShadow(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(thatthatPriest\n            ()), Buff(2())]), MinionSelector(picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}]}
{"gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "MAGE", "hole1": 4, "hole0": "Cone of Cold", "_type": "Template2"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"value": {"args": [{"hole2": [{"hole0": "Cone", "_type": "Template73_expr_seq"}], "hole0": "Damage<UNK>", "_type": "Template78"}, {"id": "player", "_type": "Name"}], "func": {"value": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "random_choice"}, "_type": "Attribute", "attr": "choose_option"}, "_type": "Call"}, "_type": "Assign", "targets": [{"id": "option", "_type": "Name"}]}, {"value": {"hole2": "player", "hole1": "use", "hole0": {"id": "option", "_type": "Name"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "name": "ConeOfCold", "bases": [{"id": "SpellCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Cone", "Of", "Cold", "<EOS>", 346, 50, 174, "Spell", "Card", "<EOS>", 359, 123, 214, "Cone", " ", "of", " ", "Cold", "<EOS>", "4", "<EOS>", "MAGE", "<EOS>", 108, 157, "use", "<EOS>", 1, 334, 342, 333, "self", "<EOS>", 333, "player", "<EOS>", 333, "game", "<EOS>", 360, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 102, 142, 346, 50, 174, "option", "<EOS>", 16, 150, 13, 143, 13, 143, 21, 174, "game", "<EOS>", "random_choice", "<EOS>", "choose_option", "<EOS>", 347, 86, 320, "Damage", "<UNK>", "<EOS>", 346, 83, 314, "Cone", "<EOS>", 50, 174, "player", "<EOS>", 106, 155, 32, 300, 21, 174, "option", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>"], "score_history": [-0.007396697998046875, -3.4332275390625e-05, -2.09808349609375e-05, -4.76837158203125e-05, -8.20159912109375e-05, -0.00018714142788667232, -0.0015835665399208665, -4.4941058149561286e-05, -4.9828242481453344e-05, -2.6702880859375e-05, -1.9073486328125e-06, -9.5367431640625e-06, -0.002003914210945368, -1.0371208190917969e-05, -2.002716064453125e-05, -4.76837158203125e-05, -0.009553909301757812, -0.0003032684326171875, -4.52994936495088e-06, -0.000110626220703125, -5.0186685257358477e-05, -7.05718994140625e-05, -0.0003783702850341797, -1.33514404296875e-05, -2.026555193879176e-06, 0.0, -0.00141143798828125, -1.71661376953125e-05, -0.05095386505126953, -5.14984130859375e-05, -7.069110870361328e-05, 0.0, -0.0006084442138671875, -0.0001659393310546875, -0.00316619873046875, -0.0003509521484375, -3.826618194580078e-05, -2.0265558760002023e-06, -1.9073486328125e-06, -0.00020301342010498047, -2.3841855067985307e-07, -1.9073486328125e-06, -3.814697265625e-06, -4.887576324108522e-06, -0.2288494110107422, -2.6702880859375e-05, -0.0003204345703125, -3.0517578125e-05, -9.5367431640625e-06, -0.000125885009765625, -7.62939453125e-06, -4.291534423828125e-06, -1.9073486328125e-06, -9.655952453613281e-06, 0.0, -9.5367431640625e-06, 0.0, -3.266334533691406e-05, 0.0, -0.0033521652221679688, -1.9073486328125e-06, -7.62939453125e-06, -1.33514404296875e-05, -7.82012939453125e-05, -1.719319462776184, -7.748603820800781e-06, -0.07129478454589844, -0.0003185272216796875, -5.7220458984375e-06, 0.0, -0.010389328002929688, 0.0, -0.016361236572265625, 0.0, -0.0413593053817749, 0.0, -0.743952751159668, -1.9073486328125e-06, -0.765864372253418, 0.0, -0.00046539306640625, -0.047720909118652344, -0.020818710327148438, -0.6075683236122131, -0.16079333424568176, -0.00016224382852669805, -3.4332275390625e-05, -0.09734916687011719, -0.0003986358642578125, -0.09835413843393326, -0.3919520974159241, -0.007262229919433594, -1.9073486328125e-06, -0.006049990653991699, -1.1920928244535389e-07, -0.0341644287109375, -9.72747802734375e-05, -0.0009441375732421875, -0.000522613525390625, -0.0039119720458984375, -1.9073486328125e-06, -0.004564523696899414, 0.0, -0.0003160238265991211, -5.7220458984375e-06, -4.57763671875e-05, 0.0, -1.4066696166992188e-05, -3.576278118089249e-07], "score": -5.1643833359500135, "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        option = game.random_choice.choose_option([Damage<UNK>(), Cone()],\n            player)\n        option.use(player, game)\n"}]}
{"gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"model_output": {"hole2": [{"hole2": "RARE", "hole1": 4, "hole7": [{"arg": "condition", "_type": "keyword", "value": {"hole0": "Adjacent", "_type": "Template79"}}], "hole5": "MinionSelector", "hole4": [{"hole1": 2, "hole0": "Give", "_type": "Template74"}], "hole0": "Defender of Argus", "hole3": "GiveAura", "_type": "Template15"}], "hole1": "MinionCard", "hole6": [{"hole1": 3, "hole0": 2, "_type": "Template62"}], "hole4": "player", "hole0": "DefenderOfArgus", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 358, 119, 209, "Defender", " ", "of", " ", "Argus", "<EOS>", "4", "<EOS>", "RARE", "<EOS>", "Give", "Aura", "<EOS>", 346, 84, 315, "Give", "<EOS>", "2", "<EOS>", "Minion", "Selector", "<EOS>", 353, 95, 336, "condition", "<EOS>", 38, 325, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "2", "<EOS>", "3", "<EOS>"], "score_history": [-0.0004425048828125, -1.1444091796875e-05, -0.00221649301238358, -0.0006538498564623296, -0.002494696993380785, -6.127213418949395e-05, -2.3655593395233154e-07, -4.768371127283899e-06, -2.3841855067985307e-07, -0.0001125335693359375, -0.000934600830078125, -0.037105560302734375, -3.242446109652519e-05, -3.24249267578125e-05, -0.00037407875061035156, -0.0002384185791015625, -0.0021982192993164062, -0.004215240478515625, -4.172325134277344e-06, -7.62939453125e-06, -0.00347900390625, -1.013275596051244e-05, -0.0054969992488622665, -0.042672865092754364, -0.013783994130790234, -0.01851177215576172, -0.5331039428710938, -0.009362220764160156, -0.0644393339753151, -0.024233102798461914, -0.023839807137846947, -8.344646857949556e-07, -0.001821401179768145, -0.00013649463653564453, -1.1920928244535389e-07, -0.6070156097412109, -0.0002593994140625, -3.814697265625e-06, -0.13205325603485107, -3.6478038964560255e-05, -0.035617828369140625, -7.2479248046875e-05, -0.55503249168396, -2.551078432588838e-05, -4.017353057861328e-05, -1.9073486328125e-06, -0.0002114772651111707, 0.0, -3.0517578125e-05, -7.62939453125e-05, -5.14984130859375e-05, -3.576272320060525e-06, -1.1920928244535389e-07, -7.748602365609258e-05, 0.0], "score": -2.1226427491593114, "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(GiveAura(Give(2)),\n            MinionSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}]}
{"gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Doomhammer"}, {"n": 5, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "SHAMAN"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "EPIC"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"arg": "overload", "_type": "keyword", "value": {"n": 2, "_type": "Num"}}]}], "hole1": "WeaponCard", "hole6": [{"hole2": 8, "hole1": 2, "hole0": "Weapon", "_type": "Template68", "hole3": [{"arg": "windfury", "_type": "keyword", "value": {"value": true, "_type": "NameConstant"}}, {"arg": "windfury", "_type": "keyword", "value": {"value": true, "_type": "NameConstant"}}]}], "hole4": "player", "hole0": "Doomhammer", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 349, 53, 183, "Doomhammer", "<EOS>", 52, 179, "5", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 353, 95, 336, "overload", "<EOS>", 23, 179, "2", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 134, 307, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 354, 95, 336, "windfury", "<EOS>", 22, 175, "True", "<EOS>", 95, 336, "windfury", "<EOS>", 22, 175, "True", "<EOS>"], "score_history": [-2.09808349609375e-05, -0.024044036865234375, -0.0012996142031624913, -0.0002206563949584961, -1.1324817933200393e-05, -0.00010108859714819118, -3.504691630951129e-05, -1.1444091796875e-05, -0.0056858062744140625, -0.004245758056640625, -4.76837158203125e-05, 0.0, -4.577630170388147e-05, -2.86102294921875e-05, -0.000270843505859375, -7.62939453125e-06, -0.0001239776611328125, -1.1444091796875e-05, -4.76837158203125e-05, -0.0001532977621536702, -2.86102294921875e-05, -0.000171661376953125, -3.814697265625e-06, -0.003754734992980957, -1.52587890625e-05, -7.82012939453125e-05, -4.00543212890625e-05, -5.7220458984375e-06, -5.7220458984375e-06, -0.000194549560546875, -1.9073486328125e-06, -0.015323638916015625, -5.7220458984375e-06, -1.9073486328125e-05, -5.7220458984375e-06, -4.76837158203125e-05, 0.0, -3.4332275390625e-05, -2.288818359375e-05, -0.3556833267211914, -5.7220458984375e-06, -0.0009479522705078125, -0.01599884033203125, -2.86102294921875e-05, -0.007780790328979492, -3.814697265625e-05, -0.001583099365234375, -0.000396728515625, -0.0036262073554098606, 0.0, -0.38417649269104004, 0.0, -6.508827209472656e-05, 0.0, -3.814697265625e-06, -0.0015850067138671875, -0.030849456787109375, -0.04622962325811386, -3.218649908376392e-06, -2.9802276912960224e-06, -3.576278118089249e-07, -0.039309386163949966, -4.0531158447265625e-06, -0.002651214599609375, -0.0004673004150390625, -0.001865386962890625, -0.014219045639038086, -7.62939453125e-06, -0.0008697509765625, -4.00543212890625e-05, -0.0028634071350097656, 0.0, -0.8258562088012695, -6.866455078125e-05, -1.1223869323730469, -1.52587890625e-05, -0.04332160949707031, -0.00014495849609375, -0.0015180110931396484, 0.0], "score": -2.9607863361879367, "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, windfury=True, windfury=True)\n"}]}
{"gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "SHAMAN", "hole1": 1, "hole0": "Earth Shock", "_type": "Template2"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"value": {"value": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Attribute", "attr": "immune"}, "_type": "Assign", "targets": [{"id": "index", "_type": "Name"}]}, {"hole2": [{"hole0": 1, "_type": "Template61"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Template77"}, {"value": {"hole0": "Frozen", "_type": "Template37"}, "_type": "Expr"}], "_type": "FunctionDef", "name": "use"}], "_type": "ClassDef", "name": "EarthShock", "bases": [{"id": "SpellCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Earth", "Shock", "<EOS>", 346, 50, 174, "Spell", "Card", "<EOS>", 359, 123, 214, "Earth", " ", "Shock", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", 108, 157, "use", "<EOS>", 1, 334, 342, 333, "self", "<EOS>", 333, "player", "<EOS>", 333, "game", "<EOS>", 361, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 102, 142, 346, 50, 174, "index", "<EOS>", 13, 143, 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>", "immune", "<EOS>", 136, 318, 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 347, 75, 298, "1", "<EOS>", 50, 174, "self", "<EOS>", 106, 155, 26, 236, "Frozen", "<EOS>"], "score_history": [-0.0014781951904296875, -5.7220458984375e-05, -3.814697265625e-06, -0.0004558563232421875, -0.0001010894775390625, -1.883488948806189e-05, -5.722029527532868e-06, -4.7801782784517854e-05, -2.288818359375e-05, -7.62939453125e-06, -9.5367431640625e-06, -0.0003796246601268649, -2.1100042431498878e-05, -1.5258781786542386e-05, -3.0517578125e-05, -0.005976676940917969, -0.00060272216796875, -8.22540732769994e-06, -3.826618194580078e-05, -5.960462772236497e-07, -1.33514404296875e-05, -0.0005129431956447661, 0.0, -0.0017528533935546875, 0.0, -0.09491729736328125, -0.000701904296875, -0.003146529197692871, 0.0, -0.0002193450927734375, -6.29425048828125e-05, -0.00463104248046875, -3.0517578125e-05, -3.135204315185547e-05, -4.6491513785440475e-06, 0.0, -0.0010514233727008104, -9.536738616588991e-07, 0.0, -7.987019671418238e-06, -1.0967229172820225e-05, -0.2555208206176758, -7.2479248046875e-05, -0.00041961669921875, -5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -7.987022399902344e-06, -1.9073486328125e-06, -3.933906555175781e-06, 0.0, -7.62939453125e-06, 0.0, -5.280971163301729e-05, -1.1920922133867862e-06, -0.05350685119628906, -9.5367431640625e-06, -1.9073486328125e-06, -3.4332275390625e-05, -7.62939453125e-06, -1.036741018295288, -3.9577484130859375e-05, -0.008322715759277344, -1.1444091796875e-05, -0.0003662109375, 0.0, -0.000156402587890625, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -3.063678741455078e-05, -2.0265579223632812e-06, -0.8123009204864502, -3.576278118089249e-07, -0.1669912338256836, -0.000225067138671875, -0.07776641845703125, -1.9073486328125e-06, -0.06340599060058594, 0.0, -3.826618194580078e-05, 0.0, -1.919269561767578e-05, -1.1920928244535389e-07, -1.0871341228485107, 0.0, -2.47955322265625e-05, -0.035900115966796875, -4.1961669921875e-05, -0.0064721726812422276, -2.3841855067985307e-07, -5.7220458984375e-06, 0.0, -0.0004787445068359375, -2.384185791015625e-06, -0.006381988525390625, -5.7220458984375e-05, -0.5005083084106445, -0.0032100677490234375, -0.00937795639038086, -5.233271804172546e-05], "score": -4.242204533411915, "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        index = self.target.immune\n        self.target.damage(player.effective_spell_damage(1), self)\n        self.target.add_buff(Buff(Frozen()))\n"}]}
{"gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n", "beams": [{"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole0": "Eye for Eye", "_type": "Template31"}], "hole1": "SecretCard", "hole6": [{"body": [{"value": {"value": {"value": {"value": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "other_player"}, "_type": "Attribute", "attr": "game"}, "_type": "Attribute", "attr": "current_player"}, "_type": "Subscript", "slice": {"value": {"right": {"n": 1, "_type": "Num"}, "_type": "BinOp", "op": {"_type": "Sub"}, "left": {"id": "index", "_type": "Name"}}, "_type": "Index"}}, "_type": "Assign", "targets": [{"id": "minion", "_type": "Name"}]}, {"hole2": [{"_type": "Str", "s": "<UNK> <UNK>"}, {"id": "mirror", "_type": "Name"}], "hole1": "trigger", "hole0": {"id": "player", "_type": "Name"}, "_type": "Template77"}], "test": {"values": [{"ops": [{"_type": "Is"}], "comparators": [{"value": "Null", "_type": "NameConstant"}], "_type": "Compare", "left": {"id": "target", "_type": "Name"}}, {"operand": {"n": 1, "_type": "Num"}, "_type": "UnaryOp", "op": {"_type": "USub"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "If"}], "hole7": [{"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}], "_type": "arguments"}, "body": [{"value": {"values": [{"hole2": "player", "hole1": "can_use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, {"ops": [{"_type": "Lt"}], "comparators": [{"n": 7, "_type": "Num"}], "_type": "Compare", "left": {"args": [{"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "minions"}], "func": {"id": "len", "_type": "Name"}, "_type": "Call"}}, {"ops": [{"_type": "Lt"}], "comparators": [{"n": 7, "_type": "Num"}], "_type": "Compare", "left": {"args": [{"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "minions"}], "func": {"id": "len", "_type": "Name"}, "_type": "Call"}}], "_type": "BoolOp", "op": {"_type": "And"}}, "_type": "Return"}], "_type": "FunctionDef", "name": "can_use"}], "hole5": [{"arg": "target", "_type": "arg"}], "hole4": "attacker", "hole0": "EyeforEye", "hole3": "_reveal", "_type": "Template5"}, "choice_history": [97, 286, "Eye", "for", "Eye", "<EOS>", "Secret", "Card", "<EOS>", 358, 127, 230, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "_reveal", "<EOS>", "attacker", "<EOS>", 340, 333, "target", "<EOS>", 358, 109, 160, 15, 146, 2, 347, 46, 153, 21, 174, "target", "<EOS>", 343, 8, 346, 51, 176, "Null", "<EOS>", 89, 331, 139, 23, 179, "1", "<EOS>", 359, 102, 142, 346, 50, 174, "minion", "<EOS>", 24, 185, 13, 143, 13, 143, 13, 143, 21, 174, "game", "<EOS>", "other_player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", 100, 164, 14, 145, 21, 174, "index", "<EOS>", 99, 23, 179, "1", "<EOS>", 136, 318, 21, 174, "player", "<EOS>", "trigger", "<EOS>", 347, 53, 183, "<UNK>", " ", "<UNK>", "<EOS>", 50, 174, "mirror", "<EOS>", 358, 108, 157, "can_use", "<EOS>", 1, 334, 342, 333, "self", "<EOS>", 333, "player", "<EOS>", 333, "game", "<EOS>", 358, 111, 181, 15, 146, 2, 348, 76, 300, 38, 325, "super", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 46, 153, 16, 150, 21, 174, "len", "<EOS>", 346, 42, 143, 21, 174, "player", "<EOS>", "minions", "<EOS>", 343, 10, 346, 52, 179, "7", "<EOS>", 46, 153, 16, 150, 21, 174, "len", "<EOS>", 346, 42, 143, 21, 174, "player", "<EOS>", "minions", "<EOS>", 343, 10, 346, 52, 179, "7", "<EOS>"], "score_history": [-0.0008678436279296875, -0.1952352523803711, -0.003221086459234357, -1.1391067504882812, -0.0005549775087274611, -2.4914430468925275e-05, -0.010985968634486198, -0.00030410289764404297, -1.239776611328125e-05, -0.0003261566162109375, -0.0012454986572265625, -4.38690185546875e-05, -9.1790861915797e-06, -5.316734313964844e-05, -0.12489104270935059, -9.369850158691406e-05, -0.002307891845703125, -0.0001430511474609375, -4.4345855712890625e-05, -1.9073486328125e-06, -0.0006203651428222656, -1.9073486328125e-06, -0.01755523681640625, 0.0, -0.3576141595840454, 0.0, -9.1552734375e-05, -0.0010004043579101562, -0.6326694488525391, -3.576278118089249e-07, -0.001346588134765625, -0.0079193115234375, -0.00025177001953125, -0.017137527465820312, -0.010714530944824219, -0.001789093017578125, -0.07174205780029297, -0.08590126037597656, -0.003124237060546875, -0.24396038055419922, -1.9073486328125e-06, -0.38623249530792236, -0.0006327229784801602, -2.86102294921875e-05, -1.0225229263305664, -4.57763671875e-05, -0.3844718933105469, -0.00022125244140625, -0.0001511573645984754, -3.099440846199286e-06, -0.47301769256591797, -0.002277374267578125, -0.19773292541503906, -5.91278076171875e-05, 0.0, -0.058123111724853516, 0.0, -0.04405975341796875, -0.025909423828125, -3.814697265625e-06, -1.9073486328125e-06, -0.0008411407470703125, -1.9073486328125e-06, -1.8740084171295166, 0.0, -0.5059537887573242, -0.007683753967285156, -0.001651763916015625, -9.5367431640625e-06, -0.0002994537353515625, -1.9073486328125e-06, -0.43930625915527344, -1.9073486328125e-06, -0.00072479248046875, -3.814697265625e-06, -0.28478455543518066, -1.9073486328125e-06, -0.35792410373687744, 0.0, -0.6360646486282349, -1.9073486328125e-06, -1.1496648788452148, 0.0, -0.027149200439453125, -0.0007448196411132812, -0.2175302505493164, -0.0008373260498046875, -0.050930023193359375, 0.0, -0.18287277221679688, -2.300739288330078e-05, -0.16751956939697266, -0.021622657775878906, -1.9073486328125e-06, -0.0001316070556640625, -1.9073486328125e-06, -0.03571128845214844, -0.0004482269287109375, -0.00029754638671875, -9.5367431640625e-06, -0.6809040307998657, 0.0, -0.18720516562461853, -1.9073486328125e-06, -0.0002346038818359375, -0.0002346038818359375, -1.52587890625e-05, -0.3064798414707184, -0.02475261688232422, -0.365620493888855, -2.0265579223632812e-06, -0.0011768341064453125, 0.0, -1.009200096130371, -1.9073486328125e-06, -0.0005950927734375, -0.12630271911621094, -0.0001125335693359375, -0.006286978721618652, 0.0, -4.9591064453125e-05, -7.43865966796875e-05, -0.05297279357910156, -3.814697265625e-06, -7.62939453125e-06, -2.3841855067985307e-07, -1.9073486328125e-06, -7.867813110351562e-06, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -8.344646857949556e-07, -0.0003643035888671875, -0.002429962158203125, -0.0001926422119140625, -0.002521514892578125, -9.5367431640625e-06, -0.0001621246337890625, -0.6239385604858398, -0.004204750061035156, -0.0005016326904296875, -1.52587890625e-05, 0.0, -8.583057933719829e-06, 0.0, -0.0006771087646484375, 0.0, -8.58306884765625e-05, 0.0, -1.1086463018727954e-05, -1.1920928244535389e-07, -0.0156707763671875, -0.0003070831298828125, -0.00011444091796875, -9.5367431640625e-06, -1.71661376953125e-05, 0.0, -0.0016461610794067383, -1.1920928244535389e-07, -1.52587890625e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.14239120483398438, 0.0, -9.34600830078125e-05, 0.0, -0.00099945068359375, -1.1444091796875e-05, -5.7220458984375e-06, -0.0031375885009765625, -0.00023651123046875, -7.82012939453125e-05, -2.09808349609375e-05, -0.004857897758483887, 0.0, -0.6146507263183594, -0.018613815307617188, -0.000278472900390625, -2.47955322265625e-05, -3.24249267578125e-05, -1.9073486328125e-06, -0.001262664794921875, -3.933906555175781e-06, -1.52587890625e-05, -1.71661376953125e-05, -2.288818359375e-05, -0.3331470489501953, -7.62939453125e-06, -0.00042724609375, 0.0, -0.001438140869140625, -1.71661376953125e-05, -1.9073486328125e-06, -0.0045909881591796875, -0.00022125244140625, -4.76837158203125e-05, -1.52587890625e-05, -0.16726815700531006, 0.0], "score": -16.202285476534385, "inferred_code": "class EyeforEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, attacker, target):\n        if target is Null and -1:\n            minion = game.other_player.game.current_player[index - 1]\n            player.trigger('<UNK> <UNK>', mirror)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(player.minions\n            ) < 7 and len(player.minions) < 7\n"}]}
{"gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n", "beams": [{"model_output": {"hole2": [{"hole2": "HUNTER", "hole1": 2, "hole0": "Flare", "_type": "Template34", "hole3": "RARE"}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"target": {"id": "minion", "_type": "Name"}, "iter": {"args": [{"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "minions"}], "keywords": [{"arg": "<UNK>", "_type": "keyword", "value": {"args": {"hole0": "m", "_type": "Template49"}, "body": {"value": {"id": "m", "_type": "Name"}, "_type": "Attribute", "attr": "<UNK>"}, "_type": "Lambda"}}], "func": {"id": "<UNK>", "_type": "Name"}, "_type": "Call"}, "body": [{"target": {"id": "deathrattle", "_type": "Name"}, "iter": {"value": {"id": "minion", "_type": "Name"}, "_type": "Attribute", "attr": "deathrattle"}, "body": [{"hole2": [{"id": "minion", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"id": "deathrattle", "_type": "Name"}, "_type": "Template77"}], "_type": "For"}, {"body": [{"target": {"id": "deathrattle", "_type": "Name"}, "iter": {"value": {"id": "minion", "_type": "Name"}, "_type": "Attribute", "attr": "deathrattle"}, "body": [{"hole2": [{"id": "minion", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"id": "deathrattle", "_type": "Name"}, "_type": "Template77"}], "_type": "For"}], "test": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "<UNK>"}, "_type": "If"}], "_type": "For"}, {"body": [{"target": {"id": "deathrattle", "_type": "Name"}, "iter": {"value": {"id": "minion", "_type": "Name"}, "_type": "Attribute", "attr": "deathrattle"}, "body": [{"hole2": [{"id": "minion", "_type": "Name"}], "hole1": "<UNK>", "hole0": {"id": "deathrattle", "_type": "Name"}, "_type": "Template77"}], "_type": "For"}], "test": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "<UNK>"}, "_type": "If"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "Flare", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 358, 128, 233, "Flare", "<EOS>", "2", "<EOS>", "HUNTER", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 360, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 107, 156, 21, 174, "minion", "<EOS>", 16, 151, 21, 174, "<UNK>", "<EOS>", 346, 42, 143, 21, 174, "player", "<EOS>", "minions", "<EOS>", 353, 95, 336, "<UNK>", "<EOS>", 18, 167, 0, 282, "m", "<EOS>", 13, 143, 21, 174, "m", "<EOS>", "<UNK>", "<EOS>", 359, 107, 156, 21, 174, "deathrattle", "<EOS>", 13, 143, 21, 174, "minion", "<EOS>", "deathrattle", "<EOS>", 358, 136, 318, 21, 174, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 346, 50, 174, "minion", "<EOS>", 109, 160, 13, 143, 21, 174, "player", "<EOS>", "<UNK>", "<EOS>", 358, 107, 156, 21, 174, "deathrattle", "<EOS>", 13, 143, 21, 174, "minion", "<EOS>", "deathrattle", "<EOS>", 358, 136, 318, 21, 174, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 346, 50, 174, "minion", "<EOS>", 109, 160, 13, 143, 21, 174, "player", "<EOS>", "<UNK>", "<EOS>", 358, 107, 156, 21, 174, "deathrattle", "<EOS>", 13, 143, 21, 174, "minion", "<EOS>", "deathrattle", "<EOS>", 358, 136, 318, 21, 174, "deathrattle", "<EOS>", "<UNK>", "<EOS>", 346, 50, 174, "minion", "<EOS>"], "score_history": [-1.1444091796875e-05, -0.000110626220703125, -0.046863771975040436, -4.1723224057932384e-06, -2.3841855067985307e-07, -3.707408905029297e-05, -3.4927710657939315e-05, -7.05718994140625e-05, -0.0006504058837890625, -2.47955322265625e-05, -2.861018856492592e-06, -2.3841855067985307e-07, 0.0, 0.0, -0.0002579689025878906, -1.1444091796875e-05, -0.0008679628372192383, -1.9073486328125e-06, -5.340576171875e-05, 0.0, -9.655952453613281e-06, 0.0, -2.09808349609375e-05, -7.62939453125e-06, -8.225431884056889e-06, -6.079673767089844e-06, -0.1338663101196289, -5.340576171875e-05, -0.0001068115234375, -2.288818359375e-05, -7.62939453125e-06, -3.814697265625e-05, 0.0, -0.0010608433512970805, -4.57763671875e-05, -2.503394853192731e-06, -1.9073486328125e-06, -2.0265579223632812e-06, 0.0, -7.045269012451172e-05, -5.960462772236497e-07, -0.3967113494873047, -0.0022945404052734375, -0.000606536865234375, -3.814697265625e-06, -0.0020259618759155273, 0.0, -0.024537086486816406, -0.5418500900268555, -0.008516311645507812, 0.0, -0.0004444122314453125, -2.0503857740550302e-05, -5.7220458984375e-05, -0.0430145263671875, 0.0, -0.008928298950195312, -5.7220458984375e-06, -0.0008920431137084961, 0.0, -0.00797581672668457, -2.0265579223632812e-06, -0.0001678466796875, -0.0002346038818359375, -9.5367431640625e-06, -0.021015524864196777, 0.0, -0.011658668518066406, -0.0010576248168945312, -0.0006866455078125, -0.0001506805419921875, -0.012349128723144531, -0.0004422969068400562, -0.18683242797851562, -0.00035858154296875, -2.47955322265625e-05, 0.0, -0.14294195175170898, -5.841255187988281e-06, -0.007426738739013672, -1.1920928244535389e-07, -0.2554149627685547, -0.0846405029296875, -1.1444091796875e-05, -1.71661376953125e-05, 0.0, -0.2250252068042755, -3.659724825411104e-05, -0.4270162582397461, -9.1552734375e-05, -0.006500244140625, 0.0, -0.013592362403869629, 0.0, -0.0856623649597168, -0.000133514404296875, -1.1444091796875e-05, -0.04647064208984375, -0.000202178955078125, -0.0006256103515625, -3.62396240234375e-05, -0.24418190121650696, -0.027800319716334343, -0.05057357996702194, -7.510157047363464e-06, -0.007999420166015625, -0.008119583129882812, 0.0, -0.880134105682373, -1.1920928244535389e-07, -0.02782440185546875, -0.018260955810546875, -0.05201435089111328, -0.000194549560546875, -0.0002117156982421875, 0.0, -0.019595623016357422, 0.0, -0.06255555152893066, 0.0, -0.021590232849121094, -0.093017578125, -1.9073486328125e-05, -3.0517578125e-05, 0.0, -0.09742849320173264, -0.00032210350036621094, -0.06015777587890625, -4.38690185546875e-05, -0.0008449554443359375, 0.0, -0.0010924339294433594, 0.0, -0.02257359027862549, -3.4332275390625e-05, -1.71661376953125e-05, -0.14523601531982422, -0.000179290771484375, -0.000316619873046875, -5.14984130859375e-05, -0.1598806530237198, -0.001600026385858655, -0.10245737433433533, -4.529942543740617e-06, -0.0053119659423828125, -0.005337715148925781, 0.0, -0.6278303265571594, -1.1920928244535389e-07, -0.059368133544921875, -0.03145313262939453, -0.0503997802734375, -2.288818359375e-05, -0.0002613067626953125, 0.0, -0.0047702789306640625, -1.1920928244535389e-07, -0.07307040691375732, -1.1920928244535389e-07, -0.02145099639892578, -0.10521984100341797, -1.52587890625e-05, -3.24249267578125e-05, 0.0, -0.145583838224411, -0.00026297569274902344, -0.04635143280029297, -4.57763671875e-05, -0.00119781494140625, 0.0, -0.0007054805755615234, 0.0, -0.022877097129821777, -4.38690185546875e-05, -1.9073486328125e-05, -0.13454341888427734, -0.000186920166015625, -0.000335693359375, -5.53131103515625e-05, -0.161209836602211, -0.001679538981989026, -0.10554155707359314, -4.529942543740617e-06, -0.0051422119140625, -0.005557060241699219, 0.0, -0.6136114001274109, -1.1920928244535389e-07], "score": -7.088944841345395, "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in <UNK>(player.minions, <UNK>=lambda m: m.<UNK>):\n            for deathrattle in minion.deathrattle:\n                deathrattle.<UNK>(minion)\n            if player.<UNK>:\n                for deathrattle in minion.deathrattle:\n                    deathrattle.<UNK>(minion)\n        if player.<UNK>:\n            for deathrattle in minion.deathrattle:\n                deathrattle.<UNK>(minion)\n"}]}
{"gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n", "beams": [{"model_output": {"hole2": [{"hole2": "WARRIOR", "hole1": 7, "hole0": "Gorehowl", "_type": "Template34", "hole3": "EPIC"}], "hole1": "WeaponCard", "hole6": [{"hole2": 1, "hole1": 7, "hole0": "Weapon", "_type": "Template68", "hole3": [{"hole2": [{"hole1": [{"n": 1, "_type": "Num"}], "hole0": "Heal", "_type": "Template44", "hole3": "MinionSelector"}], "hole1": [{"hole0": "IsHero", "_type": "Template79"}], "hole0": "CharacterAttack", "_type": "Template45"}]}], "hole4": "player", "hole0": "Gorehowl", "hole3": "create_weapon", "_type": "Template5"}, "choice_history": [97, 283, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 358, 128, 233, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 358, 134, 307, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 353, 93, 276, "Character", "Attack", "<EOS>", 346, 88, 325, "Is", "Hero", "<EOS>", 346, 64, 270, "Heal", "<EOS>", 346, 52, 179, "1", "<EOS>", "Minion", "Selector", "<EOS>"], "score_history": [-3.62396240234375e-05, -6.29425048828125e-05, -0.0001419681793777272, -6.00810453761369e-05, -6.496880087070167e-05, -0.00012266510748304427, -2.861018856492592e-06, -3.4332275390625e-05, -0.098297119140625, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.0007961307419463992, 0.0, -0.003314495086669922, -5.7220458984375e-06, -9.715557098388672e-05, 0.0, -0.035390257835388184, 0.0, -2.1219235350145027e-05, 0.0, -1.9073486328125e-06, -0.0048542022705078125, -0.45214176177978516, -6.079665126890177e-06, -3.2066898711491376e-05, -4.1961669921875e-05, -9.298280929215252e-06, -0.05327313393354416, -1.1920928244535389e-07, -0.036009788513183594, -0.27981090545654297, -0.4637260437011719, -0.002773790620267391, -0.00037300586700439453, 0.0, 0.0, -0.056151390075683594, -1.33514404296875e-05, -0.0027031884528696537, -0.04852832853794098, -3.933906555175781e-06, -1.9073486328125e-06, -0.6064424514770508, -0.350311279296875, -0.6134899854660034, -6.0796710386057384e-06, -3.814697265625e-06, -2.86102294921875e-05, 0.0, -0.0009384304285049438, -6.318072337307967e-06, -0.13556265830993652, -4.029273986816406e-05, 0.0], "score": -3.2457742978995086, "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(IsHero()),\n            ActionTag(Heal(1), MinionSelector()))])\n"}]}
{"gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Hound"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "HUNTER"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "COMMON"}, {"value": true, "_type": "NameConstant"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"hole0": "BEAST", "_type": "Template75"}]}], "hole1": "MinionCard", "hole6": [{"hole2": "charge", "hole1": 1, "hole0": 1, "_type": "Template50", "hole3": {"value": true, "_type": "NameConstant"}}], "hole4": "player", "hole0": "Hound", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 350, 53, 183, "Hound", "<EOS>", 52, 179, "1", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 51, 175, "False", "<EOS>", 353, 94, 316, "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "1", "<EOS>", "1", "<EOS>", "charge", "<EOS>", 22, 175, "True", "<EOS>"], "score_history": [-7.62939453125e-06, -1.52587890625e-05, -0.0028867737855762243, -1.1920928244535389e-07, -9.715557098388672e-06, -9.775159924174659e-06, 0.0, -7.2479248046875e-05, -0.0007610321044921875, -0.29181861877441406, -5.340576171875e-05, 0.0, -3.4570680327306036e-06, -1.33514404296875e-05, -4.00543212890625e-05, -1.9073486328125e-06, -0.009563446044921875, -0.0003757476806640625, -2.288818359375e-05, -2.503394853192731e-06, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -2.4556569769629277e-05, -1.9073486328125e-06, -3.814697265625e-05, 0.0, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-05, -1.9073486328125e-06, -0.002591252326965332, -7.62939453125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-05, -3.814697265625e-06, -5.91278076171875e-05, 0.0, -0.8248729705810547, -1.9073486328125e-06, -0.0029735565185546875, -6.29425048828125e-05, -0.000553131103515625, -1.9073486328125e-06, -9.34600830078125e-05, -0.000263214111328125, -0.0001430511474609375, -0.002672910690307617, 0.0, -0.0029926300048828125, 0.0, -0.000164031982421875, 0.0, -7.62939453125e-06, -0.0016956329345703125, -2.86102294921875e-05, -1.1920928244535389e-07, -8.844937838148326e-05, -2.9073096811771393e-05, -3.576278118089249e-07, -0.0018837451934814453, -1.1920928244535389e-07, -0.0014324188232421875, -4.1961669921875e-05, -0.0006326436996459961, -1.9073486328125e-06], "score": -1.1491202544040462, "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}]}
{"gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n", "beams": [{"model_output": {"hole2": [{"hole2": "RARE", "hole1": 3, "hole5": "PlayerSelector", "hole4": [{"hole0": "damage", "_type": "Template79"}], "hole0": "Injured Blademaster", "hole3": "damage", "_type": "Template15"}], "hole1": "MinionCard", "hole6": [{"hole1": 7, "hole0": 4, "_type": "Template62"}], "hole4": "player", "hole0": "<UNK>Blademaster", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "<UNK>", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 358, 119, 207, "Injured", " ", "Blademaster", "<EOS>", "3", "<EOS>", "RARE", "<EOS>", "damage", "<EOS>", 346, 88, 325, "damage", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "4", "<EOS>", "7", "<EOS>"], "score_history": [-0.3192310333251953, -1.52587890625e-05, -0.3162880837917328, -0.00021217043104115874, -4.768360213347478e-06, 0.0, -1.2993811651540454e-05, -3.576278118089249e-07, -3.4332275390625e-05, -0.021066665649414062, -1.1112818717956543, -9.536738616588991e-07, -7.748603820800781e-06, -3.6954863844584906e-06, -7.748603820800781e-06, -0.00080108642578125, -3.814697265625e-06, -0.0142822265625, 0.0, -0.3406168818473816, -0.000351013703038916, -0.061405181884765625, -0.44976806640625, -1.1444091796875e-05, -0.730719268321991, -0.01503572054207325, -0.5275508165359497, -1.0728830375228426e-06, -1.311301275563892e-06, -0.0012075859121978283, 0.0, -0.0015236134640872478, 0.0, -1.52587890625e-05, -0.0001049041748046875, -2.6702880859375e-05, 0.0, -2.0265558760002023e-06, -0.0013793706893920898, 0.0], "score": -3.912975049894442, "inferred_code": "class <UNK>Blademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(damage(damage()),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}]}
{"gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 2, "hole0": "Knife Juggler", "_type": "Template34", "hole3": "RARE"}], "hole1": "MinionCard", "hole6": [{"value": {"hole2": "MinionSummoned", "hole1": 2, "hole4": [{"hole1": [{"n": 1, "_type": "Num"}], "hole0": "Damage", "hole4": [{"value": "Null", "_type": "NameConstant"}, {"hole0": "EnemyPlayer", "_type": "Template79"}, {"hole0": "RandomPicker", "_type": "Template79"}], "_type": "Template44", "hole3": "CharacterSelector"}], "hole0": 3, "hole3": [{"hole0": "PIRATE", "_type": "Template60"}], "_type": "Template36"}, "_type": "Return"}], "hole4": "player", "hole0": "KnifeJuggler", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 358, 128, 233, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 111, 181, 25, 235, "3", "<EOS>", "2", "<EOS>", "Minion", "Summoned", "<EOS>", 346, 74, 297, "PIRATE", "<EOS>", 346, 64, 272, "Damage", "<EOS>", 346, 52, 179, "1", "<EOS>", "Character", "Selector", "<EOS>", 348, 51, 176, "Null", "<EOS>", 88, 325, "Enemy", "Player", "<EOS>", 88, 325, "Random", "Picker", "<EOS>"], "score_history": [-0.000885009765625, -3.814697265625e-05, -0.004942708183079958, -1.0967213711410295e-05, -3.576278118089249e-07, -7.148482836782932e-07, -0.00013756752014160156, -8.344646857949556e-07, -1.52587890625e-05, -0.0005779266357421875, -6.29425048828125e-05, -1.9073486328125e-06, -4.4107433495810255e-05, -1.0728830375228426e-06, 0.0, -7.98713335825596e-06, 0.0, -3.62396240234375e-05, -3.814697265625e-06, -8.96453857421875e-05, 0.0, -7.05718994140625e-05, 0.0, -4.9591064453125e-05, 0.0, -2.288818359375e-05, -0.001651763916015625, -0.00051116943359375, -0.0018768310546875, -0.001094818115234375, -2.0265579223632812e-06, -7.390948667307384e-06, -4.220008850097656e-05, -1.764288026606664e-05, -0.18641197681427002, -0.021956801414489746, -0.0002184879849664867, -0.0001983642578125, -0.43739795684814453, -0.00145721435546875, -0.014386534690856934, -1.9431114196777344e-05, -5.7220458984375e-06, -0.006491661071777344, -0.11528587341308594, -0.0032016250770539045, -0.00042361716623418033, -9.5367431640625e-06, -0.006992340087890625, -2.288818359375e-05, -0.0006333515048027039, -4.589557647705078e-05, -0.057443857192993164, -0.0005542394355870783, 0.0, -0.00873565673828125, -0.0006351470947265625, -0.0018367767333984375, -0.0014774799346923828, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.010053143836557865, -2.562999725341797e-05, -1.1920928244535389e-07, -0.2032604217529297, -3.814697265625e-06, -0.001598954200744629, -4.3987758544972166e-05, -8.344646857949556e-07], "score": -1.093081128286535, "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.PIRATE)), ActionTag(Damage(1), CharacterSelector(\n            Null, EnemyPlayer(), RandomPicker())))])\n"}]}
{"gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "ROGUE", "hole1": 2, "hole0": "Lightwell", "_type": "Template13", "hole3": "RARE"}, {"hole2": "TurnEnded", "hole1": 5, "hole5": "HeroSelector", "hole4": [{"n": 3, "_type": "Num"}], "hole0": 0, "hole3": "Heal", "_type": "Template0"}], "_type": "ClassDef", "name": "Lightwell", "bases": [{"id": "MinionCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Lightwell", "<EOS>", 346, 50, 174, "Minion", "Card", "<EOS>", 359, 117, 197, "Lightwell", "<EOS>", "2", "<EOS>", "ROGUE", "<EOS>", "RARE", "<EOS>", 112, 189, "0", "<EOS>", "5", "<EOS>", "Turn", "Ended", "<EOS>", "Heal", "<EOS>", 346, 52, 179, "3", "<EOS>", "Hero", "Selector", "<EOS>"], "score_history": [-0.0023937225341796875, -3.814697265625e-06, -3.814697265625e-06, -5.14984130859375e-05, -7.43865966796875e-05, -0.012602788396179676, -0.015999004244804382, 0.0, -9.5367431640625e-06, 0.0, -8.06911411928013e-05, -2.0384708477649838e-05, -7.283687591552734e-05, -7.05718994140625e-05, -0.16347694396972656, -0.004998207092285156, -0.002053178148344159, -0.0004178785311523825, -0.00012147425877628848, 0.0, -0.18442118167877197, -1.33514404296875e-05, -0.02755260467529297, 0.0, -0.0012664794921875, -0.6168079376220703, -3.695445047924295e-05, -1.1920928244535389e-07, -1.9073468138230965e-06, -0.00027370447060093284, -0.11053967475891113, -0.07649517059326172, -3.254413604736328e-05, -0.008967995643615723, -0.001293182373046875, -1.9073486328125e-06, -0.0036296844482421875, -0.000263214111328125, -0.0013072495348751545, -9.5367431640625e-06, -0.014871597290039062, -1.9073486328125e-06, 0.0], "score": -1.2502386376636352, "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY\n            .RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnEnded(), ActionTag(Heal(3),\n            HeroSelector()))])\n"}]}
{"gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n", "beams": [{"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 1, "hole0": "Mana Wyrm", "_type": "Template31"}], "hole1": "MinionCard", "hole6": [{"value": {"hole2": "MinionSummoned", "hole1": 3, "hole4": [{"hole2": [{"n": 1, "_type": "Num"}], "hole1": {"id": "ChangeAttack", "_type": "Name"}, "hole0": "Give", "_type": "Template38", "hole3": "SelfSelector"}], "hole0": 1, "hole3": [{"hole0": "Manaspell", "_type": "Template79"}], "_type": "Template36"}, "_type": "Return"}], "hole4": "player", "hole0": "ManaWyrm", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 358, 127, 230, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 111, 181, 25, 235, "1", "<EOS>", "3", "<EOS>", "Minion", "Summoned", "<EOS>", 346, 88, 325, "Mana", "spell", "<EOS>", 346, 60, 238, "Give", "<EOS>", 21, 174, "Change", "Attack", "<EOS>", 346, 52, 179, "1", "<EOS>", "Self", "Selector", "<EOS>"], "score_history": [-0.0001697540283203125, -8.96453857421875e-05, -0.014397311955690384, -0.0001407806994393468, -9.179073458653875e-06, -6.680376827716827e-05, -1.621246337890625e-05, -7.152555099310121e-07, -1.9073486328125e-06, -0.003459930419921875, -2.6702880859375e-05, -1.1920928244535389e-07, -0.001349637284874916, -2.6702880859375e-05, -2.47955322265625e-05, -0.00023532775230705738, 0.0, -0.000720977783203125, -2.288818359375e-05, -0.04541206359863281, 0.0, -5.352497100830078e-05, 0.0, -1.9073486328125e-06, -0.26198673248291016, -0.00017547607421875, -0.0001811981201171875, -0.0006694793701171875, -4.8875676839088555e-06, -4.303399327909574e-05, -0.0006233453750610352, -1.0848039892152883e-05, -0.0030327290296554565, -0.1280653476715088, -0.00010942854714812711, -1.33514404296875e-05, -0.041164398193359375, -8.7738037109375e-05, -0.44053223729133606, -0.24668824672698975, -0.00014423283573705703, -2.288818359375e-05, -0.1453075408935547, -0.04265117645263672, -5.1140610594302416e-05, -0.0001125323396991007, -0.0018110275268554688, -5.91278076171875e-05, -0.01445689331740141, -0.00013458551256917417, -1.7881377516459906e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.0005950927734375, -7.62939453125e-06, -0.004706382751464844, -2.2649765014648438e-06, -5.7220458984375e-06], "score": -1.3996930207390434, "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(Manaspell()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n"}]}
{"gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 4, "hole0": "Mogu'shan Warden", "_type": "Template31"}], "hole1": "MinionCard", "hole6": [{"hole2": "taunt", "hole1": 7, "hole0": 1, "_type": "Template50", "hole3": {"value": true, "_type": "NameConstant"}}], "hole4": "player", "hole0": "Mogu'shanWarden", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 358, 127, 230, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "1", "<EOS>", "7", "<EOS>", "taunt", "<EOS>", 22, 175, "True", "<EOS>"], "score_history": [-0.0001049041748046875, -2.288818359375e-05, -0.0010857118759304285, -4.9947539082495496e-05, -6.079655122448457e-06, -8.7738037109375e-05, -1.33514404296875e-05, -4.5299530029296875e-06, -1.9073486328125e-06, -0.000560760498046875, -2.47955322265625e-05, -1.4305104514278355e-06, -3.4570690331747755e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -3.051707608392462e-05, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -3.24249267578125e-05, 0.0, -0.000446319580078125, 0.0, -1.9073486328125e-06, -0.0008831024169921875, -1.52587890625e-05, -5.960445378150325e-06, -1.3589766240329482e-05, -0.00010454653238411993, 0.0, -0.016123294830322266, 0.0, -5.14984130859375e-05, -2.288818359375e-05, -0.00011467933654785156, 0.0], "score": -0.019877147219965252, "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}]}
{"gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n", "beams": [{"model_output": {"hole2": [{"hole2": "DRUID", "hole1": 5, "hole0": "Nourish", "_type": "Template34", "hole3": "RARE"}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"value": {"args": [{"id": "minions", "_type": "Name"}], "func": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "random_choice"}, "_type": "Call"}, "_type": "Assign", "targets": [{"id": "minion_card", "_type": "Name"}]}, {"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"value": {"hole0": "<UNK>Justice", "_type": "Template79"}, "_type": "Assign", "targets": [{"id": "justice", "_type": "Name"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "Nourish", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 358, 128, 233, "Nourish", "<EOS>", "5", "<EOS>", "DRUID", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 361, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 102, 142, 346, 50, 174, "minion_card", "<EOS>", 16, 150, 13, 143, 21, 174, "game", "<EOS>", "random_choice", "<EOS>", 346, 50, 174, "minions", "<EOS>", 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 102, 142, 346, 50, 174, "justice", "<EOS>", 38, 325, "<UNK>", "Justice", "<EOS>"], "score_history": [-9.5367431640625e-06, -0.0041713714599609375, -0.0003567297535482794, -1.77621805050876e-05, -9.536736342852237e-07, -2.2411262762034312e-05, -6.318082796497038e-06, -3.0517578125e-05, -0.0043239593505859375, -3.0517578125e-05, -3.3378546504536644e-06, -1.9073486328125e-06, 0.0, 0.0, -0.000225067138671875, -1.9073486328125e-06, -0.0002117156982421875, 0.0, -0.0003032684326171875, -3.814697265625e-06, -4.208087921142578e-05, 0.0, -2.09808349609375e-05, -5.91278076171875e-05, -8.463848644169047e-06, -3.8266178307821974e-05, -0.7808408737182617, -0.2629070281982422, -0.0001392364501953125, -1.71661376953125e-05, -1.52587890625e-05, -6.67572021484375e-05, 0.0, -2.586841583251953e-05, -2.09808349609375e-05, -1.537799835205078e-05, -4.38690185546875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.3589859008789062e-05, 0.0, -0.0044841766357421875, -4.76837158203125e-05, -4.1961669921875e-05, -1.9073486328125e-05, -3.814697265625e-06, -1.570859670639038, -0.0004146099090576172, -0.023596763610839844, -0.0028104782104492188, -0.000194549560546875, -2.47955322265625e-05, -0.00696563720703125, 0.0, -0.6979074478149414, -3.933906555175781e-06, -0.07776641845703125, -2.09808349609375e-05, -1.1444091796875e-05, -0.0004901885986328125, -3.62396240234375e-05, -0.16671159863471985, -0.0002558210107963532, -1.036829948425293, -0.000118255615234375, -0.5729103088378906, -0.00019073486328125, -0.05615234375, 0.0, -0.021155238151550293, -0.0001735687255859375, -3.24249267578125e-05, -9.5367431640625e-06, -9.894371032714844e-06, 0.0, -0.000199198693735525, -9.298310033045709e-06, -0.007844924926757812, -2.47955322265625e-05, -4.57763671875e-05, -3.4332275390625e-05, -6.29425048828125e-05, -1.9041944742202759, -0.0018181799678131938, -0.6393880844116211, -3.814697265625e-06, -0.025103449821472168, -0.16929411888122559, -0.0006332488264888525], "score": -8.042906018744134, "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minion_card = game.random_choice(minions)\n        super().use(player, game)\n        justice = <UNK>Justice()\n"}]}
{"gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "PRIEST", "hole1": 0, "hole8": {"_type": "Tuple", "elts": [{"hole2": "MinionSelector", "hole0": "Kill", "hole4": [{"arg": "players", "_type": "keyword", "value": {"hole0": "BothPlayer", "_type": "Template79"}}], "_type": "Template43"}, {"hole0": "Kill", "_type": "Template44", "hole3": "SelfSelector"}]}, "hole6": "DRAGON", "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "hole0": "Preparation", "hole3": "EPIC", "_type": "Template4"}, {"hole1": 3, "hole0": 3, "_type": "Template19"}], "_type": "ClassDef", "name": "Preparation", "bases": [{"id": "SpellCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Preparation", "<EOS>", 346, 50, 174, "Spell", "Card", "<EOS>", 359, 129, 250, "Preparation", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "EPIC", "<EOS>", "minion_type", "<EOS>", 21, 174, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 40, 329, 347, 63, 263, "Kill", "<EOS>", "Minion", "Selector", "<EOS>", 353, 95, 336, "players", "<EOS>", 38, 325, "Both", "Player", "<EOS>", 64, 269, "Kill", "<EOS>", "Self", "Selector", "<EOS>", 122, 213, "3", "<EOS>", "3", "<EOS>"], "score_history": [-0.23993206024169922, -1.1444091796875e-05, -1.9073486328125e-06, -2.6702880859375e-05, -0.0001850128173828125, -0.14840474724769592, -0.4054098427295685, -3.814697265625e-06, -7.62939453125e-06, -1.9073486328125e-06, -0.008325920440256596, -0.0002557039260864258, -9.477137791691348e-05, -1.33514404296875e-05, -0.03135871887207031, -0.0004711151123046875, -4.124556289752945e-05, -0.000118255615234375, -0.0017570257186889648, -8.225440979003906e-06, -0.2898811101913452, -2.09808349609375e-05, -0.010648727416992188, -7.62939453125e-06, -0.18341445922851562, -3.814697265625e-06, -0.0011997222900390625, 0.0, -0.005825042724609375, -1.1444091796875e-05, -0.7028684616088867, -0.0001316070556640625, -0.008485794067382812, -0.000621795654296875, -0.4622020721435547, -0.0002689361572265625, -0.00753021240234375, -0.00443267822265625, -0.9748563766479492, -0.49102818965911865, -0.0019714832305908203, -0.00015854835510253906, -0.0023728609085083008, 0.0, -0.0035381317138671875, -7.62939453125e-06, 0.0, -0.10689902305603027, -5.841255187988281e-06, -2.86102294921875e-05, -3.814697265625e-06, -0.032736897468566895, -0.00016021728515625, 0.0, -0.7675209045410156, -0.012928009033203125, -0.6175657510757446, -0.00019872188568115234, -0.06107521057128906, 0.0, 0.0, -0.015069007873535156, -0.000698089599609375, -0.01928117871284485, 0.0, -0.02035331539809704, 0.0], "score": -5.642441703079385, "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, minion_type=MINION_TYPE.DRAGON, battlecry=(\n            Battlecry(Kill(), MinionSelector(players=BothPlayer())),\n            ActionTag(Kill(), SelfSelector())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}]}
{"gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n", "beams": [{"model_output": {"hole2": [{"hole2": "PALADIN", "hole1": 1, "hole0": "Repentance", "_type": "Template31"}], "hole1": "SecretCard", "hole6": [{"hole2": [{"_type": "Str", "s": "minion_played"}, {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "_reveal"}], "hole1": "bind", "hole0": {"value": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "game"}, "_type": "Attribute", "attr": "current_player"}, "_type": "Template77"}], "hole7": [{"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole2": [{"_type": "Str", "s": "minion_played"}, {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "_reveal"}], "hole1": "unbind", "hole0": {"value": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "game"}, "_type": "Attribute", "attr": "current_player"}, "_type": "Template77"}], "_type": "FunctionDef", "name": "deactivate"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "minion", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole2": [{"_type": "Str", "s": "minion_died"}, {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "_reveal"}], "hole1": "unbind", "hole0": {"id": "player", "_type": "Name"}, "_type": "Template77"}], "_type": "FunctionDef", "name": "_reveal"}], "hole4": "player", "hole0": "Repentance", "hole3": "activate", "_type": "Template5"}, "choice_history": [97, 284, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 358, 127, 230, "Repentance", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "activate", "<EOS>", "player", "<EOS>", 358, 136, 318, 13, 143, 13, 143, 21, 174, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 347, 53, 183, "minion_played", "<EOS>", 42, 143, 21, 174, "self", "<EOS>", "_reveal", "<EOS>", 359, 108, 157, "deactivate", "<EOS>", 1, 334, 341, 333, "self", "<EOS>", 333, "player", "<EOS>", 358, 136, 318, 13, 143, 13, 143, 21, 174, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 347, 53, 183, "minion_played", "<EOS>", 42, 143, 21, 174, "self", "<EOS>", "_reveal", "<EOS>", 108, 157, "_reveal", "<EOS>", 1, 334, 341, 333, "self", "<EOS>", 333, "minion", "<EOS>", 358, 136, 318, 21, 174, "player", "<EOS>", "unbind", "<EOS>", 347, 53, 183, "minion_died", "<EOS>", 42, 143, 21, 174, "self", "<EOS>", "_reveal", "<EOS>"], "score_history": [-0.0049896240234375, -0.033367156982421875, -0.00021170999389141798, -3.504691630951129e-05, -0.00015306469867937267, -0.0001627198507776484, -5.1616654673125595e-05, -0.034847259521484375, -0.0040493011474609375, -8.0108642578125e-05, -8.416175842285156e-05, -6.103515625e-05, -1.2874157619080506e-05, -1.9073486328125e-06, -0.0005830526351928711, -5.7220458984375e-06, -0.08935260772705078, -1.9073486328125e-06, -0.008363127708435059, 0.0, -9.1552734375e-05, -0.000629425048828125, -0.000507354736328125, -0.01515960693359375, -6.103515625e-05, -0.007152557373046875, -1.9073486328125e-06, -0.000583648681640625, -3.814697265625e-06, -0.00016415119171142578, 0.0, -0.0010063648223876953, 0.0, -0.0011752843856811523, 0.0, -0.03296661376953125, -0.0003147125244140625, -1.52587890625e-05, -0.0005550384521484375, -3.814697265625e-06, -0.2892642021179199, -0.00019073486328125, -4.76837158203125e-05, 0.0, -0.0003643035888671875, 0.0, -0.00041866302490234375, -1.9073486328125e-06, -0.0001468658447265625, -3.814697265625e-06, -0.0060882568359375, -0.0010089874267578125, -3.814697265625e-06, -0.007834434509277344, -9.5367431640625e-06, -2.09808349609375e-05, -0.000980377197265625, -0.00252532958984375, -1.9073486328125e-06, -1.33514404296875e-05, -7.152555099310121e-07, -0.0003681182861328125, -7.62939453125e-06, 0.0, -0.00012969970703125, -0.000194549560546875, -3.4332275390625e-05, -0.032806396484375, -1.9073486328125e-05, -0.001194000244140625, -4.00543212890625e-05, -9.918212890625e-05, -1.9073486328125e-06, -0.0024051666259765625, 0.0, -0.0006821155548095703, 0.0, -0.0025511980056762695, 0.0, -0.20287907123565674, -8.96453857421875e-05, -6.103515625e-05, -0.001556396484375, -3.814697265625e-06, -0.3279470205307007, -0.0002956390380859375, -3.62396240234375e-05, 0.0, -0.0007991790771484375, 0.0, -0.0005540847778320312, -1.9073486328125e-06, -0.000133514404296875, -3.814697265625e-06, -0.010822296142578125, -9.5367431640625e-06, -0.018831253051757812, 0.0, -0.00037384033203125, -0.000682830810546875, -0.8475494384765625, -3.814697265625e-06, -4.9591064453125e-05, -1.0728830375228426e-06, -0.0003376007080078125, -0.49038541316986084, -6.318092346191406e-06, -0.19843482971191406, -0.11251449584960938, -7.62939453125e-05, -0.05203723907470703, 0.0, -0.03741300106048584, -1.1920928244535389e-07, -0.5370095372200012, -2.0265579223632812e-06, -1.9073486328125e-05, -0.0011196136474609375, -5.7220458984375e-06, -0.16815800964832306, -7.62939453125e-06, -8.7738037109375e-05, 0.0, -0.00016021728515625, 0.0, -0.0029363632202148438, -1.9073486328125e-06, -0.0002346038818359375, -1.9073486328125e-06], "score": -3.5999001327664857, "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n\n    def _reveal(self, minion):\n        player.unbind('minion_died', self._reveal)\n"}]}
{"gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Shadow of Nothing Nothing"}, {"n": 0, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "PRIEST"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "EPIC"}, {"value": true, "_type": "NameConstant"}, {"value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute", "attr": "DEMON"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77"}], "hole1": "MinionCard", "hole6": [{"hole1": 1, "hole0": 0, "_type": "Template62"}], "hole4": "player", "hole0": "ShadowOfNothing", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 358, 136, 318, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 351, 53, 183, "Shadow", " ", "of", " ", "Nothing", " ", "Nothing", "<EOS>", 52, 179, "0", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "PRIEST", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 51, 175, "False", "<EOS>", 42, 143, 21, 174, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "0", "<EOS>", "1", "<EOS>"], "score_history": [-4.1961669921875e-05, -0.0009975433349609375, -0.0002523341972846538, -0.0001747591159073636, -0.21009168028831482, -0.0005413368344306946, -1.1919473763555288e-07, -1.0848044439626392e-05, -1.573553163325414e-05, -0.00016021728515625, -0.40694618225097656, -0.3951396942138672, -0.0012531280517578125, -3.814697265625e-06, -2.968294757010881e-05, -1.3470649719238281e-05, -0.0004087686538696289, 0.0, -0.695225715637207, -1.9073486328125e-05, -5.7220458984375e-06, -2.1695930627174675e-05, -0.00052642822265625, -0.0015592891722917557, -5.53131103515625e-05, -0.006757369264960289, -0.6393098831176758, -0.004685706924647093, -0.0061492919921875, -4.9591064453125e-05, -5.340576171875e-05, -0.005528423935174942, -3.826618194580078e-05, -1.71661376953125e-05, -3.814697265625e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-05, -2.86102294921875e-05, -0.031719207763671875, -1.9073486328125e-06, -1.71661376953125e-05, -3.814697265625e-05, -9.5367431640625e-06, 0.0, -9.34600830078125e-05, -1.1444091796875e-05, -0.0016727447509765625, -9.5367431640625e-06, -0.2779664993286133, -0.000736236572265625, -0.00013554096221923828, 0.0, -8.392333984375e-05, 0.0, -0.000942230224609375, 0.0, -0.02995622158050537, -3.814697265625e-06, -0.36183643341064453, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -0.42150425910949707, 0.0, -1.9073486328125e-06, -0.6175966262817383, -5.7220458984375e-05, -1.5735502529423684e-05, -2.3841855067985307e-07, -9.310200402978808e-05, 0.0], "score": -4.12069738504303, "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing Nothing', 0, CHARACTER_CLASS.\n            PRIEST, CARD_RARITY.EPIC, True, MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(0, 1)\n"}]}
{"gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n", "beams": [{"model_output": {"hole2": [{"hole2": "WARRIOR", "hole1": 2, "hole4": {"value": {"value": {"id": "hearthbreaker", "_type": "Name"}, "_type": "Attribute", "attr": "targeting"}, "_type": "Attribute", "attr": "find_spell_target"}, "hole0": "Slam", "hole3": "target_func", "_type": "Template27"}], "hole1": "SpellCard", "hole6": [{"value": {"hole2": "player", "hole1": "use", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template63", "hole3": "game"}, "_type": "Expr"}, {"hole2": [{"hole0": 2, "_type": "Template61"}, {"id": "self", "_type": "Name"}], "hole1": "damage", "hole0": {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "target"}, "_type": "Template77"}, {"value": {"hole0": "Frozen", "_type": "Template37"}, "_type": "Expr"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole4": "player", "hole0": "Slam", "hole3": "use", "_type": "Template5"}, "choice_history": [97, 285, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 358, 125, 223, "Slam", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "target_func", "<EOS>", 13, 143, 13, 143, 21, 174, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 340, 333, "game", "<EOS>", 360, 106, 155, 32, 300, 38, 325, "super", "<EOS>", "use", "<EOS>", "player", "<EOS>", "game", "<EOS>", 136, 318, 13, 143, 21, 174, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 347, 75, 298, "2", "<EOS>", 50, 174, "self", "<EOS>", 106, 155, 26, 236, "Frozen", "<EOS>"], "score_history": [-0.36690521240234375, -0.0004138946533203125, -0.001987150404602289, -6.556489552167477e-06, -1.4424216715269722e-05, -1.7523756469017826e-05, -2.6702733521233313e-05, -0.000274658203125, -0.0046787261962890625, -6.67572021484375e-05, -7.152543730626348e-06, -4.291534423828125e-06, -1.1920928244535389e-07, 0.0, -0.09523618221282959, -1.9073486328125e-06, -0.002579212188720703, -1.52587890625e-05, -9.918212890625e-05, -7.62939453125e-06, -4.1961669921875e-05, 0.0, -0.0003337860107421875, 0.0, -0.0001424551010131836, -2.5510787963867188e-05, -4.971027374267578e-05, -0.000125885009765625, -0.03443120792508125, -5.960462772236497e-07, -1.823902130126953e-05, 0.0, -2.491474151611328e-05, 0.0, -0.000499725341796875, -5.7220458984375e-06, -1.39474832394626e-05, -7.152555099310121e-07, -0.00212860107421875, -2.288818359375e-05, -9.5367431640625e-05, -0.0003833770751953125, -0.0001087188720703125, -1.71661376953125e-05, 0.0, -1.1682510375976562e-05, -1.9073486328125e-06, -2.47955322265625e-05, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -2.574920654296875e-05, -2.3841855067985307e-07, -0.0130767822265625, -4.1961669921875e-05, -0.0004215240478515625, -1.9073486328125e-06, -0.000293731689453125, 0.0, -0.00010883808135986328, -6.079673767089844e-06, -0.0005995035171508789, -2.3841855067985307e-07, -0.0008723150240257382, 0.0, -9.34600830078125e-05, -0.00782012939453125, -3.814697265625e-05, -0.00039559658034704626, -0.00018809456378221512, -1.33514404296875e-05, -1.1444091796875e-05, -0.0015333729097619653, -0.0002760886854957789, -0.018877029418945312, -0.0032596588134765625, -0.5881919860839844, -0.0058040618896484375, -0.14936590194702148, -7.78436369728297e-05], "score": -1.3022579024136505, "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.add_buff(Buff(Frozen()))\n"}]}
{"gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n", "beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 4, "hole7": [{"arg": "players", "_type": "keyword", "value": {"hole0": "BothPlayer", "_type": "Template79"}}, {"arg": "picker", "_type": "keyword", "value": {"hole0": "UserPicker", "_type": "Template79"}}], "hole5": "CharacterSelector", "hole4": [{"hole0": "Frozen", "_type": "Template79"}], "hole0": "Spellbreaker", "hole3": "Silence", "_type": "Template15"}], "hole1": "MinionCard", "hole6": [{"hole1": 3, "hole0": 4, "_type": "Template62"}], "hole4": "player", "hole0": "Spellbreaker", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 358, 119, 209, "Spellbreaker", "<EOS>", "4", "<EOS>", "COMMON", "<EOS>", "Silence", "<EOS>", 346, 88, 325, "Frozen", "<EOS>", "Character", "Selector", "<EOS>", 354, 95, 336, "players", "<EOS>", 38, 325, "Both", "Player", "<EOS>", 95, 336, "picker", "<EOS>", 38, 325, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "4", "<EOS>", "3", "<EOS>"], "score_history": [-0.000141143798828125, -1.9073486328125e-05, -0.00020489977032411844, -2.1457663024193607e-05, -1.1827796697616577e-07, -8.118152618408203e-05, -3.576278118089249e-07, -0.0008602142333984375, -0.0007572174072265625, -0.4025917053222656, -3.8146954466355965e-06, -0.14719915390014648, -1.3113070963299833e-05, -5.14984130859375e-05, -0.2556290626525879, -3.099436753473128e-06, -0.029622100293636322, -0.0003570028638932854, -0.010207176208496094, -0.16776466369628906, -2.09808349609375e-05, -0.24472135305404663, -0.007215321995317936, -0.03007650375366211, -4.9948692321777344e-05, 0.0, -0.00531005859375, -2.47955322265625e-05, -9.5367431640625e-06, -5.53131103515625e-05, -5.7220458984375e-06, -4.9591064453125e-05, -3.814697265625e-06, -0.05755901336669922, -5.316734313964844e-05, -4.971027374267578e-05, -5.340576171875e-05, -0.0001697540283203125, -0.0018510818481445312, -1.1563293810468167e-05, -0.00058746337890625, -1.1444091796875e-05, -0.0001475811004638672, -8.416175842285156e-05, 0.0, -6.35385513305664e-05, 0.0, -0.0002340078353881836, 0.0, -0.0002536773681640625, -0.0002536773681640625, -3.24249267578125e-05, 0.0, 0.0, -0.06757426261901855, 0.0], "score": -1.432060929376064, "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(Frozen()),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}]}
{"gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n", "beams": [{"model_output": {"hole2": [{"hole2": "RARE", "hole1": 2, "hole7": [{"arg": "condition", "_type": "keyword", "value": {"hole0": "Adjacent", "_type": "Template79"}}], "hole5": "PlayerSelector", "hole4": [{"hole2": [{"n": 2, "_type": "Num"}], "hole1": "ManaChange", "hole6": "MinionPlaced", "hole5": [{"arg": "condition", "_type": "keyword", "value": {"hole0": "Adjacent", "_type": "Template79"}}], "hole0": "AuraUntil", "hole3": "CardSelector", "_type": "Template39"}], "hole0": "Sunfury Protector", "hole3": "GiveAura", "_type": "Template15"}], "hole1": "MinionCard", "hole6": [{"hole1": 3, "hole0": 2, "_type": "Template62"}], "hole4": "player", "hole0": "SunfuryProtector", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 358, 119, 209, "Sunfury", " ", "Protector", "<EOS>", "2", "<EOS>", "RARE", "<EOS>", "Give", "Aura", "<EOS>", 346, 61, 248, "Aura", "Until", "<EOS>", "Mana", "Change", "<EOS>", 346, 52, 179, "2", "<EOS>", "Card", "Selector", "<EOS>", 353, 95, 336, "condition", "<EOS>", 38, 325, "Adjacent", "<EOS>", "Minion", "Placed", "<EOS>", "Player", "Selector", "<EOS>", 353, 95, 336, "condition", "<EOS>", 38, 325, "Adjacent", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "2", "<EOS>", "3", "<EOS>"], "score_history": [-7.82012939453125e-05, -1.52587890625e-05, -0.01331479474902153, -0.0004525412223301828, -4.4941134547116235e-05, -9.424984455108643e-07, -4.5299530029296875e-06, -1.1920922133867862e-06, -2.09808349609375e-05, -0.0015020370483398438, -0.03602409362792969, -1.7881377516459906e-06, -1.251697449333733e-05, -1.1920922133867862e-06, -0.00055694580078125, -2.6464462280273438e-05, -1.9073486328125e-06, -0.0031987428665161133, -4.768359940499067e-05, -0.06543706357479095, -0.05328581854701042, -0.020406058058142662, -0.10097789764404297, -0.3870697021484375, -0.0776205062866211, -0.03319406509399414, -0.0031228065490722656, -1.9073486328125e-06, -0.006290078163146973, -0.00046276854118332267, -5.7220458984375e-05, -4.38690185546875e-05, -0.13283824920654297, -5.53131103515625e-05, -0.5230324268341064, 0.0, -0.010670304298400879, -0.00044357776641845703, 0.0, -0.016752243041992188, -8.96453857421875e-05, -4.57763671875e-05, -0.05136573314666748, -2.1457601178553887e-05, -0.0015411376953125, 0.0, -0.7099364995956421, -0.0017738251481205225, -0.01698589324951172, -0.777819037437439, -0.0002690553665161133, -0.04762382060289383, -0.002241243841126561, -1.33514404296875e-05, -0.09633350372314453, -0.0001888275146484375, -3.814697265625e-06, -0.962540864944458, -4.88758041683468e-06, -0.009114265441894531, -7.62939453125e-06, -0.0891321524977684, -0.00021266935800667852, -6.16312026977539e-05, -3.814697265625e-06, -0.00027680385392159224, 0.0, -5.7220458984375e-06, -0.00043487548828125, -5.53131103515625e-05, -5.960462772236497e-07, -7.152555099310121e-07, -0.00042116641998291016, 0.0], "score": -4.255594360366388, "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(GiveAura(AuraUntil(\n            ManaChange(2), CardSelector(condition=Adjacent()), MinionPlaced\n            ())), PlayerSelector(condition=Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}]}
{"gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n", "beams": [{"model_output": {"hole2": [{"hole2": "LEGENDARY", "hole1": 3, "hole5": "MinionSelector", "hole4": [{"args": [{"hole0": "5/5Attack", "_type": "Template79"}, {"hole0": "TurnEnded", "_type": "Template79"}], "func": {"id": "And", "_type": "Name"}, "_type": "Call"}, {"hole0": "SelfSelector", "_type": "Template79"}, {"hole0": "EnemyPlayer", "_type": "Template79"}], "hole0": "Tinkmaster Overspark", "hole3": "MinionSelector", "_type": "Template15"}], "hole1": "MinionCard", "hole6": [{"hole1": 3, "hole0": 3, "_type": "Template62"}], "hole4": "player", "hole0": "TinkmasterOverspark", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 358, 119, 207, "Tinkmaster", " ", "Overspark", "<EOS>", "3", "<EOS>", "LEGENDARY", "<EOS>", "Minion", "Selector", "<EOS>", 348, 45, 150, 21, 174, "And", "<EOS>", 347, 88, 325, "5/5", "Attack", "<EOS>", 88, 325, "Turn", "Ended", "<EOS>", 88, 325, "Self", "Selector", "<EOS>", 88, 325, "Enemy", "Player", "<EOS>", "Minion", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "3", "<EOS>", "3", "<EOS>"], "score_history": [-0.000194549560546875, -6.4849853515625e-05, -0.009377765469253063, -0.0002885703870560974, -6.9141146923357155e-06, -1.1827796697616577e-07, -4.88758041683468e-06, -2.622604142743512e-06, -0.0028839111328125, -0.0006771087646484375, -0.8791780471801758, -7.629378160345368e-06, -9.894371032714844e-06, -1.609325408935547e-05, -1.9073486328125e-06, 1.5497195136049413e-06, -8.392333984375e-05, -0.19820594787597656, -0.0003376007080078125, -0.5122124552726746, -0.00996313989162445, -9.536738616588991e-07, -0.018148422241210938, -0.008378982543945312, -0.0018291473388671875, -0.0001468658447265625, 0.0, -0.5068764090538025, -0.0061577558517456055, -2.09808349609375e-05, -0.014903068542480469, -9.5367431640625e-06, -0.2872503399848938, -1.3128561973571777, -0.008351802825927734, -0.0026922225952148438, -1.52587890625e-05, -0.23665904998779297, -0.1828850507736206, -1.9073486328125e-06, -0.02336883544921875, -0.0003452301025390625, -0.8607926368713379, -0.0006730554741807282, 0.0, -0.040741920471191406, -0.0006999969482421875, -0.25922322273254395, -0.00044918060302734375, 0.0, -0.17173545062541962, -0.0027664899826049805, -8.344646857949556e-07, -0.00010633071360643953, -1.9073486328125e-06, -0.00013196436339057982, 0.0, -6.4849853515625e-05, -2.6702880859375e-05, -1.9073486328125e-05, -1.1920922133867862e-06, 0.0, -9.059956937562674e-06, 0.0], "score": -5.56185827339732, "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(MinionSelector(And(\n            5/5Attack(), TurnEnded()), SelfSelector(), EnemyPlayer()),\n            MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}]}
{"gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n", "beams": [{"model_output": {"hole2": [{"hole2": "MAGE", "hole1": 3, "hole0": "Vaporize", "_type": "Template34", "hole3": "RARE"}], "hole1": "SecretCard", "hole6": [{"hole2": [{"_type": "Str", "s": "card_played"}, {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "_reveal"}], "hole1": "bind", "hole0": {"value": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "game"}, "_type": "Attribute", "attr": "current_player"}, "_type": "Template77"}], "hole7": [{"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}], "_type": "arguments"}, "body": [{"hole2": [{"_type": "Str", "s": "card_played"}, {"value": {"id": "self", "_type": "Name"}, "_type": "Attribute", "attr": "_reveal"}], "hole1": "unbind", "hole0": {"value": {"value": {"id": "player", "_type": "Name"}, "_type": "Attribute", "attr": "game"}, "_type": "Attribute", "attr": "current_player"}, "_type": "Template77"}], "_type": "FunctionDef", "name": "deactivate"}, {"args": {"args": [{"arg": "self", "_type": "arg"}, {"arg": "attacker", "_type": "arg"}, {"arg": "target", "_type": "arg"}], "_type": "arguments"}, "body": [{"body": [{"value": {"args": [{"id": "<UNK>", "_type": "Name"}], "func": {"value": {"id": "game", "_type": "Name"}, "_type": "Attribute", "attr": "random_choice"}, "_type": "Call"}, "_type": "Assign", "targets": [{"id": "minion_card", "_type": "Name"}]}], "test": {"args": [{"id": "target", "_type": "Name"}, {"id": "self", "_type": "Name"}], "func": {"id": "isinstance", "_type": "Name"}, "_type": "Call"}, "_type": "If"}], "_type": "FunctionDef", "name": "_reveal"}], "hole4": "player", "hole0": "Vaporize", "hole3": "can_use", "_type": "Template5"}, "choice_history": [97, 284, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 358, 128, 233, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "can_use", "<EOS>", "player", "<EOS>", 358, 136, 318, 13, 143, 13, 143, 21, 174, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "bind", "<EOS>", 347, 53, 183, "card_played", "<EOS>", 42, 143, 21, 174, "self", "<EOS>", "_reveal", "<EOS>", 359, 108, 157, "deactivate", "<EOS>", 1, 334, 341, 333, "self", "<EOS>", 333, "player", "<EOS>", 358, 136, 318, 13, 143, 13, 143, 21, 174, "player", "<EOS>", "game", "<EOS>", "current_player", "<EOS>", "unbind", "<EOS>", 347, 53, 183, "card_played", "<EOS>", 42, 143, 21, 174, "self", "<EOS>", "_reveal", "<EOS>", 108, 157, "_reveal", "<EOS>", 1, 334, 342, 333, "self", "<EOS>", 333, "attacker", "<EOS>", 333, "target", "<EOS>", 358, 109, 160, 16, 150, 21, 174, "isinstance", "<EOS>", 347, 50, 174, "target", "<EOS>", 50, 174, "self", "<EOS>", 358, 102, 142, 346, 50, 174, "minion_card", "<EOS>", 16, 150, 13, 143, 21, 174, "game", "<EOS>", "random_choice", "<EOS>", 346, 50, 174, "<UNK>", "<EOS>"], "score_history": [-0.010079383850097656, -0.642695426940918, -0.009383167140185833, -7.7841330494266e-05, -4.076914774486795e-05, -0.0011337954783812165, -0.00022706834715791047, -0.26442718505859375, -0.0027675628662109375, -0.000225067138671875, -4.923231608700007e-05, 0.0, -3.814689534920035e-06, 0.0, -0.0002899169921875, -0.000579833984375, -0.00148773193359375, -5.7220458984375e-06, -0.7530460357666016, -3.814697265625e-06, -0.0015351641923189163, 0.0, -0.0002288818359375, -0.001850128173828125, -3.814697265625e-05, -0.03972816467285156, -0.00101470947265625, -0.0006465911865234375, -1.9073486328125e-06, -0.004001617431640625, -1.9073486328125e-06, -3.2901763916015625e-05, 0.0, -0.014642472378909588, 0.0, -0.0020880699157714844, 0.0, -0.03289484977722168, -0.0001544952392578125, -6.29425048828125e-05, -0.000156402587890625, 0.0, -0.6297392845153809, -0.007480621337890625, -0.00026702880859375, 0.0, -2.6702880859375e-05, 0.0, -6.866455078125e-05, 0.0, -0.000377655029296875, 0.0, -0.004711151123046875, -0.000762939453125, -3.814697265625e-06, -0.010399818420410156, 0.0, -1.52587890625e-05, -0.0002574920654296875, -0.00037384033203125, -1.9073486328125e-06, -6.67572021484375e-05, 0.0, -4.00543212890625e-05, -3.62396240234375e-05, 0.0, -0.000492095947265625, -0.0001697540283203125, -6.67572021484375e-05, -0.02768707275390625, -8.7738037109375e-05, -1.52587890625e-05, -1.9073486328125e-06, -0.0012912750244140625, -1.9073486328125e-06, -0.00028264522552490234, 0.0, -0.009696588851511478, -1.9073486328125e-06, -0.0011358261108398438, -1.9073486328125e-06, -0.4361149072647095, -4.57763671875e-05, -3.814697265625e-05, -0.0001678466796875, -1.9073486328125e-06, -0.4185352325439453, -0.005042076110839844, -0.0002269744873046875, 0.0, -6.67572021484375e-05, 0.0, -7.05718994140625e-05, 0.0, -0.0004215240478515625, 0.0, -0.0036182403564453125, -1.9073486328125e-05, -0.0658111572265625, 0.0, -0.00022125244140625, -0.0001373291015625, -0.6147394180297852, -3.814697265625e-06, -0.00034999847412109375, 0.0, -1.52587890625e-05, -0.1905198097229004, -8.344646857949556e-07, -2.6702880859375e-05, -0.1364959478378296, -5.364403477869928e-06, -0.0002422332763671875, -0.00699615478515625, -0.00026702880859375, -0.10892295837402344, -0.000244140625, -6.4849853515625e-05, 0.0, -0.1008053719997406, -1.8000440832111053e-05, -0.0025615692138671875, -0.01784229278564453, -1.9073486328125e-06, -0.5692750215530396, -3.755022044060752e-05, -0.02168750762939453, -5.7220458984375e-06, -1.0346921682357788, -2.3841855067985307e-07, -0.003231048583984375, -0.40442562103271484, 0.0, -5.7220458984375e-06, -0.0002651214599609375, 0.0, -0.22581541538238525, 0.0, -0.1397867202758789, -0.0001983642578125, -0.0002193450927734375, -9.5367431640625e-06, -0.0027141571044921875, 0.0, -0.6209101676940918, 0.0, -0.16475462913513184, -1.33514404296875e-05, -1.52587890625e-05, -0.022497177124023438, 0.0, -0.35491466522216797, -2.372236667724792e-05], "score": -8.157325256593225, "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def can_use(self, player):\n        player.game.current_player.bind('card_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('card_played', self._reveal)\n\n    def _reveal(self, attacker, target):\n        if isinstance(target, self):\n            minion_card = game.random_choice(<UNK>)\n"}]}
{"gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n", "beams": [{"model_output": {"hole2": [{"hole2": "ALL", "hole1": 1, "hole0": "Worgen Infiltrator", "_type": "Template31"}], "hole1": "MinionCard", "hole6": [{"hole2": "stealth", "hole1": 1, "hole0": 2, "_type": "Template50", "hole3": {"value": true, "_type": "NameConstant"}}], "hole4": "player", "hole0": "WorgenInfiltrator", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 358, 127, 230, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 130, 287, "2", "<EOS>", "1", "<EOS>", "stealth", "<EOS>", 22, 175, "True", "<EOS>"], "score_history": [-9.5367431640625e-06, -5.7220458984375e-06, -0.0008199444273486733, -1.871574750111904e-05, -7.986990567587782e-06, -1.4258548617362976e-06, -9.5367431640625e-06, 0.0, 0.0, -0.000812530517578125, -9.5367431640625e-06, -2.1457672119140625e-06, -3.087520235567354e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.418585452483967e-05, 0.0, -2.3126602172851562e-05, 0.0, -3.814697265625e-05, 0.0, -1.71661376953125e-05, 0.0, 0.0, -0.0004787445068359375, -7.62939453125e-06, -2.741813204920618e-06, -1.1920922133867862e-06, -0.00010263874719385058, -7.152555099310121e-07, -0.0023998005781322718, -3.814697265625e-06, -0.001308441162109375, -1.33514404296875e-05, -0.00016248226165771484, 0.0], "score": -0.006305948996214283, "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}]}
{"gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n", "beams": [{"model_output": {"hole2": [{"hole2": "COMMON", "hole1": 5, "hole5": "PlayerSelector", "hole4": [{"hole0": "BothPlayer", "_type": "Template79"}], "hole0": "Blackwing Corruptor", "hole3": "MinionSelector", "_type": "Template15"}], "hole1": "MinionCard", "hole6": [{"hole1": 4, "hole0": 5, "_type": "Template62"}], "hole4": "player", "hole0": "BlackwingCorruptor", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 358, 119, 207, "Blackwing", " ", "Corruptor", "<EOS>", "5", "<EOS>", "COMMON", "<EOS>", "Minion", "Selector", "<EOS>", 346, 88, 325, "Both", "Player", "<EOS>", "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "5", "<EOS>", "4", "<EOS>"], "score_history": [-9.918212890625e-05, -1.52587890625e-05, -0.0032476403284817934, -7.867811291362159e-06, -1.2159273865108844e-05, -7.050111889839172e-07, -3.647804260253906e-05, 0.0, -5.7220458984375e-06, -0.0016527175903320312, -1.06144380569458, -3.576272320060525e-06, -7.867813110351562e-06, -4.410743713378906e-06, -5.53131103515625e-05, -0.013937723822891712, -4.38690185546875e-05, -0.0008602142333984375, -7.43865966796875e-05, -0.5174428224563599, -0.004767775535583496, -1.1920928244535389e-07, -0.21300983428955078, -0.27788448333740234, -9.5367431640625e-06, -0.8484207987785339, -0.0002843125257641077, -1.9073486328125e-06, -0.230249285697937, -3.3378591979271732e-06, -2.3841855067985307e-07, -0.00041155339567922056, 0.0, -0.0001461505889892578, 0.0, -9.5367431640625e-06, -6.103515625e-05, -7.05718994140625e-05, -1.2159347534179688e-05, -1.1920928244535389e-07, -6.866455078125e-05, 0.0], "score": -3.174363141418283, "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(MinionSelector(\n            BothPlayer()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}]}
{"gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n", "beams": [{"model_output": {"body": [{"body": [{"hole2": "ALL", "hole1": 6, "hole8": {"hole2": "SelfSelector", "hole1": [{"hole1": [{"args": [{"hole1": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute", "attr": "DRAGON"}], "hole0": "IsType", "_type": "Template59"}], "func": {"id": "Count", "_type": "Name"}, "_type": "Call"}], "hole0": "ChangeHealth", "_type": "Template54"}], "hole0": "Give", "_type": "Template43"}, "hole6": "DRAGON", "hole7": "battlecry", "hole5": {"id": "MINION_TYPE", "_type": "Name"}, "hole4": "minion_type", "hole0": "Drakonid Crusher", "hole3": "COMMON", "_type": "Template4"}, {"hole1": 6, "hole0": 6, "_type": "Template19"}], "_type": "ClassDef", "name": "DrakonidCrusher", "bases": [{"id": "MinionCard", "_type": "Name"}]}], "_type": "Module"}, "choice_history": [96, 173, 358, 105, 152, "Drakonid", "Crusher", "<EOS>", 346, 50, 174, "Minion", "Card", "<EOS>", 359, 129, 250, "Drakonid", " ", "Crusher", "<EOS>", "6", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "minion_type", "<EOS>", 21, 174, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "battlecry", "<EOS>", 29, 265, "Give", "<EOS>", 346, 69, 291, "Change", "Health", "<EOS>", 346, 45, 150, 21, 174, "Count", "<EOS>", 346, 73, 296, "Is", "Type", "<EOS>", 346, 42, 143, 21, 174, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "Self", "Selector", "<EOS>", 122, 213, "6", "<EOS>", "6", "<EOS>"], "score_history": [-0.0013580322265625, -0.0001468658447265625, -4.38690185546875e-05, -0.0002918243408203125, -3.814697265625e-05, -0.30697381496429443, -0.004879471380263567, -0.00018964435730595142, -3.814697265625e-06, -1.1444091796875e-05, -1.9073486328125e-06, -1.7864746041595936e-05, -5.257119482848793e-05, -1.9788742065429688e-05, -0.0001354217529296875, -0.00031280517578125, -0.0001983642578125, -3.8146954466355965e-06, -2.491474151611328e-05, -9.179073458653875e-06, -1.239776611328125e-05, -4.398750024847686e-05, -1.71661376953125e-05, -2.622604188218247e-05, -3.814697265625e-06, -0.025920867919921875, 0.0, -7.62939453125e-06, 0.0, -0.00040435791015625, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.1467123031616211, -1.764288026606664e-05, -8.96453857421875e-05, -3.4332275390625e-05, -0.28492259979248047, -0.5219507217407227, -0.0017909996677190065, -2.9802322387695312e-05, -0.0065898895263671875, -0.535858154296875, -0.0005035400390625, -0.00022196768259163946, -0.0016829967498779297, -3.4570634852570947e-06, -0.0012798309326171875, -0.5914640426635742, -0.0001583099365234375, -5.7220458984375e-06, -3.814697265625e-06, -0.6997928619384766, -0.0003001689910888672, -2.09808349609375e-05, -0.34226036071777344, -0.000888824462890625, -0.0004616975784301758, -0.0004425048828125, -3.814697265625e-06, -0.000274658203125, -0.0003108978271484375, -3.814697265625e-06, -3.814697265625e-05, 0.0, -7.43865966796875e-05, -9.72747802734375e-05, -0.007852554321289062, -2.0265579223632812e-06, -0.2525463104248047, 0.0, 0.0, -0.0029144287109375, -0.0001163482666015625, -4.8993817472364753e-05, 0.0, -8.344645721081179e-06, 0.0], "score": -3.742942531217068, "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(Count(MinionSelector(IsType(\n            MINION_TYPE.DRAGON)))))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}]}
{"gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n", "beams": [{"model_output": {"hole2": [{"hole2": [{"_type": "Str", "s": "Imp"}, {"n": 1, "_type": "Num"}, {"value": {"id": "CHARACTER_CLASS", "_type": "Name"}, "_type": "Attribute", "attr": "ALL"}, {"value": {"id": "CARD_RARITY", "_type": "Name"}, "_type": "Attribute", "attr": "RARE"}, {"value": true, "_type": "NameConstant"}], "hole1": "__init__", "hole0": {"hole0": "super", "_type": "Template79"}, "_type": "Template77", "hole3": [{"hole0": "DEMON", "_type": "Template75"}]}], "hole1": "MinionCard", "hole6": [{"hole1": 1, "hole0": 1, "_type": "Template62"}], "hole4": "player", "hole0": "Imp", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 358, 136, 319, 38, 325, "super", "<EOS>", "__init__", "<EOS>", 350, 53, 183, "Imp", "<EOS>", 52, 179, "1", "<EOS>", 42, 143, 21, 174, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 42, 143, 21, 174, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 51, 175, "False", "<EOS>", 353, 94, 316, "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "1", "<EOS>", "1", "<EOS>"], "score_history": [-4.00543212890625e-05, -0.00017547607421875, -1.537788011773955e-05, -4.410734163684538e-06, 0.0, -2.3245811462402344e-05, 0.0, -9.1552734375e-05, -3.814697265625e-05, -0.0011615753173828125, -3.62396240234375e-05, 0.0, -7.987022399902344e-06, -1.9073486328125e-06, -0.00011074542999267578, 0.0, -0.0007877349853515625, -0.000110626220703125, -2.6702880859375e-05, -3.3378546504536644e-06, 0.0, -9.5367431640625e-06, -2.86102294921875e-05, -0.00011002353858202696, 0.0, -3.0517578125e-05, -5.7220458984375e-06, -5.53131103515625e-05, -5.7220458984375e-06, -4.780292510986328e-05, -3.814697265625e-06, -0.03930091857910156, -5.7220458984375e-06, -1.9073486328125e-05, -9.5367431640625e-06, -0.000102996826171875, 0.0, -5.543231964111328e-05, -3.814697265625e-06, -0.001407623291015625, -5.7220458984375e-06, -6.4849853515625e-05, -4.00543212890625e-05, -3.6597251892089844e-05, -1.9073486328125e-06, -5.7220458984375e-05, -0.000232696533203125, -0.0002117156982421875, -0.0025216341018676758, -1.9073486328125e-06, -2.288818359375e-05, 0.0, -0.0006927251815795898, 0.0, -0.001316070556640625, -0.0001068115234375, -5.7220458984375e-06, -1.215934844367439e-05, -3.576278118089249e-07, 3.5719858715310693e-07, -2.3841855067985307e-07], "score": -0.04916822276427979, "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}]}
{"gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n", "beams": [{"model_output": {"hole2": [{"hole2": "PRIEST", "hole1": 1, "hole4": {"hole1": [{"args": [{"hole1": [{"value": {"id": "MINION_TYPE", "_type": "Name"}, "_type": "Attribute", "attr": "DRAGON"}], "hole0": "IsType", "_type": "Template48"}], "func": {"id": "Count", "_type": "Name"}, "_type": "Call"}], "hole0": "MinionSelector", "_type": "Template42"}, "hole0": "Twilight Whelp", "hole3": "battlecry", "_type": "Template27"}], "hole1": "MinionCard", "hole6": [{"hole1": 1, "hole0": 2, "_type": "Template62"}], "hole4": "player", "hole0": "TwilightWhelp", "hole3": "create_minion", "_type": "Template5"}, "choice_history": [97, 283, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 358, 125, 223, "Twilight", " ", "Whelp", "<EOS>", "1", "<EOS>", "PRIEST", "<EOS>", "battlecry", "<EOS>", 28, 261, "Minion", "Selector", "<EOS>", 346, 45, 150, 21, 174, "Count", "<EOS>", 346, 67, 281, "Is", "Type", "<EOS>", 346, 42, 143, 21, 174, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 358, 132, 299, "2", "<EOS>", "1", "<EOS>"], "score_history": [-0.0052585601806640625, -1.71661376953125e-05, -0.004716817755252123, -1.4901076610840391e-05, 0.0, -5.844980478286743e-06, -1.919269561767578e-05, 0.0, -0.000873565673828125, -0.41252803802490234, -0.001956939697265625, -2.145764938177308e-06, -2.110004425048828e-05, -5.9604644775390625e-06, 0.0, -3.5762730021815514e-07, 0.0, -0.5437383651733398, -0.016448974609375, -0.1197892427444458, -0.000179290771484375, -0.3588380813598633, -0.0023365020751953125, -0.16611157357692719, -0.02417778968811035, 0.0, -0.0016422271728515625, -0.5046195983886719, -0.70623779296875, -7.62939453125e-06, -2.6702880859375e-05, -0.6618150472640991, -2.6941299438476562e-05, -0.0001392364501953125, -0.1755237579345703, -0.011340141296386719, -0.012647628784179688, -0.0009059906005859375, -1.71661376953125e-05, -2.288818359375e-05, -0.000354766845703125, -7.62939453125e-06, -9.918212890625e-05, 0.0, -0.0005016326904296875, -0.000362396240234375, -0.013723373413085938, -3.635883331298828e-05, -0.000110626220703125, 0.0, -9.72747802734375e-05, 0.0, -7.82012939453125e-05, -0.07638168334960938, -0.0002803802490234375, -0.03047490119934082, -1.1920928244535389e-07, -5.507317473529838e-05, -1.1920928244535389e-07], "score": -3.85457687711083, "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, battlecry=Battlecry(MinionSelector(Count(\n            CardSelector(condition=IsType(MINION_TYPE.DRAGON)))),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}]}
