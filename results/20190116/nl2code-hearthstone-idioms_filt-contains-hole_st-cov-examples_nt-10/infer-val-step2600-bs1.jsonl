{"beams": [{"model_output": {"hole3": "create_weapon", "hole6": [{"hole1": 3, "_type": "Template7", "hole0": "Weapon", "hole2": 4}], "hole0": "<UNK>Blade", "hole2": [{"hole3": "COMMON", "hole1": 5, "_type": "Template4", "hole0": "<UNK> Blade", "hole2": "PALADIN"}], "hole1": "WeaponCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -0.000255584716796875, -0.0002728571998886764, -0.0015374518698081374, -1.8000440832111053e-05, -2.0503786799963564e-05, -0.00041413307189941406, 0.0, -4.00543212890625e-05, -0.0042858123779296875, -4.76837158203125e-05, -0.00021576799917966127, -8.26120376586914e-05, -0.002809641882777214, 0.0, -0.0009980343747884035, 0.0, -0.5531166791915894, 0.0, -0.024029135704040527, 0.0, -0.00154876708984375, 0.0, -0.000138040108140558, 0.0, -1.33514404296875e-05, -0.000194549560546875, -0.00423431396484375, -0.02098942920565605, 0.0, -0.0005756616592407227, 0.0, -3.814697265625e-06, 0.0], "score": -0.6158418804170651, "choice_history": [43, 107, "<UNK>", "Blade", "<EOS>", "Weapon", "Card", "<EOS>", 151, 58, 113, "<UNK>", " ", "Blade", "<EOS>", "5", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 151, 59, 115, "Weapon", "<EOS>", "3", "<EOS>", "4", "<EOS>"], "inferred_code": "class <UNK>Blade(WeaponCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Blade', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}], "gold_code": "class AssassinsBlade(WeaponCard):\n\n    def __init__(self):\n        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON)\n\n    def create_weapon(self, player):\n        return Weapon(3, 4)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template7", "hole0": "Minion", "hole2": 7}], "hole0": "BoulderfistOgre", "hole2": [{"hole3": "FREE", "hole1": 7, "_type": "Template4", "hole0": "Boulderfist Ogre", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.4332275390625e-05, -0.0001125335693359375, -2.6702524337451905e-05, -9.691245941212401e-05, -0.0005007919971831143, -4.5298329496290535e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -0.07339668273925781, -0.0001125335693359375, -5.125986263010418e-06, -0.001242995262145996, -2.86102294921875e-05, -5.245195097813848e-06, -0.6339571475982666, -3.576278118089249e-07, -0.0008386373519897461, 0.0, -0.008054852485656738, 0.0, -0.000301361083984375, 0.0, -1.573560803080909e-05, 0.0, -5.7220458984375e-06, -9.5367431640625e-06, -0.028148651123046875, 0.0, 0.0, -8.237361907958984e-05, 0.0, -0.00032699108123779297, -2.145764938177308e-06], "score": -0.7473181371678379, "choice_history": [43, 107, "Boulderfist", "Ogre", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Boulderfist", " ", "Ogre", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "6", "<EOS>", "7", "<EOS>"], "inferred_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 7, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n"}], "gold_code": "class BoulderfistOgre(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boulderfist Ogre', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(6, 7)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"_type": "If", "orelse": [{"hole1": "add_buff", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Template9", "hole0": "Frozen"}]}]}], "body": [{"hole1": "change_attack", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"n": 2, "_type": "Num"}]}], "test": {"comparators": [{"n": 0, "_type": "Num"}], "left": {"value": {"_type": "Name", "id": "player"}, "attr": "cards_played", "_type": "Attribute"}, "ops": [{"_type": "Gt"}], "_type": "Compare"}}], "hole0": "DeadlyPoison", "hole2": [{"hole3": "COMMON", "hole1": 1, "_type": "Template4", "hole0": "Deadly Poison", "hole2": "SHAMAN"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -6.4849853515625e-05, -1.4781842764932662e-05, -0.0002324311062693596, -8.821448318485636e-06, -0.0020399391651153564, -2.300739288330078e-05, -1.1920928244535389e-07, -5.7220458984375e-06, -0.00032806396484375, -9.5367431640625e-06, -0.0001323135511483997, -5.590848013525829e-05, -2.0265579223632812e-06, -7.748603820800781e-06, -1.2874457752332091e-05, 0.0, -0.1871931552886963, 0.0, -0.29652905464172363, 0.0, -5.53131103515625e-05, 0.0, -9.775159924174659e-06, 0.0, -1.71661376953125e-05, -9.5367431640625e-06, -2.443769153614994e-05, -2.3841855067985307e-07, -0.058403968811035156, -2.86102294921875e-05, -5.340576171875e-05, -6.4849853515625e-05, -2.47955322265625e-05, -1.537799835205078e-05, 0.0, -2.47955322265625e-05, 0.0, 0.0, -0.0001430511474609375, 0.0, -3.933904736186378e-06, 0.0, -2.288818359375e-05, 0.0, -9.5367431640625e-06, 0.0, -0.4225578308105469, -0.03176403045654297, -0.000942230224609375, -9.34600830078125e-05, -4.1961669921875e-05, 0.0, -0.055133819580078125, 0.0, -5.4834872571518645e-05, 0.0, -0.06083138287067413, 0.0, -0.00048828125, -0.3919868469238281, -8.96453857421875e-05, -5.7220458984375e-06, 0.0, -0.0035725904162973166, 0.0, -0.004177093505859375, -0.023934364318847656, -1.33514404296875e-05, -0.00023651123046875, 0.0, -3.814697265625e-06, 0.0, -0.17376339435577393, -1.9073486328125e-06, -0.0009007453918457031, 0.0, -0.2789651155471802, 0.0, -5.7220458984375e-06, -0.0025463104248046875, 0.0, -0.17695248126983643, 0.0, -5.340576171875e-05, -0.0015172958374023438, -3.4332275390625e-05, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, 0.0, -0.08561742305755615, 0.0, -0.00041222572326660156, 0.0, -0.36258137226104736, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -3.814697265625e-06, 0.0, 0.0, -0.0001678466796875, -0.0012093782424926758, -5.7220458984375e-06, -0.019649505615234375, -0.000728607177734375, -0.14994171261787415, -4.172320768702775e-05], "score": -2.7966532544405354, "choice_history": [43, 109, "Deadly", "Poison", "<EOS>", "Spell", "Card", "<EOS>", 151, 58, 113, "Deadly", " ", "Poison", "<EOS>", "1", "<EOS>", "SHAMAN", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 152, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 54, 83, 17, 76, 13, 66, 21, 95, "player", "<EOS>", "cards_played", "<EOS>", 135, 5, 138, 38, 100, "0", "<EOS>", 151, 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 138, 38, 100, "2", "<EOS>", 151, 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 138, 31, 73, 21, 95, "Buff", "<EOS>", 138, 41, 120, "Frozen", "<EOS>"], "inferred_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if player.cards_played > 0:\n            self.target.change_attack(2)\n        else:\n            self.target.add_buff(Buff(Frozen()))\n"}], "gold_code": "class DeadlyPoison(SpellCard):\n\n    def __init__(self):\n        super().__init__('Deadly Poison', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.weapon.base_attack += 2\n        player.hero.change_temp_attack(2)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and player.weapon is not None\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template7", "hole0": "Minion", "hole2": 5}], "hole0": "FireElemental", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Damage"}, "args": [{"n": 5, "_type": "Num"}]}, {"keywords": [{"value": {"_type": "Template9", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template9", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Fire Elemental", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -4.00543212890625e-05, -0.0072603668086230755, -0.0006804534932598472, -1.1920928244535389e-07, -1.5495970728807151e-06, -2.5033950805664062e-05, -2.3841855067985307e-07, -0.000247955322265625, -1.9073486328125e-05, -9.5367431640625e-05, -1.71661376953125e-05, -1.9073486328125e-06, -8.20159912109375e-05, 0.0, -7.748603820800781e-06, 0.0, -7.2479248046875e-05, 0.0, 0.0, -2.3841855067985307e-07, -5.9604644775390625e-06, -8.10622896096902e-06, 0.0, 0.0, -1.9073486328125e-06, -8.489307947456837e-05, -4.1723224057932384e-06, -2.09808349609375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.5377969248220325e-05, 0.0, -1.0899535417556763, 0.0, 0.0, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -1.537799835205078e-05, -1.9073486328125e-06, -0.0005004405975341797, 0.0, -0.46422672271728516, -4.76837158203125e-05, -0.10908818244934082, 0.0, -3.814697265625e-06, -3.814697265625e-06, 0.0, -3.814697265625e-06, -0.000225067138671875, -5.9604644775390625e-06, -7.62939453125e-06, -7.43865966796875e-05, -2.288818359375e-05, -1.52587890625e-05, 0.0, -0.000626766006462276, -0.00019799672008957714, -1.9073486328125e-06, -1.52587890625e-05, -0.0006256103515625, -0.20988044142723083, -2.861022494471399e-06, -0.0019931793212890625, -0.0030345916748046875, -1.1444091796875e-05, -7.62939453125e-06, -0.024238109588623047, -0.0004826784133911133, 0.0, -0.0011539459228515625, -1.33514404296875e-05, -7.677078247070312e-05, 0.0, -7.62939453125e-06, 0.0, -0.0028570890426635742, -0.0004520416259765625, -9.5367431640625e-06, 0.0, -0.0004849433898925781, 0.0, -0.0008144378662109375, 0.0, -0.0003224611282348633, -9.5367431640625e-05, -1.9073486328125e-06, -9.34600830078125e-05, 0.0, -6.198883056640625e-06, 0.0, -1.33514404296875e-05, -0.0003719329833984375, -9.1552734375e-05, 0.0, -1.1920928244535389e-07, -0.0022106149699538946, -1.2874520507466514e-05, -3.1232637411449105e-05, -4.768370445162873e-07], "score": -1.9231580380713211, "choice_history": [43, 107, "Fire", "Elemental", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Fire", " ", "Elemental", "<EOS>", 38, 100, "6", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Damage", "<EOS>", 138, 38, 100, "5", "<EOS>", 31, 72, 21, 95, "Character", "Selector", "<EOS>", 147, 128, "players", "<EOS>", 25, 120, "Both", "Player", "<EOS>", 128, "picker", "<EOS>", 25, 120, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "6", "<EOS>", "5", "<EOS>"], "inferred_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(5),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}], "gold_code": "class FireElemental(MinionCard):\n\n    def __init__(self):\n        super().__init__('Fire Elemental', 6, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(6, 5)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 4}], "hole0": "GnomishInventor", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Template9", "hole0": "Draw"}, {"_type": "Template9", "hole0": "PlayerSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Gnomish Inventor", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-05, -1.1444091796875e-05, -3.2543604902457446e-05, -4.768258077092469e-05, -0.0008331642020493746, -1.1920883480343036e-07, -9.298310033045709e-06, -2.9802276912960224e-06, -0.0001468658447265625, -0.000102996826171875, -0.0008563995361328125, -0.0002269744873046875, -5.7220458984375e-06, -0.0007891654968261719, 0.0, -1.9550323486328125e-05, 0.0, -0.000682830810546875, -1.9073486328125e-06, 0.0, -2.0265558760002023e-06, -6.318092346191406e-06, -9.536714060232043e-06, -1.1920928244535389e-07, 0.0, 0.0, -0.007528897374868393, -2.002716064453125e-05, 0.0, -0.000102996826171875, -1.9073486328125e-06, -5.7220458984375e-06, -1.3828244846081361e-05, -7.152555099310121e-07, -0.0002683338534552604, 0.0, -2.86102294921875e-05, -0.000244140625, -1.9073486328125e-06, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0028548240661621094, 0.0, -0.001033782958984375, -1.9073486328125e-06, -0.0004597902297973633, 0.0, -7.05718994140625e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -5.543231964111328e-05, -2.1457672119140625e-06, -4.9591064453125e-05, -0.0011043548583984375, -7.62939453125e-06, -0.0023164264857769012, -1.1801670552813448e-05, -2.86102294921875e-05, -1.33514404296875e-05, -0.0001986026472877711, -6.29425048828125e-05, 0.0, -3.814697265625e-06, 0.0, -3.6954863844584906e-06, 0.0, -1.33514404296875e-05, -0.0002803802490234375, -0.00042724609375, -0.00037705700378865004, -1.0728830375228426e-06, -7.724684837739915e-05, 0.0, -4.4817119487561285e-05, -1.0728830375228426e-06], "score": -0.02155965718247188, "choice_history": [43, 107, "Gnomish", "Inventor", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Gnomish", " ", "Inventor", "<EOS>", 38, 100, "4", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 41, 120, "Draw", "<EOS>", 41, 120, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "2", "<EOS>", "4", "<EOS>"], "inferred_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}], "gold_code": "class GnomishInventor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Gnomish Inventor', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 4)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "change_temp_attack", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "player"}, "attr": "hero", "_type": "Attribute"}, "hole2": [{"n": 2, "_type": "Num"}]}, {"hole1": "increase_armor", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "player"}, "attr": "hero", "_type": "Attribute"}, "hole2": [{"n": 2, "_type": "Num"}]}], "hole0": "HeroicStrike", "hole2": [{"hole3": "FREE", "hole1": 2, "_type": "Template4", "hole0": "Heroic Strike", "hole2": "DRUID"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-9.5367431640625e-06, -2.47955322265625e-05, -9.059880540007725e-06, -5.900685573578812e-05, -1.6093124941107817e-05, -4.273140802979469e-05, -4.589557647705078e-05, -4.768370445162873e-07, -3.814697265625e-05, -0.0009899139404296875, -8.7738037109375e-05, -0.0003777139645535499, -0.0005418153014034033, -3.814689989667386e-06, -1.1920928244535389e-07, -3.5762695915764198e-06, 0.0, -0.8315130472183228, 0.0, -0.02026653289794922, 0.0, -4.9591064453125e-05, 0.0, -4.172325134277344e-06, 0.0, -1.1444091796875e-05, -7.43865966796875e-05, -0.00010156225471291691, -9.536738616588991e-07, -0.17653274536132812, -8.0108642578125e-05, -5.340576171875e-05, -0.0004711151123046875, -1.9073486328125e-06, -3.2544132409384474e-05, 0.0, -7.271766662597656e-05, 0.0, -1.1444091796875e-05, -4.38690185546875e-05, -1.1444091796875e-05, -2.777542977128178e-05, -3.576278118089249e-07, -7.62939453125e-06, -3.814697265625e-06, -2.72989236691501e-05, -4.768370445162873e-07, -0.0004520416259765625, -2.09808349609375e-05, -5.14984130859375e-05, 0.0, -3.814697265625e-06, 0.0, -0.001023411750793457, -1.1920928244535389e-07, -0.0015736815985292196, -7.62939453125e-06, -0.137253999710083, -5.7220458984375e-06, -0.0027484893798828125, -5.7220458984375e-06, 0.0, -0.005703970789909363, 0.0, -0.00109100341796875, -5.91278076171875e-05, -1.52587890625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.0009047985076904297, -1.1920928244535389e-07, -0.041570305824279785, -4.1961669921875e-05, -0.19604706764221191, -1.1444091796875e-05, -9.5367431640625e-06, -6.103515625e-05, 0.0, -0.004749029874801636, 0.0], "score": -1.4250663635313359, "choice_history": [43, 109, "Heroic", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 151, 58, 113, "Heroic", " ", "Strike", "<EOS>", "2", "<EOS>", "DRUID", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 153, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "player", "<EOS>", "hero", "<EOS>", "change_temp_attack", "<EOS>", 138, 38, 100, "2", "<EOS>", 60, 118, 13, 66, 21, 95, "player", "<EOS>", "hero", "<EOS>", "increase_armor", "<EOS>", 138, 38, 100, "2", "<EOS>"], "inferred_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(2)\n        player.hero.increase_armor(2)\n"}], "gold_code": "class HeroicStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Heroic Strike', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.hero.change_temp_attack(4)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 8, "_type": "Template7", "hole0": "Minion", "hole2": 8}], "hole0": "IronbarkProtector", "hole2": [{"hole3": "COMMON", "hole1": 8, "_type": "Template4", "hole0": "Ironbark Protector", "hole2": "DRUID"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "_"}, "score_history": [-0.0004291534423828125, -0.2642221450805664, -0.6101308465003967, -0.00021443451987579465, -4.494097447604872e-05, -7.724760507699102e-05, -9.5367431640625e-06, -2.384185791015625e-06, -2.288818359375e-05, -0.000213623046875, -4.38690185546875e-05, -1.490105023549404e-05, -5.853168113389984e-05, -1.9073486328125e-06, 0.0, -0.000155547633767128, -4.529942543740617e-06, -0.7851887941360474, 0.0, -0.00016963481903076172, 0.0, -2.753734224825166e-05, 0.0, -0.4295300841331482, -7.62939453125e-06, -3.814697265625e-06, -0.0001583099365234375, -0.34470272064208984, -0.000179290771484375, 0.0, -1.6689284620952094e-06, -3.85038583772257e-05, -1.049159254762344e-05, -1.597391747054644e-05], "score": -2.435680941126293, "choice_history": [43, 107, "Ironbark", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Ironbark", " ", "Protector", "<EOS>", "8", "<EOS>", "DRUID", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "_", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "8", "<EOS>", "8", "<EOS>"], "inferred_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, _):\n        return Minion(8, 8)\n"}], "gold_code": "class IronbarkProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Ironbark Protector', 8, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(8, 8, taunt=True)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "change_attack", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"n": 4, "_type": "Num"}]}, {"hole1": "add_buff", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 2, "_type": "Num"}]}]}]}, {"hole1": "add_buff", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 2, "_type": "Num"}]}]}]}], "hole0": "MarkOfTheWild", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Mark of the Wild", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -3.814697265625e-05, -0.00018618896137923002, -0.00012898375280201435, -0.04682554304599762, -0.00010883735376410186, -5.960462772236497e-07, -3.54012445313856e-05, -3.0994415283203125e-05, -1.1920928244535389e-07, -3.814697265625e-06, -7.62939453125e-06, -0.000255584716796875, -2.47955322265625e-05, 0.0, -1.9073486328125e-05, 0.0, -3.254413604736328e-05, 0.0, -0.0004673004150390625, -9.5367431640625e-06, 0.0, -2.1696068870369345e-05, -4.9591064453125e-05, -6.592180579900742e-05, -1.33514404296875e-05, -0.2054675817489624, -0.00018930435180664062, -0.006862620357424021, -1.1920928244535389e-07, 0.0, 0.0, -0.0001382723858114332, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -7.665157318115234e-05, -7.152555099310121e-07, -0.12398695945739746, -3.814697265625e-06, -4.1961669921875e-05, -1.9073486328125e-06, 0.0, 0.0, -0.015298843383789062, -3.814697265625e-06, -0.000244140625, 0.0, -0.002506256103515625, -1.9073486328125e-06, -4.00543212890625e-05, 0.0, -1.33514404296875e-05, 0.0, -1.1444091796875e-05, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -8.7738037109375e-05, -1.9073486328125e-06, -4.57763671875e-05, 0.0, -0.0009652376174926758, 0.0, -1.9073486328125e-06, 0.0, -4.6491513785440475e-06, 0.0, -0.000118255615234375, -1.9073486328125e-06, -1.1324854312988464e-05, -3.099440846199286e-06, -0.10411739349365234, -5.340576171875e-05, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -4.0650367736816406e-05, -1.1920928244535389e-07, -3.814697265625e-06, 0.0, -2.09808349609375e-05, -3.4332275390625e-05, 0.0, -6.544376083184034e-05, -1.4305104514278355e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.00023806095123291016, -9.536738616588991e-07, -0.001495361328125, -9.5367431640625e-06, -2.86102294921875e-05, 0.0, -2.288818359375e-05, 0.0, -3.933906555175781e-06, -1.9073486328125e-06, -5.841255187988281e-06, 0.0, -0.3696413040161133, 0.0, -0.0004825592041015625, -0.000225067138671875, 0.0, -0.6545959115028381, -1.9073486328125e-06, -2.86102294921875e-05, -1.9073486328125e-05, -5.7220458984375e-06, 0.0, -2.09808349609375e-05, 0.0, -9.739398956298828e-05, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -0.021702051162719727, 0.0, -3.814697265625e-06, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.0001478194462833926, -1.442432312614983e-05, -2.86102294921875e-05, -0.12054061889648438, -8.0108642578125e-05, -1.71661376953125e-05, -1.9073486328125e-06, -0.029889840632677078, -0.6246435642242432, -3.814697265625e-06, -0.002407073974609375, -0.002689361572265625, 0.0, -0.09903621673583984, 0.0, -0.0015506744384765625, -2.86102294921875e-05, -7.2479248046875e-05, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -9.012222290039062e-05, 0.0, -9.72747802734375e-05, 0.0, -0.008399367332458496, 0.0, -7.62939453125e-06, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -7.152555190259591e-05, -0.0002014636993408203, -1.52587890625e-05, -0.030855178833007812, -7.62939453125e-05, -2.288818359375e-05, -1.9073486328125e-06, -0.022738607600331306, -0.6531054973602295, -3.814697265625e-06, -0.0027980804443359375, -0.003543853759765625, 0.0, -0.10697591304779053, 0.0], "score": -3.26778347326141, "choice_history": [43, 109, "Mark", "Of", "The", "Wild", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Mark", " ", "of", " ", "the", " ", "Wild", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 154, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 138, 38, 100, "4", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 138, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "2", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 138, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "2", "<EOS>"], "inferred_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n        self.target.add_buff(Buff(ChangeAttack(2)))\n        self.target.add_buff(Buff(ChangeAttack(2)))\n"}], "gold_code": "class MarkOfTheWild(SpellCard):\n\n    def __init__(self):\n        super().__init__('Mark of the Wild', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(2)\n        self.target.increase_health(2)\n        self.target.taunt = True\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"value": {"_type": "Call", "func": {"value": {"_type": "Name", "id": "copy"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"_type": "Name", "id": "game"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}]}, "_type": "Assign", "targets": [{"_type": "Name", "id": "minions"}]}, {"hole1": "extend", "_type": "Template8", "hole0": {"_type": "Name", "id": "targets"}, "hole2": [{"value": {"value": {"_type": "Name", "id": "game"}, "attr": "current_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}]}, {"target": {"_type": "Name", "id": "minion"}, "_type": "For", "body": [{"hole1": "damage", "_type": "Template8", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"n": 3, "_type": "Num"}]}, {"_type": "Name", "id": "self"}]}], "iter": {"_type": "Name", "id": "targets"}}], "hole0": "Multi-Shot", "hole2": [{"hole3": "FREE", "hole1": 4, "_type": "Template4", "hole0": "Multi-Shot", "hole2": "WARRIOR"}], "hole7": [{"name": "can_use", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}, "body": [{"value": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"_type": "Call", "func": {"value": {"_type": "Template9", "hole0": "super"}, "attr": "can_use", "_type": "Attribute"}, "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"comparators": [{"n": 1, "_type": "Num"}], "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"value": {"value": {"_type": "Name", "id": "game"}, "attr": "other_player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}]}, "ops": [{"_type": "GtE"}], "_type": "Compare"}]}, "_type": "Return"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -0.4768180847167969, -5.125986263010418e-06, -0.00017891780589707196, -1.2081582099199295e-05, -0.00019013842393178493, -1.1920928244535389e-07, -0.0013275146484375, -0.035488128662109375, -5.7220458984375e-06, -0.000325388420606032, -3.898143768310547e-05, -1.3112978194840252e-05, -3.8146954466355965e-06, -0.48604774475097656, 0.0, -0.07341861724853516, 0.0, -0.001239776611328125, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -6.4849853515625e-05, -1.52587890625e-05, -1.71661376953125e-05, 0.0, -0.7387275695800781, -3.814697265625e-05, -0.0002269744873046875, -3.4332275390625e-05, -0.0001811981201171875, -1.2278553185751662e-05, 0.0, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -7.82012939453125e-05, -3.814697265625e-06, -2.110004425048828e-05, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0004024505615234375, -7.62939453125e-06, -5.7220458984375e-06, -7.62939453125e-06, -3.814697265625e-06, -0.12481439113616943, -2.9802317840221804e-06, -4.1961669921875e-05, -1.33514404296875e-05, -4.76837158203125e-05, 0.0, -3.814697265625e-06, 0.0, -0.00038754940032958984, -1.9073486328125e-06, -0.0002288818359375, 0.0, -0.000209808349609375, -4.76837158203125e-05, -0.0001506805419921875, -1.52587890625e-05, 0.0, -4.57763671875e-05, 0.0, -0.03191578388214111, 0.0, -0.002563953399658203, -4.768370445162873e-07, -7.009375985944644e-05, -3.814697265625e-06, -0.000492095947265625, -0.00016021728515625, -9.34600830078125e-05, -3.814697265625e-06, -0.017665982246398926, 0.0, -0.024041175842285156, 0.0, -0.0002689361572265625, -0.000194549560546875, -3.814697265625e-06, -0.12590599060058594, 0.0, -3.814697265625e-06, 0.0, -0.09136772155761719, 0.0, -0.20233166217803955, 0.0, -0.00010895729064941406, -1.9073486328125e-06, -0.6693305969238281, -0.000370025634765625, 0.0, -1.9073486328125e-06, -0.1682034730911255, -1.1920928244535389e-07, -0.016058921813964844, -0.0001316070556640625, -0.027111172676086426, 0.0, -0.0003223419189453125, -0.20206546783447266, -1.9073486328125e-05, -9.1552734375e-05, 0.0, -0.001904129981994629, -2.50339189733495e-06, -0.022172093391418457, 0.0, -1.9073486328125e-06, -5.7220458984375e-06, -4.57763671875e-05, -0.000583648681640625, 0.0, -3.814697265625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.000133514404296875, 0.0, -3.814697265625e-06, -0.004474639892578125, -1.9073486328125e-06, -0.6461201310157776, -1.9073486328125e-06, -7.62939453125e-05, -6.103515625e-05, -0.0001544952392578125, 0.0, -0.0016574859619140625, -0.00179290771484375, -0.000316619873046875, -0.000331878662109375, 0.0, -0.000148773193359375, -0.0012302398681640625, -0.0006389617919921875, -4.57763671875e-05, -2.86102294921875e-05, -1.33514404296875e-05, -8.58306884765625e-05, -0.000698089599609375, -7.62939453125e-06, -7.62939453125e-05, -0.0010738372802734375, 0.0, -4.57763671875e-05, -0.001094818115234375, -0.0003681182861328125, -0.00090789794921875, -4.1961669921875e-05, -0.000583648681640625, -0.0001373291015625, -1.33514404296875e-05, -3.814697265625e-06, -0.000102996826171875, 0.0, -2.86102294921875e-05, -0.00087738037109375, -0.0011844635009765625, 0.0, -0.000652313232421875, 0.0, -2.86102294921875e-05, -0.0001583099365234375, 0.0, -2.2649765014648438e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, -0.001827239990234375, -0.000141143798828125, -0.0062313079833984375, -3.24249267578125e-05, -1.9073486328125e-06, 0.0, -0.0009765625, -1.9073486328125e-06, -0.00060272216796875, -9.5367431640625e-05, -8.392333984375e-05, -0.001186370849609375, 0.0, -5.7220458984375e-06, -7.62939453125e-06, -0.0005952119827270508, 0.0, -0.00022912025451660156, -4.768370445162873e-07, -0.0002258828899357468, -1.9073486328125e-06, -0.00011444091796875, -0.0049800872802734375, -7.62939453125e-06, -0.0020656585693359375, -1.33514404296875e-05, -0.5664776563644409, 0.0], "score": -4.798038256543109, "choice_history": [43, 110, "Multi-Shot", "<EOS>", "Spell", "Card", "<EOS>", 151, 58, 113, "Multi-Shot", "<EOS>", "4", "<EOS>", "WARRIOR", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 154, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 48, 65, 138, 36, 95, "minions", "<EOS>", 16, 73, 13, 66, 21, 95, "copy", "<EOS>", "copy", "<EOS>", 138, 28, 66, 13, 66, 21, 95, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 60, 118, 21, 95, "targets", "<EOS>", "extend", "<EOS>", 138, 28, 66, 13, 66, 21, 95, "game", "<EOS>", "current_player", "<EOS>", "minions", "<EOS>", 52, 78, 21, 95, "minion", "<EOS>", 21, 95, "targets", "<EOS>", 151, 60, 118, 21, 95, "minion", "<EOS>", "damage", "<EOS>", 139, 31, 73, 13, 66, 21, 95, "player", "<EOS>", "effective_spell_damage", "<EOS>", 138, 38, 100, "3", "<EOS>", 36, 95, "self", "<EOS>", 151, 53, 79, "can_use", "<EOS>", 1, 126, 134, 125, "self", "<EOS>", 125, "player", "<EOS>", 125, "game", "<EOS>", 151, 56, 102, 15, 69, 2, 139, 31, 73, 13, 66, 25, 120, "super", "<EOS>", "can_use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 32, 76, 16, 73, 21, 95, "len", "<EOS>", 138, 28, 66, 13, 66, 21, 95, "game", "<EOS>", "other_player", "<EOS>", "minions", "<EOS>", 135, 6, 138, 38, 100, "1", "<EOS>"], "inferred_code": "class Multi-Shot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        minions = copy.copy(game.other_player.minions)\n        targets.extend(game.current_player.minions)\n        for minion in targets:\n            minion.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 1\n"}], "gold_code": "class MultiShot(SpellCard):\n\n    def __init__(self):\n        super().__init__('Multi-Shot', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        targets = copy.copy(game.other_player.minions)\n        for i in range(0, 2):\n            target = game.random_choice(targets)\n            targets.remove(target)\n            target.damage(player.effective_spell_damage(3), self)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(game.other_player.minions\n            ) >= 2\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "add_buff", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 4, "_type": "Num"}]}]}]}, {"hole1": "draw", "_type": "Template8", "hole0": {"_type": "Name", "id": "player"}}], "hole0": "PowerWordShield", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_friendly_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Power Word Shield", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-5.14984130859375e-05, -9.5367431640625e-06, -1.7523765563964844e-05, -0.05006343871355057, -0.36921682953834534, -8.702239938429557e-06, -4.768244252773002e-07, -3.540482430253178e-05, -1.4305104514278355e-06, -4.9591064453125e-05, -7.62939453125e-06, -0.0001010894775390625, -1.71661376953125e-05, 0.0, -2.86102294921875e-05, 0.0, -6.198883056640625e-05, -1.1920928244535389e-07, -0.0003910064697265625, -5.7220458984375e-06, -1.9073486328125e-06, -0.00019418998272158206, -4.649113543564454e-05, -0.06497368961572647, -0.0002865791320800781, -0.0006034371326677501, 0.0, -3.62396240234375e-05, -1.33514404296875e-05, -4.957235069014132e-05, -8.344646857949556e-07, -5.7220458984375e-06, -5.7220458984375e-06, 0.0, -1.9073486328125e-06, -4.875659942626953e-05, -2.3841855067985307e-07, -0.12607645988464355, 0.0, -6.67572021484375e-05, -1.9073486328125e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.0020294189453125, -2.6702880859375e-05, -0.0007114410400390625, -1.9073486328125e-06, -0.0051937103271484375, -1.71661376953125e-05, -0.0002079010009765625, 0.0, -2.47955322265625e-05, 0.0, -1.33514404296875e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0002498626708984375, -1.9073486328125e-06, -0.00060272216796875, 0.0, -0.835474967956543, -4.0531158447265625e-06, -9.763240814208984e-05, 0.0, -0.0008450751192867756, 0.0, -4.00543212890625e-05, -1.9073486328125e-06, -6.4373016357421875e-06, -1.0728830375228426e-06, -0.19961833953857422, -3.0517578125e-05, -0.00063323974609375, -1.9073486328125e-05, 0.0, -4.76837158203125e-05, 0.0, -3.4332275390625e-05, 0.0, -3.814697265625e-06, -4.1961669921875e-05, 0.0, -1.2874543244834058e-05, -7.152555099310121e-07, -5.7220458984375e-05, -1.9073486328125e-06, -3.254413604736328e-05, -2.3841855067985307e-07, -7.62939453125e-05, -2.09808349609375e-05, -9.5367431640625e-06, -1.9073486328125e-05, -5.7220458984375e-05, 0.0, -2.300739288330078e-05, -2.0265579223632812e-06, -0.0013346672058105469, -1.1920928244535389e-07, -0.1733531951904297, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, 0.0, 0.0, -0.00013768672943115234, -0.07551407814025879, -5.7220458984375e-06, -0.1407604217529297, -0.000156402587890625, -9.5367431640625e-06, -3.814697265625e-06, -0.03330491483211517, -0.2940104007720947, -7.152555099310121e-07, -7.62939453125e-06, -0.0012569427490234375, -1.9073486328125e-06, -0.8907203674316406, -6.43729799776338e-06, -4.00543212890625e-05, -0.04172039031982422, -0.10377311706542969, -5.7220458984375e-06, -0.000213623046875, -8.106231689453125e-06, -0.01099848747253418, 0.0], "score": -3.4261607313449502, "choice_history": [43, 109, "Power", "Word", "Shield", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Power", " ", "Word", " ", "Shield", "<EOS>", 38, 100, "1", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_friendly_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 153, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 138, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "4", "<EOS>", 60, 117, 21, 95, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word Shield', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_friendly_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(ChangeHealth(4)))\n        player.draw()\n"}], "gold_code": "class PowerWordShield(SpellCard):\n\n    def __init__(self):\n        super().__init__('Power Word: Shield', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.increase_health(2)\n        player.draw()\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}], "hole1": 3, "_type": "Template7", "hole0": "Minion", "hole2": 5}], "hole0": "Sen'jinShieldmasta", "hole2": [{"hole3": "FREE", "hole1": 4, "_type": "Template4", "hole0": "Sen'jin Shieldmasta", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-9.5367431640625e-06, -0.00014495849609375, -0.00025102324434556067, -0.0005253365379758179, -0.00037746530142612755, -8.344586603925563e-07, -3.814697265625e-06, -3.576278118089249e-07, -9.5367431640625e-06, -0.000820159912109375, -6.29425048828125e-05, -1.168244216387393e-05, -2.6822082872968167e-05, -5.7220458984375e-06, 0.0, -4.374884156277403e-05, -7.033323527139146e-06, -0.0010071992874145508, 0.0, -0.017229557037353516, 0.0, -0.0002613067626953125, 0.0, -6.020058935973793e-05, 0.0, -1.9073486328125e-06, -0.00016021728515625, -3.24249267578125e-05, -2.3841721485950984e-07, -1.311301275563892e-06, -0.0005609989166259766, -7.152555099310121e-07, -4.172325134277344e-06, -3.158996332786046e-05, -0.028038978576660156, 0.0, -0.0005694626597687602, 0.0, -2.6702880859375e-05, -7.62939453125e-06, -0.00016438827151432633, 0.0], "score": -0.050459976202716916, "choice_history": [43, 107, "Sen'jin", "Shieldmasta", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Sen'jin", " ", "Shieldmasta", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "FREE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "3", "<EOS>", "5", "<EOS>", 146, 128, "taunt", "<EOS>", 22, 96, "True", "<EOS>"], "inferred_code": "class Sen'jinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}], "gold_code": "class SenjinShieldmasta(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.FREE)\n\n    def create_minion(self, player):\n        return Minion(3, 5, taunt=True)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "damage", "_type": "Template8", "hole0": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "attr": "card", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"n": 3, "_type": "Num"}]}, {"_type": "Name", "id": "self"}]}], "hole0": "SinisterStrike", "hole2": [{"hole3": "FREE", "hole1": 1, "_type": "Template4", "hole0": "Sinister Strike", "hole2": "ROGUE"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.0517578125e-05, -2.47955322265625e-05, -6.675719760096399e-06, -7.92710343375802e-05, -4.768360213347478e-06, -1.668551703915e-06, -6.4373016357421875e-06, -7.390969585685525e-06, -4.57763671875e-05, -0.1323833465576172, -1.9073486328125e-06, -0.00021481512521859258, -0.002660151803866029, -2.3841855067985307e-07, -3.576278118089249e-07, -8.463807716907468e-06, 0.0, -0.20305560529232025, 0.0, -0.004603147506713867, 0.0, -2.6702880859375e-05, 0.0, -0.0017513036727905273, 0.0, -0.0005664825439453125, -1.52587890625e-05, -5.841255187988281e-06, -1.9073486328125e-06, -0.006894111633300781, -8.0108642578125e-05, -0.0007228851318359375, -0.0006160736083984375, -8.96453857421875e-05, -1.5616416931152344e-05, 0.0, -0.0002498626708984375, 0.0, 0.0, -0.0017375946044921875, -0.00017547607421875, -0.00012993812561035156, 0.0, -5.7220458984375e-05, -1.9073486328125e-05, -9.655952453613281e-06, 0.0, -0.0004787445068359375, -0.000385284423828125, -0.0005130767822265625, -3.814697265625e-05, -0.0035457611083984375, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, -0.203710675239563, -1.1920928244535389e-07, -0.0001856088638305664, -1.1920928244535389e-07, -1.2256101369857788, -1.33514404296875e-05, -0.00024068355560302734, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, -4.1961669921875e-05, -0.0001010894775390625, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.0001163482666015625, 0.0, -5.7220458984375e-06, -0.00531768798828125, -3.814697265625e-06, -0.00023290862736757845, -2.741813204920618e-06, -2.09808349609375e-05, -7.62939453125e-06, -2.6702880859375e-05, 0.0], "score": -1.7969585173872389, "choice_history": [43, 109, "Sinister", "Strike", "<EOS>", "Spell", "Card", "<EOS>", 151, 58, 113, "Sinister", " ", "Strike", "<EOS>", "1", "<EOS>", "ROGUE", "<EOS>", "FREE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 152, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "card", "<EOS>", "damage", "<EOS>", 139, 31, 73, 13, 66, 21, 95, "player", "<EOS>", "effective_spell_damage", "<EOS>", 138, 38, 100, "3", "<EOS>", 36, 95, "self", "<EOS>"], "inferred_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.card.damage(player.effective_spell_damage(3), self)\n"}], "gold_code": "class SinisterStrike(SpellCard):\n\n    def __init__(self):\n        super().__init__('Sinister Strike', 1, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.FREE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        game.other_player.hero.damage(player.effective_spell_damage(3), self)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template7", "hole0": "Minion", "hole2": 3}], "hole0": "Succubus", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Equip"}, "args": [{"_type": "Template9", "hole0": "Discard"}]}, {"_type": "Template9", "hole0": "PlayerSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Succubus", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -8.392333984375e-05, -0.004483240190893412, -0.0020695736166089773, -3.576265044102911e-06, -6.556510470545618e-06, -8.344646857949556e-07, -0.004924774169921875, -5.7220458984375e-06, -8.96453857421875e-05, -3.62396240234375e-05, 0.0, -4.57763671875e-05, 0.0, -9.5367431640625e-06, 0.0, -7.05718994140625e-05, -1.9073486328125e-06, 0.0, -1.537788011773955e-05, -0.0004483461380004883, -3.814697265625e-06, -5.7220458984375e-06, -0.0011467925505712628, -4.768370445162873e-07, 0.0, -7.62939453125e-06, 0.0, 0.0, -1.1563293810468167e-05, 0.0, -0.06637191772460938, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -0.0001163482666015625, 0.0, -0.4532051086425781, 0.0, -0.000133514404296875, 0.0, -1.9073486328125e-06, 0.0, -5.340576171875e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -7.62939453125e-06, -3.576278118089249e-07, -0.015156745910644531, 0.0, -3.814697265625e-05, -0.0003377199172973633, 0.0, -0.0009670257568359375, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -0.043949127197265625, -0.0012798309326171875, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -0.8645830154418945, -1.6927717297221534e-05, -0.000244140625, -0.0082855224609375, -2.86102294921875e-05, -0.9271156787872314, -0.9074927568435669, -1.9073486328125e-05, -5.7220458984375e-06, -0.28700828552246094, -2.47955322265625e-05, 0.0, -0.0010128021240234375, 0.0, -4.3869011278729886e-05, 0.0, -1.9073486328125e-05, -0.0001049041748046875, -2.288818359375e-05, 0.0, 0.0, -3.838539123535156e-05, 0.0, -1.4185829968482722e-05, 0.0], "score": -3.5912740203866065, "choice_history": [43, 107, "Succubus", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Succubus", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 147, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Equip", "<EOS>", 138, 41, 120, "Discard", "<EOS>", 41, 120, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Equip(Discard()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}], "gold_code": "class Succubus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Succubus', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=\n            Battlecry(Discard(), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Summon"}, "args": [{"_type": "Template9", "hole0": "Thaddius"}]}, {"_type": "Template9", "hole0": "PlayerSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "InGraveyard"}, "args": [{"_type": "Template9", "hole0": "Feugen"}]}]}, "arg": "deathrattle", "_type": "keyword"}], "hole1": 7, "_type": "Template7", "hole0": "Minion", "hole2": 7}], "hole0": "WarGolem", "hole2": [{"hole3": "COMMON", "hole1": 7, "_type": "Template4", "hole0": "War Golem", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-6.29425048828125e-05, -0.001819610595703125, -0.0253929253667593, -0.00022659118985757232, -5.960462772236497e-07, -0.00022844834893476218, -1.71661376953125e-05, 0.0, -1.71661376953125e-05, -0.000110626220703125, -0.000125885009765625, -6.914126061019488e-06, -0.0010651350021362305, 0.0, -1.1205671398784034e-05, -0.00023069547023624182, -2.1457672119140625e-06, -0.002108546206727624, 0.0, -9.882445738185197e-05, 0.0, -1.52587890625e-05, 0.0, -4.339147199061699e-05, 0.0, -0.000118255615234375, -6.67572021484375e-05, -0.00963592529296875, 0.0, 0.0, -2.3841855067985307e-07, -3.576278118089249e-07, -2.301800122950226e-05, -2.50339189733495e-06, -1.1444091796875e-05, -2.86102294921875e-05, -0.171972393989563, -3.62396240234375e-05, -0.012139320373535156, -5.7220458984375e-06, -8.7738037109375e-05, -1.9073486328125e-06, -0.002837657928466797, -3.814697265625e-06, -0.0006313323974609375, -0.0004405975341796875, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -0.06203391030430794, -0.00022971602447796613, -7.2479248046875e-05, -1.33514404296875e-05, -0.0002803802490234375, -0.6853526830673218, -7.271752110682428e-06, -5.7220458984375e-06, -0.0001354217529296875, -0.0077190399169921875, -1.71661376953125e-05, 0.0, -0.00052642822265625, -0.0008716583251953125, -3.814697265625e-06, -3.814697265625e-06, -0.00870823860168457, -0.0022298097610473633, -3.814697265625e-05, -5.14984130859375e-05, -0.00011444091796875, -0.000213623046875, -1.3877105712890625, -0.0002865789574570954], "score": -2.3862651183009973, "choice_history": [43, 107, "War", "Golem", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "War", " ", "Golem", "<EOS>", "7", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "7", "<EOS>", "7", "<EOS>", 146, 128, "deathrattle", "<EOS>", 16, 73, 21, 95, "Deathrattle", "<EOS>", 140, 31, 73, 21, 95, "Summon", "<EOS>", 138, 41, 120, "Thaddius", "<EOS>", 41, 120, "Player", "Selector", "<EOS>", 31, 73, 21, 95, "In", "Graveyard", "<EOS>", 138, 41, 120, "Feugen", "<EOS>"], "inferred_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7, deathrattle=Deathrattle(Summon(Thaddius()),\n            PlayerSelector(), InGraveyard(Feugen())))\n"}], "gold_code": "class WarGolem(MinionCard):\n\n    def __init__(self):\n        super().__init__('War Golem', 7, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(7, 7)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template9", "hole0": "Damaged"}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Template9", "hole0": "<UNK>Attack"}]}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 4, "_type": "Template7", "hole0": "Minion", "hole2": 2}], "hole0": "Acidmaw", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Acidmaw", "_type": "Str"}, {"n": 7, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -5.53131103515625e-05, -0.37400388717651367, -0.00027751922607421875, -8.106230779958423e-06, -8.20159912109375e-05, -2.3841855067985307e-07, -8.7738037109375e-05, -0.0002613067626953125, -0.00011444091796875, -9.5367431640625e-06, 0.0, -4.00543212890625e-05, 0.0, -7.62939453125e-06, 0.0, -0.0003871917724609375, -1.9073486328125e-06, -1.9073486328125e-06, -4.565611743601039e-05, -1.9073486328125e-06, -1.9073486328125e-06, -2.47955322265625e-05, -0.00013851186668034643, -2.145764938177308e-06, 0.0, 0.0, -1.9073486328125e-06, 0.0, -5.483626591740176e-05, 0.0, -0.00035512447357177734, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -0.0003757476806640625, -5.7220458984375e-06, -0.0020208358764648438, 0.0, -0.011905670166015625, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -7.62939453125e-06, -2.288818359375e-05, -1.9073486328125e-06, 0.0, -6.115436553955078e-05, -4.172325134277344e-06, -0.0011447666911408305, 0.0, -1.1444091796875e-05, 0.0, -2.300732558069285e-05, 0.0, -3.814697265625e-05, -3.24249267578125e-05, -8.96453857421875e-05, -1.001277269097045e-05, -4.208087921142578e-05, -0.0004655122756958008, 0.0, -0.00013184089038986713, 0.0, -0.0002288818359375, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -7.43865966796875e-05, -1.9073486328125e-06, -0.000110626220703125, -1.52587890625e-05, -5.7220458984375e-06, -4.1961669921875e-05, -3.24249267578125e-05, -0.00031697750091552734, 0.0, -3.814697265625e-06, -0.06794166564941406, -1.1444091796875e-05, -0.08252274990081787, -0.000148773193359375, -5.14984130859375e-05, -1.52587890625e-05, 0.0, -1.9073486328125e-06, -9.5367431640625e-06, -0.0002574920654296875, 0.0, -0.0014476776123046875, -0.6879863739013672, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.005037903785705566, -0.0018167495727539062, -1.9073486328125e-06, -0.06009483337402344, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.02457296848297119, -7.2479248046875e-05, -5.7220458984375e-06, -0.31439971923828125, -8.0108642578125e-05, -1.2278004884719849, -0.198256716132164, -2.0265579223632812e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.2950124740600586, -1.52587890625e-05, 0.0], "score": -3.3608359981976434, "choice_history": [43, 107, "Acidmaw", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Acidmaw", "<EOS>", 38, 100, "7", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 41, 120, "Damaged", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Buff", "<EOS>", 138, 41, 120, "<UNK>", "Attack", "<EOS>", 41, 120, "Self", "Selector", "<EOS>"], "inferred_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(Damaged(), ActionTag(Give(Buff(\n            <UNK>Attack())), SelfSelector()))])\n"}], "gold_code": "class Acidmaw(MinionCard):\n\n    def __init__(self):\n        super().__init__('Acidmaw', 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, effects=[Effect(CharacterDamaged(\n            MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(),\n            TargetSelector())])])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "charge", "_type": "keyword"}], "hole1": 4, "_type": "Template7", "hole0": "Minion", "hole2": 2}], "hole0": "Boar", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Boar", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -2.6702880859375e-05, -0.0001567479339428246, -2.694103204703424e-05, -2.145737198588904e-06, -1.728534698486328e-05, -4.1723224057932384e-06, -3.814697265625e-06, -1.9073486328125e-05, -0.18210506439208984, -1.9073486328125e-06, 0.0, -3.0517578125e-05, 0.0, -4.172325134277344e-06, 0.0, -0.0063457489013671875, -4.76837158203125e-05, 0.0, -1.7165990357170813e-05, -0.00164794921875, 0.0, 0.0, -0.00022335720132105052, -3.576278118089249e-07, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -7.629378160345368e-06, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.62939453125e-06, -8.392333984375e-05, 0.0, -0.01844024658203125, 0.0, -7.62939453125e-06, -1.71661376953125e-05, -6.29425048828125e-05, 0.0, -2.288818359375e-05, -0.0001964569091796875, -1.52587890625e-05, -1.9073486328125e-06, -0.0001430511474609375, 0.0, -2.288818359375e-05, 0.0, -3.075599670410156e-05, -1.7642974853515625e-05, -0.00021564959024544805, 0.0, -7.62939453125e-06, 0.0, -0.00027108192443847656, 0.0, -3.814697265625e-06, -5.7220458984375e-06, -0.000446319580078125, 0.0, -1.1920928244535389e-07, -5.91278076171875e-05, 0.0, -0.04342794418334961, 0.0, -4.57763671875e-05, -1.9073486328125e-06, -0.00632476806640625, 0.0, -3.814697265625e-05, -9.34600830078125e-05, -0.0002557039260864258, 0.0], "score": -0.2610055862623355, "choice_history": [43, 107, "Boar", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 142, 39, 104, "Boar", "<EOS>", 38, 100, "3", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 37, 96, "False", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "4", "<EOS>", "2", "<EOS>", 146, 128, "charge", "<EOS>", 22, 96, "True", "<EOS>"], "inferred_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(4, 2, charge=True)\n"}], "gold_code": "class Boar(MinionCard):\n\n    def __init__(self):\n        super().__init__('Boar', 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\n            False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}], "hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 2}], "hole0": "AnodizedRoboCub", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Anodized Robo", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DRUID", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-2.86102294921875e-05, -3.4332275390625e-05, -0.0004720134020317346, -0.36831146478652954, -0.5762882232666016, -7.486063259420916e-05, -7.152120815590024e-07, -1.5497207641601562e-05, -1.1920928244535389e-07, 0.0, -1.1444091796875e-05, -3.4332275390625e-05, -3.814697265625e-06, 0.0, -7.474422454833984e-05, -1.1920928244535389e-07, -2.861022494471399e-06, -1.1920928244535389e-07, -0.001377105712890625, -1.9073486328125e-06, 0.0, -0.0036787341814488173, -7.748603820800781e-06, -0.02409076690673828, -0.03269779682159424, -1.9073486328125e-06, -3.814697265625e-06, -1.6808349755592644e-05, -2.1457672119140625e-06, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-06, -3.814697265625e-06, -2.4080107323243283e-05, -1.1920928244535389e-07, -0.08502495288848877, 0.0, -7.62939453125e-06, -7.62939453125e-06, -7.62939453125e-06, -1.9073486328125e-06, -5.340576171875e-05, 0.0, -4.76837158203125e-05, 0.0, -0.02259349822998047, -1.71661376953125e-05, -0.0006982088088989258, 0.0, -9.5367431640625e-06, 0.0, -8.7738037109375e-05, -1.9073486328125e-06, -8.630752563476562e-05, -1.1920922133867862e-06, -0.01674365997314453, 0.0, -6.29425048828125e-05, 0.0, -0.001509547233581543, 0.0, -1.9073486328125e-05, -6.4849853515625e-05, -2.288818359375e-05, 0.0, -9.775113539944869e-06, -1.1920926823449918e-07, -1.1920928244535389e-07, -2.336486431886442e-05, -5.960462772236497e-07, -0.0068817138671875, -9.5367431640625e-06, -0.09810864925384521, 0.0, -0.000911712646484375, -7.62939453125e-06, -0.0002062315325019881, 0.0], "score": -1.2405288769618892, "choice_history": [43, 107, "Anodized", "Robo", "Cub", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Anodized", " ", "Robo", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 146, 128, "taunt", "<EOS>", 22, 96, "True", "<EOS>"], "inferred_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}], "gold_code": "class AnodizedRoboCub(MinionCard):\n\n    def __init__(self):\n        super().__init__('Anodized Robo Cub', 2, CHARACTER_CLASS.DRUID,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[\n            Choice(AttackMode(), Give([Buff(ChangeAttack(1))]),\n            SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))\n            ]), SelfSelector())])\n\n    def create_minion(self, player):\n        return Minion(2, 2, taunt=True)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "damage", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"n": 0, "_type": "Num"}]}, {"_type": "Name", "id": "self"}]}, {"_type": "If", "body": [{"hole1": "draw", "_type": "Template8", "hole0": {"_type": "Name", "id": "player"}}], "test": {"comparators": [{"n": 0, "_type": "Num"}], "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"value": {"_type": "Name", "id": "player"}, "attr": "hand", "_type": "Attribute"}]}, "ops": [{"_type": "Eq"}], "_type": "Compare"}}], "hole0": "BurrowingMine", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Burrowing Mine", "_type": "Str"}, {"n": 0, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -6.103515625e-05, -6.687417771900073e-05, -0.000548331590835005, -9.298280929215252e-06, -3.218541678506881e-06, -7.867813110351562e-06, -1.1920928244535389e-07, -6.29425048828125e-05, -0.00046539306640625, -0.0004730224609375, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, 0.0, -4.982948303222656e-05, 0.0, -0.00061798095703125, -1.9073486328125e-06, 0.0, -3.3378546504536644e-06, -1.2755369425576646e-05, -2.0861511075054295e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -1.2874520507466514e-05, -2.0265579223632812e-06, 0.0, -1.9073486328125e-06, 0.0, 0.0, -1.2874543244834058e-05, 0.0, -0.4034959077835083, 0.0, 0.0, -1.1444091796875e-05, -3.814697265625e-06, -1.9073486328125e-06, -3.62396240234375e-05, -1.9073486328125e-06, -0.9038629531860352, 0.0, -0.02506732940673828, -1.52587890625e-05, -0.0001010894775390625, 0.0, -1.52587890625e-05, 0.0, -5.7220458984375e-06, 0.0, -3.814697265625e-06, -3.814697265625e-06, -4.9591064453125e-05, 0.0, -4.76837158203125e-05, 0.0, -0.01047372817993164, 0.0, -0.0001201629638671875, 0.0, -3.766942609217949e-05, 0.0, -0.000152587890625, -1.9073486328125e-06, -6.675708846159978e-06, -3.576278118089249e-07, -0.0038747787475585938, -7.62939453125e-06, -0.0001201629638671875, -7.62939453125e-06, 0.0, -2.47955322265625e-05, 0.0, -3.814697265625e-06, 0.0, -5.7220458984375e-06, -3.4332275390625e-05, 0.0, -7.271740287251305e-06, 0.0, -5.7220458984375e-06, 0.0, -1.430511474609375e-05, -1.1920928244535389e-07, -4.9591064453125e-05, -8.392333984375e-05, -0.004222869873046875, 0.0, -1.9073486328125e-06, 0.0, -3.647804260253906e-05, 0.0, -1.1444091796875e-05, 0.0, -0.5095694065093994, 0.0, -1.9073486328125e-06, -0.14520931243896484, -0.0001068115234375, -0.000171661376953125, 0.0, 0.0, 0.0, -4.291534423828125e-06, 0.0, -0.6653327941894531, 0.0, 0.0, -0.012237548828125, 0.0, -0.15864478051662445, -1.1920928244535389e-07, -4.57763671875e-05, 0.0, -0.0012578964233398438, -2.09808349609375e-05, -0.06998825073242188, -0.017795562744140625, -0.005008697509765625, -4.38690185546875e-05, -0.2464151382446289, -5.53131103515625e-05, -9.5367431640625e-06, 0.0, -0.00023472309112548828, -4.0531158447265625e-06, -3.814697265625e-06, -6.67572021484375e-05, -1.71661376953125e-05, -0.0045719146728515625, 0.0, -1.0967253729177173e-05, 0.0, -0.25914764404296875, 0.0, -4.9591064453125e-05, -0.048050880432128906, -5.7220458984375e-06, -0.000331878662109375, 0.0, -0.008265931159257889, 0.0, -0.09116363525390625, -0.010222434997558594, -0.6353349685668945, -0.000152587890625, -7.62939453125e-06, -0.0010608434677124023, -1.1920928244535389e-07, -0.002995729213580489, 0.0], "score": -4.248105316085827, "choice_history": [43, 109, "Burrowing", "Mine", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Burrowing", " ", "Mine", "<EOS>", 38, 100, "0", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 153, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 139, 31, 73, 13, 66, 21, 95, "player", "<EOS>", "effective_spell_damage", "<EOS>", 138, 38, 100, "0", "<EOS>", 36, 95, "self", "<EOS>", 54, 82, 17, 76, 16, 73, 21, 95, "len", "<EOS>", 138, 28, 66, 21, 95, "player", "<EOS>", "hand", "<EOS>", 135, 4, 138, 38, 100, "0", "<EOS>", 151, 60, 117, 21, 95, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(0), self)\n        if len(player.hand) == 0:\n            player.draw()\n"}], "gold_code": "class BurrowingMine(SpellCard):\n\n    def __init__(self):\n        super().__init__('Burrowing Mine', 0, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(\n            Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(Discard\n            (query=CardQuery(source=CARD_SOURCE.LAST_DRAWN)),\n            PlayerSelector())), Effect(Drawn(), ActionTag(Draw(),\n            PlayerSelector()))])\n\n    def use(self, player, game):\n        super().use(player, game)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "damage", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"n": 6, "_type": "Num"}]}, {"_type": "Name", "id": "self"}]}], "hole0": "Crackle", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}, {"value": {"n": 1, "_type": "Num"}, "arg": "overload", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Crackle", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -9.5367431640625e-06, -0.0005012686015106738, -5.6028297876764555e-06, -1.5484984032809734e-06, -1.3470649719238281e-05, -4.291525328881107e-06, -3.4332275390625e-05, -5.7220458984375e-06, -2.09808349609375e-05, -8.96453857421875e-05, 0.0, -1.71661376953125e-05, -1.1920928244535389e-07, -1.2159347534179688e-05, -2.3841855067985307e-07, -1.71661376953125e-05, -2.09808349609375e-05, -3.814697265625e-06, -3.576278118089249e-07, 0.0, 0.0, -1.9073486328125e-06, -2.3841823804104934e-07, -1.1920928244535389e-07, -1.9073486328125e-06, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -1.347058241663035e-05, -1.1920928244535389e-07, -0.13588523864746094, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -0.0035552978515625, 0.0, -0.0051784515380859375, -5.7220458984375e-06, -0.008813023567199707, 0.0, -0.0001220703125, 0.0, -7.62939453125e-06, 0.0, -3.814697265625e-06, 0.0, -4.76837158203125e-05, 0.0, -3.814697265625e-05, 0.0, -0.0007969141006469727, 0.0, -6.103515625e-05, -0.025925636291503906, 0.0, -0.00019073486328125, -1.9073486328125e-06, -0.5134552717208862, 0.0, -1.1444091796875e-05, 0.0, -2.3722594050923362e-05, 0.0, -1.9073486328125e-06, -0.0002307891845703125, -8.702273589733522e-06, -2.3841855067985307e-07, -0.008915901184082031, -1.9073486328125e-06, -0.0002841949462890625, -9.5367431640625e-06, 0.0, -4.220008122501895e-05, -1.1920928244535389e-07, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, -9.5367431640625e-05, -7.62939453125e-06, -3.933906555175781e-06, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -1.1920928244535389e-07, -0.000568389892578125, -4.76837158203125e-05, -0.0003528594970703125, 0.0, -5.7220458984375e-06, 0.0, -7.6293927122605965e-06, 0.0, -9.667872654972598e-05, 0.0, -6.377696263371035e-05, 0.0, -1.33514404296875e-05, -0.00011444091796875, -9.918212890625e-05, -8.58306884765625e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.933906555175781e-06, -1.9073486328125e-06, -0.0007975101470947266, 0.0, -1.9073486328125e-06, -8.20159912109375e-05, -1.9073486328125e-06, -0.008808255195617676, -8.702254490344785e-06, -3.814697265625e-06, -6.866455078125e-05, -8.0108642578125e-05, 0.0], "score": -0.7158701341095011, "choice_history": [43, 109, "Crackle", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Crackle", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 147, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_spell_target", "<EOS>", 128, "overload", "<EOS>", 23, 100, "1", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 152, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 139, 31, 73, 13, 66, 21, 95, "player", "<EOS>", "effective_spell_damage", "<EOS>", 138, 38, 100, "6", "<EOS>", 36, 95, "self", "<EOS>"], "inferred_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(6), self)\n"}], "gold_code": "class Crackle(SpellCard):\n\n    def __init__(self):\n        super().__init__('Crackle', 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.find_spell_target,\n            overload=1)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(game.random_amount\n            (3, 6)), self)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "add_buff", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Template9", "hole0": "Coolant"}]}]}], "hole0": "EmergencyCoolant", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Emergency Coolant", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "FREE", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -0.0024089813232421875, -2.932505594799295e-05, -7.986990567587782e-06, -3.576278118089249e-07, -1.1919764801859856e-06, -3.8743019104003906e-05, -2.861018856492592e-06, -3.0517578125e-05, -3.814697265625e-06, -0.0001544952392578125, -7.62939453125e-06, 0.0, -0.00010323524475097656, 0.0, -1.7404556274414062e-05, 0.0, -0.30742835998535156, -1.1444091796875e-05, -9.5367431640625e-06, -0.00033384948619641364, -1.0967253729177173e-05, -3.6954811548639555e-06, 0.0, 0.0, -2.47955322265625e-05, -1.7880847735796124e-06, -1.1920928244535389e-07, -1.9073486328125e-06, -1.52587890625e-05, -1.9073486328125e-06, 0.0, -8.344650268554688e-06, -1.1920928244535389e-07, -0.9812736511230469, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.0001888275146484375, -1.9073486328125e-06, -0.2779407501220703, 0.0, -0.00524139404296875, -5.7220458984375e-06, -9.34600830078125e-05, 0.0, -3.814697265625e-06, 0.0, -7.62939453125e-06, 0.0, -5.7220458984375e-06, -1.1444091796875e-05, -9.918212890625e-05, 0.0, -7.2479248046875e-05, 0.0, -0.004056096076965332, 0.0, -7.62939453125e-06, 0.0, -4.410734163684538e-06, 0.0, -3.62396240234375e-05, -7.62939453125e-06, -1.39474832394626e-05, -1.1920922133867862e-06, -0.021355628967285156, -1.9073486328125e-06, -1.33514404296875e-05, -5.340576171875e-05, 0.0, -4.672927752835676e-05, -1.0728830375228426e-06, -1.33514404296875e-05, 0.0, -6.67572021484375e-05, -5.7220458984375e-06, 0.0, -1.2874520507466514e-05, -1.1920928244535389e-07, -1.9073486328125e-06, 0.0, -0.0003815889358520508, 0.0, -0.0001506805419921875, -0.6605777740478516, -3.814697265625e-06, 0.0, -0.0094146728515625, 0.0, -9.775161743164062e-06, 0.0, -1.20401346066501e-05, 0.0, -0.6938536167144775, -1.9073486328125e-06, -2.6702880859375e-05, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -0.0011217594146728516, -0.0003098248562309891, -4.76837158203125e-05, -0.4236307144165039, -0.005840301513671875, -1.0662903785705566, -0.12985940277576447], "score": -4.592854397783448, "choice_history": [43, 109, "Emergency", "Coolant", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Emergency", " ", "Coolant", "<EOS>", 38, 100, "1", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "FREE", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 152, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 138, 31, 73, 21, 95, "Buff", "<EOS>", 138, 41, 120, "Coolant", "<EOS>"], "inferred_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.FREE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Coolant()))\n"}], "gold_code": "class EmergencyCoolant(SpellCard):\n\n    def __init__(self):\n        super().__init__('Emergency Coolant', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "windfury", "_type": "keyword"}], "hole1": 1, "_type": "Template7", "hole0": "Minion", "hole2": 4}], "hole0": "FlyingMachine", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Flying Machine", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -9.5367431640625e-06, -0.0049413940869271755, -0.00010132275929208845, -3.290122185717337e-05, -2.3841585061745718e-07, -3.826618194580078e-05, -2.3841855067985307e-07, -3.814697265625e-06, -3.24249267578125e-05, -4.1961669921875e-05, -1.1444091796875e-05, 0.0, -2.288818359375e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -1.1920928244535389e-07, -0.0003662109375, -1.52587890625e-05, 0.0, -1.5497195136049413e-06, -6.556510470545618e-06, -5.960462772236497e-07, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -2.3007391064311378e-05, -3.933906555175781e-06, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -6.675716122117592e-06, 0.0, -0.00020515915821306407, 0.0, -2.09808349609375e-05, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -5.7220458984375e-06, 0.0, -2.09808349609375e-05, 0.0, -0.0004405975341796875, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.000469207763671875, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -8.225440979003906e-05, -2.0265579223632812e-06, -0.0007992982864379883, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -0.20652401447296143, 0.0, -4.00543212890625e-05, -0.0004940032958984375, -3.0517578125e-05, -1.9073486328125e-06, -9.536738616588991e-07, -0.001058816909790039, 0.0, -6.67572021484375e-05, -1.1920928244535389e-07, -0.0035991668701171875, -1.9073486328125e-06, -0.0020411002915352583, 0.0, -0.0003871917724609375, -4.1961669921875e-05, -5.507462992682122e-05, 0.0], "score": -0.22211126800892345, "choice_history": [43, 107, "Flying", "Machine", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Flying", " ", "Machine", "<EOS>", 38, 100, "3", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 146, 128, "windfury", "<EOS>", 22, 96, "True", "<EOS>"], "inferred_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}], "gold_code": "class FlyingMachine(MinionCard):\n\n    def __init__(self):\n        super().__init__('Flying Machine', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 4, windfury=True)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template7", "hole0": "Minion", "hole2": 2}], "hole0": "GoblinAuto-Barber", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Template9", "hole0": "WeaponSelector"}]}]}]}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Goblin Auto-Barber", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -2.09808349609375e-05, -0.004100012592971325, -6.854299135738984e-05, -1.7881377516459906e-06, 0.0, -9.775161743164062e-06, -1.0728830375228426e-06, -0.0002193450927734375, -7.62939453125e-06, -0.0001697540283203125, -1.33514404296875e-05, -1.9073486328125e-06, -1.71661376953125e-05, 0.0, -2.384185791015625e-06, -2.3841855067985307e-07, -0.005950927734375, 0.0, 0.0, -4.768370445162873e-07, -8.34464663057588e-06, -2.384185791015625e-06, 0.0, 0.0, -3.814697265625e-06, -1.62121814355487e-05, -3.576278118089249e-07, 0.0, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -2.968277840409428e-05, 0.0, -1.1063098907470703, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.52587890625e-05, -3.814697265625e-06, -5.91278076171875e-05, 0.0, -7.82012939453125e-05, 0.0, -0.013430595397949219, -0.0001010894775390625, -2.503394853192731e-06, -1.1920928244535389e-07, -2.288818359375e-05, -3.814697265625e-06, -6.4849853515625e-05, 0.0, -7.641315460205078e-05, -2.3841855067985307e-07, -0.013983607292175293, 0.0, -1.71661376953125e-05, -0.0012359619140625, 0.0, -1.33514404296875e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0017205476760864258, -1.1920928244535389e-07, -3.0517578125e-05, -0.00580596923828125, -3.814697265625e-06, -5.7220458984375e-06, -9.5367431640625e-06, -0.03173980116844177, -0.00010787919018184766, -4.76837158203125e-05, -4.9591064453125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.6844538450241089, -5.435881394078024e-05, -7.05718994140625e-05, -3.4332275390625e-05, -7.62939453125e-06, -1.9073486328125e-06, -1.1444091796875e-05, -0.01421260740607977, -0.0003159046173095703, -3.814697265625e-06, -1.52587890625e-05, -0.6521749496459961, -1.9073486328125e-06, -1.9073486328125e-06, -6.67572021484375e-05, -0.654006838798523, -2.4557026335969567e-05, -0.001010894775390625, -0.0015459060668945312, -0.0005550384521484375, -0.08261723071336746, -5.9604644775390625e-06, -0.11748886108398438, -0.0002269744873046875, -0.44656097888946533, -0.0011800527572631836, 0.0, -0.03555107116699219, -1.9073486328125e-06, -0.005039215087890625, -0.000554203987121582, 0.0, -6.866455078125e-05, 0.0, -1.060962586052483e-05, 0.0, -5.7220458984375e-06, -5.7220458984375e-05, -3.24249267578125e-05, 0.0, -3.576278118089249e-07, -2.0265579223632812e-06, 0.0, -4.649161837733118e-06, 0.0], "score": -3.8836181912970886, "choice_history": [43, 107, "Goblin", "Auto-Barber", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Goblin", " ", "Auto-Barber", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 147, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 31, 73, 21, 95, "Attribute", "<EOS>", 139, 39, 104, "<UNK>", "<EOS>", 41, 120, "Weapon", "Selector", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>"], "inferred_code": "class GoblinAuto-Barber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give(Give(ChangeAttack(Attribute('<UNK>',\n            WeaponSelector())))), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}], "gold_code": "class GoblinAutoBarber(MinionCard):\n\n    def __init__(self):\n        super().__init__('Goblin Auto-Barber', 2, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 2)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template9", "hole0": "TurnEnded"}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 2, "_type": "Num"}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 2, "_type": "Num"}]}]}], "_type": "List"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 2}], "hole0": "IronSensei", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Iron Sensei", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -1.52587890625e-05, -0.10768884420394897, -6.9141146923357155e-06, -7.152551916078664e-06, -3.576252765924437e-06, -2.09808349609375e-05, -3.814697265625e-06, -0.0023441314697265625, -3.814697265625e-05, -0.000431060791015625, -5.7220458984375e-06, 0.0, -1.1444091796875e-05, 0.0, -1.9073486328125e-06, 0.0, -0.000728607177734375, 0.0, -1.9073486328125e-06, -4.172316494077677e-06, -1.0848044439626392e-05, -5.9604562920867465e-06, 0.0, 0.0, -1.71661376953125e-05, -7.629113679286093e-05, -2.2649765014648438e-06, -5.7220458984375e-06, -4.1961669921875e-05, 0.0, 0.0, -1.7166135876323096e-05, 0.0, -0.11646461486816406, 0.0, -1.9073486328125e-06, -1.71661376953125e-05, -1.9073486328125e-06, -3.814697265625e-06, -3.0517578125e-05, 0.0, -0.0002155303955078125, 0.0, -0.0062808990478515625, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -9.775161743164062e-06, -1.1920928244535389e-07, -0.0010091066360473633, 0.0, -0.0003204345703125, 0.0, -0.0003725290298461914, 0.0, -0.0029354095458984375, -5.7220458984375e-06, -0.0001659393310546875, 0.0, -1.9073486328125e-06, -1.6689286894688848e-06, 0.0, -1.049041202350054e-05, 0.0, -0.000255584716796875, -9.5367431640625e-06, -1.1563301086425781e-05, -1.9073486328125e-06, -4.38690185546875e-05, -1.1444091796875e-05, -9.918212890625e-05, -4.38690185546875e-05, 0.0, -1.9073486328125e-05, -1.33514404296875e-05, -0.00017952919006347656, 0.0, -7.62939453125e-06, -0.0009784698486328125, -9.5367431640625e-06, -6.771086918888614e-05, -0.008459210395812988, 0.0, -7.62939453125e-06, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -5.340576171875e-05, 0.0, -0.0071468353271484375, -0.00055694580078125, -3.814697265625e-06, -3.814697265625e-06, -1.71661376953125e-05, -0.0034134387969970703, -0.0003108978271484375, -2.09808349609375e-05, -0.031154632568359375, -1.1444091796875e-05, -0.0029878616333007812, -1.9073486328125e-06, 0.0, -1.71661376953125e-05, -0.0001087188720703125, -0.00025200843811035156, -3.814697265625e-06, -3.814697265625e-06, -0.0001468658447265625, -1.33514404296875e-05, -7.62939453125e-06, -3.814697265625e-06, -0.00047278404235839844, -0.006516575813293457, 0.0, -9.5367431640625e-06, -3.814697265625e-06, 0.0, -0.0010448619723320007, -1.9073486328125e-06, -0.0001049041748046875, 0.0, -5.7220458984375e-06, -5.7220458984375e-06, -0.0010529756546020508, -8.20159912109375e-05, -1.33514404296875e-05, -0.004241943359375, -1.1444091796875e-05, -7.62939453125e-06, -5.7220458984375e-06, -0.0006492137908935547, -0.200606107711792, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, 0.0, -0.0030856081284582615, -3.814697265625e-06, -5.91278076171875e-05, -1.9073486328125e-06, -0.06291770935058594, -2.1457672119140625e-06, 0.0], "score": -0.5767674887447285, "choice_history": [43, 107, "Iron", "Sensei", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Iron", " ", "Sensei", "<EOS>", 38, 100, "3", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "2", "<EOS>", "2", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 41, 120, "Turn", "Ended", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 34, 91, 139, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "2", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "2", "<EOS>", 41, 120, "Self", "Selector", "<EOS>"], "inferred_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\n"}], "gold_code": "class IronSensei(MinionCard):\n\n    def __init__(self):\n        super().__init__('Iron Sensei', 3, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([\n            Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(\n            IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 9, "_type": "Template7", "hole0": "Minion", "hole2": 7}], "hole0": "Mal'Ganis", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "AuraUntil"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 2, "_type": "Num"}]}, {"_type": "Template9", "hole0": "SelfSelector"}, {"_type": "Call", "func": {"_type": "Name", "id": "And"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}, "args": [{"_type": "Template9", "hole0": "Immune"}, {"_type": "Template9", "hole0": "Attack<UNK>"}]}]}, {"_type": "Template9", "hole0": "HeroSelector"}]}]}]}, {"keywords": [{"value": {"n": 0, "_type": "Num"}, "arg": "value", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Count"}, "args": [{"_type": "Template9", "hole0": "TurnEnded"}]}]}, {"keywords": [{"value": {"n": 0, "_type": "Num"}, "arg": "value", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Count"}, "args": [{"_type": "Template9", "hole0": "WeaponSelector"}]}]}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Mal'Ganis", "_type": "Str"}, {"n": 9, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "MAGE", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -9.5367431640625e-06, -0.036576081067323685, -0.12126971781253815, -5.0066901167156175e-06, -2.09808349609375e-05, 0.0, -7.62939453125e-06, -1.71661376953125e-05, -0.0002422332763671875, -9.5367431640625e-06, -7.62939453125e-06, -7.62939453125e-05, 0.0, -1.9073486328125e-06, 0.0, -3.24249267578125e-05, 0.0, -1.9073486328125e-06, -5.841247457283316e-06, -0.00023090839385986328, 0.0, -1.9073486328125e-06, -8.559141861042008e-05, -2.0265579223632812e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, 0.0, -0.00013184547424316406, 0.0, -0.48044872283935547, 0.0, -9.1552734375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.0069141387939453125, -1.9073486328125e-06, -0.0022869110107421875, 0.0, -0.029829025268554688, -1.9073486328125e-06, -9.5367431640625e-06, -1.1920928244535389e-07, -7.62939453125e-06, -7.62939453125e-06, -3.814697265625e-06, 0.0, -2.7179718017578125e-05, 0.0, -0.1127781867980957, 0.0, -1.9073486328125e-06, -0.0013408660888671875, 0.0, -0.0002384185791015625, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.00020599365234375, 0.0, -0.017667770385742188, -0.005344390869140625, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.07321866601705551, -0.00032734868000261486, -1.52587890625e-05, -0.08875465393066406, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.6555012464523315, -0.04736590385437012, -2.0265579223632812e-06, -0.010377883911132812, -0.10501670837402344, -1.9073486328125e-06, -1.9073486328125e-06, -1.71661376953125e-05, -0.0014660288579761982, -0.6749249696731567, -1.4305104514278355e-06, -1.33514404296875e-05, -4.76837158203125e-05, 0.0, -0.17309634387493134, -5.7220458984375e-06, -0.00748443603515625, 0.0, -0.03867220878601074, -3.933904736186378e-06, 0.0, -0.018157958984375, -0.3202342987060547, 0.0, 0.0, -0.5011200904846191, -0.030089139938354492, -1.33514404296875e-05, -0.00174713134765625, 0.0, -5.7220458984375e-06, -2.6702880859375e-05, -0.03912877291440964, -5.865096318302676e-05, -1.9073486328125e-06, -0.0010890960693359375, 0.0, 0.0, 0.0, -0.2239537239074707, -0.04803645610809326, -1.9073486328125e-06, -0.0012531280517578125, -0.0007686614990234375, -1.9073486328125e-05, -0.0018834812799468637, -0.0021491535007953644, -0.030504226684570312, 0.0, -0.15771076083183289, -0.014189361594617367, -0.0025908707175403833, -0.0004138946533203125, 0.0, -0.30130982398986816, -0.0005127512849867344, 0.0, -0.000820159912109375, -0.04181861877441406, -3.0517578125e-05, -1.9073486328125e-06, -0.00042569637298583984, -0.0011608600616455078, -1.1682510375976562e-05, -2.6702880859375e-05, -0.006195068359375, -2.6702880859375e-05, 0.0, 0.0, -0.019332289695739746, -0.00011491775512695312, -3.4332275390625e-05, -0.08482646942138672, -5.7220458984375e-06, -1.9328200817108154, -0.010315166786313057, -1.1920928244535389e-07, -0.00078582763671875, -3.814697265625e-06, -0.08144760131835938, -5.7220458984375e-06, -7.43865966796875e-05, 0.0, -0.002957515651360154, 0.0, -0.0757303237915039, -0.6390151977539062, -5.7220458984375e-06, -3.814697265625e-06, -0.0015783309936523438, -0.0007708072662353516, -1.9073486328125e-06, -7.62939453125e-06, -0.0001773834228515625, -9.5367431640625e-06, 0.0, 0.0, -0.016422390937805176, -0.0001461505889892578, -3.24249267578125e-05, -0.3865814208984375, -1.9073486328125e-06, -1.017113447189331, -0.0010316325351595879, 0.0, -0.001407623291015625, 0.0, -0.004009246826171875, -2.6702880859375e-05, -8.96453857421875e-05, -1.9073486328125e-06, -0.001306435326114297, 0.0, -3.826618194580078e-05, 0.0, -1.2993811651540454e-05, 0.0, -1.9073486328125e-06, 0.0, -3.62396240234375e-05, 0.0, -1.9073486328125e-06, -1.2874602361989673e-05, -5.960462772236497e-07, -1.1563293810468167e-05, -2.3841855067985307e-07], "score": -8.718119851586508, "choice_history": [43, 107, "Mal'Ganis", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Mal'Ganis", "<EOS>", 38, 100, "9", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "MAGE", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 147, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 140, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Aura", "Until", "<EOS>", 140, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "2", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", 31, 73, 21, 95, "And", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Buff", "Until", "<EOS>", 139, 41, 120, "Immune", "<EOS>", 41, 120, "Attack", "<UNK>", "<EOS>", 41, 120, "Hero", "Selector", "<EOS>", 31, 74, 21, 95, "Greater", "Than", "<EOS>", 138, 31, 73, 21, 95, "Count", "<EOS>", 138, 41, 120, "Turn", "Ended", "<EOS>", 146, 128, "value", "<EOS>", 23, 100, "0", "<EOS>", 31, 74, 21, 95, "Greater", "Than", "<EOS>", 138, 31, 73, 21, 95, "Count", "<EOS>", 138, 41, 120, "Weapon", "Selector", "<EOS>", 146, 128, "value", "<EOS>", 23, 100, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "9", "<EOS>", "7", "<EOS>"], "inferred_code": "class Mal'Ganis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(\n            Give(AuraUntil(ChangeHealth(2), SelfSelector(), And(Give(\n            BuffUntil(Immune(), Attack<UNK>())), HeroSelector()))),\n            GreaterThan(Count(TurnEnded()), value=0), GreaterThan(Count(\n            WeaponSelector()), value=0)))\n\n    def create_minion(self, player):\n        return Minion(9, 7)\n"}], "gold_code": "class MalGanis(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(\n            IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2),\n            MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(),\n            HeroSelector())])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template9", "hole0": "Damaged"}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Heal"}, "args": [{"n": 4, "_type": "Num"}]}, {"_type": "Template9", "hole0": "HeroSelector"}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 1, "_type": "Template7", "hole0": "Minion", "hole2": 4}], "hole0": "MistressOfPain", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Mistress of Pain", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARLOCK", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -1.71661376953125e-05, -0.012049064040184021, -0.002265680581331253, -0.6153979301452637, -4.8517420509597287e-05, -1.5973761037457734e-05, -1.5497207641601562e-05, -1.1920928244535389e-07, -1.71661376953125e-05, -4.9591064453125e-05, -0.00093841552734375, -5.7220458984375e-06, 0.0, -1.33514404296875e-05, 0.0, -3.814697265625e-06, 0.0, -7.2479248046875e-05, -1.9073486328125e-06, 0.0, -1.1563299267436378e-05, -5.7220458984375e-06, -1.2397689715726301e-05, -4.1961669921875e-05, -0.0001871583517640829, 0.0, 0.0, -1.33514404296875e-05, -1.2040137335134204e-05, 0.0, 0.0, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -6.5565000113565475e-06, 0.0, -0.13908958435058594, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -6.29425048828125e-05, 0.0, -0.000152587890625, 0.0, -0.007701873779296875, 0.0, -1.33514404296875e-05, 0.0, -3.814697265625e-06, 0.0, -1.52587890625e-05, 0.0, -8.594989776611328e-05, 0.0, -0.025249481201171875, 0.0, -4.57763671875e-05, 0.0, -7.081031799316406e-05, 0.0, -3.814697265625e-06, -1.33514404296875e-05, -0.00016021728515625, -0.001277923583984375, -3.814697265625e-06, -3.0517578125e-05, 0.0, -9.918212890625e-05, -6.198863957251888e-06, -0.000576019287109375, -2.47955322265625e-05, -4.303455352783203e-05, -3.814697265625e-06, -1.52587890625e-05, -1.9073486328125e-05, -9.5367431640625e-06, -5.14984130859375e-05, -3.814697265625e-06, -0.000125885009765625, -5.7220458984375e-06, -0.00025200843811035156, -2.0265579223632812e-06, -2.09808349609375e-05, -0.00102996826171875, -3.814697265625e-06, -0.01818799413740635, -0.00028145313262939453, -0.0020732879638671875, -1.9073486328125e-05, -1.9073486328125e-06, 0.0, -7.748603820800781e-06, -3.4332275390625e-05, 0.0, -0.031540870666503906, -0.00011444091796875, -5.7220458984375e-06, -3.814697265625e-06, 0.0, -0.04475545883178711, -0.004232643637806177, -3.814697265625e-06, -0.002033233642578125, -1.9073486328125e-06, -0.005830917973071337, -7.081031799316406e-05, -7.82012939453125e-05, -9.5367431640625e-06, -0.015869140625, -1.6212459740927443e-05, 0.0], "score": -0.9326741690820128, "choice_history": [43, 107, "Mistress", "Of", "Pain", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Mistress", " ", "of", " ", "Pain", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "WARLOCK", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 41, 120, "Damaged", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Heal", "<EOS>", 138, 38, 100, "4", "<EOS>", 41, 120, "Hero", "Selector", "<EOS>"], "inferred_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(Damaged(), ActionTag(Heal(4),\n            HeroSelector()))])\n"}], "gold_code": "class MistressOfPain(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mistress of Pain', 2, CHARACTER_CLASS.WARLOCK,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(\n            EventValue()), HeroSelector()))])\n"}
{"beams": [{"model_output": {"hole3": "create_weapon", "hole6": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 2, "_type": "Num"}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 2, "_type": "Num"}]}]}], "_type": "List"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Not"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}]}]}, {"_type": "Template9", "hole0": "BothPlayer"}]}]}, "arg": "deathrattle", "_type": "keyword"}], "hole1": 3, "_type": "Template7", "hole0": "Weapon", "hole2": 2}], "hole0": "Powermace", "hole2": [{"hole3": "RARE", "hole1": 3, "_type": "Template4", "hole0": "Powermace", "hole2": "SHAMAN"}], "hole1": "WeaponCard", "_type": "Template0", "hole4": "player"}, "score_history": [-9.5367431640625e-06, -0.0002346038818359375, -0.0002026352594839409, -0.003939851652830839, -1.0490413842489943e-05, -1.978873842745088e-05, -2.0265579223632812e-06, -0.0001983642578125, -2.86102294921875e-05, -2.47955322265625e-05, -3.8146954466355965e-06, -5.7220458984375e-06, -0.00024271011352539062, -2.861018856492592e-06, -0.8245668411254883, 0.0, -0.01883721351623535, 0.0, -0.004617929458618164, 0.0, -0.0026362782809883356, 0.0, -2.86102294921875e-05, -0.0003452301025390625, -0.0003108978271484375, -1.1920928244535389e-07, -2.682172998902388e-05, -7.62939453125e-06, 0.0, -1.1563301086425781e-05, 0.0, -4.00543212890625e-05, -1.1444091796875e-05, -0.02264702320098877, -9.751319885253906e-05, -3.4332275390625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -1.9073486328125e-06, -0.0001550912857055664, 0.0, -0.047031402587890625, -0.000171661376953125, 0.0, -1.33514404296875e-05, -0.000934600830078125, -0.4012035131454468, -7.987018034327775e-05, -9.5367431640625e-06, -0.013889312744140625, -2.09808349609375e-05, -0.000762939453125, -1.9073486328125e-06, 0.0, -3.814697265625e-06, -0.000171661376953125, -0.00010514259338378906, -2.741813204920618e-06, -3.0517578125e-05, -0.0002346038818359375, -1.1444091796875e-05, -9.5367431640625e-06, -6.4849853515625e-05, -8.606910705566406e-05, -0.0012047290802001953, -1.9073486328125e-06, -0.0002956390380859375, -2.47955322265625e-05, 0.0, -0.0009707213030196726, -3.814697265625e-06, -1.9073486328125e-05, 0.0, -1.71661376953125e-05, -2.09808349609375e-05, -9.930133819580078e-05, -1.919269561767578e-05, -7.62939453125e-06, -0.0032939910888671875, -7.82012939453125e-05, -1.1444091796875e-05, -0.000102996826171875, -2.1696017938666046e-05, -0.35011017322540283, 0.0, -4.9591064453125e-05, -5.7220458984375e-06, -1.9073486328125e-06, -0.0006922484608367085, -1.9073486328125e-06, -0.3507957458496094, -0.0962076187133789, -1.9073486328125e-06, -1.52587890625e-05, -0.007108807563781738, -7.82012939453125e-05, -7.82012939453125e-05, -0.3043785095214844, -0.011237144470214844, -3.814697265625e-06, -4.1961669921875e-05, -5.91278076171875e-05, -0.12758564949035645, -0.0004673004150390625, -3.814697265625e-06, -0.0035648345947265625, -0.0014514923095703125, -5.7220458984375e-06, 0.0, -0.7976253032684326, -0.00022125244140625, 0.0, -0.002574920654296875, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, 0.0, -0.0001430511474609375, -8.96453857421875e-05, -1.2050390243530273, -1.9073486328125e-06, -0.0015401840209960938, -1.52587890625e-05, -0.011289596557617188, -7.62939453125e-06, 0.0], "score": -4.622867632065201, "choice_history": [43, 107, "Powermace", "<EOS>", "Weapon", "Card", "<EOS>", 151, 58, 113, "Powermace", "<EOS>", "3", "<EOS>", "SHAMAN", "<EOS>", "RARE", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 151, 59, 116, "Weapon", "<EOS>", "3", "<EOS>", "2", "<EOS>", 146, 128, "deathrattle", "<EOS>", 16, 73, 21, 95, "Deathrattle", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 34, 91, 139, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "2", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "2", "<EOS>", 31, 73, 21, 95, "Minion", "Selector", "<EOS>", 139, 31, 73, 21, 95, "Not", "<EOS>", 138, 31, 73, 21, 95, "Is", "Type", "<EOS>", 138, 28, 66, 21, 95, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 41, 120, "Both", "Player", "<EOS>"], "inferred_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeAttack\n            (2)), Buff(ChangeHealth(2))]), MinionSelector(Not(IsType(\n            MINION_TYPE.MECH)), BothPlayer())))\n"}], "gold_code": "class Powermace(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Powermace', 3, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.RARE)\n\n    def create_weapon(self, player):\n        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth\n            (2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(\n            MINION_TYPE.MECH), picker=RandomPicker())))\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 5}], "hole0": "ScrewjankClunker", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 2, "_type": "Num"}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 2, "_type": "Num"}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 2, "_type": "Num"}]}]}], "_type": "List"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Screwjank Clunker", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -7.62939453125e-06, -0.0009545317152515054, -5.352353764465079e-05, -0.00014959675900172442, -3.576260496629402e-07, -9.775161743164062e-06, -2.503394853192731e-06, -0.0004711151123046875, -5.7220458984375e-06, -3.0517578125e-05, -1.71661376953125e-05, 0.0, -7.62939453125e-05, 0.0, -3.0517578125e-05, 0.0, -8.0108642578125e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.7404405298293568e-05, -1.5616416931152344e-05, -1.7046813809429295e-05, 0.0, 0.0, -0.000316619873046875, -0.0001063338277162984, -2.503394898667466e-05, 0.0, -6.4849853515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.609317769180052e-05, -2.3841855067985307e-07, -0.1171029806137085, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -2.47955322265625e-05, -3.4332275390625e-05, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.0003261566162109375, -1.9073486328125e-05, -3.814697265625e-06, 0.0, -2.86102294921875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -3.814697265625e-06, -5.841255187988281e-06, -2.9802317840221804e-06, -0.0013962984085083008, 0.0, 0.0, -0.0007648468017578125, 0.0, -5.91278076171875e-05, -1.71661376953125e-05, 0.0, -3.814697265625e-05, -8.392333984375e-05, -7.62939453125e-06, -0.00339508056640625, -0.0005397796630859375, -1.9073486328125e-06, -2.09808349609375e-05, -1.9073486328125e-06, -0.00111356470733881, -6.508827209472656e-05, -6.866455078125e-05, -0.00128936767578125, -1.9073486328125e-06, -0.12004566192626953, -3.814697265625e-06, -3.814697265625e-06, -1.71661376953125e-05, -3.814697265625e-06, -0.0001062154769897461, -2.205371856689453e-05, -5.7220458984375e-06, -3.62396240234375e-05, -2.09808349609375e-05, -0.000202178955078125, -0.0001163482666015625, -3.600095078581944e-05, -0.2044461965560913, 0.0, -5.53131103515625e-05, -0.00086212158203125, -1.9073486328125e-06, -0.0006269157165661454, 0.0, -0.0003814697265625, -0.0003070831298828125, -1.33514404296875e-05, -1.9073486328125e-06, -0.00033414363861083984, -2.8967857360839844e-05, -9.5367431640625e-06, -0.0005664825439453125, -2.6702880859375e-05, -6.4849853515625e-05, -0.0003299713134765625, -4.3510677642188966e-05, -0.055907249450683594, 0.0, -6.866455078125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.0004279605927877128, -3.814697265625e-06, -0.0009708404541015625, -0.000675201416015625, -7.62939453125e-06, -3.814697265625e-06, -0.0005593299865722656, -2.1219253540039062e-05, -9.5367431640625e-06, -0.0038394927978515625, -3.4332275390625e-05, -7.43865966796875e-05, -0.0006084442138671875, -3.170933268847875e-05, -0.04889678955078125, 0.0, -8.0108642578125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -0.00045955120003782213, -3.814697265625e-06, -0.5886573791503906, 0.0, -0.00471043586730957, -8.106231689453125e-06, 0.0, -0.0001926422119140625, 0.0, -2.6821906430996023e-05, 0.0, -3.0517578125e-05, -0.00035858154296875, -1.71661376953125e-05, -1.1897645890712738e-07, -1.9073486328125e-06, -0.00011538914986886084, 0.0, -0.0005809764843434095, 0.0], "score": -1.1650861262362184, "choice_history": [43, 107, "Screwjank", "Clunker", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Screwjank", " ", "Clunker", "<EOS>", 38, 100, "4", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 147, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 34, 91, 140, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "2", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "2", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "2", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "2", "<EOS>", "5", "<EOS>"], "inferred_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeHealth(2)),\n            Buff(ChangeHealth(2))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}], "gold_code": "class ScrewjankClunker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Screwjank Clunker', 4, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=\n            Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]),\n            MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(2, 5)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Summon"}, "args": [{"_type": "Template9", "hole0": "MechShredder"}]}, {"_type": "Template9", "hole0": "PlayerSelector"}]}, "arg": "deathrattle", "_type": "keyword"}], "hole1": 5, "_type": "Template7", "hole0": "Minion", "hole2": 7}], "hole0": "<UNK><UNK>Shredder", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "<UNK> Old Shredder", "_type": "Str"}, {"n": 8, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.814697265625e-06, -0.0001964569091796875, -0.2889063060283661, -0.5257699489593506, -0.027727926149964333, -9.179073458653875e-06, -2.1457271941471845e-06, -5.7220458984375e-06, 0.0, -7.62939453125e-06, -0.13184356689453125, -0.0007038116455078125, -2.288818359375e-05, 0.0, -1.9073486328125e-05, 0.0, -1.9073486328125e-06, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.03232419118285179, -7.867813110351562e-06, -0.012304844334721565, -0.0014477968215942383, -0.00019715630332939327, -2.0265579223632812e-06, 0.0, 0.0, -0.001948774210177362, -9.5367431640625e-06, 0.0, -1.9073486328125e-06, 0.0, 0.0, -1.7285317881032825e-05, 0.0, -0.0007433891296386719, 0.0, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -4.9591064453125e-05, 0.0, -0.00021183490753173828, 0.0, -0.005001068115234375, 0.0, -1.71661376953125e-05, 0.0, -4.00543212890625e-05, -5.7220458984375e-06, -2.6702880859375e-05, 0.0, -0.0004616975784301758, -5.841255187988281e-06, -0.015038728713989258, 0.0, -2.09808349609375e-05, 0.0, -1.537799835205078e-05, 0.0, -0.00012969970703125, -1.33514404296875e-05, -8.392333984375e-05, 0.0, -3.576278118089249e-07, -2.47955322265625e-05, 0.0, -0.02305424213409424, -1.1920922133867862e-06, -0.0002117156982421875, -5.7220458984375e-06, -0.0003285408020019531, -4.971027374267578e-05, -2.6702880859375e-05, -5.7220458984375e-06, -3.814697265625e-06, -5.7220458984375e-06, -0.00038957592914812267, -2.0265579223632812e-06, -0.0012664794921875, -0.00186920166015625, -3.814697265625e-06, -7.62939453125e-06, -6.103515625e-05, -0.0007483829976990819, -7.903347432147712e-05, -0.039592742919921875, -0.01974010467529297, -0.0001125335693359375, -0.8346933126449585, -0.1827080100774765, -0.0009420986752957106, -4.38690185546875e-05, -4.00543212890625e-05, -0.006586194038391113, -0.000148773193359375, 0.0], "score": -2.15812479854975, "choice_history": [43, 107, "<UNK>", "<UNK>", "Shredder", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "<UNK>", " ", "Old", " ", "Shredder", "<EOS>", 38, 100, "8", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 146, 128, "deathrattle", "<EOS>", 16, 73, 21, 95, "Deathrattle", "<EOS>", 139, 31, 73, 21, 95, "Summon", "<EOS>", 138, 41, 120, "Mech", "Shredder", "<EOS>", 41, 120, "Player", "Selector", "<EOS>"], "inferred_code": "class <UNK><UNK>Shredder(MinionCard):\n\n    def __init__(self):\n        super().__init__('<UNK> Old Shredder', 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(MechShredder()),\n            PlayerSelector()))\n"}], "gold_code": "class SneedsOldShredder(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(5, 7, deathrattle=Deathrattle(Summon(CardQuery(\n            conditions=[IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])),\n            PlayerSelector()))\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template7", "hole0": "Minion", "hole2": 7}], "hole0": "Toshley", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "AddCard"}, "args": [{"keywords": [{"value": {"value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "LIST", "_type": "Attribute"}, "arg": "source", "_type": "keyword"}, {"value": {"_type": "Name", "id": "spare_part_list"}, "arg": "source_list", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}}]}, {"_type": "Template9", "hole0": "PlayerSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Toshley", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-05, -1.71661376953125e-05, -0.00017689615197014064, -7.271755021065474e-05, -2.3841823804104934e-07, -4.5299530029296875e-06, -1.1920922133867862e-06, -0.00020599365234375, -0.012605667114257812, -0.000675201416015625, -1.33514404296875e-05, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.00010144710540771484, -1.1920928244535389e-07, -0.0025177001953125, -1.9073486328125e-06, 0.0, 0.0, -1.52587890625e-05, -1.9073486328125e-06, -9.5367431640625e-06, -9.894321920000948e-06, -1.3709050108445808e-05, -1.9073486328125e-06, -1.1444091796875e-05, 0.0, -4.00543212890625e-05, -3.62396240234375e-05, -2.1457672119140625e-06, -0.0011038780212402344, 0.0, -2.09808349609375e-05, -2.86102294921875e-05, -3.814697265625e-06, -0.0001049041748046875, -5.53131103515625e-05, -1.33514404296875e-05, -0.00031280517578125, -6.67572021484375e-05, -0.00014495849609375, 0.0, -0.002979278564453125, 0.0, -0.0001163482666015625, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.00043904781341552734, -2.3841855067985307e-07, -0.0014438629150390625, -0.0045566558837890625, -3.0517578125e-05, -9.5367431640625e-06, -2.86102294921875e-05, -0.09012091159820557, -0.0007487534894607961, -0.0003833770751953125, -0.6333284378051758, -0.0014896392822265625, -0.0002498626708984375, -1.9073486328125e-06, 0.0, -0.0005221366882324219, -0.0005972385406494141, 0.0, -0.004923820495605469, -0.0002536773681640625, -0.0029122827108949423, -1.9073486328125e-06, -0.0013141632080078125, -5.14984130859375e-05, -5.7220458984375e-06, 0.0, -0.0013761520385742188, -5.7220458984375e-06, -0.1143273115158081, -0.0006448030471801758, -9.5367431640625e-06, -0.035843849182128906, 0.0, -0.0029811859130859375, -0.0003376007080078125, -0.06218528747558594, 0.0, -0.00018310546875, 0.0, -1.919269561767578e-05, -2.86102294921875e-05, 0.0, -3.814697265625e-06, -3.814697265625e-06, -9.48887609411031e-05, 0.0, -0.002300262451171875, -3.814697265625e-06, -0.0002613067626953125, -1.1920906217710581e-07, -1.9073486328125e-06, -2.3365020751953125e-05, -1.1920928244535389e-07, -0.03670835494995117, -3.099436753473128e-06], "score": -1.022284495003376, "choice_history": [43, 107, "Toshley", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Toshley", "<EOS>", 38, 100, "6", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Add", "Card", "<EOS>", 138, 31, 72, 21, 95, "Card", "Query", "<EOS>", 147, 128, "source", "<EOS>", 13, 66, 21, 95, "CARD_SOURCE", "<EOS>", "LIST", "<EOS>", 128, "source_list", "<EOS>", 21, 95, "spare_part_list", "<EOS>", 41, 120, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>"], "inferred_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(5, 7)\n"}], "gold_code": "class Toshley(MinionCard):\n\n    def __init__(self):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        super().__init__('Toshley', 6, CHARACTER_CLASS.ALL, CARD_RARITY.\n            LEGENDARY, battlecry=Battlecry(AddCard(CardQuery(source=\n            CARD_SOURCE.LIST, source_list=spare_part_list)), PlayerSelector()))\n\n    def create_minion(self, player):\n        from hearthbreaker.cards.spells.neutral import spare_part_list\n        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=spare_part_list)),\n            PlayerSelector()))\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Aura"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 1, "_type": "Num"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}], "_type": "List"}, "arg": "enrage", "_type": "keyword"}], "hole1": 1, "_type": "Template7", "hole0": "Minion", "hole2": 3}], "hole0": "Warbot", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "MECH", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Warbot", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -1.33514404296875e-05, -4.947154957335442e-05, -0.0008340122294612229, -2.2171840100781992e-05, -1.442432312614983e-05, -2.3841855067985307e-07, 0.0, -9.5367431640625e-05, -0.000408172607421875, -2.47955322265625e-05, -5.7220458984375e-06, -1.5616407836205326e-05, -8.344646857949556e-07, -2.503394853192731e-06, -1.0728830375228426e-06, -0.03821372985839844, 0.0, 0.0, -1.1920928244535389e-07, -1.1920928955078125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -4.0883576730266213e-05, -1.0728830375228426e-06, 0.0, -1.71661376953125e-05, 0.0, -1.9073486328125e-06, -0.00012481212615966797, -1.1920928244535389e-07, -0.20772933959960938, 0.0, -3.814697265625e-05, -9.5367431640625e-06, -1.9073486328125e-05, -3.0517578125e-05, -0.000110626220703125, 0.0, -9.1552734375e-05, 0.0, -0.003452301025390625, -3.814697265625e-06, -3.933906555175781e-06, 0.0, -1.1444091796875e-05, 0.0, -4.38690185546875e-05, 0.0, -5.745887756347656e-05, -2.2649765014648438e-06, -0.01637876033782959, 0.0, -3.814697265625e-06, 0.0, -2.1457672119140625e-06, 0.0, -2.6702880859375e-05, -4.76837158203125e-05, -3.0517578125e-05, 0.0, -1.2636104656849056e-05, -3.814697265625e-06, 0.0, -8.225440979003906e-05, -1.1920928244535389e-07, -0.000885009765625, 0.0, -0.00715482234954834, 0.0, -0.13231182098388672, -9.5367431640625e-06, -0.0036449432373046875, -2.47955322265625e-05, -4.76837158203125e-05, -3.814697265625e-06, 0.0, -0.0013018845347687602, -3.576277322281385e-06, -0.000152587890625, -2.47955322265625e-05, -5.7220458984375e-06, -1.52587890625e-05, -4.9591064453125e-05, -0.0006212646258063614, -0.0002870559401344508, -2.0265579223632812e-06, -2.86102294921875e-05, -0.0007343292236328125, -3.814697265625e-06, -0.314820796251297, 0.0, -2.47955322265625e-05, -9.5367431640625e-06, -0.007677729241549969, -0.00014340877532958984, -1.1920928244535389e-07], "score": -0.7380887747545444, "choice_history": [43, 107, "Warbot", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Warbot", "<EOS>", 38, 100, "1", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "MECH", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 146, 128, "enrage", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Aura", "<EOS>", 139, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "1", "<EOS>", 41, 120, "Self", "Selector", "<EOS>"], "inferred_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n"}], "gold_code": "class Warbot(MinionCard):\n\n    def __init__(self):\n        super().__init__('Warbot', 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, minion_type=MINION_TYPE.MECH)\n\n    def create_minion(self, player):\n        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Deathrattle"}, "args": [{"_type": "Template9", "hole0": "Kill"}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "args": [{"_type": "Template9", "hole0": "EnemyPlayer"}, {"_type": "Template9", "hole0": "EnemyPlayer"}, {"_type": "Template9", "hole0": "RandomPicker"}]}]}, "arg": "deathrattle", "_type": "keyword"}, {"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Template9", "hole0": "Kill"}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "args": [{"_type": "Template9", "hole0": "EnemyPlayer"}, {"_type": "Template9", "hole0": "EnemyPlayer"}, {"_type": "Template9", "hole0": "RandomPicker"}]}]}, "arg": "deathrattle", "_type": "keyword"}], "hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 8}], "hole0": "Deathlord", "hole2": [{"hole3": "RARE", "hole1": 3, "_type": "Template4", "hole0": "Deathlord", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -4.1961669921875e-05, -0.003913847263902426, -0.0015280833467841148, -1.1920906217710581e-07, -5.125998541188892e-06, -1.7881377516459906e-06, -3.62396240234375e-05, -2.288818359375e-05, -0.0001506805419921875, -9.536738616588991e-07, -1.1920928244535389e-07, -4.768370445162873e-07, -1.9430925021879375e-05, -0.0011484622955322266, 0.0, -0.0011426210403442383, 0.0, -3.4332275390625e-05, 0.0, -7.271515642059967e-05, 0.0, -3.814697265625e-06, -6.67572021484375e-05, -1.9073486328125e-05, 0.0, -1.6689286894688848e-06, -3.814697265625e-06, 0.0, -0.0007082223892211914, -2.4437606043647975e-05, -0.10754108428955078, -7.62939453125e-06, -0.10174441337585449, -9.65590606938349e-06, -3.0517578125e-05, -1.9073486328125e-06, -7.62939453125e-06, 0.0, -0.0003837346739601344, -1.1801719665527344e-05, -0.0045948028564453125, -0.07141399383544922, -0.0002231597900390625, -0.5969406962394714, -0.000952386180870235, -7.62939453125e-06, -0.7419357299804688, -2.09808349609375e-05, -7.62939453125e-06, -0.44185709953308105, -2.7179718017578125e-05, -3.933906555175781e-06, -0.00772857666015625, -0.45474815368652344, -1.9073486328125e-06, -0.7163317203521729, -1.4439921379089355, -2.86102294921875e-05, -3.24249267578125e-05, 0.0, -0.31551384925842285, -0.002944492967799306, -1.9073486328125e-06, -9.5367431640625e-06, 0.0, -0.35294270515441895, -0.0038979088421911, -4.768370445162873e-07, -0.0001888275146484375, -1.1317286491394043, -2.3841830625315197e-06, -0.15270709991455078, -3.4332275390625e-05, -1.9073486328125e-06, 0.0, -0.2146155834197998, -5.841255187988281e-06, -0.000732421875, -0.21331501007080078, -3.814697265625e-06, -0.9324762225151062, -0.0007421599584631622, -2.09808349609375e-05, -0.6146383285522461, -5.7220458984375e-06, -1.9073486328125e-06, -0.18011227250099182, -8.344650268554688e-06, -5.841255187988281e-06, -0.009029388427734375, -0.28559398651123047, -1.9073486328125e-06, -0.5484704375267029, -1.3671269416809082, -2.6702880859375e-05, -1.33514404296875e-05, 0.0, -0.31512606143951416, -0.0032620588317513466, -1.9073486328125e-06, -5.7220458984375e-06, 0.0, -0.4486035108566284, -0.0038842642679810524, -4.768370445162873e-07], "score": -11.7973419141532, "choice_history": [43, 107, "Deathlord", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Deathlord", "<EOS>", "3", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "2", "<EOS>", "8", "<EOS>", 147, 128, "deathrattle", "<EOS>", 16, 73, 21, 95, "Deathrattle", "<EOS>", 139, 41, 120, "Kill", "<EOS>", 31, 73, 21, 95, "Minion", "Selector", "<EOS>", 140, 41, 120, "Enemy", "Player", "<EOS>", 41, 120, "Enemy", "Player", "<EOS>", 41, 120, "Random", "Picker", "<EOS>", 128, "deathrattle", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 41, 120, "Kill", "<EOS>", 31, 73, 21, 95, "Minion", "Selector", "<EOS>", 140, 41, 120, "Enemy", "Player", "<EOS>", 41, 120, "Enemy", "Player", "<EOS>", 41, 120, "Random", "Picker", "<EOS>"], "inferred_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, deathrattle=Deathrattle(Kill(), MinionSelector(\n            EnemyPlayer(), EnemyPlayer(), RandomPicker())), deathrattle=\n            Battlecry(Kill(), MinionSelector(EnemyPlayer(), EnemyPlayer(),\n            RandomPicker())))\n"}], "gold_code": "class Deathlord(MinionCard):\n\n    def __init__(self):\n        super().__init__('Deathlord', 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(2, 8, taunt=True, deathrattle=Deathrattle(Summon(\n            CardQuery(conditions=[IsMinion()], source=CARD_SOURCE.MY_DECK)),\n            PlayerSelector(EnemyPlayer())))\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template7", "hole0": "Minion", "hole2": 4}], "hole0": "Nerub'arWeblord", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "BuffUntil"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ManaChange"}, "args": [{"n": 4, "_type": "Num"}]}, {"keywords": [{"value": {"_type": "Template9", "hole0": "IsSpell"}, "arg": "condition", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}}, {"_type": "Template9", "hole0": "TurnEnded"}]}]}, {"keywords": [{"value": {"_type": "Template9", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "PlayerSelector"}}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Nerub'ar Weblord", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-5.7220458984375e-06, -0.0006046295166015625, -0.03705112263560295, -0.00011526874004630372, -7.271502545336261e-05, -2.3841823804104934e-07, -3.814697265625e-06, 0.0, -9.5367431640625e-06, -0.014001846313476562, -0.0004901885986328125, -1.33514404296875e-05, 0.0, -1.33514404296875e-05, 0.0, 0.0, 0.0, -2.6702880859375e-05, -5.7220458984375e-06, 0.0, -1.4305104514278355e-06, -1.239776611328125e-05, -5.686121585313231e-05, 0.0, 0.0, -1.9073486328125e-06, -7.402749906759709e-05, -1.1920928244535389e-07, -3.814697265625e-06, -4.9591064453125e-05, -7.62939453125e-06, -1.9073486328125e-06, -6.079673767089844e-06, -5.960462772236497e-07, -0.00013422952906694263, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -5.7220458984375e-06, -3.814697265625e-06, -4.57763671875e-05, 0.0, -0.00994718074798584, 0.0, -7.2479248046875e-05, -1.1444091796875e-05, -0.0010967254638671875, 0.0, -5.53131103515625e-05, -1.9073486328125e-06, 0.0, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -0.000278472900390625, -4.38690185546875e-05, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -0.03675912693142891, -0.04001736268401146, -3.814697265625e-06, -0.4217510223388672, -1.33514404296875e-05, -1.9073486328125e-06, -3.814697265625e-06, -0.42832136154174805, -0.2565970718860626, -1.1920928244535389e-07, -0.19179248809814453, -0.05139732360839844, -4.38690185546875e-05, -3.0517578125e-05, -2.288818359375e-05, -0.5470538139343262, -0.0004024380468763411, -1.33514404296875e-05, -8.58306884765625e-05, -0.0080108642578125, -1.9073486328125e-06, -0.5969381928443909, -0.00021958351135253906, -0.6704397201538086, -0.02061939239501953, 0.0, -3.814697265625e-06, -0.012403488159179688, -0.0003719329833984375, 0.0, -0.00946044921875, -7.62939453125e-06, -0.01165151596069336, -1.1920928244535389e-07, -0.030223846435546875, -5.7220458984375e-06, -0.0011214016703888774, -0.29651176929473877, -1.7166135876323096e-05, -2.09808349609375e-05, 0.0, -0.04249775409698486, -0.002216457389295101, 0.0, -0.002971649169921875, -0.03825187683105469, -1.9073486328125e-06, -1.9073486328125e-06, -0.0024776458740234375, -7.62939453125e-06, 0.0, -0.00034332275390625, 0.0, -0.0042285919189453125, 0.0, -5.7220458984375e-06, 0.0, -0.08668923377990723, -1.33514404296875e-05, -7.62939453125e-06, -0.0001125335693359375, 0.0, -2.491474151611328e-05, 0.0, -1.9073486328125e-06, 0.0, -0.0001392364501953125, 0.0, 0.0, -0.00030934810638427734, 0.0, -3.62396240234375e-05, 0.0], "score": -3.877030223619194, "choice_history": [43, 107, "Nerub'ar", "Weblord", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Nerub'ar", " ", "Weblord", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Buff", "Until", "<EOS>", 140, 31, 73, 21, 95, "Mana", "Change", "<EOS>", 138, 38, 100, "4", "<EOS>", 31, 72, 21, 95, "Card", "Selector", "<EOS>", 146, 128, "condition", "<EOS>", 25, 120, "Is", "Spell", "<EOS>", 41, 120, "Turn", "Ended", "<EOS>", 31, 72, 21, 95, "Player", "Selector", "<EOS>", 146, 128, "players", "<EOS>", 25, 120, "Both", "Player", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "1", "<EOS>", "4", "<EOS>"], "inferred_code": "class Nerub'arWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(\n            ManaChange(4), CardSelector(condition=IsSpell()), TurnEnded())),\n            PlayerSelector(players=BothPlayer())))\n\n    def create_minion(self, player):\n        return Minion(1, 4)\n"}], "gold_code": "class NerubarWeblord(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(\n            BothPlayer(), HasBattlecry()))])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "spell_targetable", "_type": "keyword"}], "hole1": 4, "_type": "Template7", "hole0": "Minion", "hole2": 6}], "hole0": "SpectralKnight", "hole2": [{"hole3": "COMMON", "hole1": 5, "_type": "Template4", "hole0": "Spectral Knight", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.814697265625e-06, -0.00011444091796875, -0.00019524575327523053, -2.1457672119140625e-06, -4.768370445162873e-07, -7.151509635150433e-06, -5.7220458984375e-06, -1.1920928244535389e-07, -5.7220458984375e-06, -0.06978797912597656, -0.000957489013671875, -3.838465272565372e-05, -0.0001517527998657897, -9.930132364388555e-05, -0.0001316070556640625, -0.0001571124594192952, -1.9073468138230965e-06, -0.00035941583337262273, 0.0, -9.894370305119082e-05, 0.0, -2.86102294921875e-05, 0.0, -1.81197356141638e-05, 0.0, 0.0, -7.62939453125e-06, -6.4849853515625e-05, 0.0, 0.0, -5.841255187988281e-06, -6.318072337307967e-06, -0.0002474783977959305, -2.4914475943660364e-05, -0.0061206817626953125, -5.7220458984375e-06, -0.016842126846313477, -1.9073486328125e-06, -0.0058231353759765625, -3.814697265625e-06, -0.0011788606643676758, 0.0], "score": -0.10249874225325328, "choice_history": [43, 107, "Spectral", "Knight", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Spectral", " ", "Knight", "<EOS>", "5", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "4", "<EOS>", "6", "<EOS>", 146, 128, "spell_targetable", "<EOS>", 22, 96, "False", "<EOS>"], "inferred_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=True)\n"}], "gold_code": "class SpectralKnight(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spectral Knight', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(4, 6, spell_targetable=False)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template7", "hole0": "Minion", "hole2": 5}], "hole0": "WailingSoul", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 1, "_type": "Num"}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 1, "_type": "Num"}]}]}], "_type": "List"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Wailing Soul", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.814697265625e-06, -3.4332275390625e-05, -4.303362584323622e-05, -0.00021324267436284572, -0.00035232058144174516, -1.0728717825259082e-06, -4.5299530029296875e-06, -2.3841855067985307e-07, -3.0517578125e-05, -1.1444091796875e-05, -8.392333984375e-05, -9.5367431640625e-06, 0.0, -2.288818359375e-05, 0.0, -1.9073486328125e-06, 0.0, -0.0003299713134765625, 0.0, 0.0, -1.0371154530730564e-05, -1.1682510375976562e-05, -1.7165990357170813e-05, 0.0, 0.0, -1.9073486328125e-06, -0.00011836769408546388, -0.00015401840209960938, -9.5367431640625e-06, -5.340576171875e-05, -3.814697265625e-06, -0.00018310546875, -5.292891728458926e-05, -3.4570634852570947e-06, -0.00014829629799351096, 0.0, -1.9073486328125e-06, 0.0, -7.62939453125e-06, -0.000274658203125, -0.0004291534423828125, -3.814697265625e-06, -0.0005363225936889648, 0.0, -0.0001430511474609375, 0.0, -0.0003529787063598633, 0.0, -0.0001678466796875, -1.1444091796875e-05, 0.0, 0.0, -2.300739288330078e-05, -7.987022399902344e-06, -3.24249267578125e-05, -0.0680074691772461, -1.9073486328125e-06, -1.9073486328125e-06, -4.00543212890625e-05, -0.004296841099858284, -0.0009432556107640266, -7.2479248046875e-05, -0.04781627655029297, -1.52587890625e-05, -0.019596099853515625, -4.38690185546875e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.000669955974444747, -0.00010680875857360661, -3.814697265625e-06, -0.000247955322265625, -4.76837158203125e-05, -7.62939453125e-06, -0.00043487548828125, -0.00013279795530252159, -0.007100462913513184, -1.9073486328125e-06, -0.0001220703125, -0.4402284622192383, -1.9073486328125e-06, -0.029778361320495605, -1.9073486328125e-06, -0.0007381439208984375, -0.000385284423828125, -1.9073486328125e-06, -2.47955322265625e-05, -0.009368062019348145, -0.0004925727262161672, -3.814697265625e-06, -0.010654449462890625, -1.1444091796875e-05, -6.67572021484375e-05, -0.0021419525146484375, -0.00017464050324633718, -0.021305203437805176, 0.0, -0.0001049041748046875, -0.004757881164550781, -1.9073486328125e-06, -0.01099312026053667, -2.0265579223632812e-06, -0.005565643310546875, 0.0, -0.03236269950866699, -2.1457672119140625e-06, 0.0, -0.0003910064697265625, 0.0, -2.0861582015641034e-05, 0.0, -3.814697265625e-06, -0.0003147125244140625, -4.9591064453125e-05, 0.0, -8.82148651726311e-06, -1.9311904907226562e-05, 0.0, -4.29153169534402e-06, -2.3841855067985307e-07], "score": -0.7236047109249171, "choice_history": [43, 107, "Wailing", "Soul", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Wailing", " ", "Soul", "<EOS>", 38, 100, "4", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 34, 91, 139, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "1", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "1", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "3", "<EOS>", "5", "<EOS>"], "inferred_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(1\n            )), Buff(ChangeHealth(1))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}], "gold_code": "class WailingSoul(MinionCard):\n\n    def __init__(self):\n        super().__init__('Wailing Soul', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 5)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Aura"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 3, "_type": "Num"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}], "_type": "List"}, "arg": "enrage", "_type": "keyword"}], "hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 3}], "hole0": "AmaniBerserker", "hole2": [{"hole3": "COMMON", "hole1": 2, "_type": "Template4", "hole0": "Amani Berserker", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -5.340576171875e-05, -7.986990567587782e-06, -0.00010501786891836673, -4.0531076592742465e-06, -1.7992162611335516e-05, -1.0490395652595907e-05, -4.887569048150908e-06, -0.000110626220703125, -4.9591064453125e-05, -0.0001506805419921875, -3.576278118089249e-07, -8.92864482011646e-05, -1.9073486328125e-06, -2.3841855067985307e-07, -2.5033946258190554e-06, -3.2066785934148356e-05, -0.00036787899443879724, 0.0, -4.3034422560594976e-05, 0.0, -0.000209808349609375, 0.0, -2.5391527742613107e-05, 0.0, -5.7220458984375e-06, -7.05718994140625e-05, -4.38690185546875e-05, -5.7220458984375e-06, -4.887569048150908e-06, -9.5367431640625e-06, 0.0, -6.198873961693607e-06, -3.814689989667386e-06, -0.10338687896728516, -3.814697265625e-06, -0.005520340986549854, -1.9073486328125e-06, -0.0070438385009765625, -0.0020236968994140625, -0.0533294677734375, -0.0001888275146484375, -2.86102294921875e-05, -1.9073486328125e-06, 0.0, -0.0003818272380158305, -1.025196434056852e-05, -0.000873565673828125, -0.000133514404296875, -7.62939453125e-06, -1.1444091796875e-05, -0.000644683837890625, -0.0009614838636480272, -0.0005931853083893657, -2.2649765014648438e-06, -1.52587890625e-05, -0.000186920166015625, -5.7220458984375e-06, -0.3087019622325897, -9.5367431640625e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0019383870530873537, -0.00015115737915039062, 0.0], "score": -0.48761277945359893, "choice_history": [43, 107, "Amani", "Berserker", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Amani", " ", "Berserker", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>", 146, 128, "enrage", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Aura", "<EOS>", 139, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "3", "<EOS>", 41, 120, "Self", "Selector", "<EOS>"], "inferred_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}], "gold_code": "class AmaniBerserker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Amani Berserker', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template9", "hole0": "CardPlayed"}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "AddCard"}, "args": [{"keywords": [{"value": {"value": {"_type": "Name", "id": "CARD_SOURCE"}, "attr": "<UNK>", "_type": "Attribute"}, "arg": "source", "_type": "keyword"}, {"value": {"value": true, "_type": "NameConstant"}, "arg": "<UNK>", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "CardQuery"}}]}, {"_type": "Template9", "hole0": "PlayerSelector"}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 5, "_type": "Template7", "hole0": "Minion", "hole2": 7}], "hole0": "ArchmageAntonidas", "hole2": [{"hole3": "LEGENDARY", "hole1": 7, "_type": "Template4", "hole0": "Archmage Antonidas", "hole2": "ROGUE"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -2.288818359375e-05, -0.08603346347808838, -0.0004389514506328851, -0.0009607265237718821, -4.7683579396107234e-07, -4.88758041683468e-06, -2.2649765014648438e-06, -0.0001659393310546875, -5.91278076171875e-05, -2.47955322265625e-05, -1.2993727978027891e-05, -4.2199935705866665e-05, -2.1457672119140625e-06, 0.0, -0.0005014985799789429, -8.702254490344785e-06, -0.127194344997406, 0.0, -0.0008808339480310678, 0.0, -3.0279157726909034e-05, 0.0, -0.0004507538687903434, 0.0, -1.33514404296875e-05, -0.003467559814453125, -3.4332275390625e-05, -3.814697265625e-06, 0.0, -6.866455078125e-05, -4.887569048150908e-06, -0.030840635299682617, -0.0002884448622353375, -0.000156402587890625, -3.4332275390625e-05, -0.00047457218170166016, -5.7220458984375e-05, -9.72747802734375e-05, -3.814697265625e-06, -4.38690185546875e-05, -4.00543212890625e-05, -2.09808349609375e-05, -5.53131103515625e-05, -1.9073486328125e-06, -0.0007516145706176758, -5.841255187988281e-06, -2.288818359375e-05, -0.245269775390625, -1.9073486328125e-06, -0.4751666784286499, -0.2515079975128174, -6.4849853515625e-05, -0.12329673767089844, -7.62939453125e-06, 0.0, 0.0, -0.0002727508544921875, -0.0001201629638671875, 0.0, -0.0005779266357421875, -4.1961669921875e-05, -6.29425048828125e-05, -3.814697265625e-06, 0.0, -0.014611482620239258, -0.0006921288440935314, -7.82012939453125e-05, -1.1444091796875e-05, -0.0005950927734375, -0.005761146545410156, -1.9073486328125e-06, -1.9073486328125e-06, -0.00021886825561523438, -0.000576019287109375, 0.0, -0.43602657318115234, -3.814697265625e-05, -0.0013772249221801758, -1.9073486328125e-06, -0.0023603439331054688, -7.43865966796875e-05, -7.2479248046875e-05, 0.0, -0.0014448165893554688, 0.0, -0.004413485527038574, -1.9073486328125e-06, -0.0002307891845703125, -0.0013009309768676758, 0.0, -0.009028434753417969, -2.6702880859375e-05, -6.914138793945312e-05, 0.0, -3.4332275390625e-05, -3.814697265625e-06, -0.0001201629638671875, -3.814697265625e-05, 0.0], "score": -1.8289321111660684, "choice_history": [43, 107, "Archmage", "Antonidas", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Archmage", " ", "Antonidas", "<EOS>", "7", "<EOS>", "ROGUE", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "5", "<EOS>", "7", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 41, 120, "Card", "Played", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Add", "Card", "<EOS>", 138, 31, 72, 21, 95, "Card", "Query", "<EOS>", 147, 128, "source", "<EOS>", 13, 66, 21, 95, "CARD_SOURCE", "<EOS>", "<UNK>", "<EOS>", 128, "<UNK>", "<EOS>", 22, 96, "True", "<EOS>", 41, 120, "Player", "Selector", "<EOS>"], "inferred_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(CardPlayed(), ActionTag(AddCard\n            (CardQuery(source=CARD_SOURCE.<UNK>, <UNK>=True)),\n            PlayerSelector()))])\n"}], "gold_code": "class ArchmageAntonidas(MinionCard):\n\n    def __init__(self):\n        super().__init__('Archmage Antonidas', 7, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(\n            hearthbreaker.cards.Fireball()), PlayerSelector()))])\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "change_attack", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"n": 4, "_type": "Num"}]}], "hole0": "Bananas", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Bananas", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.0517578125e-05, -2.288818359375e-05, -1.2278481335670222e-05, -1.0728796951298136e-05, -1.7876445781439543e-06, -2.3603439331054688e-05, -4.768370445162873e-07, -2.6702880859375e-05, -5.7220458984375e-06, -0.000125885009765625, -7.62939453125e-06, 0.0, -5.745883026975207e-05, -1.6212332411669195e-05, -8.797644841251895e-05, -1.1920928244535389e-07, -0.04035186767578125, -9.5367431640625e-06, -1.9073486328125e-06, -4.768370445162873e-07, -3.814697265625e-06, -3.814697265625e-06, -2.47955322265625e-05, -9.77460149442777e-06, -1.0371208190917969e-05, -1.9073486328125e-05, -3.814697265625e-06, 0.0, 0.0, -6.473064422607422e-05, 0.0, -0.0003224610409233719, 0.0, -3.814697265625e-06, -9.5367431640625e-06, -1.9073486328125e-06, -1.9073486328125e-06, -4.9591064453125e-05, -1.9073486328125e-06, -0.000680088996887207, 0.0, -3.24249267578125e-05, -5.7220458984375e-06, -3.1709656468592584e-05, -2.6702880859375e-05, -9.5367431640625e-06, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -2.09808349609375e-05, 0.0, -3.814697265625e-06, 0.0, -5.352497100830078e-05, -7.62939453125e-06, -0.00029599666595458984, 0.0, -0.0016093254089355469, 0.0, -7.62939453125e-06, 0.0, -1.3708998267247807e-05, 0.0, -0.000370025634765625, -1.52587890625e-05, -9.095337009057403e-05, -9.894352842820808e-06, -0.2871589660644531, -5.7220458984375e-06, -1.52587890625e-05, -5.7220458984375e-06, 0.0, -0.0008509353501722217, -2.169585604860913e-05, -2.47955322265625e-05, 0.0, -6.29425048828125e-05, -1.9073486328125e-06, 0.0, -0.00012468514614738524, -1.7881377516459906e-06, -1.52587890625e-05, 0.0, -0.0002657175064086914, 0.0, -0.0002117156982421875, -0.0014972686767578125, -7.62939453125e-06, 0.0, -7.2479248046875e-05, 0.0, -0.00011467933654785156, -1.1920928244535389e-07, -2.241134461655747e-05, -9.536738616588991e-07, -0.35640478134155273, -2.384185791015625e-06, -7.62939453125e-06, -0.00018310546875, -9.5367431640625e-06, -1.0598039627075195, 0.0], "score": -1.7515612906340579, "choice_history": [43, 109, "Bananas", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 142, 39, 104, "Bananas", "<EOS>", 38, 100, "1", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 37, 96, "False", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 152, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 138, 38, 100, "4", "<EOS>"], "inferred_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, True, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(4)\n"}], "gold_code": "class Bananas(SpellCard):\n\n    def __init__(self):\n        super().__init__('Bananas', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1)\n        self.target.increase_health(1)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "change_attack", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"left": {"n": 1, "_type": "Num"}, "op": {"_type": "Sub"}, "_type": "BinOp", "right": {"_type": "Call", "func": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "attr": "calculate_attack", "_type": "Attribute"}}}]}], "hole0": "BlessedChampion", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Blessed Champion", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "PALADIN", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-9.918212890625e-05, -0.00011444091796875, -0.00039869005559012294, -8.535020606359467e-05, -3.814689989667386e-06, -2.216591383330524e-05, -0.0005228519439697266, -1.311301275563892e-06, -5.7220458984375e-05, -9.1552734375e-05, -0.001194000244140625, -7.62939453125e-06, -2.09808349609375e-05, -0.0007241964340209961, -2.622600959512056e-06, -0.00011515335063450038, 0.0, -0.017368316650390625, -1.9073486328125e-06, -3.814697265625e-06, -0.0013554443139582872, -1.049041748046875e-05, -1.0251946150674485e-05, -3.576278118089249e-07, 0.0, -3.814697265625e-06, -1.7046782886609435e-05, -5.364412118069595e-06, 0.0, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -7.629378160345368e-06, -1.1920928244535389e-07, -0.4728487730026245, 0.0, 0.0, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.000152587890625, -1.9073486328125e-05, -0.10135746002197266, -1.9073486328125e-06, -0.000156402587890625, -1.9073486328125e-06, -0.00107574462890625, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -6.866455078125e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -8.96453857421875e-05, 0.0, -0.0005137920379638672, 0.0, -0.005983829498291016, -3.814697265625e-06, -9.655952453613281e-06, 0.0, -4.29153169534402e-06, 0.0, -0.0004444122314453125, -3.814697265625e-06, -2.3483997210860252e-05, -1.0728830375228426e-06, -0.05134868621826172, -2.09808349609375e-05, -1.9073486328125e-05, -0.0001468658447265625, -1.9073486328125e-06, -0.0002654577838256955, -1.4305012882687151e-05, -7.748603820800781e-06, 0.0, -1.9073486328125e-06, -0.0001430511474609375, -1.9073486328125e-06, -0.0006063529872335494, 0.0, -4.1961669921875e-05, -1.9073486328125e-06, -0.0004286766052246094, -1.1920928244535389e-07, -0.007411956787109375, -0.0002002716064453125, -3.814697265625e-06, 0.0, -8.0108642578125e-05, 0.0, -1.752376374497544e-05, -1.1920928244535389e-07, -0.00019478489411994815, -2.3841855067985307e-07, -0.14949417114257812, -5.9604644775390625e-06, -0.0007448196411132812, -0.1140594482421875, -0.01669025421142578, -0.29048824310302734, 0.0, -0.044671881943941116, -1.1920928244535389e-07, -0.14613819122314453, -0.0001926422119140625, -0.00519561767578125, -9.5367431640625e-06, -3.814697265625e-06, -0.0002422332763671875, 0.0, -0.0001850128173828125, 0.0, -0.016525505110621452, -5.960462772236497e-07, -0.008691903203725815, 0.0, -0.03184528648853302, -4.76837158203125e-05], "score": -1.4912311273827186, "choice_history": [43, 109, "Blessed", "Champion", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Blessed", " ", "Champion", "<EOS>", 38, 100, "5", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "PALADIN", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 152, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 138, 29, 68, 23, 100, "1", "<EOS>", 45, 16, 71, 13, 66, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>"], "inferred_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.change_attack(1 - self.target.calculate_attack())\n"}], "gold_code": "class BlessedChampion(SpellCard):\n\n    def __init__(self):\n        super().__init__('Blessed Champion', 5, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.RARE, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(DoubleAttack()))\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template7", "hole0": "Minion", "hole2": 5}], "hole0": "CabalShadowPriest", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "GiveEffect"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 2, "_type": "Num"}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 2, "_type": "Num"}]}]}], "_type": "List"}, {"_type": "Template9", "hole0": "TurnEnded"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Cabal Shadow", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.0517578125e-05, -2.288818359375e-05, -0.0008688002708368003, -0.11906015872955322, -0.6532784104347229, -1.3112935448589269e-05, -1.1920838005607948e-07, -5.841255187988281e-06, 0.0, -0.0001392364501953125, -5.7220458984375e-05, -6.29425048828125e-05, -5.7220458984375e-06, 0.0, -7.62939453125e-06, 0.0, -1.9073486328125e-06, 0.0, -2.6702880859375e-05, -1.9073486328125e-06, 0.0, -0.00017678493168205023, -1.1444091796875e-05, -8.618830906925723e-05, -0.00031888484954833984, 0.0, -1.9073486328125e-06, -0.00015090870147105306, 0.0, -3.814697265625e-06, -4.00543212890625e-05, 0.0, -3.814697265625e-06, -2.15768777707126e-05, 0.0, -0.6417981386184692, -3.814697265625e-06, -1.9073486328125e-05, -3.0517578125e-05, -1.9073486328125e-06, -2.09808349609375e-05, -2.288818359375e-05, -3.814697265625e-06, -0.11864328384399414, -3.814697265625e-06, -0.00046539306640625, -1.9073486328125e-06, -0.0005245208740234375, 0.0, -4.1961669921875e-05, -7.62939453125e-06, -1.9073486328125e-06, -3.814697265625e-06, -4.076957702636719e-05, -3.814697265625e-05, -0.00377655029296875, -0.3697700500488281, -3.814697265625e-06, -1.71661376953125e-05, -0.0001773834228515625, -0.04658198356628418, -0.9780744314193726, -0.0005456209182739258, -0.40650081634521484, -0.25334644317626953, -8.0108642578125e-05, -0.33689117431640625, -0.0024566650390625, -1.9073486328125e-06, -3.814697265625e-06, -2.6702880859375e-05, -0.9483845233917236, -3.826618194580078e-05, -5.7220458984375e-06, -0.0002880096435546875, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -0.05874216556549072, -0.0006872415542602539, -1.9073486328125e-05, -0.000274658203125, -0.000637054443359375, 0.0, -0.0012701736995950341, 0.0, -0.023748397827148438, -9.5367431640625e-06, -1.9073486328125e-06, -1.52587890625e-05, -0.0010433197021484375, -0.0001392364501953125, -3.24249267578125e-05, -0.0021209716796875, -2.288818359375e-05, -3.814697265625e-06, -1.33514404296875e-05, -0.003798961639404297, -0.3783336877822876, -9.5367431640625e-05, -0.0001850128173828125, -0.0008716583251953125, 0.0, -0.008708953857421875, 0.0, -0.0027637481689453125, -3.814697265625e-06, -0.6787492036819458, -0.022670388221740723, 0.0, -0.05970001220703125, -3.814697265625e-05, -0.03211498260498047, 0.0, 0.0, -0.00012969970703125, 0.0, -5.841255187988281e-06, 0.0, -1.9073486328125e-05, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -1.33514404296875e-05, -9.918212890625e-05, 0.0, -0.00041095304186455905, 0.0], "score": -6.160564152090956, "choice_history": [43, 107, "Cabal", "Shadow", "Priest", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Cabal", " ", "Shadow", "<EOS>", 38, 100, "6", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Give", "Effect", "<EOS>", 139, 34, 91, 139, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "2", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "2", "<EOS>", 41, 120, "Turn", "Ended", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "4", "<EOS>", "5", "<EOS>"], "inferred_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow', 6, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC, battlecry=Battlecry(GiveEffect([Buff(\n            ChangeAttack(2)), Buff(ChangeAttack(2))], TurnEnded()),\n            SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}], "gold_code": "class CabalShadowPriest(MinionCard):\n\n    def __init__(self):\n        super().__init__('Cabal Shadow Priest', 6, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(\n            AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=\n            UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 5)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"value": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "attr": "index", "_type": "Attribute"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "index"}]}, {"_type": "If", "body": [{"value": {"_type": "Template9", "hole0": "Cone"}, "_type": "Assign", "targets": [{"_type": "Name", "id": "<UNK>"}]}], "test": {"comparators": [{"n": 0, "_type": "Num"}], "left": {"_type": "Name", "id": "<UNK>"}, "ops": [{"_type": "Gt"}], "_type": "Compare"}}, {"hole1": "change_attack", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"n": 2, "_type": "Num"}]}], "hole0": "ConeOfCold", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Cone of Cold", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.52587890625e-05, -0.000202178955078125, -9.775113539944869e-06, -0.0004156357026658952, -0.0018594847060739994, 0.0, -2.384149411227554e-07, -2.6106834411621094e-05, -1.1920928244535389e-07, -1.52587890625e-05, -6.67572021484375e-05, -4.76837158203125e-05, -4.38690185546875e-05, 0.0, -4.76837158203125e-05, 0.0, -3.6716461181640625e-05, -1.1920928244535389e-07, -6.866455078125e-05, -3.0517578125e-05, 0.0, -7.033334895822918e-06, -7.62939453125e-06, -2.264974000354414e-06, -5.14984130859375e-05, -0.008350372314453125, 0.0, 0.0, -1.9073486328125e-06, -1.215927204611944e-05, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -7.62939453125e-06, 0.0, -5.7220440794480965e-06, 0.0, -0.883034348487854, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0001697540283203125, -2.47955322265625e-05, -4.57763671875e-05, 0.0, -0.000339508056640625, 0.0, -4.38690185546875e-05, 0.0, -7.62939453125e-06, 0.0, -7.62939453125e-06, 0.0, -7.62939453125e-06, 0.0, -0.0005168914794921875, -1.9073486328125e-06, -4.792213439941406e-05, 0.0, -0.05523240566253662, 0.0, -1.9073486328125e-06, 0.0, -1.0728830375228426e-06, 0.0, -1.71661376953125e-05, -7.62939453125e-06, -1.7523643691674806e-05, -4.768370445162873e-07, -0.029639244079589844, -9.5367431640625e-06, -5.7220458984375e-05, -3.814697265625e-06, -1.9073486328125e-06, -1.5735626220703125e-05, 0.0, -2.47955322265625e-05, 0.0, -7.62939453125e-06, -0.000102996826171875, 0.0, -1.7404556274414062e-05, 0.0, -1.9073486328125e-05, 0.0, -1.71661376953125e-05, 0.0, -0.48072242736816406, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.814697265625e-06, -0.9989069700241089, -6.246371776796877e-05, -0.00682830810546875, 0.0, -0.00074005126953125, 0.0, -3.814697265625e-06, 0.0, -3.933906555175781e-06, -3.814697265625e-06, -3.719329833984375e-05, 0.0, -0.7823168039321899, 0.0, -0.23737335205078125, -0.012731552124023438, -3.814697265625e-05, -9.5367431640625e-06, -0.04494190216064453, 0.0, -0.17006540298461914, -1.1920928244535389e-07, -3.814697265625e-05, -0.24628639221191406, -0.00019073486328125, -0.0012178421020507812, -3.814697265625e-06, -0.0006340976106002927, 0.0, -0.0233001708984375, -0.0005664825439453125, -4.57763671875e-05, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.4194997549057007, -1.1920928244535389e-07, -0.6195812225341797, -0.0003566741943359375, -0.632063090801239, -0.00998254120349884, -0.07367134094238281, -0.0007152557373046875, -0.011037826538085938, -5.53131103515625e-05, -4.9591064453125e-05, 0.0, -9.655952453613281e-06, 0.0, -7.748603820800781e-06, 0.0, -0.7571612596511841, 0.0, -0.0001468658447265625, -0.00128936767578125, 0.0, -0.28046566247940063, 0.0], "score": -7.793979155534515, "choice_history": [43, 109, "Cone", "Of", "Cold", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Cone", " ", "of", " ", "Cold", "<EOS>", 38, 100, "4", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 154, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 48, 65, 138, 36, 95, "index", "<EOS>", 13, 66, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "index", "<EOS>", 54, 82, 17, 76, 21, 95, "<UNK>", "<EOS>", 135, 5, 138, 38, 100, "0", "<EOS>", 151, 48, 65, 138, 36, 95, "<UNK>", "<EOS>", 25, 120, "Cone", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 138, 38, 100, "2", "<EOS>"], "inferred_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        index = self.target.index\n        if <UNK> > 0:\n            <UNK> = Cone()\n        self.target.change_attack(2)\n"}], "gold_code": "class ConeOfCold(SpellCard):\n\n    def __init__(self):\n        super().__init__('Cone of Cold', 4, CHARACTER_CLASS.MAGE,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.add_buff(Buff(Frozen()))\n        index = self.target.index\n        if self.target.index < len(self.target.player.minions) - 1:\n            minion = self.target.player.minions[index + 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n        self.target.damage(player.effective_spell_damage(1), self)\n        if self.target.index > 0:\n            minion = self.target.player.minions[index - 1]\n            minion.damage(player.effective_spell_damage(1), self)\n            minion.add_buff(Buff(Frozen()))\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 3}], "hole0": "DefenderOfArgus", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}, "args": [{"_type": "Template9", "hole0": "HasTaunt"}, {"_type": "Template9", "hole0": "EnemyPlayer"}]}]}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Count"}, "args": [{"_type": "Template9", "hole0": "CardSelector"}]}]}]}], "_type": "List"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Defender of Argus", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -2.86102294921875e-05, -6.198845221661031e-05, -0.008867021650075912, -0.00018916724366135895, -0.0037261168472468853, -3.576224116841331e-07, -1.4543528777721804e-05, -5.960462772236497e-07, -9.5367431640625e-06, -1.52587890625e-05, -4.00543212890625e-05, -5.7220458984375e-06, 0.0, -1.5497207641601562e-05, -1.9073486328125e-06, -1.9073486328125e-06, -1.1920928244535389e-07, -6.103515625e-05, -1.9073486328125e-06, 0.0, -1.5020343198557384e-05, -5.7220458984375e-06, -2.5510462364763953e-05, -1.919269561767578e-05, -0.0001620053080841899, -3.933906555175781e-06, 0.0, -1.9073486328125e-06, -0.0006817536195740104, -3.814697265625e-06, -1.9073486328125e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.000141143798828125, -6.937979924259707e-05, -6.318082796497038e-06, -0.00014448114961851388, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.0005893707275390625, -0.000576019287109375, -3.814697265625e-06, -0.0010319948196411133, 0.0, -6.29425048828125e-05, 0.0, -0.0002766847610473633, -1.1920928244535389e-07, -0.0032672882080078125, -2.288818359375e-05, 0.0, 0.0, -9.655952453613281e-06, -2.3841855067985307e-07, -0.001468658447265625, -0.026876449584960938, -1.9073486328125e-06, -1.9073486328125e-06, -3.814697265625e-06, -0.023153362795710564, -0.0002028747694566846, -0.000392913818359375, -0.003265380859375, -9.5367431640625e-06, -0.000972747802734375, -2.86102294921875e-05, -3.814697265625e-06, -5.7220458984375e-06, 0.0, -0.003942248877137899, -0.0001518650387879461, -5.7220458984375e-06, -0.0001373291015625, -2.09808349609375e-05, -1.9073486328125e-06, -1.33514404296875e-05, -0.0005281384801492095, -0.02506721019744873, 0.0, -0.004932403564453125, -0.13897037506103516, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.5715755224227905, -1.0132789611816406e-05, -0.00011444091796875, -0.0002593994140625, -0.0001087188720703125, -0.6377758979797363, -0.2816110849380493, -0.18650436401367188, -7.05718994140625e-05, -3.814697265625e-06, -1.33514404296875e-05, -0.1967538595199585, -2.288818359375e-05, 0.0, -0.2668590545654297, -0.0003662109375, -3.62396240234375e-05, -0.12145848572254181, -0.06869791448116302, -0.010918855667114258, -0.000637054443359375, -7.62939453125e-06, -0.10922408103942871, -0.005704518407583237, -7.62939453125e-06, -9.1552734375e-05, -3.24249267578125e-05, -1.9073486328125e-06, 0.0, -0.014912843704223633, -6.794924956921022e-06, -2.86102294921875e-05, -0.0010280609130859375, -9.5367431640625e-06, -5.7220458984375e-06, -3.814697265625e-06, -0.0004609638708643615, -0.002609014278277755, -3.576278118089249e-07, -0.006816864013671875, -0.6739234924316406, -7.62939453125e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.6432843208312988, -2.9444639949360862e-05, -2.47955322265625e-05, -0.33873748779296875, -1.33514404296875e-05, -0.05780410021543503, -0.0007274710806086659, -1.1920922133867862e-06, -0.0014896392822265625, -3.814697265625e-06, -0.009728431701660156, -1.978873842745088e-05, 0.0, -0.0003032684326171875, 0.0, -1.4781910977035295e-05, 0.0, -1.9073486328125e-06, -1.1444091796875e-05, -4.38690185546875e-05, 0.0, -6.318092346191406e-06, -6.556510470545618e-06, 0.0, -5.722038622479886e-06, 0.0], "score": -4.461329461034396, "choice_history": [43, 107, "Defender", "Of", "Argus", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Defender", " ", "of", " ", "Argus", "<EOS>", 38, 100, "4", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 34, 91, 139, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 31, 73, 21, 95, "Attribute", "<EOS>", 139, 39, 104, "<UNK>", "<EOS>", 31, 73, 21, 95, "Minion", "Selector", "<EOS>", 139, 41, 120, "Has", "Taunt", "<EOS>", 41, 120, "Enemy", "Player", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 31, 73, 21, 95, "Count", "<EOS>", 138, 41, 120, "Card", "Selector", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Attribute('<UNK>', MinionSelector(HasTaunt(), EnemyPlayer())))),\n            Buff(ChangeHealth(Count(CardSelector())))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}], "gold_code": "class DefenderOfArgus(MinionCard):\n\n    def __init__(self):\n        super().__init__('Defender of Argus', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(Taunt()), Buff\n            (ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(\n            Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "windfury", "_type": "keyword"}], "hole1": 2, "_type": "Template7", "hole0": "Weapon", "hole2": 8}], "hole0": "Doomhammer", "hole2": [{"hole3": [{"value": {"n": 2, "_type": "Num"}, "arg": "overload", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Doomhammer", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "SHAMAN", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "EPIC", "_type": "Attribute"}]}], "hole1": "WeaponCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -6.29425048828125e-05, -0.002536551095545292, -8.74967299751006e-05, -4.6491513785440475e-06, -0.0001748800277709961, -5.841255187988281e-06, -5.7220458984375e-05, -0.015825271606445312, -0.00060272216796875, -2.09808349609375e-05, 0.0, -2.288818359375e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -4.76837158203125e-05, -2.288818359375e-05, -5.7220458984375e-06, -4.768360213347478e-06, -0.0002231597900390625, 0.0, -1.9073486328125e-06, -0.0002634512784425169, -3.576278118089249e-07, -7.62939453125e-06, -3.814697265625e-06, -3.814697265625e-06, -3.814697265625e-06, -2.6583491489873268e-05, -1.1444091796875e-05, -0.004705667495727539, 0.0, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, -3.814697265625e-06, -0.0001068115234375, 0.0, -0.196502685546875, -1.9073486328125e-06, -2.288818359375e-05, -1.52587890625e-05, -0.011750221252441406, 0.0, -0.00080108642578125, 0.0, -0.0025875563733279705, 0.0, -0.000354766845703125, 0.0, -0.00012087821960449219, 0.0, -4.76837158203125e-05, -4.9591064453125e-05, -0.000720977783203125, -2.0265373677830212e-05, -3.588141771615483e-05, -9.34600830078125e-05, 0.0, -0.00030303001403808594, -1.311301275563892e-06, -0.08920097351074219, -1.9073486328125e-06, -0.012691736221313477, 0.0, -0.000553131103515625, -5.91278076171875e-05, -0.001096963882446289, 0.0], "score": -0.3418990476006343, "choice_history": [43, 107, "Doomhammer", "<EOS>", "Weapon", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Doomhammer", "<EOS>", 38, 100, "5", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "SHAMAN", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "EPIC", "<EOS>", 146, 128, "overload", "<EOS>", 23, 100, "2", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Weapon", "<EOS>", "2", "<EOS>", "8", "<EOS>", 146, 128, "windfury", "<EOS>", 22, 96, "True", "<EOS>"], "inferred_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_minion(self, player):\n        return Weapon(2, 8, windfury=True)\n"}], "gold_code": "class Doomhammer(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Doomhammer', 5, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC, overload=2)\n\n    def create_weapon(self, player):\n        return Weapon(2, 8, buffs=[Buff(Windfury())])\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"value": {"left": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "attr": "health", "_type": "Attribute"}, "op": {"_type": "Sub"}, "_type": "BinOp", "right": {"_type": "Call", "func": {"value": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "attr": "calculate_attack", "_type": "Attribute"}}}, "_type": "Assign", "targets": [{"_type": "Name", "id": "<UNK>"}]}, {"hole1": "change_attack", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"n": 1, "_type": "Num"}]}, {"hole1": "add_buff", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 2, "_type": "Num"}]}]}]}], "hole0": "EarthShock", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Earth Shock", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.4332275390625e-05, -0.000164031982421875, -3.8742269680369645e-05, -0.00014006110723130405, -4.768370445162873e-07, -7.151393219828606e-07, -3.910063605871983e-05, -5.960462772236497e-07, -7.62939453125e-05, -3.814697265625e-06, -0.0001316070556640625, -4.9591064453125e-05, 0.0, -1.33514404296875e-05, -1.4305104514278355e-06, -4.947185516357422e-05, -1.1920928244535389e-07, -0.0043621063232421875, -0.0007839202880859375, -1.9073486328125e-06, -7.867782187531702e-06, -1.9431065084063448e-05, -2.861018856492592e-06, -2.3841855067985307e-07, 0.0, 0.0, -1.406694354955107e-05, -6.4373016357421875e-06, -1.9073486328125e-06, -5.7220458984375e-06, -1.33514404296875e-05, 0.0, -1.0609614946588408e-05, 0.0, -0.13289213180541992, 0.0, 0.0, 0.0, -1.9073486328125e-06, 0.0, -9.5367431640625e-05, -3.0517578125e-05, -6.866455078125e-05, 0.0, -0.000118255615234375, 0.0, -3.457069396972656e-05, 0.0, -5.7220458984375e-06, 0.0, -2.09808349609375e-05, 0.0, -5.7220458984375e-06, 0.0, -0.0006866455078125, -3.814697265625e-06, -5.161762237548828e-05, 0.0, -0.00948643684387207, 0.0, -2.09808349609375e-05, 0.0, -9.417505680175964e-06, 0.0, -5.7220458984375e-05, -1.52587890625e-05, -7.40277610020712e-05, -1.6689286894688848e-06, -0.5739965438842773, -0.0002040863037109375, -1.71661376953125e-05, -8.7738037109375e-05, -5.7220458984375e-06, -2.1219222617219202e-05, -6.318072337307967e-06, -1.33514404296875e-05, 0.0, -5.7220458984375e-06, -4.38690185546875e-05, 0.0, -4.649161837733118e-06, 0.0, -2.47955322265625e-05, -1.9073486328125e-06, -3.4332275390625e-05, 0.0, -0.0066814422607421875, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -5.7220458984375e-06, -0.5953521728515625, -6.079655122448457e-06, -0.7187156677246094, -0.001132965087890625, -0.117645263671875, 0.0, -0.0003185272216796875, 0.0, -0.0001277923583984375, 0.0, -1.0371208190917969e-05, -1.9073486328125e-06, -2.0384788513183594e-05, 0.0, -0.9197883605957031, -1.1920928244535389e-07, -0.022817611694335938, -0.0025911331176757812, -0.6301460266113281, -9.5367431640625e-06, 0.0, -0.000385284423828125, 0.0, -0.00046539306640625, 0.0, -0.0007967948913574219, -2.3841855067985307e-07, -3.8862206565681845e-05, 0.0, -0.011656403541564941, -0.0001462697982788086, -0.022953033447265625, -5.340576171875e-05, -6.29425048828125e-05, 0.0, -0.008420944213867188, -5.7220458984375e-06, -0.00021660327911376953, -3.814697265625e-06, -2.3007301933830604e-05, 0.0, -0.03614223003387451, -0.00010716915130615234, -2.288818359375e-05, -0.04052257537841797, -1.9073486328125e-06, -0.0004463684163056314, -1.3113020031596534e-05, -0.0069065093994140625, -0.0001068115234375, -2.09808349609375e-05, 0.0, -0.00011444091796875, 0.0, -0.00014281269977800548, -2.0265579223632812e-06, -0.0008106228779070079, 0.0, -0.6153687238693237, -7.62939453125e-06, -5.7220458984375e-06, -5.91278076171875e-05, -7.62939453125e-05, -3.814697265625e-06, 0.0, -0.0008336305618286133, -2.9087066650390625e-05, -3.814697265625e-06, -0.015300750732421875, -3.0517578125e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.004486681427806616, -0.30235183238983154, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, 0.0, -0.012087367475032806, -1.9073486328125e-06], "score": -4.820767820584919, "choice_history": [43, 109, "Earth", "Shock", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Earth", " ", "Shock", "<EOS>", 38, 100, "1", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 154, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 48, 65, 138, 36, 95, "<UNK>", "<EOS>", 14, 68, 13, 66, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "health", "<EOS>", 45, 16, 71, 13, 66, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "calculate_attack", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "change_attack", "<EOS>", 138, 38, 100, "1", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 138, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "2", "<EOS>"], "inferred_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.HUNTER,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        <UNK> = self.target.health - self.target.calculate_attack()\n        self.target.change_attack(1)\n        self.target.add_buff(Buff(ChangeAttack(2)))\n"}], "gold_code": "class EarthShock(SpellCard):\n\n    def __init__(self):\n        super().__init__('Earth Shock', 1, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.silence()\n        self.target.damage(player.effective_spell_damage(1), self)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"target": {"_type": "Name", "id": "minion"}, "_type": "For", "body": [{"hole1": "damage", "_type": "Template8", "hole0": {"_type": "Name", "id": "minion"}, "hole2": [{"_type": "Call", "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"n": 1, "_type": "Num"}]}, {"_type": "Name", "id": "self"}]}], "iter": {"value": {"_type": "Name", "id": "player"}, "attr": "minions", "_type": "Attribute"}}], "hole0": "Eye<UNK>Eye", "hole2": [{"hole3": "COMMON", "hole1": 1, "_type": "Template4", "hole0": "Eye for Eye", "hole2": "PALADIN"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -0.0020809173583984375, -1.6450776456622407e-05, -0.028707414865493774, -0.05797375366091728, -6.198863957251888e-06, -0.06457316875457764, -5.9604644775390625e-06, -2.3841855067985307e-07, -6.29425048828125e-05, -0.004634857177734375, -1.33514404296875e-05, -1.4901146641932428e-05, -2.491462328180205e-05, -0.1836090087890625, -0.0003286600112915039, -0.36080288887023926, -4.1961669921875e-05, -1.1920926112907182e-07, -2.3841855067985307e-07, -0.9769572615623474, 0.0, -0.00013577938079833984, 0.0, -0.7193059921264648, 0.0, -3.838539123535156e-05, 0.0, -2.6702880859375e-05, -8.392333984375e-05, -3.33785246766638e-05, -1.9907929527107626e-05, -0.02063751220703125, -0.0001201629638671875, -0.0003070831298828125, -2.6702880859375e-05, -1.9073486328125e-06, -9.775161743164062e-06, 0.0, -5.14984130859375e-05, 0.0, -1.9073486328125e-06, -0.0004940032958984375, 0.0, -1.1563301086425781e-05, 0.0, -9.5367431640625e-06, 0.0, -1.33514404296875e-05, 0.0, -0.04021263122558594, -6.103515625e-05, -1.33514404296875e-05, -1.9073486328125e-06, -0.03821122646331787, -4.768370445162873e-07, -0.006096839904785156, 0.0, -0.3964862823486328, 0.0, -0.036134958267211914, 0.0, -0.008791565895080566, -1.9073486328125e-06, -9.72747802734375e-05, -0.3490743637084961, -0.002040863037109375, -0.5876178741455078, -3.814697265625e-06, -0.0021010637283325195, 0.0, -0.7800054550170898, 0.0, -3.814697265625e-06, -0.001739501953125, -0.0039806365966796875, -0.000370025634765625, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.007384300231933594, 0.0, 0.0, -0.000278472900390625, -3.814697265625e-06, -0.25428348779678345, -2.3841855067985307e-07, -1.9073486328125e-05, 0.0, -0.004169464111328125, -1.1444091796875e-05], "score": -4.940387170405984, "choice_history": [43, 109, "Eye", "<UNK>", "Eye", "<EOS>", "Spell", "Card", "<EOS>", 151, 58, 113, "Eye", " ", "for", " ", "Eye", "<EOS>", "1", "<EOS>", "PALADIN", "<EOS>", "COMMON", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 152, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 52, 78, 21, 95, "minion", "<EOS>", 13, 66, 21, 95, "player", "<EOS>", "minions", "<EOS>", 151, 60, 118, 21, 95, "minion", "<EOS>", "damage", "<EOS>", 139, 31, 73, 13, 66, 21, 95, "player", "<EOS>", "effective_spell_damage", "<EOS>", 138, 38, 100, "1", "<EOS>", 36, 95, "self", "<EOS>"], "inferred_code": "class Eye<UNK>Eye(SpellCard):\n\n    def __init__(self):\n        super().__init__('Eye for Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in player.minions:\n            minion.damage(player.effective_spell_damage(1), self)\n"}], "gold_code": "class EyeForAnEye(SecretCard):\n\n    def __init__(self):\n        super().__init__('Eye for an Eye', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, character, attacker, amount):\n        if character.is_hero():\n            character.player.opponent.hero.damage(amount, self)\n        super().reveal()\n\n    def activate(self, player):\n        player.bind('character_damaged', self._reveal)\n\n    def deactivate(self, player):\n        player.unbind('character_damaged', self._reveal)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "die", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Name", "id": "self"}]}, {"hole1": "draw", "_type": "Template8", "hole0": {"_type": "Name", "id": "player"}}, {"hole1": "draw", "_type": "Template8", "hole0": {"_type": "Name", "id": "player"}}], "hole0": "Flare", "hole2": [{"hole3": "RARE", "hole1": 2, "_type": "Template4", "hole0": "Flare", "hole2": "PALADIN"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-0.000102996826171875, -1.1444091796875e-05, -5.9604562920867465e-06, -0.0029771921690553427, -8.220784366130829e-06, -1.919257738336455e-05, -6.198883056640625e-06, -4.76837158203125e-05, -0.007999420166015625, -7.62939453125e-06, -2.2291887944447808e-05, -0.00015175342559814453, -3.576278118089249e-07, -5.841247457283316e-06, -1.2242156267166138, -1.9073486328125e-06, -0.03515148162841797, 0.0, -0.000392913818359375, 0.0, -2.7418136596679688e-05, 0.0, -0.00011444091796875, -9.5367431640625e-06, -3.349742473801598e-05, -2.741813204920618e-06, -0.025869369506835938, -1.1444091796875e-05, -0.0001544952392578125, -4.76837158203125e-05, 0.0, -4.5180320739746094e-05, 0.0, -2.6702880859375e-05, 0.0, -3.814697265625e-06, -5.340576171875e-05, -1.9073486328125e-06, -5.125993993715383e-06, 0.0, -7.62939453125e-06, -1.9073486328125e-06, -3.933906555175781e-06, -1.1920928244535389e-07, -0.028520584106445312, -0.0009822845458984375, -0.0147552490234375, 0.0, -2.09808349609375e-05, 0.0, -0.00017583370208740234, -1.9073486328125e-06, -0.0001049041748046875, -1.1920928244535389e-07, -0.07618594169616699, -2.9802317840221804e-06, -0.000743865966796875, -0.0008716583251953125, -3.814697265625e-06, -1.728534698486328e-05, 0.0, -0.8081226348876953, -0.0050449371337890625, -3.62396240234375e-05, 0.0, -0.0013418197631835938, 0.0, -0.00034749507904052734, 0.0, -0.000148773193359375, -0.0020313262939453125, -0.00016021728515625, 0.0, -0.00011146068572998047, 0.0, -0.0004991292953491211, 0.0], "score": -2.2377799096679354, "choice_history": [43, 109, "Flare", "<EOS>", "Spell", "Card", "<EOS>", 151, 58, 113, "Flare", "<EOS>", "2", "<EOS>", "PALADIN", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 154, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "die", "<EOS>", 138, 36, 95, "self", "<EOS>", 60, 117, 21, 95, "player", "<EOS>", "draw", "<EOS>", 60, 117, 21, 95, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.die(self)\n        player.draw()\n        player.draw()\n"}], "gold_code": "class Flare(SpellCard):\n\n    def __init__(self):\n        super().__init__('Flare', 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        for minion in hearthbreaker.targeting.find_minion_spell_target(game,\n            lambda m: m.stealth):\n            minion.stealth = False\n        for secret in game.other_player.secrets:\n            secret.deactivate(game.other_player)\n        game.other_player.secrets = []\n        player.draw()\n"}
{"beams": [{"model_output": {"hole3": "create_weapon", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"keywords": [{"value": {"_type": "Template9", "hole0": "IsMinion"}, "arg": "condition", "_type": "keyword"}, {"value": {"_type": "Template9", "hole0": "BothPlayer"}, "arg": "player", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "Character<UNK>"}}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 1, "_type": "Num"}]}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 7, "_type": "Template7", "hole0": "Weapon", "hole2": 1}], "hole0": "Gorehowl", "hole2": [{"hole3": "EPIC", "hole1": 7, "_type": "Template4", "hole0": "Gorehowl", "hole2": "WARRIOR"}], "hole1": "WeaponCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -4.76837158203125e-05, -0.0005625818157568574, -0.0005458180094137788, -2.622600959512056e-06, -0.002439854433760047, -1.1920928244535389e-07, -5.53131103515625e-05, -0.0045013427734375, -2.6702880859375e-05, -1.8358125089434907e-05, -6.079673767089844e-06, -0.01944752037525177, -2.384185791015625e-06, -0.13160943984985352, 0.0, -0.32898104190826416, 0.0, -0.16360187530517578, 0.0, -0.0011183107271790504, 0.0, -1.9073486328125e-06, -6.29425048828125e-05, -3.814697265625e-05, 0.0, -0.00818411074578762, -0.000743865966796875, -2.3841830625315197e-06, -0.005462248343974352, 0.0, -0.000545501708984375, -5.7220458984375e-06, -0.0005679130554199219, -1.1920928244535389e-07, -1.1444091796875e-05, -1.9073486328125e-06, -5.14984130859375e-05, -9.918212890625e-05, -3.814697265625e-06, -1.52587890625e-05, -3.814697265625e-06, -0.0006494522094726562, -2.0265579223632812e-06, -1.9073486328125e-06, -0.008935928344726562, -0.024694442749023438, -2.6702880859375e-05, 0.0, -0.05145226791501045, -0.1548682451248169, -0.028758643195033073, -0.5176591873168945, -3.814697265625e-05, -0.14779877662658691, -3.3378546504536644e-06, -1.1444091796875e-05, -7.62939453125e-06, -0.02976498007774353, -0.0198332741856575, -0.00028228759765625, -8.20159912109375e-05, -0.23432791233062744, 0.0, -2.47955322265625e-05, 0.0, -0.0015811920166015625, -2.2649765014648438e-06, -4.1961669921875e-05, -5.14984130859375e-05, -0.0005359649658203125, 0.0, -3.814697265625e-06, -1.728534698486328e-05, -6.67572021484375e-05, 0.0, -7.62939453125e-05, -0.00835418701171875, -0.0005950927734375, -1.9073486328125e-06, -2.47955322265625e-05, -0.0026867075357586145, -1.9550323486328125e-05, -3.814697265625e-06, -0.000579833984375, -7.62939453125e-06, -1.9073486328125e-06, -0.0001049041748046875, -0.016965745016932487, -0.6469497680664062, -7.62939453125e-05, -9.5367431640625e-06, -2.47955322265625e-05, 0.0, -0.08091823756694794, -1.1920928244535389e-07, -0.0002460479736328125, 0.0, -0.00046181678771972656, -9.417517503607087e-06, 0.0], "score": -2.6484113769667843, "choice_history": [43, 107, "Gorehowl", "<EOS>", "Weapon", "Card", "<EOS>", 151, 58, 113, "Gorehowl", "<EOS>", "7", "<EOS>", "WARRIOR", "<EOS>", "EPIC", "<EOS>", "create_weapon", "<EOS>", "player", "<EOS>", 151, 59, 116, "Weapon", "<EOS>", "7", "<EOS>", "1", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 31, 72, 21, 95, "Character", "<UNK>", "<EOS>", 147, 128, "condition", "<EOS>", 25, 120, "Is", "Minion", "<EOS>", 128, "player", "<EOS>", 25, 120, "Both", "Player", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "1", "<EOS>", 41, 120, "Self", "Selector", "<EOS>"], "inferred_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(Character<UNK>(condition=\n            IsMinion(), player=BothPlayer()), ActionTag(Give(ChangeAttack(1\n            )), SelfSelector()))])\n"}], "gold_code": "class Gorehowl(WeaponCard):\n\n    def __init__(self):\n        super().__init__('Gorehowl', 7, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.EPIC)\n\n    def create_weapon(self, player):\n        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(),\n            TargetIsMinion())), [ActionTag(IncreaseDurability(),\n            WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1),\n            WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1),\n            AttackCompleted())), HeroSelector())])])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "charge", "_type": "keyword"}], "hole1": 1, "_type": "Template7", "hole0": "Minion", "hole2": 1}], "hole0": "Hound", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "BEAST", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Hound", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "HUNTER", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -0.000148773193359375, -0.00022957073815632612, -3.397406908334233e-05, -7.867789463489316e-06, -1.728534698486328e-05, -2.157668859581463e-05, -2.288818359375e-05, -5.7220458984375e-06, -0.13521480560302734, -6.67572021484375e-05, -1.9073486328125e-06, -0.0011458396911621094, 0.0, -0.00016879866598173976, 0.0, -0.0008258819580078125, -0.001140594482421875, -7.62939453125e-06, -1.7404405298293568e-05, -7.629365427419543e-06, -1.9073486328125e-06, -2.6702880859375e-05, -0.00016699667321518064, -4.768370445162873e-07, 0.0, 0.0, 0.0, -1.9073486328125e-06, -5.8411358622834086e-05, -1.1920928244535389e-07, -0.0006917715072631836, 0.0, -7.2479248046875e-05, -1.9073486328125e-05, 0.0, 0.0, -2.288818359375e-05, 0.0, -0.05393028259277344, 0.0, -1.9073486328125e-06, -1.33514404296875e-05, -0.00013375282287597656, 0.0, -6.103515625e-05, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -7.43865966796875e-05, 0.0, -5.7220458984375e-06, 0.0, -0.00016868114471435547, -2.2649765014648438e-06, -0.002872943878173828, -1.9073486328125e-06, -2.6702880859375e-05, 0.0, -0.0038284058682620525, 0.0, -3.814697265625e-06, -3.814697265625e-06, -0.00154876708984375, -1.9073486328125e-06, 0.0, -1.1920928244535389e-07, -1.1920928244535389e-07, -3.5765824577538297e-06, 0.0, -0.0002288818359375, 0.0, -0.0062923431396484375, 0.0, -6.103515625e-05, -1.1444091796875e-05, -3.6835670471191406e-05, 0.0], "score": -0.2094788092198101, "choice_history": [43, 107, "Hound", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 142, 39, 104, "Hound", "<EOS>", 38, 100, "1", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "HUNTER", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 37, 96, "False", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "BEAST", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "1", "<EOS>", "1", "<EOS>", 146, 128, "charge", "<EOS>", 22, 96, "True", "<EOS>"], "inferred_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, True, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}], "gold_code": "class Hound(MinionCard):\n\n    def __init__(self):\n        super().__init__('Hound', 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.\n            COMMON, False, minion_type=MINION_TYPE.BEAST)\n\n    def create_minion(self, player):\n        return Minion(1, 1, charge=True)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template7", "hole0": "Minion", "hole2": 7}], "hole0": "InjuredBlademaster", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Damage"}, "args": [{"n": 4, "_type": "Num"}]}, {"keywords": [{"value": {"_type": "Template9", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template9", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Injured Blademaster", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -1.1444091796875e-05, -0.000727627135347575, -0.0010309863137081265, -7.56950321374461e-05, -3.576271865313174e-07, -7.748603820800781e-06, -4.768370445162873e-07, -0.0001926422119140625, -1.52587890625e-05, -9.1552734375e-05, -3.0517578125e-05, 0.0, -5.7220458984375e-06, 0.0, -2.0265579223632812e-06, 0.0, -2.86102294921875e-05, -3.814697265625e-06, 0.0, -1.7881377516459906e-06, -8.344650268554688e-06, -6.675708846159978e-06, -1.1920928244535389e-07, 0.0, -1.9073486328125e-06, -0.2308105230331421, -3.2901763916015625e-05, 0.0, -5.7220458984375e-06, -1.9073486328125e-06, -1.9073486328125e-06, -3.218649908376392e-06, -3.576278118089249e-07, -4.3272972106933594e-05, 0.0, 0.0, 0.0, -5.7220458984375e-06, -0.0001583099365234375, -6.29425048828125e-05, -3.814697265625e-06, -0.00052642822265625, 0.0, -0.0017852783203125, 0.0, -0.000560760498046875, 0.0, -0.000263214111328125, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -0.000102996826171875, -2.0265579223632812e-06, -2.86102294921875e-05, -0.0002307891845703125, -5.7220458984375e-06, -1.9073486328125e-06, -2.09808349609375e-05, -0.0018276659538969398, -2.777537883957848e-05, -9.5367431640625e-06, -0.00031280517578125, -7.43865966796875e-05, -0.6607596278190613, -4.041193096782081e-05, -0.0007457733154296875, -0.6503019332885742, -5.53131103515625e-05, -1.9073486328125e-06, -0.6750063896179199, -5.9604644775390625e-06, 0.0, -0.0008907318115234375, -5.7220458984375e-06, -0.011018157005310059, 0.0, -4.76837158203125e-05, 0.0, -0.018495917320251465, -4.57763671875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.0014150142669677734, 0.0, -0.015110969543457031, 0.0, -0.0017299652099609375, -0.0002155303955078125, 0.0, -0.0004062652587890625, 0.0, -1.1801701475633308e-05, 0.0, -2.09808349609375e-05, -4.1961669921875e-05, -7.82012939453125e-05, 0.0, -1.9073486328125e-06, -1.84774435183499e-05, -1.1920928244535389e-07, -2.717969982768409e-05, -2.3841855067985307e-07], "score": -2.275664253742221, "choice_history": [43, 107, "Injured", "Blademaster", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Injured", " ", "Blademaster", "<EOS>", 38, 100, "3", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Damage", "<EOS>", 138, 38, 100, "4", "<EOS>", 31, 72, 21, 95, "Minion", "Selector", "<EOS>", 147, 128, "players", "<EOS>", 25, 120, "Both", "Player", "<EOS>", 128, "picker", "<EOS>", 25, 120, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "4", "<EOS>", "7", "<EOS>"], "inferred_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector\n            (players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}], "gold_code": "class InjuredBlademaster(MinionCard):\n\n    def __init__(self):\n        super().__init__('Injured Blademaster', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(4, 7)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "MinionSummoned"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "PIRATE", "_type": "Attribute"}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Damage"}, "args": [{"n": 1, "_type": "Num"}]}, {"keywords": [{"value": {"_type": "Template9", "hole0": "EnemyPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template9", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}, {"value": {"value": "Null", "_type": "NameConstant"}, "arg": "condition", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 3, "_type": "Template7", "hole0": "Minion", "hole2": 2}], "hole0": "KnifeJuggler", "hole2": [{"hole3": "RARE", "hole1": 2, "_type": "Template4", "hole0": "Knife Juggler", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -8.20159912109375e-05, -0.0002843929105438292, -0.02394542098045349, -0.0002805798430927098, -3.695276609505527e-05, -1.3709068298339844e-05, 0.0, -7.62939453125e-06, -8.96453857421875e-05, -2.86102294921875e-05, -3.814689989667386e-06, -2.1100036974530667e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -8.464339771308005e-06, -1.1920928244535389e-07, -7.18832015991211e-05, 0.0, -0.004923224449157715, 0.0, -0.0020160675048828125, 0.0, -8.344639354618266e-06, 0.0, -1.9073486328125e-06, -0.0010089874267578125, -0.0001506805419921875, 0.0, -3.576278118089249e-07, -1.9073486328125e-05, 0.0, -2.0265579223632812e-06, 0.0, -4.38690185546875e-05, -2.47955322265625e-05, -1.4066696166992188e-05, 0.0, -1.9073486328125e-05, -1.9073486328125e-06, -3.24249267578125e-05, -1.9073486328125e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -0.00019276142120361328, 0.0, -7.62939453125e-06, -0.011138916015625, -0.0016317367553710938, -1.33514404296875e-05, 0.0, -0.037052273750305176, -0.03934681415557861, -8.20159912109375e-05, -0.0008754730224609375, -0.002109527587890625, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -0.3402433395385742, -0.00054168701171875, 0.0, -0.014406204223632812, -3.814697265625e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.000255584716796875, -7.271766662597656e-05, -0.2655773162841797, -1.9073486328125e-06, -0.001010894775390625, -4.1961669921875e-05, 0.0, -1.9073486328125e-06, -0.0010204315185546875, -6.67572021484375e-05, 0.0, -0.00017547607421875, -0.0007038116455078125, -1.9073486328125e-06, 0.0, -1.9073486328125e-05, -0.005074738524854183, -1.4662741705251392e-05, -5.7220458984375e-06, -0.0031347274780273438, -1.33514404296875e-05, -0.0012928093783557415, -1.4066685253055766e-05, -0.000152587890625, -0.0071659088134765625, -3.814697265625e-05, -3.814697265625e-06, -0.09773921966552734, -0.0001220703125, 0.0, -0.4147300720214844, -0.00179290771484375, -0.004024505615234375, 0.0, -2.47955322265625e-05, 0.0, -0.0008603334426879883, -0.0006831884384155273, -0.0001163482666015625, -2.09808349609375e-05, -0.005123257637023926, 0.0, -0.0058155059814453125, 0.0, -0.0004062652587890625, -0.0007767677307128906, 0.0, -0.0014591217041015625, -0.13290786743164062, 0.0, -0.0018901824951171875, -0.005535125732421875, -0.00030159950256347656, -1.9073486328125e-06], "score": -1.4410401504309647, "choice_history": [43, 107, "Knife", "Juggler", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Knife", " ", "Juggler", "<EOS>", "2", "<EOS>", "ALL", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "3", "<EOS>", "2", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 31, 73, 21, 95, "Minion", "Summoned", "<EOS>", 138, 31, 73, 21, 95, "Is", "Type", "<EOS>", 138, 28, 66, 21, 95, "MINION_TYPE", "<EOS>", "PIRATE", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Damage", "<EOS>", 138, 38, 100, "1", "<EOS>", 31, 72, 21, 95, "Character", "Selector", "<EOS>", 148, 128, "players", "<EOS>", 25, 120, "Enemy", "Player", "<EOS>", 128, "picker", "<EOS>", 25, 120, "Random", "Picker", "<EOS>", 128, "condition", "<EOS>", 22, 97, "Null", "<EOS>"], "inferred_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(MinionSummoned(IsType(\n            MINION_TYPE.PIRATE)), ActionTag(Damage(1), CharacterSelector(\n            players=EnemyPlayer(), picker=RandomPicker(), condition=Null)))])\n"}], "gold_code": "class KnifeJuggler(MinionCard):\n\n    def __init__(self):\n        super().__init__('Knife Juggler', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(\n            1), CharacterSelector(players=EnemyPlayer(), picker=\n            RandomPicker(), condition=None)))])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Template9", "hole0": "TurnStarted"}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Heal"}, "args": [{"n": 3, "_type": "Num"}]}, {"keywords": [{"value": {"_type": "Template9", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}, {"value": {"_type": "Template9", "hole0": "RandomPicker"}, "arg": "picker", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 0, "_type": "Template7", "hole0": "Minion", "hole2": 5}], "hole0": "Lightwell", "hole2": [{"hole3": "RARE", "hole1": 2, "_type": "Template4", "hole0": "Lightwell", "hole2": "WARRIOR"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -2.09808349609375e-05, -0.00036031013587489724, -0.0001758244907250628, -4.7683488446637057e-07, -1.1444091796875e-05, 0.0, -2.6702880859375e-05, -7.62939453125e-05, -4.1961669921875e-05, -2.3841855067985307e-07, -1.728534698486328e-05, -0.1228715181350708, -1.5497195136049413e-06, -0.274314284324646, 0.0, -0.0016289949417114258, 0.0, -1.52587890625e-05, 0.0, -3.623915836215019e-05, 0.0, -5.7220458984375e-06, -4.76837158203125e-05, -4.38690185546875e-05, 0.0, 0.0, -3.0517578125e-05, 0.0, -1.1563301086425781e-05, -1.1920928244535389e-07, -0.000789642333984375, -3.814697265625e-06, -0.00019848346710205078, 0.0, -2.6702880859375e-05, -7.62939453125e-06, -0.000125885009765625, -1.71661376953125e-05, -1.9073486328125e-06, -1.9073486328125e-05, -5.7220458984375e-06, -0.00023674964904785156, -1.1920928244535389e-07, -5.7220458984375e-06, -0.00249481201171875, -0.000263214111328125, -0.0001133677942561917, -0.06850802898406982, -2.0265579223632812e-06, -0.0004711151123046875, 0.0, -1.9073486328125e-06, 0.0, -1.52587890625e-05, -0.000133514404296875, 0.0, -0.013111114501953125, -0.001735687255859375, -3.814697265625e-05, -1.9073486328125e-06, -1.9073486328125e-06, -0.02560877799987793, -0.006978511810302734, -5.7220458984375e-06, -0.00023651123046875, -1.9073486328125e-06, -0.001350277685560286, -2.145764938177308e-06, -0.3629112243652344, -0.012121200561523438, -3.814697265625e-06, 0.0, -0.7218418121337891, -6.29425048828125e-05, 0.0, -0.2762594223022461, -1.9073486328125e-06, -0.5246756076812744, 0.0, -9.5367431640625e-06, 0.0, -0.0077610015869140625, -3.4332275390625e-05, 0.0, -2.09808349609375e-05, -0.4032336473464966, 0.0, -5.7220458984375e-05, 0.0, -0.06400489807128906, -9.34600830078125e-05, 0.0], "score": -2.8953482350639916, "choice_history": [43, 107, "Lightwell", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Lightwell", "<EOS>", "2", "<EOS>", "WARRIOR", "<EOS>", "RARE", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "0", "<EOS>", "5", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 41, 120, "Turn", "Started", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Heal", "<EOS>", 138, 38, 100, "3", "<EOS>", 31, 72, 21, 95, "Character", "Selector", "<EOS>", 147, 128, "picker", "<EOS>", 25, 120, "Random", "Picker", "<EOS>", 128, "picker", "<EOS>", 25, 120, "Random", "Picker", "<EOS>"], "inferred_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(picker=RandomPicker(), picker=RandomPicker\n            ())))])\n"}], "gold_code": "class Lightwell(MinionCard):\n\n    def __init__(self):\n        super().__init__('Lightwell', 2, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.RARE)\n\n    def create_minion(self, player):\n        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3\n            ), CharacterSelector(condition=IsDamaged(), picker=RandomPicker\n            ())))])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "MinionSummoned"}, "args": [{"_type": "Template9", "hole0": "Mana,"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 1, "_type": "Num"}]}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 1, "_type": "Template7", "hole0": "Minion", "hole2": 3}], "hole0": "ManaWyrm", "hole2": [{"hole3": "COMMON", "hole1": 1, "_type": "Template4", "hole0": "Mana Wyrm", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -7.05718994140625e-05, -0.0004970983718521893, -1.311301275563892e-06, -0.00010918975021922961, -7.152393664000556e-07, -1.609325408935547e-05, -4.768370445162873e-07, -1.9073486328125e-06, -0.000164031982421875, -0.0004177093505859375, -1.4305104514278355e-06, -0.00021074611868243665, -2.0265579223632812e-06, 0.0, -0.00041366086225025356, -1.1920928244535389e-07, -1.1071906089782715, 0.0, -0.00014889240264892578, 0.0, -3.814697265625e-06, 0.0, -2.4914734240155667e-05, 0.0, -3.814697265625e-06, -8.58306884765625e-05, -1.33514404296875e-05, -3.814697265625e-06, -1.9073468138230965e-06, -0.00016021728515625, 0.0, -0.002216815948486328, 0.0, -3.0517578125e-05, -3.814697265625e-06, -0.0003864764585159719, -5.7220458984375e-06, -2.288818359375e-05, -3.814697265625e-06, -0.0001201629638671875, -1.33514404296875e-05, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.0028210878372192383, -1.1920928244535389e-07, -2.288818359375e-05, -0.19919204711914062, -0.11597156524658203, -5.7220458984375e-06, 0.0, -0.49642786383628845, -0.009917497634887695, -4.649158654501662e-06, -3.24249267578125e-05, -0.015947341918945312, -3.814697265625e-06, -0.7079369425773621, -1.2882180213928223, -0.04176945984363556, -0.05699920654296875, -7.62939453125e-06, 0.0, 0.0, -0.00022721290588378906, -0.00012242794036865234, 0.0, -2.09808349609375e-05, -8.7738037109375e-05, -1.9073486328125e-06, -1.9073486328125e-06, -5.7220458984375e-06, -0.00022041753982193768, -1.5497195136049413e-06, -3.62396240234375e-05, -0.001758575439453125, -1.71661376953125e-05, -3.814697265625e-06, -3.814697265625e-06, -0.0014420209918171167, -0.001721261185593903, -5.14984130859375e-05, -2.47955322265625e-05, -5.7220458984375e-06, 0.0, -0.000244140625, -1.9073486328125e-06, -9.5367431640625e-06, -5.53131103515625e-05, -0.00042724600643850863, -2.6106834411621094e-05, 0.0], "score": -4.054156568385551, "choice_history": [43, 107, "Mana", "Wyrm", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Mana", " ", "Wyrm", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "1", "<EOS>", "3", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 31, 73, 21, 95, "Minion", "Summoned", "<EOS>", 138, 41, 120, "Mana", ",", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "1", "<EOS>", 41, 120, "Self", "Selector", "<EOS>"], "inferred_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.ALL, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(MinionSummoned(Mana,()),\n            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\n"}], "gold_code": "class ManaWyrm(MinionCard):\n\n    def __init__(self):\n        super().__init__('Mana Wyrm', 1, CHARACTER_CLASS.MAGE, CARD_RARITY.\n            COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(\n            ChangeAttack(1)), SelfSelector()))])\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "taunt", "_type": "keyword"}], "hole1": 1, "_type": "Template7", "hole0": "Minion", "hole2": 7}], "hole0": "Mogu'shanWarden", "hole2": [{"hole3": "COMMON", "hole1": 4, "_type": "Template4", "hole0": "Mogu'shan Warden", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-4.76837158203125e-05, -0.0030260086059570312, -0.031382400542497635, -0.0009097489528357983, -2.825220326485578e-05, -7.152507350838277e-07, -5.7220458984375e-06, -1.0728830375228426e-06, -7.62939453125e-06, -0.0001697540283203125, -6.67572021484375e-05, -1.2516897186287679e-05, -3.1232797482516617e-05, -5.7220458984375e-06, -1.1920928244535389e-07, -1.4066622497921344e-05, -7.748596544843167e-06, -0.0023731898982077837, 0.0, -8.475712093058974e-05, 0.0, -3.838539123535156e-05, 0.0, -0.0028197900392115116, 0.0, -4.38690185546875e-05, -0.00048065185546875, -2.288818359375e-05, -1.9073486328125e-06, -1.3351351299206726e-05, -0.00025177001953125, -1.4305104514278355e-06, -0.00020647048950195312, -0.0002806984703056514, -0.01717090606689453, -5.7220458984375e-06, -0.002171748550608754, 0.0, -6.29425048828125e-05, -3.814697265625e-06, -8.892782352631912e-05, 0.0], "score": -0.061840372379940334, "choice_history": [43, 107, "Mogu'shan", "Warden", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Mogu'shan", " ", "Warden", "<EOS>", "4", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "1", "<EOS>", "7", "<EOS>", 146, 128, "taunt", "<EOS>", 22, 96, "True", "<EOS>"], "inferred_code": "class Mogu'shanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}], "gold_code": "class MogushanWarden(MinionCard):\n\n    def __init__(self):\n        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(1, 7, taunt=True)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"target": {"_type": "Name", "id": "i"}, "_type": "For", "body": [{"hole1": "summon", "_type": "Template8", "hole0": {"_type": "Name", "id": "<UNK>"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}, {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"value": {"_type": "Name", "id": "player"}, "attr": "minions", "_type": "Attribute"}]}]}], "iter": {"_type": "Call", "func": {"_type": "Name", "id": "range"}, "args": [{"n": 0, "_type": "Num"}, {"n": 3, "_type": "Num"}]}}], "hole0": "Nourish", "hole2": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Choice"}, "args": [{"_type": "Template9", "hole0": "3"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Count"}, "args": [{"_type": "Template9", "hole0": "CardSelector"}]}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Template9", "hole0": "3"}, {"_type": "Call", "func": {"_type": "Name", "id": "WeaponSelector"}, "args": [{"_type": "Template9", "hole0": "EnemyPlayer"}]}]}, {"_type": "Template9", "hole0": "Murloc"}], "_type": "List"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Choice"}, "args": [{"_type": "Template9", "hole0": "3"}, {"keywords": [{"value": {"_type": "Template9", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template9", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}, {"_type": "Template9", "hole0": "SelfSelector"}]}], "_type": "List"}, "arg": "choices", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Nourish", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "DRUID", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole7": [{"name": "can_use", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}, "body": [{"value": {"comparators": [{"n": 7, "_type": "Num"}], "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"value": {"_type": "Name", "id": "player"}, "attr": "minions", "_type": "Attribute"}]}, "ops": [{"_type": "Lt"}], "_type": "Compare"}, "_type": "Return"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-3.814697265625e-06, -0.30037403106689453, -0.0004976969794370234, -2.3960863472893834e-05, -7.569440640509129e-05, -1.537799835205078e-05, -7.152555099310121e-07, -9.72747802734375e-05, -0.2660255432128906, -0.0007991790771484375, -2.6702880859375e-05, 0.0, -5.8770179748535156e-05, -3.576278118089249e-07, -2.1457672119140625e-06, -5.960462772236497e-07, -0.0011749267578125, -5.7220458984375e-06, 0.0, -2.145764938177308e-06, -0.0004140138626098633, 0.0, -3.62396240234375e-05, -3.32593554048799e-05, -1.6212441551033407e-05, -3.814697265625e-06, -0.0001010894775390625, -1.9073486328125e-06, -0.0002803802490234375, -0.00018262863159179688, 0.0, -0.000247955322265625, 0.0, -7.43865966796875e-05, -5.7220458984375e-06, -1.9073486328125e-06, -9.5367431640625e-06, -0.0020904541015625, -3.814697265625e-06, -0.12492847442626953, -5.14984130859375e-05, -0.0005321502685546875, 0.0, -0.09713125228881836, 0.0, -0.0003986358642578125, -2.09808349609375e-05, -0.0006771087646484375, -0.0001392364501953125, -7.62939453125e-06, -1.9073486328125e-06, 0.0, -0.0026134252548217773, -0.0005173683166503906, -3.62396240234375e-05, -1.1444091796875e-05, -1.9073486328125e-06, -1.0845937728881836, -0.000754093169234693, -0.00998687744140625, -0.6067228317260742, -1.9073486328125e-06, -1.9073486328125e-06, -0.3407282531261444, -3.2424519304186106e-05, -0.023909568786621094, -0.0045223236083984375, -1.9073486328125e-06, -0.5713720321655273, -4.1961669921875e-05, -3.814697265625e-06, -5.7220458984375e-06, -1.9073486328125e-06, -0.0008947841124609113, -3.6358364013722166e-05, -1.9073486328125e-06, -0.0009746551513671875, -1.1444091796875e-05, -8.7738037109375e-05, -1.52587890625e-05, -0.06643782556056976, -0.07825195789337158, 0.0, -0.01010894775390625, -0.49837493896484375, -3.0517578125e-05, -7.05718994140625e-05, -1.9073486328125e-06, -0.6267459392547607, -7.59339818614535e-05, -0.0009975433349609375, -0.06737136840820312, -9.5367431640625e-06, -1.041854739189148, -0.003995507024228573, -3.576278118089249e-07, -0.014622688293457031, -0.00037384033203125, -3.814697265625e-06, 0.0, -0.3458486795425415, -7.629387255292386e-06, -9.5367431640625e-06, -0.0019445419311523438, -7.62939453125e-06, -0.13774198293685913, -0.008278002962470055, -0.1404428482055664, -0.0486907958984375, -1.9073486328125e-06, 0.0, -0.9930256605148315, -0.0028281209524720907, 0.0, -0.02872467041015625, -0.0001678466796875, -7.62939453125e-06, -0.32258135080337524, -0.2414872795343399, -4.0531158447265625e-06, -0.07689094543457031, -3.814697265625e-06, -0.941929280757904, -0.6271719932556152, -0.005687713623046875, -1.9073486328125e-06, -0.014757794328033924, -0.00021479406859725714, 0.0, -3.24249267578125e-05, -4.9591064453125e-05, -1.1444091796875e-05, 0.0, -0.007614493370056152, -5.5909145885379985e-05, -6.103515625e-05, -1.1444091796875e-05, 0.0, -0.10453873872756958, -0.0007400419563055038, -0.0064754486083984375, -0.4431934356689453, -5.340576171875e-05, -1.9073486328125e-05, -0.15431004762649536, -0.0009413957595825195, 0.0, -0.019550323486328125, -7.2479248046875e-05, -0.001725196372717619, 0.0, -3.4332275390625e-05, 0.0, -0.10146782547235489, -2.4795503122732043e-05, -4.57763671875e-05, -1.9073486328125e-06, -0.06505966186523438, 0.0, -0.040352821350097656, 0.0, -0.0011306998785585165, -0.0010709762573242188, 0.0, -0.04389762878417969, 0.0, -0.5165103673934937, -0.00015842168068047613, 0.0, -0.20057392120361328, 0.0, -5.841255187988281e-06, -1.9073486328125e-06, -5.7220458984375e-05, -6.4849853515625e-05, -2.205371856689453e-05, -2.3841855067985307e-07, -0.7786598205566406, -0.0004253387451171875, -0.001026153564453125, -4.57763671875e-05, 0.0, -0.00041899672942236066, -2.145764938177308e-06, -3.0517578125e-05, 0.0, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -6.0558144468814135e-05, 0.0, -1.33514404296875e-05, 0.0, -0.0002809762954711914, -1.1920928244535389e-07, -0.008873939514160156, -3.814697265625e-05, -1.9073486328125e-06, 0.0, -0.0038155317306518555, 0.0, -0.0001201629638671875, -0.0006008148193359375, -1.9073486328125e-06, 0.0, -0.0006446833722293377, -2.002705878112465e-05, -6.4849853515625e-05, -8.392333984375e-05, -1.9073486328125e-06, -0.000402860197937116, 0.0, -0.0012569427490234375, -3.0517578125e-05, -0.32439863681793213, -8.70227722771233e-06, -0.46120738983154297, -0.0019741058349609375, -0.011738777160644531, -0.3335580825805664, -3.814697265625e-06, -0.011806599795818329, -0.00028165188268758357, -0.0036432729102671146, 0.0, -0.000118255615234375, -0.000370025634765625, 0.0, -2.086153835989535e-05, 0.0, -0.0062694549560546875, 0.0, -0.02579808235168457, 0.0, -0.004207611083984375, -0.0017986297607421875, 0.0, 0.0, -0.008164400234818459, -4.529942543740617e-06, -7.62939453125e-06, -5.91278076171875e-05, 0.0, -0.0001850128173828125, 0.0, -0.0003061274182982743, -1.1920928244535389e-07, -0.006539571564644575, -1.1920928244535389e-07, -7.05718994140625e-05, -0.0006656646728515625, -0.0001773834228515625, -0.0007463693618774414, -3.576278118089249e-07, -9.34600830078125e-05, -7.62939453125e-06, -0.000110626220703125, -7.62939453125e-05, -7.748603820800781e-06, -3.814697265625e-06, -1.9073486328125e-05, -8.380413055419922e-05, 0.0, -2.09808349609375e-05, -0.0004851818084716797, -1.9073486328125e-06, -0.000152587890625, -0.000148773193359375, -0.0007343292236328125, -0.005026817321777344, -0.0001010894775390625, -0.0010242462158203125, -7.62939453125e-05, -0.0010814666748046875, 0.0, -0.006297226995229721, -2.6464205802767538e-05, -3.62396240234375e-05, -0.0025491714477539062, 0.0, -0.0006809234619140625, 0.0, -0.0002496030938345939, -3.576278118089249e-07, -0.1658717393875122, -7.152555099310121e-07, -4.9591064453125e-05, -0.000484466552734375, -0.000171661376953125, -0.0009708404541015625, -8.0108642578125e-05, -0.08976767212152481, -0.0005593299865722656], "score": -13.780302611051873, "choice_history": [43, 110, "Nourish", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Nourish", "<EOS>", 38, 100, "5", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "DRUID", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "choices", "<EOS>", 19, 91, 139, 31, 73, 21, 95, "Choice", "<EOS>", 140, 41, 120, "3", "<EOS>", 31, 73, 21, 95, "Give", "<EOS>", 138, 34, 91, 140, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 31, 73, 21, 95, "Count", "<EOS>", 138, 41, 120, "Card", "Selector", "<EOS>", 31, 73, 21, 95, "Battlecry", "<EOS>", 139, 41, 120, "3", "<EOS>", 31, 73, 21, 95, "Weapon", "Selector", "<EOS>", 138, 41, 120, "Enemy", "Player", "<EOS>", 41, 120, "Murloc", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", 31, 73, 21, 95, "Choice", "<EOS>", 140, 41, 120, "3", "<EOS>", 31, 72, 21, 95, "Minion", "Selector", "<EOS>", 147, 128, "players", "<EOS>", 25, 120, "Both", "Player", "<EOS>", 128, "picker", "<EOS>", 25, 120, "User", "Picker", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 152, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 52, 78, 21, 95, "i", "<EOS>", 16, 73, 21, 95, "range", "<EOS>", 139, 38, 100, "0", "<EOS>", 38, 100, "3", "<EOS>", 151, 60, 118, 21, 95, "<UNK>", "<EOS>", "summon", "<EOS>", 140, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 31, 73, 21, 95, "len", "<EOS>", 138, 28, 66, 21, 95, "player", "<EOS>", "minions", "<EOS>", 151, 53, 79, "can_use", "<EOS>", 1, 126, 134, 125, "self", "<EOS>", 125, "player", "<EOS>", 125, "game", "<EOS>", 151, 56, 102, 17, 76, 16, 73, 21, 95, "len", "<EOS>", 138, 28, 66, 21, 95, "player", "<EOS>", "minions", "<EOS>", 135, 10, 138, 38, 100, "7", "<EOS>"], "inferred_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.\n            RARE, choices=[Choice(3(), Give([Buff(ChangeAttack(Count(\n            CardSelector()))), Battlecry(3(), WeaponSelector(EnemyPlayer())\n            ), Murloc()]), SelfSelector()), Choice(3(), MinionSelector(\n            players=BothPlayer(), picker=UserPicker()), SelfSelector())])\n\n    def use(self, player, game):\n        super().use(player, game)\n        for i in range(0, 3):\n            <UNK>.summon(player, game, len(player.minions))\n\n    def can_use(self, player, game):\n        return len(player.minions) < 7\n"}], "gold_code": "class Nourish(SpellCard):\n\n    def __init__(self):\n        super().__init__('Nourish', 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n\n\n        class Gain2(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Gain 2 mana crystals', 0, CHARACTER_CLASS\n                    .DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                if player.max_mana < 8:\n                    player.max_mana += 2\n                    player.mana += 2\n                else:\n                    player.max_mana = 10\n                    player.mana += 2\n\n\n        class Draw3(ChoiceCard):\n\n            def __init__(self):\n                super().__init__('Draw three cards', 0, CHARACTER_CLASS.\n                    DRUID, CARD_RARITY.COMMON, False)\n\n            def use(self, player, game):\n                player.draw()\n                player.draw()\n                player.draw()\n        option = player.agent.choose_option([Gain2(), Draw3()], player)\n        option.use(player, game)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "<UNK>", "_type": "Template8", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"s": "card_drawn", "_type": "Str"}, {"_type": "Name", "id": "reduce_cost"}]}, {"hole1": "draw", "_type": "Template8", "hole0": {"_type": "Name", "id": "player"}}], "hole0": "Preparation", "hole2": [{"hole3": "EPIC", "hole1": 0, "_type": "Template4", "hole0": "Preparation", "hole2": "SHAMAN"}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -0.00066375732421875, -0.0005149864591658115, -0.0012923473259434104, -1.9494444131851196e-05, -2.8848648071289062e-05, -1.311301275563892e-06, -5.340576171875e-05, -0.002132415771484375, -2.47955322265625e-05, -0.00018070495571009815, -0.009407520294189453, -2.0265558760002023e-06, -3.2543666748097166e-05, -0.2171107530593872, 0.0, -0.21128559112548828, -1.9073486328125e-06, -0.000545501708984375, 0.0, -0.0002518892288208008, 0.0, -2.86102294921875e-05, -0.00034332275390625, -1.9192693798686378e-05, -1.9073486328125e-06, -0.19404125213623047, -3.4332275390625e-05, -0.000118255615234375, -4.00543212890625e-05, 0.0, -2.7179718017578125e-05, 0.0, -2.288818359375e-05, 0.0, -1.1444091796875e-05, -3.814697265625e-06, 0.0, -2.6225983674521558e-05, -2.09808349609375e-05, -7.62939453125e-06, 0.0, -6.914134246471804e-06, -2.3841855067985307e-07, -0.009670257568359375, -3.24249267578125e-05, -0.06659698486328125, -1.9073486328125e-06, -0.0002579689025878906, 0.0, -0.0659782886505127, -3.4332275390625e-05, -0.03508949279785156, -0.014708518981933594, -1.33514404296875e-05, -0.07007217407226562, -8.96453857421875e-05, -6.103515625e-05, -3.814697265625e-06, -0.7251529693603516, 0.0, -0.0026912689208984375, -0.405242919921875, -1.52587890625e-05, 0.0, -3.4809112548828125e-05, 0.0, -0.0020591020584106445, 0.0], "score": -2.036112475921726, "choice_history": [43, 109, "Preparation", "<EOS>", "Spell", "Card", "<EOS>", 151, 58, 113, "Preparation", "<EOS>", "0", "<EOS>", "SHAMAN", "<EOS>", "EPIC", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 153, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 21, 95, "player", "<EOS>", "<UNK>", "<EOS>", 139, 39, 104, "card_drawn", "<EOS>", 36, 95, "reduce_cost", "<EOS>", 60, 117, 21, 95, "player", "<EOS>", "draw", "<EOS>"], "inferred_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.SHAMAN,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.<UNK>('card_drawn', reduce_cost)\n        player.draw()\n"}], "gold_code": "class Preparation(SpellCard):\n\n    def __init__(self):\n        super().__init__('Preparation', 0, CHARACTER_CLASS.ROGUE,\n            CARD_RARITY.EPIC)\n\n    def use(self, player, game):\n        super().use(player, game)\n        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=\n            IsSpell()), SpellCast()))\n"}
{"beams": [{"model_output": {"hole3": "_reveal", "hole6": [{"_type": "If", "body": [{"value": {"_type": "Call", "func": {"value": {"_type": "Name", "id": "minion"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}]}, "_type": "Assign", "targets": [{"_type": "Name", "id": "mirror"}]}, {"hole1": "<UNK>", "_type": "Template8", "hole0": {"_type": "Name", "id": "mirror"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}]}]}, {"hole1": "trigger", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "minion"}, "attr": "player", "_type": "Attribute"}, "hole2": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Name", "id": "mirror"}]}, {"hole1": "reveal", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}}, {"hole1": "trigger", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "hole2": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Name", "id": "mirror"}]}], "test": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"_type": "Call", "func": {"value": {"_type": "Name", "id": "card"}, "attr": "<UNK>", "_type": "Attribute"}}, {"comparators": [{"n": 7, "_type": "Num"}], "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}]}, "ops": [{"_type": "Lt"}], "_type": "Compare"}]}}], "hole0": "Repentance", "hole2": [{"hole3": "COMMON", "hole1": 1, "_type": "Template4", "hole0": "Repentance", "hole2": "MAGE"}, {"value": {"value": "Null", "_type": "NameConstant"}, "_type": "Assign", "targets": [{"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}]}], "hole7": [{"name": "deactivate", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}]}, "body": [{"hole1": "bind", "_type": "Template8", "hole0": {"_type": "Name", "id": "player"}, "hole2": [{"s": "minion_died", "_type": "Str"}, {"value": {"_type": "Name", "id": "self"}, "attr": "_reveal", "_type": "Attribute"}]}]}], "hole5": [{"arg": "index", "_type": "arg"}], "hole1": "SecretCard", "_type": "Template0", "hole4": "card"}, "score_history": [-1.1444091796875e-05, -0.23629188537597656, -1.9788545614574105e-05, -0.00011538793478393927, -0.00020563314319588244, -1.3232202945800964e-05, -5.960462203802308e-06, -0.17074871063232422, -0.0006542205810546875, -1.1444091796875e-05, -3.993446080130525e-05, -3.4332275390625e-05, -2.146738552255556e-06, -2.3841830625315197e-06, -0.7735073566436768, 0.0, -0.002264857292175293, 0.0, -0.0028667449951171875, -6.4849853515625e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -5.7220458984375e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -0.0028257369995117188, 0.0, -0.01958751678466797, -0.0017595291137695312, -0.0001010894775390625, -2.288818359375e-05, -0.0032224655151367188, -1.9073486328125e-06, -0.5831032991409302, -1.9073486328125e-06, -0.05533885955810547, 0.0, -0.5046961307525635, -5.7220458984375e-06, -6.4849853515625e-05, -0.0021038055419921875, -0.0025386810302734375, -0.33933258056640625, -0.000331878662109375, -6.103515625e-05, -0.5407905578613281, -0.13698673248291016, -0.04827308654785156, -8.0108642578125e-05, -1.1444091796875e-05, -0.000179290771484375, -1.9073486328125e-06, -0.015574031509459019, -0.00023651123046875, -0.27521204948425293, 0.0, -0.012780189514160156, -2.09808349609375e-05, -0.017749786376953125, -0.0001010894775390625, 0.0, -1.9073486328125e-06, -0.001813410664908588, -2.0265579223632812e-06, -3.814697265625e-06, -7.62939453125e-06, 0.0, -0.00070953369140625, -8.7738037109375e-05, -3.62396240234375e-05, -1.9073486328125e-06, -4.0411949157714844e-05, -1.9073486328125e-06, -8.7738037109375e-05, 0.0, -0.0210796557366848, 0.0, -1.71661376953125e-05, -0.01641082763671875, -1.9073486328125e-06, -6.29425048828125e-05, -1.9073486328125e-06, -0.00717758247628808, -6.079673767089844e-06, -1.0179548263549805, -0.0015506744384765625, -5.7220458984375e-06, -1.9073486328125e-06, -1.1444091796875e-05, -4.9591064453125e-05, -0.09858989715576172, 0.0, -0.0001506805419921875, -0.14850997924804688, -5.91278076171875e-05, 0.0, -1.1444091796875e-05, 0.0, -0.5172674655914307, 0.0, -0.004902005195617676, -1.1920928244535389e-07, 0.0, -0.0004482269287109375, 0.0, -0.16013431549072266, -1.9073486328125e-06, -0.0006178617477416992, 0.0, -0.005215644836425781, 0.0, -7.43865966796875e-05, -0.000553131103515625, -0.00247955322265625, 0.0, -0.18721628189086914, -5.7220458984375e-06, -0.050048828125, 0.0, -0.003696441650390625, -0.011312484741210938, -2.288818359375e-05, -3.62396240234375e-05, 0.0, -0.09863293170928955, -0.0012462139129638672, -5.7220458984375e-06, -1.52587890625e-05, -1.9073486328125e-06, -0.0030193328857421875, -3.814697265625e-06, -1.33514404296875e-05, 0.0, -2.5033950805664062e-05, -1.1444091796875e-05, -0.0001087188720703125, 0.0, -0.15572011470794678, 0.0, -0.001049041748046875, -0.001537322998046875, -0.0019512176513671875, 0.0, -2.86102294921875e-05, 0.0, -0.05729031562805176, -2.2649765014648438e-06, -0.004275083541870117, 0.0, -0.044287800788879395, -2.288818359375e-05, -0.0003108978271484375, -0.000423431396484375, -1.9073486328125e-06, -0.05629527568817139, -7.62939453125e-06, -0.0004711151123046875, 0.0, -0.16172027587890625, -2.6702880859375e-05, -0.00011444091796875, -0.05819416046142578, -0.0014972686767578125, -3.814697265625e-06, -0.008538439869880676, -3.0994415283203125e-05, -0.0021401643753051758, -3.814697265625e-06, -0.012876510620117188, -0.10091114044189453, -0.00997161865234375, 0.0, -1.9073486328125e-06, -3.814697265625e-06, -0.002773284912109375, -1.9073486328125e-06, -0.0001373291015625, 0.0, -0.31193220615386963, 0.0, -4.00543212890625e-05, -4.57763671875e-05, 0.0, -0.04843795299530029, -5.7220458984375e-06, -0.0004215240478515625, 0.0, -0.19035005569458008, -2.6702880859375e-05, -0.0011615753173828125, -0.0004596710205078125, -1.71661376953125e-05, -0.8029599189758301, -4.768360213347478e-06, -1.9073486328125e-05, -1.1444091796875e-05, -0.07550907135009766, -0.0001049041748046875, -3.933906555175781e-06, -3.814697265625e-06, -0.00017547607421875, -0.0004730224609375, -1.9073486328125e-06, -0.0056304931640625, -7.05718994140625e-05, -6.866455078125e-05, -0.018805503845214844, -2.6702880859375e-05, -0.0001970529556274414, 0.0, -0.47127366065979004, 0.0, -0.000102996826171875, -7.43865966796875e-05, -2.09808349609375e-05, -0.03944015130400658, -9.5367431640625e-06, -0.0002288818359375, 0.0, 0.0, -1.9073486328125e-06, -0.00016129016876220703, -7.62939453125e-06, -0.0015316009521484375, -1.9073486328125e-06], "score": -8.763985973054325, "choice_history": [43, 110, "Repentance", "<EOS>", "Secret", "Card", "<EOS>", 152, 58, 113, "Repentance", "<EOS>", "1", "<EOS>", "MAGE", "<EOS>", "COMMON", "<EOS>", 48, 65, 138, 28, 66, 21, 95, "self", "<EOS>", "player", "<EOS>", 22, 97, "Null", "<EOS>", "_reveal", "<EOS>", "card", "<EOS>", 132, 125, "index", "<EOS>", 151, 54, 82, 15, 69, 2, 139, 31, 71, 13, 66, 21, 95, "card", "<EOS>", "<UNK>", "<EOS>", 32, 76, 16, 73, 21, 95, "len", "<EOS>", 138, 28, 66, 13, 66, 21, 95, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 135, 10, 138, 38, 100, "7", "<EOS>", 155, 48, 65, 138, 36, 95, "mirror", "<EOS>", 16, 73, 13, 66, 21, 95, "minion", "<EOS>", "copy", "<EOS>", 138, 28, 66, 21, 95, "self", "<EOS>", "player", "<EOS>", 60, 118, 21, 95, "mirror", "<EOS>", "<UNK>", "<EOS>", 138, 31, 73, 21, 95, "len", "<EOS>", 138, 28, 66, 13, 66, 21, 95, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 60, 118, 13, 66, 21, 95, "minion", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 139, 39, 104, "<UNK>", "<EOS>", 36, 95, "mirror", "<EOS>", 60, 117, 25, 120, "super", "<EOS>", "reveal", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "player", "<EOS>", "trigger", "<EOS>", 139, 39, 104, "<UNK>", "<EOS>", 36, 95, "mirror", "<EOS>", 151, 53, 79, "deactivate", "<EOS>", 1, 126, 133, 125, "self", "<EOS>", 125, "player", "<EOS>", 151, 60, 118, 21, 95, "player", "<EOS>", "bind", "<EOS>", 139, 39, 104, "minion_died", "<EOS>", 28, 66, 21, 95, "self", "<EOS>", "_reveal", "<EOS>"], "inferred_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.MAGE, CARD_RARITY\n            .COMMON)\n        self.player = Null\n\n    def _reveal(self, card, index):\n        if card.<UNK>() and len(self.player.minions) < 7:\n            mirror = minion.copy(self.player)\n            mirror.<UNK>(len(self.player.minions))\n            minion.player.trigger('<UNK>', mirror)\n            super().reveal()\n            self.player.trigger('<UNK>', mirror)\n\n    def deactivate(self, player):\n        player.bind('minion_died', self._reveal)\n"}], "gold_code": "class Repentance(SecretCard):\n\n    def __init__(self):\n        super().__init__('Repentance', 1, CHARACTER_CLASS.PALADIN,\n            CARD_RARITY.COMMON)\n\n    def _reveal(self, minion):\n        minion.set_health_to(1)\n        super().reveal()\n\n    def activate(self, player):\n        player.game.current_player.bind('minion_played', self._reveal)\n\n    def deactivate(self, player):\n        player.game.current_player.unbind('minion_played', self._reveal)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Aura"}, "args": [{"_type": "Template9", "hole0": "<UNK>Deathrattle"}, {"_type": "Template9", "hole0": "PlayerSelector"}]}], "_type": "List"}, "arg": "auras", "_type": "keyword"}], "hole1": 0, "_type": "Template7", "hole0": "Minion", "hole2": 1}], "hole0": "ShadowOfNothing", "hole2": [{"hole3": "LEGENDARY", "hole1": 0, "_type": "Template4", "hole0": "Shadow of Nothing", "hole2": "PRIEST"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -3.4332275390625e-05, -0.000169382052263245, -0.351871132850647, -0.00199649715796113, -0.011017645709216595, -0.0009743836708366871, -5.9485435485839844e-05, -4.172316494077677e-06, -2.47955322265625e-05, -0.0039081573486328125, -5.7220458984375e-05, -0.0008061319822445512, -0.002132176887243986, -0.00014876376371830702, -0.00016987323760986328, -7.939328497741371e-05, -3.933906555175781e-06, -0.004692569375038147, -6.9141146923357155e-06, -0.20814406871795654, 0.0, -0.40556883811950684, 0.0, -5.543231964111328e-05, 0.0, -2.503394853192731e-06, 0.0, -1.9073486328125e-06, -7.62939453125e-05, -0.0022258758544921875, -3.254413604736328e-05, -1.9073486328125e-06, -2.3841855067985307e-07, -1.311301275563892e-06, -0.004151701927185059, 0.0, -0.0993337631225586, -1.9073486328125e-06, -0.0038115978240966797, -1.9073486328125e-06, -2.6702880859375e-05, -1.1444091796875e-05, -0.0008029937744140625, -0.000400543212890625, -6.103515625e-05, -3.814697265625e-06, -1.9073486328125e-06, -0.0022890567779541016, -9.5367431640625e-06, -0.000736236572265625, -0.07589244842529297, -0.0008945465087890625, -0.06389676779508591, -0.1704554408788681, -0.00022339820861816406, -0.019268035888671875, -1.9073486328125e-05, -0.012354005128145218, -8.499622344970703e-05, 0.0], "score": -1.4490007436349686, "choice_history": [43, 107, "Shadow", "Of", "Nothing", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Shadow", " ", "of", " ", "Nothing", "<EOS>", "0", "<EOS>", "PRIEST", "<EOS>", "LEGENDARY", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "0", "<EOS>", "1", "<EOS>", 146, 128, "auras", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Aura", "<EOS>", 139, 41, 120, "<UNK>", "Deathrattle", "<EOS>", 41, 120, "Player", "Selector", "<EOS>"], "inferred_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.LEGENDARY)\n\n    def create_minion(self, player):\n        return Minion(0, 1, auras=[Aura(<UNK>Deathrattle(), PlayerSelector())])\n"}], "gold_code": "class ShadowOfNothing(MinionCard):\n\n    def __init__(self):\n        super().__init__('Shadow of Nothing', 0, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.EPIC, False)\n\n    def create_minion(self, p):\n        return Minion(0, 1)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"hole1": "damage", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"value": {"_type": "Name", "id": "player"}, "attr": "effective_spell_damage", "_type": "Attribute"}, "args": [{"n": 2, "_type": "Num"}]}, {"_type": "Name", "id": "self"}]}, {"hole1": "add_buff", "_type": "Template8", "hole0": {"value": {"_type": "Name", "id": "self"}, "attr": "target", "_type": "Attribute"}, "hole2": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Template9", "hole0": "<UNK>"}]}]}], "hole0": "Slam", "hole2": [{"hole3": [{"value": {"value": {"value": {"_type": "Name", "id": "hearthbreaker"}, "attr": "targeting", "_type": "Attribute"}, "attr": "find_minion_spell_target", "_type": "Attribute"}, "arg": "target_func", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Slam", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ROGUE", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SpellCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -3.62396240234375e-05, -1.7881233361549675e-05, -3.933898824470816e-06, -5.95522578805685e-07, -4.43455355707556e-05, -1.9073468138230965e-06, -0.0001068115234375, -6.29425048828125e-05, -2.09808349609375e-05, -1.1444091796875e-05, 0.0, -2.47955322265625e-05, 0.0, -0.0006237030029296875, 0.0, -0.0005092620849609375, -4.00543212890625e-05, -1.9073486328125e-06, -4.625213477993384e-05, -1.919269561767578e-05, -1.9073486328125e-06, 0.0, -1.4053075574338436e-05, -1.9073486328125e-06, -9.5367431640625e-06, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -6.496906280517578e-05, 0.0, -0.060939788818359375, 0.0, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -9.34600830078125e-05, -5.7220458984375e-06, -4.00543212890625e-05, 0.0, -0.002033233642578125, -1.33514404296875e-05, -2.86102294921875e-05, 0.0, -1.9073486328125e-05, 0.0, -2.47955322265625e-05, 0.0, -5.7220458984375e-06, -3.814697265625e-06, -7.62939453125e-05, 0.0, -3.063678741455078e-05, 0.0, -0.0034731626510620117, 0.0, -1.52587890625e-05, 0.0, -4.0531158447265625e-06, 0.0, -6.103515625e-05, -3.814697265625e-06, -9.298310033045709e-06, -2.0265579223632812e-06, -0.0007257461547851562, -7.62939453125e-06, -0.0007190704345703125, -5.14984130859375e-05, -1.1444091796875e-05, -0.0001811981201171875, 0.0, -6.866455078125e-05, 0.0, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -5.14984130859375e-05, 0.0, -1.9073486328125e-06, -7.62939453125e-06, -1.1444091796875e-05, 0.0, -0.01748180389404297, -8.58306884765625e-05, -7.62939453125e-06, 0.0, -3.4332275390625e-05, 0.0, -1.1444091796875e-05, 0.0, -0.0001952648162841797, 0.0, -0.0060672760009765625, 0.0, 0.0, -0.000293731689453125, -3.24249267578125e-05, -1.9073486328125e-05, 0.0, -3.814697265625e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.02098381519317627, 0.0, -1.9073486328125e-06, -0.00244903564453125, -1.71661376953125e-05, -0.031796347349882126, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -0.00036907196044921875, -7.62939453125e-06, -0.4909067153930664, -0.04815196990966797, -0.000247955322265625, 0.0, -0.0024585723876953125, 0.0, -0.000377655029296875, 0.0, -8.392333984375e-05, 0.0, -0.716273307800293, 0.0, -3.0517578125e-05, -8.0108642578125e-05, -1.9073486328125e-06, -9.1552734375e-05, 0.0, -0.1608257293701172, -3.4332275390625e-05, -3.814697265625e-06, -0.017301559448242188, -0.0016651153564453125, -0.48172658681869507, -0.5127354860305786], "score": -2.5832971885079132, "choice_history": [43, 109, "Slam", "<EOS>", "Spell", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Slam", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ROGUE", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "target_func", "<EOS>", 13, 66, 13, 66, 21, 95, "hearthbreaker", "<EOS>", "targeting", "<EOS>", "find_minion_spell_target", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 153, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "damage", "<EOS>", 139, 31, 73, 13, 66, 21, 95, "player", "<EOS>", "effective_spell_damage", "<EOS>", 138, 38, 100, "2", "<EOS>", 36, 95, "self", "<EOS>", 60, 118, 13, 66, 21, 95, "self", "<EOS>", "target", "<EOS>", "add_buff", "<EOS>", 138, 31, 73, 21, 95, "Buff", "<EOS>", 138, 41, 120, "<UNK>", "<EOS>"], "inferred_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        self.target.damage(player.effective_spell_damage(2), self)\n        self.target.add_buff(Buff(<UNK>()))\n"}], "gold_code": "class Slam(SpellCard):\n\n    def __init__(self):\n        super().__init__('Slam', 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.\n            COMMON, target_func=hearthbreaker.targeting.\n            find_minion_spell_target)\n\n    def use(self, player, game):\n        super().use(player, game)\n        if self.target.health > player.effective_spell_damage(2\n            ) or self.target.divine_shield:\n            self.target.damage(player.effective_spell_damage(2), self)\n            player.draw()\n        else:\n            self.target.damage(player.effective_spell_damage(2), self)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 4, "_type": "Template7", "hole0": "Minion", "hole2": 3}], "hole0": "Spellbreaker", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Template9", "hole0": "Silence"}, {"keywords": [{"value": {"_type": "Template9", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template9", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "MinionSelector"}}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Spellbreaker", "_type": "Str"}, {"n": 4, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -2.86102294921875e-05, -1.0490381100680679e-05, -0.0008100596605800092, -2.3841585061745718e-07, -8.940695806813892e-06, -6.318072337307967e-06, -5.14984130859375e-05, -5.340576171875e-05, -0.000568389892578125, -3.24249267578125e-05, 0.0, -1.5139572496991605e-05, -1.1920928244535389e-07, -1.1444091796875e-05, -4.768370445162873e-07, -0.0005092620849609375, -5.340576171875e-05, -1.9073486328125e-06, -1.1920928244535389e-07, -1.1920928244535389e-07, 0.0, -2.09808349609375e-05, -0.00019548801355995238, -6.556507287314162e-06, 0.0, -9.5367431640625e-06, -1.9073486328125e-06, -1.71661376953125e-05, -1.3828268492943607e-05, -2.3841855067985307e-07, -0.0001845351216616109, 0.0, -1.9073486328125e-06, -3.24249267578125e-05, -9.5367431640625e-06, -1.9073486328125e-06, -1.1444091796875e-05, -9.5367431640625e-06, -0.0016914606094360352, 0.0, -0.0022563934326171875, 0.0, -0.0008831024169921875, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, -1.9073486328125e-06, 0.0, -1.7642974853515625e-05, -1.0371208190917969e-05, -6.4849853515625e-05, -0.0026226043701171875, -0.000102996826171875, -0.11216013133525848, -0.002036956837400794, -6.29425048828125e-05, -0.0047855377197265625, -0.0001468658447265625, -9.5367431640625e-06, -8.20159912109375e-05, -0.00011742115020751953, -1.9073486328125e-06, -0.0003604888916015625, -3.814697265625e-06, -0.0003446339978836477, -1.9073486328125e-06, -1.9073486328125e-05, 0.0, -0.0007650707848370075, -7.748603820800781e-06, -1.52587890625e-05, 0.0, -0.0002611875534057617, 0.0, -0.000240325927734375, 0.0, -0.0005942583084106445, -0.0002919435501098633, -2.491474151611328e-05, -1.1444091796875e-05, 0.0, -1.4543528777721804e-05, 0.0, -5.7220458984375e-06, -3.0517578125e-05, -5.53131103515625e-05, 0.0, -7.271752110682428e-06, -7.152557373046875e-05, -8.344646857949556e-07, -4.7921555960783735e-05, -2.3841855067985307e-07], "score": -0.13292904117262339, "choice_history": [43, 107, "Spellbreaker", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Spellbreaker", "<EOS>", 38, 100, "4", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 41, 120, "Silence", "<EOS>", 31, 72, 21, 95, "Minion", "Selector", "<EOS>", 147, 128, "players", "<EOS>", 25, 120, "Both", "Player", "<EOS>", 128, "picker", "<EOS>", 25, 120, "User", "Picker", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "4", "<EOS>", "3", "<EOS>"], "inferred_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Silence(),\n            MinionSelector(players=BothPlayer(), picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}], "gold_code": "class Spellbreaker(MinionCard):\n\n    def __init__(self):\n        super().__init__('Spellbreaker', 4, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=\n            Battlecry(Silence(), MinionSelector(players=BothPlayer(),\n            picker=UserPicker())))\n\n    def create_minion(self, player):\n        return Minion(4, 3)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 3}], "hole0": "SunfuryProtector", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Call", "func": {"_type": "Name", "id": "WeaponSelector"}, "args": [{"_type": "Template9", "hole0": "Adjacent"}]}]}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Attribute"}, "args": [{"s": "<UNK>", "_type": "Str"}, {"_type": "Call", "func": {"_type": "Name", "id": "WeaponSelector"}, "args": [{"_type": "Template9", "hole0": "Adjacent"}]}]}]}]}], "_type": "List"}]}, {"_type": "Template9", "hole0": "PlayerSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Sunfury Protector", "_type": "Str"}, {"n": 2, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -3.0517578125e-05, -6.63974933559075e-05, -0.0018829250475391746, -0.02477874420583248, -7.152393664000556e-07, -1.5735617125756107e-05, -9.536738616588991e-07, -1.1444091796875e-05, -7.62939453125e-06, -9.1552734375e-05, -5.7220458984375e-06, 0.0, -2.6941299438476562e-05, -3.814697265625e-06, -3.933906555175781e-06, -1.1920928244535389e-07, -5.53131103515625e-05, -3.814697265625e-06, 0.0, -2.0503786799963564e-05, -1.1920928955078125e-05, -0.0001587761944392696, -0.00015079975128173828, 0.0, 0.0, -0.00018519484729040414, 0.0, 0.0, -4.00543212890625e-05, -3.814697265625e-06, -8.96453857421875e-05, -5.78165017941501e-05, -2.9802276912960224e-06, -0.00027692312141880393, 0.0, -1.71661376953125e-05, -1.9073486328125e-06, -5.7220458984375e-06, -0.000339508056640625, -0.0015506744384765625, -1.9073486328125e-06, -0.0010739564895629883, 0.0, -0.00023651123046875, 0.0, -0.0005646944046020508, 0.0, -0.00287628173828125, -1.52587890625e-05, 0.0, 0.0, -7.62939453125e-06, -2.1457672119140625e-06, -0.000133514404296875, -0.002269744873046875, -1.9073486328125e-06, -1.9073486328125e-06, -1.9073486328125e-06, -0.008250799961388111, -0.0003802060673478991, -0.0006351470947265625, -0.03239631652832031, -7.62939453125e-06, -0.0019807815551757812, -2.09808349609375e-05, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -0.007714507170021534, -0.00023685830819886178, -1.52587890625e-05, -0.0036678314208984375, -1.33514404296875e-05, -9.5367431640625e-06, -5.7220458984375e-06, -0.000581547967158258, -0.02851128578186035, -1.9073486328125e-06, -0.017648696899414062, -0.17493438720703125, -5.7220458984375e-06, -9.5367431640625e-06, 0.0, -0.19406366348266602, -2.813339051499497e-05, -3.0517578125e-05, -0.0036716461181640625, -8.20159912109375e-05, -0.3613867461681366, -0.020285844802856445, -0.5279417037963867, -4.9591064453125e-05, -7.62939453125e-06, -1.52587890625e-05, -0.5512531995773315, -0.007625699043273926, 0.0, -0.0347137451171875, -1.71661376953125e-05, -1.52587890625e-05, -0.6697734594345093, -0.0023094371426850557, -0.0008602142333984375, -9.5367431640625e-06, 0.0, 0.0, -0.055147647857666016, -0.0013349056243896484, -5.7220458984375e-06, -0.1801280975341797, -1.52587890625e-05, -6.866455078125e-05, -7.62939453125e-06, -0.0003117076412308961, -0.6186212301254272, -3.933906555175781e-06, -0.054828643798828125, -0.28220081329345703, -5.7220458984375e-06, -7.62939453125e-06, 0.0, -0.18239223957061768, -2.4437902538920753e-05, -3.0517578125e-05, -0.0062103271484375, -8.0108642578125e-05, -0.7085596919059753, -0.027547121047973633, -0.5286045074462891, -8.0108642578125e-05, -9.5367431640625e-06, -1.71661376953125e-05, -0.4871814250946045, -0.006216168403625488, 0.0, -0.04661750793457031, -1.71661376953125e-05, -1.9073486328125e-05, -0.7510915994644165, -0.0022737933322787285, -0.0004291534423828125, -1.9073486328125e-06, -0.06934189796447754, -4.398822784423828e-05, 0.0, -9.34600830078125e-05, 0.0, -8.821482879284304e-06, 0.0, 0.0, -4.1961669921875e-05, -5.53131103515625e-05, 0.0, -2.1457672119140625e-06, -1.072883515007561e-05, 0.0, -1.1563251064217184e-05, 0.0], "score": -6.697960384962691, "choice_history": [43, 107, "Sunfury", "Protector", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Sunfury", " ", "Protector", "<EOS>", 38, 100, "2", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 34, 91, 139, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 31, 73, 21, 95, "Attribute", "<EOS>", 139, 39, 104, "<UNK>", "<EOS>", 31, 73, 21, 95, "Weapon", "Selector", "<EOS>", 138, 41, 120, "Adjacent", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 31, 73, 21, 95, "Attribute", "<EOS>", 139, 39, 104, "<UNK>", "<EOS>", 31, 73, 21, 95, "Weapon", "Selector", "<EOS>", 138, 41, 120, "Adjacent", "<EOS>", 41, 120, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "2", "<EOS>", "3", "<EOS>"], "inferred_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(\n            Attribute('<UNK>', WeaponSelector(Adjacent())))), Buff(\n            ChangeAttack(Attribute('<UNK>', WeaponSelector(Adjacent()))))]),\n            PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}], "gold_code": "class SunfuryProtector(MinionCard):\n\n    def __init__(self):\n        super().__init__('Sunfury Protector', 2, CHARACTER_CLASS.ALL,\n            CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())),\n            MinionSelector(Adjacent())))\n\n    def create_minion(self, player):\n        return Minion(2, 3)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 3, "_type": "Template7", "hole0": "Minion", "hole2": 3}], "hole0": "TinkmasterOverspark", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Summon"}, "args": [{"_type": "Template9", "hole0": "SquirrelSquirrel"}]}, {"_type": "Template9", "hole0": "PlayerSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Tinkmaster Overspark", "_type": "Str"}, {"n": 3, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "LEGENDARY", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.33514404296875e-05, -4.38690185546875e-05, -0.0007425187504850328, -0.00017152745567727834, -0.00021300431399140507, -1.1920917586394353e-07, -5.841255187988281e-06, -1.1920928244535389e-07, -3.62396240234375e-05, -8.0108642578125e-05, -0.000286102294921875, -1.33514404296875e-05, 0.0, -3.814697265625e-06, 0.0, -1.9073486328125e-06, 0.0, -1.33514404296875e-05, -1.9073486328125e-06, -1.9073486328125e-06, -7.390948667307384e-06, -9.775161743164062e-06, -1.561632234370336e-05, -1.9073486328125e-06, 0.0, -1.9073486328125e-06, -6.675696113234153e-06, -2.1457672119140625e-06, 0.0, -1.9073486328125e-05, 0.0, -3.24249267578125e-05, -1.1563301086425781e-05, -3.814697265625e-06, -0.0017170906066894531, 0.0, -8.20159912109375e-05, -3.814697265625e-06, -5.7220458984375e-06, -9.1552734375e-05, -0.00016021728515625, -3.814697265625e-06, -0.0013066530227661133, -2.09808349609375e-05, -2.6702880859375e-05, 0.0, -0.000179290771484375, 0.0, -0.0001659393310546875, -3.814697265625e-06, -1.9073486328125e-06, 0.0, -3.8504600524902344e-05, -1.9073486328125e-06, -0.046230316162109375, -0.0017681121826171875, -1.9073486328125e-06, -9.5367431640625e-06, -7.62939453125e-06, -0.11698706448078156, -0.00022373527463059872, -0.012975692749023438, -0.000335693359375, -3.4332275390625e-05, -0.3915489614009857, -0.7582387328147888, -0.07254661619663239, -1.52587890625e-05, -8.392333984375e-05, -0.014948129653930664, -3.254413604736328e-05, 0.0, -0.000396728515625, 0.0, -1.6212459740927443e-05, 0.0, -2.09808349609375e-05, -5.7220458984375e-06, -2.09808349609375e-05, 0.0, -1.9073486328125e-06, -1.1920926823449918e-07, 0.0, -4.4102343963459134e-05, 0.0], "score": -1.422046204631755, "choice_history": [43, 107, "Tinkmaster", "Overspark", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Tinkmaster", " ", "Overspark", "<EOS>", 38, 100, "3", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "LEGENDARY", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 139, 31, 73, 21, 95, "Summon", "<EOS>", 138, 41, 120, "Squirrel", "Squirrel", "<EOS>", 41, 120, "Player", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "3", "<EOS>", "3", "<EOS>"], "inferred_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(\n            SquirrelSquirrel()), PlayerSelector()))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}], "gold_code": "class TinkmasterOverspark(MinionCard):\n\n    def __init__(self):\n        super().__init__('Tinkmaster Overspark', 3, CHARACTER_CLASS.ALL,\n            CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardQuery(\n            source=CARD_SOURCE.LIST, source_list=[Devilsaur(), Squirrel()])\n            ), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\n\n    def create_minion(self, player):\n        return Minion(3, 3)\n"}
{"beams": [{"model_output": {"hole3": "use", "hole6": [{"hole1": "use", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"value": {"_type": "Call", "func": {"value": {"_type": "Name", "id": "copy"}, "attr": "copy", "_type": "Attribute"}, "args": [{"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}]}, "_type": "Assign", "targets": [{"_type": "Name", "id": "option"}]}, {"hole1": "change_attack", "_type": "Template8", "hole0": {"_type": "Name", "id": "target"}, "hole2": [{"n": 3, "_type": "Num"}]}, {"hole1": "increase_health", "_type": "Template8", "hole0": {"_type": "Name", "id": "target"}, "hole2": [{"n": 4, "_type": "Num"}]}], "hole0": "Vaporize", "hole2": [{"hole3": "RARE", "hole1": 3, "_type": "Template4", "hole0": "Vaporize", "hole2": "MAGE"}], "hole7": [{"name": "can_use", "_type": "FunctionDef", "args": {"_type": "arguments", "args": [{"arg": "self", "_type": "arg"}, {"arg": "player", "_type": "arg"}, {"arg": "game", "_type": "arg"}]}, "body": [{"value": {"op": {"_type": "And"}, "_type": "BoolOp", "values": [{"_type": "Call", "func": {"value": {"_type": "Template9", "hole0": "super"}, "attr": "can_use", "_type": "Attribute"}, "args": [{"_type": "Name", "id": "player"}, {"_type": "Name", "id": "game"}]}, {"comparators": [{"n": 7, "_type": "Num"}], "left": {"_type": "Call", "func": {"_type": "Name", "id": "len"}, "args": [{"value": {"value": {"_type": "Name", "id": "self"}, "attr": "player", "_type": "Attribute"}, "attr": "minions", "_type": "Attribute"}]}, "ops": [{"_type": "Lt"}], "_type": "Compare"}]}, "_type": "Return"}]}], "hole5": [{"arg": "game", "_type": "arg"}], "hole1": "SecretCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -0.7214689254760742, -5.924526340095326e-05, -0.00011848745634779334, -0.021320808678865433, -2.9444496249197982e-05, -2.2649765014648438e-06, -0.008198738098144531, -0.3709983825683594, -4.38690185546875e-05, -5.757642793469131e-05, -7.62939453125e-06, -4.768370445162873e-07, -0.0012171011185273528, -0.10011833906173706, -5.841255187988281e-06, -0.019038915634155273, 0.0, -0.0008087158203125, 0.0, -0.00011038692900910974, 0.0, -0.0023822784423828125, -1.71661376953125e-05, -1.2040138244628906e-05, -3.576278118089249e-07, -0.7062788009643555, -0.000659942626953125, -0.0024204254150390625, -1.1444091796875e-05, -1.9073486328125e-06, -3.62396240234375e-05, 0.0, -0.0001163482666015625, 0.0, -1.9073486328125e-06, -8.96453857421875e-05, 0.0, -3.802776336669922e-05, 0.0, -9.5367431640625e-06, 0.0, -9.5367431640625e-06, 0.0, -0.28002262115478516, -3.814697265625e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -2.2558369636535645, 0.0, -0.0027980804443359375, -0.21002578735351562, -0.0001068115234375, 0.0, -0.38950061798095703, 0.0, -0.560943603515625, 0.0, -0.0019178390502929688, 0.0, 0.0, -5.7220458984375e-06, 0.0, -0.001873016357421875, -7.62939453125e-06, -3.814697265625e-06, -1.9073486328125e-06, -3.838538395939395e-05, 0.0, -0.0014764070510864258, 0.0, -0.003704666392877698, -5.7220458984375e-06, -0.0001430511474609375, -0.016065597534179688, -0.1155996322631836, 0.0, -0.40605974197387695, 0.0, -0.4906015396118164, 0.0, -0.000308990478515625, -0.004390716552734375, 0.0, -0.10974252223968506, 0.0, -0.0001087188720703125, -0.0060634613037109375, -0.2601165771484375, 0.0, -0.07474339008331299, 0.0, -0.5573892593383789, -1.9073486328125e-06, -0.000339508056640625, -0.000858306884765625, 0.0, -0.6392564177513123, 0.0, -0.0058841705322265625, -0.20209407806396484, -0.00296783447265625, -0.032021522521972656, -1.9073486328125e-06, -0.000640869140625, -1.52587890625e-05, -0.003147125244140625, -3.814697265625e-06, -3.814697265625e-06, 0.0, 0.0, -0.0001697540283203125, 0.0, -1.71661376953125e-05, -0.0002689361572265625, 0.0, -0.006946563720703125, -0.005100250244140625, -0.000118255615234375, -0.010259628295898438, -0.0004329681396484375, -9.1552734375e-05, -0.0002079010009765625, -2.288818359375e-05, -0.0001163482666015625, -0.000423431396484375, -0.0001049041748046875, -0.0002079010009765625, -9.5367431640625e-05, -0.00016021728515625, 0.0, -0.0002956390380859375, 0.0, -3.814697265625e-06, -2.09808349609375e-05, 0.0, -9.226798283634707e-05, 0.0, -0.0002536773681640625, 0.0, -0.00021755695343017578, 0.0, -0.03436851501464844, -3.814697265625e-06, -0.0007028579711914062, -7.2479248046875e-05, 0.0, 0.0, -2.729891821218189e-05, -2.3841855067985307e-07, -5.7220458984375e-06, -1.9073486328125e-05, 0.0, -0.11446475982666016, -1.9073486328125e-06, -1.9073486328125e-06, 0.0, -5.829334259033203e-05, 0.0, -0.0006580352783203125, 0.0, -0.00499725341796875, -3.814697265625e-06, -0.0001068115234375, -0.005448341369628906, -2.86102294921875e-05, -6.4849853515625e-05, -3.814697265625e-06, -0.0041604009456932545, 0.0], "score": -8.78337592652295, "choice_history": [43, 110, "Vaporize", "<EOS>", "Secret", "Card", "<EOS>", 151, 58, 113, "Vaporize", "<EOS>", "3", "<EOS>", "MAGE", "<EOS>", "RARE", "<EOS>", "use", "<EOS>", "player", "<EOS>", 132, 125, "game", "<EOS>", 154, 60, 118, 25, 120, "super", "<EOS>", "use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 48, 65, 138, 36, 95, "option", "<EOS>", 16, 73, 13, 66, 21, 95, "copy", "<EOS>", "copy", "<EOS>", 138, 28, 66, 13, 66, 21, 95, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 60, 118, 21, 95, "target", "<EOS>", "change_attack", "<EOS>", 138, 38, 100, "3", "<EOS>", 60, 118, 21, 95, "target", "<EOS>", "increase_health", "<EOS>", 138, 38, 100, "4", "<EOS>", 151, 53, 79, "can_use", "<EOS>", 1, 126, 134, 125, "self", "<EOS>", 125, "player", "<EOS>", 125, "game", "<EOS>", 151, 56, 102, 15, 69, 2, 139, 31, 73, 13, 66, 25, 120, "super", "<EOS>", "can_use", "<EOS>", 139, 36, 95, "player", "<EOS>", 36, 95, "game", "<EOS>", 32, 76, 16, 73, 21, 95, "len", "<EOS>", 138, 28, 66, 13, 66, 21, 95, "self", "<EOS>", "player", "<EOS>", "minions", "<EOS>", 135, 10, 138, 38, 100, "7", "<EOS>"], "inferred_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def use(self, player, game):\n        super().use(player, game)\n        option = copy.copy(self.player.minions)\n        target.change_attack(3)\n        target.increase_health(4)\n\n    def can_use(self, player, game):\n        return super().can_use(player, game) and len(self.player.minions) < 7\n"}], "gold_code": "class Vaporize(SecretCard):\n\n    def __init__(self):\n        super().__init__('Vaporize', 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\n\n    def _reveal(self, attacker, target):\n        if target is self.player.hero and attacker.is_minion(\n            ) and not attacker.removed:\n            attacker.die(self)\n            attacker.game.check_delayed()\n            super().reveal()\n\n    def activate(self, player):\n        player.opponent.bind('character_attack', self._reveal)\n\n    def deactivate(self, player):\n        player.opponent.unbind('character_attack', self._reveal)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"value": true, "_type": "NameConstant"}, "arg": "stealth", "_type": "keyword"}], "hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 1}], "hole0": "WorgenInfiltrator", "hole2": [{"hole3": "COMMON", "hole1": 1, "_type": "Template4", "hole0": "Worgen Infiltrator", "hole2": "ALL"}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.71661376953125e-05, -0.0019311904907226562, -0.0005548844928853214, -5.066266385256313e-05, -2.109982233378105e-05, 0.0, -7.867813110351562e-06, -7.390948667307384e-06, -2.09808349609375e-05, -3.0517578125e-05, -0.000461578369140625, -4.768370445162873e-07, -7.140544767025858e-05, 0.0, -2.3841855067985307e-07, -0.007218257058411837, -2.2649765014648438e-06, -0.00032089490559883416, 0.0, -0.00014102428394835442, 0.0, -0.00019848346710205078, 0.0, -6.85451232129708e-05, 0.0, -9.5367431640625e-06, -4.9591064453125e-05, -2.47955322265625e-05, 0.0, -3.576278118089249e-07, -7.62939453125e-06, 0.0, -3.933904736186378e-06, 0.0, -0.3143749237060547, -3.814697265625e-06, -0.004693508148193359, -9.5367431640625e-06, -0.0004215240478515625, -2.86102294921875e-05, -3.314017885713838e-05, 0.0], "score": -0.33078583168733644, "choice_history": [43, 107, "Worgen", "Infiltrator", "<EOS>", "Minion", "Card", "<EOS>", 151, 58, 113, "Worgen", " ", "Infiltrator", "<EOS>", "1", "<EOS>", "ALL", "<EOS>", "COMMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "2", "<EOS>", "1", "<EOS>", 146, 128, "stealth", "<EOS>", 22, 96, "True", "<EOS>"], "inferred_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}], "gold_code": "class WorgenInfiltrator(MinionCard):\n\n    def __init__(self):\n        super().__init__('Worgen Infiltrator', 1, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, stealth=True)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 5, "_type": "Template7", "hole0": "Minion", "hole2": 4}], "hole0": "BlackwingCorruptor", "hole2": [{"hole3": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Damage"}, "args": [{"n": 1, "_type": "Num"}]}, {"keywords": [{"value": {"_type": "Template9", "hole0": "BothPlayer"}, "arg": "players", "_type": "keyword"}, {"value": {"_type": "Template9", "hole0": "UserPicker"}, "arg": "picker", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "CharacterSelector"}}, {"keywords": [{"value": {"n": 0, "_type": "Num"}, "arg": "value", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "GreaterThan"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Count"}, "args": [{"keywords": [{"value": {"_type": "Call", "func": {"_type": "Name", "id": "IsType"}, "args": [{"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON", "_type": "Attribute"}]}, "arg": "condition", "_type": "keyword"}], "_type": "Call", "func": {"_type": "Name", "id": "CardSelector"}}]}]}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Blackwing Corruptor", "_type": "Str"}, {"n": 5, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -7.82012939453125e-05, -0.0017272805562242866, -0.000789688085205853, -6.4490144723095e-05, -4.768335202243179e-07, -4.0531158447265625e-06, 0.0, -3.814697265625e-06, -8.7738037109375e-05, -4.1961669921875e-05, -7.62939453125e-06, 0.0, -3.24249267578125e-05, 0.0, -1.9073486328125e-06, 0.0, -0.0001220703125, -1.9073486328125e-06, 0.0, -4.768370445162873e-07, -1.0251998901367188e-05, -3.6954863844584906e-06, -2.3841855067985307e-07, 0.0, -1.9073486328125e-06, -0.09867740422487259, -1.4305111108114943e-05, -3.814697265625e-06, -0.0001239776611328125, -1.9073486328125e-06, -3.814697265625e-06, -1.1801710570580326e-05, -1.013275596051244e-05, -0.00037916869041509926, 0.0, -2.09808349609375e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -1.33514404296875e-05, -1.9073486328125e-06, -0.002396821975708008, 0.0, -0.0002841949462890625, -1.9073486328125e-06, -0.0007325410842895508, 0.0, -9.5367431640625e-06, -9.5367431640625e-06, 0.0, 0.0, -3.4332275390625e-05, -2.9802317840221804e-06, -0.5441570281982422, -2.86102294921875e-05, -9.5367431640625e-06, 0.0, -6.29425048828125e-05, -0.04349275305867195, -0.0017597944242879748, -5.53131103515625e-05, -0.0022878646850585938, -0.000972747802734375, -0.5987579822540283, -7.033347174001392e-06, -0.0008602142333984375, -0.006516456604003906, -2.09808349609375e-05, 0.0, -0.009199380874633789, -7.855892181396484e-05, 0.0, -0.13246631622314453, -2.09808349609375e-05, -0.0028046369552612305, -1.33514404296875e-05, -1.1444091796875e-05, 0.0, -0.0011970996856689453, -1.52587890625e-05, -0.000156402587890625, 0.0, -0.00027370452880859375, -1.9073486328125e-06, -0.0060253143310546875, 0.0, -0.0011692047119140625, -0.0001316070556640625, -5.7220458984375e-06, -0.0020809173583984375, -0.0034122467041015625, -0.0004787445068359375, -1.71661376953125e-05, -0.002351999282836914, -0.0015869135968387127, -1.9073486328125e-06, -3.814697265625e-06, -1.1444091796875e-05, -1.1444091796875e-05, 0.0, 0.0, -0.0009484291076660156, -5.5313103075604886e-05, -1.1444091796875e-05, -0.0402069091796875, -0.019629478454589844, -1.71661376953125e-05, 0.0, -0.015978693962097168, -0.0001049041748046875, 0.0, -0.005580902099609375, -7.62939453125e-06, -0.05760085582733154, -1.9073486328125e-06, -0.0036525726318359375, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.11179661750793457, -0.0003701448440551758, -1.1920928244535389e-07, -2.09808349609375e-05, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, 0.0, -0.31447458267211914, -6.401495193131268e-05, -0.004230976104736328, -1.52587890625e-05, -0.0011587142944335938, -3.814697265625e-06, -0.013600349426269531, -0.0001010894775390625, -0.006434440612792969, -1.9073486328125e-06, -0.0005846881540492177, 0.0, -0.004124045372009277, -1.9073486328125e-06, -0.00013696310634259135, 0.0, -5.7220458984375e-06, -1.71661376953125e-05, -5.53131103515625e-05, 0.0, -3.814697265625e-06, -0.00020444393157958984, -2.3841855067985307e-07, -0.00025177001953125, -1.1920928244535389e-07], "score": -2.069719210759601, "choice_history": [43, 107, "Blackwing", "Corruptor", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Blackwing", " ", "Corruptor", "<EOS>", 38, 100, "5", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 140, 31, 73, 21, 95, "Damage", "<EOS>", 138, 38, 100, "1", "<EOS>", 31, 72, 21, 95, "Character", "Selector", "<EOS>", 147, 128, "players", "<EOS>", 25, 120, "Both", "Player", "<EOS>", 128, "picker", "<EOS>", 25, 120, "User", "Picker", "<EOS>", 31, 74, 21, 95, "Greater", "Than", "<EOS>", 138, 31, 73, 21, 95, "Count", "<EOS>", 138, 31, 72, 21, 95, "Card", "Selector", "<EOS>", 146, 128, "condition", "<EOS>", 16, 73, 21, 95, "Is", "Type", "<EOS>", 138, 28, 66, 21, 95, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 146, 128, "value", "<EOS>", 23, 100, "0", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "5", "<EOS>", "4", "<EOS>"], "inferred_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}], "gold_code": "class BlackwingCorruptor(MinionCard):\n\n    def __init__(self):\n        super().__init__('Blackwing Corruptor', 5, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3),\n            CharacterSelector(players=BothPlayer(), picker=UserPicker()),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(5, 4)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 6, "_type": "Template7", "hole0": "Minion", "hole2": 6}], "hole0": "DrakonidCrusher", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}, {"value": {"_type": "Call", "func": {"_type": "Name", "id": "Battlecry"}, "args": [{"_type": "Template9", "hole0": "Kill"}, {"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeAttack"}, "args": [{"n": 2, "_type": "Num"}]}]}, {"_type": "Call", "func": {"_type": "Name", "id": "Buff"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 3, "_type": "Num"}]}]}], "_type": "List"}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}, "arg": "battlecry", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Drakonid Crusher", "_type": "Str"}, {"n": 6, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [-1.9073486328125e-06, -9.5367431640625e-06, -0.0004770818632096052, -5.745722592109814e-05, -4.172238186583854e-05, -1.1920883480343036e-07, -4.0531158447265625e-06, -1.1920928244535389e-07, -1.71661376953125e-05, -5.7220458984375e-06, -5.91278076171875e-05, -7.62939453125e-06, 0.0, -2.86102294921875e-05, 0.0, -1.9073486328125e-06, 0.0, -3.814697265625e-05, 0.0, 0.0, -9.536738616588991e-07, -1.5854835510253906e-05, -4.053113570989808e-06, 0.0, 0.0, -5.7220458984375e-06, -1.5983740013325587e-05, -5.7220440794480965e-06, -1.9073486328125e-06, -1.33514404296875e-05, 0.0, -1.9073486328125e-06, -3.635841858340427e-05, -5.722029527532868e-06, -0.0005448886658996344, 0.0, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -1.1444091796875e-05, -3.063678741455078e-05, -9.5367431640625e-06, -0.0003968477249145508, 0.0, -0.00545501708984375, -1.9073486328125e-06, -3.933906555175781e-06, -1.9073486328125e-06, -3.4332275390625e-05, -6.866455078125e-05, -5.7220458984375e-06, 0.0, -7.11679458618164e-05, -1.2755334864777979e-05, -0.012926936149597168, 0.0, -3.814697265625e-06, -0.000194549560546875, 0.0, -2.86102294921875e-05, -7.62939453125e-06, -5.7220458984375e-06, 0.0, -0.0003453493118286133, 0.0, -0.010334014892578125, -0.3331947326660156, -1.9073486328125e-06, -0.08482770621776581, -0.0001230164198204875, -3.0517578125e-05, -0.040920257568359375, 0.0, -1.9073486328125e-06, -0.3894912004470825, -7.056992035359144e-05, -0.0002269744873046875, -0.008043289184570312, -2.09808349609375e-05, -0.0085296630859375, -3.814697265625e-06, -3.814697265625e-06, -1.9073486328125e-06, -3.814697265625e-06, -3.3617016015341505e-05, -1.1920928244535389e-07, -1.9073486328125e-06, -0.0006313323974609375, -9.5367431640625e-06, -5.7220458984375e-06, -5.53131103515625e-05, -0.00036080871359445155, -0.0055304765701293945, -1.9073486328125e-06, -0.0003032684326171875, -0.0018749237060546875, -3.814697265625e-06, -0.4882272481918335, 0.0, -0.00016021728515625, -5.7220458984375e-06, -1.9073486328125e-06, -0.0003414154052734375, -0.00034236907958984375, -1.52587890625e-05, -5.7220458984375e-06, -0.0017032623291015625, -4.00543212890625e-05, -1.71661376953125e-05, -0.0001049041748046875, -0.00022302093566395342, -0.0655289888381958, 0.0, -0.000186920166015625, -0.001445770263671875, -5.7220458984375e-06, -0.16103921830654144, 0.0, -5.53131103515625e-05, 0.0, -0.0004405975341796875, -7.867813110351562e-06, 0.0, -2.288818359375e-05, 0.0, -1.2636171959456988e-05, 0.0, -1.1444091796875e-05, -0.0001068115234375, -1.33514404296875e-05, 0.0, -7.62939453125e-06, -3.814697265625e-06, 0.0, -1.3363896869122982e-06, 0.0], "score": -1.6257539826014948, "choice_history": [43, 107, "Drakonid", "Crusher", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Drakonid", " ", "Crusher", "<EOS>", 38, 100, "6", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 147, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", 128, "battlecry", "<EOS>", 16, 73, 21, 95, "Battlecry", "<EOS>", 140, 41, 120, "Kill", "<EOS>", 31, 73, 21, 95, "Give", "<EOS>", 138, 34, 91, 139, 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Attack", "<EOS>", 138, 38, 100, "2", "<EOS>", 31, 73, 21, 95, "Buff", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "3", "<EOS>", 41, 120, "Self", "Selector", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "6", "<EOS>", "6", "<EOS>"], "inferred_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Kill(), Give([Buff(ChangeAttack(2)), Buff(\n            ChangeHealth(3))]), SelfSelector()))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}], "gold_code": "class DrakonidCrusher(MinionCard):\n\n    def __init__(self):\n        super().__init__('Drakonid Crusher', 6, CHARACTER_CLASS.ALL,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]),\n            SelfSelector(), Not(GreaterThan(Attribute('health',\n            HeroSelector(EnemyPlayer())), value=15))))\n\n    def create_minion(self, player):\n        return Minion(6, 6)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole1": 1, "_type": "Template7", "hole0": "Minion", "hole2": 1}], "hole0": "Imp", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DEMON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Imp", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "ALL", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "RARE", "_type": "Attribute"}, {"value": true, "_type": "NameConstant"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -0.0001010894775390625, -0.0002783149539027363, -8.844987314660102e-05, -6.2408740632236e-05, -1.71661376953125e-05, -9.536738616588991e-07, -7.2479248046875e-05, -3.0517578125e-05, -0.04766845703125, -1.1444091796875e-05, 0.0, -0.00011277198791503906, 0.0, -3.409385681152344e-05, 0.0, -0.000812530517578125, -7.62939453125e-06, 0.0, -1.5735502529423684e-05, -1.9073486328125e-06, -3.814697265625e-06, -1.9073486328125e-06, -0.000635505304671824, 0.0, -3.814697265625e-06, -3.814697265625e-06, 0.0, -1.9073486328125e-06, -2.717969982768409e-05, 0.0, -0.0015431642532348633, 0.0, -6.866455078125e-05, -7.43865966796875e-05, -1.9073486328125e-06, -7.62939453125e-06, -0.0006866455078125, 0.0, -0.00079345703125, 0.0, -5.53131103515625e-05, -3.814697265625e-06, -3.266334533691406e-05, 0.0, -0.0016689300537109375, 0.0, -4.00543212890625e-05, 0.0, -0.00019073486328125, -1.9073486328125e-06, -3.814697265625e-06, 0.0, -5.9604644775390625e-06, -2.3841855067985307e-07, -0.0009539127349853516, 0.0, -1.33514404296875e-05, 0.0, -0.0008000134839676321, 0.0, -1.1444091796875e-05, -1.9073486328125e-06, -4.9591064453125e-05, 0.0, 0.0, -2.026555193879176e-06, 0.0, -5.722025889554061e-06, 0.0], "score": -0.05701114795598983, "choice_history": [43, 107, "Imp", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 142, 39, 104, "Imp", "<EOS>", 38, 100, "1", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "ALL", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "RARE", "<EOS>", 37, 96, "False", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "DEMON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 115, "Minion", "<EOS>", "1", "<EOS>", "1", "<EOS>"], "inferred_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            True, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}], "gold_code": "class Imp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Imp', 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\n            False, minion_type=MINION_TYPE.DEMON)\n\n    def create_minion(self, player):\n        return Minion(1, 1)\n"}
{"beams": [{"model_output": {"hole3": "create_minion", "hole6": [{"hole3": [{"value": {"elts": [{"_type": "Call", "func": {"_type": "Name", "id": "Effect"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "CardPlayed"}, "args": [{"_type": "Template9", "hole0": "HasHealth"}]}, {"_type": "Call", "func": {"_type": "Name", "id": "ActionTag"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "Give"}, "args": [{"_type": "Call", "func": {"_type": "Name", "id": "ChangeHealth"}, "args": [{"n": 2, "_type": "Num"}]}]}, {"_type": "Template9", "hole0": "SelfSelector"}]}]}], "_type": "List"}, "arg": "effects", "_type": "keyword"}], "hole1": 2, "_type": "Template7", "hole0": "Minion", "hole2": 1}], "hole0": "TwilightWhelp", "hole2": [{"hole3": [{"value": {"value": {"_type": "Name", "id": "MINION_TYPE"}, "attr": "DRAGON", "_type": "Attribute"}, "arg": "minion_type", "_type": "keyword"}], "hole1": "__init__", "_type": "Template8", "hole0": {"_type": "Template9", "hole0": "super"}, "hole2": [{"s": "Twilight Whelp", "_type": "Str"}, {"n": 1, "_type": "Num"}, {"value": {"_type": "Name", "id": "CHARACTER_CLASS"}, "attr": "WARRIOR", "_type": "Attribute"}, {"value": {"_type": "Name", "id": "CARD_RARITY"}, "attr": "COMMON", "_type": "Attribute"}]}], "hole1": "MinionCard", "_type": "Template0", "hole4": "player"}, "score_history": [0.0, -5.7220458984375e-06, -7.629378160345368e-06, -5.125986263010418e-06, -1.9788545614574105e-05, -4.4103580876253545e-06, -4.0531158447265625e-06, -1.1920928244535389e-07, -7.62939453125e-06, -2.09808349609375e-05, -3.4332275390625e-05, -9.5367431640625e-06, 0.0, -3.24249267578125e-05, 0.0, -1.9073486328125e-05, 0.0, -0.00032806396484375, 0.0, 0.0, -8.344646857949556e-07, -1.3709068298339844e-05, -5.245195097813848e-06, 0.0, 0.0, 0.0, -1.2040887668263167e-05, -6.079665126890177e-06, -3.814697265625e-06, -0.0001811981201171875, -3.814697265625e-06, -1.9073486328125e-06, -0.0005977796390652657, -3.2186455882765586e-06, -0.6692192554473877, 0.0, -8.58306884765625e-05, -5.7220458984375e-06, -3.814697265625e-06, -9.5367431640625e-06, -0.00024628639221191406, -1.9073486328125e-06, -0.00012421607971191406, 0.0, -0.03965950012207031, -1.9073486328125e-06, -0.00024569034576416016, -2.3841855067985307e-07, -0.0005092620849609375, 0.0, -8.392333984375e-05, -3.814697265625e-06, -1.3232186574896332e-05, -1.3112959095451515e-05, -0.0020689964294433594, 0.0, 0.0, 0.0, -4.0531158447265625e-06, 0.0, -0.0001392364501953125, -5.7220458984375e-06, -0.162139892578125, 0.0, 0.0, -8.213520050048828e-05, 0.0, -2.7418097943154862e-06, 0.0, -0.000133514404296875, -1.9073486328125e-06, -0.22542023658752441, 0.0, -0.00020599365234375, -3.814697265625e-06, -0.000278472900390625, -3.814697265625e-06, -3.814697265625e-06, -2.6702880859375e-05, -1.9073486328125e-06, -0.0010950565338134766, 0.0, -1.9073486328125e-05, -0.014593124389648438, -0.015513420104980469, -5.53131103515625e-05, -1.9073486328125e-06, -0.3296414613723755, -0.2337874174118042, -6.4849853515625e-05, -0.000476837158203125, -0.0027332305908203125, -1.71661376953125e-05, -0.6621288657188416, -0.00910651683807373, -4.362964682513848e-05, -0.00897216796875, -0.0019092559814453125, 0.0, 0.0, -0.00014317035675048828, -3.635883331298828e-05, 0.0, -1.71661376953125e-05, -0.0002918243408203125, -7.62939453125e-06, -1.9073486328125e-06, -0.0001068115234375, -0.0009705994161777198, -7.271765298355604e-06, -9.5367431640625e-06, -0.02413177490234375, -5.7220458984375e-06, -3.814697265625e-06, -3.814697265625e-06, -1.3709065569855738e-05, -0.08781147003173828, 0.0, -4.00543212890625e-05, -0.000392913818359375, 0.0, -0.5009118318557739, 0.0, -0.0003948211669921875, 0.0, -0.0023027658462524414, -1.6450841940240934e-05, 0.0], "score": -2.9998594532863407, "choice_history": [43, 107, "Twilight", "Whelp", "<EOS>", "Minion", "Card", "<EOS>", 151, 60, 119, 25, 120, "super", "<EOS>", "__init__", "<EOS>", 141, 39, 104, "Twilight", " ", "Whelp", "<EOS>", 38, 100, "1", "<EOS>", 28, 66, 21, 95, "CHARACTER_CLASS", "<EOS>", "WARRIOR", "<EOS>", 28, 66, 21, 95, "CARD_RARITY", "<EOS>", "COMMON", "<EOS>", 146, 128, "minion_type", "<EOS>", 13, 66, 21, 95, "MINION_TYPE", "<EOS>", "DRAGON", "<EOS>", "create_minion", "<EOS>", "player", "<EOS>", 151, 59, 116, "Minion", "<EOS>", "2", "<EOS>", "1", "<EOS>", 146, 128, "effects", "<EOS>", 19, 91, 138, 31, 73, 21, 95, "Effect", "<EOS>", 139, 31, 73, 21, 95, "Card", "Played", "<EOS>", 138, 41, 120, "Has", "Health", "<EOS>", 31, 73, 21, 95, "Action", "Tag", "<EOS>", 139, 31, 73, 21, 95, "Give", "<EOS>", 138, 31, 73, 21, 95, "Change", "Health", "<EOS>", 138, 38, 100, "2", "<EOS>", 41, 120, "Self", "Selector", "<EOS>"], "inferred_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.WARRIOR,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\n\n    def create_minion(self, player):\n        return Minion(2, 1, effects=[Effect(CardPlayed(HasHealth()),\n            ActionTag(Give(ChangeHealth(2)), SelfSelector()))])\n"}], "gold_code": "class TwilightWhelp(MinionCard):\n\n    def __init__(self):\n        super().__init__('Twilight Whelp', 1, CHARACTER_CLASS.PRIEST,\n            CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=\n            Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(),\n            GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.\n            DRAGON))), value=0)))\n\n    def create_minion(self, player):\n        return Minion(2, 1)\n"}
